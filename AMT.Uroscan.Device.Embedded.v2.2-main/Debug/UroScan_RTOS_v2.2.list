
UroScan_RTOS_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08010b44  08010b44  00011b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010dc0  08010dc0  000120ac  2**0
                  CONTENTS
  4 .ARM          00000008  08010dc0  08010dc0  00011dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010dc8  08010dc8  000120ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08010dc8  08010dc8  00011dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08010dd4  08010dd4  00011dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08010de0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000120ac  2**0
                  CONTENTS
 10 .bss          0000944c  200000b0  200000b0  000120b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200094fc  200094fc  000120b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000120ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a81a  00000000  00000000  000120dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056fc  00000000  00000000  0003c8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da8  00000000  00000000  00041ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a85f  00000000  00000000  00043da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000ba7c  00000000  00000000  0005e5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0006a07b  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000016fe  00000000  00000000  0006a0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000088b8  00000000  00000000  0006b7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00074074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010b2c 	.word	0x08010b2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08010b2c 	.word	0x08010b2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96a 	b.w	8000dd8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	460c      	mov	r4, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d14e      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	458c      	cmp	ip, r1
 8000b2c:	4686      	mov	lr, r0
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	d962      	bls.n	8000bfa <__udivmoddi4+0xde>
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	4319      	orrs	r1, r3
 8000b46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4e:	fa1f f68c 	uxth.w	r6, ip
 8000b52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb04 f106 	mul.w	r1, r4, r6
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b72:	f080 8112 	bcs.w	8000d9a <__udivmoddi4+0x27e>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 810f 	bls.w	8000d9a <__udivmoddi4+0x27e>
 8000b7c:	3c02      	subs	r4, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	fa1f f38e 	uxth.w	r3, lr
 8000b86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb00 f606 	mul.w	r6, r0, r6
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x94>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba2:	f080 80fc 	bcs.w	8000d9e <__udivmoddi4+0x282>
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	f240 80f9 	bls.w	8000d9e <__udivmoddi4+0x282>
 8000bac:	4463      	add	r3, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11d      	cbz	r5, 8000bc2 <__udivmoddi4+0xa6>
 8000bba:	40d3      	lsrs	r3, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d905      	bls.n	8000bd6 <__udivmoddi4+0xba>
 8000bca:	b10d      	cbz	r5, 8000bd0 <__udivmoddi4+0xb4>
 8000bcc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e7f5      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d146      	bne.n	8000c6c <__udivmoddi4+0x150>
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xcc>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f0c0 80f0 	bcc.w	8000dc8 <__udivmoddi4+0x2ac>
 8000be8:	1a86      	subs	r6, r0, r2
 8000bea:	eb64 0303 	sbc.w	r3, r4, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0e6      	beq.n	8000bc2 <__udivmoddi4+0xa6>
 8000bf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf8:	e7e3      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	f040 8090 	bne.w	8000d20 <__udivmoddi4+0x204>
 8000c00:	eba1 040c 	sub.w	r4, r1, ip
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa1f f78c 	uxth.w	r7, ip
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1e:	fb07 f006 	mul.w	r0, r7, r6
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x11c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x11a>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f200 80cd 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000c36:	4626      	mov	r6, r4
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c42:	fb08 4410 	mls	r4, r8, r0, r4
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	fb00 f707 	mul.w	r7, r0, r7
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x148>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x146>
 8000c5c:	429f      	cmp	r7, r3
 8000c5e:	f200 80b0 	bhi.w	8000dc2 <__udivmoddi4+0x2a6>
 8000c62:	4620      	mov	r0, r4
 8000c64:	1bdb      	subs	r3, r3, r7
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0x9c>
 8000c6c:	f1c1 0620 	rsb	r6, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 f706 	lsr.w	r7, r2, r6
 8000c76:	431f      	orrs	r7, r3
 8000c78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c80:	ea43 030c 	orr.w	r3, r3, ip
 8000c84:	40f4      	lsrs	r4, r6
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	0c38      	lsrs	r0, r7, #16
 8000c8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c90:	fbb4 fef0 	udiv	lr, r4, r0
 8000c94:	fa1f fc87 	uxth.w	ip, r7
 8000c98:	fb00 441e 	mls	r4, r0, lr, r4
 8000c9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca4:	45a1      	cmp	r9, r4
 8000ca6:	fa02 f201 	lsl.w	r2, r2, r1
 8000caa:	d90a      	bls.n	8000cc2 <__udivmoddi4+0x1a6>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cb2:	f080 8084 	bcs.w	8000dbe <__udivmoddi4+0x2a2>
 8000cb6:	45a1      	cmp	r9, r4
 8000cb8:	f240 8081 	bls.w	8000dbe <__udivmoddi4+0x2a2>
 8000cbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	eba4 0409 	sub.w	r4, r4, r9
 8000cc6:	fa1f f983 	uxth.w	r9, r3
 8000cca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cce:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x1d2>
 8000cde:	193c      	adds	r4, r7, r4
 8000ce0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce4:	d267      	bcs.n	8000db6 <__udivmoddi4+0x29a>
 8000ce6:	45a4      	cmp	ip, r4
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0x29a>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	443c      	add	r4, r7
 8000cee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cf6:	eba4 040c 	sub.w	r4, r4, ip
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	469c      	mov	ip, r3
 8000d00:	d351      	bcc.n	8000da6 <__udivmoddi4+0x28a>
 8000d02:	d04e      	beq.n	8000da2 <__udivmoddi4+0x286>
 8000d04:	b155      	cbz	r5, 8000d1c <__udivmoddi4+0x200>
 8000d06:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d12:	40cb      	lsrs	r3, r1
 8000d14:	431e      	orrs	r6, r3
 8000d16:	40cc      	lsrs	r4, r1
 8000d18:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e750      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f103 	lsr.w	r1, r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d30:	4094      	lsls	r4, r2
 8000d32:	430c      	orrs	r4, r1
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3110 	mls	r1, r8, r0, r3
 8000d48:	0c23      	lsrs	r3, r4, #16
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f107 	mul.w	r1, r0, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x24c>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d5e:	d22c      	bcs.n	8000dba <__udivmoddi4+0x29e>
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d92a      	bls.n	8000dba <__udivmoddi4+0x29e>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d70:	fb08 3311 	mls	r3, r8, r1, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb01 f307 	mul.w	r3, r1, r7
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x276>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d88:	d213      	bcs.n	8000db2 <__udivmoddi4+0x296>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d911      	bls.n	8000db2 <__udivmoddi4+0x296>
 8000d8e:	3902      	subs	r1, #2
 8000d90:	4464      	add	r4, ip
 8000d92:	1ae4      	subs	r4, r4, r3
 8000d94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d98:	e739      	b.n	8000c0e <__udivmoddi4+0xf2>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	e6f0      	b.n	8000b80 <__udivmoddi4+0x64>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e706      	b.n	8000bb0 <__udivmoddi4+0x94>
 8000da2:	45c8      	cmp	r8, r9
 8000da4:	d2ae      	bcs.n	8000d04 <__udivmoddi4+0x1e8>
 8000da6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000daa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dae:	3801      	subs	r0, #1
 8000db0:	e7a8      	b.n	8000d04 <__udivmoddi4+0x1e8>
 8000db2:	4631      	mov	r1, r6
 8000db4:	e7ed      	b.n	8000d92 <__udivmoddi4+0x276>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e799      	b.n	8000cee <__udivmoddi4+0x1d2>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e7d4      	b.n	8000d68 <__udivmoddi4+0x24c>
 8000dbe:	46d6      	mov	lr, sl
 8000dc0:	e77f      	b.n	8000cc2 <__udivmoddi4+0x1a6>
 8000dc2:	4463      	add	r3, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	e74d      	b.n	8000c64 <__udivmoddi4+0x148>
 8000dc8:	4606      	mov	r6, r0
 8000dca:	4623      	mov	r3, r4
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e70f      	b.n	8000bf0 <__udivmoddi4+0xd4>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	e730      	b.n	8000c38 <__udivmoddi4+0x11c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de0:	f000 ff00 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de4:	f000 f816 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de8:	f000 f9c6 	bl	8001178 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dec:	f000 f95e 	bl	80010ac <MX_DMA_Init>
  MX_SPI1_Init();
 8000df0:	f000 f86e 	bl	8000ed0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000df4:	f000 f8a2 	bl	8000f3c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000df8:	f000 f8d6 	bl	8000fa8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000dfc:	f000 f92c 	bl	8001058 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8000e00:	f000 f908 	bl	8001014 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	  SetupOS();
 8000e04:	f00c fee4 	bl	800dbd0 <SetupOS>
	  StartOS();
 8000e08:	f00c ffe0 	bl	800ddcc <StartOS>
	  return 0;
 8000e0c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b094      	sub	sp, #80	@ 0x50
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0320 	add.w	r3, r7, #32
 8000e1e:	2230      	movs	r2, #48	@ 0x30
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00f f88f 	bl	800ff46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <SystemClock_Config+0xb4>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e40:	4a21      	ldr	r2, [pc, #132]	@ (8000ec8 <SystemClock_Config+0xb4>)
 8000e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <SystemClock_Config+0xb4>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <SystemClock_Config+0xb8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ecc <SystemClock_Config+0xb8>)
 8000e5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <SystemClock_Config+0xb8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e70:	2302      	movs	r3, #2
 8000e72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e74:	2301      	movs	r3, #1
 8000e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e78:	2310      	movs	r3, #16
 8000e7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 f8db 	bl	8003040 <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e90:	f000 f9ea 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 fb3e 	bl	8003530 <HAL_RCC_ClockConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000eba:	f000 f9d5 	bl	8001268 <Error_Handler>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3750      	adds	r7, #80	@ 0x50
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40007000 	.word	0x40007000

08000ed0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000ed6:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <MX_SPI1_Init+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000edc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000efc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f04:	2208      	movs	r2, #8
 8000f06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f1c:	220a      	movs	r2, #10
 8000f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f22:	f002 fce5 	bl	80038f0 <HAL_SPI_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f2c:	f000 f99c 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200000d0 	.word	0x200000d0
 8000f38:	40013000 	.word	0x40013000

08000f3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f42:	4a18      	ldr	r2, [pc, #96]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f70:	2208      	movs	r2, #8
 8000f72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f88:	220a      	movs	r2, #10
 8000f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f8e:	f002 fcaf 	bl	80038f0 <HAL_SPI_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f98:	f000 f966 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000128 	.word	0x20000128
 8000fa4:	40003800 	.word	0x40003800

08000fa8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fac:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fae:	4a18      	ldr	r2, [pc, #96]	@ (8001010 <MX_SPI3_Init+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fdc:	2210      	movs	r2, #16
 8000fde:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <MX_SPI3_Init+0x64>)
 8000ff4:	220a      	movs	r2, #10
 8000ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	@ (800100c <MX_SPI3_Init+0x64>)
 8000ffa:	f002 fc79 	bl	80038f0 <HAL_SPI_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001004:	f000 f930 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000180 	.word	0x20000180
 8001010:	40003c00 	.word	0x40003c00

08001014 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001018:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <MX_TIM11_Init+0x3c>)
 800101a:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <MX_TIM11_Init+0x40>)
 800101c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16;
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <MX_TIM11_Init+0x3c>)
 8001020:	2210      	movs	r2, #16
 8001022:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <MX_TIM11_Init+0x3c>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_TIM11_Init+0x3c>)
 800102c:	2263      	movs	r2, #99	@ 0x63
 800102e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <MX_TIM11_Init+0x3c>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_TIM11_Init+0x3c>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	@ (8001050 <MX_TIM11_Init+0x3c>)
 800103e:	f003 fc61 	bl	8004904 <HAL_TIM_Base_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8001048:	f000 f90e 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000418 	.word	0x20000418
 8001054:	40014800 	.word	0x40014800

08001058 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <MX_USART1_UART_Init+0x50>)
 8001060:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001064:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001068:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001090:	f003 feda 	bl	8004e48 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800109a:	f000 f8e5 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000460 	.word	0x20000460
 80010a8:	40011000 	.word	0x40011000

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <MX_DMA_Init+0xc8>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001174 <MX_DMA_Init+0xc8>)
 80010bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <MX_DMA_Init+0xc8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <MX_DMA_Init+0xc8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a27      	ldr	r2, [pc, #156]	@ (8001174 <MX_DMA_Init+0xc8>)
 80010d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b25      	ldr	r3, [pc, #148]	@ (8001174 <MX_DMA_Init+0xc8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	200b      	movs	r0, #11
 80010f0:	f000 fedb 	bl	8001eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010f4:	200b      	movs	r0, #11
 80010f6:	f000 fef4 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2105      	movs	r1, #5
 80010fe:	200e      	movs	r0, #14
 8001100:	f000 fed3 	bl	8001eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001104:	200e      	movs	r0, #14
 8001106:	f000 feec 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2105      	movs	r1, #5
 800110e:	200f      	movs	r0, #15
 8001110:	f000 fecb 	bl	8001eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001114:	200f      	movs	r0, #15
 8001116:	f000 fee4 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2105      	movs	r1, #5
 800111e:	2010      	movs	r0, #16
 8001120:	f000 fec3 	bl	8001eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001124:	2010      	movs	r0, #16
 8001126:	f000 fedc 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2105      	movs	r1, #5
 800112e:	2038      	movs	r0, #56	@ 0x38
 8001130:	f000 febb 	bl	8001eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001134:	2038      	movs	r0, #56	@ 0x38
 8001136:	f000 fed4 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2105      	movs	r1, #5
 800113e:	203a      	movs	r0, #58	@ 0x3a
 8001140:	f000 feb3 	bl	8001eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001144:	203a      	movs	r0, #58	@ 0x3a
 8001146:	f000 fecc 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2105      	movs	r1, #5
 800114e:	203b      	movs	r0, #59	@ 0x3b
 8001150:	f000 feab 	bl	8001eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001154:	203b      	movs	r0, #59	@ 0x3b
 8001156:	f000 fec4 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2105      	movs	r1, #5
 800115e:	2046      	movs	r0, #70	@ 0x46
 8001160:	f000 fea3 	bl	8001eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001164:	2046      	movs	r0, #70	@ 0x46
 8001166:	f000 febc 	bl	8001ee2 <HAL_NVIC_EnableIRQ>

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b32      	ldr	r3, [pc, #200]	@ (800125c <MX_GPIO_Init+0xe4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a31      	ldr	r2, [pc, #196]	@ (800125c <MX_GPIO_Init+0xe4>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b2f      	ldr	r3, [pc, #188]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a2a      	ldr	r2, [pc, #168]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b28      	ldr	r3, [pc, #160]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b24      	ldr	r3, [pc, #144]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a23      	ldr	r2, [pc, #140]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a1c      	ldr	r2, [pc, #112]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f248 0110 	movw	r1, #32784	@ 0x8010
 8001204:	4816      	ldr	r0, [pc, #88]	@ (8001260 <MX_GPIO_Init+0xe8>)
 8001206:	f001 ff01 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PUMP_Pin|VALVE_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f241 0103 	movw	r1, #4099	@ 0x1003
 8001210:	4814      	ldr	r0, [pc, #80]	@ (8001264 <MX_GPIO_Init+0xec>)
 8001212:	f001 fefb 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI3_CS_Pin;
 8001216:	f248 0310 	movw	r3, #32784	@ 0x8010
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480c      	ldr	r0, [pc, #48]	@ (8001260 <MX_GPIO_Init+0xe8>)
 8001230:	f001 fd50 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUMP_Pin VALVE_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = PUMP_Pin|VALVE_Pin|SPI2_CS_Pin;
 8001234:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <MX_GPIO_Init+0xec>)
 800124e:	f001 fd41 	bl	8002cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	@ 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <Error_Handler+0x8>

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_MspInit+0x54>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	4a11      	ldr	r2, [pc, #68]	@ (80012c8 <HAL_MspInit+0x54>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001288:	6453      	str	r3, [r2, #68]	@ 0x44
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_MspInit+0x54>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_MspInit+0x54>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <HAL_MspInit+0x54>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <HAL_MspInit+0x54>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	210f      	movs	r1, #15
 80012b6:	f06f 0001 	mvn.w	r0, #1
 80012ba:	f000 fdf6 	bl	8001eaa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	@ 0x38
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a95      	ldr	r2, [pc, #596]	@ (8001540 <HAL_SPI_MspInit+0x274>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	f040 8091 	bne.w	8001412 <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	4b93      	ldr	r3, [pc, #588]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 80012f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f8:	4a92      	ldr	r2, [pc, #584]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 80012fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001300:	4b90      	ldr	r3, [pc, #576]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001308:	623b      	str	r3, [r7, #32]
 800130a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	4b8c      	ldr	r3, [pc, #560]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	4a8b      	ldr	r2, [pc, #556]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6313      	str	r3, [r2, #48]	@ 0x30
 800131c:	4b89      	ldr	r3, [pc, #548]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001328:	23e0      	movs	r3, #224	@ 0xe0
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001338:	2305      	movs	r3, #5
 800133a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	4881      	ldr	r0, [pc, #516]	@ (8001548 <HAL_SPI_MspInit+0x27c>)
 8001344:	f001 fcc6 	bl	8002cd4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001348:	4b80      	ldr	r3, [pc, #512]	@ (800154c <HAL_SPI_MspInit+0x280>)
 800134a:	4a81      	ldr	r2, [pc, #516]	@ (8001550 <HAL_SPI_MspInit+0x284>)
 800134c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800134e:	4b7f      	ldr	r3, [pc, #508]	@ (800154c <HAL_SPI_MspInit+0x280>)
 8001350:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001354:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001356:	4b7d      	ldr	r3, [pc, #500]	@ (800154c <HAL_SPI_MspInit+0x280>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135c:	4b7b      	ldr	r3, [pc, #492]	@ (800154c <HAL_SPI_MspInit+0x280>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001362:	4b7a      	ldr	r3, [pc, #488]	@ (800154c <HAL_SPI_MspInit+0x280>)
 8001364:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001368:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800136a:	4b78      	ldr	r3, [pc, #480]	@ (800154c <HAL_SPI_MspInit+0x280>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001370:	4b76      	ldr	r3, [pc, #472]	@ (800154c <HAL_SPI_MspInit+0x280>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001376:	4b75      	ldr	r3, [pc, #468]	@ (800154c <HAL_SPI_MspInit+0x280>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800137c:	4b73      	ldr	r3, [pc, #460]	@ (800154c <HAL_SPI_MspInit+0x280>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001382:	4b72      	ldr	r3, [pc, #456]	@ (800154c <HAL_SPI_MspInit+0x280>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001388:	4870      	ldr	r0, [pc, #448]	@ (800154c <HAL_SPI_MspInit+0x280>)
 800138a:	f000 fdc9 	bl	8001f20 <HAL_DMA_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001394:	f7ff ff68 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a6c      	ldr	r2, [pc, #432]	@ (800154c <HAL_SPI_MspInit+0x280>)
 800139c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800139e:	4a6b      	ldr	r2, [pc, #428]	@ (800154c <HAL_SPI_MspInit+0x280>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001558 <HAL_SPI_MspInit+0x28c>)
 80013a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013ac:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013b0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b2:	4b68      	ldr	r3, [pc, #416]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013b4:	2240      	movs	r2, #64	@ 0x40
 80013b6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b8:	4b66      	ldr	r3, [pc, #408]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013be:	4b65      	ldr	r3, [pc, #404]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013c6:	4b63      	ldr	r3, [pc, #396]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013cc:	4b61      	ldr	r3, [pc, #388]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013d2:	4b60      	ldr	r3, [pc, #384]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013da:	2200      	movs	r2, #0
 80013dc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013de:	4b5d      	ldr	r3, [pc, #372]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013e4:	485b      	ldr	r0, [pc, #364]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013e6:	f000 fd9b 	bl	8001f20 <HAL_DMA_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80013f0:	f7ff ff3a 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a57      	ldr	r2, [pc, #348]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013f8:	649a      	str	r2, [r3, #72]	@ 0x48
 80013fa:	4a56      	ldr	r2, [pc, #344]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2105      	movs	r1, #5
 8001404:	2023      	movs	r0, #35	@ 0x23
 8001406:	f000 fd50 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800140a:	2023      	movs	r0, #35	@ 0x23
 800140c:	f000 fd69 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001410:	e145      	b.n	800169e <HAL_SPI_MspInit+0x3d2>
  else if(hspi->Instance==SPI2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a51      	ldr	r2, [pc, #324]	@ (800155c <HAL_SPI_MspInit+0x290>)
 8001418:	4293      	cmp	r3, r2
 800141a:	f040 80ab 	bne.w	8001574 <HAL_SPI_MspInit+0x2a8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	4b48      	ldr	r3, [pc, #288]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	4a47      	ldr	r2, [pc, #284]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142c:	6413      	str	r3, [r2, #64]	@ 0x40
 800142e:	4b45      	ldr	r3, [pc, #276]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	4b41      	ldr	r3, [pc, #260]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a40      	ldr	r2, [pc, #256]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b3e      	ldr	r3, [pc, #248]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001456:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001468:	2305      	movs	r3, #5
 800146a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001470:	4619      	mov	r1, r3
 8001472:	483b      	ldr	r0, [pc, #236]	@ (8001560 <HAL_SPI_MspInit+0x294>)
 8001474:	f001 fc2e 	bl	8002cd4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001478:	4b3a      	ldr	r3, [pc, #232]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 800147a:	4a3b      	ldr	r2, [pc, #236]	@ (8001568 <HAL_SPI_MspInit+0x29c>)
 800147c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800147e:	4b39      	ldr	r3, [pc, #228]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001484:	4b37      	ldr	r3, [pc, #220]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148a:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001490:	4b34      	ldr	r3, [pc, #208]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 8001492:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001496:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001498:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149e:	4b31      	ldr	r3, [pc, #196]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80014a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80014b6:	482b      	ldr	r0, [pc, #172]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014b8:	f000 fd32 	bl	8001f20 <HAL_DMA_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_SPI_MspInit+0x1fa>
      Error_Handler();
 80014c2:	f7ff fed1 	bl	8001268 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a26      	ldr	r2, [pc, #152]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014cc:	4a25      	ldr	r2, [pc, #148]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80014d2:	4b26      	ldr	r3, [pc, #152]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014d4:	4a26      	ldr	r2, [pc, #152]	@ (8001570 <HAL_SPI_MspInit+0x2a4>)
 80014d6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80014d8:	4b24      	ldr	r3, [pc, #144]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014de:	4b23      	ldr	r3, [pc, #140]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014e0:	2240      	movs	r2, #64	@ 0x40
 80014e2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e4:	4b21      	ldr	r3, [pc, #132]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014ea:	4b20      	ldr	r3, [pc, #128]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80014fe:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001504:	4b19      	ldr	r3, [pc, #100]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001510:	4816      	ldr	r0, [pc, #88]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 8001512:	f000 fd05 	bl	8001f20 <HAL_DMA_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 800151c:	f7ff fea4 	bl	8001268 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 8001524:	649a      	str	r2, [r3, #72]	@ 0x48
 8001526:	4a11      	ldr	r2, [pc, #68]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2105      	movs	r1, #5
 8001530:	2024      	movs	r0, #36	@ 0x24
 8001532:	f000 fcba 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001536:	2024      	movs	r0, #36	@ 0x24
 8001538:	f000 fcd3 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
}
 800153c:	e0af      	b.n	800169e <HAL_SPI_MspInit+0x3d2>
 800153e:	bf00      	nop
 8001540:	40013000 	.word	0x40013000
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	200001d8 	.word	0x200001d8
 8001550:	40026410 	.word	0x40026410
 8001554:	20000238 	.word	0x20000238
 8001558:	40026458 	.word	0x40026458
 800155c:	40003800 	.word	0x40003800
 8001560:	40020400 	.word	0x40020400
 8001564:	20000298 	.word	0x20000298
 8001568:	40026058 	.word	0x40026058
 800156c:	200002f8 	.word	0x200002f8
 8001570:	40026070 	.word	0x40026070
  else if(hspi->Instance==SPI3)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a4b      	ldr	r2, [pc, #300]	@ (80016a8 <HAL_SPI_MspInit+0x3dc>)
 800157a:	4293      	cmp	r3, r2
 800157c:	f040 808f 	bne.w	800169e <HAL_SPI_MspInit+0x3d2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	4b49      	ldr	r3, [pc, #292]	@ (80016ac <HAL_SPI_MspInit+0x3e0>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	4a48      	ldr	r2, [pc, #288]	@ (80016ac <HAL_SPI_MspInit+0x3e0>)
 800158a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800158e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001590:	4b46      	ldr	r3, [pc, #280]	@ (80016ac <HAL_SPI_MspInit+0x3e0>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4b42      	ldr	r3, [pc, #264]	@ (80016ac <HAL_SPI_MspInit+0x3e0>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	4a41      	ldr	r2, [pc, #260]	@ (80016ac <HAL_SPI_MspInit+0x3e0>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ac:	4b3f      	ldr	r3, [pc, #252]	@ (80016ac <HAL_SPI_MspInit+0x3e0>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015ca:	2306      	movs	r3, #6
 80015cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	4836      	ldr	r0, [pc, #216]	@ (80016b0 <HAL_SPI_MspInit+0x3e4>)
 80015d6:	f001 fb7d 	bl	8002cd4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80015da:	4b36      	ldr	r3, [pc, #216]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 80015dc:	4a36      	ldr	r2, [pc, #216]	@ (80016b8 <HAL_SPI_MspInit+0x3ec>)
 80015de:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80015e0:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e6:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ec:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015f2:	4b30      	ldr	r3, [pc, #192]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 80015f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015f8:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015fa:	4b2e      	ldr	r3, [pc, #184]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001600:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001606:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 8001608:	2200      	movs	r2, #0
 800160a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800160c:	4b29      	ldr	r3, [pc, #164]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 800160e:	2200      	movs	r2, #0
 8001610:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001612:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 8001614:	2200      	movs	r2, #0
 8001616:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001618:	4826      	ldr	r0, [pc, #152]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 800161a:	f000 fc81 	bl	8001f20 <HAL_DMA_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_SPI_MspInit+0x35c>
      Error_Handler();
 8001624:	f7ff fe20 	bl	8001268 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a22      	ldr	r2, [pc, #136]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 800162c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800162e:	4a21      	ldr	r2, [pc, #132]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001634:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001636:	4a22      	ldr	r2, [pc, #136]	@ (80016c0 <HAL_SPI_MspInit+0x3f4>)
 8001638:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800163a:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001640:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001642:	2240      	movs	r2, #64	@ 0x40
 8001644:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 800164e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001652:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800165a:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001660:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001672:	4812      	ldr	r0, [pc, #72]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001674:	f000 fc54 	bl	8001f20 <HAL_DMA_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_SPI_MspInit+0x3b6>
      Error_Handler();
 800167e:	f7ff fdf3 	bl	8001268 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001686:	649a      	str	r2, [r3, #72]	@ 0x48
 8001688:	4a0c      	ldr	r2, [pc, #48]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2105      	movs	r1, #5
 8001692:	2033      	movs	r0, #51	@ 0x33
 8001694:	f000 fc09 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001698:	2033      	movs	r0, #51	@ 0x33
 800169a:	f000 fc22 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3738      	adds	r7, #56	@ 0x38
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40003c00 	.word	0x40003c00
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020800 	.word	0x40020800
 80016b4:	20000358 	.word	0x20000358
 80016b8:	40026010 	.word	0x40026010
 80016bc:	200003b8 	.word	0x200003b8
 80016c0:	40026088 	.word	0x40026088

080016c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <HAL_TIM_Base_MspInit+0x48>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d115      	bne.n	8001702 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <HAL_TIM_Base_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	4a0c      	ldr	r2, [pc, #48]	@ (8001710 <HAL_TIM_Base_MspInit+0x4c>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_TIM_Base_MspInit+0x4c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2105      	movs	r1, #5
 80016f6:	201a      	movs	r0, #26
 80016f8:	f000 fbd7 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016fc:	201a      	movs	r0, #26
 80016fe:	f000 fbf0 	bl	8001ee2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40014800 	.word	0x40014800
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a4c      	ldr	r2, [pc, #304]	@ (8001864 <HAL_UART_MspInit+0x150>)
 8001732:	4293      	cmp	r3, r2
 8001734:	f040 8091 	bne.w	800185a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	4b4a      	ldr	r3, [pc, #296]	@ (8001868 <HAL_UART_MspInit+0x154>)
 800173e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001740:	4a49      	ldr	r2, [pc, #292]	@ (8001868 <HAL_UART_MspInit+0x154>)
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	6453      	str	r3, [r2, #68]	@ 0x44
 8001748:	4b47      	ldr	r3, [pc, #284]	@ (8001868 <HAL_UART_MspInit+0x154>)
 800174a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	4b43      	ldr	r3, [pc, #268]	@ (8001868 <HAL_UART_MspInit+0x154>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175c:	4a42      	ldr	r2, [pc, #264]	@ (8001868 <HAL_UART_MspInit+0x154>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6313      	str	r3, [r2, #48]	@ 0x30
 8001764:	4b40      	ldr	r3, [pc, #256]	@ (8001868 <HAL_UART_MspInit+0x154>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001770:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001782:	2307      	movs	r3, #7
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	4837      	ldr	r0, [pc, #220]	@ (800186c <HAL_UART_MspInit+0x158>)
 800178e:	f001 faa1 	bl	8002cd4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001792:	4b37      	ldr	r3, [pc, #220]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 8001794:	4a37      	ldr	r2, [pc, #220]	@ (8001874 <HAL_UART_MspInit+0x160>)
 8001796:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001798:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 800179a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800179e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a0:	4b33      	ldr	r3, [pc, #204]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a6:	4b32      	ldr	r3, [pc, #200]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ac:	4b30      	ldr	r3, [pc, #192]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017cc:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017d2:	4827      	ldr	r0, [pc, #156]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017d4:	f000 fba4 	bl	8001f20 <HAL_DMA_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80017de:	f7ff fd43 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a22      	ldr	r2, [pc, #136]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017e8:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_UART_MspInit+0x164>)
 80017f0:	4a22      	ldr	r2, [pc, #136]	@ (800187c <HAL_UART_MspInit+0x168>)
 80017f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80017f4:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_UART_MspInit+0x164>)
 80017f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <HAL_UART_MspInit+0x164>)
 80017fe:	2240      	movs	r2, #64	@ 0x40
 8001800:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001802:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <HAL_UART_MspInit+0x164>)
 800180a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800180e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001816:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <HAL_UART_MspInit+0x164>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001828:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <HAL_UART_MspInit+0x164>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800182e:	4812      	ldr	r0, [pc, #72]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001830:	f000 fb76 	bl	8001f20 <HAL_DMA_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800183a:	f7ff fd15 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001842:	639a      	str	r2, [r3, #56]	@ 0x38
 8001844:	4a0c      	ldr	r2, [pc, #48]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2105      	movs	r1, #5
 800184e:	2025      	movs	r0, #37	@ 0x25
 8001850:	f000 fb2b 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001854:	2025      	movs	r0, #37	@ 0x25
 8001856:	f000 fb44 	bl	8001ee2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	@ 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40011000 	.word	0x40011000
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000
 8001870:	200004a8 	.word	0x200004a8
 8001874:	40026440 	.word	0x40026440
 8001878:	20000508 	.word	0x20000508
 800187c:	400264b8 	.word	0x400264b8

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <NMI_Handler+0x4>

08001888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <MemManage_Handler+0x4>

08001898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ba:	f000 f9e5 	bl	8001c88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018be:	f006 ffab 	bl	8008818 <xTaskGetSchedulerState>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d001      	beq.n	80018cc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018c8:	f007 fea6 	bl	8009618 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <DMA1_Stream0_IRQHandler+0x10>)
 80018d6:	f000 fcbb 	bl	8002250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000358 	.word	0x20000358

080018e4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <DMA1_Stream3_IRQHandler+0x10>)
 80018ea:	f000 fcb1 	bl	8002250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000298 	.word	0x20000298

080018f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <DMA1_Stream4_IRQHandler+0x10>)
 80018fe:	f000 fca7 	bl	8002250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200002f8 	.word	0x200002f8

0800190c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <DMA1_Stream5_IRQHandler+0x10>)
 8001912:	f000 fc9d 	bl	8002250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200003b8 	.word	0x200003b8

08001920 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	StartTimerTicks++;
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	4a03      	ldr	r2, [pc, #12]	@ (8001938 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800192c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800192e:	4803      	ldr	r0, [pc, #12]	@ (800193c <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8001930:	f003 f8a8 	bl	8004a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200000cc 	.word	0x200000cc
 800193c:	20000418 	.word	0x20000418

08001940 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <SPI1_IRQHandler+0x10>)
 8001946:	f002 fc13 	bl	8004170 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200000d0 	.word	0x200000d0

08001954 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <SPI2_IRQHandler+0x10>)
 800195a:	f002 fc09 	bl	8004170 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000128 	.word	0x20000128

08001968 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <USART1_IRQHandler+0x10>)
 800196e:	f003 fb6b 	bl	8005048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000460 	.word	0x20000460

0800197c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <SPI3_IRQHandler+0x10>)
 8001982:	f002 fbf5 	bl	8004170 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000180 	.word	0x20000180

08001990 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001996:	f000 fc5b 	bl	8002250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200001d8 	.word	0x200001d8

080019a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <DMA2_Stream2_IRQHandler+0x10>)
 80019aa:	f000 fc51 	bl	8002250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200004a8 	.word	0x200004a8

080019b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <DMA2_Stream3_IRQHandler+0x10>)
 80019be:	f000 fc47 	bl	8002250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000238 	.word	0x20000238

080019cc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <DMA2_Stream7_IRQHandler+0x10>)
 80019d2:	f000 fc3d 	bl	8002250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000508 	.word	0x20000508

080019e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_kill>:

int _kill(int pid, int sig)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019fa:	f00e fb03 	bl	8010004 <__errno>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2216      	movs	r2, #22
 8001a02:	601a      	str	r2, [r3, #0]
  return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_exit>:

void _exit (int status)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ffe7 	bl	80019f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a22:	bf00      	nop
 8001a24:	e7fd      	b.n	8001a22 <_exit+0x12>

08001a26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e00a      	b.n	8001a4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a38:	f3af 8000 	nop.w
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	60ba      	str	r2, [r7, #8]
 8001a44:	b2ca      	uxtb	r2, r1
 8001a46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	dbf0      	blt.n	8001a38 <_read+0x12>
  }

  return len;
 8001a56:	687b      	ldr	r3, [r7, #4]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e009      	b.n	8001a86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	60ba      	str	r2, [r7, #8]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dbf1      	blt.n	8001a72 <_write+0x12>
  }
  return len;
 8001a8e:	687b      	ldr	r3, [r7, #4]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_close>:

int _close(int file)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_isatty>:

int _isatty(int file)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b08:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <_sbrk+0x5c>)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <_sbrk+0x60>)
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <_sbrk+0x64>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <_sbrk+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b30:	f00e fa68 	bl	8010004 <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	220c      	movs	r2, #12
 8001b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	e009      	b.n	8001b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <_sbrk+0x64>)
 8001b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20020000 	.word	0x20020000
 8001b60:	00000400 	.word	0x00000400
 8001b64:	20000568 	.word	0x20000568
 8001b68:	20009500 	.word	0x20009500

08001b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <SystemInit+0x20>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b76:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <SystemInit+0x20>)
 8001b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <Reset_Handler>:
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bc8 <LoopFillZerobss+0xe>
 8001b94:	f7ff ffea 	bl	8001b6c <SystemInit>
 8001b98:	480c      	ldr	r0, [pc, #48]	@ (8001bcc <LoopFillZerobss+0x12>)
 8001b9a:	490d      	ldr	r1, [pc, #52]	@ (8001bd0 <LoopFillZerobss+0x16>)
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd4 <LoopFillZerobss+0x1a>)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:
 8001ba2:	58d4      	ldr	r4, [r2, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:
 8001ba8:	18c4      	adds	r4, r0, r3
 8001baa:	428c      	cmp	r4, r1
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <LoopFillZerobss+0x1e>)
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bdc <LoopFillZerobss+0x22>)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:
 8001bba:	42a2      	cmp	r2, r4
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>
 8001bbe:	f00e fa27 	bl	8010010 <__libc_init_array>
 8001bc2:	f7ff f90b 	bl	8000ddc <main>
 8001bc6:	4770      	bx	lr
 8001bc8:	20020000 	.word	0x20020000
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	200000ac 	.word	0x200000ac
 8001bd4:	08010de0 	.word	0x08010de0
 8001bd8:	200000b0 	.word	0x200000b0
 8001bdc:	200094fc 	.word	0x200094fc

08001be0 <ADC_IRQHandler>:
 8001be0:	e7fe      	b.n	8001be0 <ADC_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c24 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	@ (8001c24 <HAL_Init+0x40>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <HAL_Init+0x40>)
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	@ (8001c24 <HAL_Init+0x40>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f941 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	200f      	movs	r0, #15
 8001c14:	f000 f808 	bl	8001c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fb2c 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_InitTick+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_InitTick+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f95d 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00e      	b.n	8001c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d80a      	bhi.n	8001c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 f921 	bl	8001eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c68:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <HAL_InitTick+0x5c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	2000056c 	.word	0x2000056c

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000056c 	.word	0x2000056c

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4907      	ldr	r1, [pc, #28]	@ (8001d64 <__NVIC_EnableIRQ+0x38>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	@ (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	@ (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	@ 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <__NVIC_SystemReset+0x24>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e36:	4904      	ldr	r1, [pc, #16]	@ (8001e48 <__NVIC_SystemReset+0x24>)
 8001e38:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <__NVIC_SystemReset+0x28>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3e:	f3bf 8f4f 	dsb	sy
}
 8001e42:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <__NVIC_SystemReset+0x20>
 8001e48:	e000ed00 	.word	0xe000ed00
 8001e4c:	05fa0004 	.word	0x05fa0004

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ff78 	bl	8001d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff13 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff28 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff78 	bl	8001dbc <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff47 	bl	8001d68 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff1b 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001f02:	f7ff ff8f 	bl	8001e24 <__NVIC_SystemReset>

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ff9e 	bl	8001e50 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff fec0 	bl	8001cb0 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e099      	b.n	8002070 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f5c:	e00f      	b.n	8001f7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f5e:	f7ff fea7 	bl	8001cb0 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d908      	bls.n	8001f7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2203      	movs	r2, #3
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e078      	b.n	8002070 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1e8      	bne.n	8001f5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	4b38      	ldr	r3, [pc, #224]	@ (8002078 <HAL_DMA_Init+0x158>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d107      	bne.n	8001fe8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f023 0307 	bic.w	r3, r3, #7
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	4313      	orrs	r3, r2
 8002008:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	2b04      	cmp	r3, #4
 8002010:	d117      	bne.n	8002042 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00e      	beq.n	8002042 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fb01 	bl	800262c <DMA_CheckFifoParam>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2240      	movs	r2, #64	@ 0x40
 8002034:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800203e:	2301      	movs	r3, #1
 8002040:	e016      	b.n	8002070 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fab8 	bl	80025c0 <DMA_CalcBaseAndBitshift>
 8002050:	4603      	mov	r3, r0
 8002052:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002058:	223f      	movs	r2, #63	@ 0x3f
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	f010803f 	.word	0xf010803f

0800207c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002092:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_DMA_Start_IT+0x26>
 800209e:	2302      	movs	r3, #2
 80020a0:	e040      	b.n	8002124 <HAL_DMA_Start_IT+0xa8>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d12f      	bne.n	8002116 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fa4a 	bl	8002564 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d4:	223f      	movs	r2, #63	@ 0x3f
 80020d6:	409a      	lsls	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0216 	orr.w	r2, r2, #22
 80020ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0208 	orr.w	r2, r2, #8
 8002102:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e005      	b.n	8002122 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800211e:	2302      	movs	r3, #2
 8002120:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002122:	7dfb      	ldrb	r3, [r7, #23]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800213a:	f7ff fdb9 	bl	8001cb0 <HAL_GetTick>
 800213e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d008      	beq.n	800215e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2280      	movs	r2, #128	@ 0x80
 8002150:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e052      	b.n	8002204 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0216 	bic.w	r2, r2, #22
 800216c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800217c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <HAL_DMA_Abort+0x62>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0208 	bic.w	r2, r2, #8
 800219c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ae:	e013      	b.n	80021d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021b0:	f7ff fd7e 	bl	8001cb0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d90c      	bls.n	80021d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2220      	movs	r2, #32
 80021c2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2203      	movs	r2, #3
 80021c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e015      	b.n	8002204 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1e4      	bne.n	80021b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ea:	223f      	movs	r2, #63	@ 0x3f
 80021ec:	409a      	lsls	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d004      	beq.n	800222a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2280      	movs	r2, #128	@ 0x80
 8002224:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00c      	b.n	8002244 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2205      	movs	r2, #5
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800225c:	4b8e      	ldr	r3, [pc, #568]	@ (8002498 <HAL_DMA_IRQHandler+0x248>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a8e      	ldr	r2, [pc, #568]	@ (800249c <HAL_DMA_IRQHandler+0x24c>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0a9b      	lsrs	r3, r3, #10
 8002268:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	2208      	movs	r2, #8
 800227c:	409a      	lsls	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01a      	beq.n	80022bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0204 	bic.w	r2, r2, #4
 80022a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a8:	2208      	movs	r2, #8
 80022aa:	409a      	lsls	r2, r3
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	f043 0201 	orr.w	r2, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c0:	2201      	movs	r2, #1
 80022c2:	409a      	lsls	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d012      	beq.n	80022f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022de:	2201      	movs	r2, #1
 80022e0:	409a      	lsls	r2, r3
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ea:	f043 0202 	orr.w	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	2204      	movs	r2, #4
 80022f8:	409a      	lsls	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d012      	beq.n	8002328 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00b      	beq.n	8002328 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002314:	2204      	movs	r2, #4
 8002316:	409a      	lsls	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002320:	f043 0204 	orr.w	r2, r3, #4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	2210      	movs	r2, #16
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d043      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d03c      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234a:	2210      	movs	r2, #16
 800234c:	409a      	lsls	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d018      	beq.n	8002392 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d108      	bne.n	8002380 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d024      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4798      	blx	r3
 800237e:	e01f      	b.n	80023c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01b      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
 8002390:	e016      	b.n	80023c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d107      	bne.n	80023b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0208 	bic.w	r2, r2, #8
 80023ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c4:	2220      	movs	r2, #32
 80023c6:	409a      	lsls	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 808f 	beq.w	80024f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8087 	beq.w	80024f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e6:	2220      	movs	r2, #32
 80023e8:	409a      	lsls	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d136      	bne.n	8002468 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0216 	bic.w	r2, r2, #22
 8002408:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002418:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <HAL_DMA_IRQHandler+0x1da>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0208 	bic.w	r2, r2, #8
 8002438:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243e:	223f      	movs	r2, #63	@ 0x3f
 8002440:	409a      	lsls	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800245a:	2b00      	cmp	r3, #0
 800245c:	d07e      	beq.n	800255c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	4798      	blx	r3
        }
        return;
 8002466:	e079      	b.n	800255c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d01d      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10d      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002488:	2b00      	cmp	r3, #0
 800248a:	d031      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
 8002494:	e02c      	b.n	80024f0 <HAL_DMA_IRQHandler+0x2a0>
 8002496:	bf00      	nop
 8002498:	20000000 	.word	0x20000000
 800249c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d023      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
 80024b0:	e01e      	b.n	80024f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10f      	bne.n	80024e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0210 	bic.w	r2, r2, #16
 80024ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d032      	beq.n	800255e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d022      	beq.n	800254a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2205      	movs	r2, #5
 8002508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	3301      	adds	r3, #1
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	d307      	bcc.n	8002538 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f2      	bne.n	800251c <HAL_DMA_IRQHandler+0x2cc>
 8002536:	e000      	b.n	800253a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002538:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
 800255a:	e000      	b.n	800255e <HAL_DMA_IRQHandler+0x30e>
        return;
 800255c:	bf00      	nop
    }
  }
}
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002580:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b40      	cmp	r3, #64	@ 0x40
 8002590:	d108      	bne.n	80025a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025a2:	e007      	b.n	80025b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	60da      	str	r2, [r3, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3b10      	subs	r3, #16
 80025d0:	4a14      	ldr	r2, [pc, #80]	@ (8002624 <DMA_CalcBaseAndBitshift+0x64>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025da:	4a13      	ldr	r2, [pc, #76]	@ (8002628 <DMA_CalcBaseAndBitshift+0x68>)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d909      	bls.n	8002602 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025f6:	f023 0303 	bic.w	r3, r3, #3
 80025fa:	1d1a      	adds	r2, r3, #4
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002600:	e007      	b.n	8002612 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800260a:	f023 0303 	bic.w	r3, r3, #3
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	aaaaaaab 	.word	0xaaaaaaab
 8002628:	08010c14 	.word	0x08010c14

0800262c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11f      	bne.n	8002686 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d856      	bhi.n	80026fa <DMA_CheckFifoParam+0xce>
 800264c:	a201      	add	r2, pc, #4	@ (adr r2, 8002654 <DMA_CheckFifoParam+0x28>)
 800264e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002652:	bf00      	nop
 8002654:	08002665 	.word	0x08002665
 8002658:	08002677 	.word	0x08002677
 800265c:	08002665 	.word	0x08002665
 8002660:	080026fb 	.word	0x080026fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d046      	beq.n	80026fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002674:	e043      	b.n	80026fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800267e:	d140      	bne.n	8002702 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002684:	e03d      	b.n	8002702 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800268e:	d121      	bne.n	80026d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d837      	bhi.n	8002706 <DMA_CheckFifoParam+0xda>
 8002696:	a201      	add	r2, pc, #4	@ (adr r2, 800269c <DMA_CheckFifoParam+0x70>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026b3 	.word	0x080026b3
 80026a4:	080026ad 	.word	0x080026ad
 80026a8:	080026c5 	.word	0x080026c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
      break;
 80026b0:	e030      	b.n	8002714 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d025      	beq.n	800270a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c2:	e022      	b.n	800270a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026cc:	d11f      	bne.n	800270e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026d2:	e01c      	b.n	800270e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d903      	bls.n	80026e2 <DMA_CheckFifoParam+0xb6>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d003      	beq.n	80026e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026e0:	e018      	b.n	8002714 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
      break;
 80026e6:	e015      	b.n	8002714 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00e      	beq.n	8002712 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      break;
 80026f8:	e00b      	b.n	8002712 <DMA_CheckFifoParam+0xe6>
      break;
 80026fa:	bf00      	nop
 80026fc:	e00a      	b.n	8002714 <DMA_CheckFifoParam+0xe8>
      break;
 80026fe:	bf00      	nop
 8002700:	e008      	b.n	8002714 <DMA_CheckFifoParam+0xe8>
      break;
 8002702:	bf00      	nop
 8002704:	e006      	b.n	8002714 <DMA_CheckFifoParam+0xe8>
      break;
 8002706:	bf00      	nop
 8002708:	e004      	b.n	8002714 <DMA_CheckFifoParam+0xe8>
      break;
 800270a:	bf00      	nop
 800270c:	e002      	b.n	8002714 <DMA_CheckFifoParam+0xe8>
      break;   
 800270e:	bf00      	nop
 8002710:	e000      	b.n	8002714 <DMA_CheckFifoParam+0xe8>
      break;
 8002712:	bf00      	nop
    }
  } 
  
  return status; 
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop

08002724 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002736:	4b23      	ldr	r3, [pc, #140]	@ (80027c4 <HAL_FLASH_Program+0xa0>)
 8002738:	7e1b      	ldrb	r3, [r3, #24]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_FLASH_Program+0x1e>
 800273e:	2302      	movs	r3, #2
 8002740:	e03b      	b.n	80027ba <HAL_FLASH_Program+0x96>
 8002742:	4b20      	ldr	r3, [pc, #128]	@ (80027c4 <HAL_FLASH_Program+0xa0>)
 8002744:	2201      	movs	r2, #1
 8002746:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002748:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800274c:	f000 f870 	bl	8002830 <FLASH_WaitForLastOperation>
 8002750:	4603      	mov	r3, r0
 8002752:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d12b      	bne.n	80027b2 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d105      	bne.n	800276c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002760:	783b      	ldrb	r3, [r7, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	68b8      	ldr	r0, [r7, #8]
 8002766:	f000 f91b 	bl	80029a0 <FLASH_Program_Byte>
 800276a:	e016      	b.n	800279a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d105      	bne.n	800277e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002772:	883b      	ldrh	r3, [r7, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	68b8      	ldr	r0, [r7, #8]
 8002778:	f000 f8ee 	bl	8002958 <FLASH_Program_HalfWord>
 800277c:	e00d      	b.n	800279a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d105      	bne.n	8002790 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4619      	mov	r1, r3
 8002788:	68b8      	ldr	r0, [r7, #8]
 800278a:	f000 f8c3 	bl	8002914 <FLASH_Program_Word>
 800278e:	e004      	b.n	800279a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	f000 f88b 	bl	80028b0 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800279a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800279e:	f000 f847 	bl	8002830 <FLASH_WaitForLastOperation>
 80027a2:	4603      	mov	r3, r0
 80027a4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80027a6:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <HAL_FLASH_Program+0xa4>)
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	4a07      	ldr	r2, [pc, #28]	@ (80027c8 <HAL_FLASH_Program+0xa4>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027b2:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <HAL_FLASH_Program+0xa0>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	761a      	strb	r2, [r3, #24]

  return status;
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000570 	.word	0x20000570
 80027c8:	40023c00 	.word	0x40023c00

080027cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_FLASH_Unlock+0x38>)
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	da0b      	bge.n	80027f6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_FLASH_Unlock+0x38>)
 80027e0:	4a09      	ldr	r2, [pc, #36]	@ (8002808 <HAL_FLASH_Unlock+0x3c>)
 80027e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027e4:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <HAL_FLASH_Unlock+0x38>)
 80027e6:	4a09      	ldr	r2, [pc, #36]	@ (800280c <HAL_FLASH_Unlock+0x40>)
 80027e8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_FLASH_Unlock+0x38>)
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	da01      	bge.n	80027f6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80027f6:	79fb      	ldrb	r3, [r7, #7]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	40023c00 	.word	0x40023c00
 8002808:	45670123 	.word	0x45670123
 800280c:	cdef89ab 	.word	0xcdef89ab

08002810 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002814:	4b05      	ldr	r3, [pc, #20]	@ (800282c <HAL_FLASH_Lock+0x1c>)
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	4a04      	ldr	r2, [pc, #16]	@ (800282c <HAL_FLASH_Lock+0x1c>)
 800281a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800281e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	40023c00 	.word	0x40023c00

08002830 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800283c:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <FLASH_WaitForLastOperation+0x78>)
 800283e:	2200      	movs	r2, #0
 8002840:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002842:	f7ff fa35 	bl	8001cb0 <HAL_GetTick>
 8002846:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002848:	e010      	b.n	800286c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d00c      	beq.n	800286c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <FLASH_WaitForLastOperation+0x38>
 8002858:	f7ff fa2a 	bl	8001cb0 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	d201      	bcs.n	800286c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e019      	b.n	80028a0 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800286c:	4b0f      	ldr	r3, [pc, #60]	@ (80028ac <FLASH_WaitForLastOperation+0x7c>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e8      	bne.n	800284a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002878:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <FLASH_WaitForLastOperation+0x7c>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <FLASH_WaitForLastOperation+0x7c>)
 8002886:	2201      	movs	r2, #1
 8002888:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <FLASH_WaitForLastOperation+0x7c>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002896:	f000 f8a5 	bl	80029e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0

}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000570 	.word	0x20000570
 80028ac:	40023c00 	.word	0x40023c00

080028b0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028bc:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <FLASH_Program_DoubleWord+0x60>)
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	4a13      	ldr	r2, [pc, #76]	@ (8002910 <FLASH_Program_DoubleWord+0x60>)
 80028c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80028c8:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <FLASH_Program_DoubleWord+0x60>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	4a10      	ldr	r2, [pc, #64]	@ (8002910 <FLASH_Program_DoubleWord+0x60>)
 80028ce:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80028d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <FLASH_Program_DoubleWord+0x60>)
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <FLASH_Program_DoubleWord+0x60>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80028e6:	f3bf 8f6f 	isb	sy
}
 80028ea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80028ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	000a      	movs	r2, r1
 80028fa:	2300      	movs	r3, #0
 80028fc:	68f9      	ldr	r1, [r7, #12]
 80028fe:	3104      	adds	r1, #4
 8002900:	4613      	mov	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	40023c00 	.word	0x40023c00

08002914 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800291e:	4b0d      	ldr	r3, [pc, #52]	@ (8002954 <FLASH_Program_Word+0x40>)
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	4a0c      	ldr	r2, [pc, #48]	@ (8002954 <FLASH_Program_Word+0x40>)
 8002924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002928:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <FLASH_Program_Word+0x40>)
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	4a09      	ldr	r2, [pc, #36]	@ (8002954 <FLASH_Program_Word+0x40>)
 8002930:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002934:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002936:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <FLASH_Program_Word+0x40>)
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	4a06      	ldr	r2, [pc, #24]	@ (8002954 <FLASH_Program_Word+0x40>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	601a      	str	r2, [r3, #0]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40023c00 	.word	0x40023c00

08002958 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002964:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <FLASH_Program_HalfWord+0x44>)
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	4a0c      	ldr	r2, [pc, #48]	@ (800299c <FLASH_Program_HalfWord+0x44>)
 800296a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800296e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002970:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <FLASH_Program_HalfWord+0x44>)
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	4a09      	ldr	r2, [pc, #36]	@ (800299c <FLASH_Program_HalfWord+0x44>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800297c:	4b07      	ldr	r3, [pc, #28]	@ (800299c <FLASH_Program_HalfWord+0x44>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	4a06      	ldr	r2, [pc, #24]	@ (800299c <FLASH_Program_HalfWord+0x44>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	801a      	strh	r2, [r3, #0]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00

080029a0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <FLASH_Program_Byte+0x40>)
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	4a0b      	ldr	r2, [pc, #44]	@ (80029e0 <FLASH_Program_Byte+0x40>)
 80029b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80029b8:	4b09      	ldr	r3, [pc, #36]	@ (80029e0 <FLASH_Program_Byte+0x40>)
 80029ba:	4a09      	ldr	r2, [pc, #36]	@ (80029e0 <FLASH_Program_Byte+0x40>)
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029c0:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <FLASH_Program_Byte+0x40>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4a06      	ldr	r2, [pc, #24]	@ (80029e0 <FLASH_Program_Byte+0x40>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	701a      	strb	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00

080029e4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80029e8:	4b27      	ldr	r3, [pc, #156]	@ (8002a88 <FLASH_SetErrorCode+0xa4>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80029f4:	4b25      	ldr	r3, [pc, #148]	@ (8002a8c <FLASH_SetErrorCode+0xa8>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f043 0310 	orr.w	r3, r3, #16
 80029fc:	4a23      	ldr	r2, [pc, #140]	@ (8002a8c <FLASH_SetErrorCode+0xa8>)
 80029fe:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002a00:	4b21      	ldr	r3, [pc, #132]	@ (8002a88 <FLASH_SetErrorCode+0xa4>)
 8002a02:	2210      	movs	r2, #16
 8002a04:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002a06:	4b20      	ldr	r3, [pc, #128]	@ (8002a88 <FLASH_SetErrorCode+0xa4>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002a12:	4b1e      	ldr	r3, [pc, #120]	@ (8002a8c <FLASH_SetErrorCode+0xa8>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f043 0308 	orr.w	r3, r3, #8
 8002a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a8c <FLASH_SetErrorCode+0xa8>)
 8002a1c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a88 <FLASH_SetErrorCode+0xa4>)
 8002a20:	2220      	movs	r2, #32
 8002a22:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002a24:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <FLASH_SetErrorCode+0xa4>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002a30:	4b16      	ldr	r3, [pc, #88]	@ (8002a8c <FLASH_SetErrorCode+0xa8>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	4a14      	ldr	r2, [pc, #80]	@ (8002a8c <FLASH_SetErrorCode+0xa8>)
 8002a3a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002a3c:	4b12      	ldr	r3, [pc, #72]	@ (8002a88 <FLASH_SetErrorCode+0xa4>)
 8002a3e:	2240      	movs	r2, #64	@ 0x40
 8002a40:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002a42:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <FLASH_SetErrorCode+0xa4>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <FLASH_SetErrorCode+0xa8>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	4a0d      	ldr	r2, [pc, #52]	@ (8002a8c <FLASH_SetErrorCode+0xa8>)
 8002a58:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <FLASH_SetErrorCode+0xa4>)
 8002a5c:	2280      	movs	r2, #128	@ 0x80
 8002a5e:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002a60:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <FLASH_SetErrorCode+0xa4>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002a6c:	4b07      	ldr	r3, [pc, #28]	@ (8002a8c <FLASH_SetErrorCode+0xa8>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f043 0320 	orr.w	r3, r3, #32
 8002a74:	4a05      	ldr	r2, [pc, #20]	@ (8002a8c <FLASH_SetErrorCode+0xa8>)
 8002a76:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002a78:	4b03      	ldr	r3, [pc, #12]	@ (8002a88 <FLASH_SetErrorCode+0xa4>)
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	60da      	str	r2, [r3, #12]
  }
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40023c00 	.word	0x40023c00
 8002a8c:	20000570 	.word	0x20000570

08002a90 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002aa2:	4b31      	ldr	r3, [pc, #196]	@ (8002b68 <HAL_FLASHEx_Erase+0xd8>)
 8002aa4:	7e1b      	ldrb	r3, [r3, #24]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_FLASHEx_Erase+0x1e>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e058      	b.n	8002b60 <HAL_FLASHEx_Erase+0xd0>
 8002aae:	4b2e      	ldr	r3, [pc, #184]	@ (8002b68 <HAL_FLASHEx_Erase+0xd8>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ab4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ab8:	f7ff feba 	bl	8002830 <FLASH_WaitForLastOperation>
 8002abc:	4603      	mov	r3, r0
 8002abe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d148      	bne.n	8002b58 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d115      	bne.n	8002b02 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f000 f844 	bl	8002b70 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ae8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002aec:	f7ff fea0 	bl	8002830 <FLASH_WaitForLastOperation>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002af4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <HAL_FLASHEx_Erase+0xdc>)
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b6c <HAL_FLASHEx_Erase+0xdc>)
 8002afa:	f023 0304 	bic.w	r3, r3, #4
 8002afe:	6113      	str	r3, [r2, #16]
 8002b00:	e028      	b.n	8002b54 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	e01c      	b.n	8002b44 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	4619      	mov	r1, r3
 8002b12:	68b8      	ldr	r0, [r7, #8]
 8002b14:	f000 f850 	bl	8002bb8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b18:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b1c:	f7ff fe88 	bl	8002830 <FLASH_WaitForLastOperation>
 8002b20:	4603      	mov	r3, r0
 8002b22:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002b24:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <HAL_FLASHEx_Erase+0xdc>)
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	4a10      	ldr	r2, [pc, #64]	@ (8002b6c <HAL_FLASHEx_Erase+0xdc>)
 8002b2a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002b2e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	601a      	str	r2, [r3, #0]
          break;
 8002b3c:	e00a      	b.n	8002b54 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3301      	adds	r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d3da      	bcc.n	8002b0a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002b54:	f000 f878 	bl	8002c48 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b58:	4b03      	ldr	r3, [pc, #12]	@ (8002b68 <HAL_FLASHEx_Erase+0xd8>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	761a      	strb	r2, [r3, #24]

  return status;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000570 	.word	0x20000570
 8002b6c:	40023c00 	.word	0x40023c00

08002b70 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	6039      	str	r1, [r7, #0]
 8002b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <FLASH_MassErase+0x44>)
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb4 <FLASH_MassErase+0x44>)
 8002b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002b88:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <FLASH_MassErase+0x44>)
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	4a09      	ldr	r2, [pc, #36]	@ (8002bb4 <FLASH_MassErase+0x44>)
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002b94:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <FLASH_MassErase+0x44>)
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <FLASH_MassErase+0x44>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba4:	6113      	str	r3, [r2, #16]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40023c00 	.word	0x40023c00

08002bb8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	e010      	b.n	8002bf6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d103      	bne.n	8002be2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002bda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e009      	b.n	8002bf6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d103      	bne.n	8002bf0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002be8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e002      	b.n	8002bf6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002bf0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bf4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bf6:	4b13      	ldr	r3, [pc, #76]	@ (8002c44 <FLASH_Erase_Sector+0x8c>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	4a12      	ldr	r2, [pc, #72]	@ (8002c44 <FLASH_Erase_Sector+0x8c>)
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002c02:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <FLASH_Erase_Sector+0x8c>)
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	490f      	ldr	r1, [pc, #60]	@ (8002c44 <FLASH_Erase_Sector+0x8c>)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <FLASH_Erase_Sector+0x8c>)
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	4a0c      	ldr	r2, [pc, #48]	@ (8002c44 <FLASH_Erase_Sector+0x8c>)
 8002c14:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002c18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c44 <FLASH_Erase_Sector+0x8c>)
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4313      	orrs	r3, r2
 8002c24:	4a07      	ldr	r2, [pc, #28]	@ (8002c44 <FLASH_Erase_Sector+0x8c>)
 8002c26:	f043 0302 	orr.w	r3, r3, #2
 8002c2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <FLASH_Erase_Sector+0x8c>)
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <FLASH_Erase_Sector+0x8c>)
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c36:	6113      	str	r3, [r2, #16]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	40023c00 	.word	0x40023c00

08002c48 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002c4c:	4b20      	ldr	r3, [pc, #128]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d017      	beq.n	8002c88 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002c58:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c5e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c62:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002c64:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a19      	ldr	r2, [pc, #100]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c6a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b17      	ldr	r3, [pc, #92]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a16      	ldr	r2, [pc, #88]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c7a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c7c:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a13      	ldr	r2, [pc, #76]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c86:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002c88:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d017      	beq.n	8002cc4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c94:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c9e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002ca6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a07      	ldr	r2, [pc, #28]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002cb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cb6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cb8:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <FLASH_FlushCaches+0x88>)
 8002cbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cc2:	6013      	str	r3, [r2, #0]
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40023c00 	.word	0x40023c00

08002cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	@ 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e16b      	b.n	8002fc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	f040 815a 	bne.w	8002fc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d005      	beq.n	8002d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d130      	bne.n	8002d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 0201 	and.w	r2, r3, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d017      	beq.n	8002dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d123      	bne.n	8002e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	69b9      	ldr	r1, [r7, #24]
 8002e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0203 	and.w	r2, r3, #3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80b4 	beq.w	8002fc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	4b60      	ldr	r3, [pc, #384]	@ (8002fe0 <HAL_GPIO_Init+0x30c>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	4a5f      	ldr	r2, [pc, #380]	@ (8002fe0 <HAL_GPIO_Init+0x30c>)
 8002e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe0 <HAL_GPIO_Init+0x30c>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e76:	4a5b      	ldr	r2, [pc, #364]	@ (8002fe4 <HAL_GPIO_Init+0x310>)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a52      	ldr	r2, [pc, #328]	@ (8002fe8 <HAL_GPIO_Init+0x314>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d02b      	beq.n	8002efa <HAL_GPIO_Init+0x226>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a51      	ldr	r2, [pc, #324]	@ (8002fec <HAL_GPIO_Init+0x318>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d025      	beq.n	8002ef6 <HAL_GPIO_Init+0x222>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a50      	ldr	r2, [pc, #320]	@ (8002ff0 <HAL_GPIO_Init+0x31c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d01f      	beq.n	8002ef2 <HAL_GPIO_Init+0x21e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4f      	ldr	r2, [pc, #316]	@ (8002ff4 <HAL_GPIO_Init+0x320>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d019      	beq.n	8002eee <HAL_GPIO_Init+0x21a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4e      	ldr	r2, [pc, #312]	@ (8002ff8 <HAL_GPIO_Init+0x324>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_GPIO_Init+0x216>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4d      	ldr	r2, [pc, #308]	@ (8002ffc <HAL_GPIO_Init+0x328>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_GPIO_Init+0x212>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4c      	ldr	r2, [pc, #304]	@ (8003000 <HAL_GPIO_Init+0x32c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <HAL_GPIO_Init+0x20e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a4b      	ldr	r2, [pc, #300]	@ (8003004 <HAL_GPIO_Init+0x330>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_GPIO_Init+0x20a>
 8002eda:	2307      	movs	r3, #7
 8002edc:	e00e      	b.n	8002efc <HAL_GPIO_Init+0x228>
 8002ede:	2308      	movs	r3, #8
 8002ee0:	e00c      	b.n	8002efc <HAL_GPIO_Init+0x228>
 8002ee2:	2306      	movs	r3, #6
 8002ee4:	e00a      	b.n	8002efc <HAL_GPIO_Init+0x228>
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	e008      	b.n	8002efc <HAL_GPIO_Init+0x228>
 8002eea:	2304      	movs	r3, #4
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x228>
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e004      	b.n	8002efc <HAL_GPIO_Init+0x228>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e002      	b.n	8002efc <HAL_GPIO_Init+0x228>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_GPIO_Init+0x228>
 8002efa:	2300      	movs	r3, #0
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	f002 0203 	and.w	r2, r2, #3
 8002f02:	0092      	lsls	r2, r2, #2
 8002f04:	4093      	lsls	r3, r2
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f0c:	4935      	ldr	r1, [pc, #212]	@ (8002fe4 <HAL_GPIO_Init+0x310>)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	3302      	adds	r3, #2
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003008 <HAL_GPIO_Init+0x334>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3e:	4a32      	ldr	r2, [pc, #200]	@ (8003008 <HAL_GPIO_Init+0x334>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f44:	4b30      	ldr	r3, [pc, #192]	@ (8003008 <HAL_GPIO_Init+0x334>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f68:	4a27      	ldr	r2, [pc, #156]	@ (8003008 <HAL_GPIO_Init+0x334>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f6e:	4b26      	ldr	r3, [pc, #152]	@ (8003008 <HAL_GPIO_Init+0x334>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f92:	4a1d      	ldr	r2, [pc, #116]	@ (8003008 <HAL_GPIO_Init+0x334>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f98:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <HAL_GPIO_Init+0x334>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fbc:	4a12      	ldr	r2, [pc, #72]	@ (8003008 <HAL_GPIO_Init+0x334>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	f67f ae90 	bls.w	8002cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40013800 	.word	0x40013800
 8002fe8:	40020000 	.word	0x40020000
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40020800 	.word	0x40020800
 8002ff4:	40020c00 	.word	0x40020c00
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40021400 	.word	0x40021400
 8003000:	40021800 	.word	0x40021800
 8003004:	40021c00 	.word	0x40021c00
 8003008:	40013c00 	.word	0x40013c00

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003028:	e003      	b.n	8003032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800302a:	887b      	ldrh	r3, [r7, #2]
 800302c:	041a      	lsls	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	619a      	str	r2, [r3, #24]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e267      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d075      	beq.n	800314a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800305e:	4b88      	ldr	r3, [pc, #544]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b04      	cmp	r3, #4
 8003068:	d00c      	beq.n	8003084 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306a:	4b85      	ldr	r3, [pc, #532]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003072:	2b08      	cmp	r3, #8
 8003074:	d112      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003076:	4b82      	ldr	r3, [pc, #520]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800307e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003082:	d10b      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	4b7e      	ldr	r3, [pc, #504]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d05b      	beq.n	8003148 <HAL_RCC_OscConfig+0x108>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d157      	bne.n	8003148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e242      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a4:	d106      	bne.n	80030b4 <HAL_RCC_OscConfig+0x74>
 80030a6:	4b76      	ldr	r3, [pc, #472]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a75      	ldr	r2, [pc, #468]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e01d      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x98>
 80030be:	4b70      	ldr	r3, [pc, #448]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6f      	ldr	r2, [pc, #444]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030d8:	4b69      	ldr	r3, [pc, #420]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a68      	ldr	r2, [pc, #416]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b66      	ldr	r3, [pc, #408]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a65      	ldr	r2, [pc, #404]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe fdda 	bl	8001cb0 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe fdd6 	bl	8001cb0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	@ 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e207      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b5b      	ldr	r3, [pc, #364]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0xc0>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe fdc6 	bl	8001cb0 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe fdc2 	bl	8001cb0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	@ 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e1f3      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313a:	4b51      	ldr	r3, [pc, #324]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0xe8>
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d063      	beq.n	800321e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003156:	4b4a      	ldr	r3, [pc, #296]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003162:	4b47      	ldr	r3, [pc, #284]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800316a:	2b08      	cmp	r3, #8
 800316c:	d11c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b44      	ldr	r3, [pc, #272]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d116      	bne.n	80031a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	4b41      	ldr	r3, [pc, #260]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x152>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d001      	beq.n	8003192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e1c7      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b3b      	ldr	r3, [pc, #236]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4937      	ldr	r1, [pc, #220]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	e03a      	b.n	800321e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d020      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b0:	4b34      	ldr	r3, [pc, #208]	@ (8003284 <HAL_RCC_OscConfig+0x244>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fe fd7b 	bl	8001cb0 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031be:	f7fe fd77 	bl	8001cb0 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1a8      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b28      	ldr	r3, [pc, #160]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4925      	ldr	r1, [pc, #148]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f2:	4b24      	ldr	r3, [pc, #144]	@ (8003284 <HAL_RCC_OscConfig+0x244>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe fd5a 	bl	8001cb0 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003200:	f7fe fd56 	bl	8001cb0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e187      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	4b1b      	ldr	r3, [pc, #108]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d036      	beq.n	8003298 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003232:	4b15      	ldr	r3, [pc, #84]	@ (8003288 <HAL_RCC_OscConfig+0x248>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fe fd3a 	bl	8001cb0 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003240:	f7fe fd36 	bl	8001cb0 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e167      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003252:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x200>
 800325e:	e01b      	b.n	8003298 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003260:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <HAL_RCC_OscConfig+0x248>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fe fd23 	bl	8001cb0 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	e00e      	b.n	800328c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326e:	f7fe fd1f 	bl	8001cb0 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d907      	bls.n	800328c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e150      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
 8003280:	40023800 	.word	0x40023800
 8003284:	42470000 	.word	0x42470000
 8003288:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b88      	ldr	r3, [pc, #544]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800328e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ea      	bne.n	800326e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8097 	beq.w	80033d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b81      	ldr	r3, [pc, #516]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	4b7d      	ldr	r3, [pc, #500]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	4a7c      	ldr	r2, [pc, #496]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c6:	4b7a      	ldr	r3, [pc, #488]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b77      	ldr	r3, [pc, #476]	@ (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d118      	bne.n	8003314 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e2:	4b74      	ldr	r3, [pc, #464]	@ (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a73      	ldr	r2, [pc, #460]	@ (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ee:	f7fe fcdf 	bl	8001cb0 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f6:	f7fe fcdb 	bl	8001cb0 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e10c      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	4b6a      	ldr	r3, [pc, #424]	@ (80034b4 <HAL_RCC_OscConfig+0x474>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x2ea>
 800331c:	4b64      	ldr	r3, [pc, #400]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003320:	4a63      	ldr	r2, [pc, #396]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	@ 0x70
 8003328:	e01c      	b.n	8003364 <HAL_RCC_OscConfig+0x324>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x30c>
 8003332:	4b5f      	ldr	r3, [pc, #380]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003336:	4a5e      	ldr	r2, [pc, #376]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	6713      	str	r3, [r2, #112]	@ 0x70
 800333e:	4b5c      	ldr	r3, [pc, #368]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003342:	4a5b      	ldr	r2, [pc, #364]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6713      	str	r3, [r2, #112]	@ 0x70
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0x324>
 800334c:	4b58      	ldr	r3, [pc, #352]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003350:	4a57      	ldr	r2, [pc, #348]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	@ 0x70
 8003358:	4b55      	ldr	r3, [pc, #340]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335c:	4a54      	ldr	r2, [pc, #336]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800335e:	f023 0304 	bic.w	r3, r3, #4
 8003362:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d015      	beq.n	8003398 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe fca0 	bl	8001cb0 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	e00a      	b.n	800338a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003374:	f7fe fc9c 	bl	8001cb0 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e0cb      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	4b49      	ldr	r3, [pc, #292]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0ee      	beq.n	8003374 <HAL_RCC_OscConfig+0x334>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003398:	f7fe fc8a 	bl	8001cb0 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe fc86 	bl	8001cb0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0b5      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b6:	4b3e      	ldr	r3, [pc, #248]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ee      	bne.n	80033a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4b39      	ldr	r3, [pc, #228]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	4a38      	ldr	r2, [pc, #224]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80a1 	beq.w	8003520 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033de:	4b34      	ldr	r3, [pc, #208]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d05c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d141      	bne.n	8003476 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <HAL_RCC_OscConfig+0x478>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe fc5a 	bl	8001cb0 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fc56 	bl	8001cb0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e087      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b27      	ldr	r3, [pc, #156]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	491b      	ldr	r1, [pc, #108]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003448:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <HAL_RCC_OscConfig+0x478>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fe fc2f 	bl	8001cb0 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003456:	f7fe fc2b 	bl	8001cb0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e05c      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003468:	4b11      	ldr	r3, [pc, #68]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x416>
 8003474:	e054      	b.n	8003520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <HAL_RCC_OscConfig+0x478>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe fc18 	bl	8001cb0 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7fe fc14 	bl	8001cb0 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e045      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x444>
 80034a2:	e03d      	b.n	8003520 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e038      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40007000 	.word	0x40007000
 80034b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	@ (800352c <HAL_RCC_OscConfig+0x4ec>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d028      	beq.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d121      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d11a      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d111      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	3b01      	subs	r3, #1
 8003506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d107      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800

08003530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0cc      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b68      	ldr	r3, [pc, #416]	@ (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d90c      	bls.n	800356c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b65      	ldr	r3, [pc, #404]	@ (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b63      	ldr	r3, [pc, #396]	@ (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0b8      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003584:	4b59      	ldr	r3, [pc, #356]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a58      	ldr	r2, [pc, #352]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800358e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800359c:	4b53      	ldr	r3, [pc, #332]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a52      	ldr	r2, [pc, #328]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b50      	ldr	r3, [pc, #320]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	494d      	ldr	r1, [pc, #308]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d044      	beq.n	8003650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	4b47      	ldr	r3, [pc, #284]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d119      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e07f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	4b3f      	ldr	r3, [pc, #252]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e06f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	4b3b      	ldr	r3, [pc, #236]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e067      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b37      	ldr	r3, [pc, #220]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4934      	ldr	r1, [pc, #208]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	4313      	orrs	r3, r2
 800361e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003620:	f7fe fb46 	bl	8001cb0 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fe fb42 	bl	8001cb0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e04f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b2b      	ldr	r3, [pc, #172]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003650:	4b25      	ldr	r3, [pc, #148]	@ (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d20c      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b22      	ldr	r3, [pc, #136]	@ (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e032      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003684:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4916      	ldr	r1, [pc, #88]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036a2:	4b12      	ldr	r3, [pc, #72]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	490e      	ldr	r1, [pc, #56]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036b6:	f000 f821 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80036ba:	4602      	mov	r2, r0
 80036bc:	4b0b      	ldr	r3, [pc, #44]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	490a      	ldr	r1, [pc, #40]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	5ccb      	ldrb	r3, [r1, r3]
 80036ca:	fa22 f303 	lsr.w	r3, r2, r3
 80036ce:	4a09      	ldr	r2, [pc, #36]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036d2:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe faa6 	bl	8001c28 <HAL_InitTick>

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023c00 	.word	0x40023c00
 80036ec:	40023800 	.word	0x40023800
 80036f0:	08010bfc 	.word	0x08010bfc
 80036f4:	20000000 	.word	0x20000000
 80036f8:	20000004 	.word	0x20000004

080036fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003700:	b090      	sub	sp, #64	@ 0x40
 8003702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003714:	4b59      	ldr	r3, [pc, #356]	@ (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b08      	cmp	r3, #8
 800371e:	d00d      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x40>
 8003720:	2b08      	cmp	r3, #8
 8003722:	f200 80a1 	bhi.w	8003868 <HAL_RCC_GetSysClockFreq+0x16c>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x34>
 800372a:	2b04      	cmp	r3, #4
 800372c:	d003      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0x3a>
 800372e:	e09b      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003730:	4b53      	ldr	r3, [pc, #332]	@ (8003880 <HAL_RCC_GetSysClockFreq+0x184>)
 8003732:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003734:	e09b      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003736:	4b53      	ldr	r3, [pc, #332]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x188>)
 8003738:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800373a:	e098      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800373c:	4b4f      	ldr	r3, [pc, #316]	@ (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003744:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003746:	4b4d      	ldr	r3, [pc, #308]	@ (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d028      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b4a      	ldr	r3, [pc, #296]	@ (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	2200      	movs	r2, #0
 800375a:	623b      	str	r3, [r7, #32]
 800375c:	627a      	str	r2, [r7, #36]	@ 0x24
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003764:	2100      	movs	r1, #0
 8003766:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x188>)
 8003768:	fb03 f201 	mul.w	r2, r3, r1
 800376c:	2300      	movs	r3, #0
 800376e:	fb00 f303 	mul.w	r3, r0, r3
 8003772:	4413      	add	r3, r2
 8003774:	4a43      	ldr	r2, [pc, #268]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x188>)
 8003776:	fba0 1202 	umull	r1, r2, r0, r2
 800377a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800377c:	460a      	mov	r2, r1
 800377e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003780:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003782:	4413      	add	r3, r2
 8003784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003788:	2200      	movs	r2, #0
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	61fa      	str	r2, [r7, #28]
 800378e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003792:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003796:	f7fd f9a9 	bl	8000aec <__aeabi_uldivmod>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4613      	mov	r3, r2
 80037a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037a2:	e053      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a4:	4b35      	ldr	r3, [pc, #212]	@ (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	2200      	movs	r2, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	617a      	str	r2, [r7, #20]
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037b6:	f04f 0b00 	mov.w	fp, #0
 80037ba:	4652      	mov	r2, sl
 80037bc:	465b      	mov	r3, fp
 80037be:	f04f 0000 	mov.w	r0, #0
 80037c2:	f04f 0100 	mov.w	r1, #0
 80037c6:	0159      	lsls	r1, r3, #5
 80037c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037cc:	0150      	lsls	r0, r2, #5
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	ebb2 080a 	subs.w	r8, r2, sl
 80037d6:	eb63 090b 	sbc.w	r9, r3, fp
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037ee:	ebb2 0408 	subs.w	r4, r2, r8
 80037f2:	eb63 0509 	sbc.w	r5, r3, r9
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	00eb      	lsls	r3, r5, #3
 8003800:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003804:	00e2      	lsls	r2, r4, #3
 8003806:	4614      	mov	r4, r2
 8003808:	461d      	mov	r5, r3
 800380a:	eb14 030a 	adds.w	r3, r4, sl
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	eb45 030b 	adc.w	r3, r5, fp
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003822:	4629      	mov	r1, r5
 8003824:	028b      	lsls	r3, r1, #10
 8003826:	4621      	mov	r1, r4
 8003828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800382c:	4621      	mov	r1, r4
 800382e:	028a      	lsls	r2, r1, #10
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003836:	2200      	movs	r2, #0
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	60fa      	str	r2, [r7, #12]
 800383c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003840:	f7fd f954 	bl	8000aec <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4613      	mov	r3, r2
 800384a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800384c:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	3301      	adds	r3, #1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800385c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003866:	e002      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003868:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <HAL_RCC_GetSysClockFreq+0x184>)
 800386a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800386c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800386e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003870:	4618      	mov	r0, r3
 8003872:	3740      	adds	r7, #64	@ 0x40
 8003874:	46bd      	mov	sp, r7
 8003876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800
 8003880:	00f42400 	.word	0x00f42400
 8003884:	017d7840 	.word	0x017d7840

08003888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800388c:	4b03      	ldr	r3, [pc, #12]	@ (800389c <HAL_RCC_GetHCLKFreq+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000000 	.word	0x20000000

080038a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a4:	f7ff fff0 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0a9b      	lsrs	r3, r3, #10
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4903      	ldr	r1, [pc, #12]	@ (80038c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	08010c0c 	.word	0x08010c0c

080038c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038cc:	f7ff ffdc 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0b5b      	lsrs	r3, r3, #13
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	@ (80038ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	08010c0c 	.word	0x08010c0c

080038f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07b      	b.n	80039fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d108      	bne.n	800391c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003912:	d009      	beq.n	8003928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	61da      	str	r2, [r3, #28]
 800391a:	e005      	b.n	8003928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fcc2 	bl	80012cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800395e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ac:	ea42 0103 	orr.w	r1, r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 0104 	and.w	r1, r3, #4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	f003 0210 	and.w	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b088      	sub	sp, #32
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a12:	f7fe f94d 	bl	8001cb0 <HAL_GetTick>
 8003a16:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d001      	beq.n	8003a2c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e12a      	b.n	8003c82 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_SPI_Transmit+0x36>
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e122      	b.n	8003c82 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_SPI_Transmit+0x48>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e11b      	b.n	8003c82 <HAL_SPI_Transmit+0x280>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2203      	movs	r2, #3
 8003a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	88fa      	ldrh	r2, [r7, #6]
 8003a6a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a98:	d10f      	bne.n	8003aba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aa8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ab8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac4:	2b40      	cmp	r3, #64	@ 0x40
 8003ac6:	d007      	beq.n	8003ad8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ad6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ae0:	d152      	bne.n	8003b88 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_SPI_Transmit+0xee>
 8003aea:	8b7b      	ldrh	r3, [r7, #26]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d145      	bne.n	8003b7c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af4:	881a      	ldrh	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b00:	1c9a      	adds	r2, r3, #2
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b14:	e032      	b.n	8003b7c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d112      	bne.n	8003b4a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b34:	1c9a      	adds	r2, r3, #2
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b48:	e018      	b.n	8003b7c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b4a:	f7fe f8b1 	bl	8001cb0 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d803      	bhi.n	8003b62 <HAL_SPI_Transmit+0x160>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d102      	bne.n	8003b68 <HAL_SPI_Transmit+0x166>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d109      	bne.n	8003b7c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e082      	b.n	8003c82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1c7      	bne.n	8003b16 <HAL_SPI_Transmit+0x114>
 8003b86:	e053      	b.n	8003c30 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <HAL_SPI_Transmit+0x194>
 8003b90:	8b7b      	ldrh	r3, [r7, #26]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d147      	bne.n	8003c26 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	7812      	ldrb	r2, [r2, #0]
 8003ba2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bbc:	e033      	b.n	8003c26 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d113      	bne.n	8003bf4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	7812      	ldrb	r2, [r2, #0]
 8003bd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003bf2:	e018      	b.n	8003c26 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bf4:	f7fe f85c 	bl	8001cb0 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d803      	bhi.n	8003c0c <HAL_SPI_Transmit+0x20a>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	d102      	bne.n	8003c12 <HAL_SPI_Transmit+0x210>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e02d      	b.n	8003c82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1c6      	bne.n	8003bbe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	6839      	ldr	r1, [r7, #0]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fe11 	bl	800485c <SPI_EndRxTxTransaction>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003c80:	2300      	movs	r3, #0
  }
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	4613      	mov	r3, r2
 8003c98:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d001      	beq.n	8003caa <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e097      	b.n	8003dda <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_SPI_Transmit_DMA+0x2a>
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e08f      	b.n	8003dda <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_SPI_Transmit_DMA+0x3c>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e088      	b.n	8003dda <HAL_SPI_Transmit_DMA+0x14e>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	88fa      	ldrh	r2, [r7, #6]
 8003ce8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	88fa      	ldrh	r2, [r7, #6]
 8003cee:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d16:	d10f      	bne.n	8003d38 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3c:	4a29      	ldr	r2, [pc, #164]	@ (8003de4 <HAL_SPI_Transmit_DMA+0x158>)
 8003d3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d44:	4a28      	ldr	r2, [pc, #160]	@ (8003de8 <HAL_SPI_Transmit_DMA+0x15c>)
 8003d46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d4c:	4a27      	ldr	r2, [pc, #156]	@ (8003dec <HAL_SPI_Transmit_DMA+0x160>)
 8003d4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d54:	2200      	movs	r2, #0
 8003d56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d60:	4619      	mov	r1, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	330c      	adds	r3, #12
 8003d68:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d6e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d70:	f7fe f984 	bl	800207c <HAL_DMA_Start_IT>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7e:	f043 0210 	orr.w	r2, r3, #16
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e023      	b.n	8003dda <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9c:	2b40      	cmp	r3, #64	@ 0x40
 8003d9e:	d007      	beq.n	8003db0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dae:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0220 	orr.w	r2, r2, #32
 8003dc6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0202 	orr.w	r2, r2, #2
 8003dd6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	080045c5 	.word	0x080045c5
 8003de8:	080043e5 	.word	0x080043e5
 8003dec:	08004619 	.word	0x08004619

08003df0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d001      	beq.n	8003e0e <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e0a9      	b.n	8003f62 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d110      	bne.n	8003e38 <HAL_SPI_Receive_DMA+0x48>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e1e:	d10b      	bne.n	8003e38 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2204      	movs	r2, #4
 8003e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f8a2 	bl	8003f78 <HAL_SPI_TransmitReceive_DMA>
 8003e34:	4603      	mov	r3, r0
 8003e36:	e094      	b.n	8003f62 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_SPI_Receive_DMA+0x54>
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e08c      	b.n	8003f62 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_SPI_Receive_DMA+0x66>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e085      	b.n	8003f62 <HAL_SPI_Receive_DMA+0x172>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2204      	movs	r2, #4
 8003e62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	88fa      	ldrh	r2, [r7, #6]
 8003e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e9e:	d10f      	bne.n	8003ec0 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ebe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec4:	4a29      	ldr	r2, [pc, #164]	@ (8003f6c <HAL_SPI_Receive_DMA+0x17c>)
 8003ec6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ecc:	4a28      	ldr	r2, [pc, #160]	@ (8003f70 <HAL_SPI_Receive_DMA+0x180>)
 8003ece:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed4:	4a27      	ldr	r2, [pc, #156]	@ (8003f74 <HAL_SPI_Receive_DMA+0x184>)
 8003ed6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003edc:	2200      	movs	r2, #0
 8003ede:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	4619      	mov	r1, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ef8:	f7fe f8c0 	bl	800207c <HAL_DMA_Start_IT>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f06:	f043 0210 	orr.w	r2, r3, #16
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e023      	b.n	8003f62 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f24:	2b40      	cmp	r3, #64	@ 0x40
 8003f26:	d007      	beq.n	8003f38 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f36:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0220 	orr.w	r2, r2, #32
 8003f4e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	080045e1 	.word	0x080045e1
 8003f70:	0800448d 	.word	0x0800448d
 8003f74:	08004619 	.word	0x08004619

08003f78 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f8c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d00c      	beq.n	8003fb4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fa0:	d106      	bne.n	8003fb0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d001      	beq.n	8003fb4 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e0cf      	b.n	8004154 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8003fc0:	887b      	ldrh	r3, [r7, #2]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0c4      	b.n	8004154 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_SPI_TransmitReceive_DMA+0x60>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e0bd      	b.n	8004154 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d003      	beq.n	8003ff4 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2205      	movs	r2, #5
 8003ff0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	887a      	ldrh	r2, [r7, #2]
 8004004:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	887a      	ldrh	r2, [r7, #2]
 800400a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	887a      	ldrh	r2, [r7, #2]
 8004016:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b04      	cmp	r3, #4
 8004034:	d108      	bne.n	8004048 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403a:	4a48      	ldr	r2, [pc, #288]	@ (800415c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 800403c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004042:	4a47      	ldr	r2, [pc, #284]	@ (8004160 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8004044:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004046:	e007      	b.n	8004058 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404c:	4a45      	ldr	r2, [pc, #276]	@ (8004164 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800404e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004054:	4a44      	ldr	r2, [pc, #272]	@ (8004168 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004056:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405c:	4a43      	ldr	r2, [pc, #268]	@ (800416c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800405e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004064:	2200      	movs	r2, #0
 8004066:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	4619      	mov	r1, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004078:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800407e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004080:	f7fd fffc 	bl	800207c <HAL_DMA_Start_IT>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408e:	f043 0210 	orr.w	r2, r3, #16
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e058      	b.n	8004154 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b6:	2200      	movs	r2, #0
 80040b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040be:	2200      	movs	r2, #0
 80040c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c6:	2200      	movs	r2, #0
 80040c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ce:	2200      	movs	r2, #0
 80040d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	4619      	mov	r1, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040e8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040ea:	f7fd ffc7 	bl	800207c <HAL_DMA_Start_IT>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f8:	f043 0210 	orr.w	r2, r3, #16
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e023      	b.n	8004154 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004116:	2b40      	cmp	r3, #64	@ 0x40
 8004118:	d007      	beq.n	800412a <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004128:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0220 	orr.w	r2, r2, #32
 8004140:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0202 	orr.w	r2, r2, #2
 8004150:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	080045e1 	.word	0x080045e1
 8004160:	0800448d 	.word	0x0800448d
 8004164:	080045fd 	.word	0x080045fd
 8004168:	08004535 	.word	0x08004535
 800416c:	08004619 	.word	0x08004619

08004170 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004198:	2b00      	cmp	r3, #0
 800419a:	d009      	beq.n	80041b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4798      	blx	r3
    return;
 80041ae:	e0ce      	b.n	800434e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <HAL_SPI_IRQHandler+0x5e>
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	4798      	blx	r3
    return;
 80041cc:	e0bf      	b.n	800434e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <HAL_SPI_IRQHandler+0x7e>
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d105      	bne.n	80041ee <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80b0 	beq.w	800434e <HAL_SPI_IRQHandler+0x1de>
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80aa 	beq.w	800434e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d023      	beq.n	800424c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b03      	cmp	r3, #3
 800420e:	d011      	beq.n	8004234 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004214:	f043 0204 	orr.w	r2, r3, #4
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800421c:	2300      	movs	r3, #0
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	e00b      	b.n	800424c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	693b      	ldr	r3, [r7, #16]
        return;
 800424a:	e080      	b.n	800434e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d014      	beq.n	8004280 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425a:	f043 0201 	orr.w	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00c      	beq.n	80042a4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428e:	f043 0208 	orr.w	r2, r3, #8
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d04f      	beq.n	800434c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <HAL_SPI_IRQHandler+0x168>
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d034      	beq.n	8004342 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0203 	bic.w	r2, r2, #3
 80042e6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d011      	beq.n	8004314 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f4:	4a17      	ldr	r2, [pc, #92]	@ (8004354 <HAL_SPI_IRQHandler+0x1e4>)
 80042f6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fd ff85 	bl	800220c <HAL_DMA_Abort_IT>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004318:	2b00      	cmp	r3, #0
 800431a:	d016      	beq.n	800434a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004320:	4a0c      	ldr	r2, [pc, #48]	@ (8004354 <HAL_SPI_IRQHandler+0x1e4>)
 8004322:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd ff6f 	bl	800220c <HAL_DMA_Abort_IT>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004338:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004340:	e003      	b.n	800434a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f844 	bl	80043d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004348:	e000      	b.n	800434c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800434a:	bf00      	nop
    return;
 800434c:	bf00      	nop
  }
}
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	08004659 	.word	0x08004659

08004358 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043f2:	f7fd fc5d 	bl	8001cb0 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004406:	d03b      	beq.n	8004480 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0220 	bic.w	r2, r2, #32
 8004416:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0202 	bic.w	r2, r2, #2
 8004426:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	2164      	movs	r1, #100	@ 0x64
 800442c:	6978      	ldr	r0, [r7, #20]
 800442e:	f000 fa15 	bl	800485c <SPI_EndRxTxTransaction>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2200      	movs	r2, #0
 8004466:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004478:	6978      	ldr	r0, [r7, #20]
 800447a:	f7ff ffa9 	bl	80043d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800447e:	e002      	b.n	8004486 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004480:	6978      	ldr	r0, [r7, #20]
 8004482:	f7ff ff69 	bl	8004358 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004498:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800449a:	f7fd fc09 	bl	8001cb0 <HAL_GetTick>
 800449e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ae:	d03b      	beq.n	8004528 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0220 	bic.w	r2, r2, #32
 80044be:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10d      	bne.n	80044e4 <SPI_DMAReceiveCplt+0x58>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044d0:	d108      	bne.n	80044e4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0203 	bic.w	r2, r2, #3
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	e007      	b.n	80044f4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	2164      	movs	r1, #100	@ 0x64
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f949 	bl	8004790 <SPI_EndRxTransaction>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff ff55 	bl	80043d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004526:	e002      	b.n	800452e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7ff ff1f 	bl	800436c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004542:	f7fd fbb5 	bl	8001cb0 <HAL_GetTick>
 8004546:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004556:	d02f      	beq.n	80045b8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0220 	bic.w	r2, r2, #32
 8004566:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	2164      	movs	r1, #100	@ 0x64
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f975 	bl	800485c <SPI_EndRxTxTransaction>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457c:	f043 0220 	orr.w	r2, r3, #32
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0203 	bic.w	r2, r2, #3
 8004592:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7ff ff0d 	bl	80043d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80045b6:	e002      	b.n	80045be <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7ff fee1 	bl	8004380 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7ff fede 	bl	8004394 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f7ff feda 	bl	80043a8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045f4:	bf00      	nop
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004608:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff fed6 	bl	80043bc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004624:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0203 	bic.w	r2, r2, #3
 8004634:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	f043 0210 	orr.w	r2, r3, #16
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff fec0 	bl	80043d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004664:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7ff feac 	bl	80043d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004690:	f7fd fb0e 	bl	8001cb0 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	4413      	add	r3, r2
 800469e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046a0:	f7fd fb06 	bl	8001cb0 <HAL_GetTick>
 80046a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046a6:	4b39      	ldr	r3, [pc, #228]	@ (800478c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	015b      	lsls	r3, r3, #5
 80046ac:	0d1b      	lsrs	r3, r3, #20
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046b6:	e054      	b.n	8004762 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d050      	beq.n	8004762 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046c0:	f7fd faf6 	bl	8001cb0 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d902      	bls.n	80046d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d13d      	bne.n	8004752 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80046e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ee:	d111      	bne.n	8004714 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f8:	d004      	beq.n	8004704 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004702:	d107      	bne.n	8004714 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004712:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800471c:	d10f      	bne.n	800473e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800473c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e017      	b.n	8004782 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3b01      	subs	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4013      	ands	r3, r2
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	bf0c      	ite	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	2300      	movne	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	429a      	cmp	r2, r3
 800477e:	d19b      	bne.n	80046b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000000 	.word	0x20000000

08004790 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047a4:	d111      	bne.n	80047ca <SPI_EndRxTransaction+0x3a>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ae:	d004      	beq.n	80047ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b8:	d107      	bne.n	80047ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047d2:	d12a      	bne.n	800482a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047dc:	d012      	beq.n	8004804 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2180      	movs	r1, #128	@ 0x80
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f7ff ff49 	bl	8004680 <SPI_WaitFlagStateUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d02d      	beq.n	8004850 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f8:	f043 0220 	orr.w	r2, r3, #32
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e026      	b.n	8004852 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2200      	movs	r2, #0
 800480c:	2101      	movs	r1, #1
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f7ff ff36 	bl	8004680 <SPI_WaitFlagStateUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01a      	beq.n	8004850 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481e:	f043 0220 	orr.w	r2, r3, #32
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e013      	b.n	8004852 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2200      	movs	r2, #0
 8004832:	2101      	movs	r1, #1
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f7ff ff23 	bl	8004680 <SPI_WaitFlagStateUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004844:	f043 0220 	orr.w	r2, r3, #32
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e000      	b.n	8004852 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2201      	movs	r2, #1
 8004870:	2102      	movs	r1, #2
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff ff04 	bl	8004680 <SPI_WaitFlagStateUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004882:	f043 0220 	orr.w	r2, r3, #32
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e032      	b.n	80048f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800488e:	4b1b      	ldr	r3, [pc, #108]	@ (80048fc <SPI_EndRxTxTransaction+0xa0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1b      	ldr	r2, [pc, #108]	@ (8004900 <SPI_EndRxTxTransaction+0xa4>)
 8004894:	fba2 2303 	umull	r2, r3, r2, r3
 8004898:	0d5b      	lsrs	r3, r3, #21
 800489a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048ac:	d112      	bne.n	80048d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2200      	movs	r2, #0
 80048b6:	2180      	movs	r1, #128	@ 0x80
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f7ff fee1 	bl	8004680 <SPI_WaitFlagStateUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d016      	beq.n	80048f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e00f      	b.n	80048f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	3b01      	subs	r3, #1
 80048de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ea:	2b80      	cmp	r3, #128	@ 0x80
 80048ec:	d0f2      	beq.n	80048d4 <SPI_EndRxTxTransaction+0x78>
 80048ee:	e000      	b.n	80048f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80048f0:	bf00      	nop
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000000 	.word	0x20000000
 8004900:	165e9f81 	.word	0x165e9f81

08004904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e041      	b.n	800499a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc feca 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 f9c0 	bl	8004cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d001      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e04e      	b.n	8004a5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a23      	ldr	r2, [pc, #140]	@ (8004a68 <HAL_TIM_Base_Start_IT+0xc4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d022      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x80>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e6:	d01d      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x80>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1f      	ldr	r2, [pc, #124]	@ (8004a6c <HAL_TIM_Base_Start_IT+0xc8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d018      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x80>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a70 <HAL_TIM_Base_Start_IT+0xcc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d013      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x80>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1c      	ldr	r2, [pc, #112]	@ (8004a74 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00e      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x80>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a78 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d009      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x80>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a19      	ldr	r2, [pc, #100]	@ (8004a7c <HAL_TIM_Base_Start_IT+0xd8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d004      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x80>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a18      	ldr	r2, [pc, #96]	@ (8004a80 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d111      	bne.n	8004a48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b06      	cmp	r3, #6
 8004a34:	d010      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a46:	e007      	b.n	8004a58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40010400 	.word	0x40010400
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40001800 	.word	0x40001800

08004a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d020      	beq.n	8004ae8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01b      	beq.n	8004ae8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0202 	mvn.w	r2, #2
 8004ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8dc 	bl	8004c8c <HAL_TIM_IC_CaptureCallback>
 8004ad4:	e005      	b.n	8004ae2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8ce 	bl	8004c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f8df 	bl	8004ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d020      	beq.n	8004b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01b      	beq.n	8004b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0204 	mvn.w	r2, #4
 8004b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f8b6 	bl	8004c8c <HAL_TIM_IC_CaptureCallback>
 8004b20:	e005      	b.n	8004b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f8a8 	bl	8004c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f8b9 	bl	8004ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d020      	beq.n	8004b80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01b      	beq.n	8004b80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0208 	mvn.w	r2, #8
 8004b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2204      	movs	r2, #4
 8004b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f890 	bl	8004c8c <HAL_TIM_IC_CaptureCallback>
 8004b6c:	e005      	b.n	8004b7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f882 	bl	8004c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f893 	bl	8004ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d020      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01b      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0210 	mvn.w	r2, #16
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f86a 	bl	8004c8c <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f85c 	bl	8004c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f86d 	bl	8004ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0201 	mvn.w	r2, #1
 8004be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f83a 	bl	8004c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00c      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f910 	bl	8004e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00c      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f83e 	bl	8004cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00c      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0220 	mvn.w	r2, #32
 8004c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f8e2 	bl	8004e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a46      	ldr	r2, [pc, #280]	@ (8004df4 <TIM_Base_SetConfig+0x12c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d013      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce6:	d00f      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a43      	ldr	r2, [pc, #268]	@ (8004df8 <TIM_Base_SetConfig+0x130>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00b      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a42      	ldr	r2, [pc, #264]	@ (8004dfc <TIM_Base_SetConfig+0x134>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d007      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a41      	ldr	r2, [pc, #260]	@ (8004e00 <TIM_Base_SetConfig+0x138>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a40      	ldr	r2, [pc, #256]	@ (8004e04 <TIM_Base_SetConfig+0x13c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d108      	bne.n	8004d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a35      	ldr	r2, [pc, #212]	@ (8004df4 <TIM_Base_SetConfig+0x12c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d02b      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d28:	d027      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a32      	ldr	r2, [pc, #200]	@ (8004df8 <TIM_Base_SetConfig+0x130>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d023      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a31      	ldr	r2, [pc, #196]	@ (8004dfc <TIM_Base_SetConfig+0x134>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01f      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a30      	ldr	r2, [pc, #192]	@ (8004e00 <TIM_Base_SetConfig+0x138>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01b      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2f      	ldr	r2, [pc, #188]	@ (8004e04 <TIM_Base_SetConfig+0x13c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d017      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8004e08 <TIM_Base_SetConfig+0x140>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a2d      	ldr	r2, [pc, #180]	@ (8004e0c <TIM_Base_SetConfig+0x144>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00f      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8004e10 <TIM_Base_SetConfig+0x148>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00b      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a2b      	ldr	r2, [pc, #172]	@ (8004e14 <TIM_Base_SetConfig+0x14c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d007      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004e18 <TIM_Base_SetConfig+0x150>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a29      	ldr	r2, [pc, #164]	@ (8004e1c <TIM_Base_SetConfig+0x154>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d108      	bne.n	8004d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a10      	ldr	r2, [pc, #64]	@ (8004df4 <TIM_Base_SetConfig+0x12c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_Base_SetConfig+0xf8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a12      	ldr	r2, [pc, #72]	@ (8004e04 <TIM_Base_SetConfig+0x13c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d103      	bne.n	8004dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d105      	bne.n	8004de6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f023 0201 	bic.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	611a      	str	r2, [r3, #16]
  }
}
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40010000 	.word	0x40010000
 8004df8:	40000400 	.word	0x40000400
 8004dfc:	40000800 	.word	0x40000800
 8004e00:	40000c00 	.word	0x40000c00
 8004e04:	40010400 	.word	0x40010400
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40014400 	.word	0x40014400
 8004e10:	40014800 	.word	0x40014800
 8004e14:	40001800 	.word	0x40001800
 8004e18:	40001c00 	.word	0x40001c00
 8004e1c:	40002000 	.word	0x40002000

08004e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e042      	b.n	8004ee0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fc fc50 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	@ 0x24
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 ff59 	bl	8005d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695a      	ldr	r2, [r3, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	@ 0x28
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d175      	bne.n	8004ff4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_UART_Transmit+0x2c>
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e06e      	b.n	8004ff6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2221      	movs	r2, #33	@ 0x21
 8004f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f26:	f7fc fec3 	bl	8001cb0 <HAL_GetTick>
 8004f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	88fa      	ldrh	r2, [r7, #6]
 8004f30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	88fa      	ldrh	r2, [r7, #6]
 8004f36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f40:	d108      	bne.n	8004f54 <HAL_UART_Transmit+0x6c>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d104      	bne.n	8004f54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	e003      	b.n	8004f5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f5c:	e02e      	b.n	8004fbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2200      	movs	r2, #0
 8004f66:	2180      	movs	r1, #128	@ 0x80
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 fc31 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e03a      	b.n	8004ff6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10b      	bne.n	8004f9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	3302      	adds	r3, #2
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	e007      	b.n	8004fae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	781a      	ldrb	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	3301      	adds	r3, #1
 8004fac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1cb      	bne.n	8004f5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2140      	movs	r1, #64	@ 0x40
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fbfd 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e006      	b.n	8004ff6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e000      	b.n	8004ff6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
  }
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	4613      	mov	r3, r2
 800500a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b20      	cmp	r3, #32
 8005016:	d112      	bne.n	800503e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_UART_Receive_DMA+0x26>
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e00b      	b.n	8005040 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	461a      	mov	r2, r3
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fc25 	bl	8005884 <UART_Start_Receive_DMA>
 800503a:	4603      	mov	r3, r0
 800503c:	e000      	b.n	8005040 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b0ba      	sub	sp, #232	@ 0xe8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800506e:	2300      	movs	r3, #0
 8005070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005074:	2300      	movs	r3, #0
 8005076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800507a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10f      	bne.n	80050ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800508e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <HAL_UART_IRQHandler+0x66>
 800509a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fd8d 	bl	8005bc6 <UART_Receive_IT>
      return;
 80050ac:	e25b      	b.n	8005566 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 80de 	beq.w	8005274 <HAL_UART_IRQHandler+0x22c>
 80050b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 80d1 	beq.w	8005274 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_UART_IRQHandler+0xae>
 80050de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	f043 0201 	orr.w	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <HAL_UART_IRQHandler+0xd2>
 8005102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005112:	f043 0202 	orr.w	r2, r3, #2
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <HAL_UART_IRQHandler+0xf6>
 8005126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	f043 0204 	orr.w	r2, r3, #4
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d011      	beq.n	800516e <HAL_UART_IRQHandler+0x126>
 800514a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d105      	bne.n	8005162 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	f043 0208 	orr.w	r2, r3, #8
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 81f2 	beq.w	800555c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_UART_IRQHandler+0x14e>
 8005184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fd18 	bl	8005bc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a0:	2b40      	cmp	r3, #64	@ 0x40
 80051a2:	bf0c      	ite	eq
 80051a4:	2301      	moveq	r3, #1
 80051a6:	2300      	movne	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d103      	bne.n	80051c2 <HAL_UART_IRQHandler+0x17a>
 80051ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d04f      	beq.n	8005262 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fc20 	bl	8005a08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d2:	2b40      	cmp	r3, #64	@ 0x40
 80051d4:	d141      	bne.n	800525a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3314      	adds	r3, #20
 80051fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005202:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800520e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800521a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1d9      	bne.n	80051d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d013      	beq.n	8005252 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522e:	4a7e      	ldr	r2, [pc, #504]	@ (8005428 <HAL_UART_IRQHandler+0x3e0>)
 8005230:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005236:	4618      	mov	r0, r3
 8005238:	f7fc ffe8 	bl	800220c <HAL_DMA_Abort_IT>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800524c:	4610      	mov	r0, r2
 800524e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005250:	e00e      	b.n	8005270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9a8 	bl	80055a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	e00a      	b.n	8005270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9a4 	bl	80055a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005260:	e006      	b.n	8005270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f9a0 	bl	80055a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800526e:	e175      	b.n	800555c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005270:	bf00      	nop
    return;
 8005272:	e173      	b.n	800555c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005278:	2b01      	cmp	r3, #1
 800527a:	f040 814f 	bne.w	800551c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800527e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005282:	f003 0310 	and.w	r3, r3, #16
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 8148 	beq.w	800551c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800528c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8141 	beq.w	800551c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ba:	2b40      	cmp	r3, #64	@ 0x40
 80052bc:	f040 80b6 	bne.w	800542c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8145 	beq.w	8005560 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052de:	429a      	cmp	r2, r3
 80052e0:	f080 813e 	bcs.w	8005560 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052f6:	f000 8088 	beq.w	800540a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	330c      	adds	r3, #12
 8005300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005310:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005326:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800532a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005332:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800533e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1d9      	bne.n	80052fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800536a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800536e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005372:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800537c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e1      	bne.n	8005346 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3314      	adds	r3, #20
 8005388:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3314      	adds	r3, #20
 80053a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e3      	bne.n	8005382 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d2:	e853 3f00 	ldrex	r3, [r3]
 80053d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053da:	f023 0310 	bic.w	r3, r3, #16
 80053de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	330c      	adds	r3, #12
 80053e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80053ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e3      	bne.n	80053c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005404:	4618      	mov	r0, r3
 8005406:	f7fc fe91 	bl	800212c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2202      	movs	r2, #2
 800540e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005418:	b29b      	uxth	r3, r3
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	b29b      	uxth	r3, r3
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f8cb 	bl	80055bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005426:	e09b      	b.n	8005560 <HAL_UART_IRQHandler+0x518>
 8005428:	08005acf 	.word	0x08005acf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005434:	b29b      	uxth	r3, r3
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 808e 	beq.w	8005564 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8089 	beq.w	8005564 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	330c      	adds	r3, #12
 8005458:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005468:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005476:	647a      	str	r2, [r7, #68]	@ 0x44
 8005478:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800547c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e3      	bne.n	8005452 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3314      	adds	r3, #20
 8005490:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	623b      	str	r3, [r7, #32]
   return(result);
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3314      	adds	r3, #20
 80054aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80054b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e3      	bne.n	800548a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0310 	bic.w	r3, r3, #16
 80054e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80054f4:	61fa      	str	r2, [r7, #28]
 80054f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	69b9      	ldr	r1, [r7, #24]
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	617b      	str	r3, [r7, #20]
   return(result);
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e3      	bne.n	80054d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800550e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f851 	bl	80055bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800551a:	e023      	b.n	8005564 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800551c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <HAL_UART_IRQHandler+0x4f4>
 8005528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800552c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fade 	bl	8005af6 <UART_Transmit_IT>
    return;
 800553a:	e014      	b.n	8005566 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800553c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00e      	beq.n	8005566 <HAL_UART_IRQHandler+0x51e>
 8005548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800554c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fb1e 	bl	8005b96 <UART_EndTransmit_IT>
    return;
 800555a:	e004      	b.n	8005566 <HAL_UART_IRQHandler+0x51e>
    return;
 800555c:	bf00      	nop
 800555e:	e002      	b.n	8005566 <HAL_UART_IRQHandler+0x51e>
      return;
 8005560:	bf00      	nop
 8005562:	e000      	b.n	8005566 <HAL_UART_IRQHandler+0x51e>
      return;
 8005564:	bf00      	nop
  }
}
 8005566:	37e8      	adds	r7, #232	@ 0xe8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b09c      	sub	sp, #112	@ 0x70
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d172      	bne.n	80056d6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80055f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055f2:	2200      	movs	r2, #0
 80055f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	330c      	adds	r3, #12
 80055fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800560c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800560e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	330c      	adds	r3, #12
 8005614:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005616:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005618:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800561c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e5      	bne.n	80055f6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3314      	adds	r3, #20
 8005630:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800563a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	667b      	str	r3, [r7, #100]	@ 0x64
 8005642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3314      	adds	r3, #20
 8005648:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800564a:	647a      	str	r2, [r7, #68]	@ 0x44
 800564c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005650:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e5      	bne.n	800562a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3314      	adds	r3, #20
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	623b      	str	r3, [r7, #32]
   return(result);
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005674:	663b      	str	r3, [r7, #96]	@ 0x60
 8005676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3314      	adds	r3, #20
 800567c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800567e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005680:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e5      	bne.n	800565e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005694:	2220      	movs	r2, #32
 8005696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800569a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800569c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d119      	bne.n	80056d6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	330c      	adds	r3, #12
 80056a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f023 0310 	bic.w	r3, r3, #16
 80056b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80056c2:	61fa      	str	r2, [r7, #28]
 80056c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	69b9      	ldr	r1, [r7, #24]
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	617b      	str	r3, [r7, #20]
   return(result);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e5      	bne.n	80056a2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056d8:	2200      	movs	r2, #0
 80056da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d106      	bne.n	80056f2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056e8:	4619      	mov	r1, r3
 80056ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80056ec:	f7ff ff66 	bl	80055bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056f0:	e002      	b.n	80056f8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80056f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80056f4:	f7ff ff44 	bl	8005580 <HAL_UART_RxCpltCallback>
}
 80056f8:	bf00      	nop
 80056fa:	3770      	adds	r7, #112	@ 0x70
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005718:	2b01      	cmp	r3, #1
 800571a:	d108      	bne.n	800572e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005720:	085b      	lsrs	r3, r3, #1
 8005722:	b29b      	uxth	r3, r3
 8005724:	4619      	mov	r1, r3
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7ff ff48 	bl	80055bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800572c:	e002      	b.n	8005734 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7ff ff30 	bl	8005594 <HAL_UART_RxHalfCpltCallback>
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005758:	2b80      	cmp	r3, #128	@ 0x80
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b21      	cmp	r3, #33	@ 0x21
 800576e:	d108      	bne.n	8005782 <UART_DMAError+0x46>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800577c:	68b8      	ldr	r0, [r7, #8]
 800577e:	f000 f91b 	bl	80059b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578c:	2b40      	cmp	r3, #64	@ 0x40
 800578e:	bf0c      	ite	eq
 8005790:	2301      	moveq	r3, #1
 8005792:	2300      	movne	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b22      	cmp	r3, #34	@ 0x22
 80057a2:	d108      	bne.n	80057b6 <UART_DMAError+0x7a>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2200      	movs	r2, #0
 80057ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80057b0:	68b8      	ldr	r0, [r7, #8]
 80057b2:	f000 f929 	bl	8005a08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	f043 0210 	orr.w	r2, r3, #16
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057c2:	68b8      	ldr	r0, [r7, #8]
 80057c4:	f7ff fef0 	bl	80055a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e0:	e03b      	b.n	800585a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d037      	beq.n	800585a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ea:	f7fc fa61 	bl	8001cb0 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	6a3a      	ldr	r2, [r7, #32]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d302      	bcc.n	8005800 <UART_WaitOnFlagUntilTimeout+0x30>
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e03a      	b.n	800587a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d023      	beq.n	800585a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b80      	cmp	r3, #128	@ 0x80
 8005816:	d020      	beq.n	800585a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b40      	cmp	r3, #64	@ 0x40
 800581c:	d01d      	beq.n	800585a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b08      	cmp	r3, #8
 800582a:	d116      	bne.n	800585a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f8e0 	bl	8005a08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2208      	movs	r2, #8
 800584c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e00f      	b.n	800587a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4013      	ands	r3, r2
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	429a      	cmp	r2, r3
 8005868:	bf0c      	ite	eq
 800586a:	2301      	moveq	r3, #1
 800586c:	2300      	movne	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	429a      	cmp	r2, r3
 8005876:	d0b4      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b098      	sub	sp, #96	@ 0x60
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	4613      	mov	r3, r2
 8005890:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	88fa      	ldrh	r2, [r7, #6]
 800589c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2222      	movs	r2, #34	@ 0x22
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b0:	4a3e      	ldr	r2, [pc, #248]	@ (80059ac <UART_Start_Receive_DMA+0x128>)
 80058b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b8:	4a3d      	ldr	r2, [pc, #244]	@ (80059b0 <UART_Start_Receive_DMA+0x12c>)
 80058ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c0:	4a3c      	ldr	r2, [pc, #240]	@ (80059b4 <UART_Start_Receive_DMA+0x130>)
 80058c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c8:	2200      	movs	r2, #0
 80058ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80058cc:	f107 0308 	add.w	r3, r7, #8
 80058d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3304      	adds	r3, #4
 80058dc:	4619      	mov	r1, r3
 80058de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	f7fc fbca 	bl	800207c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80058e8:	2300      	movs	r3, #0
 80058ea:	613b      	str	r3, [r7, #16]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d019      	beq.n	800593a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	330c      	adds	r3, #12
 800590c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800591c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	330c      	adds	r3, #12
 8005924:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005926:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005928:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800592c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e5      	bne.n	8005906 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3314      	adds	r3, #20
 8005940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800594a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594c:	f043 0301 	orr.w	r3, r3, #1
 8005950:	657b      	str	r3, [r7, #84]	@ 0x54
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3314      	adds	r3, #20
 8005958:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800595a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800595c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005960:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e5      	bne.n	800593a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3314      	adds	r3, #20
 8005974:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	617b      	str	r3, [r7, #20]
   return(result);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005984:	653b      	str	r3, [r7, #80]	@ 0x50
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3314      	adds	r3, #20
 800598c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800598e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6a39      	ldr	r1, [r7, #32]
 8005994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	61fb      	str	r3, [r7, #28]
   return(result);
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e5      	bne.n	800596e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3760      	adds	r7, #96	@ 0x60
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	080055d5 	.word	0x080055d5
 80059b0:	08005701 	.word	0x08005701
 80059b4:	0800573d 	.word	0x0800573d

080059b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b089      	sub	sp, #36	@ 0x24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	330c      	adds	r3, #12
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	61ba      	str	r2, [r7, #24]
 80059e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6979      	ldr	r1, [r7, #20]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	613b      	str	r3, [r7, #16]
   return(result);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e5      	bne.n	80059c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80059fc:	bf00      	nop
 80059fe:	3724      	adds	r7, #36	@ 0x24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b095      	sub	sp, #84	@ 0x54
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	330c      	adds	r3, #12
 8005a2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a30:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a38:	e841 2300 	strex	r3, r2, [r1]
 8005a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e5      	bne.n	8005a10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3314      	adds	r3, #20
 8005a4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f023 0301 	bic.w	r3, r3, #1
 8005a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3314      	adds	r3, #20
 8005a62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a6c:	e841 2300 	strex	r3, r2, [r1]
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e5      	bne.n	8005a44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d119      	bne.n	8005ab4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f023 0310 	bic.w	r3, r3, #16
 8005a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aa0:	61ba      	str	r2, [r7, #24]
 8005aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6979      	ldr	r1, [r7, #20]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	613b      	str	r3, [r7, #16]
   return(result);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e5      	bne.n	8005a80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ac2:	bf00      	nop
 8005ac4:	3754      	adds	r7, #84	@ 0x54
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ada:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff fd5d 	bl	80055a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b21      	cmp	r3, #33	@ 0x21
 8005b08:	d13e      	bne.n	8005b88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b12:	d114      	bne.n	8005b3e <UART_Transmit_IT+0x48>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d110      	bne.n	8005b3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	1c9a      	adds	r2, r3, #2
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	621a      	str	r2, [r3, #32]
 8005b3c:	e008      	b.n	8005b50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6211      	str	r1, [r2, #32]
 8005b48:	781a      	ldrb	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10f      	bne.n	8005b84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	e000      	b.n	8005b8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b88:	2302      	movs	r3, #2
  }
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff fcd8 	bl	800556c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b08c      	sub	sp, #48	@ 0x30
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b22      	cmp	r3, #34	@ 0x22
 8005bd8:	f040 80ae 	bne.w	8005d38 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be4:	d117      	bne.n	8005c16 <UART_Receive_IT+0x50>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d113      	bne.n	8005c16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0e:	1c9a      	adds	r2, r3, #2
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c14:	e026      	b.n	8005c64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c28:	d007      	beq.n	8005c3a <UART_Receive_IT+0x74>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <UART_Receive_IT+0x82>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	e008      	b.n	8005c5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4619      	mov	r1, r3
 8005c72:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d15d      	bne.n	8005d34 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0220 	bic.w	r2, r2, #32
 8005c86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695a      	ldr	r2, [r3, #20]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d135      	bne.n	8005d2a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	e853 3f00 	ldrex	r3, [r3]
 8005cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f023 0310 	bic.w	r3, r3, #16
 8005cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce4:	623a      	str	r2, [r7, #32]
 8005ce6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	69f9      	ldr	r1, [r7, #28]
 8005cea:	6a3a      	ldr	r2, [r7, #32]
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e5      	bne.n	8005cc4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b10      	cmp	r3, #16
 8005d04:	d10a      	bne.n	8005d1c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d20:	4619      	mov	r1, r3
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff fc4a 	bl	80055bc <HAL_UARTEx_RxEventCallback>
 8005d28:	e002      	b.n	8005d30 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff fc28 	bl	8005580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	e002      	b.n	8005d3a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	e000      	b.n	8005d3a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d38:	2302      	movs	r3, #2
  }
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3730      	adds	r7, #48	@ 0x30
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d48:	b0c0      	sub	sp, #256	@ 0x100
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d60:	68d9      	ldr	r1, [r3, #12]
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	ea40 0301 	orr.w	r3, r0, r1
 8005d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d9c:	f021 010c 	bic.w	r1, r1, #12
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005daa:	430b      	orrs	r3, r1
 8005dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbe:	6999      	ldr	r1, [r3, #24]
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	ea40 0301 	orr.w	r3, r0, r1
 8005dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b8f      	ldr	r3, [pc, #572]	@ (8006010 <UART_SetConfig+0x2cc>)
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d005      	beq.n	8005de4 <UART_SetConfig+0xa0>
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b8d      	ldr	r3, [pc, #564]	@ (8006014 <UART_SetConfig+0x2d0>)
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d104      	bne.n	8005dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005de4:	f7fd fd70 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 8005de8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005dec:	e003      	b.n	8005df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dee:	f7fd fd57 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8005df2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e00:	f040 810c 	bne.w	800601c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e16:	4622      	mov	r2, r4
 8005e18:	462b      	mov	r3, r5
 8005e1a:	1891      	adds	r1, r2, r2
 8005e1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e1e:	415b      	adcs	r3, r3
 8005e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e26:	4621      	mov	r1, r4
 8005e28:	eb12 0801 	adds.w	r8, r2, r1
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	eb43 0901 	adc.w	r9, r3, r1
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e46:	4690      	mov	r8, r2
 8005e48:	4699      	mov	r9, r3
 8005e4a:	4623      	mov	r3, r4
 8005e4c:	eb18 0303 	adds.w	r3, r8, r3
 8005e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e54:	462b      	mov	r3, r5
 8005e56:	eb49 0303 	adc.w	r3, r9, r3
 8005e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e72:	460b      	mov	r3, r1
 8005e74:	18db      	adds	r3, r3, r3
 8005e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e78:	4613      	mov	r3, r2
 8005e7a:	eb42 0303 	adc.w	r3, r2, r3
 8005e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e88:	f7fa fe30 	bl	8000aec <__aeabi_uldivmod>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4b61      	ldr	r3, [pc, #388]	@ (8006018 <UART_SetConfig+0x2d4>)
 8005e92:	fba3 2302 	umull	r2, r3, r3, r2
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	011c      	lsls	r4, r3, #4
 8005e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005eac:	4642      	mov	r2, r8
 8005eae:	464b      	mov	r3, r9
 8005eb0:	1891      	adds	r1, r2, r2
 8005eb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005eb4:	415b      	adcs	r3, r3
 8005eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 0300 	mov.w	r3, #0
 8005ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005edc:	4692      	mov	sl, r2
 8005ede:	469b      	mov	fp, r3
 8005ee0:	4643      	mov	r3, r8
 8005ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eea:	464b      	mov	r3, r9
 8005eec:	eb4b 0303 	adc.w	r3, fp, r3
 8005ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	18db      	adds	r3, r3, r3
 8005f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f0e:	4613      	mov	r3, r2
 8005f10:	eb42 0303 	adc.w	r3, r2, r3
 8005f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f1e:	f7fa fde5 	bl	8000aec <__aeabi_uldivmod>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4611      	mov	r1, r2
 8005f28:	4b3b      	ldr	r3, [pc, #236]	@ (8006018 <UART_SetConfig+0x2d4>)
 8005f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	2264      	movs	r2, #100	@ 0x64
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	1acb      	subs	r3, r1, r3
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f3e:	4b36      	ldr	r3, [pc, #216]	@ (8006018 <UART_SetConfig+0x2d4>)
 8005f40:	fba3 2302 	umull	r2, r3, r3, r2
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f4c:	441c      	add	r4, r3
 8005f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f60:	4642      	mov	r2, r8
 8005f62:	464b      	mov	r3, r9
 8005f64:	1891      	adds	r1, r2, r2
 8005f66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f68:	415b      	adcs	r3, r3
 8005f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f70:	4641      	mov	r1, r8
 8005f72:	1851      	adds	r1, r2, r1
 8005f74:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f76:	4649      	mov	r1, r9
 8005f78:	414b      	adcs	r3, r1
 8005f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f88:	4659      	mov	r1, fp
 8005f8a:	00cb      	lsls	r3, r1, #3
 8005f8c:	4651      	mov	r1, sl
 8005f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f92:	4651      	mov	r1, sl
 8005f94:	00ca      	lsls	r2, r1, #3
 8005f96:	4610      	mov	r0, r2
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	4642      	mov	r2, r8
 8005f9e:	189b      	adds	r3, r3, r2
 8005fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	460a      	mov	r2, r1
 8005fa8:	eb42 0303 	adc.w	r3, r2, r3
 8005fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	18db      	adds	r3, r3, r3
 8005fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fca:	4613      	mov	r3, r2
 8005fcc:	eb42 0303 	adc.w	r3, r2, r3
 8005fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fda:	f7fa fd87 	bl	8000aec <__aeabi_uldivmod>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8006018 <UART_SetConfig+0x2d4>)
 8005fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	2164      	movs	r1, #100	@ 0x64
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	3332      	adds	r3, #50	@ 0x32
 8005ff6:	4a08      	ldr	r2, [pc, #32]	@ (8006018 <UART_SetConfig+0x2d4>)
 8005ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	f003 0207 	and.w	r2, r3, #7
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4422      	add	r2, r4
 800600a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800600c:	e106      	b.n	800621c <UART_SetConfig+0x4d8>
 800600e:	bf00      	nop
 8006010:	40011000 	.word	0x40011000
 8006014:	40011400 	.word	0x40011400
 8006018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800601c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006020:	2200      	movs	r2, #0
 8006022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006026:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800602a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800602e:	4642      	mov	r2, r8
 8006030:	464b      	mov	r3, r9
 8006032:	1891      	adds	r1, r2, r2
 8006034:	6239      	str	r1, [r7, #32]
 8006036:	415b      	adcs	r3, r3
 8006038:	627b      	str	r3, [r7, #36]	@ 0x24
 800603a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800603e:	4641      	mov	r1, r8
 8006040:	1854      	adds	r4, r2, r1
 8006042:	4649      	mov	r1, r9
 8006044:	eb43 0501 	adc.w	r5, r3, r1
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	00eb      	lsls	r3, r5, #3
 8006052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006056:	00e2      	lsls	r2, r4, #3
 8006058:	4614      	mov	r4, r2
 800605a:	461d      	mov	r5, r3
 800605c:	4643      	mov	r3, r8
 800605e:	18e3      	adds	r3, r4, r3
 8006060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006064:	464b      	mov	r3, r9
 8006066:	eb45 0303 	adc.w	r3, r5, r3
 800606a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800607a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800608a:	4629      	mov	r1, r5
 800608c:	008b      	lsls	r3, r1, #2
 800608e:	4621      	mov	r1, r4
 8006090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006094:	4621      	mov	r1, r4
 8006096:	008a      	lsls	r2, r1, #2
 8006098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800609c:	f7fa fd26 	bl	8000aec <__aeabi_uldivmod>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4b60      	ldr	r3, [pc, #384]	@ (8006228 <UART_SetConfig+0x4e4>)
 80060a6:	fba3 2302 	umull	r2, r3, r3, r2
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	011c      	lsls	r4, r3, #4
 80060ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	1891      	adds	r1, r2, r2
 80060c6:	61b9      	str	r1, [r7, #24]
 80060c8:	415b      	adcs	r3, r3
 80060ca:	61fb      	str	r3, [r7, #28]
 80060cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060d0:	4641      	mov	r1, r8
 80060d2:	1851      	adds	r1, r2, r1
 80060d4:	6139      	str	r1, [r7, #16]
 80060d6:	4649      	mov	r1, r9
 80060d8:	414b      	adcs	r3, r1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060e8:	4659      	mov	r1, fp
 80060ea:	00cb      	lsls	r3, r1, #3
 80060ec:	4651      	mov	r1, sl
 80060ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060f2:	4651      	mov	r1, sl
 80060f4:	00ca      	lsls	r2, r1, #3
 80060f6:	4610      	mov	r0, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	4642      	mov	r2, r8
 80060fe:	189b      	adds	r3, r3, r2
 8006100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006104:	464b      	mov	r3, r9
 8006106:	460a      	mov	r2, r1
 8006108:	eb42 0303 	adc.w	r3, r2, r3
 800610c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	67bb      	str	r3, [r7, #120]	@ 0x78
 800611a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006128:	4649      	mov	r1, r9
 800612a:	008b      	lsls	r3, r1, #2
 800612c:	4641      	mov	r1, r8
 800612e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006132:	4641      	mov	r1, r8
 8006134:	008a      	lsls	r2, r1, #2
 8006136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800613a:	f7fa fcd7 	bl	8000aec <__aeabi_uldivmod>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4611      	mov	r1, r2
 8006144:	4b38      	ldr	r3, [pc, #224]	@ (8006228 <UART_SetConfig+0x4e4>)
 8006146:	fba3 2301 	umull	r2, r3, r3, r1
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2264      	movs	r2, #100	@ 0x64
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	1acb      	subs	r3, r1, r3
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	3332      	adds	r3, #50	@ 0x32
 8006158:	4a33      	ldr	r2, [pc, #204]	@ (8006228 <UART_SetConfig+0x4e4>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006164:	441c      	add	r4, r3
 8006166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616a:	2200      	movs	r2, #0
 800616c:	673b      	str	r3, [r7, #112]	@ 0x70
 800616e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006174:	4642      	mov	r2, r8
 8006176:	464b      	mov	r3, r9
 8006178:	1891      	adds	r1, r2, r2
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	415b      	adcs	r3, r3
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006184:	4641      	mov	r1, r8
 8006186:	1851      	adds	r1, r2, r1
 8006188:	6039      	str	r1, [r7, #0]
 800618a:	4649      	mov	r1, r9
 800618c:	414b      	adcs	r3, r1
 800618e:	607b      	str	r3, [r7, #4]
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800619c:	4659      	mov	r1, fp
 800619e:	00cb      	lsls	r3, r1, #3
 80061a0:	4651      	mov	r1, sl
 80061a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061a6:	4651      	mov	r1, sl
 80061a8:	00ca      	lsls	r2, r1, #3
 80061aa:	4610      	mov	r0, r2
 80061ac:	4619      	mov	r1, r3
 80061ae:	4603      	mov	r3, r0
 80061b0:	4642      	mov	r2, r8
 80061b2:	189b      	adds	r3, r3, r2
 80061b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061b6:	464b      	mov	r3, r9
 80061b8:	460a      	mov	r2, r1
 80061ba:	eb42 0303 	adc.w	r3, r2, r3
 80061be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061d8:	4649      	mov	r1, r9
 80061da:	008b      	lsls	r3, r1, #2
 80061dc:	4641      	mov	r1, r8
 80061de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061e2:	4641      	mov	r1, r8
 80061e4:	008a      	lsls	r2, r1, #2
 80061e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061ea:	f7fa fc7f 	bl	8000aec <__aeabi_uldivmod>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <UART_SetConfig+0x4e4>)
 80061f4:	fba3 1302 	umull	r1, r3, r3, r2
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	2164      	movs	r1, #100	@ 0x64
 80061fc:	fb01 f303 	mul.w	r3, r1, r3
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	3332      	adds	r3, #50	@ 0x32
 8006206:	4a08      	ldr	r2, [pc, #32]	@ (8006228 <UART_SetConfig+0x4e4>)
 8006208:	fba2 2303 	umull	r2, r3, r2, r3
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	f003 020f 	and.w	r2, r3, #15
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4422      	add	r2, r4
 800621a:	609a      	str	r2, [r3, #8]
}
 800621c:	bf00      	nop
 800621e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006222:	46bd      	mov	sp, r7
 8006224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006228:	51eb851f 	.word	0x51eb851f

0800622c <__NVIC_SetPriority>:
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	4603      	mov	r3, r0
 8006234:	6039      	str	r1, [r7, #0]
 8006236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623c:	2b00      	cmp	r3, #0
 800623e:	db0a      	blt.n	8006256 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	490c      	ldr	r1, [pc, #48]	@ (8006278 <__NVIC_SetPriority+0x4c>)
 8006246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800624a:	0112      	lsls	r2, r2, #4
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	440b      	add	r3, r1
 8006250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006254:	e00a      	b.n	800626c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	4908      	ldr	r1, [pc, #32]	@ (800627c <__NVIC_SetPriority+0x50>)
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	3b04      	subs	r3, #4
 8006264:	0112      	lsls	r2, r2, #4
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	440b      	add	r3, r1
 800626a:	761a      	strb	r2, [r3, #24]
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	e000e100 	.word	0xe000e100
 800627c:	e000ed00 	.word	0xe000ed00

08006280 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006284:	2100      	movs	r1, #0
 8006286:	f06f 0004 	mvn.w	r0, #4
 800628a:	f7ff ffcf 	bl	800622c <__NVIC_SetPriority>
#endif
}
 800628e:	bf00      	nop
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800629a:	f3ef 8305 	mrs	r3, IPSR
 800629e:	603b      	str	r3, [r7, #0]
  return(result);
 80062a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80062a6:	f06f 0305 	mvn.w	r3, #5
 80062aa:	607b      	str	r3, [r7, #4]
 80062ac:	e00c      	b.n	80062c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80062ae:	4b0a      	ldr	r3, [pc, #40]	@ (80062d8 <osKernelInitialize+0x44>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d105      	bne.n	80062c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80062b6:	4b08      	ldr	r3, [pc, #32]	@ (80062d8 <osKernelInitialize+0x44>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80062bc:	2300      	movs	r3, #0
 80062be:	607b      	str	r3, [r7, #4]
 80062c0:	e002      	b.n	80062c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80062c2:	f04f 33ff 	mov.w	r3, #4294967295
 80062c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062c8:	687b      	ldr	r3, [r7, #4]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	20000590 	.word	0x20000590

080062dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e2:	f3ef 8305 	mrs	r3, IPSR
 80062e6:	603b      	str	r3, [r7, #0]
  return(result);
 80062e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80062ee:	f06f 0305 	mvn.w	r3, #5
 80062f2:	607b      	str	r3, [r7, #4]
 80062f4:	e010      	b.n	8006318 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80062f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006324 <osKernelStart+0x48>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d109      	bne.n	8006312 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80062fe:	f7ff ffbf 	bl	8006280 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006302:	4b08      	ldr	r3, [pc, #32]	@ (8006324 <osKernelStart+0x48>)
 8006304:	2202      	movs	r2, #2
 8006306:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006308:	f001 fe38 	bl	8007f7c <vTaskStartScheduler>
      stat = osOK;
 800630c:	2300      	movs	r3, #0
 800630e:	607b      	str	r3, [r7, #4]
 8006310:	e002      	b.n	8006318 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006312:	f04f 33ff 	mov.w	r3, #4294967295
 8006316:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006318:	687b      	ldr	r3, [r7, #4]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20000590 	.word	0x20000590

08006328 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006328:	b580      	push	{r7, lr}
 800632a:	b08e      	sub	sp, #56	@ 0x38
 800632c:	af04      	add	r7, sp, #16
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006334:	2300      	movs	r3, #0
 8006336:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006338:	f3ef 8305 	mrs	r3, IPSR
 800633c:	617b      	str	r3, [r7, #20]
  return(result);
 800633e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006340:	2b00      	cmp	r3, #0
 8006342:	d17e      	bne.n	8006442 <osThreadNew+0x11a>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d07b      	beq.n	8006442 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800634a:	2380      	movs	r3, #128	@ 0x80
 800634c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800634e:	2318      	movs	r3, #24
 8006350:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006352:	2300      	movs	r3, #0
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006356:	f04f 33ff 	mov.w	r3, #4294967295
 800635a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d045      	beq.n	80063ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <osThreadNew+0x48>
        name = attr->name;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <osThreadNew+0x6e>
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	2b38      	cmp	r3, #56	@ 0x38
 8006388:	d805      	bhi.n	8006396 <osThreadNew+0x6e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <osThreadNew+0x72>
        return (NULL);
 8006396:	2300      	movs	r3, #0
 8006398:	e054      	b.n	8006444 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	089b      	lsrs	r3, r3, #2
 80063a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00e      	beq.n	80063d0 <osThreadNew+0xa8>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	2b5b      	cmp	r3, #91	@ 0x5b
 80063b8:	d90a      	bls.n	80063d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d006      	beq.n	80063d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <osThreadNew+0xa8>
        mem = 1;
 80063ca:	2301      	movs	r3, #1
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	e010      	b.n	80063f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10c      	bne.n	80063f2 <osThreadNew+0xca>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d108      	bne.n	80063f2 <osThreadNew+0xca>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d104      	bne.n	80063f2 <osThreadNew+0xca>
          mem = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	e001      	b.n	80063f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d110      	bne.n	800641a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006400:	9202      	str	r2, [sp, #8]
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	6a3a      	ldr	r2, [r7, #32]
 800640c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f001 fa7c 	bl	800790c <xTaskCreateStatic>
 8006414:	4603      	mov	r3, r0
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	e013      	b.n	8006442 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d110      	bne.n	8006442 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	b29a      	uxth	r2, r3
 8006424:	f107 0310 	add.w	r3, r7, #16
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f001 faca 	bl	80079cc <xTaskCreate>
 8006438:	4603      	mov	r3, r0
 800643a:	2b01      	cmp	r3, #1
 800643c:	d001      	beq.n	8006442 <osThreadNew+0x11a>
            hTask = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006442:	693b      	ldr	r3, [r7, #16]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3728      	adds	r7, #40	@ 0x28
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006458:	f3ef 8305 	mrs	r3, IPSR
 800645c:	60bb      	str	r3, [r7, #8]
  return(result);
 800645e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8006464:	f06f 0305 	mvn.w	r3, #5
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e017      	b.n	800649c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8006472:	f06f 0303 	mvn.w	r3, #3
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e010      	b.n	800649c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800647a:	6938      	ldr	r0, [r7, #16]
 800647c:	f001 fd16 	bl	8007eac <eTaskGetState>
 8006480:	4603      	mov	r3, r0
 8006482:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	2b04      	cmp	r3, #4
 8006488:	d005      	beq.n	8006496 <osThreadTerminate+0x4a>
      stat = osOK;
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800648e:	6938      	ldr	r0, [r7, #16]
 8006490:	f001 fbe2 	bl	8007c58 <vTaskDelete>
 8006494:	e002      	b.n	800649c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8006496:	f06f 0302 	mvn.w	r3, #2
 800649a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800649c:	697b      	ldr	r3, [r7, #20]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b08a      	sub	sp, #40	@ 0x28
 80064aa:	af02      	add	r7, sp, #8
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064b6:	f3ef 8305 	mrs	r3, IPSR
 80064ba:	613b      	str	r3, [r7, #16]
  return(result);
 80064bc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d175      	bne.n	80065ae <osSemaphoreNew+0x108>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d072      	beq.n	80065ae <osSemaphoreNew+0x108>
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d86e      	bhi.n	80065ae <osSemaphoreNew+0x108>
    mem = -1;
 80064d0:	f04f 33ff 	mov.w	r3, #4294967295
 80064d4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d015      	beq.n	8006508 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d006      	beq.n	80064f2 <osSemaphoreNew+0x4c>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	2b4f      	cmp	r3, #79	@ 0x4f
 80064ea:	d902      	bls.n	80064f2 <osSemaphoreNew+0x4c>
        mem = 1;
 80064ec:	2301      	movs	r3, #1
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	e00c      	b.n	800650c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d108      	bne.n	800650c <osSemaphoreNew+0x66>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <osSemaphoreNew+0x66>
          mem = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	e001      	b.n	800650c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d04c      	beq.n	80065ae <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d128      	bne.n	800656c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d10a      	bne.n	8006536 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2203      	movs	r2, #3
 8006526:	9200      	str	r2, [sp, #0]
 8006528:	2200      	movs	r2, #0
 800652a:	2100      	movs	r1, #0
 800652c:	2001      	movs	r0, #1
 800652e:	f000 fa2b 	bl	8006988 <xQueueGenericCreateStatic>
 8006532:	61f8      	str	r0, [r7, #28]
 8006534:	e005      	b.n	8006542 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006536:	2203      	movs	r2, #3
 8006538:	2100      	movs	r1, #0
 800653a:	2001      	movs	r0, #1
 800653c:	f000 faa1 	bl	8006a82 <xQueueGenericCreate>
 8006540:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d022      	beq.n	800658e <osSemaphoreNew+0xe8>
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01f      	beq.n	800658e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800654e:	2300      	movs	r3, #0
 8006550:	2200      	movs	r2, #0
 8006552:	2100      	movs	r1, #0
 8006554:	69f8      	ldr	r0, [r7, #28]
 8006556:	f000 fb61 	bl	8006c1c <xQueueGenericSend>
 800655a:	4603      	mov	r3, r0
 800655c:	2b01      	cmp	r3, #1
 800655e:	d016      	beq.n	800658e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006560:	69f8      	ldr	r0, [r7, #28]
 8006562:	f000 ffff 	bl	8007564 <vQueueDelete>
            hSemaphore = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	e010      	b.n	800658e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d108      	bne.n	8006584 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	461a      	mov	r2, r3
 8006578:	68b9      	ldr	r1, [r7, #8]
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fadf 	bl	8006b3e <xQueueCreateCountingSemaphoreStatic>
 8006580:	61f8      	str	r0, [r7, #28]
 8006582:	e004      	b.n	800658e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006584:	68b9      	ldr	r1, [r7, #8]
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 fb12 	bl	8006bb0 <xQueueCreateCountingSemaphore>
 800658c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00c      	beq.n	80065ae <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <osSemaphoreNew+0xfc>
          name = attr->name;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	e001      	b.n	80065a6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80065a6:	6979      	ldr	r1, [r7, #20]
 80065a8:	69f8      	ldr	r0, [r7, #28]
 80065aa:	f001 f927 	bl	80077fc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80065ae:	69fb      	ldr	r3, [r7, #28]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3720      	adds	r7, #32
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d103      	bne.n	80065d8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80065d0:	f06f 0303 	mvn.w	r3, #3
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	e039      	b.n	800664c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d8:	f3ef 8305 	mrs	r3, IPSR
 80065dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80065de:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d022      	beq.n	800662a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80065ea:	f06f 0303 	mvn.w	r3, #3
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e02c      	b.n	800664c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80065f6:	f107 0308 	add.w	r3, r7, #8
 80065fa:	461a      	mov	r2, r3
 80065fc:	2100      	movs	r1, #0
 80065fe:	6938      	ldr	r0, [r7, #16]
 8006600:	f000 ff2e 	bl	8007460 <xQueueReceiveFromISR>
 8006604:	4603      	mov	r3, r0
 8006606:	2b01      	cmp	r3, #1
 8006608:	d003      	beq.n	8006612 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800660a:	f06f 0302 	mvn.w	r3, #2
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	e01c      	b.n	800664c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d019      	beq.n	800664c <osSemaphoreAcquire+0x94>
 8006618:	4b0f      	ldr	r3, [pc, #60]	@ (8006658 <osSemaphoreAcquire+0xa0>)
 800661a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	e010      	b.n	800664c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6938      	ldr	r0, [r7, #16]
 800662e:	f000 fe07 	bl	8007240 <xQueueSemaphoreTake>
 8006632:	4603      	mov	r3, r0
 8006634:	2b01      	cmp	r3, #1
 8006636:	d009      	beq.n	800664c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800663e:	f06f 0301 	mvn.w	r3, #1
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e002      	b.n	800664c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006646:	f06f 0302 	mvn.w	r3, #2
 800664a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800664c:	697b      	ldr	r3, [r7, #20]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	e000ed04 	.word	0xe000ed04

0800665c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d103      	bne.n	800667a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006672:	f06f 0303 	mvn.w	r3, #3
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	e02c      	b.n	80066d4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800667a:	f3ef 8305 	mrs	r3, IPSR
 800667e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006680:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01a      	beq.n	80066bc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006686:	2300      	movs	r3, #0
 8006688:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800668a:	f107 0308 	add.w	r3, r7, #8
 800668e:	4619      	mov	r1, r3
 8006690:	6938      	ldr	r0, [r7, #16]
 8006692:	f000 fc63 	bl	8006f5c <xQueueGiveFromISR>
 8006696:	4603      	mov	r3, r0
 8006698:	2b01      	cmp	r3, #1
 800669a:	d003      	beq.n	80066a4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800669c:	f06f 0302 	mvn.w	r3, #2
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e017      	b.n	80066d4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d014      	beq.n	80066d4 <osSemaphoreRelease+0x78>
 80066aa:	4b0d      	ldr	r3, [pc, #52]	@ (80066e0 <osSemaphoreRelease+0x84>)
 80066ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	e00b      	b.n	80066d4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80066bc:	2300      	movs	r3, #0
 80066be:	2200      	movs	r2, #0
 80066c0:	2100      	movs	r1, #0
 80066c2:	6938      	ldr	r0, [r7, #16]
 80066c4:	f000 faaa 	bl	8006c1c <xQueueGenericSend>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d002      	beq.n	80066d4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80066ce:	f06f 0302 	mvn.w	r3, #2
 80066d2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80066d4:	697b      	ldr	r3, [r7, #20]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	e000ed04 	.word	0xe000ed04

080066e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4a07      	ldr	r2, [pc, #28]	@ (8006710 <vApplicationGetIdleTaskMemory+0x2c>)
 80066f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4a06      	ldr	r2, [pc, #24]	@ (8006714 <vApplicationGetIdleTaskMemory+0x30>)
 80066fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2280      	movs	r2, #128	@ 0x80
 8006700:	601a      	str	r2, [r3, #0]
}
 8006702:	bf00      	nop
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	20000594 	.word	0x20000594
 8006714:	200005f0 	.word	0x200005f0

08006718 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a07      	ldr	r2, [pc, #28]	@ (8006744 <vApplicationGetTimerTaskMemory+0x2c>)
 8006728:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4a06      	ldr	r2, [pc, #24]	@ (8006748 <vApplicationGetTimerTaskMemory+0x30>)
 800672e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006736:	601a      	str	r2, [r3, #0]
}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	200007f0 	.word	0x200007f0
 8006748:	2000084c 	.word	0x2000084c

0800674c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f103 0208 	add.w	r2, r3, #8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f04f 32ff 	mov.w	r2, #4294967295
 8006764:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f103 0208 	add.w	r2, r3, #8
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f103 0208 	add.w	r2, r3, #8
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	601a      	str	r2, [r3, #0]
}
 80067e2:	bf00      	nop
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006804:	d103      	bne.n	800680e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	e00c      	b.n	8006828 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3308      	adds	r3, #8
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e002      	b.n	800681c <vListInsert+0x2e>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	429a      	cmp	r2, r3
 8006826:	d2f6      	bcs.n	8006816 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6892      	ldr	r2, [r2, #8]
 8006876:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6852      	ldr	r2, [r2, #4]
 8006880:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	429a      	cmp	r2, r3
 800688a:	d103      	bne.n	8006894 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	1e5a      	subs	r2, r3, #1
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10b      	bne.n	80068e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068da:	bf00      	nop
 80068dc:	bf00      	nop
 80068de:	e7fd      	b.n	80068dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068e0:	f002 fe0a 	bl	80094f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ec:	68f9      	ldr	r1, [r7, #12]
 80068ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80068f0:	fb01 f303 	mul.w	r3, r1, r3
 80068f4:	441a      	add	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006910:	3b01      	subs	r3, #1
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	441a      	add	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	22ff      	movs	r2, #255	@ 0xff
 8006924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	22ff      	movs	r2, #255	@ 0xff
 800692c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d114      	bne.n	8006960 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d01a      	beq.n	8006974 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3310      	adds	r3, #16
 8006942:	4618      	mov	r0, r3
 8006944:	f001 fda8 	bl	8008498 <xTaskRemoveFromEventList>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d012      	beq.n	8006974 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800694e:	4b0d      	ldr	r3, [pc, #52]	@ (8006984 <xQueueGenericReset+0xd0>)
 8006950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	e009      	b.n	8006974 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3310      	adds	r3, #16
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff fef1 	bl	800674c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3324      	adds	r3, #36	@ 0x24
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff feec 	bl	800674c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006974:	f002 fdf2 	bl	800955c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006978:	2301      	movs	r3, #1
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	e000ed04 	.word	0xe000ed04

08006988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08e      	sub	sp, #56	@ 0x38
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10b      	bne.n	80069b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	e7fd      	b.n	80069b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	e7fd      	b.n	80069ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <xQueueGenericCreateStatic+0x56>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <xQueueGenericCreateStatic+0x5a>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <xQueueGenericCreateStatic+0x5c>
 80069e2:	2300      	movs	r3, #0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10b      	bne.n	8006a00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	623b      	str	r3, [r7, #32]
}
 80069fa:	bf00      	nop
 80069fc:	bf00      	nop
 80069fe:	e7fd      	b.n	80069fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d102      	bne.n	8006a0c <xQueueGenericCreateStatic+0x84>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <xQueueGenericCreateStatic+0x88>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <xQueueGenericCreateStatic+0x8a>
 8006a10:	2300      	movs	r3, #0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	61fb      	str	r3, [r7, #28]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a2e:	2350      	movs	r3, #80	@ 0x50
 8006a30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b50      	cmp	r3, #80	@ 0x50
 8006a36:	d00b      	beq.n	8006a50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	61bb      	str	r3, [r7, #24]
}
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	e7fd      	b.n	8006a4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00d      	beq.n	8006a78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f840 	bl	8006af8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3730      	adds	r7, #48	@ 0x30
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b08a      	sub	sp, #40	@ 0x28
 8006a86:	af02      	add	r7, sp, #8
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <xQueueGenericCreate+0x2c>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	613b      	str	r3, [r7, #16]
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	fb02 f303 	mul.w	r3, r2, r3
 8006ab6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	3350      	adds	r3, #80	@ 0x50
 8006abc:	4618      	mov	r0, r3
 8006abe:	f002 fe3d 	bl	800973c <pvPortMalloc>
 8006ac2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d011      	beq.n	8006aee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	3350      	adds	r3, #80	@ 0x50
 8006ad2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006adc:	79fa      	ldrb	r2, [r7, #7]
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f805 	bl	8006af8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006aee:	69bb      	ldr	r3, [r7, #24]
	}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3720      	adds	r7, #32
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d103      	bne.n	8006b14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e002      	b.n	8006b1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b26:	2101      	movs	r1, #1
 8006b28:	69b8      	ldr	r0, [r7, #24]
 8006b2a:	f7ff fec3 	bl	80068b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	78fa      	ldrb	r2, [r7, #3]
 8006b32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b08a      	sub	sp, #40	@ 0x28
 8006b42:	af02      	add	r7, sp, #8
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10b      	bne.n	8006b68 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	61bb      	str	r3, [r7, #24]
}
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	e7fd      	b.n	8006b64 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d90b      	bls.n	8006b88 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	617b      	str	r3, [r7, #20]
}
 8006b82:	bf00      	nop
 8006b84:	bf00      	nop
 8006b86:	e7fd      	b.n	8006b84 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006b88:	2302      	movs	r3, #2
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7ff fef8 	bl	8006988 <xQueueGenericCreateStatic>
 8006b98:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ba6:	69fb      	ldr	r3, [r7, #28]
	}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3720      	adds	r7, #32
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10b      	bne.n	8006bd8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	613b      	str	r3, [r7, #16]
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	e7fd      	b.n	8006bd4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d90b      	bls.n	8006bf8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	60fb      	str	r3, [r7, #12]
}
 8006bf2:	bf00      	nop
 8006bf4:	bf00      	nop
 8006bf6:	e7fd      	b.n	8006bf4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff ff40 	bl	8006a82 <xQueueGenericCreate>
 8006c02:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006c10:	697b      	ldr	r3, [r7, #20]
	}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08e      	sub	sp, #56	@ 0x38
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10b      	bne.n	8006c50 <xQueueGenericSend+0x34>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c4a:	bf00      	nop
 8006c4c:	bf00      	nop
 8006c4e:	e7fd      	b.n	8006c4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d103      	bne.n	8006c5e <xQueueGenericSend+0x42>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <xQueueGenericSend+0x46>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <xQueueGenericSend+0x48>
 8006c62:	2300      	movs	r3, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <xQueueGenericSend+0x64>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c7a:	bf00      	nop
 8006c7c:	bf00      	nop
 8006c7e:	e7fd      	b.n	8006c7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d103      	bne.n	8006c8e <xQueueGenericSend+0x72>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d101      	bne.n	8006c92 <xQueueGenericSend+0x76>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e000      	b.n	8006c94 <xQueueGenericSend+0x78>
 8006c92:	2300      	movs	r3, #0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10b      	bne.n	8006cb0 <xQueueGenericSend+0x94>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	623b      	str	r3, [r7, #32]
}
 8006caa:	bf00      	nop
 8006cac:	bf00      	nop
 8006cae:	e7fd      	b.n	8006cac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cb0:	f001 fdb2 	bl	8008818 <xTaskGetSchedulerState>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d102      	bne.n	8006cc0 <xQueueGenericSend+0xa4>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <xQueueGenericSend+0xa8>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <xQueueGenericSend+0xaa>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10b      	bne.n	8006ce2 <xQueueGenericSend+0xc6>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	61fb      	str	r3, [r7, #28]
}
 8006cdc:	bf00      	nop
 8006cde:	bf00      	nop
 8006ce0:	e7fd      	b.n	8006cde <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ce2:	f002 fc09 	bl	80094f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d302      	bcc.n	8006cf8 <xQueueGenericSend+0xdc>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d129      	bne.n	8006d4c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cfe:	f000 fc6d 	bl	80075dc <prvCopyDataToQueue>
 8006d02:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d010      	beq.n	8006d2e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	3324      	adds	r3, #36	@ 0x24
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 fbc1 	bl	8008498 <xTaskRemoveFromEventList>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d013      	beq.n	8006d44 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8006e1c <xQueueGenericSend+0x200>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	e00a      	b.n	8006d44 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d34:	4b39      	ldr	r3, [pc, #228]	@ (8006e1c <xQueueGenericSend+0x200>)
 8006d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d44:	f002 fc0a 	bl	800955c <vPortExitCritical>
				return pdPASS;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e063      	b.n	8006e14 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d103      	bne.n	8006d5a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d52:	f002 fc03 	bl	800955c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e05c      	b.n	8006e14 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d106      	bne.n	8006d6e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d60:	f107 0314 	add.w	r3, r7, #20
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 fbfb 	bl	8008560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d6e:	f002 fbf5 	bl	800955c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d72:	f001 f96b 	bl	800804c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d76:	f002 fbbf 	bl	80094f8 <vPortEnterCritical>
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d80:	b25b      	sxtb	r3, r3
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d103      	bne.n	8006d90 <xQueueGenericSend+0x174>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d96:	b25b      	sxtb	r3, r3
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9c:	d103      	bne.n	8006da6 <xQueueGenericSend+0x18a>
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006da6:	f002 fbd9 	bl	800955c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006daa:	1d3a      	adds	r2, r7, #4
 8006dac:	f107 0314 	add.w	r3, r7, #20
 8006db0:	4611      	mov	r1, r2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 fbea 	bl	800858c <xTaskCheckForTimeOut>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d124      	bne.n	8006e08 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006dbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dc0:	f000 fd04 	bl	80077cc <prvIsQueueFull>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d018      	beq.n	8006dfc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	3310      	adds	r3, #16
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 fb0e 	bl	80083f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006dd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dda:	f000 fc8f 	bl	80076fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006dde:	f001 f943 	bl	8008068 <xTaskResumeAll>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f47f af7c 	bne.w	8006ce2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006dea:	4b0c      	ldr	r3, [pc, #48]	@ (8006e1c <xQueueGenericSend+0x200>)
 8006dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	e772      	b.n	8006ce2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dfe:	f000 fc7d 	bl	80076fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e02:	f001 f931 	bl	8008068 <xTaskResumeAll>
 8006e06:	e76c      	b.n	8006ce2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e0a:	f000 fc77 	bl	80076fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e0e:	f001 f92b 	bl	8008068 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3738      	adds	r7, #56	@ 0x38
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	e000ed04 	.word	0xe000ed04

08006e20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b090      	sub	sp, #64	@ 0x40
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10b      	bne.n	8006e50 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	e7fd      	b.n	8006e4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d103      	bne.n	8006e5e <xQueueGenericSendFromISR+0x3e>
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <xQueueGenericSendFromISR+0x42>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e000      	b.n	8006e64 <xQueueGenericSendFromISR+0x44>
 8006e62:	2300      	movs	r3, #0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10b      	bne.n	8006e80 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e7a:	bf00      	nop
 8006e7c:	bf00      	nop
 8006e7e:	e7fd      	b.n	8006e7c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d103      	bne.n	8006e8e <xQueueGenericSendFromISR+0x6e>
 8006e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <xQueueGenericSendFromISR+0x72>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <xQueueGenericSendFromISR+0x74>
 8006e92:	2300      	movs	r3, #0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10b      	bne.n	8006eb0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	623b      	str	r3, [r7, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	bf00      	nop
 8006eae:	e7fd      	b.n	8006eac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006eb0:	f002 fc02 	bl	80096b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006eb4:	f3ef 8211 	mrs	r2, BASEPRI
 8006eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	61fa      	str	r2, [r7, #28]
 8006eca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ece:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d302      	bcc.n	8006ee2 <xQueueGenericSendFromISR+0xc2>
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d12f      	bne.n	8006f42 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ee8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	68b9      	ldr	r1, [r7, #8]
 8006ef6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ef8:	f000 fb70 	bl	80075dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006efc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f04:	d112      	bne.n	8006f2c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d016      	beq.n	8006f3c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	3324      	adds	r3, #36	@ 0x24
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 fac0 	bl	8008498 <xTaskRemoveFromEventList>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00e      	beq.n	8006f3c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	e007      	b.n	8006f3c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006f30:	3301      	adds	r3, #1
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	b25a      	sxtb	r2, r3
 8006f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006f40:	e001      	b.n	8006f46 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f48:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3740      	adds	r7, #64	@ 0x40
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08e      	sub	sp, #56	@ 0x38
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10b      	bne.n	8006f88 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	623b      	str	r3, [r7, #32]
}
 8006f82:	bf00      	nop
 8006f84:	bf00      	nop
 8006f86:	e7fd      	b.n	8006f84 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	61fb      	str	r3, [r7, #28]
}
 8006fa2:	bf00      	nop
 8006fa4:	bf00      	nop
 8006fa6:	e7fd      	b.n	8006fa4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d103      	bne.n	8006fb8 <xQueueGiveFromISR+0x5c>
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <xQueueGiveFromISR+0x60>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <xQueueGiveFromISR+0x62>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	61bb      	str	r3, [r7, #24]
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop
 8006fd8:	e7fd      	b.n	8006fd6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fda:	f002 fb6d 	bl	80096b8 <vPortValidateInterruptPriority>
	__asm volatile
 8006fde:	f3ef 8211 	mrs	r2, BASEPRI
 8006fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	617a      	str	r2, [r7, #20]
 8006ff4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006ff6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007004:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007006:	429a      	cmp	r2, r3
 8007008:	d22b      	bcs.n	8007062 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800701c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d112      	bne.n	800704c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702a:	2b00      	cmp	r3, #0
 800702c:	d016      	beq.n	800705c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007030:	3324      	adds	r3, #36	@ 0x24
 8007032:	4618      	mov	r0, r3
 8007034:	f001 fa30 	bl	8008498 <xTaskRemoveFromEventList>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00e      	beq.n	800705c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00b      	beq.n	800705c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2201      	movs	r2, #1
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	e007      	b.n	800705c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800704c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007050:	3301      	adds	r3, #1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	b25a      	sxtb	r2, r3
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800705c:	2301      	movs	r3, #1
 800705e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007060:	e001      	b.n	8007066 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007062:	2300      	movs	r3, #0
 8007064:	637b      	str	r3, [r7, #52]	@ 0x34
 8007066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007068:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f383 8811 	msr	BASEPRI, r3
}
 8007070:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007074:	4618      	mov	r0, r3
 8007076:	3738      	adds	r7, #56	@ 0x38
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08c      	sub	sp, #48	@ 0x30
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007088:	2300      	movs	r3, #0
 800708a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10b      	bne.n	80070ae <xQueueReceive+0x32>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	623b      	str	r3, [r7, #32]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d103      	bne.n	80070bc <xQueueReceive+0x40>
 80070b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <xQueueReceive+0x44>
 80070bc:	2301      	movs	r3, #1
 80070be:	e000      	b.n	80070c2 <xQueueReceive+0x46>
 80070c0:	2300      	movs	r3, #0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10b      	bne.n	80070de <xQueueReceive+0x62>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	61fb      	str	r3, [r7, #28]
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	e7fd      	b.n	80070da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070de:	f001 fb9b 	bl	8008818 <xTaskGetSchedulerState>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d102      	bne.n	80070ee <xQueueReceive+0x72>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <xQueueReceive+0x76>
 80070ee:	2301      	movs	r3, #1
 80070f0:	e000      	b.n	80070f4 <xQueueReceive+0x78>
 80070f2:	2300      	movs	r3, #0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10b      	bne.n	8007110 <xQueueReceive+0x94>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	61bb      	str	r3, [r7, #24]
}
 800710a:	bf00      	nop
 800710c:	bf00      	nop
 800710e:	e7fd      	b.n	800710c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007110:	f002 f9f2 	bl	80094f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007118:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	d01f      	beq.n	8007160 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007124:	f000 fac4 	bl	80076b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712a:	1e5a      	subs	r2, r3, #1
 800712c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00f      	beq.n	8007158 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713a:	3310      	adds	r3, #16
 800713c:	4618      	mov	r0, r3
 800713e:	f001 f9ab 	bl	8008498 <xTaskRemoveFromEventList>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d007      	beq.n	8007158 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007148:	4b3c      	ldr	r3, [pc, #240]	@ (800723c <xQueueReceive+0x1c0>)
 800714a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007158:	f002 fa00 	bl	800955c <vPortExitCritical>
				return pdPASS;
 800715c:	2301      	movs	r3, #1
 800715e:	e069      	b.n	8007234 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d103      	bne.n	800716e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007166:	f002 f9f9 	bl	800955c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800716a:	2300      	movs	r3, #0
 800716c:	e062      	b.n	8007234 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800716e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d106      	bne.n	8007182 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007174:	f107 0310 	add.w	r3, r7, #16
 8007178:	4618      	mov	r0, r3
 800717a:	f001 f9f1 	bl	8008560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800717e:	2301      	movs	r3, #1
 8007180:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007182:	f002 f9eb 	bl	800955c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007186:	f000 ff61 	bl	800804c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800718a:	f002 f9b5 	bl	80094f8 <vPortEnterCritical>
 800718e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007194:	b25b      	sxtb	r3, r3
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	d103      	bne.n	80071a4 <xQueueReceive+0x128>
 800719c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071aa:	b25b      	sxtb	r3, r3
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d103      	bne.n	80071ba <xQueueReceive+0x13e>
 80071b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071ba:	f002 f9cf 	bl	800955c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071be:	1d3a      	adds	r2, r7, #4
 80071c0:	f107 0310 	add.w	r3, r7, #16
 80071c4:	4611      	mov	r1, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 f9e0 	bl	800858c <xTaskCheckForTimeOut>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d123      	bne.n	800721a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071d4:	f000 fae4 	bl	80077a0 <prvIsQueueEmpty>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d017      	beq.n	800720e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e0:	3324      	adds	r3, #36	@ 0x24
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	4611      	mov	r1, r2
 80071e6:	4618      	mov	r0, r3
 80071e8:	f001 f904 	bl	80083f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071ee:	f000 fa85 	bl	80076fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071f2:	f000 ff39 	bl	8008068 <xTaskResumeAll>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d189      	bne.n	8007110 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80071fc:	4b0f      	ldr	r3, [pc, #60]	@ (800723c <xQueueReceive+0x1c0>)
 80071fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	e780      	b.n	8007110 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800720e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007210:	f000 fa74 	bl	80076fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007214:	f000 ff28 	bl	8008068 <xTaskResumeAll>
 8007218:	e77a      	b.n	8007110 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800721a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800721c:	f000 fa6e 	bl	80076fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007220:	f000 ff22 	bl	8008068 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007226:	f000 fabb 	bl	80077a0 <prvIsQueueEmpty>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	f43f af6f 	beq.w	8007110 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007232:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007234:	4618      	mov	r0, r3
 8007236:	3730      	adds	r7, #48	@ 0x30
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08e      	sub	sp, #56	@ 0x38
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800724a:	2300      	movs	r3, #0
 800724c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007252:	2300      	movs	r3, #0
 8007254:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10b      	bne.n	8007274 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	623b      	str	r3, [r7, #32]
}
 800726e:	bf00      	nop
 8007270:	bf00      	nop
 8007272:	e7fd      	b.n	8007270 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00b      	beq.n	8007294 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	61fb      	str	r3, [r7, #28]
}
 800728e:	bf00      	nop
 8007290:	bf00      	nop
 8007292:	e7fd      	b.n	8007290 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007294:	f001 fac0 	bl	8008818 <xTaskGetSchedulerState>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d102      	bne.n	80072a4 <xQueueSemaphoreTake+0x64>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <xQueueSemaphoreTake+0x68>
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <xQueueSemaphoreTake+0x6a>
 80072a8:	2300      	movs	r3, #0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10b      	bne.n	80072c6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	61bb      	str	r3, [r7, #24]
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	e7fd      	b.n	80072c2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072c6:	f002 f917 	bl	80094f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80072ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80072d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d024      	beq.n	8007320 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	1e5a      	subs	r2, r3, #1
 80072da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d104      	bne.n	80072f0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80072e6:	f001 fc11 	bl	8008b0c <pvTaskIncrementMutexHeldCount>
 80072ea:	4602      	mov	r2, r0
 80072ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00f      	beq.n	8007318 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fa:	3310      	adds	r3, #16
 80072fc:	4618      	mov	r0, r3
 80072fe:	f001 f8cb 	bl	8008498 <xTaskRemoveFromEventList>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d007      	beq.n	8007318 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007308:	4b54      	ldr	r3, [pc, #336]	@ (800745c <xQueueSemaphoreTake+0x21c>)
 800730a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007318:	f002 f920 	bl	800955c <vPortExitCritical>
				return pdPASS;
 800731c:	2301      	movs	r3, #1
 800731e:	e098      	b.n	8007452 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d112      	bne.n	800734c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	617b      	str	r3, [r7, #20]
}
 800733e:	bf00      	nop
 8007340:	bf00      	nop
 8007342:	e7fd      	b.n	8007340 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007344:	f002 f90a 	bl	800955c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007348:	2300      	movs	r3, #0
 800734a:	e082      	b.n	8007452 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800734c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007352:	f107 030c 	add.w	r3, r7, #12
 8007356:	4618      	mov	r0, r3
 8007358:	f001 f902 	bl	8008560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800735c:	2301      	movs	r3, #1
 800735e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007360:	f002 f8fc 	bl	800955c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007364:	f000 fe72 	bl	800804c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007368:	f002 f8c6 	bl	80094f8 <vPortEnterCritical>
 800736c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007372:	b25b      	sxtb	r3, r3
 8007374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007378:	d103      	bne.n	8007382 <xQueueSemaphoreTake+0x142>
 800737a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007384:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007388:	b25b      	sxtb	r3, r3
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738e:	d103      	bne.n	8007398 <xQueueSemaphoreTake+0x158>
 8007390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007398:	f002 f8e0 	bl	800955c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800739c:	463a      	mov	r2, r7
 800739e:	f107 030c 	add.w	r3, r7, #12
 80073a2:	4611      	mov	r1, r2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 f8f1 	bl	800858c <xTaskCheckForTimeOut>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d132      	bne.n	8007416 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073b2:	f000 f9f5 	bl	80077a0 <prvIsQueueEmpty>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d026      	beq.n	800740a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d109      	bne.n	80073d8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80073c4:	f002 f898 	bl	80094f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 fa41 	bl	8008854 <xTaskPriorityInherit>
 80073d2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80073d4:	f002 f8c2 	bl	800955c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073da:	3324      	adds	r3, #36	@ 0x24
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	4611      	mov	r1, r2
 80073e0:	4618      	mov	r0, r3
 80073e2:	f001 f807 	bl	80083f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073e8:	f000 f988 	bl	80076fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073ec:	f000 fe3c 	bl	8008068 <xTaskResumeAll>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f47f af67 	bne.w	80072c6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80073f8:	4b18      	ldr	r3, [pc, #96]	@ (800745c <xQueueSemaphoreTake+0x21c>)
 80073fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	e75d      	b.n	80072c6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800740a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800740c:	f000 f976 	bl	80076fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007410:	f000 fe2a 	bl	8008068 <xTaskResumeAll>
 8007414:	e757      	b.n	80072c6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007416:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007418:	f000 f970 	bl	80076fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800741c:	f000 fe24 	bl	8008068 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007420:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007422:	f000 f9bd 	bl	80077a0 <prvIsQueueEmpty>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	f43f af4c 	beq.w	80072c6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00d      	beq.n	8007450 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007434:	f002 f860 	bl	80094f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007438:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800743a:	f000 f8b7 	bl	80075ac <prvGetDisinheritPriorityAfterTimeout>
 800743e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007446:	4618      	mov	r0, r3
 8007448:	f001 fadc 	bl	8008a04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800744c:	f002 f886 	bl	800955c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007450:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007452:	4618      	mov	r0, r3
 8007454:	3738      	adds	r7, #56	@ 0x38
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08e      	sub	sp, #56	@ 0x38
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10b      	bne.n	800748e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	623b      	str	r3, [r7, #32]
}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	e7fd      	b.n	800748a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d103      	bne.n	800749c <xQueueReceiveFromISR+0x3c>
 8007494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <xQueueReceiveFromISR+0x40>
 800749c:	2301      	movs	r3, #1
 800749e:	e000      	b.n	80074a2 <xQueueReceiveFromISR+0x42>
 80074a0:	2300      	movs	r3, #0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10b      	bne.n	80074be <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	61fb      	str	r3, [r7, #28]
}
 80074b8:	bf00      	nop
 80074ba:	bf00      	nop
 80074bc:	e7fd      	b.n	80074ba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074be:	f002 f8fb 	bl	80096b8 <vPortValidateInterruptPriority>
	__asm volatile
 80074c2:	f3ef 8211 	mrs	r2, BASEPRI
 80074c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	61ba      	str	r2, [r7, #24]
 80074d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80074da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d02f      	beq.n	800754a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074f8:	f000 f8da 	bl	80076b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fe:	1e5a      	subs	r2, r3, #1
 8007500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007502:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007504:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750c:	d112      	bne.n	8007534 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d016      	beq.n	8007544 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	3310      	adds	r3, #16
 800751a:	4618      	mov	r0, r3
 800751c:	f000 ffbc 	bl	8008498 <xTaskRemoveFromEventList>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00e      	beq.n	8007544 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00b      	beq.n	8007544 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	e007      	b.n	8007544 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007538:	3301      	adds	r3, #1
 800753a:	b2db      	uxtb	r3, r3
 800753c:	b25a      	sxtb	r2, r3
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007544:	2301      	movs	r3, #1
 8007546:	637b      	str	r3, [r7, #52]	@ 0x34
 8007548:	e001      	b.n	800754e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800754a:	2300      	movs	r3, #0
 800754c:	637b      	str	r3, [r7, #52]	@ 0x34
 800754e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007550:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f383 8811 	msr	BASEPRI, r3
}
 8007558:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800755a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800755c:	4618      	mov	r0, r3
 800755e:	3738      	adds	r7, #56	@ 0x38
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10b      	bne.n	800758e <vQueueDelete+0x2a>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	60bb      	str	r3, [r7, #8]
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	e7fd      	b.n	800758a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f95e 	bl	8007850 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800759a:	2b00      	cmp	r3, #0
 800759c:	d102      	bne.n	80075a4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f002 f99a 	bl	80098d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d006      	beq.n	80075ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e001      	b.n	80075ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80075ca:	2300      	movs	r3, #0
 80075cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80075ce:	68fb      	ldr	r3, [r7, #12]
	}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10d      	bne.n	8007616 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d14d      	bne.n	800769e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	4618      	mov	r0, r3
 8007608:	f001 f98c 	bl	8008924 <xTaskPriorityDisinherit>
 800760c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	609a      	str	r2, [r3, #8]
 8007614:	e043      	b.n	800769e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d119      	bne.n	8007650 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6858      	ldr	r0, [r3, #4]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007624:	461a      	mov	r2, r3
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	f008 fd19 	bl	801005e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007634:	441a      	add	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	429a      	cmp	r2, r3
 8007644:	d32b      	bcc.n	800769e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	605a      	str	r2, [r3, #4]
 800764e:	e026      	b.n	800769e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68d8      	ldr	r0, [r3, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007658:	461a      	mov	r2, r3
 800765a:	68b9      	ldr	r1, [r7, #8]
 800765c:	f008 fcff 	bl	801005e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007668:	425b      	negs	r3, r3
 800766a:	441a      	add	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d207      	bcs.n	800768c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007684:	425b      	negs	r3, r3
 8007686:	441a      	add	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b02      	cmp	r3, #2
 8007690:	d105      	bne.n	800769e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	3b01      	subs	r3, #1
 800769c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80076a6:	697b      	ldr	r3, [r7, #20]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d018      	beq.n	80076f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ca:	441a      	add	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d303      	bcc.n	80076e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68d9      	ldr	r1, [r3, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ec:	461a      	mov	r2, r3
 80076ee:	6838      	ldr	r0, [r7, #0]
 80076f0:	f008 fcb5 	bl	801005e <memcpy>
	}
}
 80076f4:	bf00      	nop
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007704:	f001 fef8 	bl	80094f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800770e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007710:	e011      	b.n	8007736 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007716:	2b00      	cmp	r3, #0
 8007718:	d012      	beq.n	8007740 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3324      	adds	r3, #36	@ 0x24
 800771e:	4618      	mov	r0, r3
 8007720:	f000 feba 	bl	8008498 <xTaskRemoveFromEventList>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800772a:	f000 ff93 	bl	8008654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800772e:	7bfb      	ldrb	r3, [r7, #15]
 8007730:	3b01      	subs	r3, #1
 8007732:	b2db      	uxtb	r3, r3
 8007734:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800773a:	2b00      	cmp	r3, #0
 800773c:	dce9      	bgt.n	8007712 <prvUnlockQueue+0x16>
 800773e:	e000      	b.n	8007742 <prvUnlockQueue+0x46>
					break;
 8007740:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	22ff      	movs	r2, #255	@ 0xff
 8007746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800774a:	f001 ff07 	bl	800955c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800774e:	f001 fed3 	bl	80094f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007758:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800775a:	e011      	b.n	8007780 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d012      	beq.n	800778a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3310      	adds	r3, #16
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fe95 	bl	8008498 <xTaskRemoveFromEventList>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007774:	f000 ff6e 	bl	8008654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	3b01      	subs	r3, #1
 800777c:	b2db      	uxtb	r3, r3
 800777e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007784:	2b00      	cmp	r3, #0
 8007786:	dce9      	bgt.n	800775c <prvUnlockQueue+0x60>
 8007788:	e000      	b.n	800778c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800778a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	22ff      	movs	r2, #255	@ 0xff
 8007790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007794:	f001 fee2 	bl	800955c <vPortExitCritical>
}
 8007798:	bf00      	nop
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077a8:	f001 fea6 	bl	80094f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80077b4:	2301      	movs	r3, #1
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	e001      	b.n	80077be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077be:	f001 fecd 	bl	800955c <vPortExitCritical>

	return xReturn;
 80077c2:	68fb      	ldr	r3, [r7, #12]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077d4:	f001 fe90 	bl	80094f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d102      	bne.n	80077ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	e001      	b.n	80077ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077ee:	f001 feb5 	bl	800955c <vPortExitCritical>

	return xReturn;
 80077f2:	68fb      	ldr	r3, [r7, #12]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	e014      	b.n	8007836 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800780c:	4a0f      	ldr	r2, [pc, #60]	@ (800784c <vQueueAddToRegistry+0x50>)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10b      	bne.n	8007830 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007818:	490c      	ldr	r1, [pc, #48]	@ (800784c <vQueueAddToRegistry+0x50>)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007822:	4a0a      	ldr	r2, [pc, #40]	@ (800784c <vQueueAddToRegistry+0x50>)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	4413      	add	r3, r2
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800782e:	e006      	b.n	800783e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b07      	cmp	r3, #7
 800783a:	d9e7      	bls.n	800780c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800783c:	bf00      	nop
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	20000c4c 	.word	0x20000c4c

08007850 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	e016      	b.n	800788c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800785e:	4a10      	ldr	r2, [pc, #64]	@ (80078a0 <vQueueUnregisterQueue+0x50>)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	4413      	add	r3, r2
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	429a      	cmp	r2, r3
 800786c:	d10b      	bne.n	8007886 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800786e:	4a0c      	ldr	r2, [pc, #48]	@ (80078a0 <vQueueUnregisterQueue+0x50>)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2100      	movs	r1, #0
 8007874:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007878:	4a09      	ldr	r2, [pc, #36]	@ (80078a0 <vQueueUnregisterQueue+0x50>)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	00db      	lsls	r3, r3, #3
 800787e:	4413      	add	r3, r2
 8007880:	2200      	movs	r2, #0
 8007882:	605a      	str	r2, [r3, #4]
				break;
 8007884:	e006      	b.n	8007894 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3301      	adds	r3, #1
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b07      	cmp	r3, #7
 8007890:	d9e5      	bls.n	800785e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	20000c4c 	.word	0x20000c4c

080078a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078b4:	f001 fe20 	bl	80094f8 <vPortEnterCritical>
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078be:	b25b      	sxtb	r3, r3
 80078c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c4:	d103      	bne.n	80078ce <vQueueWaitForMessageRestricted+0x2a>
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078d4:	b25b      	sxtb	r3, r3
 80078d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078da:	d103      	bne.n	80078e4 <vQueueWaitForMessageRestricted+0x40>
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078e4:	f001 fe3a 	bl	800955c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d106      	bne.n	80078fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	3324      	adds	r3, #36	@ 0x24
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fda1 	bl	8008440 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078fe:	6978      	ldr	r0, [r7, #20]
 8007900:	f7ff fefc 	bl	80076fc <prvUnlockQueue>
	}
 8007904:	bf00      	nop
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800790c:	b580      	push	{r7, lr}
 800790e:	b08e      	sub	sp, #56	@ 0x38
 8007910:	af04      	add	r7, sp, #16
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
 8007918:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800791a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10b      	bne.n	8007938 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	623b      	str	r3, [r7, #32]
}
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	e7fd      	b.n	8007934 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10b      	bne.n	8007956 <xTaskCreateStatic+0x4a>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	61fb      	str	r3, [r7, #28]
}
 8007950:	bf00      	nop
 8007952:	bf00      	nop
 8007954:	e7fd      	b.n	8007952 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007956:	235c      	movs	r3, #92	@ 0x5c
 8007958:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b5c      	cmp	r3, #92	@ 0x5c
 800795e:	d00b      	beq.n	8007978 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	61bb      	str	r3, [r7, #24]
}
 8007972:	bf00      	nop
 8007974:	bf00      	nop
 8007976:	e7fd      	b.n	8007974 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007978:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800797a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01e      	beq.n	80079be <xTaskCreateStatic+0xb2>
 8007980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007982:	2b00      	cmp	r3, #0
 8007984:	d01b      	beq.n	80079be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007988:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800798a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800798e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	2202      	movs	r2, #2
 8007994:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007998:	2300      	movs	r3, #0
 800799a:	9303      	str	r3, [sp, #12]
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	9302      	str	r3, [sp, #8]
 80079a0:	f107 0314 	add.w	r3, r7, #20
 80079a4:	9301      	str	r3, [sp, #4]
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 f850 	bl	8007a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80079b8:	f000 f8de 	bl	8007b78 <prvAddNewTaskToReadyList>
 80079bc:	e001      	b.n	80079c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079c2:	697b      	ldr	r3, [r7, #20]
	}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3728      	adds	r7, #40	@ 0x28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08c      	sub	sp, #48	@ 0x30
 80079d0:	af04      	add	r7, sp, #16
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	603b      	str	r3, [r7, #0]
 80079d8:	4613      	mov	r3, r2
 80079da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 feab 	bl	800973c <pvPortMalloc>
 80079e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00e      	beq.n	8007a0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079ee:	205c      	movs	r0, #92	@ 0x5c
 80079f0:	f001 fea4 	bl	800973c <pvPortMalloc>
 80079f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a02:	e005      	b.n	8007a10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a04:	6978      	ldr	r0, [r7, #20]
 8007a06:	f001 ff67 	bl	80098d8 <vPortFree>
 8007a0a:	e001      	b.n	8007a10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d017      	beq.n	8007a46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a1e:	88fa      	ldrh	r2, [r7, #6]
 8007a20:	2300      	movs	r3, #0
 8007a22:	9303      	str	r3, [sp, #12]
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	9302      	str	r3, [sp, #8]
 8007a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	68b9      	ldr	r1, [r7, #8]
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 f80e 	bl	8007a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a3a:	69f8      	ldr	r0, [r7, #28]
 8007a3c:	f000 f89c 	bl	8007b78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a40:	2301      	movs	r3, #1
 8007a42:	61bb      	str	r3, [r7, #24]
 8007a44:	e002      	b.n	8007a4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a46:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a4c:	69bb      	ldr	r3, [r7, #24]
	}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3720      	adds	r7, #32
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b088      	sub	sp, #32
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	607a      	str	r2, [r7, #4]
 8007a62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a66:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	21a5      	movs	r1, #165	@ 0xa5
 8007a70:	f008 fa69 	bl	800ff46 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	f023 0307 	bic.w	r3, r3, #7
 8007a8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	617b      	str	r3, [r7, #20]
}
 8007aaa:	bf00      	nop
 8007aac:	bf00      	nop
 8007aae:	e7fd      	b.n	8007aac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d01f      	beq.n	8007af6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	61fb      	str	r3, [r7, #28]
 8007aba:	e012      	b.n	8007ae2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	7819      	ldrb	r1, [r3, #0]
 8007ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	4413      	add	r3, r2
 8007aca:	3334      	adds	r3, #52	@ 0x34
 8007acc:	460a      	mov	r2, r1
 8007ace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d006      	beq.n	8007aea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	61fb      	str	r3, [r7, #28]
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	2b0f      	cmp	r3, #15
 8007ae6:	d9e9      	bls.n	8007abc <prvInitialiseNewTask+0x66>
 8007ae8:	e000      	b.n	8007aec <prvInitialiseNewTask+0x96>
			{
				break;
 8007aea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007af4:	e003      	b.n	8007afe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b00:	2b37      	cmp	r3, #55	@ 0x37
 8007b02:	d901      	bls.n	8007b08 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b04:	2337      	movs	r3, #55	@ 0x37
 8007b06:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b12:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b16:	2200      	movs	r2, #0
 8007b18:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fe34 	bl	800678c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b26:	3318      	adds	r3, #24
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe fe2f 	bl	800678c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b42:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b46:	2200      	movs	r2, #0
 8007b48:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	68f9      	ldr	r1, [r7, #12]
 8007b56:	69b8      	ldr	r0, [r7, #24]
 8007b58:	f001 fb9a 	bl	8009290 <pxPortInitialiseStack>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b6e:	bf00      	nop
 8007b70:	3720      	adds	r7, #32
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b80:	f001 fcba 	bl	80094f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b84:	4b2d      	ldr	r3, [pc, #180]	@ (8007c3c <prvAddNewTaskToReadyList+0xc4>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8007c3c <prvAddNewTaskToReadyList+0xc4>)
 8007b8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8007c40 <prvAddNewTaskToReadyList+0xc8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d109      	bne.n	8007baa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b96:	4a2a      	ldr	r2, [pc, #168]	@ (8007c40 <prvAddNewTaskToReadyList+0xc8>)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b9c:	4b27      	ldr	r3, [pc, #156]	@ (8007c3c <prvAddNewTaskToReadyList+0xc4>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d110      	bne.n	8007bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ba4:	f000 fd7a 	bl	800869c <prvInitialiseTaskLists>
 8007ba8:	e00d      	b.n	8007bc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007baa:	4b26      	ldr	r3, [pc, #152]	@ (8007c44 <prvAddNewTaskToReadyList+0xcc>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d109      	bne.n	8007bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bb2:	4b23      	ldr	r3, [pc, #140]	@ (8007c40 <prvAddNewTaskToReadyList+0xc8>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d802      	bhi.n	8007bc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8007c40 <prvAddNewTaskToReadyList+0xc8>)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007bc6:	4b20      	ldr	r3, [pc, #128]	@ (8007c48 <prvAddNewTaskToReadyList+0xd0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8007c48 <prvAddNewTaskToReadyList+0xd0>)
 8007bce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c48 <prvAddNewTaskToReadyList+0xd0>)
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8007c4c <prvAddNewTaskToReadyList+0xd4>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d903      	bls.n	8007bec <prvAddNewTaskToReadyList+0x74>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be8:	4a18      	ldr	r2, [pc, #96]	@ (8007c4c <prvAddNewTaskToReadyList+0xd4>)
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4a15      	ldr	r2, [pc, #84]	@ (8007c50 <prvAddNewTaskToReadyList+0xd8>)
 8007bfa:	441a      	add	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	4619      	mov	r1, r3
 8007c02:	4610      	mov	r0, r2
 8007c04:	f7fe fdcf 	bl	80067a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c08:	f001 fca8 	bl	800955c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c44 <prvAddNewTaskToReadyList+0xcc>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00e      	beq.n	8007c32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c14:	4b0a      	ldr	r3, [pc, #40]	@ (8007c40 <prvAddNewTaskToReadyList+0xc8>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d207      	bcs.n	8007c32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c22:	4b0c      	ldr	r3, [pc, #48]	@ (8007c54 <prvAddNewTaskToReadyList+0xdc>)
 8007c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c32:	bf00      	nop
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20001160 	.word	0x20001160
 8007c40:	20000c8c 	.word	0x20000c8c
 8007c44:	2000116c 	.word	0x2000116c
 8007c48:	2000117c 	.word	0x2000117c
 8007c4c:	20001168 	.word	0x20001168
 8007c50:	20000c90 	.word	0x20000c90
 8007c54:	e000ed04 	.word	0xe000ed04

08007c58 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007c60:	f001 fc4a 	bl	80094f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d102      	bne.n	8007c70 <vTaskDelete+0x18>
 8007c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8007d20 <vTaskDelete+0xc8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	e000      	b.n	8007c72 <vTaskDelete+0x1a>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe fdf1 	bl	8006860 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d004      	beq.n	8007c90 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3318      	adds	r3, #24
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fde8 	bl	8006860 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007c90:	4b24      	ldr	r3, [pc, #144]	@ (8007d24 <vTaskDelete+0xcc>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3301      	adds	r3, #1
 8007c96:	4a23      	ldr	r2, [pc, #140]	@ (8007d24 <vTaskDelete+0xcc>)
 8007c98:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007c9a:	4b21      	ldr	r3, [pc, #132]	@ (8007d20 <vTaskDelete+0xc8>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d10b      	bne.n	8007cbc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4619      	mov	r1, r3
 8007caa:	481f      	ldr	r0, [pc, #124]	@ (8007d28 <vTaskDelete+0xd0>)
 8007cac:	f7fe fd7b 	bl	80067a6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8007d2c <vTaskDelete+0xd4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8007d2c <vTaskDelete+0xd4>)
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	e009      	b.n	8007cd0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8007d30 <vTaskDelete+0xd8>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8007d30 <vTaskDelete+0xd8>)
 8007cc4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fd56 	bl	8008778 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007ccc:	f000 fd84 	bl	80087d8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007cd0:	f001 fc44 	bl	800955c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007cd4:	4b17      	ldr	r3, [pc, #92]	@ (8007d34 <vTaskDelete+0xdc>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01c      	beq.n	8007d16 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8007cdc:	4b10      	ldr	r3, [pc, #64]	@ (8007d20 <vTaskDelete+0xc8>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d117      	bne.n	8007d16 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007ce6:	4b14      	ldr	r3, [pc, #80]	@ (8007d38 <vTaskDelete+0xe0>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00b      	beq.n	8007d06 <vTaskDelete+0xae>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	60bb      	str	r3, [r7, #8]
}
 8007d00:	bf00      	nop
 8007d02:	bf00      	nop
 8007d04:	e7fd      	b.n	8007d02 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007d06:	4b0d      	ldr	r3, [pc, #52]	@ (8007d3c <vTaskDelete+0xe4>)
 8007d08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20000c8c 	.word	0x20000c8c
 8007d24:	2000117c 	.word	0x2000117c
 8007d28:	20001134 	.word	0x20001134
 8007d2c:	20001148 	.word	0x20001148
 8007d30:	20001160 	.word	0x20001160
 8007d34:	2000116c 	.word	0x2000116c
 8007d38:	20001188 	.word	0x20001188
 8007d3c:	e000ed04 	.word	0xe000ed04

08007d40 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08a      	sub	sp, #40	@ 0x28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10b      	bne.n	8007d6c <vTaskDelayUntil+0x2c>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	617b      	str	r3, [r7, #20]
}
 8007d66:	bf00      	nop
 8007d68:	bf00      	nop
 8007d6a:	e7fd      	b.n	8007d68 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10b      	bne.n	8007d8a <vTaskDelayUntil+0x4a>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	613b      	str	r3, [r7, #16]
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
 8007d88:	e7fd      	b.n	8007d86 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8007d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8007e34 <vTaskDelayUntil+0xf4>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00b      	beq.n	8007daa <vTaskDelayUntil+0x6a>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	60fb      	str	r3, [r7, #12]
}
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop
 8007da8:	e7fd      	b.n	8007da6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8007daa:	f000 f94f 	bl	800804c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007dae:	4b22      	ldr	r3, [pc, #136]	@ (8007e38 <vTaskDelayUntil+0xf8>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	4413      	add	r3, r2
 8007dbc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6a3a      	ldr	r2, [r7, #32]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d20b      	bcs.n	8007de0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	69fa      	ldr	r2, [r7, #28]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d211      	bcs.n	8007df6 <vTaskDelayUntil+0xb6>
 8007dd2:	69fa      	ldr	r2, [r7, #28]
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d90d      	bls.n	8007df6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dde:	e00a      	b.n	8007df6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	69fa      	ldr	r2, [r7, #28]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d303      	bcc.n	8007df2 <vTaskDelayUntil+0xb2>
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d901      	bls.n	8007df6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d006      	beq.n	8007e10 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fe92 	bl	8008b34 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007e10:	f000 f92a 	bl	8008068 <xTaskResumeAll>
 8007e14:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d107      	bne.n	8007e2c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007e1c:	4b07      	ldr	r3, [pc, #28]	@ (8007e3c <vTaskDelayUntil+0xfc>)
 8007e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e2c:	bf00      	nop
 8007e2e:	3728      	adds	r7, #40	@ 0x28
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20001188 	.word	0x20001188
 8007e38:	20001164 	.word	0x20001164
 8007e3c:	e000ed04 	.word	0xe000ed04

08007e40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d018      	beq.n	8007e84 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e52:	4b14      	ldr	r3, [pc, #80]	@ (8007ea4 <vTaskDelay+0x64>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00b      	beq.n	8007e72 <vTaskDelay+0x32>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	60bb      	str	r3, [r7, #8]
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	e7fd      	b.n	8007e6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e72:	f000 f8eb 	bl	800804c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e76:	2100      	movs	r1, #0
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fe5b 	bl	8008b34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e7e:	f000 f8f3 	bl	8008068 <xTaskResumeAll>
 8007e82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d107      	bne.n	8007e9a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007e8a:	4b07      	ldr	r3, [pc, #28]	@ (8007ea8 <vTaskDelay+0x68>)
 8007e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e9a:	bf00      	nop
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20001188 	.word	0x20001188
 8007ea8:	e000ed04 	.word	0xe000ed04

08007eac <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10b      	bne.n	8007ed6 <eTaskGetState+0x2a>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	60bb      	str	r3, [r7, #8]
}
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop
 8007ed4:	e7fd      	b.n	8007ed2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8007ed6:	4b24      	ldr	r3, [pc, #144]	@ (8007f68 <eTaskGetState+0xbc>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d102      	bne.n	8007ee6 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	e03a      	b.n	8007f5c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8007ee6:	f001 fb07 	bl	80094f8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8007ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8007f6c <eTaskGetState+0xc0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8007ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8007f70 <eTaskGetState+0xc4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8007efc:	f001 fb2e 	bl	800955c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d003      	beq.n	8007f10 <eTaskGetState+0x64>
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d102      	bne.n	8007f16 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8007f10:	2302      	movs	r3, #2
 8007f12:	77fb      	strb	r3, [r7, #31]
 8007f14:	e022      	b.n	8007f5c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	4a16      	ldr	r2, [pc, #88]	@ (8007f74 <eTaskGetState+0xc8>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d112      	bne.n	8007f44 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d102      	bne.n	8007f38 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8007f32:	2302      	movs	r3, #2
 8007f34:	77fb      	strb	r3, [r7, #31]
 8007f36:	e011      	b.n	8007f5c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	77fb      	strb	r3, [r7, #31]
 8007f3c:	e00e      	b.n	8007f5c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8007f3e:	2302      	movs	r3, #2
 8007f40:	77fb      	strb	r3, [r7, #31]
 8007f42:	e00b      	b.n	8007f5c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	4a0c      	ldr	r2, [pc, #48]	@ (8007f78 <eTaskGetState+0xcc>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d002      	beq.n	8007f52 <eTaskGetState+0xa6>
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d102      	bne.n	8007f58 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8007f52:	2304      	movs	r3, #4
 8007f54:	77fb      	strb	r3, [r7, #31]
 8007f56:	e001      	b.n	8007f5c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8007f5c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3720      	adds	r7, #32
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20000c8c 	.word	0x20000c8c
 8007f6c:	20001118 	.word	0x20001118
 8007f70:	2000111c 	.word	0x2000111c
 8007f74:	2000114c 	.word	0x2000114c
 8007f78:	20001134 	.word	0x20001134

08007f7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08a      	sub	sp, #40	@ 0x28
 8007f80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f8a:	463a      	mov	r2, r7
 8007f8c:	1d39      	adds	r1, r7, #4
 8007f8e:	f107 0308 	add.w	r3, r7, #8
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fba6 	bl	80066e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	9202      	str	r2, [sp, #8]
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	460a      	mov	r2, r1
 8007faa:	4922      	ldr	r1, [pc, #136]	@ (8008034 <vTaskStartScheduler+0xb8>)
 8007fac:	4822      	ldr	r0, [pc, #136]	@ (8008038 <vTaskStartScheduler+0xbc>)
 8007fae:	f7ff fcad 	bl	800790c <xTaskCreateStatic>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	4a21      	ldr	r2, [pc, #132]	@ (800803c <vTaskStartScheduler+0xc0>)
 8007fb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007fb8:	4b20      	ldr	r3, [pc, #128]	@ (800803c <vTaskStartScheduler+0xc0>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	e001      	b.n	8007fca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d102      	bne.n	8007fd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007fd0:	f000 fe04 	bl	8008bdc <xTimerCreateTimerTask>
 8007fd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d116      	bne.n	800800a <vTaskStartScheduler+0x8e>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	613b      	str	r3, [r7, #16]
}
 8007fee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ff0:	4b13      	ldr	r3, [pc, #76]	@ (8008040 <vTaskStartScheduler+0xc4>)
 8007ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ff8:	4b12      	ldr	r3, [pc, #72]	@ (8008044 <vTaskStartScheduler+0xc8>)
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ffe:	4b12      	ldr	r3, [pc, #72]	@ (8008048 <vTaskStartScheduler+0xcc>)
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008004:	f001 f9d4 	bl	80093b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008008:	e00f      	b.n	800802a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d10b      	bne.n	800802a <vTaskStartScheduler+0xae>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	60fb      	str	r3, [r7, #12]
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop
 8008028:	e7fd      	b.n	8008026 <vTaskStartScheduler+0xaa>
}
 800802a:	bf00      	nop
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	08010b44 	.word	0x08010b44
 8008038:	0800866d 	.word	0x0800866d
 800803c:	20001184 	.word	0x20001184
 8008040:	20001180 	.word	0x20001180
 8008044:	2000116c 	.word	0x2000116c
 8008048:	20001164 	.word	0x20001164

0800804c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008050:	4b04      	ldr	r3, [pc, #16]	@ (8008064 <vTaskSuspendAll+0x18>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3301      	adds	r3, #1
 8008056:	4a03      	ldr	r2, [pc, #12]	@ (8008064 <vTaskSuspendAll+0x18>)
 8008058:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800805a:	bf00      	nop
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	20001188 	.word	0x20001188

08008068 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800806e:	2300      	movs	r3, #0
 8008070:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008072:	2300      	movs	r3, #0
 8008074:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008076:	4b42      	ldr	r3, [pc, #264]	@ (8008180 <xTaskResumeAll+0x118>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10b      	bne.n	8008096 <xTaskResumeAll+0x2e>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	603b      	str	r3, [r7, #0]
}
 8008090:	bf00      	nop
 8008092:	bf00      	nop
 8008094:	e7fd      	b.n	8008092 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008096:	f001 fa2f 	bl	80094f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800809a:	4b39      	ldr	r3, [pc, #228]	@ (8008180 <xTaskResumeAll+0x118>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3b01      	subs	r3, #1
 80080a0:	4a37      	ldr	r2, [pc, #220]	@ (8008180 <xTaskResumeAll+0x118>)
 80080a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080a4:	4b36      	ldr	r3, [pc, #216]	@ (8008180 <xTaskResumeAll+0x118>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d162      	bne.n	8008172 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080ac:	4b35      	ldr	r3, [pc, #212]	@ (8008184 <xTaskResumeAll+0x11c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d05e      	beq.n	8008172 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080b4:	e02f      	b.n	8008116 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b6:	4b34      	ldr	r3, [pc, #208]	@ (8008188 <xTaskResumeAll+0x120>)
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3318      	adds	r3, #24
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fbcc 	bl	8006860 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fe fbc7 	bl	8006860 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d6:	4b2d      	ldr	r3, [pc, #180]	@ (800818c <xTaskResumeAll+0x124>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d903      	bls.n	80080e6 <xTaskResumeAll+0x7e>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e2:	4a2a      	ldr	r2, [pc, #168]	@ (800818c <xTaskResumeAll+0x124>)
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ea:	4613      	mov	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4a27      	ldr	r2, [pc, #156]	@ (8008190 <xTaskResumeAll+0x128>)
 80080f4:	441a      	add	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4619      	mov	r1, r3
 80080fc:	4610      	mov	r0, r2
 80080fe:	f7fe fb52 	bl	80067a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008106:	4b23      	ldr	r3, [pc, #140]	@ (8008194 <xTaskResumeAll+0x12c>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810c:	429a      	cmp	r2, r3
 800810e:	d302      	bcc.n	8008116 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008110:	4b21      	ldr	r3, [pc, #132]	@ (8008198 <xTaskResumeAll+0x130>)
 8008112:	2201      	movs	r2, #1
 8008114:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008116:	4b1c      	ldr	r3, [pc, #112]	@ (8008188 <xTaskResumeAll+0x120>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1cb      	bne.n	80080b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008124:	f000 fb58 	bl	80087d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008128:	4b1c      	ldr	r3, [pc, #112]	@ (800819c <xTaskResumeAll+0x134>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d010      	beq.n	8008156 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008134:	f000 f846 	bl	80081c4 <xTaskIncrementTick>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800813e:	4b16      	ldr	r3, [pc, #88]	@ (8008198 <xTaskResumeAll+0x130>)
 8008140:	2201      	movs	r2, #1
 8008142:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3b01      	subs	r3, #1
 8008148:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f1      	bne.n	8008134 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008150:	4b12      	ldr	r3, [pc, #72]	@ (800819c <xTaskResumeAll+0x134>)
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008156:	4b10      	ldr	r3, [pc, #64]	@ (8008198 <xTaskResumeAll+0x130>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800815e:	2301      	movs	r3, #1
 8008160:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008162:	4b0f      	ldr	r3, [pc, #60]	@ (80081a0 <xTaskResumeAll+0x138>)
 8008164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008172:	f001 f9f3 	bl	800955c <vPortExitCritical>

	return xAlreadyYielded;
 8008176:	68bb      	ldr	r3, [r7, #8]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20001188 	.word	0x20001188
 8008184:	20001160 	.word	0x20001160
 8008188:	20001120 	.word	0x20001120
 800818c:	20001168 	.word	0x20001168
 8008190:	20000c90 	.word	0x20000c90
 8008194:	20000c8c 	.word	0x20000c8c
 8008198:	20001174 	.word	0x20001174
 800819c:	20001170 	.word	0x20001170
 80081a0:	e000ed04 	.word	0xe000ed04

080081a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80081aa:	4b05      	ldr	r3, [pc, #20]	@ (80081c0 <xTaskGetTickCount+0x1c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80081b0:	687b      	ldr	r3, [r7, #4]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20001164 	.word	0x20001164

080081c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ce:	4b4f      	ldr	r3, [pc, #316]	@ (800830c <xTaskIncrementTick+0x148>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 8090 	bne.w	80082f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008310 <xTaskIncrementTick+0x14c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3301      	adds	r3, #1
 80081de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081e0:	4a4b      	ldr	r2, [pc, #300]	@ (8008310 <xTaskIncrementTick+0x14c>)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d121      	bne.n	8008230 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80081ec:	4b49      	ldr	r3, [pc, #292]	@ (8008314 <xTaskIncrementTick+0x150>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <xTaskIncrementTick+0x4a>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	603b      	str	r3, [r7, #0]
}
 8008208:	bf00      	nop
 800820a:	bf00      	nop
 800820c:	e7fd      	b.n	800820a <xTaskIncrementTick+0x46>
 800820e:	4b41      	ldr	r3, [pc, #260]	@ (8008314 <xTaskIncrementTick+0x150>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	4b40      	ldr	r3, [pc, #256]	@ (8008318 <xTaskIncrementTick+0x154>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a3e      	ldr	r2, [pc, #248]	@ (8008314 <xTaskIncrementTick+0x150>)
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	4a3e      	ldr	r2, [pc, #248]	@ (8008318 <xTaskIncrementTick+0x154>)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	4b3e      	ldr	r3, [pc, #248]	@ (800831c <xTaskIncrementTick+0x158>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3301      	adds	r3, #1
 8008228:	4a3c      	ldr	r2, [pc, #240]	@ (800831c <xTaskIncrementTick+0x158>)
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	f000 fad4 	bl	80087d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008230:	4b3b      	ldr	r3, [pc, #236]	@ (8008320 <xTaskIncrementTick+0x15c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	429a      	cmp	r2, r3
 8008238:	d349      	bcc.n	80082ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800823a:	4b36      	ldr	r3, [pc, #216]	@ (8008314 <xTaskIncrementTick+0x150>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d104      	bne.n	800824e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008244:	4b36      	ldr	r3, [pc, #216]	@ (8008320 <xTaskIncrementTick+0x15c>)
 8008246:	f04f 32ff 	mov.w	r2, #4294967295
 800824a:	601a      	str	r2, [r3, #0]
					break;
 800824c:	e03f      	b.n	80082ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800824e:	4b31      	ldr	r3, [pc, #196]	@ (8008314 <xTaskIncrementTick+0x150>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	429a      	cmp	r2, r3
 8008264:	d203      	bcs.n	800826e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008266:	4a2e      	ldr	r2, [pc, #184]	@ (8008320 <xTaskIncrementTick+0x15c>)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800826c:	e02f      	b.n	80082ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	3304      	adds	r3, #4
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe faf4 	bl	8006860 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827c:	2b00      	cmp	r3, #0
 800827e:	d004      	beq.n	800828a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	3318      	adds	r3, #24
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe faeb 	bl	8006860 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800828e:	4b25      	ldr	r3, [pc, #148]	@ (8008324 <xTaskIncrementTick+0x160>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d903      	bls.n	800829e <xTaskIncrementTick+0xda>
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800829a:	4a22      	ldr	r2, [pc, #136]	@ (8008324 <xTaskIncrementTick+0x160>)
 800829c:	6013      	str	r3, [r2, #0]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a2:	4613      	mov	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008328 <xTaskIncrementTick+0x164>)
 80082ac:	441a      	add	r2, r3
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f7fe fa76 	bl	80067a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082be:	4b1b      	ldr	r3, [pc, #108]	@ (800832c <xTaskIncrementTick+0x168>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d3b8      	bcc.n	800823a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80082c8:	2301      	movs	r3, #1
 80082ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082cc:	e7b5      	b.n	800823a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082ce:	4b17      	ldr	r3, [pc, #92]	@ (800832c <xTaskIncrementTick+0x168>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d4:	4914      	ldr	r1, [pc, #80]	@ (8008328 <xTaskIncrementTick+0x164>)
 80082d6:	4613      	mov	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	440b      	add	r3, r1
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d901      	bls.n	80082ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80082e6:	2301      	movs	r3, #1
 80082e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80082ea:	4b11      	ldr	r3, [pc, #68]	@ (8008330 <xTaskIncrementTick+0x16c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80082f2:	2301      	movs	r3, #1
 80082f4:	617b      	str	r3, [r7, #20]
 80082f6:	e004      	b.n	8008302 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80082f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008334 <xTaskIncrementTick+0x170>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3301      	adds	r3, #1
 80082fe:	4a0d      	ldr	r2, [pc, #52]	@ (8008334 <xTaskIncrementTick+0x170>)
 8008300:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008302:	697b      	ldr	r3, [r7, #20]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20001188 	.word	0x20001188
 8008310:	20001164 	.word	0x20001164
 8008314:	20001118 	.word	0x20001118
 8008318:	2000111c 	.word	0x2000111c
 800831c:	20001178 	.word	0x20001178
 8008320:	20001180 	.word	0x20001180
 8008324:	20001168 	.word	0x20001168
 8008328:	20000c90 	.word	0x20000c90
 800832c:	20000c8c 	.word	0x20000c8c
 8008330:	20001174 	.word	0x20001174
 8008334:	20001170 	.word	0x20001170

08008338 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800833e:	4b28      	ldr	r3, [pc, #160]	@ (80083e0 <vTaskSwitchContext+0xa8>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008346:	4b27      	ldr	r3, [pc, #156]	@ (80083e4 <vTaskSwitchContext+0xac>)
 8008348:	2201      	movs	r2, #1
 800834a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800834c:	e042      	b.n	80083d4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800834e:	4b25      	ldr	r3, [pc, #148]	@ (80083e4 <vTaskSwitchContext+0xac>)
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008354:	4b24      	ldr	r3, [pc, #144]	@ (80083e8 <vTaskSwitchContext+0xb0>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	e011      	b.n	8008380 <vTaskSwitchContext+0x48>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10b      	bne.n	800837a <vTaskSwitchContext+0x42>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	607b      	str	r3, [r7, #4]
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop
 8008378:	e7fd      	b.n	8008376 <vTaskSwitchContext+0x3e>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3b01      	subs	r3, #1
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	491a      	ldr	r1, [pc, #104]	@ (80083ec <vTaskSwitchContext+0xb4>)
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	440b      	add	r3, r1
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0e3      	beq.n	800835c <vTaskSwitchContext+0x24>
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4a13      	ldr	r2, [pc, #76]	@ (80083ec <vTaskSwitchContext+0xb4>)
 80083a0:	4413      	add	r3, r2
 80083a2:	60bb      	str	r3, [r7, #8]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	605a      	str	r2, [r3, #4]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	3308      	adds	r3, #8
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d104      	bne.n	80083c4 <vTaskSwitchContext+0x8c>
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	605a      	str	r2, [r3, #4]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	4a09      	ldr	r2, [pc, #36]	@ (80083f0 <vTaskSwitchContext+0xb8>)
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	4a06      	ldr	r2, [pc, #24]	@ (80083e8 <vTaskSwitchContext+0xb0>)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6013      	str	r3, [r2, #0]
}
 80083d4:	bf00      	nop
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	20001188 	.word	0x20001188
 80083e4:	20001174 	.word	0x20001174
 80083e8:	20001168 	.word	0x20001168
 80083ec:	20000c90 	.word	0x20000c90
 80083f0:	20000c8c 	.word	0x20000c8c

080083f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10b      	bne.n	800841c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	60fb      	str	r3, [r7, #12]
}
 8008416:	bf00      	nop
 8008418:	bf00      	nop
 800841a:	e7fd      	b.n	8008418 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800841c:	4b07      	ldr	r3, [pc, #28]	@ (800843c <vTaskPlaceOnEventList+0x48>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3318      	adds	r3, #24
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7fe f9e2 	bl	80067ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800842a:	2101      	movs	r1, #1
 800842c:	6838      	ldr	r0, [r7, #0]
 800842e:	f000 fb81 	bl	8008b34 <prvAddCurrentTaskToDelayedList>
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000c8c 	.word	0x20000c8c

08008440 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10b      	bne.n	800846a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	617b      	str	r3, [r7, #20]
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop
 8008468:	e7fd      	b.n	8008466 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800846a:	4b0a      	ldr	r3, [pc, #40]	@ (8008494 <vTaskPlaceOnEventListRestricted+0x54>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3318      	adds	r3, #24
 8008470:	4619      	mov	r1, r3
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f7fe f997 	bl	80067a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800847e:	f04f 33ff 	mov.w	r3, #4294967295
 8008482:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	68b8      	ldr	r0, [r7, #8]
 8008488:	f000 fb54 	bl	8008b34 <prvAddCurrentTaskToDelayedList>
	}
 800848c:	bf00      	nop
 800848e:	3718      	adds	r7, #24
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	20000c8c 	.word	0x20000c8c

08008498 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10b      	bne.n	80084c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	60fb      	str	r3, [r7, #12]
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	e7fd      	b.n	80084c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	3318      	adds	r3, #24
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe f9c8 	bl	8006860 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008548 <xTaskRemoveFromEventList+0xb0>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d11d      	bne.n	8008514 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	3304      	adds	r3, #4
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fe f9bf 	bl	8006860 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e6:	4b19      	ldr	r3, [pc, #100]	@ (800854c <xTaskRemoveFromEventList+0xb4>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d903      	bls.n	80084f6 <xTaskRemoveFromEventList+0x5e>
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f2:	4a16      	ldr	r2, [pc, #88]	@ (800854c <xTaskRemoveFromEventList+0xb4>)
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4a13      	ldr	r2, [pc, #76]	@ (8008550 <xTaskRemoveFromEventList+0xb8>)
 8008504:	441a      	add	r2, r3
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	3304      	adds	r3, #4
 800850a:	4619      	mov	r1, r3
 800850c:	4610      	mov	r0, r2
 800850e:	f7fe f94a 	bl	80067a6 <vListInsertEnd>
 8008512:	e005      	b.n	8008520 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	3318      	adds	r3, #24
 8008518:	4619      	mov	r1, r3
 800851a:	480e      	ldr	r0, [pc, #56]	@ (8008554 <xTaskRemoveFromEventList+0xbc>)
 800851c:	f7fe f943 	bl	80067a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008524:	4b0c      	ldr	r3, [pc, #48]	@ (8008558 <xTaskRemoveFromEventList+0xc0>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800852a:	429a      	cmp	r2, r3
 800852c:	d905      	bls.n	800853a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800852e:	2301      	movs	r3, #1
 8008530:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008532:	4b0a      	ldr	r3, [pc, #40]	@ (800855c <xTaskRemoveFromEventList+0xc4>)
 8008534:	2201      	movs	r2, #1
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	e001      	b.n	800853e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800853a:	2300      	movs	r3, #0
 800853c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800853e:	697b      	ldr	r3, [r7, #20]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	20001188 	.word	0x20001188
 800854c:	20001168 	.word	0x20001168
 8008550:	20000c90 	.word	0x20000c90
 8008554:	20001120 	.word	0x20001120
 8008558:	20000c8c 	.word	0x20000c8c
 800855c:	20001174 	.word	0x20001174

08008560 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008568:	4b06      	ldr	r3, [pc, #24]	@ (8008584 <vTaskInternalSetTimeOutState+0x24>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008570:	4b05      	ldr	r3, [pc, #20]	@ (8008588 <vTaskInternalSetTimeOutState+0x28>)
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	605a      	str	r2, [r3, #4]
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	20001178 	.word	0x20001178
 8008588:	20001164 	.word	0x20001164

0800858c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10b      	bne.n	80085b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	613b      	str	r3, [r7, #16]
}
 80085ae:	bf00      	nop
 80085b0:	bf00      	nop
 80085b2:	e7fd      	b.n	80085b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10b      	bne.n	80085d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	60fb      	str	r3, [r7, #12]
}
 80085cc:	bf00      	nop
 80085ce:	bf00      	nop
 80085d0:	e7fd      	b.n	80085ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80085d2:	f000 ff91 	bl	80094f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085d6:	4b1d      	ldr	r3, [pc, #116]	@ (800864c <xTaskCheckForTimeOut+0xc0>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ee:	d102      	bne.n	80085f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61fb      	str	r3, [r7, #28]
 80085f4:	e023      	b.n	800863e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	4b15      	ldr	r3, [pc, #84]	@ (8008650 <xTaskCheckForTimeOut+0xc4>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d007      	beq.n	8008612 <xTaskCheckForTimeOut+0x86>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	429a      	cmp	r2, r3
 800860a:	d302      	bcc.n	8008612 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800860c:	2301      	movs	r3, #1
 800860e:	61fb      	str	r3, [r7, #28]
 8008610:	e015      	b.n	800863e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	429a      	cmp	r2, r3
 800861a:	d20b      	bcs.n	8008634 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	1ad2      	subs	r2, r2, r3
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff ff99 	bl	8008560 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800862e:	2300      	movs	r3, #0
 8008630:	61fb      	str	r3, [r7, #28]
 8008632:	e004      	b.n	800863e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800863a:	2301      	movs	r3, #1
 800863c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800863e:	f000 ff8d 	bl	800955c <vPortExitCritical>

	return xReturn;
 8008642:	69fb      	ldr	r3, [r7, #28]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3720      	adds	r7, #32
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20001164 	.word	0x20001164
 8008650:	20001178 	.word	0x20001178

08008654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008658:	4b03      	ldr	r3, [pc, #12]	@ (8008668 <vTaskMissedYield+0x14>)
 800865a:	2201      	movs	r2, #1
 800865c:	601a      	str	r2, [r3, #0]
}
 800865e:	bf00      	nop
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	20001174 	.word	0x20001174

0800866c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008674:	f000 f852 	bl	800871c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008678:	4b06      	ldr	r3, [pc, #24]	@ (8008694 <prvIdleTask+0x28>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d9f9      	bls.n	8008674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008680:	4b05      	ldr	r3, [pc, #20]	@ (8008698 <prvIdleTask+0x2c>)
 8008682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008690:	e7f0      	b.n	8008674 <prvIdleTask+0x8>
 8008692:	bf00      	nop
 8008694:	20000c90 	.word	0x20000c90
 8008698:	e000ed04 	.word	0xe000ed04

0800869c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086a2:	2300      	movs	r3, #0
 80086a4:	607b      	str	r3, [r7, #4]
 80086a6:	e00c      	b.n	80086c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4a12      	ldr	r2, [pc, #72]	@ (80086fc <prvInitialiseTaskLists+0x60>)
 80086b4:	4413      	add	r3, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe f848 	bl	800674c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3301      	adds	r3, #1
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b37      	cmp	r3, #55	@ 0x37
 80086c6:	d9ef      	bls.n	80086a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086c8:	480d      	ldr	r0, [pc, #52]	@ (8008700 <prvInitialiseTaskLists+0x64>)
 80086ca:	f7fe f83f 	bl	800674c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086ce:	480d      	ldr	r0, [pc, #52]	@ (8008704 <prvInitialiseTaskLists+0x68>)
 80086d0:	f7fe f83c 	bl	800674c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086d4:	480c      	ldr	r0, [pc, #48]	@ (8008708 <prvInitialiseTaskLists+0x6c>)
 80086d6:	f7fe f839 	bl	800674c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086da:	480c      	ldr	r0, [pc, #48]	@ (800870c <prvInitialiseTaskLists+0x70>)
 80086dc:	f7fe f836 	bl	800674c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086e0:	480b      	ldr	r0, [pc, #44]	@ (8008710 <prvInitialiseTaskLists+0x74>)
 80086e2:	f7fe f833 	bl	800674c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008714 <prvInitialiseTaskLists+0x78>)
 80086e8:	4a05      	ldr	r2, [pc, #20]	@ (8008700 <prvInitialiseTaskLists+0x64>)
 80086ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008718 <prvInitialiseTaskLists+0x7c>)
 80086ee:	4a05      	ldr	r2, [pc, #20]	@ (8008704 <prvInitialiseTaskLists+0x68>)
 80086f0:	601a      	str	r2, [r3, #0]
}
 80086f2:	bf00      	nop
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000c90 	.word	0x20000c90
 8008700:	200010f0 	.word	0x200010f0
 8008704:	20001104 	.word	0x20001104
 8008708:	20001120 	.word	0x20001120
 800870c:	20001134 	.word	0x20001134
 8008710:	2000114c 	.word	0x2000114c
 8008714:	20001118 	.word	0x20001118
 8008718:	2000111c 	.word	0x2000111c

0800871c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008722:	e019      	b.n	8008758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008724:	f000 fee8 	bl	80094f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008728:	4b10      	ldr	r3, [pc, #64]	@ (800876c <prvCheckTasksWaitingTermination+0x50>)
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3304      	adds	r3, #4
 8008734:	4618      	mov	r0, r3
 8008736:	f7fe f893 	bl	8006860 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800873a:	4b0d      	ldr	r3, [pc, #52]	@ (8008770 <prvCheckTasksWaitingTermination+0x54>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3b01      	subs	r3, #1
 8008740:	4a0b      	ldr	r2, [pc, #44]	@ (8008770 <prvCheckTasksWaitingTermination+0x54>)
 8008742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008744:	4b0b      	ldr	r3, [pc, #44]	@ (8008774 <prvCheckTasksWaitingTermination+0x58>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3b01      	subs	r3, #1
 800874a:	4a0a      	ldr	r2, [pc, #40]	@ (8008774 <prvCheckTasksWaitingTermination+0x58>)
 800874c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800874e:	f000 ff05 	bl	800955c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f810 	bl	8008778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008758:	4b06      	ldr	r3, [pc, #24]	@ (8008774 <prvCheckTasksWaitingTermination+0x58>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e1      	bne.n	8008724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20001134 	.word	0x20001134
 8008770:	20001160 	.word	0x20001160
 8008774:	20001148 	.word	0x20001148

08008778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008786:	2b00      	cmp	r3, #0
 8008788:	d108      	bne.n	800879c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800878e:	4618      	mov	r0, r3
 8008790:	f001 f8a2 	bl	80098d8 <vPortFree>
				vPortFree( pxTCB );
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f001 f89f 	bl	80098d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800879a:	e019      	b.n	80087d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d103      	bne.n	80087ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f001 f896 	bl	80098d8 <vPortFree>
	}
 80087ac:	e010      	b.n	80087d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d00b      	beq.n	80087d0 <prvDeleteTCB+0x58>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	60fb      	str	r3, [r7, #12]
}
 80087ca:	bf00      	nop
 80087cc:	bf00      	nop
 80087ce:	e7fd      	b.n	80087cc <prvDeleteTCB+0x54>
	}
 80087d0:	bf00      	nop
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087de:	4b0c      	ldr	r3, [pc, #48]	@ (8008810 <prvResetNextTaskUnblockTime+0x38>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d104      	bne.n	80087f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008814 <prvResetNextTaskUnblockTime+0x3c>)
 80087ea:	f04f 32ff 	mov.w	r2, #4294967295
 80087ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087f0:	e008      	b.n	8008804 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087f2:	4b07      	ldr	r3, [pc, #28]	@ (8008810 <prvResetNextTaskUnblockTime+0x38>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	4a04      	ldr	r2, [pc, #16]	@ (8008814 <prvResetNextTaskUnblockTime+0x3c>)
 8008802:	6013      	str	r3, [r2, #0]
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	20001118 	.word	0x20001118
 8008814:	20001180 	.word	0x20001180

08008818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800881e:	4b0b      	ldr	r3, [pc, #44]	@ (800884c <xTaskGetSchedulerState+0x34>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d102      	bne.n	800882c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008826:	2301      	movs	r3, #1
 8008828:	607b      	str	r3, [r7, #4]
 800882a:	e008      	b.n	800883e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800882c:	4b08      	ldr	r3, [pc, #32]	@ (8008850 <xTaskGetSchedulerState+0x38>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d102      	bne.n	800883a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008834:	2302      	movs	r3, #2
 8008836:	607b      	str	r3, [r7, #4]
 8008838:	e001      	b.n	800883e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800883a:	2300      	movs	r3, #0
 800883c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800883e:	687b      	ldr	r3, [r7, #4]
	}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	2000116c 	.word	0x2000116c
 8008850:	20001188 	.word	0x20001188

08008854 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008860:	2300      	movs	r3, #0
 8008862:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d051      	beq.n	800890e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886e:	4b2a      	ldr	r3, [pc, #168]	@ (8008918 <xTaskPriorityInherit+0xc4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008874:	429a      	cmp	r2, r3
 8008876:	d241      	bcs.n	80088fc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	db06      	blt.n	800888e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008880:	4b25      	ldr	r3, [pc, #148]	@ (8008918 <xTaskPriorityInherit+0xc4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008886:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	6959      	ldr	r1, [r3, #20]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4a1f      	ldr	r2, [pc, #124]	@ (800891c <xTaskPriorityInherit+0xc8>)
 80088a0:	4413      	add	r3, r2
 80088a2:	4299      	cmp	r1, r3
 80088a4:	d122      	bne.n	80088ec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	3304      	adds	r3, #4
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fd ffd8 	bl	8006860 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088b0:	4b19      	ldr	r3, [pc, #100]	@ (8008918 <xTaskPriorityInherit+0xc4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088be:	4b18      	ldr	r3, [pc, #96]	@ (8008920 <xTaskPriorityInherit+0xcc>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d903      	bls.n	80088ce <xTaskPriorityInherit+0x7a>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ca:	4a15      	ldr	r2, [pc, #84]	@ (8008920 <xTaskPriorityInherit+0xcc>)
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4a10      	ldr	r2, [pc, #64]	@ (800891c <xTaskPriorityInherit+0xc8>)
 80088dc:	441a      	add	r2, r3
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f7fd ff5e 	bl	80067a6 <vListInsertEnd>
 80088ea:	e004      	b.n	80088f6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008918 <xTaskPriorityInherit+0xc4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80088f6:	2301      	movs	r3, #1
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	e008      	b.n	800890e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008900:	4b05      	ldr	r3, [pc, #20]	@ (8008918 <xTaskPriorityInherit+0xc4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008906:	429a      	cmp	r2, r3
 8008908:	d201      	bcs.n	800890e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800890a:	2301      	movs	r3, #1
 800890c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800890e:	68fb      	ldr	r3, [r7, #12]
	}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20000c8c 	.word	0x20000c8c
 800891c:	20000c90 	.word	0x20000c90
 8008920:	20001168 	.word	0x20001168

08008924 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d058      	beq.n	80089ec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800893a:	4b2f      	ldr	r3, [pc, #188]	@ (80089f8 <xTaskPriorityDisinherit+0xd4>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	429a      	cmp	r2, r3
 8008942:	d00b      	beq.n	800895c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	60fb      	str	r3, [r7, #12]
}
 8008956:	bf00      	nop
 8008958:	bf00      	nop
 800895a:	e7fd      	b.n	8008958 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10b      	bne.n	800897c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	60bb      	str	r3, [r7, #8]
}
 8008976:	bf00      	nop
 8008978:	bf00      	nop
 800897a:	e7fd      	b.n	8008978 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008980:	1e5a      	subs	r2, r3, #1
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800898e:	429a      	cmp	r2, r3
 8008990:	d02c      	beq.n	80089ec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008996:	2b00      	cmp	r3, #0
 8008998:	d128      	bne.n	80089ec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	3304      	adds	r3, #4
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fd ff5e 	bl	8006860 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089bc:	4b0f      	ldr	r3, [pc, #60]	@ (80089fc <xTaskPriorityDisinherit+0xd8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d903      	bls.n	80089cc <xTaskPriorityDisinherit+0xa8>
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c8:	4a0c      	ldr	r2, [pc, #48]	@ (80089fc <xTaskPriorityDisinherit+0xd8>)
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4a09      	ldr	r2, [pc, #36]	@ (8008a00 <xTaskPriorityDisinherit+0xdc>)
 80089da:	441a      	add	r2, r3
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	3304      	adds	r3, #4
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f7fd fedf 	bl	80067a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089e8:	2301      	movs	r3, #1
 80089ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089ec:	697b      	ldr	r3, [r7, #20]
	}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20000c8c 	.word	0x20000c8c
 80089fc:	20001168 	.word	0x20001168
 8008a00:	20000c90 	.word	0x20000c90

08008a04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a12:	2301      	movs	r3, #1
 8008a14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d06c      	beq.n	8008af6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10b      	bne.n	8008a3c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	60fb      	str	r3, [r7, #12]
}
 8008a36:	bf00      	nop
 8008a38:	bf00      	nop
 8008a3a:	e7fd      	b.n	8008a38 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d902      	bls.n	8008a4c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	61fb      	str	r3, [r7, #28]
 8008a4a:	e002      	b.n	8008a52 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a50:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a56:	69fa      	ldr	r2, [r7, #28]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d04c      	beq.n	8008af6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d147      	bne.n	8008af6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a66:	4b26      	ldr	r3, [pc, #152]	@ (8008b00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d10b      	bne.n	8008a88 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	60bb      	str	r3, [r7, #8]
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	69fa      	ldr	r2, [r7, #28]
 8008a92:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	db04      	blt.n	8008aa6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	6959      	ldr	r1, [r3, #20]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4a13      	ldr	r2, [pc, #76]	@ (8008b04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008ab6:	4413      	add	r3, r2
 8008ab8:	4299      	cmp	r1, r3
 8008aba:	d11c      	bne.n	8008af6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fd fecd 	bl	8006860 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aca:	4b0f      	ldr	r3, [pc, #60]	@ (8008b08 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d903      	bls.n	8008ada <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8008b08 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4a07      	ldr	r2, [pc, #28]	@ (8008b04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008ae8:	441a      	add	r2, r3
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	3304      	adds	r3, #4
 8008aee:	4619      	mov	r1, r3
 8008af0:	4610      	mov	r0, r2
 8008af2:	f7fd fe58 	bl	80067a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008af6:	bf00      	nop
 8008af8:	3720      	adds	r7, #32
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20000c8c 	.word	0x20000c8c
 8008b04:	20000c90 	.word	0x20000c90
 8008b08:	20001168 	.word	0x20001168

08008b0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b0c:	b480      	push	{r7}
 8008b0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b10:	4b07      	ldr	r3, [pc, #28]	@ (8008b30 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d004      	beq.n	8008b22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b18:	4b05      	ldr	r3, [pc, #20]	@ (8008b30 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b1e:	3201      	adds	r2, #1
 8008b20:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008b22:	4b03      	ldr	r3, [pc, #12]	@ (8008b30 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b24:	681b      	ldr	r3, [r3, #0]
	}
 8008b26:	4618      	mov	r0, r3
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	20000c8c 	.word	0x20000c8c

08008b34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b3e:	4b21      	ldr	r3, [pc, #132]	@ (8008bc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b44:	4b20      	ldr	r3, [pc, #128]	@ (8008bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fd fe88 	bl	8006860 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b56:	d10a      	bne.n	8008b6e <prvAddCurrentTaskToDelayedList+0x3a>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d007      	beq.n	8008b6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3304      	adds	r3, #4
 8008b64:	4619      	mov	r1, r3
 8008b66:	4819      	ldr	r0, [pc, #100]	@ (8008bcc <prvAddCurrentTaskToDelayedList+0x98>)
 8008b68:	f7fd fe1d 	bl	80067a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b6c:	e026      	b.n	8008bbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4413      	add	r3, r2
 8008b74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b76:	4b14      	ldr	r3, [pc, #80]	@ (8008bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d209      	bcs.n	8008b9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b86:	4b12      	ldr	r3, [pc, #72]	@ (8008bd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f7fd fe2b 	bl	80067ee <vListInsert>
}
 8008b98:	e010      	b.n	8008bbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3304      	adds	r3, #4
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	f7fd fe21 	bl	80067ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bac:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d202      	bcs.n	8008bbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bb6:	4a08      	ldr	r2, [pc, #32]	@ (8008bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	6013      	str	r3, [r2, #0]
}
 8008bbc:	bf00      	nop
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	20001164 	.word	0x20001164
 8008bc8:	20000c8c 	.word	0x20000c8c
 8008bcc:	2000114c 	.word	0x2000114c
 8008bd0:	2000111c 	.word	0x2000111c
 8008bd4:	20001118 	.word	0x20001118
 8008bd8:	20001180 	.word	0x20001180

08008bdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08a      	sub	sp, #40	@ 0x28
 8008be0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008be6:	f000 fb13 	bl	8009210 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008bea:	4b1d      	ldr	r3, [pc, #116]	@ (8008c60 <xTimerCreateTimerTask+0x84>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d021      	beq.n	8008c36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008bfa:	1d3a      	adds	r2, r7, #4
 8008bfc:	f107 0108 	add.w	r1, r7, #8
 8008c00:	f107 030c 	add.w	r3, r7, #12
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fd fd87 	bl	8006718 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	9202      	str	r2, [sp, #8]
 8008c12:	9301      	str	r3, [sp, #4]
 8008c14:	2302      	movs	r3, #2
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	460a      	mov	r2, r1
 8008c1c:	4911      	ldr	r1, [pc, #68]	@ (8008c64 <xTimerCreateTimerTask+0x88>)
 8008c1e:	4812      	ldr	r0, [pc, #72]	@ (8008c68 <xTimerCreateTimerTask+0x8c>)
 8008c20:	f7fe fe74 	bl	800790c <xTaskCreateStatic>
 8008c24:	4603      	mov	r3, r0
 8008c26:	4a11      	ldr	r2, [pc, #68]	@ (8008c6c <xTimerCreateTimerTask+0x90>)
 8008c28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c2a:	4b10      	ldr	r3, [pc, #64]	@ (8008c6c <xTimerCreateTimerTask+0x90>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c32:	2301      	movs	r3, #1
 8008c34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10b      	bne.n	8008c54 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	613b      	str	r3, [r7, #16]
}
 8008c4e:	bf00      	nop
 8008c50:	bf00      	nop
 8008c52:	e7fd      	b.n	8008c50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c54:	697b      	ldr	r3, [r7, #20]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	200011bc 	.word	0x200011bc
 8008c64:	08010b4c 	.word	0x08010b4c
 8008c68:	08008da9 	.word	0x08008da9
 8008c6c:	200011c0 	.word	0x200011c0

08008c70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08a      	sub	sp, #40	@ 0x28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
 8008c7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10b      	bne.n	8008ca0 <xTimerGenericCommand+0x30>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	623b      	str	r3, [r7, #32]
}
 8008c9a:	bf00      	nop
 8008c9c:	bf00      	nop
 8008c9e:	e7fd      	b.n	8008c9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ca0:	4b19      	ldr	r3, [pc, #100]	@ (8008d08 <xTimerGenericCommand+0x98>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d02a      	beq.n	8008cfe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b05      	cmp	r3, #5
 8008cb8:	dc18      	bgt.n	8008cec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cba:	f7ff fdad 	bl	8008818 <xTaskGetSchedulerState>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d109      	bne.n	8008cd8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cc4:	4b10      	ldr	r3, [pc, #64]	@ (8008d08 <xTimerGenericCommand+0x98>)
 8008cc6:	6818      	ldr	r0, [r3, #0]
 8008cc8:	f107 0110 	add.w	r1, r7, #16
 8008ccc:	2300      	movs	r3, #0
 8008cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cd0:	f7fd ffa4 	bl	8006c1c <xQueueGenericSend>
 8008cd4:	6278      	str	r0, [r7, #36]	@ 0x24
 8008cd6:	e012      	b.n	8008cfe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8008d08 <xTimerGenericCommand+0x98>)
 8008cda:	6818      	ldr	r0, [r3, #0]
 8008cdc:	f107 0110 	add.w	r1, r7, #16
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f7fd ff9a 	bl	8006c1c <xQueueGenericSend>
 8008ce8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008cea:	e008      	b.n	8008cfe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008cec:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <xTimerGenericCommand+0x98>)
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	f107 0110 	add.w	r1, r7, #16
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	f7fe f892 	bl	8006e20 <xQueueGenericSendFromISR>
 8008cfc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3728      	adds	r7, #40	@ 0x28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	200011bc 	.word	0x200011bc

08008d0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af02      	add	r7, sp, #8
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d16:	4b23      	ldr	r3, [pc, #140]	@ (8008da4 <prvProcessExpiredTimer+0x98>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fd fd9b 	bl	8006860 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d023      	beq.n	8008d80 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	699a      	ldr	r2, [r3, #24]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	18d1      	adds	r1, r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	6978      	ldr	r0, [r7, #20]
 8008d46:	f000 f8d5 	bl	8008ef4 <prvInsertTimerInActiveList>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d020      	beq.n	8008d92 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d50:	2300      	movs	r3, #0
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	2300      	movs	r3, #0
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	2100      	movs	r1, #0
 8008d5a:	6978      	ldr	r0, [r7, #20]
 8008d5c:	f7ff ff88 	bl	8008c70 <xTimerGenericCommand>
 8008d60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d114      	bne.n	8008d92 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	60fb      	str	r3, [r7, #12]
}
 8008d7a:	bf00      	nop
 8008d7c:	bf00      	nop
 8008d7e:	e7fd      	b.n	8008d7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d86:	f023 0301 	bic.w	r3, r3, #1
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	6978      	ldr	r0, [r7, #20]
 8008d98:	4798      	blx	r3
}
 8008d9a:	bf00      	nop
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	200011b4 	.word	0x200011b4

08008da8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008db0:	f107 0308 	add.w	r3, r7, #8
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 f859 	bl	8008e6c <prvGetNextExpireTime>
 8008dba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 f805 	bl	8008dd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dc6:	f000 f8d7 	bl	8008f78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dca:	bf00      	nop
 8008dcc:	e7f0      	b.n	8008db0 <prvTimerTask+0x8>
	...

08008dd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008dda:	f7ff f937 	bl	800804c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dde:	f107 0308 	add.w	r3, r7, #8
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 f866 	bl	8008eb4 <prvSampleTimeNow>
 8008de8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d130      	bne.n	8008e52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10a      	bne.n	8008e0c <prvProcessTimerOrBlockTask+0x3c>
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d806      	bhi.n	8008e0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008dfe:	f7ff f933 	bl	8008068 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e02:	68f9      	ldr	r1, [r7, #12]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7ff ff81 	bl	8008d0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e0a:	e024      	b.n	8008e56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d008      	beq.n	8008e24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e12:	4b13      	ldr	r3, [pc, #76]	@ (8008e60 <prvProcessTimerOrBlockTask+0x90>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <prvProcessTimerOrBlockTask+0x50>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e000      	b.n	8008e22 <prvProcessTimerOrBlockTask+0x52>
 8008e20:	2300      	movs	r3, #0
 8008e22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e24:	4b0f      	ldr	r3, [pc, #60]	@ (8008e64 <prvProcessTimerOrBlockTask+0x94>)
 8008e26:	6818      	ldr	r0, [r3, #0]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	4619      	mov	r1, r3
 8008e32:	f7fe fd37 	bl	80078a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e36:	f7ff f917 	bl	8008068 <xTaskResumeAll>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10a      	bne.n	8008e56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e40:	4b09      	ldr	r3, [pc, #36]	@ (8008e68 <prvProcessTimerOrBlockTask+0x98>)
 8008e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
}
 8008e50:	e001      	b.n	8008e56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e52:	f7ff f909 	bl	8008068 <xTaskResumeAll>
}
 8008e56:	bf00      	nop
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	200011b8 	.word	0x200011b8
 8008e64:	200011bc 	.word	0x200011bc
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e74:	4b0e      	ldr	r3, [pc, #56]	@ (8008eb0 <prvGetNextExpireTime+0x44>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <prvGetNextExpireTime+0x16>
 8008e7e:	2201      	movs	r2, #1
 8008e80:	e000      	b.n	8008e84 <prvGetNextExpireTime+0x18>
 8008e82:	2200      	movs	r2, #0
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d105      	bne.n	8008e9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e90:	4b07      	ldr	r3, [pc, #28]	@ (8008eb0 <prvGetNextExpireTime+0x44>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	e001      	b.n	8008ea0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	200011b4 	.word	0x200011b4

08008eb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ebc:	f7ff f972 	bl	80081a4 <xTaskGetTickCount>
 8008ec0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef0 <prvSampleTimeNow+0x3c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d205      	bcs.n	8008ed8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ecc:	f000 f93a 	bl	8009144 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	e002      	b.n	8008ede <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ede:	4a04      	ldr	r2, [pc, #16]	@ (8008ef0 <prvSampleTimeNow+0x3c>)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	200011c4 	.word	0x200011c4

08008ef4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d812      	bhi.n	8008f40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	1ad2      	subs	r2, r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d302      	bcc.n	8008f2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	617b      	str	r3, [r7, #20]
 8008f2c:	e01b      	b.n	8008f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f2e:	4b10      	ldr	r3, [pc, #64]	@ (8008f70 <prvInsertTimerInActiveList+0x7c>)
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f7fd fc58 	bl	80067ee <vListInsert>
 8008f3e:	e012      	b.n	8008f66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d206      	bcs.n	8008f56 <prvInsertTimerInActiveList+0x62>
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d302      	bcc.n	8008f56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f50:	2301      	movs	r3, #1
 8008f52:	617b      	str	r3, [r7, #20]
 8008f54:	e007      	b.n	8008f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f56:	4b07      	ldr	r3, [pc, #28]	@ (8008f74 <prvInsertTimerInActiveList+0x80>)
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4610      	mov	r0, r2
 8008f62:	f7fd fc44 	bl	80067ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f66:	697b      	ldr	r3, [r7, #20]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3718      	adds	r7, #24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	200011b8 	.word	0x200011b8
 8008f74:	200011b4 	.word	0x200011b4

08008f78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08e      	sub	sp, #56	@ 0x38
 8008f7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f7e:	e0ce      	b.n	800911e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	da19      	bge.n	8008fba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f86:	1d3b      	adds	r3, r7, #4
 8008f88:	3304      	adds	r3, #4
 8008f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10b      	bne.n	8008faa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	61fb      	str	r3, [r7, #28]
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	e7fd      	b.n	8008fa6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fb0:	6850      	ldr	r0, [r2, #4]
 8008fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fb4:	6892      	ldr	r2, [r2, #8]
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f2c0 80ae 	blt.w	800911e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d004      	beq.n	8008fd8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fd fc44 	bl	8006860 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fd8:	463b      	mov	r3, r7
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff ff6a 	bl	8008eb4 <prvSampleTimeNow>
 8008fe0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b09      	cmp	r3, #9
 8008fe6:	f200 8097 	bhi.w	8009118 <prvProcessReceivedCommands+0x1a0>
 8008fea:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff0 <prvProcessReceivedCommands+0x78>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	08009019 	.word	0x08009019
 8008ff4:	08009019 	.word	0x08009019
 8008ff8:	08009019 	.word	0x08009019
 8008ffc:	0800908f 	.word	0x0800908f
 8009000:	080090a3 	.word	0x080090a3
 8009004:	080090ef 	.word	0x080090ef
 8009008:	08009019 	.word	0x08009019
 800900c:	08009019 	.word	0x08009019
 8009010:	0800908f 	.word	0x0800908f
 8009014:	080090a3 	.word	0x080090a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800901e:	f043 0301 	orr.w	r3, r3, #1
 8009022:	b2da      	uxtb	r2, r3
 8009024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009026:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	18d1      	adds	r1, r2, r3
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009038:	f7ff ff5c 	bl	8008ef4 <prvInsertTimerInActiveList>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d06c      	beq.n	800911c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009048:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800904a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009050:	f003 0304 	and.w	r3, r3, #4
 8009054:	2b00      	cmp	r3, #0
 8009056:	d061      	beq.n	800911c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	441a      	add	r2, r3
 8009060:	2300      	movs	r3, #0
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	2300      	movs	r3, #0
 8009066:	2100      	movs	r1, #0
 8009068:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800906a:	f7ff fe01 	bl	8008c70 <xTimerGenericCommand>
 800906e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d152      	bne.n	800911c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	61bb      	str	r3, [r7, #24]
}
 8009088:	bf00      	nop
 800908a:	bf00      	nop
 800908c:	e7fd      	b.n	800908a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800908e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009094:	f023 0301 	bic.w	r3, r3, #1
 8009098:	b2da      	uxtb	r2, r3
 800909a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80090a0:	e03d      	b.n	800911e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090a8:	f043 0301 	orr.w	r3, r3, #1
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10b      	bne.n	80090da <prvProcessReceivedCommands+0x162>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	617b      	str	r3, [r7, #20]
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	e7fd      	b.n	80090d6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090dc:	699a      	ldr	r2, [r3, #24]
 80090de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e0:	18d1      	adds	r1, r2, r3
 80090e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090e8:	f7ff ff04 	bl	8008ef4 <prvInsertTimerInActiveList>
					break;
 80090ec:	e017      	b.n	800911e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d103      	bne.n	8009104 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80090fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090fe:	f000 fbeb 	bl	80098d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009102:	e00c      	b.n	800911e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009106:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800910a:	f023 0301 	bic.w	r3, r3, #1
 800910e:	b2da      	uxtb	r2, r3
 8009110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009112:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009116:	e002      	b.n	800911e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009118:	bf00      	nop
 800911a:	e000      	b.n	800911e <prvProcessReceivedCommands+0x1a6>
					break;
 800911c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800911e:	4b08      	ldr	r3, [pc, #32]	@ (8009140 <prvProcessReceivedCommands+0x1c8>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	1d39      	adds	r1, r7, #4
 8009124:	2200      	movs	r2, #0
 8009126:	4618      	mov	r0, r3
 8009128:	f7fd ffa8 	bl	800707c <xQueueReceive>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	f47f af26 	bne.w	8008f80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop
 8009138:	3730      	adds	r7, #48	@ 0x30
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	200011bc 	.word	0x200011bc

08009144 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b088      	sub	sp, #32
 8009148:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800914a:	e049      	b.n	80091e0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800914c:	4b2e      	ldr	r3, [pc, #184]	@ (8009208 <prvSwitchTimerLists+0xc4>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009156:	4b2c      	ldr	r3, [pc, #176]	@ (8009208 <prvSwitchTimerLists+0xc4>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3304      	adds	r3, #4
 8009164:	4618      	mov	r0, r3
 8009166:	f7fd fb7b 	bl	8006860 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d02f      	beq.n	80091e0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4413      	add	r3, r2
 8009188:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	429a      	cmp	r2, r3
 8009190:	d90e      	bls.n	80091b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800919e:	4b1a      	ldr	r3, [pc, #104]	@ (8009208 <prvSwitchTimerLists+0xc4>)
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3304      	adds	r3, #4
 80091a6:	4619      	mov	r1, r3
 80091a8:	4610      	mov	r0, r2
 80091aa:	f7fd fb20 	bl	80067ee <vListInsert>
 80091ae:	e017      	b.n	80091e0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091b0:	2300      	movs	r3, #0
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	2300      	movs	r3, #0
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	2100      	movs	r1, #0
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f7ff fd58 	bl	8008c70 <xTimerGenericCommand>
 80091c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10b      	bne.n	80091e0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	603b      	str	r3, [r7, #0]
}
 80091da:	bf00      	nop
 80091dc:	bf00      	nop
 80091de:	e7fd      	b.n	80091dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091e0:	4b09      	ldr	r3, [pc, #36]	@ (8009208 <prvSwitchTimerLists+0xc4>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1b0      	bne.n	800914c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091ea:	4b07      	ldr	r3, [pc, #28]	@ (8009208 <prvSwitchTimerLists+0xc4>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091f0:	4b06      	ldr	r3, [pc, #24]	@ (800920c <prvSwitchTimerLists+0xc8>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a04      	ldr	r2, [pc, #16]	@ (8009208 <prvSwitchTimerLists+0xc4>)
 80091f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80091f8:	4a04      	ldr	r2, [pc, #16]	@ (800920c <prvSwitchTimerLists+0xc8>)
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	6013      	str	r3, [r2, #0]
}
 80091fe:	bf00      	nop
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	200011b4 	.word	0x200011b4
 800920c:	200011b8 	.word	0x200011b8

08009210 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009216:	f000 f96f 	bl	80094f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800921a:	4b15      	ldr	r3, [pc, #84]	@ (8009270 <prvCheckForValidListAndQueue+0x60>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d120      	bne.n	8009264 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009222:	4814      	ldr	r0, [pc, #80]	@ (8009274 <prvCheckForValidListAndQueue+0x64>)
 8009224:	f7fd fa92 	bl	800674c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009228:	4813      	ldr	r0, [pc, #76]	@ (8009278 <prvCheckForValidListAndQueue+0x68>)
 800922a:	f7fd fa8f 	bl	800674c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800922e:	4b13      	ldr	r3, [pc, #76]	@ (800927c <prvCheckForValidListAndQueue+0x6c>)
 8009230:	4a10      	ldr	r2, [pc, #64]	@ (8009274 <prvCheckForValidListAndQueue+0x64>)
 8009232:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009234:	4b12      	ldr	r3, [pc, #72]	@ (8009280 <prvCheckForValidListAndQueue+0x70>)
 8009236:	4a10      	ldr	r2, [pc, #64]	@ (8009278 <prvCheckForValidListAndQueue+0x68>)
 8009238:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800923a:	2300      	movs	r3, #0
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	4b11      	ldr	r3, [pc, #68]	@ (8009284 <prvCheckForValidListAndQueue+0x74>)
 8009240:	4a11      	ldr	r2, [pc, #68]	@ (8009288 <prvCheckForValidListAndQueue+0x78>)
 8009242:	2110      	movs	r1, #16
 8009244:	200a      	movs	r0, #10
 8009246:	f7fd fb9f 	bl	8006988 <xQueueGenericCreateStatic>
 800924a:	4603      	mov	r3, r0
 800924c:	4a08      	ldr	r2, [pc, #32]	@ (8009270 <prvCheckForValidListAndQueue+0x60>)
 800924e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009250:	4b07      	ldr	r3, [pc, #28]	@ (8009270 <prvCheckForValidListAndQueue+0x60>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009258:	4b05      	ldr	r3, [pc, #20]	@ (8009270 <prvCheckForValidListAndQueue+0x60>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	490b      	ldr	r1, [pc, #44]	@ (800928c <prvCheckForValidListAndQueue+0x7c>)
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe facc 	bl	80077fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009264:	f000 f97a 	bl	800955c <vPortExitCritical>
}
 8009268:	bf00      	nop
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	200011bc 	.word	0x200011bc
 8009274:	2000118c 	.word	0x2000118c
 8009278:	200011a0 	.word	0x200011a0
 800927c:	200011b4 	.word	0x200011b4
 8009280:	200011b8 	.word	0x200011b8
 8009284:	20001268 	.word	0x20001268
 8009288:	200011c8 	.word	0x200011c8
 800928c:	08010b54 	.word	0x08010b54

08009290 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3b04      	subs	r3, #4
 80092a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80092a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3b04      	subs	r3, #4
 80092ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f023 0201 	bic.w	r2, r3, #1
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3b04      	subs	r3, #4
 80092be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092c0:	4a0c      	ldr	r2, [pc, #48]	@ (80092f4 <pxPortInitialiseStack+0x64>)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3b14      	subs	r3, #20
 80092ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3b04      	subs	r3, #4
 80092d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f06f 0202 	mvn.w	r2, #2
 80092de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	3b20      	subs	r3, #32
 80092e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092e6:	68fb      	ldr	r3, [r7, #12]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	080092f9 	.word	0x080092f9

080092f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009302:	4b13      	ldr	r3, [pc, #76]	@ (8009350 <prvTaskExitError+0x58>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930a:	d00b      	beq.n	8009324 <prvTaskExitError+0x2c>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	60fb      	str	r3, [r7, #12]
}
 800931e:	bf00      	nop
 8009320:	bf00      	nop
 8009322:	e7fd      	b.n	8009320 <prvTaskExitError+0x28>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	60bb      	str	r3, [r7, #8]
}
 8009336:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009338:	bf00      	nop
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d0fc      	beq.n	800933a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009340:	bf00      	nop
 8009342:	bf00      	nop
 8009344:	3714      	adds	r7, #20
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	2000000c 	.word	0x2000000c
	...

08009360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009360:	4b07      	ldr	r3, [pc, #28]	@ (8009380 <pxCurrentTCBConst2>)
 8009362:	6819      	ldr	r1, [r3, #0]
 8009364:	6808      	ldr	r0, [r1, #0]
 8009366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936a:	f380 8809 	msr	PSP, r0
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f04f 0000 	mov.w	r0, #0
 8009376:	f380 8811 	msr	BASEPRI, r0
 800937a:	4770      	bx	lr
 800937c:	f3af 8000 	nop.w

08009380 <pxCurrentTCBConst2>:
 8009380:	20000c8c 	.word	0x20000c8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop

08009388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009388:	4808      	ldr	r0, [pc, #32]	@ (80093ac <prvPortStartFirstTask+0x24>)
 800938a:	6800      	ldr	r0, [r0, #0]
 800938c:	6800      	ldr	r0, [r0, #0]
 800938e:	f380 8808 	msr	MSP, r0
 8009392:	f04f 0000 	mov.w	r0, #0
 8009396:	f380 8814 	msr	CONTROL, r0
 800939a:	b662      	cpsie	i
 800939c:	b661      	cpsie	f
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	df00      	svc	0
 80093a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093aa:	bf00      	nop
 80093ac:	e000ed08 	.word	0xe000ed08

080093b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093b6:	4b47      	ldr	r3, [pc, #284]	@ (80094d4 <xPortStartScheduler+0x124>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a47      	ldr	r2, [pc, #284]	@ (80094d8 <xPortStartScheduler+0x128>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d10b      	bne.n	80093d8 <xPortStartScheduler+0x28>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	613b      	str	r3, [r7, #16]
}
 80093d2:	bf00      	nop
 80093d4:	bf00      	nop
 80093d6:	e7fd      	b.n	80093d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80093d8:	4b3e      	ldr	r3, [pc, #248]	@ (80094d4 <xPortStartScheduler+0x124>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a3f      	ldr	r2, [pc, #252]	@ (80094dc <xPortStartScheduler+0x12c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d10b      	bne.n	80093fa <xPortStartScheduler+0x4a>
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	60fb      	str	r3, [r7, #12]
}
 80093f4:	bf00      	nop
 80093f6:	bf00      	nop
 80093f8:	e7fd      	b.n	80093f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093fa:	4b39      	ldr	r3, [pc, #228]	@ (80094e0 <xPortStartScheduler+0x130>)
 80093fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	22ff      	movs	r2, #255	@ 0xff
 800940a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	b2db      	uxtb	r3, r3
 8009412:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009414:	78fb      	ldrb	r3, [r7, #3]
 8009416:	b2db      	uxtb	r3, r3
 8009418:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800941c:	b2da      	uxtb	r2, r3
 800941e:	4b31      	ldr	r3, [pc, #196]	@ (80094e4 <xPortStartScheduler+0x134>)
 8009420:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009422:	4b31      	ldr	r3, [pc, #196]	@ (80094e8 <xPortStartScheduler+0x138>)
 8009424:	2207      	movs	r2, #7
 8009426:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009428:	e009      	b.n	800943e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800942a:	4b2f      	ldr	r3, [pc, #188]	@ (80094e8 <xPortStartScheduler+0x138>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	3b01      	subs	r3, #1
 8009430:	4a2d      	ldr	r2, [pc, #180]	@ (80094e8 <xPortStartScheduler+0x138>)
 8009432:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009434:	78fb      	ldrb	r3, [r7, #3]
 8009436:	b2db      	uxtb	r3, r3
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	b2db      	uxtb	r3, r3
 800943c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800943e:	78fb      	ldrb	r3, [r7, #3]
 8009440:	b2db      	uxtb	r3, r3
 8009442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009446:	2b80      	cmp	r3, #128	@ 0x80
 8009448:	d0ef      	beq.n	800942a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800944a:	4b27      	ldr	r3, [pc, #156]	@ (80094e8 <xPortStartScheduler+0x138>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f1c3 0307 	rsb	r3, r3, #7
 8009452:	2b04      	cmp	r3, #4
 8009454:	d00b      	beq.n	800946e <xPortStartScheduler+0xbe>
	__asm volatile
 8009456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	60bb      	str	r3, [r7, #8]
}
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	e7fd      	b.n	800946a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800946e:	4b1e      	ldr	r3, [pc, #120]	@ (80094e8 <xPortStartScheduler+0x138>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	4a1c      	ldr	r2, [pc, #112]	@ (80094e8 <xPortStartScheduler+0x138>)
 8009476:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009478:	4b1b      	ldr	r3, [pc, #108]	@ (80094e8 <xPortStartScheduler+0x138>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009480:	4a19      	ldr	r2, [pc, #100]	@ (80094e8 <xPortStartScheduler+0x138>)
 8009482:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	b2da      	uxtb	r2, r3
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800948c:	4b17      	ldr	r3, [pc, #92]	@ (80094ec <xPortStartScheduler+0x13c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a16      	ldr	r2, [pc, #88]	@ (80094ec <xPortStartScheduler+0x13c>)
 8009492:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009498:	4b14      	ldr	r3, [pc, #80]	@ (80094ec <xPortStartScheduler+0x13c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a13      	ldr	r2, [pc, #76]	@ (80094ec <xPortStartScheduler+0x13c>)
 800949e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80094a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094a4:	f000 f8da 	bl	800965c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094a8:	4b11      	ldr	r3, [pc, #68]	@ (80094f0 <xPortStartScheduler+0x140>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80094ae:	f000 f8f9 	bl	80096a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094b2:	4b10      	ldr	r3, [pc, #64]	@ (80094f4 <xPortStartScheduler+0x144>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a0f      	ldr	r2, [pc, #60]	@ (80094f4 <xPortStartScheduler+0x144>)
 80094b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80094bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094be:	f7ff ff63 	bl	8009388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094c2:	f7fe ff39 	bl	8008338 <vTaskSwitchContext>
	prvTaskExitError();
 80094c6:	f7ff ff17 	bl	80092f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	e000ed00 	.word	0xe000ed00
 80094d8:	410fc271 	.word	0x410fc271
 80094dc:	410fc270 	.word	0x410fc270
 80094e0:	e000e400 	.word	0xe000e400
 80094e4:	200012b8 	.word	0x200012b8
 80094e8:	200012bc 	.word	0x200012bc
 80094ec:	e000ed20 	.word	0xe000ed20
 80094f0:	2000000c 	.word	0x2000000c
 80094f4:	e000ef34 	.word	0xe000ef34

080094f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	607b      	str	r3, [r7, #4]
}
 8009510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009512:	4b10      	ldr	r3, [pc, #64]	@ (8009554 <vPortEnterCritical+0x5c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3301      	adds	r3, #1
 8009518:	4a0e      	ldr	r2, [pc, #56]	@ (8009554 <vPortEnterCritical+0x5c>)
 800951a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800951c:	4b0d      	ldr	r3, [pc, #52]	@ (8009554 <vPortEnterCritical+0x5c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d110      	bne.n	8009546 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009524:	4b0c      	ldr	r3, [pc, #48]	@ (8009558 <vPortEnterCritical+0x60>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00b      	beq.n	8009546 <vPortEnterCritical+0x4e>
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	603b      	str	r3, [r7, #0]
}
 8009540:	bf00      	nop
 8009542:	bf00      	nop
 8009544:	e7fd      	b.n	8009542 <vPortEnterCritical+0x4a>
	}
}
 8009546:	bf00      	nop
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	2000000c 	.word	0x2000000c
 8009558:	e000ed04 	.word	0xe000ed04

0800955c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009562:	4b12      	ldr	r3, [pc, #72]	@ (80095ac <vPortExitCritical+0x50>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10b      	bne.n	8009582 <vPortExitCritical+0x26>
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	607b      	str	r3, [r7, #4]
}
 800957c:	bf00      	nop
 800957e:	bf00      	nop
 8009580:	e7fd      	b.n	800957e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009582:	4b0a      	ldr	r3, [pc, #40]	@ (80095ac <vPortExitCritical+0x50>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3b01      	subs	r3, #1
 8009588:	4a08      	ldr	r2, [pc, #32]	@ (80095ac <vPortExitCritical+0x50>)
 800958a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800958c:	4b07      	ldr	r3, [pc, #28]	@ (80095ac <vPortExitCritical+0x50>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d105      	bne.n	80095a0 <vPortExitCritical+0x44>
 8009594:	2300      	movs	r3, #0
 8009596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	f383 8811 	msr	BASEPRI, r3
}
 800959e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	2000000c 	.word	0x2000000c

080095b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095b0:	f3ef 8009 	mrs	r0, PSP
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	4b15      	ldr	r3, [pc, #84]	@ (8009610 <pxCurrentTCBConst>)
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	f01e 0f10 	tst.w	lr, #16
 80095c0:	bf08      	it	eq
 80095c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ca:	6010      	str	r0, [r2, #0]
 80095cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80095d4:	f380 8811 	msr	BASEPRI, r0
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f7fe feaa 	bl	8008338 <vTaskSwitchContext>
 80095e4:	f04f 0000 	mov.w	r0, #0
 80095e8:	f380 8811 	msr	BASEPRI, r0
 80095ec:	bc09      	pop	{r0, r3}
 80095ee:	6819      	ldr	r1, [r3, #0]
 80095f0:	6808      	ldr	r0, [r1, #0]
 80095f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f6:	f01e 0f10 	tst.w	lr, #16
 80095fa:	bf08      	it	eq
 80095fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009600:	f380 8809 	msr	PSP, r0
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	f3af 8000 	nop.w

08009610 <pxCurrentTCBConst>:
 8009610:	20000c8c 	.word	0x20000c8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop

08009618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	607b      	str	r3, [r7, #4]
}
 8009630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009632:	f7fe fdc7 	bl	80081c4 <xTaskIncrementTick>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d003      	beq.n	8009644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800963c:	4b06      	ldr	r3, [pc, #24]	@ (8009658 <xPortSysTickHandler+0x40>)
 800963e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	2300      	movs	r3, #0
 8009646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	f383 8811 	msr	BASEPRI, r3
}
 800964e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009650:	bf00      	nop
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	e000ed04 	.word	0xe000ed04

0800965c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800965c:	b480      	push	{r7}
 800965e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009660:	4b0b      	ldr	r3, [pc, #44]	@ (8009690 <vPortSetupTimerInterrupt+0x34>)
 8009662:	2200      	movs	r2, #0
 8009664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009666:	4b0b      	ldr	r3, [pc, #44]	@ (8009694 <vPortSetupTimerInterrupt+0x38>)
 8009668:	2200      	movs	r2, #0
 800966a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800966c:	4b0a      	ldr	r3, [pc, #40]	@ (8009698 <vPortSetupTimerInterrupt+0x3c>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a0a      	ldr	r2, [pc, #40]	@ (800969c <vPortSetupTimerInterrupt+0x40>)
 8009672:	fba2 2303 	umull	r2, r3, r2, r3
 8009676:	099b      	lsrs	r3, r3, #6
 8009678:	4a09      	ldr	r2, [pc, #36]	@ (80096a0 <vPortSetupTimerInterrupt+0x44>)
 800967a:	3b01      	subs	r3, #1
 800967c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800967e:	4b04      	ldr	r3, [pc, #16]	@ (8009690 <vPortSetupTimerInterrupt+0x34>)
 8009680:	2207      	movs	r2, #7
 8009682:	601a      	str	r2, [r3, #0]
}
 8009684:	bf00      	nop
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	e000e010 	.word	0xe000e010
 8009694:	e000e018 	.word	0xe000e018
 8009698:	20000000 	.word	0x20000000
 800969c:	10624dd3 	.word	0x10624dd3
 80096a0:	e000e014 	.word	0xe000e014

080096a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80096b4 <vPortEnableVFP+0x10>
 80096a8:	6801      	ldr	r1, [r0, #0]
 80096aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80096ae:	6001      	str	r1, [r0, #0]
 80096b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096b2:	bf00      	nop
 80096b4:	e000ed88 	.word	0xe000ed88

080096b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096be:	f3ef 8305 	mrs	r3, IPSR
 80096c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2b0f      	cmp	r3, #15
 80096c8:	d915      	bls.n	80096f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096ca:	4a18      	ldr	r2, [pc, #96]	@ (800972c <vPortValidateInterruptPriority+0x74>)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	4413      	add	r3, r2
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096d4:	4b16      	ldr	r3, [pc, #88]	@ (8009730 <vPortValidateInterruptPriority+0x78>)
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	7afa      	ldrb	r2, [r7, #11]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d20b      	bcs.n	80096f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	607b      	str	r3, [r7, #4]
}
 80096f0:	bf00      	nop
 80096f2:	bf00      	nop
 80096f4:	e7fd      	b.n	80096f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009734 <vPortValidateInterruptPriority+0x7c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80096fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009738 <vPortValidateInterruptPriority+0x80>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d90b      	bls.n	800971e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	603b      	str	r3, [r7, #0]
}
 8009718:	bf00      	nop
 800971a:	bf00      	nop
 800971c:	e7fd      	b.n	800971a <vPortValidateInterruptPriority+0x62>
	}
 800971e:	bf00      	nop
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	e000e3f0 	.word	0xe000e3f0
 8009730:	200012b8 	.word	0x200012b8
 8009734:	e000ed0c 	.word	0xe000ed0c
 8009738:	200012bc 	.word	0x200012bc

0800973c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08a      	sub	sp, #40	@ 0x28
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009744:	2300      	movs	r3, #0
 8009746:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009748:	f7fe fc80 	bl	800804c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800974c:	4b5c      	ldr	r3, [pc, #368]	@ (80098c0 <pvPortMalloc+0x184>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d101      	bne.n	8009758 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009754:	f000 f924 	bl	80099a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009758:	4b5a      	ldr	r3, [pc, #360]	@ (80098c4 <pvPortMalloc+0x188>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4013      	ands	r3, r2
 8009760:	2b00      	cmp	r3, #0
 8009762:	f040 8095 	bne.w	8009890 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01e      	beq.n	80097aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800976c:	2208      	movs	r2, #8
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4413      	add	r3, r2
 8009772:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b00      	cmp	r3, #0
 800977c:	d015      	beq.n	80097aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f023 0307 	bic.w	r3, r3, #7
 8009784:	3308      	adds	r3, #8
 8009786:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00b      	beq.n	80097aa <pvPortMalloc+0x6e>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	617b      	str	r3, [r7, #20]
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	e7fd      	b.n	80097a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d06f      	beq.n	8009890 <pvPortMalloc+0x154>
 80097b0:	4b45      	ldr	r3, [pc, #276]	@ (80098c8 <pvPortMalloc+0x18c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d86a      	bhi.n	8009890 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097ba:	4b44      	ldr	r3, [pc, #272]	@ (80098cc <pvPortMalloc+0x190>)
 80097bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097be:	4b43      	ldr	r3, [pc, #268]	@ (80098cc <pvPortMalloc+0x190>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097c4:	e004      	b.n	80097d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80097c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d903      	bls.n	80097e2 <pvPortMalloc+0xa6>
 80097da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1f1      	bne.n	80097c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097e2:	4b37      	ldr	r3, [pc, #220]	@ (80098c0 <pvPortMalloc+0x184>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d051      	beq.n	8009890 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2208      	movs	r2, #8
 80097f2:	4413      	add	r3, r2
 80097f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	1ad2      	subs	r2, r2, r3
 8009806:	2308      	movs	r3, #8
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	429a      	cmp	r2, r3
 800980c:	d920      	bls.n	8009850 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800980e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4413      	add	r3, r2
 8009814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	f003 0307 	and.w	r3, r3, #7
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00b      	beq.n	8009838 <pvPortMalloc+0xfc>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	613b      	str	r3, [r7, #16]
}
 8009832:	bf00      	nop
 8009834:	bf00      	nop
 8009836:	e7fd      	b.n	8009834 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	1ad2      	subs	r2, r2, r3
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800984a:	69b8      	ldr	r0, [r7, #24]
 800984c:	f000 f90a 	bl	8009a64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009850:	4b1d      	ldr	r3, [pc, #116]	@ (80098c8 <pvPortMalloc+0x18c>)
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	4a1b      	ldr	r2, [pc, #108]	@ (80098c8 <pvPortMalloc+0x18c>)
 800985c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800985e:	4b1a      	ldr	r3, [pc, #104]	@ (80098c8 <pvPortMalloc+0x18c>)
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	4b1b      	ldr	r3, [pc, #108]	@ (80098d0 <pvPortMalloc+0x194>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d203      	bcs.n	8009872 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800986a:	4b17      	ldr	r3, [pc, #92]	@ (80098c8 <pvPortMalloc+0x18c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a18      	ldr	r2, [pc, #96]	@ (80098d0 <pvPortMalloc+0x194>)
 8009870:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	4b13      	ldr	r3, [pc, #76]	@ (80098c4 <pvPortMalloc+0x188>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	431a      	orrs	r2, r3
 800987c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009886:	4b13      	ldr	r3, [pc, #76]	@ (80098d4 <pvPortMalloc+0x198>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3301      	adds	r3, #1
 800988c:	4a11      	ldr	r2, [pc, #68]	@ (80098d4 <pvPortMalloc+0x198>)
 800988e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009890:	f7fe fbea 	bl	8008068 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	f003 0307 	and.w	r3, r3, #7
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00b      	beq.n	80098b6 <pvPortMalloc+0x17a>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	60fb      	str	r3, [r7, #12]
}
 80098b0:	bf00      	nop
 80098b2:	bf00      	nop
 80098b4:	e7fd      	b.n	80098b2 <pvPortMalloc+0x176>
	return pvReturn;
 80098b6:	69fb      	ldr	r3, [r7, #28]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3728      	adds	r7, #40	@ 0x28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20004ec8 	.word	0x20004ec8
 80098c4:	20004edc 	.word	0x20004edc
 80098c8:	20004ecc 	.word	0x20004ecc
 80098cc:	20004ec0 	.word	0x20004ec0
 80098d0:	20004ed0 	.word	0x20004ed0
 80098d4:	20004ed4 	.word	0x20004ed4

080098d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d04f      	beq.n	800998a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098ea:	2308      	movs	r3, #8
 80098ec:	425b      	negs	r3, r3
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	4413      	add	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	4b25      	ldr	r3, [pc, #148]	@ (8009994 <vPortFree+0xbc>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4013      	ands	r3, r2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10b      	bne.n	800991e <vPortFree+0x46>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	60fb      	str	r3, [r7, #12]
}
 8009918:	bf00      	nop
 800991a:	bf00      	nop
 800991c:	e7fd      	b.n	800991a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00b      	beq.n	800993e <vPortFree+0x66>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	60bb      	str	r3, [r7, #8]
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	e7fd      	b.n	800993a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	4b14      	ldr	r3, [pc, #80]	@ (8009994 <vPortFree+0xbc>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4013      	ands	r3, r2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d01e      	beq.n	800998a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d11a      	bne.n	800998a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	4b0e      	ldr	r3, [pc, #56]	@ (8009994 <vPortFree+0xbc>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	43db      	mvns	r3, r3
 800995e:	401a      	ands	r2, r3
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009964:	f7fe fb72 	bl	800804c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	4b0a      	ldr	r3, [pc, #40]	@ (8009998 <vPortFree+0xc0>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4413      	add	r3, r2
 8009972:	4a09      	ldr	r2, [pc, #36]	@ (8009998 <vPortFree+0xc0>)
 8009974:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009976:	6938      	ldr	r0, [r7, #16]
 8009978:	f000 f874 	bl	8009a64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800997c:	4b07      	ldr	r3, [pc, #28]	@ (800999c <vPortFree+0xc4>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3301      	adds	r3, #1
 8009982:	4a06      	ldr	r2, [pc, #24]	@ (800999c <vPortFree+0xc4>)
 8009984:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009986:	f7fe fb6f 	bl	8008068 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800998a:	bf00      	nop
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20004edc 	.word	0x20004edc
 8009998:	20004ecc 	.word	0x20004ecc
 800999c:	20004ed8 	.word	0x20004ed8

080099a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80099aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099ac:	4b27      	ldr	r3, [pc, #156]	@ (8009a4c <prvHeapInit+0xac>)
 80099ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f003 0307 	and.w	r3, r3, #7
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00c      	beq.n	80099d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3307      	adds	r3, #7
 80099be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f023 0307 	bic.w	r3, r3, #7
 80099c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	4a1f      	ldr	r2, [pc, #124]	@ (8009a4c <prvHeapInit+0xac>)
 80099d0:	4413      	add	r3, r2
 80099d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009a50 <prvHeapInit+0xb0>)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099de:	4b1c      	ldr	r3, [pc, #112]	@ (8009a50 <prvHeapInit+0xb0>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	4413      	add	r3, r2
 80099ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099ec:	2208      	movs	r2, #8
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	1a9b      	subs	r3, r3, r2
 80099f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f023 0307 	bic.w	r3, r3, #7
 80099fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4a15      	ldr	r2, [pc, #84]	@ (8009a54 <prvHeapInit+0xb4>)
 8009a00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a02:	4b14      	ldr	r3, [pc, #80]	@ (8009a54 <prvHeapInit+0xb4>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2200      	movs	r2, #0
 8009a08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a0a:	4b12      	ldr	r3, [pc, #72]	@ (8009a54 <prvHeapInit+0xb4>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	1ad2      	subs	r2, r2, r3
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a20:	4b0c      	ldr	r3, [pc, #48]	@ (8009a54 <prvHeapInit+0xb4>)
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8009a58 <prvHeapInit+0xb8>)
 8009a2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	4a09      	ldr	r2, [pc, #36]	@ (8009a5c <prvHeapInit+0xbc>)
 8009a36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a38:	4b09      	ldr	r3, [pc, #36]	@ (8009a60 <prvHeapInit+0xc0>)
 8009a3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009a3e:	601a      	str	r2, [r3, #0]
}
 8009a40:	bf00      	nop
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	200012c0 	.word	0x200012c0
 8009a50:	20004ec0 	.word	0x20004ec0
 8009a54:	20004ec8 	.word	0x20004ec8
 8009a58:	20004ed0 	.word	0x20004ed0
 8009a5c:	20004ecc 	.word	0x20004ecc
 8009a60:	20004edc 	.word	0x20004edc

08009a64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a6c:	4b28      	ldr	r3, [pc, #160]	@ (8009b10 <prvInsertBlockIntoFreeList+0xac>)
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	e002      	b.n	8009a78 <prvInsertBlockIntoFreeList+0x14>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	60fb      	str	r3, [r7, #12]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d8f7      	bhi.n	8009a72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d108      	bne.n	8009aa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	441a      	add	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	441a      	add	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d118      	bne.n	8009aec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	4b15      	ldr	r3, [pc, #84]	@ (8009b14 <prvInsertBlockIntoFreeList+0xb0>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d00d      	beq.n	8009ae2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	685a      	ldr	r2, [r3, #4]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	441a      	add	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	e008      	b.n	8009af4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8009b14 <prvInsertBlockIntoFreeList+0xb0>)
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	e003      	b.n	8009af4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d002      	beq.n	8009b02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b02:	bf00      	nop
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	20004ec0 	.word	0x20004ec0
 8009b14:	20004ec8 	.word	0x20004ec8

08009b18 <_ZN13CommunicationC1Ev>:
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	4a08      	ldr	r2, [pc, #32]	@ (8009b44 <_ZN13CommunicationC1Ev+0x2c>)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	3304      	adds	r3, #4
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f001 fd12 	bl	800b554 <_ZN12FlashManagerC1Ev>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3304      	adds	r3, #4
 8009b34:	4618      	mov	r0, r3
 8009b36:	f001 fd7d 	bl	800b634 <_ZN12FlashManager10BackupDataEv>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	08010c24 	.word	0x08010c24

08009b48 <_ZN13CommunicationD1Ev>:
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	4a06      	ldr	r2, [pc, #24]	@ (8009b6c <_ZN13CommunicationD1Ev+0x24>)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	3304      	adds	r3, #4
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f001 fd4a 	bl	800b5f4 <_ZN12FlashManagerD1Ev>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4618      	mov	r0, r3
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	08010c24 	.word	0x08010c24

08009b70 <_ZN13CommunicationD0Ev>:
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff ffe5 	bl	8009b48 <_ZN13CommunicationD1Ev>
 8009b7e:	2120      	movs	r1, #32
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f005 ff55 	bl	800fa30 <_ZdlPvj>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <_ZN13Communication14ProcessCommandEPh>:
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d010      	beq.n	8009bc4 <_ZN13Communication14ProcessCommandEPh+0x34>
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	dc13      	bgt.n	8009bce <_ZN13Communication14ProcessCommandEPh+0x3e>
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d002      	beq.n	8009bb0 <_ZN13Communication14ProcessCommandEPh+0x20>
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d005      	beq.n	8009bba <_ZN13Communication14ProcessCommandEPh+0x2a>
 8009bae:	e00e      	b.n	8009bce <_ZN13Communication14ProcessCommandEPh+0x3e>
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f814 	bl	8009be0 <_ZN13Communication6SystemEPh>
 8009bb8:	e00e      	b.n	8009bd8 <_ZN13Communication14ProcessCommandEPh+0x48>
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f8c5 	bl	8009d4c <_ZN13Communication7CommandEPh>
 8009bc2:	e009      	b.n	8009bd8 <_ZN13Communication14ProcessCommandEPh+0x48>
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fb4e 	bl	800a268 <_ZN13Communication13ConfigurationEPh>
 8009bcc:	e004      	b.n	8009bd8 <_ZN13Communication14ProcessCommandEPh+0x48>
 8009bce:	2108      	movs	r1, #8
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	f004 fa9c 	bl	800e10e <ErrorResult>
 8009bd6:	bf00      	nop
 8009bd8:	bf00      	nop
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <_ZN13Communication6SystemEPh>:
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	f040 80a4 	bne.w	8009d3c <_ZN13Communication6SystemEPh+0x15c>
 8009bf4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8009bf8:	82fb      	strh	r3, [r7, #22]
 8009bfa:	230c      	movs	r3, #12
 8009bfc:	82bb      	strh	r3, [r7, #20]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	3301      	adds	r3, #1
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	f200 8093 	bhi.w	8009d32 <_ZN13Communication6SystemEPh+0x152>
 8009c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c14 <_ZN13Communication6SystemEPh+0x34>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c2d 	.word	0x08009c2d
 8009c18:	08009ccb 	.word	0x08009ccb
 8009c1c:	08009cd5 	.word	0x08009cd5
 8009c20:	08009cdf 	.word	0x08009cdf
 8009c24:	08009ceb 	.word	0x08009ceb
 8009c28:	08009d0f 	.word	0x08009d0f
 8009c2c:	4b45      	ldr	r3, [pc, #276]	@ (8009d44 <_ZN13Communication6SystemEPh+0x164>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	723b      	strb	r3, [r7, #8]
 8009c32:	4b44      	ldr	r3, [pc, #272]	@ (8009d44 <_ZN13Communication6SystemEPh+0x164>)
 8009c34:	785b      	ldrb	r3, [r3, #1]
 8009c36:	727b      	strb	r3, [r7, #9]
 8009c38:	4b42      	ldr	r3, [pc, #264]	@ (8009d44 <_ZN13Communication6SystemEPh+0x164>)
 8009c3a:	789b      	ldrb	r3, [r3, #2]
 8009c3c:	72bb      	strb	r3, [r7, #10]
 8009c3e:	4b41      	ldr	r3, [pc, #260]	@ (8009d44 <_ZN13Communication6SystemEPh+0x164>)
 8009c40:	78db      	ldrb	r3, [r3, #3]
 8009c42:	72fb      	strb	r3, [r7, #11]
 8009c44:	4b3f      	ldr	r3, [pc, #252]	@ (8009d44 <_ZN13Communication6SystemEPh+0x164>)
 8009c46:	791b      	ldrb	r3, [r3, #4]
 8009c48:	733b      	strb	r3, [r7, #12]
 8009c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8009d44 <_ZN13Communication6SystemEPh+0x164>)
 8009c4c:	795b      	ldrb	r3, [r3, #5]
 8009c4e:	737b      	strb	r3, [r7, #13]
 8009c50:	4b3d      	ldr	r3, [pc, #244]	@ (8009d48 <_ZN13Communication6SystemEPh+0x168>)
 8009c52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d005      	beq.n	8009c64 <_ZN13Communication6SystemEPh+0x84>
 8009c58:	4b3b      	ldr	r3, [pc, #236]	@ (8009d48 <_ZN13Communication6SystemEPh+0x168>)
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <_ZN13Communication6SystemEPh+0x84>
 8009c60:	2301      	movs	r3, #1
 8009c62:	e000      	b.n	8009c66 <_ZN13Communication6SystemEPh+0x86>
 8009c64:	2300      	movs	r3, #0
 8009c66:	73bb      	strb	r3, [r7, #14]
 8009c68:	4b37      	ldr	r3, [pc, #220]	@ (8009d48 <_ZN13Communication6SystemEPh+0x168>)
 8009c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d005      	beq.n	8009c7c <_ZN13Communication6SystemEPh+0x9c>
 8009c70:	4b35      	ldr	r3, [pc, #212]	@ (8009d48 <_ZN13Communication6SystemEPh+0x168>)
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <_ZN13Communication6SystemEPh+0x9c>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e000      	b.n	8009c7e <_ZN13Communication6SystemEPh+0x9e>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
 8009c80:	4b31      	ldr	r3, [pc, #196]	@ (8009d48 <_ZN13Communication6SystemEPh+0x168>)
 8009c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <_ZN13Communication6SystemEPh+0xb6>
 8009c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8009d48 <_ZN13Communication6SystemEPh+0x168>)
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <_ZN13Communication6SystemEPh+0xb6>
 8009c92:	2301      	movs	r3, #1
 8009c94:	e000      	b.n	8009c98 <_ZN13Communication6SystemEPh+0xb8>
 8009c96:	2300      	movs	r3, #0
 8009c98:	743b      	strb	r3, [r7, #16]
 8009c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8009d48 <_ZN13Communication6SystemEPh+0x168>)
 8009c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d005      	beq.n	8009cb0 <_ZN13Communication6SystemEPh+0xd0>
 8009ca4:	4b28      	ldr	r3, [pc, #160]	@ (8009d48 <_ZN13Communication6SystemEPh+0x168>)
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <_ZN13Communication6SystemEPh+0xd0>
 8009cac:	2301      	movs	r3, #1
 8009cae:	e000      	b.n	8009cb2 <_ZN13Communication6SystemEPh+0xd2>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	747b      	strb	r3, [r7, #17]
 8009cb4:	4b23      	ldr	r3, [pc, #140]	@ (8009d44 <_ZN13Communication6SystemEPh+0x164>)
 8009cb6:	799b      	ldrb	r3, [r3, #6]
 8009cb8:	74bb      	strb	r3, [r7, #18]
 8009cba:	f107 0208 	add.w	r2, r7, #8
 8009cbe:	230b      	movs	r3, #11
 8009cc0:	2102      	movs	r1, #2
 8009cc2:	2064      	movs	r0, #100	@ 0x64
 8009cc4:	f004 f9a8 	bl	800e018 <SuccessDataResult>
 8009cc8:	e039      	b.n	8009d3e <_ZN13Communication6SystemEPh+0x15e>
 8009cca:	f004 f997 	bl	800dffc <SuccessResult>
 8009cce:	f7f8 f916 	bl	8001efe <HAL_NVIC_SystemReset>
 8009cd2:	e034      	b.n	8009d3e <_ZN13Communication6SystemEPh+0x15e>
 8009cd4:	f004 f992 	bl	800dffc <SuccessResult>
 8009cd8:	f004 f88e 	bl	800ddf8 <HardReset>
 8009cdc:	e02f      	b.n	8009d3e <_ZN13Communication6SystemEPh+0x15e>
 8009cde:	f005 fe41 	bl	800f964 <ClearLoadcellParams>
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fef8 	bl	800aad8 <_ZN13Communication15LoadcellAverageEv>
 8009ce8:	e029      	b.n	8009d3e <_ZN13Communication6SystemEPh+0x15e>
 8009cea:	f005 fe3b 	bl	800f964 <ClearLoadcellParams>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	3302      	adds	r3, #2
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	021b      	lsls	r3, r3, #8
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	3203      	adds	r2, #3
 8009cfc:	7812      	ldrb	r2, [r2, #0]
 8009cfe:	4413      	add	r3, r2
 8009d00:	82fb      	strh	r3, [r7, #22]
 8009d02:	8afb      	ldrh	r3, [r7, #22]
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 ff0c 	bl	800ab24 <_ZN13Communication25LoadcellVolumeCalibrationEt>
 8009d0c:	e017      	b.n	8009d3e <_ZN13Communication6SystemEPh+0x15e>
 8009d0e:	f005 fe29 	bl	800f964 <ClearLoadcellParams>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	3302      	adds	r3, #2
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	021b      	lsls	r3, r3, #8
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	3203      	adds	r2, #3
 8009d20:	7812      	ldrb	r2, [r2, #0]
 8009d22:	4413      	add	r3, r2
 8009d24:	82bb      	strh	r3, [r7, #20]
 8009d26:	8abb      	ldrh	r3, [r7, #20]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 ff2e 	bl	800ab8c <_ZN13Communication23LoadcellFlowCalibrationEt>
 8009d30:	e005      	b.n	8009d3e <_ZN13Communication6SystemEPh+0x15e>
 8009d32:	2109      	movs	r1, #9
 8009d34:	2000      	movs	r0, #0
 8009d36:	f004 f9ea 	bl	800e10e <ErrorResult>
 8009d3a:	e000      	b.n	8009d3e <_ZN13Communication6SystemEPh+0x15e>
 8009d3c:	bf00      	nop
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	20009298 	.word	0x20009298
 8009d48:	200090b0 	.word	0x200090b0

08009d4c <_ZN13Communication7CommandEPh>:
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af02      	add	r7, sp, #8
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
 8009d56:	2300      	movs	r3, #0
 8009d58:	81fb      	strh	r3, [r7, #14]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	f040 827b 	bne.w	800a25a <_ZN13Communication7CommandEPh+0x50e>
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	3301      	adds	r3, #1
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	2bff      	cmp	r3, #255	@ 0xff
 8009d6c:	f000 8217 	beq.w	800a19e <_ZN13Communication7CommandEPh+0x452>
 8009d70:	2bff      	cmp	r3, #255	@ 0xff
 8009d72:	f300 826d 	bgt.w	800a250 <_ZN13Communication7CommandEPh+0x504>
 8009d76:	2b0c      	cmp	r3, #12
 8009d78:	dc22      	bgt.n	8009dc0 <_ZN13Communication7CommandEPh+0x74>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f340 8268 	ble.w	800a250 <_ZN13Communication7CommandEPh+0x504>
 8009d80:	3b01      	subs	r3, #1
 8009d82:	2b0b      	cmp	r3, #11
 8009d84:	f200 8264 	bhi.w	800a250 <_ZN13Communication7CommandEPh+0x504>
 8009d88:	a201      	add	r2, pc, #4	@ (adr r2, 8009d90 <_ZN13Communication7CommandEPh+0x44>)
 8009d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8e:	bf00      	nop
 8009d90:	08009dc9 	.word	0x08009dc9
 8009d94:	08009e0f 	.word	0x08009e0f
 8009d98:	08009e55 	.word	0x08009e55
 8009d9c:	08009ee7 	.word	0x08009ee7
 8009da0:	08009f2d 	.word	0x08009f2d
 8009da4:	08009f73 	.word	0x08009f73
 8009da8:	08009fc5 	.word	0x08009fc5
 8009dac:	08009ff7 	.word	0x08009ff7
 8009db0:	0800a025 	.word	0x0800a025
 8009db4:	0800a087 	.word	0x0800a087
 8009db8:	0800a0fb 	.word	0x0800a0fb
 8009dbc:	0800a13d 	.word	0x0800a13d
 8009dc0:	2bfd      	cmp	r3, #253	@ 0xfd
 8009dc2:	f000 81dc 	beq.w	800a17e <_ZN13Communication7CommandEPh+0x432>
 8009dc6:	e243      	b.n	800a250 <_ZN13Communication7CommandEPh+0x504>
 8009dc8:	4ba7      	ldr	r3, [pc, #668]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009dca:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00e      	beq.n	8009df0 <_ZN13Communication7CommandEPh+0xa4>
 8009dd2:	4ba5      	ldr	r3, [pc, #660]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009dd4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d009      	beq.n	8009df0 <_ZN13Communication7CommandEPh+0xa4>
 8009ddc:	4ba2      	ldr	r3, [pc, #648]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009dde:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009de2:	2b05      	cmp	r3, #5
 8009de4:	d004      	beq.n	8009df0 <_ZN13Communication7CommandEPh+0xa4>
 8009de6:	2102      	movs	r1, #2
 8009de8:	2000      	movs	r0, #0
 8009dea:	f004 f990 	bl	800e10e <ErrorResult>
 8009dee:	e235      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	3302      	adds	r3, #2
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	bf0c      	ite	eq
 8009dfa:	2301      	moveq	r3, #1
 8009dfc:	2300      	movne	r3, #0
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fb50 	bl	800a4a8 <_ZN13Communication14ToggleFirstEmgEb>
 8009e08:	f004 f8f8 	bl	800dffc <SuccessResult>
 8009e0c:	e226      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009e0e:	4b96      	ldr	r3, [pc, #600]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009e10:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00e      	beq.n	8009e36 <_ZN13Communication7CommandEPh+0xea>
 8009e18:	4b93      	ldr	r3, [pc, #588]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009e1a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d009      	beq.n	8009e36 <_ZN13Communication7CommandEPh+0xea>
 8009e22:	4b91      	ldr	r3, [pc, #580]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009e24:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e28:	2b05      	cmp	r3, #5
 8009e2a:	d004      	beq.n	8009e36 <_ZN13Communication7CommandEPh+0xea>
 8009e2c:	2102      	movs	r1, #2
 8009e2e:	2000      	movs	r0, #0
 8009e30:	f004 f96d 	bl	800e10e <ErrorResult>
 8009e34:	e212      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	3302      	adds	r3, #2
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	bf0c      	ite	eq
 8009e40:	2301      	moveq	r3, #1
 8009e42:	2300      	movne	r3, #0
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fb5b 	bl	800a504 <_ZN13Communication15ToggleSecondEmgEb>
 8009e4e:	f004 f8d5 	bl	800dffc <SuccessResult>
 8009e52:	e203      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009e54:	4b84      	ldr	r3, [pc, #528]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009e56:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00e      	beq.n	8009e7c <_ZN13Communication7CommandEPh+0x130>
 8009e5e:	4b82      	ldr	r3, [pc, #520]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009e60:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d009      	beq.n	8009e7c <_ZN13Communication7CommandEPh+0x130>
 8009e68:	4b7f      	ldr	r3, [pc, #508]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009e6a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e6e:	2b05      	cmp	r3, #5
 8009e70:	d004      	beq.n	8009e7c <_ZN13Communication7CommandEPh+0x130>
 8009e72:	2102      	movs	r1, #2
 8009e74:	2000      	movs	r0, #0
 8009e76:	f004 f94a 	bl	800e10e <ErrorResult>
 8009e7a:	e1ef      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009e7c:	4b7a      	ldr	r3, [pc, #488]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d003      	beq.n	8009e8c <_ZN13Communication7CommandEPh+0x140>
 8009e84:	4b78      	ldr	r3, [pc, #480]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d104      	bne.n	8009e96 <_ZN13Communication7CommandEPh+0x14a>
 8009e8c:	2105      	movs	r1, #5
 8009e8e:	2000      	movs	r0, #0
 8009e90:	f004 f93d 	bl	800e10e <ErrorResult>
 8009e94:	e1e2      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009e96:	4b74      	ldr	r3, [pc, #464]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009e98:	edd3 7a08 	vldr	s15, [r3, #32]
 8009e9c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8009ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea8:	d409      	bmi.n	8009ebe <_ZN13Communication7CommandEPh+0x172>
 8009eaa:	4b6f      	ldr	r3, [pc, #444]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009eac:	edd3 7a07 	vldr	s15, [r3, #28]
 8009eb0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8009eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ebc:	d504      	bpl.n	8009ec8 <_ZN13Communication7CommandEPh+0x17c>
 8009ebe:	2104      	movs	r1, #4
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	f004 f924 	bl	800e10e <ErrorResult>
 8009ec6:	e1c9      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	3302      	adds	r3, #2
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	bf0c      	ite	eq
 8009ed2:	2301      	moveq	r3, #1
 8009ed4:	2300      	movne	r3, #0
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fb40 	bl	800a560 <_ZN13Communication14ToggleLoadCellEb>
 8009ee0:	f004 f88c 	bl	800dffc <SuccessResult>
 8009ee4:	e1ba      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009ee6:	4b60      	ldr	r3, [pc, #384]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009ee8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00e      	beq.n	8009f0e <_ZN13Communication7CommandEPh+0x1c2>
 8009ef0:	4b5d      	ldr	r3, [pc, #372]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009ef2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d009      	beq.n	8009f0e <_ZN13Communication7CommandEPh+0x1c2>
 8009efa:	4b5b      	ldr	r3, [pc, #364]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009efc:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009f00:	2b05      	cmp	r3, #5
 8009f02:	d004      	beq.n	8009f0e <_ZN13Communication7CommandEPh+0x1c2>
 8009f04:	2102      	movs	r1, #2
 8009f06:	2000      	movs	r0, #0
 8009f08:	f004 f901 	bl	800e10e <ErrorResult>
 8009f0c:	e1a6      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	3302      	adds	r3, #2
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	bf0c      	ite	eq
 8009f18:	2301      	moveq	r3, #1
 8009f1a:	2300      	movne	r3, #0
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fc57 	bl	800a7d4 <_ZN13Communication10TogglePumpEb>
 8009f26:	f004 f869 	bl	800dffc <SuccessResult>
 8009f2a:	e197      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009f2c:	4b4e      	ldr	r3, [pc, #312]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009f2e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00e      	beq.n	8009f54 <_ZN13Communication7CommandEPh+0x208>
 8009f36:	4b4c      	ldr	r3, [pc, #304]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009f38:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d009      	beq.n	8009f54 <_ZN13Communication7CommandEPh+0x208>
 8009f40:	4b49      	ldr	r3, [pc, #292]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009f42:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009f46:	2b05      	cmp	r3, #5
 8009f48:	d004      	beq.n	8009f54 <_ZN13Communication7CommandEPh+0x208>
 8009f4a:	2102      	movs	r1, #2
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	f004 f8de 	bl	800e10e <ErrorResult>
 8009f52:	e183      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	3302      	adds	r3, #2
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	bf0c      	ite	eq
 8009f5e:	2301      	moveq	r3, #1
 8009f60:	2300      	movne	r3, #0
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fc6e 	bl	800a848 <_ZN13Communication11ToggleValveEb>
 8009f6c:	f004 f846 	bl	800dffc <SuccessResult>
 8009f70:	e174      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009f72:	4b3d      	ldr	r3, [pc, #244]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009f74:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d004      	beq.n	8009f86 <_ZN13Communication7CommandEPh+0x23a>
 8009f7c:	2102      	movs	r1, #2
 8009f7e:	2000      	movs	r0, #0
 8009f80:	f004 f8c5 	bl	800e10e <ErrorResult>
 8009f84:	e16a      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	3302      	adds	r3, #2
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	021b      	lsls	r3, r3, #8
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	3203      	adds	r2, #3
 8009f94:	7812      	ldrb	r2, [r2, #0]
 8009f96:	4413      	add	r3, r2
 8009f98:	81fb      	strh	r3, [r7, #14]
 8009f9a:	89fb      	ldrh	r3, [r7, #14]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d104      	bne.n	8009faa <_ZN13Communication7CommandEPh+0x25e>
 8009fa0:	2106      	movs	r1, #6
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	f004 f8b3 	bl	800e10e <ErrorResult>
 8009fa8:	e158      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009faa:	89fb      	ldrh	r3, [r7, #14]
 8009fac:	461a      	mov	r2, r3
 8009fae:	0152      	lsls	r2, r2, #5
 8009fb0:	1ad2      	subs	r2, r2, r3
 8009fb2:	0092      	lsls	r2, r2, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fd0d 	bl	800a9dc <_ZN13Communication10StartCleanEt>
 8009fc2:	e14b      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009fc4:	4b28      	ldr	r3, [pc, #160]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009fc6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d004      	beq.n	8009fd8 <_ZN13Communication7CommandEPh+0x28c>
 8009fce:	2102      	movs	r1, #2
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	f004 f89c 	bl	800e10e <ErrorResult>
 8009fd6:	e141      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	3302      	adds	r3, #2
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	bf0c      	ite	eq
 8009fe2:	2301      	moveq	r3, #1
 8009fe4:	2300      	movne	r3, #0
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fd28 	bl	800aa40 <_ZN13Communication14ToggleSafeModeEb>
 8009ff0:	f004 f804 	bl	800dffc <SuccessResult>
 8009ff4:	e132      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 8009ff6:	4b1c      	ldr	r3, [pc, #112]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 8009ff8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d004      	beq.n	800a00a <_ZN13Communication7CommandEPh+0x2be>
 800a000:	2102      	movs	r1, #2
 800a002:	2000      	movs	r0, #0
 800a004:	f004 f883 	bl	800e10e <ErrorResult>
 800a008:	e128      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	3302      	adds	r3, #2
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2b01      	cmp	r3, #1
 800a012:	bf0c      	ite	eq
 800a014:	2301      	moveq	r3, #1
 800a016:	2300      	movne	r3, #0
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fc4d 	bl	800a8bc <_ZN13Communication16ToggleDataStreamEb>
 800a022:	e11b      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a024:	4b10      	ldr	r3, [pc, #64]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 800a026:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00e      	beq.n	800a04c <_ZN13Communication7CommandEPh+0x300>
 800a02e:	4b0e      	ldr	r3, [pc, #56]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 800a030:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a034:	2b01      	cmp	r3, #1
 800a036:	d009      	beq.n	800a04c <_ZN13Communication7CommandEPh+0x300>
 800a038:	4b0b      	ldr	r3, [pc, #44]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 800a03a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a03e:	2b05      	cmp	r3, #5
 800a040:	d004      	beq.n	800a04c <_ZN13Communication7CommandEPh+0x300>
 800a042:	2102      	movs	r1, #2
 800a044:	2000      	movs	r0, #0
 800a046:	f004 f862 	bl	800e10e <ErrorResult>
 800a04a:	e107      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a04c:	4b06      	ldr	r3, [pc, #24]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d003      	beq.n	800a05c <_ZN13Communication7CommandEPh+0x310>
 800a054:	4b04      	ldr	r3, [pc, #16]	@ (800a068 <_ZN13Communication7CommandEPh+0x31c>)
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d107      	bne.n	800a06c <_ZN13Communication7CommandEPh+0x320>
 800a05c:	2105      	movs	r1, #5
 800a05e:	2000      	movs	r0, #0
 800a060:	f004 f855 	bl	800e10e <ErrorResult>
 800a064:	e0fa      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a066:	bf00      	nop
 800a068:	200092a0 	.word	0x200092a0
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	3302      	adds	r3, #2
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	2b01      	cmp	r3, #1
 800a074:	bf0c      	ite	eq
 800a076:	2301      	moveq	r3, #1
 800a078:	2300      	movne	r3, #0
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fac8 	bl	800a614 <_ZN13Communication16ToggleReadVolumeEb>
 800a084:	e0ea      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a086:	4b77      	ldr	r3, [pc, #476]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a088:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00e      	beq.n	800a0ae <_ZN13Communication7CommandEPh+0x362>
 800a090:	4b74      	ldr	r3, [pc, #464]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a092:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a096:	2b01      	cmp	r3, #1
 800a098:	d009      	beq.n	800a0ae <_ZN13Communication7CommandEPh+0x362>
 800a09a:	4b72      	ldr	r3, [pc, #456]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a09c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a0a0:	2b05      	cmp	r3, #5
 800a0a2:	d004      	beq.n	800a0ae <_ZN13Communication7CommandEPh+0x362>
 800a0a4:	2102      	movs	r1, #2
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	f004 f831 	bl	800e10e <ErrorResult>
 800a0ac:	e0d6      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a0ae:	4b6d      	ldr	r3, [pc, #436]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a0b0:	edd3 7a08 	vldr	s15, [r3, #32]
 800a0b4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a0b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c0:	d409      	bmi.n	800a0d6 <_ZN13Communication7CommandEPh+0x38a>
 800a0c2:	4b68      	ldr	r3, [pc, #416]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a0c4:	edd3 7a07 	vldr	s15, [r3, #28]
 800a0c8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a0cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d4:	d504      	bpl.n	800a0e0 <_ZN13Communication7CommandEPh+0x394>
 800a0d6:	2104      	movs	r1, #4
 800a0d8:	2000      	movs	r0, #0
 800a0da:	f004 f818 	bl	800e10e <ErrorResult>
 800a0de:	e0bd      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	3302      	adds	r3, #2
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	bf0c      	ite	eq
 800a0ea:	2301      	moveq	r3, #1
 800a0ec:	2300      	movne	r3, #0
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fac8 	bl	800a688 <_ZN13Communication14ToggleReadFlowEb>
 800a0f8:	e0b0      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a0fa:	4b5a      	ldr	r3, [pc, #360]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a0fc:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00e      	beq.n	800a122 <_ZN13Communication7CommandEPh+0x3d6>
 800a104:	4b57      	ldr	r3, [pc, #348]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a106:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d009      	beq.n	800a122 <_ZN13Communication7CommandEPh+0x3d6>
 800a10e:	4b55      	ldr	r3, [pc, #340]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a110:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a114:	2b05      	cmp	r3, #5
 800a116:	d004      	beq.n	800a122 <_ZN13Communication7CommandEPh+0x3d6>
 800a118:	2102      	movs	r1, #2
 800a11a:	2000      	movs	r0, #0
 800a11c:	f003 fff7 	bl	800e10e <ErrorResult>
 800a120:	e09c      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	3302      	adds	r3, #2
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	bf0c      	ite	eq
 800a12c:	2301      	moveq	r3, #1
 800a12e:	2300      	movne	r3, #0
 800a130:	b2db      	uxtb	r3, r3
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fae1 	bl	800a6fc <_ZN13Communication18ToggleReadFirstEmgEb>
 800a13a:	e08f      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a13c:	4b49      	ldr	r3, [pc, #292]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a13e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00e      	beq.n	800a164 <_ZN13Communication7CommandEPh+0x418>
 800a146:	4b47      	ldr	r3, [pc, #284]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a148:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d009      	beq.n	800a164 <_ZN13Communication7CommandEPh+0x418>
 800a150:	4b44      	ldr	r3, [pc, #272]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a152:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a156:	2b05      	cmp	r3, #5
 800a158:	d004      	beq.n	800a164 <_ZN13Communication7CommandEPh+0x418>
 800a15a:	2102      	movs	r1, #2
 800a15c:	2000      	movs	r0, #0
 800a15e:	f003 ffd6 	bl	800e10e <ErrorResult>
 800a162:	e07b      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	3302      	adds	r3, #2
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	bf0c      	ite	eq
 800a16e:	2301      	moveq	r3, #1
 800a170:	2300      	movne	r3, #0
 800a172:	b2db      	uxtb	r3, r3
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 faf6 	bl	800a768 <_ZN13Communication19ToggleReadSecondEmgEb>
 800a17c:	e06e      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	3302      	adds	r3, #2
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	021b      	lsls	r3, r3, #8
 800a186:	b29b      	uxth	r3, r3
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	3203      	adds	r2, #3
 800a18c:	7812      	ldrb	r2, [r2, #0]
 800a18e:	4413      	add	r3, r2
 800a190:	81fb      	strh	r3, [r7, #14]
 800a192:	89fb      	ldrh	r3, [r7, #14]
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fbf4 	bl	800a984 <_ZN13Communication8StopTestEt>
 800a19c:	e05e      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a19e:	4b31      	ldr	r3, [pc, #196]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a1a0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d004      	beq.n	800a1b2 <_ZN13Communication7CommandEPh+0x466>
 800a1a8:	2102      	movs	r1, #2
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	f003 ffaf 	bl	800e10e <ErrorResult>
 800a1b0:	e054      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a1b2:	4b2c      	ldr	r3, [pc, #176]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <_ZN13Communication7CommandEPh+0x476>
 800a1ba:	4b2a      	ldr	r3, [pc, #168]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d104      	bne.n	800a1cc <_ZN13Communication7CommandEPh+0x480>
 800a1c2:	2105      	movs	r1, #5
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	f003 ffa2 	bl	800e10e <ErrorResult>
 800a1ca:	e047      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a1cc:	4b25      	ldr	r3, [pc, #148]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a1ce:	edd3 7a08 	vldr	s15, [r3, #32]
 800a1d2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a1d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1de:	d409      	bmi.n	800a1f4 <_ZN13Communication7CommandEPh+0x4a8>
 800a1e0:	4b20      	ldr	r3, [pc, #128]	@ (800a264 <_ZN13Communication7CommandEPh+0x518>)
 800a1e2:	edd3 7a07 	vldr	s15, [r3, #28]
 800a1e6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a1ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f2:	d504      	bpl.n	800a1fe <_ZN13Communication7CommandEPh+0x4b2>
 800a1f4:	2104      	movs	r1, #4
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	f003 ff89 	bl	800e10e <ErrorResult>
 800a1fc:	e02e      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	3305      	adds	r3, #5
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	021b      	lsls	r3, r3, #8
 800a206:	b29b      	uxth	r3, r3
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	3206      	adds	r2, #6
 800a20c:	7812      	ldrb	r2, [r2, #0]
 800a20e:	4413      	add	r3, r2
 800a210:	81fb      	strh	r3, [r7, #14]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	3302      	adds	r3, #2
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	bf0c      	ite	eq
 800a21c:	2301      	moveq	r3, #1
 800a21e:	2300      	movne	r3, #0
 800a220:	b2d9      	uxtb	r1, r3
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	3303      	adds	r3, #3
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	bf0c      	ite	eq
 800a22c:	2301      	moveq	r3, #1
 800a22e:	2300      	movne	r3, #0
 800a230:	b2da      	uxtb	r2, r3
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	3304      	adds	r3, #4
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	bf0c      	ite	eq
 800a23c:	2301      	moveq	r3, #1
 800a23e:	2300      	movne	r3, #0
 800a240:	b2d8      	uxtb	r0, r3
 800a242:	89fb      	ldrh	r3, [r7, #14]
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	4603      	mov	r3, r0
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fb67 	bl	800a91c <_ZN13Communication9StartTestEbbbt>
 800a24e:	e005      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a250:	210a      	movs	r1, #10
 800a252:	2000      	movs	r0, #0
 800a254:	f003 ff5b 	bl	800e10e <ErrorResult>
 800a258:	e000      	b.n	800a25c <_ZN13Communication7CommandEPh+0x510>
 800a25a:	bf00      	nop
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	200092a0 	.word	0x200092a0

0800a268 <_ZN13Communication13ConfigurationEPh>:
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b03      	cmp	r3, #3
 800a278:	f040 810d 	bne.w	800a496 <_ZN13Communication13ConfigurationEPh+0x22e>
 800a27c:	4b88      	ldr	r3, [pc, #544]	@ (800a4a0 <_ZN13Communication13ConfigurationEPh+0x238>)
 800a27e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a282:	2b00      	cmp	r3, #0
 800a284:	d004      	beq.n	800a290 <_ZN13Communication13ConfigurationEPh+0x28>
 800a286:	2102      	movs	r1, #2
 800a288:	2000      	movs	r0, #0
 800a28a:	f003 ff40 	bl	800e10e <ErrorResult>
 800a28e:	e103      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a290:	2300      	movs	r3, #0
 800a292:	81fb      	strh	r3, [r7, #14]
 800a294:	2300      	movs	r3, #0
 800a296:	81bb      	strh	r3, [r7, #12]
 800a298:	2300      	movs	r3, #0
 800a29a:	817b      	strh	r3, [r7, #10]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	2b0a      	cmp	r3, #10
 800a2a6:	f200 80f1 	bhi.w	800a48c <_ZN13Communication13ConfigurationEPh+0x224>
 800a2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b0 <_ZN13Communication13ConfigurationEPh+0x48>)
 800a2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b0:	0800a2dd 	.word	0x0800a2dd
 800a2b4:	0800a2ed 	.word	0x0800a2ed
 800a2b8:	0800a305 	.word	0x0800a305
 800a2bc:	0800a31d 	.word	0x0800a31d
 800a2c0:	0800a335 	.word	0x0800a335
 800a2c4:	0800a34d 	.word	0x0800a34d
 800a2c8:	0800a365 	.word	0x0800a365
 800a2cc:	0800a37d 	.word	0x0800a37d
 800a2d0:	0800a395 	.word	0x0800a395
 800a2d4:	0800a407 	.word	0x0800a407
 800a2d8:	0800a479 	.word	0x0800a479
 800a2dc:	4b70      	ldr	r3, [pc, #448]	@ (800a4a0 <_ZN13Communication13ConfigurationEPh+0x238>)
 800a2de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2e0:	4a70      	ldr	r2, [pc, #448]	@ (800a4a4 <_ZN13Communication13ConfigurationEPh+0x23c>)
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	2064      	movs	r0, #100	@ 0x64
 800a2e6:	f003 fe97 	bl	800e018 <SuccessDataResult>
 800a2ea:	e0d5      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	1d1a      	adds	r2, r3, #4
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	3302      	adds	r3, #2
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	f001 fb1f 	bl	800b93c <_ZN12FlashManager18WriteSendPerSecondEh>
 800a2fe:	f003 fe7d 	bl	800dffc <SuccessResult>
 800a302:	e0c9      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	1d1a      	adds	r2, r3, #4
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	3302      	adds	r3, #2
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	4619      	mov	r1, r3
 800a310:	4610      	mov	r0, r2
 800a312:	f001 fbaf 	bl	800ba74 <_ZN12FlashManager22WriteFirstEmgPerSecondEh>
 800a316:	f003 fe71 	bl	800dffc <SuccessResult>
 800a31a:	e0bd      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	1d1a      	adds	r2, r3, #4
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	3302      	adds	r3, #2
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	4619      	mov	r1, r3
 800a328:	4610      	mov	r0, r2
 800a32a:	f001 fc3f 	bl	800bbac <_ZN12FlashManager23WriteSecondEmgPerSecondEh>
 800a32e:	f003 fe65 	bl	800dffc <SuccessResult>
 800a332:	e0b1      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	1d1a      	adds	r2, r3, #4
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	3302      	adds	r3, #2
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	4619      	mov	r1, r3
 800a340:	4610      	mov	r0, r2
 800a342:	f001 fccf 	bl	800bce4 <_ZN12FlashManager20WriteVolumePerSecondEh>
 800a346:	f003 fe59 	bl	800dffc <SuccessResult>
 800a34a:	e0a5      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	1d1a      	adds	r2, r3, #4
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	3302      	adds	r3, #2
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	4619      	mov	r1, r3
 800a358:	4610      	mov	r0, r2
 800a35a:	f001 fd5f 	bl	800be1c <_ZN12FlashManager18WriteFlowPerSecondEh>
 800a35e:	f003 fe4d 	bl	800dffc <SuccessResult>
 800a362:	e099      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	1d1a      	adds	r2, r3, #4
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	3302      	adds	r3, #2
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	4619      	mov	r1, r3
 800a370:	4610      	mov	r0, r2
 800a372:	f001 fdef 	bl	800bf54 <_ZN12FlashManager19WritePumpMaxRunTimeEh>
 800a376:	f003 fe41 	bl	800dffc <SuccessResult>
 800a37a:	e08d      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	1d1a      	adds	r2, r3, #4
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	3302      	adds	r3, #2
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	4619      	mov	r1, r3
 800a388:	4610      	mov	r0, r2
 800a38a:	f001 fe7f 	bl	800c08c <_ZN12FlashManager20WriteValveMaxRunTimeEh>
 800a38e:	f003 fe35 	bl	800dffc <SuccessResult>
 800a392:	e081      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	3302      	adds	r3, #2
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	021b      	lsls	r3, r3, #8
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	3203      	adds	r2, #3
 800a3a2:	7812      	ldrb	r2, [r2, #0]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	81fb      	strh	r3, [r7, #14]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	021b      	lsls	r3, r3, #8
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	3205      	adds	r2, #5
 800a3b6:	7812      	ldrb	r2, [r2, #0]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	81bb      	strh	r3, [r7, #12]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	3306      	adds	r3, #6
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	3207      	adds	r2, #7
 800a3ca:	7812      	ldrb	r2, [r2, #0]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	817b      	strh	r3, [r7, #10]
 800a3d0:	89fb      	ldrh	r3, [r7, #14]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d104      	bne.n	800a3e0 <_ZN13Communication13ConfigurationEPh+0x178>
 800a3d6:	2106      	movs	r1, #6
 800a3d8:	2000      	movs	r0, #0
 800a3da:	f003 fe98 	bl	800e10e <ErrorResult>
 800a3de:	e05b      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a3e0:	897a      	ldrh	r2, [r7, #10]
 800a3e2:	89bb      	ldrh	r3, [r7, #12]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d304      	bcc.n	800a3f2 <_ZN13Communication13ConfigurationEPh+0x18a>
 800a3e8:	2107      	movs	r1, #7
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	f003 fe8f 	bl	800e10e <ErrorResult>
 800a3f0:	e052      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	1d18      	adds	r0, r3, #4
 800a3f6:	897b      	ldrh	r3, [r7, #10]
 800a3f8:	89ba      	ldrh	r2, [r7, #12]
 800a3fa:	89f9      	ldrh	r1, [r7, #14]
 800a3fc:	f002 f93c 	bl	800c678 <_ZN12FlashManager17WriteFirstEmgDataEttt>
 800a400:	f003 fdfc 	bl	800dffc <SuccessResult>
 800a404:	e048      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	3302      	adds	r3, #2
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	b29b      	uxth	r3, r3
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	3203      	adds	r2, #3
 800a414:	7812      	ldrb	r2, [r2, #0]
 800a416:	4413      	add	r3, r2
 800a418:	81fb      	strh	r3, [r7, #14]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	3304      	adds	r3, #4
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	021b      	lsls	r3, r3, #8
 800a422:	b29b      	uxth	r3, r3
 800a424:	683a      	ldr	r2, [r7, #0]
 800a426:	3205      	adds	r2, #5
 800a428:	7812      	ldrb	r2, [r2, #0]
 800a42a:	4413      	add	r3, r2
 800a42c:	81bb      	strh	r3, [r7, #12]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	3306      	adds	r3, #6
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	021b      	lsls	r3, r3, #8
 800a436:	b29b      	uxth	r3, r3
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	3207      	adds	r2, #7
 800a43c:	7812      	ldrb	r2, [r2, #0]
 800a43e:	4413      	add	r3, r2
 800a440:	817b      	strh	r3, [r7, #10]
 800a442:	89fb      	ldrh	r3, [r7, #14]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d104      	bne.n	800a452 <_ZN13Communication13ConfigurationEPh+0x1ea>
 800a448:	2106      	movs	r1, #6
 800a44a:	2000      	movs	r0, #0
 800a44c:	f003 fe5f 	bl	800e10e <ErrorResult>
 800a450:	e022      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a452:	897a      	ldrh	r2, [r7, #10]
 800a454:	89bb      	ldrh	r3, [r7, #12]
 800a456:	429a      	cmp	r2, r3
 800a458:	d304      	bcc.n	800a464 <_ZN13Communication13ConfigurationEPh+0x1fc>
 800a45a:	2107      	movs	r1, #7
 800a45c:	2000      	movs	r0, #0
 800a45e:	f003 fe56 	bl	800e10e <ErrorResult>
 800a462:	e019      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	1d18      	adds	r0, r3, #4
 800a468:	897b      	ldrh	r3, [r7, #10]
 800a46a:	89ba      	ldrh	r2, [r7, #12]
 800a46c:	89f9      	ldrh	r1, [r7, #14]
 800a46e:	f002 fabe 	bl	800c9ee <_ZN12FlashManager18WriteSecondEmgDataEttt>
 800a472:	f003 fdc3 	bl	800dffc <SuccessResult>
 800a476:	e00f      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	3304      	adds	r3, #4
 800a47c:	4618      	mov	r0, r3
 800a47e:	f001 f941 	bl	800b704 <_ZN12FlashManager6UpdateEv>
 800a482:	f003 fcc5 	bl	800de10 <FlashInitialize>
 800a486:	f003 fdb9 	bl	800dffc <SuccessResult>
 800a48a:	e005      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a48c:	210b      	movs	r1, #11
 800a48e:	2000      	movs	r0, #0
 800a490:	f003 fe3d 	bl	800e10e <ErrorResult>
 800a494:	e000      	b.n	800a498 <_ZN13Communication13ConfigurationEPh+0x230>
 800a496:	bf00      	nop
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	200092a0 	.word	0x200092a0
 800a4a4:	200092d5 	.word	0x200092d5

0800a4a8 <_ZN13Communication14ToggleFirstEmgEb>:
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	70fb      	strb	r3, [r7, #3]
 800a4b4:	4a0f      	ldr	r2, [pc, #60]	@ (800a4f4 <_ZN13Communication14ToggleFirstEmgEb+0x4c>)
 800a4b6:	78fb      	ldrb	r3, [r7, #3]
 800a4b8:	7013      	strb	r3, [r2, #0]
 800a4ba:	78fb      	ldrb	r3, [r7, #3]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00c      	beq.n	800a4da <_ZN13Communication14ToggleFirstEmgEb+0x32>
 800a4c0:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f8 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d111      	bne.n	800a4ec <_ZN13Communication14ToggleFirstEmgEb+0x44>
 800a4c8:	4a0c      	ldr	r2, [pc, #48]	@ (800a4fc <_ZN13Communication14ToggleFirstEmgEb+0x54>)
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	480c      	ldr	r0, [pc, #48]	@ (800a500 <_ZN13Communication14ToggleFirstEmgEb+0x58>)
 800a4ce:	f7fb ff2b 	bl	8006328 <osThreadNew>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	4a08      	ldr	r2, [pc, #32]	@ (800a4f8 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800a4d6:	6093      	str	r3, [r2, #8]
 800a4d8:	e009      	b.n	800a4ee <_ZN13Communication14ToggleFirstEmgEb+0x46>
 800a4da:	4b07      	ldr	r3, [pc, #28]	@ (800a4f8 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fb ffb4 	bl	800644c <osThreadTerminate>
 800a4e4:	4b04      	ldr	r3, [pc, #16]	@ (800a4f8 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	609a      	str	r2, [r3, #8]
 800a4ea:	e000      	b.n	800a4ee <_ZN13Communication14ToggleFirstEmgEb+0x46>
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	20009298 	.word	0x20009298
 800a4f8:	200090b0 	.word	0x200090b0
 800a4fc:	200090c0 	.word	0x200090c0
 800a500:	0800eb19 	.word	0x0800eb19

0800a504 <_ZN13Communication15ToggleSecondEmgEb>:
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	70fb      	strb	r3, [r7, #3]
 800a510:	4a0f      	ldr	r2, [pc, #60]	@ (800a550 <_ZN13Communication15ToggleSecondEmgEb+0x4c>)
 800a512:	78fb      	ldrb	r3, [r7, #3]
 800a514:	7053      	strb	r3, [r2, #1]
 800a516:	78fb      	ldrb	r3, [r7, #3]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00c      	beq.n	800a536 <_ZN13Communication15ToggleSecondEmgEb+0x32>
 800a51c:	4b0d      	ldr	r3, [pc, #52]	@ (800a554 <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d111      	bne.n	800a548 <_ZN13Communication15ToggleSecondEmgEb+0x44>
 800a524:	4a0c      	ldr	r2, [pc, #48]	@ (800a558 <_ZN13Communication15ToggleSecondEmgEb+0x54>)
 800a526:	2100      	movs	r1, #0
 800a528:	480c      	ldr	r0, [pc, #48]	@ (800a55c <_ZN13Communication15ToggleSecondEmgEb+0x58>)
 800a52a:	f7fb fefd 	bl	8006328 <osThreadNew>
 800a52e:	4603      	mov	r3, r0
 800a530:	4a08      	ldr	r2, [pc, #32]	@ (800a554 <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800a532:	60d3      	str	r3, [r2, #12]
 800a534:	e009      	b.n	800a54a <_ZN13Communication15ToggleSecondEmgEb+0x46>
 800a536:	4b07      	ldr	r3, [pc, #28]	@ (800a554 <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fb ff86 	bl	800644c <osThreadTerminate>
 800a540:	4b04      	ldr	r3, [pc, #16]	@ (800a554 <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800a542:	2200      	movs	r2, #0
 800a544:	60da      	str	r2, [r3, #12]
 800a546:	e000      	b.n	800a54a <_ZN13Communication15ToggleSecondEmgEb+0x46>
 800a548:	bf00      	nop
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	20009298 	.word	0x20009298
 800a554:	200090b0 	.word	0x200090b0
 800a558:	200090e4 	.word	0x200090e4
 800a55c:	0800ec81 	.word	0x0800ec81

0800a560 <_ZN13Communication14ToggleLoadCellEb>:
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	460b      	mov	r3, r1
 800a56a:	70fb      	strb	r3, [r7, #3]
 800a56c:	4a22      	ldr	r2, [pc, #136]	@ (800a5f8 <_ZN13Communication14ToggleLoadCellEb+0x98>)
 800a56e:	78fb      	ldrb	r3, [r7, #3]
 800a570:	7093      	strb	r3, [r2, #2]
 800a572:	4a21      	ldr	r2, [pc, #132]	@ (800a5f8 <_ZN13Communication14ToggleLoadCellEb+0x98>)
 800a574:	78fb      	ldrb	r3, [r7, #3]
 800a576:	70d3      	strb	r3, [r2, #3]
 800a578:	4b20      	ldr	r3, [pc, #128]	@ (800a5fc <_ZN13Communication14ToggleLoadCellEb+0x9c>)
 800a57a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a57e:	2b04      	cmp	r3, #4
 800a580:	d104      	bne.n	800a58c <_ZN13Communication14ToggleLoadCellEb+0x2c>
 800a582:	2102      	movs	r1, #2
 800a584:	2000      	movs	r0, #0
 800a586:	f003 fdc2 	bl	800e10e <ErrorResult>
 800a58a:	e031      	b.n	800a5f0 <_ZN13Communication14ToggleLoadCellEb+0x90>
 800a58c:	78fb      	ldrb	r3, [r7, #3]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d01a      	beq.n	800a5c8 <_ZN13Communication14ToggleLoadCellEb+0x68>
 800a592:	4b1b      	ldr	r3, [pc, #108]	@ (800a600 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a596:	2b00      	cmp	r3, #0
 800a598:	d127      	bne.n	800a5ea <_ZN13Communication14ToggleLoadCellEb+0x8a>
 800a59a:	4b19      	ldr	r3, [pc, #100]	@ (800a600 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a59c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d125      	bne.n	800a5ee <_ZN13Communication14ToggleLoadCellEb+0x8e>
 800a5a2:	f005 f9df 	bl	800f964 <ClearLoadcellParams>
 800a5a6:	4a17      	ldr	r2, [pc, #92]	@ (800a604 <_ZN13Communication14ToggleLoadCellEb+0xa4>)
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	4817      	ldr	r0, [pc, #92]	@ (800a608 <_ZN13Communication14ToggleLoadCellEb+0xa8>)
 800a5ac:	f7fb febc 	bl	8006328 <osThreadNew>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	4a13      	ldr	r2, [pc, #76]	@ (800a600 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a5b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5b6:	4a15      	ldr	r2, [pc, #84]	@ (800a60c <_ZN13Communication14ToggleLoadCellEb+0xac>)
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	4815      	ldr	r0, [pc, #84]	@ (800a610 <_ZN13Communication14ToggleLoadCellEb+0xb0>)
 800a5bc:	f7fb feb4 	bl	8006328 <osThreadNew>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	4a0f      	ldr	r2, [pc, #60]	@ (800a600 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a5c4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800a5c6:	e013      	b.n	800a5f0 <_ZN13Communication14ToggleLoadCellEb+0x90>
 800a5c8:	4b0d      	ldr	r3, [pc, #52]	@ (800a600 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a5ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fb ff3d 	bl	800644c <osThreadTerminate>
 800a5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a600 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a5d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fb ff38 	bl	800644c <osThreadTerminate>
 800a5dc:	4b08      	ldr	r3, [pc, #32]	@ (800a600 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	659a      	str	r2, [r3, #88]	@ 0x58
 800a5e2:	4b07      	ldr	r3, [pc, #28]	@ (800a600 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a5e8:	e002      	b.n	800a5f0 <_ZN13Communication14ToggleLoadCellEb+0x90>
 800a5ea:	bf00      	nop
 800a5ec:	e000      	b.n	800a5f0 <_ZN13Communication14ToggleLoadCellEb+0x90>
 800a5ee:	bf00      	nop
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20009298 	.word	0x20009298
 800a5fc:	200092a0 	.word	0x200092a0
 800a600:	200090b0 	.word	0x200090b0
 800a604:	2000913c 	.word	0x2000913c
 800a608:	0800ef61 	.word	0x0800ef61
 800a60c:	20009160 	.word	0x20009160
 800a610:	0800ede9 	.word	0x0800ede9

0800a614 <_ZN13Communication16ToggleReadVolumeEb>:
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	460b      	mov	r3, r1
 800a61e:	70fb      	strb	r3, [r7, #3]
 800a620:	4b15      	ldr	r3, [pc, #84]	@ (800a678 <_ZN13Communication16ToggleReadVolumeEb+0x64>)
 800a622:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a626:	2b04      	cmp	r3, #4
 800a628:	d104      	bne.n	800a634 <_ZN13Communication16ToggleReadVolumeEb+0x20>
 800a62a:	2102      	movs	r1, #2
 800a62c:	2000      	movs	r0, #0
 800a62e:	f003 fd6e 	bl	800e10e <ErrorResult>
 800a632:	e01d      	b.n	800a670 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
 800a634:	78fb      	ldrb	r3, [r7, #3]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00e      	beq.n	800a658 <_ZN13Communication16ToggleReadVolumeEb+0x44>
 800a63a:	4b10      	ldr	r3, [pc, #64]	@ (800a67c <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800a63c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d115      	bne.n	800a66e <_ZN13Communication16ToggleReadVolumeEb+0x5a>
 800a642:	f005 f98f 	bl	800f964 <ClearLoadcellParams>
 800a646:	4a0e      	ldr	r2, [pc, #56]	@ (800a680 <_ZN13Communication16ToggleReadVolumeEb+0x6c>)
 800a648:	2100      	movs	r1, #0
 800a64a:	480e      	ldr	r0, [pc, #56]	@ (800a684 <_ZN13Communication16ToggleReadVolumeEb+0x70>)
 800a64c:	f7fb fe6c 	bl	8006328 <osThreadNew>
 800a650:	4603      	mov	r3, r0
 800a652:	4a0a      	ldr	r2, [pc, #40]	@ (800a67c <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800a654:	6613      	str	r3, [r2, #96]	@ 0x60
 800a656:	e00b      	b.n	800a670 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
 800a658:	4b08      	ldr	r3, [pc, #32]	@ (800a67c <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800a65a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fb fef5 	bl	800644c <osThreadTerminate>
 800a662:	4b06      	ldr	r3, [pc, #24]	@ (800a67c <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800a664:	2200      	movs	r2, #0
 800a666:	661a      	str	r2, [r3, #96]	@ 0x60
 800a668:	f005 f97c 	bl	800f964 <ClearLoadcellParams>
 800a66c:	e000      	b.n	800a670 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
 800a66e:	bf00      	nop
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	200092a0 	.word	0x200092a0
 800a67c:	200090b0 	.word	0x200090b0
 800a680:	2000913c 	.word	0x2000913c
 800a684:	0800efe5 	.word	0x0800efe5

0800a688 <_ZN13Communication14ToggleReadFlowEb>:
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
 800a694:	4b15      	ldr	r3, [pc, #84]	@ (800a6ec <_ZN13Communication14ToggleReadFlowEb+0x64>)
 800a696:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d104      	bne.n	800a6a8 <_ZN13Communication14ToggleReadFlowEb+0x20>
 800a69e:	2102      	movs	r1, #2
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	f003 fd34 	bl	800e10e <ErrorResult>
 800a6a6:	e01d      	b.n	800a6e4 <_ZN13Communication14ToggleReadFlowEb+0x5c>
 800a6a8:	78fb      	ldrb	r3, [r7, #3]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00e      	beq.n	800a6cc <_ZN13Communication14ToggleReadFlowEb+0x44>
 800a6ae:	4b10      	ldr	r3, [pc, #64]	@ (800a6f0 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800a6b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d115      	bne.n	800a6e2 <_ZN13Communication14ToggleReadFlowEb+0x5a>
 800a6b6:	f005 f955 	bl	800f964 <ClearLoadcellParams>
 800a6ba:	4a0e      	ldr	r2, [pc, #56]	@ (800a6f4 <_ZN13Communication14ToggleReadFlowEb+0x6c>)
 800a6bc:	2100      	movs	r1, #0
 800a6be:	480e      	ldr	r0, [pc, #56]	@ (800a6f8 <_ZN13Communication14ToggleReadFlowEb+0x70>)
 800a6c0:	f7fb fe32 	bl	8006328 <osThreadNew>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	4a0a      	ldr	r2, [pc, #40]	@ (800a6f0 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800a6c8:	6653      	str	r3, [r2, #100]	@ 0x64
 800a6ca:	e00b      	b.n	800a6e4 <_ZN13Communication14ToggleReadFlowEb+0x5c>
 800a6cc:	4b08      	ldr	r3, [pc, #32]	@ (800a6f0 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800a6ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fb febb 	bl	800644c <osThreadTerminate>
 800a6d6:	4b06      	ldr	r3, [pc, #24]	@ (800a6f0 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	665a      	str	r2, [r3, #100]	@ 0x64
 800a6dc:	f005 f942 	bl	800f964 <ClearLoadcellParams>
 800a6e0:	e000      	b.n	800a6e4 <_ZN13Communication14ToggleReadFlowEb+0x5c>
 800a6e2:	bf00      	nop
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	200092a0 	.word	0x200092a0
 800a6f0:	200090b0 	.word	0x200090b0
 800a6f4:	20009160 	.word	0x20009160
 800a6f8:	0800ee65 	.word	0x0800ee65

0800a6fc <_ZN13Communication18ToggleReadFirstEmgEb>:
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	70fb      	strb	r3, [r7, #3]
 800a708:	4b13      	ldr	r3, [pc, #76]	@ (800a758 <_ZN13Communication18ToggleReadFirstEmgEb+0x5c>)
 800a70a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d104      	bne.n	800a71c <_ZN13Communication18ToggleReadFirstEmgEb+0x20>
 800a712:	2102      	movs	r1, #2
 800a714:	2000      	movs	r0, #0
 800a716:	f003 fcfa 	bl	800e10e <ErrorResult>
 800a71a:	e019      	b.n	800a750 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00c      	beq.n	800a73c <_ZN13Communication18ToggleReadFirstEmgEb+0x40>
 800a722:	4b0e      	ldr	r3, [pc, #56]	@ (800a75c <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800a724:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a726:	2b00      	cmp	r3, #0
 800a728:	d111      	bne.n	800a74e <_ZN13Communication18ToggleReadFirstEmgEb+0x52>
 800a72a:	4a0d      	ldr	r2, [pc, #52]	@ (800a760 <_ZN13Communication18ToggleReadFirstEmgEb+0x64>)
 800a72c:	2100      	movs	r1, #0
 800a72e:	480d      	ldr	r0, [pc, #52]	@ (800a764 <_ZN13Communication18ToggleReadFirstEmgEb+0x68>)
 800a730:	f7fb fdfa 	bl	8006328 <osThreadNew>
 800a734:	4603      	mov	r3, r0
 800a736:	4a09      	ldr	r2, [pc, #36]	@ (800a75c <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800a738:	6693      	str	r3, [r2, #104]	@ 0x68
 800a73a:	e009      	b.n	800a750 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
 800a73c:	4b07      	ldr	r3, [pc, #28]	@ (800a75c <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800a73e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a740:	4618      	mov	r0, r3
 800a742:	f7fb fe83 	bl	800644c <osThreadTerminate>
 800a746:	4b05      	ldr	r3, [pc, #20]	@ (800a75c <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800a748:	2200      	movs	r2, #0
 800a74a:	669a      	str	r2, [r3, #104]	@ 0x68
 800a74c:	e000      	b.n	800a750 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	200092a0 	.word	0x200092a0
 800a75c:	200090b0 	.word	0x200090b0
 800a760:	20009160 	.word	0x20009160
 800a764:	0800eb95 	.word	0x0800eb95

0800a768 <_ZN13Communication19ToggleReadSecondEmgEb>:
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	460b      	mov	r3, r1
 800a772:	70fb      	strb	r3, [r7, #3]
 800a774:	4b13      	ldr	r3, [pc, #76]	@ (800a7c4 <_ZN13Communication19ToggleReadSecondEmgEb+0x5c>)
 800a776:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a77a:	2b04      	cmp	r3, #4
 800a77c:	d104      	bne.n	800a788 <_ZN13Communication19ToggleReadSecondEmgEb+0x20>
 800a77e:	2102      	movs	r1, #2
 800a780:	2000      	movs	r0, #0
 800a782:	f003 fcc4 	bl	800e10e <ErrorResult>
 800a786:	e019      	b.n	800a7bc <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
 800a788:	78fb      	ldrb	r3, [r7, #3]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00c      	beq.n	800a7a8 <_ZN13Communication19ToggleReadSecondEmgEb+0x40>
 800a78e:	4b0e      	ldr	r3, [pc, #56]	@ (800a7c8 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800a790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a792:	2b00      	cmp	r3, #0
 800a794:	d111      	bne.n	800a7ba <_ZN13Communication19ToggleReadSecondEmgEb+0x52>
 800a796:	4a0d      	ldr	r2, [pc, #52]	@ (800a7cc <_ZN13Communication19ToggleReadSecondEmgEb+0x64>)
 800a798:	2100      	movs	r1, #0
 800a79a:	480d      	ldr	r0, [pc, #52]	@ (800a7d0 <_ZN13Communication19ToggleReadSecondEmgEb+0x68>)
 800a79c:	f7fb fdc4 	bl	8006328 <osThreadNew>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	4a09      	ldr	r2, [pc, #36]	@ (800a7c8 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800a7a4:	66d3      	str	r3, [r2, #108]	@ 0x6c
 800a7a6:	e009      	b.n	800a7bc <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
 800a7a8:	4b07      	ldr	r3, [pc, #28]	@ (800a7c8 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800a7aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fb fe4d 	bl	800644c <osThreadTerminate>
 800a7b2:	4b05      	ldr	r3, [pc, #20]	@ (800a7c8 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a7b8:	e000      	b.n	800a7bc <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
 800a7ba:	bf00      	nop
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	200092a0 	.word	0x200092a0
 800a7c8:	200090b0 	.word	0x200090b0
 800a7cc:	20009160 	.word	0x20009160
 800a7d0:	0800ecfd 	.word	0x0800ecfd

0800a7d4 <_ZN13Communication10TogglePumpEb>:
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	70fb      	strb	r3, [r7, #3]
 800a7e0:	4a14      	ldr	r2, [pc, #80]	@ (800a834 <_ZN13Communication10TogglePumpEb+0x60>)
 800a7e2:	78fb      	ldrb	r3, [r7, #3]
 800a7e4:	7113      	strb	r3, [r2, #4]
 800a7e6:	78fb      	ldrb	r3, [r7, #3]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d011      	beq.n	800a810 <_ZN13Communication10TogglePumpEb+0x3c>
 800a7ec:	4b12      	ldr	r3, [pc, #72]	@ (800a838 <_ZN13Communication10TogglePumpEb+0x64>)
 800a7ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d11b      	bne.n	800a82c <_ZN13Communication10TogglePumpEb+0x58>
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	4810      	ldr	r0, [pc, #64]	@ (800a83c <_ZN13Communication10TogglePumpEb+0x68>)
 800a7fa:	f7f8 fc07 	bl	800300c <HAL_GPIO_WritePin>
 800a7fe:	4a10      	ldr	r2, [pc, #64]	@ (800a840 <_ZN13Communication10TogglePumpEb+0x6c>)
 800a800:	2100      	movs	r1, #0
 800a802:	4810      	ldr	r0, [pc, #64]	@ (800a844 <_ZN13Communication10TogglePumpEb+0x70>)
 800a804:	f7fb fd90 	bl	8006328 <osThreadNew>
 800a808:	4603      	mov	r3, r0
 800a80a:	4a0b      	ldr	r2, [pc, #44]	@ (800a838 <_ZN13Communication10TogglePumpEb+0x64>)
 800a80c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a80e:	e00e      	b.n	800a82e <_ZN13Communication10TogglePumpEb+0x5a>
 800a810:	2200      	movs	r2, #0
 800a812:	2101      	movs	r1, #1
 800a814:	4809      	ldr	r0, [pc, #36]	@ (800a83c <_ZN13Communication10TogglePumpEb+0x68>)
 800a816:	f7f8 fbf9 	bl	800300c <HAL_GPIO_WritePin>
 800a81a:	4b07      	ldr	r3, [pc, #28]	@ (800a838 <_ZN13Communication10TogglePumpEb+0x64>)
 800a81c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fb fe14 	bl	800644c <osThreadTerminate>
 800a824:	4b04      	ldr	r3, [pc, #16]	@ (800a838 <_ZN13Communication10TogglePumpEb+0x64>)
 800a826:	2200      	movs	r2, #0
 800a828:	671a      	str	r2, [r3, #112]	@ 0x70
 800a82a:	e000      	b.n	800a82e <_ZN13Communication10TogglePumpEb+0x5a>
 800a82c:	bf00      	nop
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	20009298 	.word	0x20009298
 800a838:	200090b0 	.word	0x200090b0
 800a83c:	40020400 	.word	0x40020400
 800a840:	20009184 	.word	0x20009184
 800a844:	0800f0e1 	.word	0x0800f0e1

0800a848 <_ZN13Communication11ToggleValveEb>:
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	70fb      	strb	r3, [r7, #3]
 800a854:	4a14      	ldr	r2, [pc, #80]	@ (800a8a8 <_ZN13Communication11ToggleValveEb+0x60>)
 800a856:	78fb      	ldrb	r3, [r7, #3]
 800a858:	7153      	strb	r3, [r2, #5]
 800a85a:	78fb      	ldrb	r3, [r7, #3]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d011      	beq.n	800a884 <_ZN13Communication11ToggleValveEb+0x3c>
 800a860:	4b12      	ldr	r3, [pc, #72]	@ (800a8ac <_ZN13Communication11ToggleValveEb+0x64>)
 800a862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a864:	2b00      	cmp	r3, #0
 800a866:	d11b      	bne.n	800a8a0 <_ZN13Communication11ToggleValveEb+0x58>
 800a868:	2201      	movs	r2, #1
 800a86a:	2102      	movs	r1, #2
 800a86c:	4810      	ldr	r0, [pc, #64]	@ (800a8b0 <_ZN13Communication11ToggleValveEb+0x68>)
 800a86e:	f7f8 fbcd 	bl	800300c <HAL_GPIO_WritePin>
 800a872:	4a10      	ldr	r2, [pc, #64]	@ (800a8b4 <_ZN13Communication11ToggleValveEb+0x6c>)
 800a874:	2100      	movs	r1, #0
 800a876:	4810      	ldr	r0, [pc, #64]	@ (800a8b8 <_ZN13Communication11ToggleValveEb+0x70>)
 800a878:	f7fb fd56 	bl	8006328 <osThreadNew>
 800a87c:	4603      	mov	r3, r0
 800a87e:	4a0b      	ldr	r2, [pc, #44]	@ (800a8ac <_ZN13Communication11ToggleValveEb+0x64>)
 800a880:	6753      	str	r3, [r2, #116]	@ 0x74
 800a882:	e00e      	b.n	800a8a2 <_ZN13Communication11ToggleValveEb+0x5a>
 800a884:	2200      	movs	r2, #0
 800a886:	2102      	movs	r1, #2
 800a888:	4809      	ldr	r0, [pc, #36]	@ (800a8b0 <_ZN13Communication11ToggleValveEb+0x68>)
 800a88a:	f7f8 fbbf 	bl	800300c <HAL_GPIO_WritePin>
 800a88e:	4b07      	ldr	r3, [pc, #28]	@ (800a8ac <_ZN13Communication11ToggleValveEb+0x64>)
 800a890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a892:	4618      	mov	r0, r3
 800a894:	f7fb fdda 	bl	800644c <osThreadTerminate>
 800a898:	4b04      	ldr	r3, [pc, #16]	@ (800a8ac <_ZN13Communication11ToggleValveEb+0x64>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a89e:	e000      	b.n	800a8a2 <_ZN13Communication11ToggleValveEb+0x5a>
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	20009298 	.word	0x20009298
 800a8ac:	200090b0 	.word	0x200090b0
 800a8b0:	40020400 	.word	0x40020400
 800a8b4:	200091a8 	.word	0x200091a8
 800a8b8:	0800f115 	.word	0x0800f115

0800a8bc <_ZN13Communication16ToggleDataStreamEb>:
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	70fb      	strb	r3, [r7, #3]
 800a8c8:	4b12      	ldr	r3, [pc, #72]	@ (800a914 <_ZN13Communication16ToggleDataStreamEb+0x58>)
 800a8ca:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d009      	beq.n	800a8e6 <_ZN13Communication16ToggleDataStreamEb+0x2a>
 800a8d2:	4b10      	ldr	r3, [pc, #64]	@ (800a914 <_ZN13Communication16ToggleDataStreamEb+0x58>)
 800a8d4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d004      	beq.n	800a8e6 <_ZN13Communication16ToggleDataStreamEb+0x2a>
 800a8dc:	2102      	movs	r1, #2
 800a8de:	2000      	movs	r0, #0
 800a8e0:	f003 fc15 	bl	800e10e <ErrorResult>
 800a8e4:	e013      	b.n	800a90e <_ZN13Communication16ToggleDataStreamEb+0x52>
 800a8e6:	4a0b      	ldr	r2, [pc, #44]	@ (800a914 <_ZN13Communication16ToggleDataStreamEb+0x58>)
 800a8e8:	78fb      	ldrb	r3, [r7, #3]
 800a8ea:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 800a8ee:	78fb      	ldrb	r3, [r7, #3]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d008      	beq.n	800a906 <_ZN13Communication16ToggleDataStreamEb+0x4a>
 800a8f4:	4b08      	ldr	r3, [pc, #32]	@ (800a918 <_ZN13Communication16ToggleDataStreamEb+0x5c>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a06      	ldr	r2, [pc, #24]	@ (800a914 <_ZN13Communication16ToggleDataStreamEb+0x58>)
 800a8fa:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8fc:	4b05      	ldr	r3, [pc, #20]	@ (800a914 <_ZN13Communication16ToggleDataStreamEb+0x58>)
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800a904:	e003      	b.n	800a90e <_ZN13Communication16ToggleDataStreamEb+0x52>
 800a906:	4b03      	ldr	r3, [pc, #12]	@ (800a914 <_ZN13Communication16ToggleDataStreamEb+0x58>)
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	200092a0 	.word	0x200092a0
 800a918:	200000cc 	.word	0x200000cc

0800a91c <_ZN13Communication9StartTestEbbbt>:
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	4608      	mov	r0, r1
 800a926:	4611      	mov	r1, r2
 800a928:	461a      	mov	r2, r3
 800a92a:	4603      	mov	r3, r0
 800a92c:	70fb      	strb	r3, [r7, #3]
 800a92e:	460b      	mov	r3, r1
 800a930:	70bb      	strb	r3, [r7, #2]
 800a932:	4613      	mov	r3, r2
 800a934:	707b      	strb	r3, [r7, #1]
 800a936:	4a12      	ldr	r2, [pc, #72]	@ (800a980 <_ZN13Communication9StartTestEbbbt+0x64>)
 800a938:	8a3b      	ldrh	r3, [r7, #16]
 800a93a:	8593      	strh	r3, [r2, #44]	@ 0x2c
 800a93c:	2000      	movs	r0, #0
 800a93e:	f004 fe79 	bl	800f634 <StartCleanTask>
 800a942:	78fb      	ldrb	r3, [r7, #3]
 800a944:	4619      	mov	r1, r3
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f7ff fdae 	bl	800a4a8 <_ZN13Communication14ToggleFirstEmgEb>
 800a94c:	78bb      	ldrb	r3, [r7, #2]
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7ff fdd7 	bl	800a504 <_ZN13Communication15ToggleSecondEmgEb>
 800a956:	787b      	ldrb	r3, [r7, #1]
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7ff fe00 	bl	800a560 <_ZN13Communication14ToggleLoadCellEb>
 800a960:	2101      	movs	r1, #1
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff ffaa 	bl	800a8bc <_ZN13Communication16ToggleDataStreamEb>
 800a968:	4b05      	ldr	r3, [pc, #20]	@ (800a980 <_ZN13Communication9StartTestEbbbt+0x64>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a96e:	4b04      	ldr	r3, [pc, #16]	@ (800a980 <_ZN13Communication9StartTestEbbbt+0x64>)
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800a976:	bf00      	nop
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	200092a0 	.word	0x200092a0

0800a984 <_ZN13Communication8StopTestEt>:
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	807b      	strh	r3, [r7, #2]
 800a990:	4a11      	ldr	r2, [pc, #68]	@ (800a9d8 <_ZN13Communication8StopTestEt+0x54>)
 800a992:	887b      	ldrh	r3, [r7, #2]
 800a994:	8593      	strh	r3, [r2, #44]	@ 0x2c
 800a996:	2100      	movs	r1, #0
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7ff ff8f 	bl	800a8bc <_ZN13Communication16ToggleDataStreamEb>
 800a99e:	2100      	movs	r1, #0
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff fd81 	bl	800a4a8 <_ZN13Communication14ToggleFirstEmgEb>
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f7ff fdab 	bl	800a504 <_ZN13Communication15ToggleSecondEmgEb>
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	f004 fe40 	bl	800f634 <StartCleanTask>
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff fdd2 	bl	800a560 <_ZN13Communication14ToggleLoadCellEb>
 800a9bc:	4b06      	ldr	r3, [pc, #24]	@ (800a9d8 <_ZN13Communication8StopTestEt+0x54>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a9c2:	4b05      	ldr	r3, [pc, #20]	@ (800a9d8 <_ZN13Communication8StopTestEt+0x54>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800a9ca:	f7f7 fa98 	bl	8001efe <HAL_NVIC_SystemReset>
 800a9ce:	bf00      	nop
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	200092a0 	.word	0x200092a0

0800a9dc <_ZN13Communication10StartCleanEt>:
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	807b      	strh	r3, [r7, #2]
 800a9e8:	4b11      	ldr	r3, [pc, #68]	@ (800aa30 <_ZN13Communication10StartCleanEt+0x54>)
 800a9ea:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d004      	beq.n	800a9fc <_ZN13Communication10StartCleanEt+0x20>
 800a9f2:	2102      	movs	r1, #2
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	f003 fb8a 	bl	800e10e <ErrorResult>
 800a9fa:	e015      	b.n	800aa28 <_ZN13Communication10StartCleanEt+0x4c>
 800a9fc:	4b0c      	ldr	r3, [pc, #48]	@ (800aa30 <_ZN13Communication10StartCleanEt+0x54>)
 800a9fe:	2203      	movs	r2, #3
 800aa00:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800aa04:	4b0b      	ldr	r3, [pc, #44]	@ (800aa34 <_ZN13Communication10StartCleanEt+0x58>)
 800aa06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10c      	bne.n	800aa28 <_ZN13Communication10StartCleanEt+0x4c>
 800aa0e:	4a08      	ldr	r2, [pc, #32]	@ (800aa30 <_ZN13Communication10StartCleanEt+0x54>)
 800aa10:	887b      	ldrh	r3, [r7, #2]
 800aa12:	8593      	strh	r3, [r2, #44]	@ 0x2c
 800aa14:	4a08      	ldr	r2, [pc, #32]	@ (800aa38 <_ZN13Communication10StartCleanEt+0x5c>)
 800aa16:	2100      	movs	r1, #0
 800aa18:	4808      	ldr	r0, [pc, #32]	@ (800aa3c <_ZN13Communication10StartCleanEt+0x60>)
 800aa1a:	f7fb fc85 	bl	8006328 <osThreadNew>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	4a04      	ldr	r2, [pc, #16]	@ (800aa34 <_ZN13Communication10StartCleanEt+0x58>)
 800aa22:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 800aa26:	bf00      	nop
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	200092a0 	.word	0x200092a0
 800aa34:	200090b0 	.word	0x200090b0
 800aa38:	20009238 	.word	0x20009238
 800aa3c:	0800f635 	.word	0x0800f635

0800aa40 <_ZN13Communication14ToggleSafeModeEb>:
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
 800aa4c:	4a1d      	ldr	r2, [pc, #116]	@ (800aac4 <_ZN13Communication14ToggleSafeModeEb+0x84>)
 800aa4e:	78fb      	ldrb	r3, [r7, #3]
 800aa50:	7193      	strb	r3, [r2, #6]
 800aa52:	4b1d      	ldr	r3, [pc, #116]	@ (800aac8 <_ZN13Communication14ToggleSafeModeEb+0x88>)
 800aa54:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d009      	beq.n	800aa70 <_ZN13Communication14ToggleSafeModeEb+0x30>
 800aa5c:	4b1a      	ldr	r3, [pc, #104]	@ (800aac8 <_ZN13Communication14ToggleSafeModeEb+0x88>)
 800aa5e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800aa62:	2b04      	cmp	r3, #4
 800aa64:	d004      	beq.n	800aa70 <_ZN13Communication14ToggleSafeModeEb+0x30>
 800aa66:	2102      	movs	r1, #2
 800aa68:	2000      	movs	r0, #0
 800aa6a:	f003 fb50 	bl	800e10e <ErrorResult>
 800aa6e:	e025      	b.n	800aabc <_ZN13Communication14ToggleSafeModeEb+0x7c>
 800aa70:	78fb      	ldrb	r3, [r7, #3]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d012      	beq.n	800aa9c <_ZN13Communication14ToggleSafeModeEb+0x5c>
 800aa76:	4b15      	ldr	r3, [pc, #84]	@ (800aacc <_ZN13Communication14ToggleSafeModeEb+0x8c>)
 800aa78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d11c      	bne.n	800aaba <_ZN13Communication14ToggleSafeModeEb+0x7a>
 800aa80:	4b11      	ldr	r3, [pc, #68]	@ (800aac8 <_ZN13Communication14ToggleSafeModeEb+0x88>)
 800aa82:	2204      	movs	r2, #4
 800aa84:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800aa88:	4a11      	ldr	r2, [pc, #68]	@ (800aad0 <_ZN13Communication14ToggleSafeModeEb+0x90>)
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	4811      	ldr	r0, [pc, #68]	@ (800aad4 <_ZN13Communication14ToggleSafeModeEb+0x94>)
 800aa8e:	f7fb fc4b 	bl	8006328 <osThreadNew>
 800aa92:	4603      	mov	r3, r0
 800aa94:	4a0d      	ldr	r2, [pc, #52]	@ (800aacc <_ZN13Communication14ToggleSafeModeEb+0x8c>)
 800aa96:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800aa9a:	e00f      	b.n	800aabc <_ZN13Communication14ToggleSafeModeEb+0x7c>
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	@ (800aac8 <_ZN13Communication14ToggleSafeModeEb+0x88>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800aaa4:	4b09      	ldr	r3, [pc, #36]	@ (800aacc <_ZN13Communication14ToggleSafeModeEb+0x8c>)
 800aaa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fb fcce 	bl	800644c <osThreadTerminate>
 800aab0:	4b06      	ldr	r3, [pc, #24]	@ (800aacc <_ZN13Communication14ToggleSafeModeEb+0x8c>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800aab8:	e000      	b.n	800aabc <_ZN13Communication14ToggleSafeModeEb+0x7c>
 800aaba:	bf00      	nop
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	20009298 	.word	0x20009298
 800aac8:	200092a0 	.word	0x200092a0
 800aacc:	200090b0 	.word	0x200090b0
 800aad0:	2000925c 	.word	0x2000925c
 800aad4:	0800f85d 	.word	0x0800f85d

0800aad8 <_ZN13Communication15LoadcellAverageEv>:
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	4b0c      	ldr	r3, [pc, #48]	@ (800ab14 <_ZN13Communication15LoadcellAverageEv+0x3c>)
 800aae2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d004      	beq.n	800aaf4 <_ZN13Communication15LoadcellAverageEv+0x1c>
 800aaea:	2102      	movs	r1, #2
 800aaec:	2000      	movs	r0, #0
 800aaee:	f003 fb0e 	bl	800e10e <ErrorResult>
 800aaf2:	e00b      	b.n	800ab0c <_ZN13Communication15LoadcellAverageEv+0x34>
 800aaf4:	4b07      	ldr	r3, [pc, #28]	@ (800ab14 <_ZN13Communication15LoadcellAverageEv+0x3c>)
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800aafc:	4a06      	ldr	r2, [pc, #24]	@ (800ab18 <_ZN13Communication15LoadcellAverageEv+0x40>)
 800aafe:	2100      	movs	r1, #0
 800ab00:	4806      	ldr	r0, [pc, #24]	@ (800ab1c <_ZN13Communication15LoadcellAverageEv+0x44>)
 800ab02:	f7fb fc11 	bl	8006328 <osThreadNew>
 800ab06:	4603      	mov	r3, r0
 800ab08:	4a05      	ldr	r2, [pc, #20]	@ (800ab20 <_ZN13Communication15LoadcellAverageEv+0x48>)
 800ab0a:	6793      	str	r3, [r2, #120]	@ 0x78
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	200092a0 	.word	0x200092a0
 800ab18:	200091cc 	.word	0x200091cc
 800ab1c:	0800f15d 	.word	0x0800f15d
 800ab20:	200090b0 	.word	0x200090b0

0800ab24 <_ZN13Communication25LoadcellVolumeCalibrationEt>:
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	807b      	strh	r3, [r7, #2]
 800ab30:	4b12      	ldr	r3, [pc, #72]	@ (800ab7c <_ZN13Communication25LoadcellVolumeCalibrationEt+0x58>)
 800ab32:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d004      	beq.n	800ab44 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x20>
 800ab3a:	2102      	movs	r1, #2
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	f003 fae6 	bl	800e10e <ErrorResult>
 800ab42:	e017      	b.n	800ab74 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x50>
 800ab44:	4b0d      	ldr	r3, [pc, #52]	@ (800ab7c <_ZN13Communication25LoadcellVolumeCalibrationEt+0x58>)
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800ab4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ab7c <_ZN13Communication25LoadcellVolumeCalibrationEt+0x58>)
 800ab4e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ab52:	61da      	str	r2, [r3, #28]
 800ab54:	887b      	ldrh	r3, [r7, #2]
 800ab56:	ee07 3a90 	vmov	s15, r3
 800ab5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5e:	4b07      	ldr	r3, [pc, #28]	@ (800ab7c <_ZN13Communication25LoadcellVolumeCalibrationEt+0x58>)
 800ab60:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 800ab64:	4a06      	ldr	r2, [pc, #24]	@ (800ab80 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x5c>)
 800ab66:	2100      	movs	r1, #0
 800ab68:	4806      	ldr	r0, [pc, #24]	@ (800ab84 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800ab6a:	f7fb fbdd 	bl	8006328 <osThreadNew>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	4a05      	ldr	r2, [pc, #20]	@ (800ab88 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x64>)
 800ab72:	67d3      	str	r3, [r2, #124]	@ 0x7c
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	200092a0 	.word	0x200092a0
 800ab80:	200091f0 	.word	0x200091f0
 800ab84:	0800f2f1 	.word	0x0800f2f1
 800ab88:	200090b0 	.word	0x200090b0

0800ab8c <_ZN13Communication23LoadcellFlowCalibrationEt>:
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	807b      	strh	r3, [r7, #2]
 800ab98:	4b12      	ldr	r3, [pc, #72]	@ (800abe4 <_ZN13Communication23LoadcellFlowCalibrationEt+0x58>)
 800ab9a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d004      	beq.n	800abac <_ZN13Communication23LoadcellFlowCalibrationEt+0x20>
 800aba2:	2102      	movs	r1, #2
 800aba4:	2000      	movs	r0, #0
 800aba6:	f003 fab2 	bl	800e10e <ErrorResult>
 800abaa:	e018      	b.n	800abde <_ZN13Communication23LoadcellFlowCalibrationEt+0x52>
 800abac:	4b0d      	ldr	r3, [pc, #52]	@ (800abe4 <_ZN13Communication23LoadcellFlowCalibrationEt+0x58>)
 800abae:	2202      	movs	r2, #2
 800abb0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800abb4:	4b0b      	ldr	r3, [pc, #44]	@ (800abe4 <_ZN13Communication23LoadcellFlowCalibrationEt+0x58>)
 800abb6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800abba:	621a      	str	r2, [r3, #32]
 800abbc:	887b      	ldrh	r3, [r7, #2]
 800abbe:	ee07 3a90 	vmov	s15, r3
 800abc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc6:	4b07      	ldr	r3, [pc, #28]	@ (800abe4 <_ZN13Communication23LoadcellFlowCalibrationEt+0x58>)
 800abc8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 800abcc:	4a06      	ldr	r2, [pc, #24]	@ (800abe8 <_ZN13Communication23LoadcellFlowCalibrationEt+0x5c>)
 800abce:	2100      	movs	r1, #0
 800abd0:	4806      	ldr	r0, [pc, #24]	@ (800abec <_ZN13Communication23LoadcellFlowCalibrationEt+0x60>)
 800abd2:	f7fb fba9 	bl	8006328 <osThreadNew>
 800abd6:	4603      	mov	r3, r0
 800abd8:	4a05      	ldr	r2, [pc, #20]	@ (800abf0 <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800abda:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	200092a0 	.word	0x200092a0
 800abe8:	20009214 	.word	0x20009214
 800abec:	0800f499 	.word	0x0800f499
 800abf0:	200090b0 	.word	0x200090b0

0800abf4 <_ZN12FlashManageraSERKS_>:
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	605a      	str	r2, [r3, #4]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	689a      	ldr	r2, [r3, #8]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	609a      	str	r2, [r3, #8]
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	7b1a      	ldrb	r2, [r3, #12]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	731a      	strb	r2, [r3, #12]
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	7b5a      	ldrb	r2, [r3, #13]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	735a      	strb	r2, [r3, #13]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	7b9a      	ldrb	r2, [r3, #14]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	739a      	strb	r2, [r3, #14]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	7bda      	ldrb	r2, [r3, #15]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	73da      	strb	r2, [r3, #15]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	7c1a      	ldrb	r2, [r3, #16]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	741a      	strb	r2, [r3, #16]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	7c5a      	ldrb	r2, [r3, #17]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	745a      	strb	r2, [r3, #17]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	7c9a      	ldrb	r2, [r3, #18]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	749a      	strb	r2, [r3, #18]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	7cda      	ldrb	r2, [r3, #19]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	74da      	strb	r2, [r3, #19]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	7d1a      	ldrb	r2, [r3, #20]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	751a      	strb	r2, [r3, #20]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	7d5a      	ldrb	r2, [r3, #21]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	755a      	strb	r2, [r3, #21]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	7d9a      	ldrb	r2, [r3, #22]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	759a      	strb	r2, [r3, #22]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	7dda      	ldrb	r2, [r3, #23]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	75da      	strb	r2, [r3, #23]
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	7e1a      	ldrb	r2, [r3, #24]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	761a      	strb	r2, [r3, #24]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	7e5a      	ldrb	r2, [r3, #25]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	765a      	strb	r2, [r3, #25]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4618      	mov	r0, r3
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <_ZN13Communication15SetFlashManagerE12FlashManager>:
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	3304      	adds	r3, #4
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7ff ffa9 	bl	800abf4 <_ZN12FlashManageraSERKS_>
 800aca2:	bf00      	nop
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <_ZN3EmgC1Ev>:
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	4a0e      	ldr	r2, [pc, #56]	@ (800acf0 <_ZN3EmgC1Ev+0x44>)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	601a      	str	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800acc0:	461a      	mov	r2, r3
 800acc2:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800acc6:	6313      	str	r3, [r2, #48]	@ 0x30
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800acce:	461a      	mov	r2, r3
 800acd0:	2300      	movs	r3, #0
 800acd2:	6353      	str	r3, [r2, #52]	@ 0x34
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800acda:	461a      	mov	r2, r3
 800acdc:	2300      	movs	r3, #0
 800acde:	6393      	str	r3, [r2, #56]	@ 0x38
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4618      	mov	r0, r3
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	08010c34 	.word	0x08010c34

0800acf4 <_ZN3EmgD1Ev>:
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	4a04      	ldr	r2, [pc, #16]	@ (800ad10 <_ZN3EmgD1Ev+0x1c>)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	08010c34 	.word	0x08010c34

0800ad14 <_ZN3EmgD0Ev>:
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7ff ffe9 	bl	800acf4 <_ZN3EmgD1Ev>
 800ad22:	f242 013c 	movw	r1, #8252	@ 0x203c
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f004 fe82 	bl	800fa30 <_ZdlPvj>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
	...

0800ad38 <_ZN3Emg12FirstEmgReadEb>:
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
 800ad44:	2101      	movs	r1, #1
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f98c 	bl	800b064 <_ZN3Emg19FirstEmgReadFromSPIEh>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	7f1b      	ldrb	r3, [r3, #28]
 800ad50:	461a      	mov	r2, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	605a      	str	r2, [r3, #4]
 800ad56:	2103      	movs	r1, #3
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f983 	bl	800b064 <_ZN3Emg19FirstEmgReadFromSPIEh>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	7f1b      	ldrb	r3, [r3, #28]
 800ad62:	461a      	mov	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	609a      	str	r2, [r3, #8]
 800ad68:	2105      	movs	r1, #5
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f97a 	bl	800b064 <_ZN3Emg19FirstEmgReadFromSPIEh>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	7f1b      	ldrb	r3, [r3, #28]
 800ad74:	461a      	mov	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	60da      	str	r2, [r3, #12]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	689a      	ldr	r2, [r3, #8]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	021b      	lsls	r3, r3, #8
 800ad84:	441a      	add	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	621a      	str	r2, [r3, #32]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a1b      	ldr	r3, [r3, #32]
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	4b25      	ldr	r3, [pc, #148]	@ (800ae28 <_ZN3Emg12FirstEmgReadEb+0xf0>)
 800ad92:	869a      	strh	r2, [r3, #52]	@ 0x34
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a1b      	ldr	r3, [r3, #32]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f9c8 	bl	800b130 <_ZN3Emg27FirstEmgMovingAverageFilterEm>
 800ada0:	60f8      	str	r0, [r7, #12]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	4b20      	ldr	r3, [pc, #128]	@ (800ae28 <_ZN3Emg12FirstEmgReadEb+0xf0>)
 800ada8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	621a      	str	r2, [r3, #32]
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d033      	beq.n	800ae1e <_ZN3Emg12FirstEmgReadEb+0xe6>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800adbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adbe:	425a      	negs	r2, r3
 800adc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adc4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800adc8:	bf58      	it	pl
 800adca:	4253      	negpl	r3, r2
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800add2:	6293      	str	r3, [r2, #40]	@ 0x28
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	0a19      	lsrs	r1, r3, #8
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800adde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ade0:	b2c9      	uxtb	r1, r1
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	320a      	adds	r2, #10
 800ade6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800adf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	b2d9      	uxtb	r1, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	320a      	adds	r2, #10
 800adfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ae06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae08:	3302      	adds	r3, #2
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800ae10:	6293      	str	r3, [r2, #40]	@ 0x28
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ae18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1a:	4a03      	ldr	r2, [pc, #12]	@ (800ae28 <_ZN3Emg12FirstEmgReadEb+0xf0>)
 800ae1c:	6093      	str	r3, [r2, #8]
 800ae1e:	bf00      	nop
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20009318 	.word	0x20009318

0800ae2c <_ZN3Emg13SecondEmgReadEb>:
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	460b      	mov	r3, r1
 800ae36:	70fb      	strb	r3, [r7, #3]
 800ae38:	2101      	movs	r1, #1
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f944 	bl	800b0c8 <_ZN3Emg20SecondEmgReadFromSPIEh>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	7f5b      	ldrb	r3, [r3, #29]
 800ae44:	461a      	mov	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	611a      	str	r2, [r3, #16]
 800ae4a:	2103      	movs	r1, #3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f93b 	bl	800b0c8 <_ZN3Emg20SecondEmgReadFromSPIEh>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	7f5b      	ldrb	r3, [r3, #29]
 800ae56:	461a      	mov	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	615a      	str	r2, [r3, #20]
 800ae5c:	2105      	movs	r1, #5
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f932 	bl	800b0c8 <_ZN3Emg20SecondEmgReadFromSPIEh>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	7f5b      	ldrb	r3, [r3, #29]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	619a      	str	r2, [r3, #24]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	695a      	ldr	r2, [r3, #20]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	021b      	lsls	r3, r3, #8
 800ae78:	441a      	add	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	625a      	str	r2, [r3, #36]	@ 0x24
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	4b26      	ldr	r3, [pc, #152]	@ (800af20 <_ZN3Emg13SecondEmgReadEb+0xf4>)
 800ae86:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f9fe 	bl	800b290 <_ZN3Emg28SecondEmgMovingAverageFilterEm>
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	4b21      	ldr	r3, [pc, #132]	@ (800af20 <_ZN3Emg13SecondEmgReadEb+0xf4>)
 800ae9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	625a      	str	r2, [r3, #36]	@ 0x24
 800aea4:	78fb      	ldrb	r3, [r7, #3]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d035      	beq.n	800af16 <_ZN3Emg13SecondEmgReadEb+0xea>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800aeb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb2:	425a      	negs	r2, r3
 800aeb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aeb8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800aebc:	bf58      	it	pl
 800aebe:	4253      	negpl	r3, r2
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800aec6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	0a19      	lsrs	r1, r3, #8
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800aed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aed4:	b2c9      	uxtb	r1, r1
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f202 420a 	addw	r2, r2, #1034	@ 0x40a
 800aedc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800aee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee8:	1c5a      	adds	r2, r3, #1
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	b2d9      	uxtb	r1, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f202 420a 	addw	r2, r2, #1034	@ 0x40a
 800aef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800aefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af00:	3302      	adds	r3, #2
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800af08:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800af10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af12:	4a03      	ldr	r2, [pc, #12]	@ (800af20 <_ZN3Emg13SecondEmgReadEb+0xf4>)
 800af14:	60d3      	str	r3, [r2, #12]
 800af16:	bf00      	nop
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	20009318 	.word	0x20009318

0800af24 <_ZN3Emg13FirstEmgSetupEv>:
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	210e      	movs	r1, #14
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f839 	bl	800afa8 <_ZN3Emg18FirstEmgWriteToSPIEtt>
 800af36:	2200      	movs	r2, #0
 800af38:	2110      	movs	r1, #16
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f834 	bl	800afa8 <_ZN3Emg18FirstEmgWriteToSPIEtt>
 800af40:	2203      	movs	r2, #3
 800af42:	2112      	movs	r1, #18
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f82f 	bl	800afa8 <_ZN3Emg18FirstEmgWriteToSPIEtt>
 800af4a:	2210      	movs	r2, #16
 800af4c:	2114      	movs	r1, #20
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f82a 	bl	800afa8 <_ZN3Emg18FirstEmgWriteToSPIEtt>
 800af54:	220c      	movs	r2, #12
 800af56:	2116      	movs	r1, #22
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f825 	bl	800afa8 <_ZN3Emg18FirstEmgWriteToSPIEtt>
 800af5e:	bf00      	nop
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <_ZN3Emg14SecondEmgSetupEv>:
 800af66:	b580      	push	{r7, lr}
 800af68:	b082      	sub	sp, #8
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	210e      	movs	r1, #14
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f846 	bl	800b004 <_ZN3Emg19SecondEmgWriteToSPIEtt>
 800af78:	2200      	movs	r2, #0
 800af7a:	2110      	movs	r1, #16
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f841 	bl	800b004 <_ZN3Emg19SecondEmgWriteToSPIEtt>
 800af82:	2203      	movs	r2, #3
 800af84:	2112      	movs	r1, #18
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f83c 	bl	800b004 <_ZN3Emg19SecondEmgWriteToSPIEtt>
 800af8c:	2210      	movs	r2, #16
 800af8e:	2114      	movs	r1, #20
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f837 	bl	800b004 <_ZN3Emg19SecondEmgWriteToSPIEtt>
 800af96:	220c      	movs	r2, #12
 800af98:	2116      	movs	r1, #22
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f832 	bl	800b004 <_ZN3Emg19SecondEmgWriteToSPIEtt>
 800afa0:	bf00      	nop
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <_ZN3Emg18FirstEmgWriteToSPIEtt>:
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	460b      	mov	r3, r1
 800afb2:	807b      	strh	r3, [r7, #2]
 800afb4:	4613      	mov	r3, r2
 800afb6:	803b      	strh	r3, [r7, #0]
 800afb8:	887b      	ldrh	r3, [r7, #2]
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	733b      	strb	r3, [r7, #12]
 800afbe:	883b      	ldrh	r3, [r7, #0]
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	737b      	strb	r3, [r7, #13]
 800afc4:	2200      	movs	r2, #0
 800afc6:	2110      	movs	r1, #16
 800afc8:	480b      	ldr	r0, [pc, #44]	@ (800aff8 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x50>)
 800afca:	f7f8 f81f 	bl	800300c <HAL_GPIO_WritePin>
 800afce:	f107 010c 	add.w	r1, r7, #12
 800afd2:	2364      	movs	r3, #100	@ 0x64
 800afd4:	2202      	movs	r2, #2
 800afd6:	4809      	ldr	r0, [pc, #36]	@ (800affc <_ZN3Emg18FirstEmgWriteToSPIEtt+0x54>)
 800afd8:	f7f8 fd13 	bl	8003a02 <HAL_SPI_Transmit>
 800afdc:	4603      	mov	r3, r0
 800afde:	461a      	mov	r2, r3
 800afe0:	4b07      	ldr	r3, [pc, #28]	@ (800b000 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x58>)
 800afe2:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
 800afe6:	2201      	movs	r2, #1
 800afe8:	2110      	movs	r1, #16
 800afea:	4803      	ldr	r0, [pc, #12]	@ (800aff8 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x50>)
 800afec:	f7f8 f80e 	bl	800300c <HAL_GPIO_WritePin>
 800aff0:	bf00      	nop
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	40020000 	.word	0x40020000
 800affc:	200000d0 	.word	0x200000d0
 800b000:	20009318 	.word	0x20009318

0800b004 <_ZN3Emg19SecondEmgWriteToSPIEtt>:
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	807b      	strh	r3, [r7, #2]
 800b010:	4613      	mov	r3, r2
 800b012:	803b      	strh	r3, [r7, #0]
 800b014:	887b      	ldrh	r3, [r7, #2]
 800b016:	b2db      	uxtb	r3, r3
 800b018:	733b      	strb	r3, [r7, #12]
 800b01a:	883b      	ldrh	r3, [r7, #0]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	737b      	strb	r3, [r7, #13]
 800b020:	2200      	movs	r2, #0
 800b022:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b026:	480c      	ldr	r0, [pc, #48]	@ (800b058 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x54>)
 800b028:	f7f7 fff0 	bl	800300c <HAL_GPIO_WritePin>
 800b02c:	f107 010c 	add.w	r1, r7, #12
 800b030:	2364      	movs	r3, #100	@ 0x64
 800b032:	2202      	movs	r2, #2
 800b034:	4809      	ldr	r0, [pc, #36]	@ (800b05c <_ZN3Emg19SecondEmgWriteToSPIEtt+0x58>)
 800b036:	f7f8 fce4 	bl	8003a02 <HAL_SPI_Transmit>
 800b03a:	4603      	mov	r3, r0
 800b03c:	461a      	mov	r2, r3
 800b03e:	4b08      	ldr	r3, [pc, #32]	@ (800b060 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x5c>)
 800b040:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800b044:	2201      	movs	r2, #1
 800b046:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b04a:	4803      	ldr	r0, [pc, #12]	@ (800b058 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x54>)
 800b04c:	f7f7 ffde 	bl	800300c <HAL_GPIO_WritePin>
 800b050:	bf00      	nop
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	40020400 	.word	0x40020400
 800b05c:	20000128 	.word	0x20000128
 800b060:	20009318 	.word	0x20009318

0800b064 <_ZN3Emg19FirstEmgReadFromSPIEh>:
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	460b      	mov	r3, r1
 800b06e:	70fb      	strb	r3, [r7, #3]
 800b070:	2200      	movs	r2, #0
 800b072:	2110      	movs	r1, #16
 800b074:	4811      	ldr	r0, [pc, #68]	@ (800b0bc <_ZN3Emg19FirstEmgReadFromSPIEh+0x58>)
 800b076:	f7f7 ffc9 	bl	800300c <HAL_GPIO_WritePin>
 800b07a:	1cfb      	adds	r3, r7, #3
 800b07c:	2201      	movs	r2, #1
 800b07e:	4619      	mov	r1, r3
 800b080:	480f      	ldr	r0, [pc, #60]	@ (800b0c0 <_ZN3Emg19FirstEmgReadFromSPIEh+0x5c>)
 800b082:	f7f8 fe03 	bl	8003c8c <HAL_SPI_Transmit_DMA>
 800b086:	4603      	mov	r3, r0
 800b088:	461a      	mov	r2, r3
 800b08a:	4b0e      	ldr	r3, [pc, #56]	@ (800b0c4 <_ZN3Emg19FirstEmgReadFromSPIEh+0x60>)
 800b08c:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	331c      	adds	r3, #28
 800b094:	2201      	movs	r2, #1
 800b096:	4619      	mov	r1, r3
 800b098:	4809      	ldr	r0, [pc, #36]	@ (800b0c0 <_ZN3Emg19FirstEmgReadFromSPIEh+0x5c>)
 800b09a:	f7f8 fea9 	bl	8003df0 <HAL_SPI_Receive_DMA>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	4b08      	ldr	r3, [pc, #32]	@ (800b0c4 <_ZN3Emg19FirstEmgReadFromSPIEh+0x60>)
 800b0a4:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	2110      	movs	r1, #16
 800b0ac:	4803      	ldr	r0, [pc, #12]	@ (800b0bc <_ZN3Emg19FirstEmgReadFromSPIEh+0x58>)
 800b0ae:	f7f7 ffad 	bl	800300c <HAL_GPIO_WritePin>
 800b0b2:	bf00      	nop
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	40020000 	.word	0x40020000
 800b0c0:	200000d0 	.word	0x200000d0
 800b0c4:	20009318 	.word	0x20009318

0800b0c8 <_ZN3Emg20SecondEmgReadFromSPIEh>:
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	70fb      	strb	r3, [r7, #3]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b0da:	4812      	ldr	r0, [pc, #72]	@ (800b124 <_ZN3Emg20SecondEmgReadFromSPIEh+0x5c>)
 800b0dc:	f7f7 ff96 	bl	800300c <HAL_GPIO_WritePin>
 800b0e0:	1cfb      	adds	r3, r7, #3
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	4810      	ldr	r0, [pc, #64]	@ (800b128 <_ZN3Emg20SecondEmgReadFromSPIEh+0x60>)
 800b0e8:	f7f8 fdd0 	bl	8003c8c <HAL_SPI_Transmit_DMA>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b12c <_ZN3Emg20SecondEmgReadFromSPIEh+0x64>)
 800b0f2:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	331d      	adds	r3, #29
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	480a      	ldr	r0, [pc, #40]	@ (800b128 <_ZN3Emg20SecondEmgReadFromSPIEh+0x60>)
 800b100:	f7f8 fe76 	bl	8003df0 <HAL_SPI_Receive_DMA>
 800b104:	4603      	mov	r3, r0
 800b106:	461a      	mov	r2, r3
 800b108:	4b08      	ldr	r3, [pc, #32]	@ (800b12c <_ZN3Emg20SecondEmgReadFromSPIEh+0x64>)
 800b10a:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
 800b10e:	2201      	movs	r2, #1
 800b110:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b114:	4803      	ldr	r0, [pc, #12]	@ (800b124 <_ZN3Emg20SecondEmgReadFromSPIEh+0x5c>)
 800b116:	f7f7 ff79 	bl	800300c <HAL_GPIO_WritePin>
 800b11a:	bf00      	nop
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	40020400 	.word	0x40020400
 800b128:	20000128 	.word	0x20000128
 800b12c:	20009318 	.word	0x20009318

0800b130 <_ZN3Emg27FirstEmgMovingAverageFilterEm>:
 800b130:	b5b0      	push	{r4, r5, r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
 800b13a:	4b4f      	ldr	r3, [pc, #316]	@ (800b278 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800b13c:	895b      	ldrh	r3, [r3, #10]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x16>
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	e08f      	b.n	800b266 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x136>
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800b14c:	4a4b      	ldr	r2, [pc, #300]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b14e:	6013      	str	r3, [r2, #0]
 800b150:	4b4a      	ldr	r3, [pc, #296]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	b29a      	uxth	r2, r3
 800b156:	4b4a      	ldr	r3, [pc, #296]	@ (800b280 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x150>)
 800b158:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800b15a:	4b47      	ldr	r3, [pc, #284]	@ (800b278 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800b15c:	895b      	ldrh	r3, [r3, #10]
 800b15e:	461a      	mov	r2, r3
 800b160:	4b45      	ldr	r3, [pc, #276]	@ (800b278 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800b162:	899b      	ldrh	r3, [r3, #12]
 800b164:	4413      	add	r3, r2
 800b166:	0fda      	lsrs	r2, r3, #31
 800b168:	4413      	add	r3, r2
 800b16a:	105b      	asrs	r3, r3, #1
 800b16c:	81fb      	strh	r3, [r7, #14]
 800b16e:	4b42      	ldr	r3, [pc, #264]	@ (800b278 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800b170:	895b      	ldrh	r3, [r3, #10]
 800b172:	461a      	mov	r2, r3
 800b174:	4b41      	ldr	r3, [pc, #260]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d909      	bls.n	800b190 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x60>
 800b17c:	4b3e      	ldr	r3, [pc, #248]	@ (800b278 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800b17e:	899b      	ldrh	r3, [r3, #12]
 800b180:	461a      	mov	r2, r3
 800b182:	4b3e      	ldr	r3, [pc, #248]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	429a      	cmp	r2, r3
 800b188:	d202      	bcs.n	800b190 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x60>
 800b18a:	89fb      	ldrh	r3, [r7, #14]
 800b18c:	4a3b      	ldr	r2, [pc, #236]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b18e:	6013      	str	r3, [r2, #0]
 800b190:	89fa      	ldrh	r2, [r7, #14]
 800b192:	4b3a      	ldr	r3, [pc, #232]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	429a      	cmp	r2, r3
 800b198:	d907      	bls.n	800b1aa <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x7a>
 800b19a:	89fa      	ldrh	r2, [r7, #14]
 800b19c:	89f9      	ldrh	r1, [r7, #14]
 800b19e:	4b37      	ldr	r3, [pc, #220]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	1acb      	subs	r3, r1, r3
 800b1a4:	4413      	add	r3, r2
 800b1a6:	4a35      	ldr	r2, [pc, #212]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1a8:	6013      	str	r3, [r2, #0]
 800b1aa:	4b34      	ldr	r3, [pc, #208]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	89fb      	ldrh	r3, [r7, #14]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	4a32      	ldr	r2, [pc, #200]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1b4:	6013      	str	r3, [r2, #0]
 800b1b6:	4b31      	ldr	r3, [pc, #196]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	b29a      	uxth	r2, r3
 800b1bc:	4b30      	ldr	r3, [pc, #192]	@ (800b280 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x150>)
 800b1be:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b1c0:	4b2d      	ldr	r3, [pc, #180]	@ (800b278 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800b1c2:	891b      	ldrh	r3, [r3, #8]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	4b2d      	ldr	r3, [pc, #180]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d204      	bcs.n	800b1d8 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0xa8>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b1d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1d6:	e046      	b.n	800b266 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x136>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b1de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7f5 f987 	bl	80004f4 <__aeabi_ui2d>
 800b1e6:	a322      	add	r3, pc, #136	@ (adr r3, 800b270 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x140>)
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f7f5 f9fc 	bl	80005e8 <__aeabi_dmul>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4614      	mov	r4, r2
 800b1f6:	461d      	mov	r5, r3
 800b1f8:	4b20      	ldr	r3, [pc, #128]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7f5 f979 	bl	80004f4 <__aeabi_ui2d>
 800b202:	f04f 0200 	mov.w	r2, #0
 800b206:	4b1f      	ldr	r3, [pc, #124]	@ (800b284 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x154>)
 800b208:	f7f5 f9ee 	bl	80005e8 <__aeabi_dmul>
 800b20c:	4602      	mov	r2, r0
 800b20e:	460b      	mov	r3, r1
 800b210:	4620      	mov	r0, r4
 800b212:	4629      	mov	r1, r5
 800b214:	f7f5 f832 	bl	800027c <__adddf3>
 800b218:	4602      	mov	r2, r0
 800b21a:	460b      	mov	r3, r1
 800b21c:	4610      	mov	r0, r2
 800b21e:	4619      	mov	r1, r3
 800b220:	f04f 0200 	mov.w	r2, #0
 800b224:	4b18      	ldr	r3, [pc, #96]	@ (800b288 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x158>)
 800b226:	f7f5 fb09 	bl	800083c <__aeabi_ddiv>
 800b22a:	4602      	mov	r2, r0
 800b22c:	460b      	mov	r3, r1
 800b22e:	4610      	mov	r0, r2
 800b230:	4619      	mov	r1, r3
 800b232:	f7f5 fbeb 	bl	8000a0c <__aeabi_d2uiz>
 800b236:	4603      	mov	r3, r0
 800b238:	4a10      	ldr	r2, [pc, #64]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b23a:	6013      	str	r3, [r2, #0]
 800b23c:	4b0f      	ldr	r3, [pc, #60]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b246:	6353      	str	r3, [r2, #52]	@ 0x34
 800b248:	4b0c      	ldr	r3, [pc, #48]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3b32      	subs	r3, #50	@ 0x32
 800b24e:	4a0b      	ldr	r2, [pc, #44]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	4b0a      	ldr	r3, [pc, #40]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a0d      	ldr	r2, [pc, #52]	@ (800b28c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x15c>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d902      	bls.n	800b262 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x132>
 800b25c:	4b07      	ldr	r3, [pc, #28]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b25e:	2200      	movs	r2, #0
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	4b06      	ldr	r3, [pc, #24]	@ (800b27c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bdb0      	pop	{r4, r5, r7, pc}
 800b26e:	bf00      	nop
 800b270:	00000000 	.word	0x00000000
 800b274:	4058e000 	.word	0x4058e000
 800b278:	200092a0 	.word	0x200092a0
 800b27c:	20004ee0 	.word	0x20004ee0
 800b280:	20009318 	.word	0x20009318
 800b284:	3fe00000 	.word	0x3fe00000
 800b288:	40590000 	.word	0x40590000
 800b28c:	000101cf 	.word	0x000101cf

0800b290 <_ZN3Emg28SecondEmgMovingAverageFilterEm>:
 800b290:	b5b0      	push	{r4, r5, r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
 800b29a:	4b45      	ldr	r3, [pc, #276]	@ (800b3b0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800b29c:	8a1b      	ldrh	r3, [r3, #16]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x16>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	e07b      	b.n	800b39e <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x10e>
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800b2ac:	60fb      	str	r3, [r7, #12]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	4b40      	ldr	r3, [pc, #256]	@ (800b3b4 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x124>)
 800b2b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800b2b6:	4b3e      	ldr	r3, [pc, #248]	@ (800b3b0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800b2b8:	8a1b      	ldrh	r3, [r3, #16]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	4b3c      	ldr	r3, [pc, #240]	@ (800b3b0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800b2be:	8a5b      	ldrh	r3, [r3, #18]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	0fda      	lsrs	r2, r3, #31
 800b2c4:	4413      	add	r3, r2
 800b2c6:	105b      	asrs	r3, r3, #1
 800b2c8:	817b      	strh	r3, [r7, #10]
 800b2ca:	4b39      	ldr	r3, [pc, #228]	@ (800b3b0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800b2cc:	8a1b      	ldrh	r3, [r3, #16]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d207      	bcs.n	800b2e6 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x56>
 800b2d6:	4b36      	ldr	r3, [pc, #216]	@ (800b3b0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800b2d8:	8a5b      	ldrh	r3, [r3, #18]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d901      	bls.n	800b2e6 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x56>
 800b2e2:	897b      	ldrh	r3, [r7, #10]
 800b2e4:	60fb      	str	r3, [r7, #12]
 800b2e6:	897b      	ldrh	r3, [r7, #10]
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d205      	bcs.n	800b2fa <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x6a>
 800b2ee:	897a      	ldrh	r2, [r7, #10]
 800b2f0:	8979      	ldrh	r1, [r7, #10]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	1acb      	subs	r3, r1, r3
 800b2f6:	4413      	add	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]
 800b2fa:	897b      	ldrh	r3, [r7, #10]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	60fb      	str	r3, [r7, #12]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	b29a      	uxth	r2, r3
 800b306:	4b2b      	ldr	r3, [pc, #172]	@ (800b3b4 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x124>)
 800b308:	865a      	strh	r2, [r3, #50]	@ 0x32
 800b30a:	4b29      	ldr	r3, [pc, #164]	@ (800b3b0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800b30c:	89db      	ldrh	r3, [r3, #14]
 800b30e:	461a      	mov	r2, r3
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	4293      	cmp	r3, r2
 800b314:	d904      	bls.n	800b320 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x90>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b31e:	e03e      	b.n	800b39e <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x10e>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b328:	4618      	mov	r0, r3
 800b32a:	f7f5 f8e3 	bl	80004f4 <__aeabi_ui2d>
 800b32e:	a31e      	add	r3, pc, #120	@ (adr r3, 800b3a8 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x118>)
 800b330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b334:	f7f5 f958 	bl	80005e8 <__aeabi_dmul>
 800b338:	4602      	mov	r2, r0
 800b33a:	460b      	mov	r3, r1
 800b33c:	4614      	mov	r4, r2
 800b33e:	461d      	mov	r5, r3
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f7f5 f8d7 	bl	80004f4 <__aeabi_ui2d>
 800b346:	f04f 0200 	mov.w	r2, #0
 800b34a:	4b1b      	ldr	r3, [pc, #108]	@ (800b3b8 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x128>)
 800b34c:	f7f5 f94c 	bl	80005e8 <__aeabi_dmul>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	4620      	mov	r0, r4
 800b356:	4629      	mov	r1, r5
 800b358:	f7f4 ff90 	bl	800027c <__adddf3>
 800b35c:	4602      	mov	r2, r0
 800b35e:	460b      	mov	r3, r1
 800b360:	4610      	mov	r0, r2
 800b362:	4619      	mov	r1, r3
 800b364:	f04f 0200 	mov.w	r2, #0
 800b368:	4b14      	ldr	r3, [pc, #80]	@ (800b3bc <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x12c>)
 800b36a:	f7f5 fa67 	bl	800083c <__aeabi_ddiv>
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	4610      	mov	r0, r2
 800b374:	4619      	mov	r1, r3
 800b376:	f7f5 fb49 	bl	8000a0c <__aeabi_d2uiz>
 800b37a:	4603      	mov	r3, r0
 800b37c:	60fb      	str	r3, [r7, #12]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b384:	461a      	mov	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6393      	str	r3, [r2, #56]	@ 0x38
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	3b32      	subs	r3, #50	@ 0x32
 800b38e:	60fb      	str	r3, [r7, #12]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4a0b      	ldr	r2, [pc, #44]	@ (800b3c0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x130>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d901      	bls.n	800b39c <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x10c>
 800b398:	2300      	movs	r3, #0
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bdb0      	pop	{r4, r5, r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	00000000 	.word	0x00000000
 800b3ac:	4058e000 	.word	0x4058e000
 800b3b0:	200092a0 	.word	0x200092a0
 800b3b4:	20009318 	.word	0x20009318
 800b3b8:	3fe00000 	.word	0x3fe00000
 800b3bc:	40590000 	.word	0x40590000
 800b3c0:	000101cf 	.word	0x000101cf

0800b3c4 <_ZN6FilterC1Ev>:
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	4a04      	ldr	r2, [pc, #16]	@ (800b3e0 <_ZN6FilterC1Ev+0x1c>)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	08010c44 	.word	0x08010c44

0800b3e4 <_ZN6FilterD1Ev>:
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	4a04      	ldr	r2, [pc, #16]	@ (800b400 <_ZN6FilterD1Ev+0x1c>)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	08010c44 	.word	0x08010c44

0800b404 <_ZN6FilterD0Ev>:
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f7ff ffe9 	bl	800b3e4 <_ZN6FilterD1Ev>
 800b412:	2104      	movs	r1, #4
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f004 fb0b 	bl	800fa30 <_ZdlPvj>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4618      	mov	r0, r3
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <_ZN6Filter14MoovingAverageEPfS0_mmf>:
 800b424:	b480      	push	{r7}
 800b426:	b089      	sub	sp, #36	@ 0x24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6178      	str	r0, [r7, #20]
 800b42c:	6139      	str	r1, [r7, #16]
 800b42e:	60fa      	str	r2, [r7, #12]
 800b430:	60bb      	str	r3, [r7, #8]
 800b432:	ed87 0a01 	vstr	s0, [r7, #4]
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d302      	bcc.n	800b444 <_ZN6Filter14MoovingAverageEPfS0_mmf+0x20>
 800b43e:	f04f 0300 	mov.w	r3, #0
 800b442:	e03b      	b.n	800b4bc <_ZN6Filter14MoovingAverageEPfS0_mmf+0x98>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	ed93 7a00 	vldr	s14, [r3]
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	4413      	add	r3, r2
 800b452:	edd3 7a00 	vldr	s15, [r3]
 800b456:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b45a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b45e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	edc3 7a00 	vstr	s15, [r3]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	edd3 7a00 	vldr	s15, [r3]
 800b46e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b472:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b47a:	d502      	bpl.n	800b482 <_ZN6Filter14MoovingAverageEPfS0_mmf+0x5e>
 800b47c:	f04f 0300 	mov.w	r3, #0
 800b480:	e001      	b.n	800b486 <_ZN6Filter14MoovingAverageEPfS0_mmf+0x62>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	4413      	add	r3, r2
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	601a      	str	r2, [r3, #0]
 800b496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00a      	beq.n	800b4b2 <_ZN6Filter14MoovingAverageEPfS0_mmf+0x8e>
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	edd3 6a00 	vldr	s13, [r3]
 800b4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a4:	ee07 3a90 	vmov	s15, r3
 800b4a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b4ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4b0:	e001      	b.n	800b4b6 <_ZN6Filter14MoovingAverageEPfS0_mmf+0x92>
 800b4b2:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800b4d0 <_ZN6Filter14MoovingAverageEPfS0_mmf+0xac>
 800b4b6:	edc7 7a07 	vstr	s15, [r7, #28]
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	ee07 3a90 	vmov	s15, r3
 800b4c0:	eeb0 0a67 	vmov.f32	s0, s15
 800b4c4:	3724      	adds	r7, #36	@ 0x24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	00000000 	.word	0x00000000

0800b4d4 <_ZN12FlashManager8ReadDataEPhhib>:
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	603b      	str	r3, [r7, #0]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	71fb      	strb	r3, [r7, #7]
 800b4e4:	f7f7 f972 	bl	80027cc <HAL_FLASH_Unlock>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	bf0c      	ite	eq
 800b4ee:	2301      	moveq	r3, #1
 800b4f0:	2300      	movne	r3, #0
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d028      	beq.n	800b54a <_ZN12FlashManager8ReadDataEPhhib+0x76>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	617b      	str	r3, [r7, #20]
 800b4fc:	e01f      	b.n	800b53e <_ZN12FlashManager8ReadDataEPhhib+0x6a>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	689a      	ldr	r2, [r3, #8]
 800b502:	79fb      	ldrb	r3, [r7, #7]
 800b504:	441a      	add	r2, r3
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	4413      	add	r3, r2
 800b50a:	613b      	str	r3, [r7, #16]
 800b50c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00a      	beq.n	800b52a <_ZN12FlashManager8ReadDataEPhhib+0x56>
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	1acb      	subs	r3, r1, r3
 800b51c:	3b01      	subs	r3, #1
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	440b      	add	r3, r1
 800b522:	7812      	ldrb	r2, [r2, #0]
 800b524:	b2d2      	uxtb	r2, r2
 800b526:	701a      	strb	r2, [r3, #0]
 800b528:	e006      	b.n	800b538 <_ZN12FlashManager8ReadDataEPhhib+0x64>
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	68b9      	ldr	r1, [r7, #8]
 800b530:	440b      	add	r3, r1
 800b532:	7812      	ldrb	r2, [r2, #0]
 800b534:	b2d2      	uxtb	r2, r2
 800b536:	701a      	strb	r2, [r3, #0]
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	3301      	adds	r3, #1
 800b53c:	617b      	str	r3, [r7, #20]
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	429a      	cmp	r2, r3
 800b544:	dbdb      	blt.n	800b4fe <_ZN12FlashManager8ReadDataEPhhib+0x2a>
 800b546:	f7f7 f963 	bl	8002810 <HAL_FLASH_Lock>
 800b54a:	bf00      	nop
 800b54c:	3718      	adds	r7, #24
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
	...

0800b554 <_ZN12FlashManagerC1Ev>:
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	4a22      	ldr	r2, [pc, #136]	@ (800b5e8 <_ZN12FlashManagerC1Ev+0x94>)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4a21      	ldr	r2, [pc, #132]	@ (800b5ec <_ZN12FlashManagerC1Ev+0x98>)
 800b566:	609a      	str	r2, [r3, #8]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	731a      	strb	r2, [r3, #12]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2208      	movs	r2, #8
 800b572:	735a      	strb	r2, [r3, #13]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2210      	movs	r2, #16
 800b578:	739a      	strb	r2, [r3, #14]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2214      	movs	r2, #20
 800b57e:	73da      	strb	r2, [r3, #15]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2218      	movs	r2, #24
 800b584:	741a      	strb	r2, [r3, #16]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	221e      	movs	r2, #30
 800b58a:	745a      	strb	r2, [r3, #17]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2224      	movs	r2, #36	@ 0x24
 800b590:	749a      	strb	r2, [r3, #18]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2225      	movs	r2, #37	@ 0x25
 800b596:	74da      	strb	r2, [r3, #19]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2226      	movs	r2, #38	@ 0x26
 800b59c:	751a      	strb	r2, [r3, #20]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2227      	movs	r2, #39	@ 0x27
 800b5a2:	755a      	strb	r2, [r3, #21]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2228      	movs	r2, #40	@ 0x28
 800b5a8:	759a      	strb	r2, [r3, #22]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2229      	movs	r2, #41	@ 0x29
 800b5ae:	75da      	strb	r2, [r3, #23]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	222a      	movs	r2, #42	@ 0x2a
 800b5b4:	761a      	strb	r2, [r3, #24]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	222b      	movs	r2, #43	@ 0x2b
 800b5ba:	765a      	strb	r2, [r3, #25]
 800b5bc:	f004 fb80 	bl	800fcc0 <rand>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b5f0 <_ZN12FlashManagerC1Ev+0x9c>)
 800b5c4:	fb83 1302 	smull	r1, r3, r3, r2
 800b5c8:	1199      	asrs	r1, r3, #6
 800b5ca:	17d3      	asrs	r3, r2, #31
 800b5cc:	1acb      	subs	r3, r1, r3
 800b5ce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b5d2:	fb01 f303 	mul.w	r3, r1, r3
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	6053      	str	r3, [r2, #4]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	08010c54 	.word	0x08010c54
 800b5ec:	08020000 	.word	0x08020000
 800b5f0:	10624dd3 	.word	0x10624dd3

0800b5f4 <_ZN12FlashManagerD1Ev>:
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	4a04      	ldr	r2, [pc, #16]	@ (800b610 <_ZN12FlashManagerD1Ev+0x1c>)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	601a      	str	r2, [r3, #0]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4618      	mov	r0, r3
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	08010c54 	.word	0x08010c54

0800b614 <_ZN12FlashManagerD0Ev>:
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff ffe9 	bl	800b5f4 <_ZN12FlashManagerD1Ev>
 800b622:	211c      	movs	r1, #28
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f004 fa03 	bl	800fa30 <_ZdlPvj>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4618      	mov	r0, r3
 800b62e:	3708      	adds	r7, #8
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <_ZN12FlashManager10BackupDataEv>:
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af02      	add	r7, sp, #8
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	b2da      	uxtb	r2, r3
 800b642:	4b08      	ldr	r3, [pc, #32]	@ (800b664 <_ZN12FlashManager10BackupDataEv+0x30>)
 800b644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b646:	2100      	movs	r1, #0
 800b648:	9100      	str	r1, [sp, #0]
 800b64a:	4907      	ldr	r1, [pc, #28]	@ (800b668 <_ZN12FlashManager10BackupDataEv+0x34>)
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f7ff ff41 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800b652:	4b04      	ldr	r3, [pc, #16]	@ (800b664 <_ZN12FlashManager10BackupDataEv+0x30>)
 800b654:	2201      	movs	r2, #1
 800b656:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 800b65a:	bf00      	nop
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	200092a0 	.word	0x200092a0
 800b668:	200092d5 	.word	0x200092d5

0800b66c <_ZN12FlashManager9HardResetEb>:
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b08e      	sub	sp, #56	@ 0x38
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	460b      	mov	r3, r1
 800b676:	70fb      	strb	r3, [r7, #3]
 800b678:	78fb      	ldrb	r3, [r7, #3]
 800b67a:	f083 0301 	eor.w	r3, r3, #1
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	2b00      	cmp	r3, #0
 800b682:	d015      	beq.n	800b6b0 <_ZN12FlashManager9HardResetEb+0x44>
 800b684:	2300      	movs	r3, #0
 800b686:	623b      	str	r3, [r7, #32]
 800b688:	2305      	movs	r3, #5
 800b68a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b68c:	2301      	movs	r3, #1
 800b68e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b690:	2301      	movs	r3, #1
 800b692:	633b      	str	r3, [r7, #48]	@ 0x30
 800b694:	2300      	movs	r3, #0
 800b696:	627b      	str	r3, [r7, #36]	@ 0x24
 800b698:	2302      	movs	r3, #2
 800b69a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b69c:	f107 0220 	add.w	r2, r7, #32
 800b6a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7f7 f9f2 	bl	8002a90 <HAL_FLASHEx_Erase>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	e025      	b.n	800b6fc <_ZN12FlashManager9HardResetEb+0x90>
 800b6b0:	78fb      	ldrb	r3, [r7, #3]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d006      	beq.n	800b6c4 <_ZN12FlashManager9HardResetEb+0x58>
 800b6b6:	f7f7 f889 	bl	80027cc <HAL_FLASH_Unlock>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d101      	bne.n	800b6c4 <_ZN12FlashManager9HardResetEb+0x58>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e000      	b.n	800b6c6 <_ZN12FlashManager9HardResetEb+0x5a>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d017      	beq.n	800b6fa <_ZN12FlashManager9HardResetEb+0x8e>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	60bb      	str	r3, [r7, #8]
 800b6ce:	2305      	movs	r3, #5
 800b6d0:	617b      	str	r3, [r7, #20]
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	613b      	str	r3, [r7, #16]
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	61bb      	str	r3, [r7, #24]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	60fb      	str	r3, [r7, #12]
 800b6de:	2302      	movs	r3, #2
 800b6e0:	61fb      	str	r3, [r7, #28]
 800b6e2:	f107 0208 	add.w	r2, r7, #8
 800b6e6:	f107 030c 	add.w	r3, r7, #12
 800b6ea:	4611      	mov	r1, r2
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7f7 f9cf 	bl	8002a90 <HAL_FLASHEx_Erase>
 800b6f2:	f7f7 f88d 	bl	8002810 <HAL_FLASH_Lock>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	e000      	b.n	800b6fc <_ZN12FlashManager9HardResetEb+0x90>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3738      	adds	r7, #56	@ 0x38
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <_ZN12FlashManager6UpdateEv>:
 800b704:	b5b0      	push	{r4, r5, r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	4b1f      	ldr	r3, [pc, #124]	@ (800b78c <_ZN12FlashManager6UpdateEv+0x88>)
 800b70e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800b712:	f083 0301 	eor.w	r3, r3, #1
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <_ZN12FlashManager6UpdateEv+0x1c>
 800b71c:	2302      	movs	r3, #2
 800b71e:	e031      	b.n	800b784 <_ZN12FlashManager6UpdateEv+0x80>
 800b720:	f7f7 f854 	bl	80027cc <HAL_FLASH_Unlock>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	bf0c      	ite	eq
 800b72a:	2301      	moveq	r3, #1
 800b72c:	2300      	movne	r3, #0
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b00      	cmp	r3, #0
 800b732:	d026      	beq.n	800b782 <_ZN12FlashManager6UpdateEv+0x7e>
 800b734:	2100      	movs	r1, #0
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff ff98 	bl	800b66c <_ZN12FlashManager9HardResetEb>
 800b73c:	2300      	movs	r3, #0
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	e016      	b.n	800b770 <_ZN12FlashManager6UpdateEv+0x6c>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	689a      	ldr	r2, [r3, #8]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	4413      	add	r3, r2
 800b74a:	60bb      	str	r3, [r7, #8]
 800b74c:	4a0f      	ldr	r2, [pc, #60]	@ (800b78c <_ZN12FlashManager6UpdateEv+0x88>)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	4413      	add	r3, r2
 800b752:	3335      	adds	r3, #53	@ 0x35
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2200      	movs	r2, #0
 800b75a:	461c      	mov	r4, r3
 800b75c:	4615      	mov	r5, r2
 800b75e:	4622      	mov	r2, r4
 800b760:	462b      	mov	r3, r5
 800b762:	68b9      	ldr	r1, [r7, #8]
 800b764:	2000      	movs	r0, #0
 800b766:	f7f6 ffdd 	bl	8002724 <HAL_FLASH_Program>
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3301      	adds	r3, #1
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	4b06      	ldr	r3, [pc, #24]	@ (800b78c <_ZN12FlashManager6UpdateEv+0x88>)
 800b772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	429a      	cmp	r2, r3
 800b778:	dbe3      	blt.n	800b742 <_ZN12FlashManager6UpdateEv+0x3e>
 800b77a:	f7f7 f849 	bl	8002810 <HAL_FLASH_Lock>
 800b77e:	2300      	movs	r3, #0
 800b780:	e000      	b.n	800b784 <_ZN12FlashManager6UpdateEv+0x80>
 800b782:	2301      	movs	r3, #1
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bdb0      	pop	{r4, r5, r7, pc}
 800b78c:	200092a0 	.word	0x200092a0

0800b790 <_ZN12FlashManager9WriteDataEhiPh>:
 800b790:	b480      	push	{r7}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	607a      	str	r2, [r7, #4]
 800b79a:	603b      	str	r3, [r7, #0]
 800b79c:	460b      	mov	r3, r1
 800b79e:	72fb      	strb	r3, [r7, #11]
 800b7a0:	4b14      	ldr	r3, [pc, #80]	@ (800b7f4 <_ZN12FlashManager9WriteDataEhiPh+0x64>)
 800b7a2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800b7a6:	f083 0301 	eor.w	r3, r3, #1
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <_ZN12FlashManager9WriteDataEhiPh+0x24>
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	e018      	b.n	800b7e6 <_ZN12FlashManager9WriteDataEhiPh+0x56>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	617b      	str	r3, [r7, #20]
 800b7b8:	e010      	b.n	800b7dc <_ZN12FlashManager9WriteDataEhiPh+0x4c>
 800b7ba:	7afa      	ldrb	r2, [r7, #11]
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	4413      	add	r3, r2
 800b7c0:	613b      	str	r3, [r7, #16]
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	7819      	ldrb	r1, [r3, #0]
 800b7ca:	4a0a      	ldr	r2, [pc, #40]	@ (800b7f4 <_ZN12FlashManager9WriteDataEhiPh+0x64>)
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	3335      	adds	r3, #53	@ 0x35
 800b7d2:	460a      	mov	r2, r1
 800b7d4:	701a      	strb	r2, [r3, #0]
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	617b      	str	r3, [r7, #20]
 800b7dc:	697a      	ldr	r2, [r7, #20]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	dbea      	blt.n	800b7ba <_ZN12FlashManager9WriteDataEhiPh+0x2a>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	371c      	adds	r7, #28
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	200092a0 	.word	0x200092a0

0800b7f8 <_ZN12FlashManager5SetupEv>:
 800b7f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	466b      	mov	r3, sp
 800b804:	461e      	mov	r6, r3
 800b806:	2301      	movs	r3, #1
 800b808:	617b      	str	r3, [r7, #20]
 800b80a:	6979      	ldr	r1, [r7, #20]
 800b80c:	460b      	mov	r3, r1
 800b80e:	3b01      	subs	r3, #1
 800b810:	613b      	str	r3, [r7, #16]
 800b812:	2300      	movs	r3, #0
 800b814:	4688      	mov	r8, r1
 800b816:	4699      	mov	r9, r3
 800b818:	f04f 0200 	mov.w	r2, #0
 800b81c:	f04f 0300 	mov.w	r3, #0
 800b820:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b824:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b828:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b82c:	2300      	movs	r3, #0
 800b82e:	460c      	mov	r4, r1
 800b830:	461d      	mov	r5, r3
 800b832:	f04f 0200 	mov.w	r2, #0
 800b836:	f04f 0300 	mov.w	r3, #0
 800b83a:	00eb      	lsls	r3, r5, #3
 800b83c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b840:	00e2      	lsls	r2, r4, #3
 800b842:	1dcb      	adds	r3, r1, #7
 800b844:	08db      	lsrs	r3, r3, #3
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	ebad 0d03 	sub.w	sp, sp, r3
 800b84c:	466b      	mov	r3, sp
 800b84e:	3300      	adds	r3, #0
 800b850:	60fb      	str	r3, [r7, #12]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	460a      	mov	r2, r1
 800b856:	1e51      	subs	r1, r2, #1
 800b858:	2200      	movs	r2, #0
 800b85a:	701a      	strb	r2, [r3, #0]
 800b85c:	1c5a      	adds	r2, r3, #1
 800b85e:	1e4b      	subs	r3, r1, #1
 800b860:	e003      	b.n	800b86a <_ZN12FlashManager5SetupEv+0x72>
 800b862:	2100      	movs	r1, #0
 800b864:	7011      	strb	r1, [r2, #0]
 800b866:	3b01      	subs	r3, #1
 800b868:	3201      	adds	r2, #1
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	daf9      	bge.n	800b862 <_ZN12FlashManager5SetupEv+0x6a>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	7c99      	ldrb	r1, [r3, #18]
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f7ff ff8a 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800b87c:	46b5      	mov	sp, r6
 800b87e:	bf00      	nop
 800b880:	371c      	adds	r7, #28
 800b882:	46bd      	mov	sp, r7
 800b884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b888 <_ZN12FlashManager7IsSetupEv>:
 800b888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b88c:	b089      	sub	sp, #36	@ 0x24
 800b88e:	af02      	add	r7, sp, #8
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	466b      	mov	r3, sp
 800b894:	461e      	mov	r6, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff fecc 	bl	800b634 <_ZN12FlashManager10BackupDataEv>
 800b89c:	2301      	movs	r3, #1
 800b89e:	617b      	str	r3, [r7, #20]
 800b8a0:	6979      	ldr	r1, [r7, #20]
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	613b      	str	r3, [r7, #16]
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4688      	mov	r8, r1
 800b8ac:	4699      	mov	r9, r3
 800b8ae:	f04f 0200 	mov.w	r2, #0
 800b8b2:	f04f 0300 	mov.w	r3, #0
 800b8b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b8be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	460c      	mov	r4, r1
 800b8c6:	461d      	mov	r5, r3
 800b8c8:	f04f 0200 	mov.w	r2, #0
 800b8cc:	f04f 0300 	mov.w	r3, #0
 800b8d0:	00eb      	lsls	r3, r5, #3
 800b8d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b8d6:	00e2      	lsls	r2, r4, #3
 800b8d8:	1dcb      	adds	r3, r1, #7
 800b8da:	08db      	lsrs	r3, r3, #3
 800b8dc:	00db      	lsls	r3, r3, #3
 800b8de:	ebad 0d03 	sub.w	sp, sp, r3
 800b8e2:	ab02      	add	r3, sp, #8
 800b8e4:	3300      	adds	r3, #0
 800b8e6:	60fb      	str	r3, [r7, #12]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	460a      	mov	r2, r1
 800b8ec:	1e51      	subs	r1, r2, #1
 800b8ee:	22ff      	movs	r2, #255	@ 0xff
 800b8f0:	701a      	strb	r2, [r3, #0]
 800b8f2:	1c5a      	adds	r2, r3, #1
 800b8f4:	1e4b      	subs	r3, r1, #1
 800b8f6:	e003      	b.n	800b900 <_ZN12FlashManager7IsSetupEv+0x78>
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	7011      	strb	r1, [r2, #0]
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	3201      	adds	r2, #1
 800b900:	2b00      	cmp	r3, #0
 800b902:	daf9      	bge.n	800b8f8 <_ZN12FlashManager7IsSetupEv+0x70>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	7c9a      	ldrb	r2, [r3, #18]
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	2100      	movs	r1, #0
 800b90c:	9100      	str	r1, [sp, #0]
 800b90e:	68f9      	ldr	r1, [r7, #12]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f7ff fddf 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800b916:	f107 030b 	add.w	r3, r7, #11
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	68f9      	ldr	r1, [r7, #12]
 800b91e:	4618      	mov	r0, r3
 800b920:	f004 fb9d 	bl	801005e <memcpy>
 800b924:	7afb      	ldrb	r3, [r7, #11]
 800b926:	2b00      	cmp	r3, #0
 800b928:	bf0c      	ite	eq
 800b92a:	2301      	moveq	r3, #1
 800b92c:	2300      	movne	r3, #0
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	46b5      	mov	sp, r6
 800b932:	4618      	mov	r0, r3
 800b934:	371c      	adds	r7, #28
 800b936:	46bd      	mov	sp, r7
 800b938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b93c <_ZN12FlashManager18WriteSendPerSecondEh>:
 800b93c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b940:	b087      	sub	sp, #28
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
 800b946:	460b      	mov	r3, r1
 800b948:	70fb      	strb	r3, [r7, #3]
 800b94a:	466b      	mov	r3, sp
 800b94c:	461e      	mov	r6, r3
 800b94e:	2301      	movs	r3, #1
 800b950:	617b      	str	r3, [r7, #20]
 800b952:	6979      	ldr	r1, [r7, #20]
 800b954:	460b      	mov	r3, r1
 800b956:	3b01      	subs	r3, #1
 800b958:	613b      	str	r3, [r7, #16]
 800b95a:	2300      	movs	r3, #0
 800b95c:	4688      	mov	r8, r1
 800b95e:	4699      	mov	r9, r3
 800b960:	f04f 0200 	mov.w	r2, #0
 800b964:	f04f 0300 	mov.w	r3, #0
 800b968:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b96c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b970:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b974:	2300      	movs	r3, #0
 800b976:	460c      	mov	r4, r1
 800b978:	461d      	mov	r5, r3
 800b97a:	f04f 0200 	mov.w	r2, #0
 800b97e:	f04f 0300 	mov.w	r3, #0
 800b982:	00eb      	lsls	r3, r5, #3
 800b984:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b988:	00e2      	lsls	r2, r4, #3
 800b98a:	1dcb      	adds	r3, r1, #7
 800b98c:	08db      	lsrs	r3, r3, #3
 800b98e:	00db      	lsls	r3, r3, #3
 800b990:	ebad 0d03 	sub.w	sp, sp, r3
 800b994:	466b      	mov	r3, sp
 800b996:	3300      	adds	r3, #0
 800b998:	60fb      	str	r3, [r7, #12]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	460a      	mov	r2, r1
 800b99e:	1e51      	subs	r1, r2, #1
 800b9a0:	78fa      	ldrb	r2, [r7, #3]
 800b9a2:	701a      	strb	r2, [r3, #0]
 800b9a4:	1c5a      	adds	r2, r3, #1
 800b9a6:	1e4b      	subs	r3, r1, #1
 800b9a8:	e003      	b.n	800b9b2 <_ZN12FlashManager18WriteSendPerSecondEh+0x76>
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	7011      	strb	r1, [r2, #0]
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	3201      	adds	r2, #1
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	daf9      	bge.n	800b9aa <_ZN12FlashManager18WriteSendPerSecondEh+0x6e>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	7cd9      	ldrb	r1, [r3, #19]
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7ff fee6 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800b9c4:	46b5      	mov	sp, r6
 800b9c6:	bf00      	nop
 800b9c8:	371c      	adds	r7, #28
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b9d0 <_ZN12FlashManager17ReadSendPerSecondEv>:
 800b9d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9d4:	b089      	sub	sp, #36	@ 0x24
 800b9d6:	af02      	add	r7, sp, #8
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	466b      	mov	r3, sp
 800b9dc:	461e      	mov	r6, r3
 800b9de:	2301      	movs	r3, #1
 800b9e0:	617b      	str	r3, [r7, #20]
 800b9e2:	6979      	ldr	r1, [r7, #20]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	613b      	str	r3, [r7, #16]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	4688      	mov	r8, r1
 800b9ee:	4699      	mov	r9, r3
 800b9f0:	f04f 0200 	mov.w	r2, #0
 800b9f4:	f04f 0300 	mov.w	r3, #0
 800b9f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b9fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ba00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ba04:	2300      	movs	r3, #0
 800ba06:	460c      	mov	r4, r1
 800ba08:	461d      	mov	r5, r3
 800ba0a:	f04f 0200 	mov.w	r2, #0
 800ba0e:	f04f 0300 	mov.w	r3, #0
 800ba12:	00eb      	lsls	r3, r5, #3
 800ba14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ba18:	00e2      	lsls	r2, r4, #3
 800ba1a:	1dcb      	adds	r3, r1, #7
 800ba1c:	08db      	lsrs	r3, r3, #3
 800ba1e:	00db      	lsls	r3, r3, #3
 800ba20:	ebad 0d03 	sub.w	sp, sp, r3
 800ba24:	ab02      	add	r3, sp, #8
 800ba26:	3300      	adds	r3, #0
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	460a      	mov	r2, r1
 800ba2e:	1e51      	subs	r1, r2, #1
 800ba30:	22ff      	movs	r2, #255	@ 0xff
 800ba32:	701a      	strb	r2, [r3, #0]
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	1e4b      	subs	r3, r1, #1
 800ba38:	e003      	b.n	800ba42 <_ZN12FlashManager17ReadSendPerSecondEv+0x72>
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	7011      	strb	r1, [r2, #0]
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	3201      	adds	r2, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	daf9      	bge.n	800ba3a <_ZN12FlashManager17ReadSendPerSecondEv+0x6a>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	7cda      	ldrb	r2, [r3, #19]
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	9100      	str	r1, [sp, #0]
 800ba50:	68f9      	ldr	r1, [r7, #12]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7ff fd3e 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800ba58:	f107 030b 	add.w	r3, r7, #11
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	68f9      	ldr	r1, [r7, #12]
 800ba60:	4618      	mov	r0, r3
 800ba62:	f004 fafc 	bl	801005e <memcpy>
 800ba66:	7afb      	ldrb	r3, [r7, #11]
 800ba68:	46b5      	mov	sp, r6
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	371c      	adds	r7, #28
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ba74 <_ZN12FlashManager22WriteFirstEmgPerSecondEh>:
 800ba74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba78:	b087      	sub	sp, #28
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	70fb      	strb	r3, [r7, #3]
 800ba82:	466b      	mov	r3, sp
 800ba84:	461e      	mov	r6, r3
 800ba86:	2301      	movs	r3, #1
 800ba88:	617b      	str	r3, [r7, #20]
 800ba8a:	6979      	ldr	r1, [r7, #20]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	613b      	str	r3, [r7, #16]
 800ba92:	2300      	movs	r3, #0
 800ba94:	4688      	mov	r8, r1
 800ba96:	4699      	mov	r9, r3
 800ba98:	f04f 0200 	mov.w	r2, #0
 800ba9c:	f04f 0300 	mov.w	r3, #0
 800baa0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800baa4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800baa8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800baac:	2300      	movs	r3, #0
 800baae:	460c      	mov	r4, r1
 800bab0:	461d      	mov	r5, r3
 800bab2:	f04f 0200 	mov.w	r2, #0
 800bab6:	f04f 0300 	mov.w	r3, #0
 800baba:	00eb      	lsls	r3, r5, #3
 800babc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bac0:	00e2      	lsls	r2, r4, #3
 800bac2:	1dcb      	adds	r3, r1, #7
 800bac4:	08db      	lsrs	r3, r3, #3
 800bac6:	00db      	lsls	r3, r3, #3
 800bac8:	ebad 0d03 	sub.w	sp, sp, r3
 800bacc:	466b      	mov	r3, sp
 800bace:	3300      	adds	r3, #0
 800bad0:	60fb      	str	r3, [r7, #12]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	460a      	mov	r2, r1
 800bad6:	1e51      	subs	r1, r2, #1
 800bad8:	78fa      	ldrb	r2, [r7, #3]
 800bada:	701a      	strb	r2, [r3, #0]
 800badc:	1c5a      	adds	r2, r3, #1
 800bade:	1e4b      	subs	r3, r1, #1
 800bae0:	e003      	b.n	800baea <_ZN12FlashManager22WriteFirstEmgPerSecondEh+0x76>
 800bae2:	2100      	movs	r1, #0
 800bae4:	7011      	strb	r1, [r2, #0]
 800bae6:	3b01      	subs	r3, #1
 800bae8:	3201      	adds	r2, #1
 800baea:	2b00      	cmp	r3, #0
 800baec:	daf9      	bge.n	800bae2 <_ZN12FlashManager22WriteFirstEmgPerSecondEh+0x6e>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	7d19      	ldrb	r1, [r3, #20]
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff fe4a 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800bafc:	46b5      	mov	sp, r6
 800bafe:	bf00      	nop
 800bb00:	371c      	adds	r7, #28
 800bb02:	46bd      	mov	sp, r7
 800bb04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bb08 <_ZN12FlashManager21ReadFirstEmgPerSecondEv>:
 800bb08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb0c:	b089      	sub	sp, #36	@ 0x24
 800bb0e:	af02      	add	r7, sp, #8
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	466b      	mov	r3, sp
 800bb14:	461e      	mov	r6, r3
 800bb16:	2301      	movs	r3, #1
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	6979      	ldr	r1, [r7, #20]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	613b      	str	r3, [r7, #16]
 800bb22:	2300      	movs	r3, #0
 800bb24:	4688      	mov	r8, r1
 800bb26:	4699      	mov	r9, r3
 800bb28:	f04f 0200 	mov.w	r2, #0
 800bb2c:	f04f 0300 	mov.w	r3, #0
 800bb30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bb34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bb38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	460c      	mov	r4, r1
 800bb40:	461d      	mov	r5, r3
 800bb42:	f04f 0200 	mov.w	r2, #0
 800bb46:	f04f 0300 	mov.w	r3, #0
 800bb4a:	00eb      	lsls	r3, r5, #3
 800bb4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb50:	00e2      	lsls	r2, r4, #3
 800bb52:	1dcb      	adds	r3, r1, #7
 800bb54:	08db      	lsrs	r3, r3, #3
 800bb56:	00db      	lsls	r3, r3, #3
 800bb58:	ebad 0d03 	sub.w	sp, sp, r3
 800bb5c:	ab02      	add	r3, sp, #8
 800bb5e:	3300      	adds	r3, #0
 800bb60:	60fb      	str	r3, [r7, #12]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	460a      	mov	r2, r1
 800bb66:	1e51      	subs	r1, r2, #1
 800bb68:	22ff      	movs	r2, #255	@ 0xff
 800bb6a:	701a      	strb	r2, [r3, #0]
 800bb6c:	1c5a      	adds	r2, r3, #1
 800bb6e:	1e4b      	subs	r3, r1, #1
 800bb70:	e003      	b.n	800bb7a <_ZN12FlashManager21ReadFirstEmgPerSecondEv+0x72>
 800bb72:	2100      	movs	r1, #0
 800bb74:	7011      	strb	r1, [r2, #0]
 800bb76:	3b01      	subs	r3, #1
 800bb78:	3201      	adds	r2, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	daf9      	bge.n	800bb72 <_ZN12FlashManager21ReadFirstEmgPerSecondEv+0x6a>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	7d1a      	ldrb	r2, [r3, #20]
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	2100      	movs	r1, #0
 800bb86:	9100      	str	r1, [sp, #0]
 800bb88:	68f9      	ldr	r1, [r7, #12]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7ff fca2 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800bb90:	f107 030b 	add.w	r3, r7, #11
 800bb94:	697a      	ldr	r2, [r7, #20]
 800bb96:	68f9      	ldr	r1, [r7, #12]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f004 fa60 	bl	801005e <memcpy>
 800bb9e:	7afb      	ldrb	r3, [r7, #11]
 800bba0:	46b5      	mov	sp, r6
 800bba2:	4618      	mov	r0, r3
 800bba4:	371c      	adds	r7, #28
 800bba6:	46bd      	mov	sp, r7
 800bba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bbac <_ZN12FlashManager23WriteSecondEmgPerSecondEh>:
 800bbac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbb0:	b087      	sub	sp, #28
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	70fb      	strb	r3, [r7, #3]
 800bbba:	466b      	mov	r3, sp
 800bbbc:	461e      	mov	r6, r3
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	617b      	str	r3, [r7, #20]
 800bbc2:	6979      	ldr	r1, [r7, #20]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	613b      	str	r3, [r7, #16]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	4688      	mov	r8, r1
 800bbce:	4699      	mov	r9, r3
 800bbd0:	f04f 0200 	mov.w	r2, #0
 800bbd4:	f04f 0300 	mov.w	r3, #0
 800bbd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bbdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bbe0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	460c      	mov	r4, r1
 800bbe8:	461d      	mov	r5, r3
 800bbea:	f04f 0200 	mov.w	r2, #0
 800bbee:	f04f 0300 	mov.w	r3, #0
 800bbf2:	00eb      	lsls	r3, r5, #3
 800bbf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bbf8:	00e2      	lsls	r2, r4, #3
 800bbfa:	1dcb      	adds	r3, r1, #7
 800bbfc:	08db      	lsrs	r3, r3, #3
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	ebad 0d03 	sub.w	sp, sp, r3
 800bc04:	466b      	mov	r3, sp
 800bc06:	3300      	adds	r3, #0
 800bc08:	60fb      	str	r3, [r7, #12]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	460a      	mov	r2, r1
 800bc0e:	1e51      	subs	r1, r2, #1
 800bc10:	78fa      	ldrb	r2, [r7, #3]
 800bc12:	701a      	strb	r2, [r3, #0]
 800bc14:	1c5a      	adds	r2, r3, #1
 800bc16:	1e4b      	subs	r3, r1, #1
 800bc18:	e003      	b.n	800bc22 <_ZN12FlashManager23WriteSecondEmgPerSecondEh+0x76>
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	7011      	strb	r1, [r2, #0]
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	3201      	adds	r2, #1
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	daf9      	bge.n	800bc1a <_ZN12FlashManager23WriteSecondEmgPerSecondEh+0x6e>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	7d59      	ldrb	r1, [r3, #21]
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7ff fdae 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800bc34:	46b5      	mov	sp, r6
 800bc36:	bf00      	nop
 800bc38:	371c      	adds	r7, #28
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bc40 <_ZN12FlashManager22ReadSecondEmgPerSecondEv>:
 800bc40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc44:	b089      	sub	sp, #36	@ 0x24
 800bc46:	af02      	add	r7, sp, #8
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	466b      	mov	r3, sp
 800bc4c:	461e      	mov	r6, r3
 800bc4e:	2301      	movs	r3, #1
 800bc50:	617b      	str	r3, [r7, #20]
 800bc52:	6979      	ldr	r1, [r7, #20]
 800bc54:	460b      	mov	r3, r1
 800bc56:	3b01      	subs	r3, #1
 800bc58:	613b      	str	r3, [r7, #16]
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	4688      	mov	r8, r1
 800bc5e:	4699      	mov	r9, r3
 800bc60:	f04f 0200 	mov.w	r2, #0
 800bc64:	f04f 0300 	mov.w	r3, #0
 800bc68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bc6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bc70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bc74:	2300      	movs	r3, #0
 800bc76:	460c      	mov	r4, r1
 800bc78:	461d      	mov	r5, r3
 800bc7a:	f04f 0200 	mov.w	r2, #0
 800bc7e:	f04f 0300 	mov.w	r3, #0
 800bc82:	00eb      	lsls	r3, r5, #3
 800bc84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc88:	00e2      	lsls	r2, r4, #3
 800bc8a:	1dcb      	adds	r3, r1, #7
 800bc8c:	08db      	lsrs	r3, r3, #3
 800bc8e:	00db      	lsls	r3, r3, #3
 800bc90:	ebad 0d03 	sub.w	sp, sp, r3
 800bc94:	ab02      	add	r3, sp, #8
 800bc96:	3300      	adds	r3, #0
 800bc98:	60fb      	str	r3, [r7, #12]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	460a      	mov	r2, r1
 800bc9e:	1e51      	subs	r1, r2, #1
 800bca0:	22ff      	movs	r2, #255	@ 0xff
 800bca2:	701a      	strb	r2, [r3, #0]
 800bca4:	1c5a      	adds	r2, r3, #1
 800bca6:	1e4b      	subs	r3, r1, #1
 800bca8:	e003      	b.n	800bcb2 <_ZN12FlashManager22ReadSecondEmgPerSecondEv+0x72>
 800bcaa:	2100      	movs	r1, #0
 800bcac:	7011      	strb	r1, [r2, #0]
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	3201      	adds	r2, #1
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	daf9      	bge.n	800bcaa <_ZN12FlashManager22ReadSecondEmgPerSecondEv+0x6a>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	7d5a      	ldrb	r2, [r3, #21]
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	9100      	str	r1, [sp, #0]
 800bcc0:	68f9      	ldr	r1, [r7, #12]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7ff fc06 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800bcc8:	f107 030b 	add.w	r3, r7, #11
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	68f9      	ldr	r1, [r7, #12]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f004 f9c4 	bl	801005e <memcpy>
 800bcd6:	7afb      	ldrb	r3, [r7, #11]
 800bcd8:	46b5      	mov	sp, r6
 800bcda:	4618      	mov	r0, r3
 800bcdc:	371c      	adds	r7, #28
 800bcde:	46bd      	mov	sp, r7
 800bce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bce4 <_ZN12FlashManager20WriteVolumePerSecondEh>:
 800bce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bce8:	b087      	sub	sp, #28
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	70fb      	strb	r3, [r7, #3]
 800bcf2:	466b      	mov	r3, sp
 800bcf4:	461e      	mov	r6, r3
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	617b      	str	r3, [r7, #20]
 800bcfa:	6979      	ldr	r1, [r7, #20]
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	613b      	str	r3, [r7, #16]
 800bd02:	2300      	movs	r3, #0
 800bd04:	4688      	mov	r8, r1
 800bd06:	4699      	mov	r9, r3
 800bd08:	f04f 0200 	mov.w	r2, #0
 800bd0c:	f04f 0300 	mov.w	r3, #0
 800bd10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bd14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bd18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	460c      	mov	r4, r1
 800bd20:	461d      	mov	r5, r3
 800bd22:	f04f 0200 	mov.w	r2, #0
 800bd26:	f04f 0300 	mov.w	r3, #0
 800bd2a:	00eb      	lsls	r3, r5, #3
 800bd2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bd30:	00e2      	lsls	r2, r4, #3
 800bd32:	1dcb      	adds	r3, r1, #7
 800bd34:	08db      	lsrs	r3, r3, #3
 800bd36:	00db      	lsls	r3, r3, #3
 800bd38:	ebad 0d03 	sub.w	sp, sp, r3
 800bd3c:	466b      	mov	r3, sp
 800bd3e:	3300      	adds	r3, #0
 800bd40:	60fb      	str	r3, [r7, #12]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	460a      	mov	r2, r1
 800bd46:	1e51      	subs	r1, r2, #1
 800bd48:	78fa      	ldrb	r2, [r7, #3]
 800bd4a:	701a      	strb	r2, [r3, #0]
 800bd4c:	1c5a      	adds	r2, r3, #1
 800bd4e:	1e4b      	subs	r3, r1, #1
 800bd50:	e003      	b.n	800bd5a <_ZN12FlashManager20WriteVolumePerSecondEh+0x76>
 800bd52:	2100      	movs	r1, #0
 800bd54:	7011      	strb	r1, [r2, #0]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	3201      	adds	r2, #1
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	daf9      	bge.n	800bd52 <_ZN12FlashManager20WriteVolumePerSecondEh+0x6e>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	7d99      	ldrb	r1, [r3, #22]
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f7ff fd12 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800bd6c:	46b5      	mov	sp, r6
 800bd6e:	bf00      	nop
 800bd70:	371c      	adds	r7, #28
 800bd72:	46bd      	mov	sp, r7
 800bd74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bd78 <_ZN12FlashManager19ReadVolumePerSecondEv>:
 800bd78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd7c:	b089      	sub	sp, #36	@ 0x24
 800bd7e:	af02      	add	r7, sp, #8
 800bd80:	6078      	str	r0, [r7, #4]
 800bd82:	466b      	mov	r3, sp
 800bd84:	461e      	mov	r6, r3
 800bd86:	2301      	movs	r3, #1
 800bd88:	617b      	str	r3, [r7, #20]
 800bd8a:	6979      	ldr	r1, [r7, #20]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	613b      	str	r3, [r7, #16]
 800bd92:	2300      	movs	r3, #0
 800bd94:	4688      	mov	r8, r1
 800bd96:	4699      	mov	r9, r3
 800bd98:	f04f 0200 	mov.w	r2, #0
 800bd9c:	f04f 0300 	mov.w	r3, #0
 800bda0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bda4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bda8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bdac:	2300      	movs	r3, #0
 800bdae:	460c      	mov	r4, r1
 800bdb0:	461d      	mov	r5, r3
 800bdb2:	f04f 0200 	mov.w	r2, #0
 800bdb6:	f04f 0300 	mov.w	r3, #0
 800bdba:	00eb      	lsls	r3, r5, #3
 800bdbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bdc0:	00e2      	lsls	r2, r4, #3
 800bdc2:	1dcb      	adds	r3, r1, #7
 800bdc4:	08db      	lsrs	r3, r3, #3
 800bdc6:	00db      	lsls	r3, r3, #3
 800bdc8:	ebad 0d03 	sub.w	sp, sp, r3
 800bdcc:	ab02      	add	r3, sp, #8
 800bdce:	3300      	adds	r3, #0
 800bdd0:	60fb      	str	r3, [r7, #12]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	460a      	mov	r2, r1
 800bdd6:	1e51      	subs	r1, r2, #1
 800bdd8:	22ff      	movs	r2, #255	@ 0xff
 800bdda:	701a      	strb	r2, [r3, #0]
 800bddc:	1c5a      	adds	r2, r3, #1
 800bdde:	1e4b      	subs	r3, r1, #1
 800bde0:	e003      	b.n	800bdea <_ZN12FlashManager19ReadVolumePerSecondEv+0x72>
 800bde2:	2100      	movs	r1, #0
 800bde4:	7011      	strb	r1, [r2, #0]
 800bde6:	3b01      	subs	r3, #1
 800bde8:	3201      	adds	r2, #1
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	daf9      	bge.n	800bde2 <_ZN12FlashManager19ReadVolumePerSecondEv+0x6a>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	7d9a      	ldrb	r2, [r3, #22]
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	9100      	str	r1, [sp, #0]
 800bdf8:	68f9      	ldr	r1, [r7, #12]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff fb6a 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800be00:	f107 030b 	add.w	r3, r7, #11
 800be04:	697a      	ldr	r2, [r7, #20]
 800be06:	68f9      	ldr	r1, [r7, #12]
 800be08:	4618      	mov	r0, r3
 800be0a:	f004 f928 	bl	801005e <memcpy>
 800be0e:	7afb      	ldrb	r3, [r7, #11]
 800be10:	46b5      	mov	sp, r6
 800be12:	4618      	mov	r0, r3
 800be14:	371c      	adds	r7, #28
 800be16:	46bd      	mov	sp, r7
 800be18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800be1c <_ZN12FlashManager18WriteFlowPerSecondEh>:
 800be1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be20:	b087      	sub	sp, #28
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	460b      	mov	r3, r1
 800be28:	70fb      	strb	r3, [r7, #3]
 800be2a:	466b      	mov	r3, sp
 800be2c:	461e      	mov	r6, r3
 800be2e:	2301      	movs	r3, #1
 800be30:	617b      	str	r3, [r7, #20]
 800be32:	6979      	ldr	r1, [r7, #20]
 800be34:	460b      	mov	r3, r1
 800be36:	3b01      	subs	r3, #1
 800be38:	613b      	str	r3, [r7, #16]
 800be3a:	2300      	movs	r3, #0
 800be3c:	4688      	mov	r8, r1
 800be3e:	4699      	mov	r9, r3
 800be40:	f04f 0200 	mov.w	r2, #0
 800be44:	f04f 0300 	mov.w	r3, #0
 800be48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800be4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800be50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800be54:	2300      	movs	r3, #0
 800be56:	460c      	mov	r4, r1
 800be58:	461d      	mov	r5, r3
 800be5a:	f04f 0200 	mov.w	r2, #0
 800be5e:	f04f 0300 	mov.w	r3, #0
 800be62:	00eb      	lsls	r3, r5, #3
 800be64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800be68:	00e2      	lsls	r2, r4, #3
 800be6a:	1dcb      	adds	r3, r1, #7
 800be6c:	08db      	lsrs	r3, r3, #3
 800be6e:	00db      	lsls	r3, r3, #3
 800be70:	ebad 0d03 	sub.w	sp, sp, r3
 800be74:	466b      	mov	r3, sp
 800be76:	3300      	adds	r3, #0
 800be78:	60fb      	str	r3, [r7, #12]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	460a      	mov	r2, r1
 800be7e:	1e51      	subs	r1, r2, #1
 800be80:	78fa      	ldrb	r2, [r7, #3]
 800be82:	701a      	strb	r2, [r3, #0]
 800be84:	1c5a      	adds	r2, r3, #1
 800be86:	1e4b      	subs	r3, r1, #1
 800be88:	e003      	b.n	800be92 <_ZN12FlashManager18WriteFlowPerSecondEh+0x76>
 800be8a:	2100      	movs	r1, #0
 800be8c:	7011      	strb	r1, [r2, #0]
 800be8e:	3b01      	subs	r3, #1
 800be90:	3201      	adds	r2, #1
 800be92:	2b00      	cmp	r3, #0
 800be94:	daf9      	bge.n	800be8a <_ZN12FlashManager18WriteFlowPerSecondEh+0x6e>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	7dd9      	ldrb	r1, [r3, #23]
 800be9a:	697a      	ldr	r2, [r7, #20]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f7ff fc76 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800bea4:	46b5      	mov	sp, r6
 800bea6:	bf00      	nop
 800bea8:	371c      	adds	r7, #28
 800beaa:	46bd      	mov	sp, r7
 800beac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800beb0 <_ZN12FlashManager17ReadFlowPerSecondEv>:
 800beb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800beb4:	b089      	sub	sp, #36	@ 0x24
 800beb6:	af02      	add	r7, sp, #8
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	466b      	mov	r3, sp
 800bebc:	461e      	mov	r6, r3
 800bebe:	2301      	movs	r3, #1
 800bec0:	617b      	str	r3, [r7, #20]
 800bec2:	6979      	ldr	r1, [r7, #20]
 800bec4:	460b      	mov	r3, r1
 800bec6:	3b01      	subs	r3, #1
 800bec8:	613b      	str	r3, [r7, #16]
 800beca:	2300      	movs	r3, #0
 800becc:	4688      	mov	r8, r1
 800bece:	4699      	mov	r9, r3
 800bed0:	f04f 0200 	mov.w	r2, #0
 800bed4:	f04f 0300 	mov.w	r3, #0
 800bed8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bedc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bee0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bee4:	2300      	movs	r3, #0
 800bee6:	460c      	mov	r4, r1
 800bee8:	461d      	mov	r5, r3
 800beea:	f04f 0200 	mov.w	r2, #0
 800beee:	f04f 0300 	mov.w	r3, #0
 800bef2:	00eb      	lsls	r3, r5, #3
 800bef4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bef8:	00e2      	lsls	r2, r4, #3
 800befa:	1dcb      	adds	r3, r1, #7
 800befc:	08db      	lsrs	r3, r3, #3
 800befe:	00db      	lsls	r3, r3, #3
 800bf00:	ebad 0d03 	sub.w	sp, sp, r3
 800bf04:	ab02      	add	r3, sp, #8
 800bf06:	3300      	adds	r3, #0
 800bf08:	60fb      	str	r3, [r7, #12]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	460a      	mov	r2, r1
 800bf0e:	1e51      	subs	r1, r2, #1
 800bf10:	22ff      	movs	r2, #255	@ 0xff
 800bf12:	701a      	strb	r2, [r3, #0]
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	1e4b      	subs	r3, r1, #1
 800bf18:	e003      	b.n	800bf22 <_ZN12FlashManager17ReadFlowPerSecondEv+0x72>
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	7011      	strb	r1, [r2, #0]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	3201      	adds	r2, #1
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	daf9      	bge.n	800bf1a <_ZN12FlashManager17ReadFlowPerSecondEv+0x6a>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	7dda      	ldrb	r2, [r3, #23]
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	9100      	str	r1, [sp, #0]
 800bf30:	68f9      	ldr	r1, [r7, #12]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff face 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800bf38:	f107 030b 	add.w	r3, r7, #11
 800bf3c:	697a      	ldr	r2, [r7, #20]
 800bf3e:	68f9      	ldr	r1, [r7, #12]
 800bf40:	4618      	mov	r0, r3
 800bf42:	f004 f88c 	bl	801005e <memcpy>
 800bf46:	7afb      	ldrb	r3, [r7, #11]
 800bf48:	46b5      	mov	sp, r6
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	371c      	adds	r7, #28
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bf54 <_ZN12FlashManager19WritePumpMaxRunTimeEh>:
 800bf54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf58:	b087      	sub	sp, #28
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
 800bf5e:	460b      	mov	r3, r1
 800bf60:	70fb      	strb	r3, [r7, #3]
 800bf62:	466b      	mov	r3, sp
 800bf64:	461e      	mov	r6, r3
 800bf66:	2301      	movs	r3, #1
 800bf68:	617b      	str	r3, [r7, #20]
 800bf6a:	6979      	ldr	r1, [r7, #20]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	613b      	str	r3, [r7, #16]
 800bf72:	2300      	movs	r3, #0
 800bf74:	4688      	mov	r8, r1
 800bf76:	4699      	mov	r9, r3
 800bf78:	f04f 0200 	mov.w	r2, #0
 800bf7c:	f04f 0300 	mov.w	r3, #0
 800bf80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bf84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bf88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	460c      	mov	r4, r1
 800bf90:	461d      	mov	r5, r3
 800bf92:	f04f 0200 	mov.w	r2, #0
 800bf96:	f04f 0300 	mov.w	r3, #0
 800bf9a:	00eb      	lsls	r3, r5, #3
 800bf9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bfa0:	00e2      	lsls	r2, r4, #3
 800bfa2:	1dcb      	adds	r3, r1, #7
 800bfa4:	08db      	lsrs	r3, r3, #3
 800bfa6:	00db      	lsls	r3, r3, #3
 800bfa8:	ebad 0d03 	sub.w	sp, sp, r3
 800bfac:	466b      	mov	r3, sp
 800bfae:	3300      	adds	r3, #0
 800bfb0:	60fb      	str	r3, [r7, #12]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	460a      	mov	r2, r1
 800bfb6:	1e51      	subs	r1, r2, #1
 800bfb8:	78fa      	ldrb	r2, [r7, #3]
 800bfba:	701a      	strb	r2, [r3, #0]
 800bfbc:	1c5a      	adds	r2, r3, #1
 800bfbe:	1e4b      	subs	r3, r1, #1
 800bfc0:	e003      	b.n	800bfca <_ZN12FlashManager19WritePumpMaxRunTimeEh+0x76>
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	7011      	strb	r1, [r2, #0]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	3201      	adds	r2, #1
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	daf9      	bge.n	800bfc2 <_ZN12FlashManager19WritePumpMaxRunTimeEh+0x6e>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	7e19      	ldrb	r1, [r3, #24]
 800bfd2:	697a      	ldr	r2, [r7, #20]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7ff fbda 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800bfdc:	46b5      	mov	sp, r6
 800bfde:	bf00      	nop
 800bfe0:	371c      	adds	r7, #28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bfe8 <_ZN12FlashManager18ReadPumpMaxRunTimeEv>:
 800bfe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfec:	b089      	sub	sp, #36	@ 0x24
 800bfee:	af02      	add	r7, sp, #8
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	466b      	mov	r3, sp
 800bff4:	461e      	mov	r6, r3
 800bff6:	2301      	movs	r3, #1
 800bff8:	617b      	str	r3, [r7, #20]
 800bffa:	6979      	ldr	r1, [r7, #20]
 800bffc:	460b      	mov	r3, r1
 800bffe:	3b01      	subs	r3, #1
 800c000:	613b      	str	r3, [r7, #16]
 800c002:	2300      	movs	r3, #0
 800c004:	4688      	mov	r8, r1
 800c006:	4699      	mov	r9, r3
 800c008:	f04f 0200 	mov.w	r2, #0
 800c00c:	f04f 0300 	mov.w	r3, #0
 800c010:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c014:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c018:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c01c:	2300      	movs	r3, #0
 800c01e:	460c      	mov	r4, r1
 800c020:	461d      	mov	r5, r3
 800c022:	f04f 0200 	mov.w	r2, #0
 800c026:	f04f 0300 	mov.w	r3, #0
 800c02a:	00eb      	lsls	r3, r5, #3
 800c02c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c030:	00e2      	lsls	r2, r4, #3
 800c032:	1dcb      	adds	r3, r1, #7
 800c034:	08db      	lsrs	r3, r3, #3
 800c036:	00db      	lsls	r3, r3, #3
 800c038:	ebad 0d03 	sub.w	sp, sp, r3
 800c03c:	ab02      	add	r3, sp, #8
 800c03e:	3300      	adds	r3, #0
 800c040:	60fb      	str	r3, [r7, #12]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	460a      	mov	r2, r1
 800c046:	1e51      	subs	r1, r2, #1
 800c048:	22ff      	movs	r2, #255	@ 0xff
 800c04a:	701a      	strb	r2, [r3, #0]
 800c04c:	1c5a      	adds	r2, r3, #1
 800c04e:	1e4b      	subs	r3, r1, #1
 800c050:	e003      	b.n	800c05a <_ZN12FlashManager18ReadPumpMaxRunTimeEv+0x72>
 800c052:	2100      	movs	r1, #0
 800c054:	7011      	strb	r1, [r2, #0]
 800c056:	3b01      	subs	r3, #1
 800c058:	3201      	adds	r2, #1
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	daf9      	bge.n	800c052 <_ZN12FlashManager18ReadPumpMaxRunTimeEv+0x6a>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	7e1a      	ldrb	r2, [r3, #24]
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2100      	movs	r1, #0
 800c066:	9100      	str	r1, [sp, #0]
 800c068:	68f9      	ldr	r1, [r7, #12]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7ff fa32 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800c070:	f107 030b 	add.w	r3, r7, #11
 800c074:	697a      	ldr	r2, [r7, #20]
 800c076:	68f9      	ldr	r1, [r7, #12]
 800c078:	4618      	mov	r0, r3
 800c07a:	f003 fff0 	bl	801005e <memcpy>
 800c07e:	7afb      	ldrb	r3, [r7, #11]
 800c080:	46b5      	mov	sp, r6
 800c082:	4618      	mov	r0, r3
 800c084:	371c      	adds	r7, #28
 800c086:	46bd      	mov	sp, r7
 800c088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c08c <_ZN12FlashManager20WriteValveMaxRunTimeEh>:
 800c08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c090:	b087      	sub	sp, #28
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	460b      	mov	r3, r1
 800c098:	70fb      	strb	r3, [r7, #3]
 800c09a:	466b      	mov	r3, sp
 800c09c:	461e      	mov	r6, r3
 800c09e:	2301      	movs	r3, #1
 800c0a0:	617b      	str	r3, [r7, #20]
 800c0a2:	6979      	ldr	r1, [r7, #20]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	613b      	str	r3, [r7, #16]
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	4688      	mov	r8, r1
 800c0ae:	4699      	mov	r9, r3
 800c0b0:	f04f 0200 	mov.w	r2, #0
 800c0b4:	f04f 0300 	mov.w	r3, #0
 800c0b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c0bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c0c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	460c      	mov	r4, r1
 800c0c8:	461d      	mov	r5, r3
 800c0ca:	f04f 0200 	mov.w	r2, #0
 800c0ce:	f04f 0300 	mov.w	r3, #0
 800c0d2:	00eb      	lsls	r3, r5, #3
 800c0d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c0d8:	00e2      	lsls	r2, r4, #3
 800c0da:	1dcb      	adds	r3, r1, #7
 800c0dc:	08db      	lsrs	r3, r3, #3
 800c0de:	00db      	lsls	r3, r3, #3
 800c0e0:	ebad 0d03 	sub.w	sp, sp, r3
 800c0e4:	466b      	mov	r3, sp
 800c0e6:	3300      	adds	r3, #0
 800c0e8:	60fb      	str	r3, [r7, #12]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	460a      	mov	r2, r1
 800c0ee:	1e51      	subs	r1, r2, #1
 800c0f0:	78fa      	ldrb	r2, [r7, #3]
 800c0f2:	701a      	strb	r2, [r3, #0]
 800c0f4:	1c5a      	adds	r2, r3, #1
 800c0f6:	1e4b      	subs	r3, r1, #1
 800c0f8:	e003      	b.n	800c102 <_ZN12FlashManager20WriteValveMaxRunTimeEh+0x76>
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	7011      	strb	r1, [r2, #0]
 800c0fe:	3b01      	subs	r3, #1
 800c100:	3201      	adds	r2, #1
 800c102:	2b00      	cmp	r3, #0
 800c104:	daf9      	bge.n	800c0fa <_ZN12FlashManager20WriteValveMaxRunTimeEh+0x6e>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	7e59      	ldrb	r1, [r3, #25]
 800c10a:	697a      	ldr	r2, [r7, #20]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff fb3e 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800c114:	46b5      	mov	sp, r6
 800c116:	bf00      	nop
 800c118:	371c      	adds	r7, #28
 800c11a:	46bd      	mov	sp, r7
 800c11c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c120 <_ZN12FlashManager19ReadValveMaxRunTimeEv>:
 800c120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c124:	b089      	sub	sp, #36	@ 0x24
 800c126:	af02      	add	r7, sp, #8
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	466b      	mov	r3, sp
 800c12c:	461e      	mov	r6, r3
 800c12e:	2301      	movs	r3, #1
 800c130:	617b      	str	r3, [r7, #20]
 800c132:	6979      	ldr	r1, [r7, #20]
 800c134:	460b      	mov	r3, r1
 800c136:	3b01      	subs	r3, #1
 800c138:	613b      	str	r3, [r7, #16]
 800c13a:	2300      	movs	r3, #0
 800c13c:	4688      	mov	r8, r1
 800c13e:	4699      	mov	r9, r3
 800c140:	f04f 0200 	mov.w	r2, #0
 800c144:	f04f 0300 	mov.w	r3, #0
 800c148:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c14c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c150:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c154:	2300      	movs	r3, #0
 800c156:	460c      	mov	r4, r1
 800c158:	461d      	mov	r5, r3
 800c15a:	f04f 0200 	mov.w	r2, #0
 800c15e:	f04f 0300 	mov.w	r3, #0
 800c162:	00eb      	lsls	r3, r5, #3
 800c164:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c168:	00e2      	lsls	r2, r4, #3
 800c16a:	1dcb      	adds	r3, r1, #7
 800c16c:	08db      	lsrs	r3, r3, #3
 800c16e:	00db      	lsls	r3, r3, #3
 800c170:	ebad 0d03 	sub.w	sp, sp, r3
 800c174:	ab02      	add	r3, sp, #8
 800c176:	3300      	adds	r3, #0
 800c178:	60fb      	str	r3, [r7, #12]
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	460a      	mov	r2, r1
 800c17e:	1e51      	subs	r1, r2, #1
 800c180:	22ff      	movs	r2, #255	@ 0xff
 800c182:	701a      	strb	r2, [r3, #0]
 800c184:	1c5a      	adds	r2, r3, #1
 800c186:	1e4b      	subs	r3, r1, #1
 800c188:	e003      	b.n	800c192 <_ZN12FlashManager19ReadValveMaxRunTimeEv+0x72>
 800c18a:	2100      	movs	r1, #0
 800c18c:	7011      	strb	r1, [r2, #0]
 800c18e:	3b01      	subs	r3, #1
 800c190:	3201      	adds	r2, #1
 800c192:	2b00      	cmp	r3, #0
 800c194:	daf9      	bge.n	800c18a <_ZN12FlashManager19ReadValveMaxRunTimeEv+0x6a>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	7e5a      	ldrb	r2, [r3, #25]
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2100      	movs	r1, #0
 800c19e:	9100      	str	r1, [sp, #0]
 800c1a0:	68f9      	ldr	r1, [r7, #12]
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7ff f996 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800c1a8:	f107 030b 	add.w	r3, r7, #11
 800c1ac:	697a      	ldr	r2, [r7, #20]
 800c1ae:	68f9      	ldr	r1, [r7, #12]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f003 ff54 	bl	801005e <memcpy>
 800c1b6:	7afb      	ldrb	r3, [r7, #11]
 800c1b8:	46b5      	mov	sp, r6
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	371c      	adds	r7, #28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c1c4 <_ZN12FlashManager13WriteFlowRateEd>:
 800c1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1c8:	b089      	sub	sp, #36	@ 0x24
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	60f8      	str	r0, [r7, #12]
 800c1ce:	ed87 0b00 	vstr	d0, [r7]
 800c1d2:	466b      	mov	r3, sp
 800c1d4:	461e      	mov	r6, r3
 800c1d6:	2308      	movs	r3, #8
 800c1d8:	61fb      	str	r3, [r7, #28]
 800c1da:	69f9      	ldr	r1, [r7, #28]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	61bb      	str	r3, [r7, #24]
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4688      	mov	r8, r1
 800c1e6:	4699      	mov	r9, r3
 800c1e8:	f04f 0200 	mov.w	r2, #0
 800c1ec:	f04f 0300 	mov.w	r3, #0
 800c1f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c1f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c1f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	460c      	mov	r4, r1
 800c200:	461d      	mov	r5, r3
 800c202:	f04f 0200 	mov.w	r2, #0
 800c206:	f04f 0300 	mov.w	r3, #0
 800c20a:	00eb      	lsls	r3, r5, #3
 800c20c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c210:	00e2      	lsls	r2, r4, #3
 800c212:	1dcb      	adds	r3, r1, #7
 800c214:	08db      	lsrs	r3, r3, #3
 800c216:	00db      	lsls	r3, r3, #3
 800c218:	ebad 0d03 	sub.w	sp, sp, r3
 800c21c:	466b      	mov	r3, sp
 800c21e:	3300      	adds	r3, #0
 800c220:	617b      	str	r3, [r7, #20]
 800c222:	463b      	mov	r3, r7
 800c224:	69fa      	ldr	r2, [r7, #28]
 800c226:	4619      	mov	r1, r3
 800c228:	6978      	ldr	r0, [r7, #20]
 800c22a:	f003 ff18 	bl	801005e <memcpy>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	7b19      	ldrb	r1, [r3, #12]
 800c232:	69fa      	ldr	r2, [r7, #28]
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f7ff faaa 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800c23c:	46b5      	mov	sp, r6
 800c23e:	bf00      	nop
 800c240:	3724      	adds	r7, #36	@ 0x24
 800c242:	46bd      	mov	sp, r7
 800c244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c248 <_ZN12FlashManager12ReadFlowRateEv>:
 800c248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c24c:	b08b      	sub	sp, #44	@ 0x2c
 800c24e:	af02      	add	r7, sp, #8
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	466b      	mov	r3, sp
 800c254:	461e      	mov	r6, r3
 800c256:	2308      	movs	r3, #8
 800c258:	61fb      	str	r3, [r7, #28]
 800c25a:	69f9      	ldr	r1, [r7, #28]
 800c25c:	460b      	mov	r3, r1
 800c25e:	3b01      	subs	r3, #1
 800c260:	61bb      	str	r3, [r7, #24]
 800c262:	2300      	movs	r3, #0
 800c264:	4688      	mov	r8, r1
 800c266:	4699      	mov	r9, r3
 800c268:	f04f 0200 	mov.w	r2, #0
 800c26c:	f04f 0300 	mov.w	r3, #0
 800c270:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c274:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c278:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c27c:	2300      	movs	r3, #0
 800c27e:	460c      	mov	r4, r1
 800c280:	461d      	mov	r5, r3
 800c282:	f04f 0200 	mov.w	r2, #0
 800c286:	f04f 0300 	mov.w	r3, #0
 800c28a:	00eb      	lsls	r3, r5, #3
 800c28c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c290:	00e2      	lsls	r2, r4, #3
 800c292:	1dcb      	adds	r3, r1, #7
 800c294:	08db      	lsrs	r3, r3, #3
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	ebad 0d03 	sub.w	sp, sp, r3
 800c29c:	ab02      	add	r3, sp, #8
 800c29e:	3300      	adds	r3, #0
 800c2a0:	617b      	str	r3, [r7, #20]
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	460a      	mov	r2, r1
 800c2a6:	1e51      	subs	r1, r2, #1
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	701a      	strb	r2, [r3, #0]
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	1e4b      	subs	r3, r1, #1
 800c2b0:	e003      	b.n	800c2ba <_ZN12FlashManager12ReadFlowRateEv+0x72>
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	7011      	strb	r1, [r2, #0]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	3201      	adds	r2, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	daf9      	bge.n	800c2b2 <_ZN12FlashManager12ReadFlowRateEv+0x6a>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	7b1a      	ldrb	r2, [r3, #12]
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	9100      	str	r1, [sp, #0]
 800c2c8:	6979      	ldr	r1, [r7, #20]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7ff f902 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800c2d0:	f107 0308 	add.w	r3, r7, #8
 800c2d4:	69fa      	ldr	r2, [r7, #28]
 800c2d6:	6979      	ldr	r1, [r7, #20]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f003 fec0 	bl	801005e <memcpy>
 800c2de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c2e2:	46b5      	mov	sp, r6
 800c2e4:	ec43 2b17 	vmov	d7, r2, r3
 800c2e8:	eeb0 0a47 	vmov.f32	s0, s14
 800c2ec:	eef0 0a67 	vmov.f32	s1, s15
 800c2f0:	3724      	adds	r7, #36	@ 0x24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c2f8 <_ZN12FlashManager15WriteVolumeRateEd>:
 800c2f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2fc:	b089      	sub	sp, #36	@ 0x24
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	60f8      	str	r0, [r7, #12]
 800c302:	ed87 0b00 	vstr	d0, [r7]
 800c306:	466b      	mov	r3, sp
 800c308:	461e      	mov	r6, r3
 800c30a:	2308      	movs	r3, #8
 800c30c:	61fb      	str	r3, [r7, #28]
 800c30e:	69f9      	ldr	r1, [r7, #28]
 800c310:	460b      	mov	r3, r1
 800c312:	3b01      	subs	r3, #1
 800c314:	61bb      	str	r3, [r7, #24]
 800c316:	2300      	movs	r3, #0
 800c318:	4688      	mov	r8, r1
 800c31a:	4699      	mov	r9, r3
 800c31c:	f04f 0200 	mov.w	r2, #0
 800c320:	f04f 0300 	mov.w	r3, #0
 800c324:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c328:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c32c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c330:	2300      	movs	r3, #0
 800c332:	460c      	mov	r4, r1
 800c334:	461d      	mov	r5, r3
 800c336:	f04f 0200 	mov.w	r2, #0
 800c33a:	f04f 0300 	mov.w	r3, #0
 800c33e:	00eb      	lsls	r3, r5, #3
 800c340:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c344:	00e2      	lsls	r2, r4, #3
 800c346:	1dcb      	adds	r3, r1, #7
 800c348:	08db      	lsrs	r3, r3, #3
 800c34a:	00db      	lsls	r3, r3, #3
 800c34c:	ebad 0d03 	sub.w	sp, sp, r3
 800c350:	466b      	mov	r3, sp
 800c352:	3300      	adds	r3, #0
 800c354:	617b      	str	r3, [r7, #20]
 800c356:	463b      	mov	r3, r7
 800c358:	69fa      	ldr	r2, [r7, #28]
 800c35a:	4619      	mov	r1, r3
 800c35c:	6978      	ldr	r0, [r7, #20]
 800c35e:	f003 fe7e 	bl	801005e <memcpy>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	7b59      	ldrb	r1, [r3, #13]
 800c366:	69fa      	ldr	r2, [r7, #28]
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f7ff fa10 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800c370:	46b5      	mov	sp, r6
 800c372:	bf00      	nop
 800c374:	3724      	adds	r7, #36	@ 0x24
 800c376:	46bd      	mov	sp, r7
 800c378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c37c <_ZN12FlashManager14ReadVolumeRateEv>:
 800c37c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c380:	b08b      	sub	sp, #44	@ 0x2c
 800c382:	af02      	add	r7, sp, #8
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	466b      	mov	r3, sp
 800c388:	461e      	mov	r6, r3
 800c38a:	2308      	movs	r3, #8
 800c38c:	61fb      	str	r3, [r7, #28]
 800c38e:	69f9      	ldr	r1, [r7, #28]
 800c390:	460b      	mov	r3, r1
 800c392:	3b01      	subs	r3, #1
 800c394:	61bb      	str	r3, [r7, #24]
 800c396:	2300      	movs	r3, #0
 800c398:	4688      	mov	r8, r1
 800c39a:	4699      	mov	r9, r3
 800c39c:	f04f 0200 	mov.w	r2, #0
 800c3a0:	f04f 0300 	mov.w	r3, #0
 800c3a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c3a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c3ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	461d      	mov	r5, r3
 800c3b6:	f04f 0200 	mov.w	r2, #0
 800c3ba:	f04f 0300 	mov.w	r3, #0
 800c3be:	00eb      	lsls	r3, r5, #3
 800c3c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c3c4:	00e2      	lsls	r2, r4, #3
 800c3c6:	1dcb      	adds	r3, r1, #7
 800c3c8:	08db      	lsrs	r3, r3, #3
 800c3ca:	00db      	lsls	r3, r3, #3
 800c3cc:	ebad 0d03 	sub.w	sp, sp, r3
 800c3d0:	ab02      	add	r3, sp, #8
 800c3d2:	3300      	adds	r3, #0
 800c3d4:	617b      	str	r3, [r7, #20]
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	460a      	mov	r2, r1
 800c3da:	1e51      	subs	r1, r2, #1
 800c3dc:	2200      	movs	r2, #0
 800c3de:	701a      	strb	r2, [r3, #0]
 800c3e0:	1c5a      	adds	r2, r3, #1
 800c3e2:	1e4b      	subs	r3, r1, #1
 800c3e4:	e003      	b.n	800c3ee <_ZN12FlashManager14ReadVolumeRateEv+0x72>
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	7011      	strb	r1, [r2, #0]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	3201      	adds	r2, #1
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	daf9      	bge.n	800c3e6 <_ZN12FlashManager14ReadVolumeRateEv+0x6a>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	7b5a      	ldrb	r2, [r3, #13]
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	9100      	str	r1, [sp, #0]
 800c3fc:	6979      	ldr	r1, [r7, #20]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff f868 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800c404:	f107 0308 	add.w	r3, r7, #8
 800c408:	69fa      	ldr	r2, [r7, #28]
 800c40a:	6979      	ldr	r1, [r7, #20]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f003 fe26 	bl	801005e <memcpy>
 800c412:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c416:	46b5      	mov	sp, r6
 800c418:	ec43 2b17 	vmov	d7, r2, r3
 800c41c:	eeb0 0a47 	vmov.f32	s0, s14
 800c420:	eef0 0a67 	vmov.f32	s1, s15
 800c424:	3724      	adds	r7, #36	@ 0x24
 800c426:	46bd      	mov	sp, r7
 800c428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c42c <_ZN12FlashManager18WriteVolumeAverageEm>:
 800c42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c430:	b087      	sub	sp, #28
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	6039      	str	r1, [r7, #0]
 800c438:	466b      	mov	r3, sp
 800c43a:	461e      	mov	r6, r3
 800c43c:	2304      	movs	r3, #4
 800c43e:	617b      	str	r3, [r7, #20]
 800c440:	6979      	ldr	r1, [r7, #20]
 800c442:	460b      	mov	r3, r1
 800c444:	3b01      	subs	r3, #1
 800c446:	613b      	str	r3, [r7, #16]
 800c448:	2300      	movs	r3, #0
 800c44a:	4688      	mov	r8, r1
 800c44c:	4699      	mov	r9, r3
 800c44e:	f04f 0200 	mov.w	r2, #0
 800c452:	f04f 0300 	mov.w	r3, #0
 800c456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c45a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c45e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c462:	2300      	movs	r3, #0
 800c464:	460c      	mov	r4, r1
 800c466:	461d      	mov	r5, r3
 800c468:	f04f 0200 	mov.w	r2, #0
 800c46c:	f04f 0300 	mov.w	r3, #0
 800c470:	00eb      	lsls	r3, r5, #3
 800c472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c476:	00e2      	lsls	r2, r4, #3
 800c478:	1dcb      	adds	r3, r1, #7
 800c47a:	08db      	lsrs	r3, r3, #3
 800c47c:	00db      	lsls	r3, r3, #3
 800c47e:	ebad 0d03 	sub.w	sp, sp, r3
 800c482:	466b      	mov	r3, sp
 800c484:	3300      	adds	r3, #0
 800c486:	60fb      	str	r3, [r7, #12]
 800c488:	463b      	mov	r3, r7
 800c48a:	697a      	ldr	r2, [r7, #20]
 800c48c:	4619      	mov	r1, r3
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f003 fde5 	bl	801005e <memcpy>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	7bd9      	ldrb	r1, [r3, #15]
 800c498:	697a      	ldr	r2, [r7, #20]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f7ff f977 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800c4a2:	46b5      	mov	sp, r6
 800c4a4:	bf00      	nop
 800c4a6:	371c      	adds	r7, #28
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c4ae <_ZN12FlashManager17ReadVolumeAverageEv>:
 800c4ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4b2:	b089      	sub	sp, #36	@ 0x24
 800c4b4:	af02      	add	r7, sp, #8
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	466b      	mov	r3, sp
 800c4ba:	461e      	mov	r6, r3
 800c4bc:	2304      	movs	r3, #4
 800c4be:	617b      	str	r3, [r7, #20]
 800c4c0:	6979      	ldr	r1, [r7, #20]
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	613b      	str	r3, [r7, #16]
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	4688      	mov	r8, r1
 800c4cc:	4699      	mov	r9, r3
 800c4ce:	f04f 0200 	mov.w	r2, #0
 800c4d2:	f04f 0300 	mov.w	r3, #0
 800c4d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c4da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c4de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	460c      	mov	r4, r1
 800c4e6:	461d      	mov	r5, r3
 800c4e8:	f04f 0200 	mov.w	r2, #0
 800c4ec:	f04f 0300 	mov.w	r3, #0
 800c4f0:	00eb      	lsls	r3, r5, #3
 800c4f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c4f6:	00e2      	lsls	r2, r4, #3
 800c4f8:	1dcb      	adds	r3, r1, #7
 800c4fa:	08db      	lsrs	r3, r3, #3
 800c4fc:	00db      	lsls	r3, r3, #3
 800c4fe:	ebad 0d03 	sub.w	sp, sp, r3
 800c502:	ab02      	add	r3, sp, #8
 800c504:	3300      	adds	r3, #0
 800c506:	60fb      	str	r3, [r7, #12]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	460a      	mov	r2, r1
 800c50c:	1e51      	subs	r1, r2, #1
 800c50e:	2200      	movs	r2, #0
 800c510:	701a      	strb	r2, [r3, #0]
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	1e4b      	subs	r3, r1, #1
 800c516:	e003      	b.n	800c520 <_ZN12FlashManager17ReadVolumeAverageEv+0x72>
 800c518:	2100      	movs	r1, #0
 800c51a:	7011      	strb	r1, [r2, #0]
 800c51c:	3b01      	subs	r3, #1
 800c51e:	3201      	adds	r2, #1
 800c520:	2b00      	cmp	r3, #0
 800c522:	daf9      	bge.n	800c518 <_ZN12FlashManager17ReadVolumeAverageEv+0x6a>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	7bda      	ldrb	r2, [r3, #15]
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	2100      	movs	r1, #0
 800c52c:	9100      	str	r1, [sp, #0]
 800c52e:	68f9      	ldr	r1, [r7, #12]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7fe ffcf 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800c536:	f107 0308 	add.w	r3, r7, #8
 800c53a:	697a      	ldr	r2, [r7, #20]
 800c53c:	68f9      	ldr	r1, [r7, #12]
 800c53e:	4618      	mov	r0, r3
 800c540:	f003 fd8d 	bl	801005e <memcpy>
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	46b5      	mov	sp, r6
 800c548:	4618      	mov	r0, r3
 800c54a:	371c      	adds	r7, #28
 800c54c:	46bd      	mov	sp, r7
 800c54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c552 <_ZN12FlashManager16WriteFlowAverageEm>:
 800c552:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c556:	b087      	sub	sp, #28
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
 800c55e:	466b      	mov	r3, sp
 800c560:	461e      	mov	r6, r3
 800c562:	2304      	movs	r3, #4
 800c564:	617b      	str	r3, [r7, #20]
 800c566:	6979      	ldr	r1, [r7, #20]
 800c568:	460b      	mov	r3, r1
 800c56a:	3b01      	subs	r3, #1
 800c56c:	613b      	str	r3, [r7, #16]
 800c56e:	2300      	movs	r3, #0
 800c570:	4688      	mov	r8, r1
 800c572:	4699      	mov	r9, r3
 800c574:	f04f 0200 	mov.w	r2, #0
 800c578:	f04f 0300 	mov.w	r3, #0
 800c57c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c580:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c584:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c588:	2300      	movs	r3, #0
 800c58a:	460c      	mov	r4, r1
 800c58c:	461d      	mov	r5, r3
 800c58e:	f04f 0200 	mov.w	r2, #0
 800c592:	f04f 0300 	mov.w	r3, #0
 800c596:	00eb      	lsls	r3, r5, #3
 800c598:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c59c:	00e2      	lsls	r2, r4, #3
 800c59e:	1dcb      	adds	r3, r1, #7
 800c5a0:	08db      	lsrs	r3, r3, #3
 800c5a2:	00db      	lsls	r3, r3, #3
 800c5a4:	ebad 0d03 	sub.w	sp, sp, r3
 800c5a8:	466b      	mov	r3, sp
 800c5aa:	3300      	adds	r3, #0
 800c5ac:	60fb      	str	r3, [r7, #12]
 800c5ae:	463b      	mov	r3, r7
 800c5b0:	697a      	ldr	r2, [r7, #20]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f003 fd52 	bl	801005e <memcpy>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	7b99      	ldrb	r1, [r3, #14]
 800c5be:	697a      	ldr	r2, [r7, #20]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7ff f8e4 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800c5c8:	46b5      	mov	sp, r6
 800c5ca:	bf00      	nop
 800c5cc:	371c      	adds	r7, #28
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c5d4 <_ZN12FlashManager15ReadFlowAverageEv>:
 800c5d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	b089      	sub	sp, #36	@ 0x24
 800c5da:	af02      	add	r7, sp, #8
 800c5dc:	6078      	str	r0, [r7, #4]
 800c5de:	466b      	mov	r3, sp
 800c5e0:	461e      	mov	r6, r3
 800c5e2:	2304      	movs	r3, #4
 800c5e4:	617b      	str	r3, [r7, #20]
 800c5e6:	6979      	ldr	r1, [r7, #20]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	613b      	str	r3, [r7, #16]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	4688      	mov	r8, r1
 800c5f2:	4699      	mov	r9, r3
 800c5f4:	f04f 0200 	mov.w	r2, #0
 800c5f8:	f04f 0300 	mov.w	r3, #0
 800c5fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c600:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c604:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c608:	2300      	movs	r3, #0
 800c60a:	460c      	mov	r4, r1
 800c60c:	461d      	mov	r5, r3
 800c60e:	f04f 0200 	mov.w	r2, #0
 800c612:	f04f 0300 	mov.w	r3, #0
 800c616:	00eb      	lsls	r3, r5, #3
 800c618:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c61c:	00e2      	lsls	r2, r4, #3
 800c61e:	1dcb      	adds	r3, r1, #7
 800c620:	08db      	lsrs	r3, r3, #3
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	ebad 0d03 	sub.w	sp, sp, r3
 800c628:	ab02      	add	r3, sp, #8
 800c62a:	3300      	adds	r3, #0
 800c62c:	60fb      	str	r3, [r7, #12]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	460a      	mov	r2, r1
 800c632:	1e51      	subs	r1, r2, #1
 800c634:	2200      	movs	r2, #0
 800c636:	701a      	strb	r2, [r3, #0]
 800c638:	1c5a      	adds	r2, r3, #1
 800c63a:	1e4b      	subs	r3, r1, #1
 800c63c:	e003      	b.n	800c646 <_ZN12FlashManager15ReadFlowAverageEv+0x72>
 800c63e:	2100      	movs	r1, #0
 800c640:	7011      	strb	r1, [r2, #0]
 800c642:	3b01      	subs	r3, #1
 800c644:	3201      	adds	r2, #1
 800c646:	2b00      	cmp	r3, #0
 800c648:	daf9      	bge.n	800c63e <_ZN12FlashManager15ReadFlowAverageEv+0x6a>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	7b9a      	ldrb	r2, [r3, #14]
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	2100      	movs	r1, #0
 800c652:	9100      	str	r1, [sp, #0]
 800c654:	68f9      	ldr	r1, [r7, #12]
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7fe ff3c 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800c65c:	f107 0308 	add.w	r3, r7, #8
 800c660:	697a      	ldr	r2, [r7, #20]
 800c662:	68f9      	ldr	r1, [r7, #12]
 800c664:	4618      	mov	r0, r3
 800c666:	f003 fcfa 	bl	801005e <memcpy>
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	46b5      	mov	sp, r6
 800c66e:	4618      	mov	r0, r3
 800c670:	371c      	adds	r7, #28
 800c672:	46bd      	mov	sp, r7
 800c674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c678 <_ZN12FlashManager17WriteFirstEmgDataEttt>:
 800c678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67c:	b093      	sub	sp, #76	@ 0x4c
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6278      	str	r0, [r7, #36]	@ 0x24
 800c682:	4610      	mov	r0, r2
 800c684:	461a      	mov	r2, r3
 800c686:	460b      	mov	r3, r1
 800c688:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c68a:	4603      	mov	r3, r0
 800c68c:	843b      	strh	r3, [r7, #32]
 800c68e:	4613      	mov	r3, r2
 800c690:	83fb      	strh	r3, [r7, #30]
 800c692:	466b      	mov	r3, sp
 800c694:	461e      	mov	r6, r3
 800c696:	2302      	movs	r3, #2
 800c698:	647b      	str	r3, [r7, #68]	@ 0x44
 800c69a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c69c:	460b      	mov	r3, r1
 800c69e:	3b01      	subs	r3, #1
 800c6a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	460c      	mov	r4, r1
 800c6a6:	461d      	mov	r5, r3
 800c6a8:	f04f 0200 	mov.w	r2, #0
 800c6ac:	f04f 0300 	mov.w	r3, #0
 800c6b0:	00eb      	lsls	r3, r5, #3
 800c6b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c6b6:	00e2      	lsls	r2, r4, #3
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	6139      	str	r1, [r7, #16]
 800c6bc:	617b      	str	r3, [r7, #20]
 800c6be:	f04f 0200 	mov.w	r2, #0
 800c6c2:	f04f 0300 	mov.w	r3, #0
 800c6c6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	00c3      	lsls	r3, r0, #3
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	00c2      	lsls	r2, r0, #3
 800c6d8:	1dcb      	adds	r3, r1, #7
 800c6da:	08db      	lsrs	r3, r3, #3
 800c6dc:	00db      	lsls	r3, r3, #3
 800c6de:	ebad 0d03 	sub.w	sp, sp, r3
 800c6e2:	466b      	mov	r3, sp
 800c6e4:	3300      	adds	r3, #0
 800c6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	60b9      	str	r1, [r7, #8]
 800c6f4:	60fb      	str	r3, [r7, #12]
 800c6f6:	f04f 0200 	mov.w	r2, #0
 800c6fa:	f04f 0300 	mov.w	r3, #0
 800c6fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c702:	4628      	mov	r0, r5
 800c704:	00c3      	lsls	r3, r0, #3
 800c706:	4620      	mov	r0, r4
 800c708:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c70c:	4620      	mov	r0, r4
 800c70e:	00c2      	lsls	r2, r0, #3
 800c710:	2300      	movs	r3, #0
 800c712:	6039      	str	r1, [r7, #0]
 800c714:	607b      	str	r3, [r7, #4]
 800c716:	f04f 0200 	mov.w	r2, #0
 800c71a:	f04f 0300 	mov.w	r3, #0
 800c71e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c722:	4628      	mov	r0, r5
 800c724:	00c3      	lsls	r3, r0, #3
 800c726:	4620      	mov	r0, r4
 800c728:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c72c:	4620      	mov	r0, r4
 800c72e:	00c2      	lsls	r2, r0, #3
 800c730:	1dcb      	adds	r3, r1, #7
 800c732:	08db      	lsrs	r3, r3, #3
 800c734:	00db      	lsls	r3, r3, #3
 800c736:	ebad 0d03 	sub.w	sp, sp, r3
 800c73a:	466b      	mov	r3, sp
 800c73c:	3300      	adds	r3, #0
 800c73e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c740:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c742:	460b      	mov	r3, r1
 800c744:	3b01      	subs	r3, #1
 800c746:	633b      	str	r3, [r7, #48]	@ 0x30
 800c748:	2300      	movs	r3, #0
 800c74a:	468a      	mov	sl, r1
 800c74c:	469b      	mov	fp, r3
 800c74e:	f04f 0200 	mov.w	r2, #0
 800c752:	f04f 0300 	mov.w	r3, #0
 800c756:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c75a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c75e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c762:	2300      	movs	r3, #0
 800c764:	4688      	mov	r8, r1
 800c766:	4699      	mov	r9, r3
 800c768:	f04f 0200 	mov.w	r2, #0
 800c76c:	f04f 0300 	mov.w	r3, #0
 800c770:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c774:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c778:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c77c:	1dcb      	adds	r3, r1, #7
 800c77e:	08db      	lsrs	r3, r3, #3
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	ebad 0d03 	sub.w	sp, sp, r3
 800c786:	466b      	mov	r3, sp
 800c788:	3300      	adds	r3, #0
 800c78a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c78c:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 800c790:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c792:	4619      	mov	r1, r3
 800c794:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c796:	f003 fc62 	bl	801005e <memcpy>
 800c79a:	f107 0320 	add.w	r3, r7, #32
 800c79e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c7a4:	f003 fc5b 	bl	801005e <memcpy>
 800c7a8:	f107 031e 	add.w	r3, r7, #30
 800c7ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7b2:	f003 fc54 	bl	801005e <memcpy>
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b8:	7c19      	ldrb	r1, [r3, #16]
 800c7ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7c0:	f7fe ffe6 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c6:	7c1b      	ldrb	r3, [r3, #16]
 800c7c8:	3302      	adds	r3, #2
 800c7ca:	b2d9      	uxtb	r1, r3
 800c7cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7d2:	f7fe ffdd 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d8:	7c1b      	ldrb	r3, [r3, #16]
 800c7da:	3304      	adds	r3, #4
 800c7dc:	b2d9      	uxtb	r1, r3
 800c7de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7e4:	f7fe ffd4 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800c7e8:	46b5      	mov	sp, r6
 800c7ea:	bf00      	nop
 800c7ec:	374c      	adds	r7, #76	@ 0x4c
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7f4 <_ZN12FlashManager19ReadFirstEmgMaxTrimEv>:
 800c7f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7f8:	b089      	sub	sp, #36	@ 0x24
 800c7fa:	af02      	add	r7, sp, #8
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	466b      	mov	r3, sp
 800c800:	461e      	mov	r6, r3
 800c802:	2302      	movs	r3, #2
 800c804:	617b      	str	r3, [r7, #20]
 800c806:	6979      	ldr	r1, [r7, #20]
 800c808:	460b      	mov	r3, r1
 800c80a:	3b01      	subs	r3, #1
 800c80c:	613b      	str	r3, [r7, #16]
 800c80e:	2300      	movs	r3, #0
 800c810:	4688      	mov	r8, r1
 800c812:	4699      	mov	r9, r3
 800c814:	f04f 0200 	mov.w	r2, #0
 800c818:	f04f 0300 	mov.w	r3, #0
 800c81c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c820:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c824:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c828:	2300      	movs	r3, #0
 800c82a:	460c      	mov	r4, r1
 800c82c:	461d      	mov	r5, r3
 800c82e:	f04f 0200 	mov.w	r2, #0
 800c832:	f04f 0300 	mov.w	r3, #0
 800c836:	00eb      	lsls	r3, r5, #3
 800c838:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c83c:	00e2      	lsls	r2, r4, #3
 800c83e:	1dcb      	adds	r3, r1, #7
 800c840:	08db      	lsrs	r3, r3, #3
 800c842:	00db      	lsls	r3, r3, #3
 800c844:	ebad 0d03 	sub.w	sp, sp, r3
 800c848:	ab02      	add	r3, sp, #8
 800c84a:	3300      	adds	r3, #0
 800c84c:	60fb      	str	r3, [r7, #12]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	460a      	mov	r2, r1
 800c852:	1e51      	subs	r1, r2, #1
 800c854:	2200      	movs	r2, #0
 800c856:	701a      	strb	r2, [r3, #0]
 800c858:	1c5a      	adds	r2, r3, #1
 800c85a:	1e4b      	subs	r3, r1, #1
 800c85c:	e003      	b.n	800c866 <_ZN12FlashManager19ReadFirstEmgMaxTrimEv+0x72>
 800c85e:	2100      	movs	r1, #0
 800c860:	7011      	strb	r1, [r2, #0]
 800c862:	3b01      	subs	r3, #1
 800c864:	3201      	adds	r2, #1
 800c866:	2b00      	cmp	r3, #0
 800c868:	daf9      	bge.n	800c85e <_ZN12FlashManager19ReadFirstEmgMaxTrimEv+0x6a>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	7c1a      	ldrb	r2, [r3, #16]
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	2100      	movs	r1, #0
 800c872:	9100      	str	r1, [sp, #0]
 800c874:	68f9      	ldr	r1, [r7, #12]
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f7fe fe2c 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800c87c:	f107 0308 	add.w	r3, r7, #8
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	68f9      	ldr	r1, [r7, #12]
 800c884:	4618      	mov	r0, r3
 800c886:	f003 fbea 	bl	801005e <memcpy>
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	46b5      	mov	sp, r6
 800c890:	4618      	mov	r0, r3
 800c892:	371c      	adds	r7, #28
 800c894:	46bd      	mov	sp, r7
 800c896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c89a <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv>:
 800c89a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c89e:	b089      	sub	sp, #36	@ 0x24
 800c8a0:	af02      	add	r7, sp, #8
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	466b      	mov	r3, sp
 800c8a6:	461e      	mov	r6, r3
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	617b      	str	r3, [r7, #20]
 800c8ac:	6979      	ldr	r1, [r7, #20]
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	613b      	str	r3, [r7, #16]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	4688      	mov	r8, r1
 800c8b8:	4699      	mov	r9, r3
 800c8ba:	f04f 0200 	mov.w	r2, #0
 800c8be:	f04f 0300 	mov.w	r3, #0
 800c8c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c8c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c8ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	460c      	mov	r4, r1
 800c8d2:	461d      	mov	r5, r3
 800c8d4:	f04f 0200 	mov.w	r2, #0
 800c8d8:	f04f 0300 	mov.w	r3, #0
 800c8dc:	00eb      	lsls	r3, r5, #3
 800c8de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c8e2:	00e2      	lsls	r2, r4, #3
 800c8e4:	1dcb      	adds	r3, r1, #7
 800c8e6:	08db      	lsrs	r3, r3, #3
 800c8e8:	00db      	lsls	r3, r3, #3
 800c8ea:	ebad 0d03 	sub.w	sp, sp, r3
 800c8ee:	ab02      	add	r3, sp, #8
 800c8f0:	3300      	adds	r3, #0
 800c8f2:	60fb      	str	r3, [r7, #12]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	460a      	mov	r2, r1
 800c8f8:	1e51      	subs	r1, r2, #1
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	701a      	strb	r2, [r3, #0]
 800c8fe:	1c5a      	adds	r2, r3, #1
 800c900:	1e4b      	subs	r3, r1, #1
 800c902:	e003      	b.n	800c90c <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv+0x72>
 800c904:	2100      	movs	r1, #0
 800c906:	7011      	strb	r1, [r2, #0]
 800c908:	3b01      	subs	r3, #1
 800c90a:	3201      	adds	r2, #1
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	daf9      	bge.n	800c904 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv+0x6a>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	7c1b      	ldrb	r3, [r3, #16]
 800c914:	3302      	adds	r3, #2
 800c916:	b2da      	uxtb	r2, r3
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	2100      	movs	r1, #0
 800c91c:	9100      	str	r1, [sp, #0]
 800c91e:	68f9      	ldr	r1, [r7, #12]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7fe fdd7 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800c926:	f107 0308 	add.w	r3, r7, #8
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	68f9      	ldr	r1, [r7, #12]
 800c92e:	4618      	mov	r0, r3
 800c930:	f003 fb95 	bl	801005e <memcpy>
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	b29b      	uxth	r3, r3
 800c938:	46b5      	mov	sp, r6
 800c93a:	4618      	mov	r0, r3
 800c93c:	371c      	adds	r7, #28
 800c93e:	46bd      	mov	sp, r7
 800c940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c944 <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv>:
 800c944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c948:	b089      	sub	sp, #36	@ 0x24
 800c94a:	af02      	add	r7, sp, #8
 800c94c:	6078      	str	r0, [r7, #4]
 800c94e:	466b      	mov	r3, sp
 800c950:	461e      	mov	r6, r3
 800c952:	2302      	movs	r3, #2
 800c954:	617b      	str	r3, [r7, #20]
 800c956:	6979      	ldr	r1, [r7, #20]
 800c958:	460b      	mov	r3, r1
 800c95a:	3b01      	subs	r3, #1
 800c95c:	613b      	str	r3, [r7, #16]
 800c95e:	2300      	movs	r3, #0
 800c960:	4688      	mov	r8, r1
 800c962:	4699      	mov	r9, r3
 800c964:	f04f 0200 	mov.w	r2, #0
 800c968:	f04f 0300 	mov.w	r3, #0
 800c96c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c970:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c974:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c978:	2300      	movs	r3, #0
 800c97a:	460c      	mov	r4, r1
 800c97c:	461d      	mov	r5, r3
 800c97e:	f04f 0200 	mov.w	r2, #0
 800c982:	f04f 0300 	mov.w	r3, #0
 800c986:	00eb      	lsls	r3, r5, #3
 800c988:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c98c:	00e2      	lsls	r2, r4, #3
 800c98e:	1dcb      	adds	r3, r1, #7
 800c990:	08db      	lsrs	r3, r3, #3
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	ebad 0d03 	sub.w	sp, sp, r3
 800c998:	ab02      	add	r3, sp, #8
 800c99a:	3300      	adds	r3, #0
 800c99c:	60fb      	str	r3, [r7, #12]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	460a      	mov	r2, r1
 800c9a2:	1e51      	subs	r1, r2, #1
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	701a      	strb	r2, [r3, #0]
 800c9a8:	1c5a      	adds	r2, r3, #1
 800c9aa:	1e4b      	subs	r3, r1, #1
 800c9ac:	e003      	b.n	800c9b6 <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv+0x72>
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	7011      	strb	r1, [r2, #0]
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	3201      	adds	r2, #1
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	daf9      	bge.n	800c9ae <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv+0x6a>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	7c1b      	ldrb	r3, [r3, #16]
 800c9be:	3304      	adds	r3, #4
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	9100      	str	r1, [sp, #0]
 800c9c8:	68f9      	ldr	r1, [r7, #12]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7fe fd82 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800c9d0:	f107 0308 	add.w	r3, r7, #8
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	68f9      	ldr	r1, [r7, #12]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f003 fb40 	bl	801005e <memcpy>
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	46b5      	mov	sp, r6
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	371c      	adds	r7, #28
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c9ee <_ZN12FlashManager18WriteSecondEmgDataEttt>:
 800c9ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f2:	b093      	sub	sp, #76	@ 0x4c
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6278      	str	r0, [r7, #36]	@ 0x24
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ca00:	4603      	mov	r3, r0
 800ca02:	843b      	strh	r3, [r7, #32]
 800ca04:	4613      	mov	r3, r2
 800ca06:	83fb      	strh	r3, [r7, #30]
 800ca08:	466b      	mov	r3, sp
 800ca0a:	461e      	mov	r6, r3
 800ca0c:	2302      	movs	r3, #2
 800ca0e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca12:	460b      	mov	r3, r1
 800ca14:	3b01      	subs	r3, #1
 800ca16:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca18:	2300      	movs	r3, #0
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	461d      	mov	r5, r3
 800ca1e:	f04f 0200 	mov.w	r2, #0
 800ca22:	f04f 0300 	mov.w	r3, #0
 800ca26:	00eb      	lsls	r3, r5, #3
 800ca28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca2c:	00e2      	lsls	r2, r4, #3
 800ca2e:	2300      	movs	r3, #0
 800ca30:	6139      	str	r1, [r7, #16]
 800ca32:	617b      	str	r3, [r7, #20]
 800ca34:	f04f 0200 	mov.w	r2, #0
 800ca38:	f04f 0300 	mov.w	r3, #0
 800ca3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ca40:	4628      	mov	r0, r5
 800ca42:	00c3      	lsls	r3, r0, #3
 800ca44:	4620      	mov	r0, r4
 800ca46:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	00c2      	lsls	r2, r0, #3
 800ca4e:	1dcb      	adds	r3, r1, #7
 800ca50:	08db      	lsrs	r3, r3, #3
 800ca52:	00db      	lsls	r3, r3, #3
 800ca54:	ebad 0d03 	sub.w	sp, sp, r3
 800ca58:	466b      	mov	r3, sp
 800ca5a:	3300      	adds	r3, #0
 800ca5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca60:	460b      	mov	r3, r1
 800ca62:	3b01      	subs	r3, #1
 800ca64:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca66:	2300      	movs	r3, #0
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	60fb      	str	r3, [r7, #12]
 800ca6c:	f04f 0200 	mov.w	r2, #0
 800ca70:	f04f 0300 	mov.w	r3, #0
 800ca74:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ca78:	4628      	mov	r0, r5
 800ca7a:	00c3      	lsls	r3, r0, #3
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800ca82:	4620      	mov	r0, r4
 800ca84:	00c2      	lsls	r2, r0, #3
 800ca86:	2300      	movs	r3, #0
 800ca88:	6039      	str	r1, [r7, #0]
 800ca8a:	607b      	str	r3, [r7, #4]
 800ca8c:	f04f 0200 	mov.w	r2, #0
 800ca90:	f04f 0300 	mov.w	r3, #0
 800ca94:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ca98:	4628      	mov	r0, r5
 800ca9a:	00c3      	lsls	r3, r0, #3
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800caa2:	4620      	mov	r0, r4
 800caa4:	00c2      	lsls	r2, r0, #3
 800caa6:	1dcb      	adds	r3, r1, #7
 800caa8:	08db      	lsrs	r3, r3, #3
 800caaa:	00db      	lsls	r3, r3, #3
 800caac:	ebad 0d03 	sub.w	sp, sp, r3
 800cab0:	466b      	mov	r3, sp
 800cab2:	3300      	adds	r3, #0
 800cab4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cab6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cab8:	460b      	mov	r3, r1
 800caba:	3b01      	subs	r3, #1
 800cabc:	633b      	str	r3, [r7, #48]	@ 0x30
 800cabe:	2300      	movs	r3, #0
 800cac0:	468a      	mov	sl, r1
 800cac2:	469b      	mov	fp, r3
 800cac4:	f04f 0200 	mov.w	r2, #0
 800cac8:	f04f 0300 	mov.w	r3, #0
 800cacc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cad8:	2300      	movs	r3, #0
 800cada:	4688      	mov	r8, r1
 800cadc:	4699      	mov	r9, r3
 800cade:	f04f 0200 	mov.w	r2, #0
 800cae2:	f04f 0300 	mov.w	r3, #0
 800cae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800caea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800caee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800caf2:	1dcb      	adds	r3, r1, #7
 800caf4:	08db      	lsrs	r3, r3, #3
 800caf6:	00db      	lsls	r3, r3, #3
 800caf8:	ebad 0d03 	sub.w	sp, sp, r3
 800cafc:	466b      	mov	r3, sp
 800cafe:	3300      	adds	r3, #0
 800cb00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb02:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 800cb06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb08:	4619      	mov	r1, r3
 800cb0a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cb0c:	f003 faa7 	bl	801005e <memcpy>
 800cb10:	f107 0320 	add.w	r3, r7, #32
 800cb14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb16:	4619      	mov	r1, r3
 800cb18:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cb1a:	f003 faa0 	bl	801005e <memcpy>
 800cb1e:	f107 031e 	add.w	r3, r7, #30
 800cb22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb24:	4619      	mov	r1, r3
 800cb26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb28:	f003 fa99 	bl	801005e <memcpy>
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2e:	7c59      	ldrb	r1, [r3, #17]
 800cb30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb36:	f7fe fe2b 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3c:	7c5b      	ldrb	r3, [r3, #17]
 800cb3e:	3302      	adds	r3, #2
 800cb40:	b2d9      	uxtb	r1, r3
 800cb42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb48:	f7fe fe22 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4e:	7c5b      	ldrb	r3, [r3, #17]
 800cb50:	3304      	adds	r3, #4
 800cb52:	b2d9      	uxtb	r1, r3
 800cb54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb5a:	f7fe fe19 	bl	800b790 <_ZN12FlashManager9WriteDataEhiPh>
 800cb5e:	46b5      	mov	sp, r6
 800cb60:	bf00      	nop
 800cb62:	374c      	adds	r7, #76	@ 0x4c
 800cb64:	46bd      	mov	sp, r7
 800cb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb6a <_ZN12FlashManager20ReadSecondEmgMaxTrimEv>:
 800cb6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb6e:	b089      	sub	sp, #36	@ 0x24
 800cb70:	af02      	add	r7, sp, #8
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	466b      	mov	r3, sp
 800cb76:	461e      	mov	r6, r3
 800cb78:	2302      	movs	r3, #2
 800cb7a:	617b      	str	r3, [r7, #20]
 800cb7c:	6979      	ldr	r1, [r7, #20]
 800cb7e:	460b      	mov	r3, r1
 800cb80:	3b01      	subs	r3, #1
 800cb82:	613b      	str	r3, [r7, #16]
 800cb84:	2300      	movs	r3, #0
 800cb86:	4688      	mov	r8, r1
 800cb88:	4699      	mov	r9, r3
 800cb8a:	f04f 0200 	mov.w	r2, #0
 800cb8e:	f04f 0300 	mov.w	r3, #0
 800cb92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb9e:	2300      	movs	r3, #0
 800cba0:	460c      	mov	r4, r1
 800cba2:	461d      	mov	r5, r3
 800cba4:	f04f 0200 	mov.w	r2, #0
 800cba8:	f04f 0300 	mov.w	r3, #0
 800cbac:	00eb      	lsls	r3, r5, #3
 800cbae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cbb2:	00e2      	lsls	r2, r4, #3
 800cbb4:	1dcb      	adds	r3, r1, #7
 800cbb6:	08db      	lsrs	r3, r3, #3
 800cbb8:	00db      	lsls	r3, r3, #3
 800cbba:	ebad 0d03 	sub.w	sp, sp, r3
 800cbbe:	ab02      	add	r3, sp, #8
 800cbc0:	3300      	adds	r3, #0
 800cbc2:	60fb      	str	r3, [r7, #12]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	460a      	mov	r2, r1
 800cbc8:	1e51      	subs	r1, r2, #1
 800cbca:	2200      	movs	r2, #0
 800cbcc:	701a      	strb	r2, [r3, #0]
 800cbce:	1c5a      	adds	r2, r3, #1
 800cbd0:	1e4b      	subs	r3, r1, #1
 800cbd2:	e003      	b.n	800cbdc <_ZN12FlashManager20ReadSecondEmgMaxTrimEv+0x72>
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	7011      	strb	r1, [r2, #0]
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	3201      	adds	r2, #1
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	daf9      	bge.n	800cbd4 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv+0x6a>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	7c5a      	ldrb	r2, [r3, #17]
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	9100      	str	r1, [sp, #0]
 800cbea:	68f9      	ldr	r1, [r7, #12]
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7fe fc71 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800cbf2:	f107 0308 	add.w	r3, r7, #8
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	68f9      	ldr	r1, [r7, #12]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f003 fa2f 	bl	801005e <memcpy>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	46b5      	mov	sp, r6
 800cc06:	4618      	mov	r0, r3
 800cc08:	371c      	adds	r7, #28
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cc10 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv>:
 800cc10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc14:	b089      	sub	sp, #36	@ 0x24
 800cc16:	af02      	add	r7, sp, #8
 800cc18:	6078      	str	r0, [r7, #4]
 800cc1a:	466b      	mov	r3, sp
 800cc1c:	461e      	mov	r6, r3
 800cc1e:	2302      	movs	r3, #2
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	6979      	ldr	r1, [r7, #20]
 800cc24:	460b      	mov	r3, r1
 800cc26:	3b01      	subs	r3, #1
 800cc28:	613b      	str	r3, [r7, #16]
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	4688      	mov	r8, r1
 800cc2e:	4699      	mov	r9, r3
 800cc30:	f04f 0200 	mov.w	r2, #0
 800cc34:	f04f 0300 	mov.w	r3, #0
 800cc38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cc3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cc40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cc44:	2300      	movs	r3, #0
 800cc46:	460c      	mov	r4, r1
 800cc48:	461d      	mov	r5, r3
 800cc4a:	f04f 0200 	mov.w	r2, #0
 800cc4e:	f04f 0300 	mov.w	r3, #0
 800cc52:	00eb      	lsls	r3, r5, #3
 800cc54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc58:	00e2      	lsls	r2, r4, #3
 800cc5a:	1dcb      	adds	r3, r1, #7
 800cc5c:	08db      	lsrs	r3, r3, #3
 800cc5e:	00db      	lsls	r3, r3, #3
 800cc60:	ebad 0d03 	sub.w	sp, sp, r3
 800cc64:	ab02      	add	r3, sp, #8
 800cc66:	3300      	adds	r3, #0
 800cc68:	60fb      	str	r3, [r7, #12]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	460a      	mov	r2, r1
 800cc6e:	1e51      	subs	r1, r2, #1
 800cc70:	2200      	movs	r2, #0
 800cc72:	701a      	strb	r2, [r3, #0]
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	1e4b      	subs	r3, r1, #1
 800cc78:	e003      	b.n	800cc82 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv+0x72>
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	7011      	strb	r1, [r2, #0]
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	3201      	adds	r2, #1
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	daf9      	bge.n	800cc7a <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv+0x6a>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	7c5b      	ldrb	r3, [r3, #17]
 800cc8a:	3302      	adds	r3, #2
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	2100      	movs	r1, #0
 800cc92:	9100      	str	r1, [sp, #0]
 800cc94:	68f9      	ldr	r1, [r7, #12]
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7fe fc1c 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800cc9c:	f107 0308 	add.w	r3, r7, #8
 800cca0:	697a      	ldr	r2, [r7, #20]
 800cca2:	68f9      	ldr	r1, [r7, #12]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f003 f9da 	bl	801005e <memcpy>
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	46b5      	mov	sp, r6
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	371c      	adds	r7, #28
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ccba <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv>:
 800ccba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccbe:	b089      	sub	sp, #36	@ 0x24
 800ccc0:	af02      	add	r7, sp, #8
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	466b      	mov	r3, sp
 800ccc6:	461e      	mov	r6, r3
 800ccc8:	2302      	movs	r3, #2
 800ccca:	617b      	str	r3, [r7, #20]
 800cccc:	6979      	ldr	r1, [r7, #20]
 800ccce:	460b      	mov	r3, r1
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	613b      	str	r3, [r7, #16]
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	4688      	mov	r8, r1
 800ccd8:	4699      	mov	r9, r3
 800ccda:	f04f 0200 	mov.w	r2, #0
 800ccde:	f04f 0300 	mov.w	r3, #0
 800cce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ccea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ccee:	2300      	movs	r3, #0
 800ccf0:	460c      	mov	r4, r1
 800ccf2:	461d      	mov	r5, r3
 800ccf4:	f04f 0200 	mov.w	r2, #0
 800ccf8:	f04f 0300 	mov.w	r3, #0
 800ccfc:	00eb      	lsls	r3, r5, #3
 800ccfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd02:	00e2      	lsls	r2, r4, #3
 800cd04:	1dcb      	adds	r3, r1, #7
 800cd06:	08db      	lsrs	r3, r3, #3
 800cd08:	00db      	lsls	r3, r3, #3
 800cd0a:	ebad 0d03 	sub.w	sp, sp, r3
 800cd0e:	ab02      	add	r3, sp, #8
 800cd10:	3300      	adds	r3, #0
 800cd12:	60fb      	str	r3, [r7, #12]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	460a      	mov	r2, r1
 800cd18:	1e51      	subs	r1, r2, #1
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	701a      	strb	r2, [r3, #0]
 800cd1e:	1c5a      	adds	r2, r3, #1
 800cd20:	1e4b      	subs	r3, r1, #1
 800cd22:	e003      	b.n	800cd2c <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv+0x72>
 800cd24:	2100      	movs	r1, #0
 800cd26:	7011      	strb	r1, [r2, #0]
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	3201      	adds	r2, #1
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	daf9      	bge.n	800cd24 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv+0x6a>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	7c5b      	ldrb	r3, [r3, #17]
 800cd34:	3304      	adds	r3, #4
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	9100      	str	r1, [sp, #0]
 800cd3e:	68f9      	ldr	r1, [r7, #12]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f7fe fbc7 	bl	800b4d4 <_ZN12FlashManager8ReadDataEPhhib>
 800cd46:	f107 0308 	add.w	r3, r7, #8
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	68f9      	ldr	r1, [r7, #12]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f003 f985 	bl	801005e <memcpy>
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	46b5      	mov	sp, r6
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	371c      	adds	r7, #28
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cd64 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cd6e:	ed97 0a01 	vldr	s0, [r7, #4]
 800cd72:	f002 fe61 	bl	800fa38 <ceilf>
 800cd76:	eef0 7a40 	vmov.f32	s15, s0
 800cd7a:	eeb0 0a67 	vmov.f32	s0, s15
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cd8e:	ed97 0a01 	vldr	s0, [r7, #4]
 800cd92:	f002 fe93 	bl	800fabc <floorf>
 800cd96:	eef0 7a40 	vmov.f32	s15, s0
 800cd9a:	eeb0 0a67 	vmov.f32	s0, s15
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <_ZN18VolumeFilterStructC1Ev>:
	float32_t FirstVolumeMAFArray[20];
	uint16_t FirstVolumeMAFLength;
	uint16_t Len=20;
	float PreviousHPFilteredValue;

} VolumeFilterStruct;
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2214      	movs	r2, #20
 800cdb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr

0800cdc2 <_ZN16FlowFilterStructC1Ev>:
	float32_t SumFirstFlowMAFValue;
	float32_t FirstFlowMAFArray[40];
	uint16_t Len=40;
	uint8_t FirstFlowMAFLength;

} FlowFilterStruct;
 800cdc2:	b480      	push	{r7}
 800cdc4:	b083      	sub	sp, #12
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2228      	movs	r2, #40	@ 0x28
 800cdce:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr

0800cde0 <_ZN8LoadCellC1Ev>:
FlowFilterStruct FlowFilter;




LoadCell::LoadCell() {
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	4a04      	ldr	r2, [pc, #16]	@ (800cdfc <_ZN8LoadCellC1Ev+0x1c>)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr
 800cdfc:	08010c64 	.word	0x08010c64

0800ce00 <_ZN8LoadCellD1Ev>:

LoadCell::~LoadCell() {
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	4a04      	ldr	r2, [pc, #16]	@ (800ce1c <_ZN8LoadCellD1Ev+0x1c>)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	4618      	mov	r0, r3
 800ce12:	370c      	adds	r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	08010c64 	.word	0x08010c64

0800ce20 <_ZN8LoadCellD0Ev>:
LoadCell::~LoadCell() {
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
}
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7ff ffe9 	bl	800ce00 <_ZN8LoadCellD1Ev>
 800ce2e:	f242 0130 	movw	r1, #8240	@ 0x2030
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f002 fdfc 	bl	800fa30 <_ZdlPvj>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3708      	adds	r7, #8
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <_ZN8LoadCell5SetupEv>:

void LoadCell::Setup(void){
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b082      	sub	sp, #8
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
	WriteToSPI(PHASE_ADDRESS, PHASE_VALUE);
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	210e      	movs	r1, #14
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fd30 	bl	800d8b4 <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(GAIN_ADDRESS, GAIN_VALUE);
 800ce54:	2200      	movs	r2, #0
 800ce56:	2110      	movs	r1, #16
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 fd2b 	bl	800d8b4 <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(STATUS_COM_ADDRESS, STATUS_COM_VALUE);
 800ce5e:	22a3      	movs	r2, #163	@ 0xa3
 800ce60:	2112      	movs	r1, #18
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 fd26 	bl	800d8b4 <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(CONFIG_1_ADDRESS, CONFIG_1_VALUE);
 800ce68:	22f0      	movs	r2, #240	@ 0xf0
 800ce6a:	2114      	movs	r1, #20
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 fd21 	bl	800d8b4 <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(CONFIG_2_ADDRESS, CONFIG_2_VALUE);
 800ce72:	220c      	movs	r2, #12
 800ce74:	2116      	movs	r1, #22
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 fd1c 	bl	800d8b4 <_ZN8LoadCell10WriteToSPIEtt>
}
 800ce7c:	bf00      	nop
 800ce7e:	3708      	adds	r7, #8
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <_ZN8LoadCell17ReadVolumeAndFlowEv>:
void LoadCell::ReadVolumeAndFlow(void){
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b08c      	sub	sp, #48	@ 0x30
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
	VolumeValue=0;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ce92:	461a      	mov	r2, r3
 800ce94:	f04f 0300 	mov.w	r3, #0
 800ce98:	6113      	str	r3, [r2, #16]
	uint32_t readLoadCellValue[6];

	ReadFromSPI(DATA_CH0_0,LOAD_CELL_ALL);
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	2101      	movs	r1, #1
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fc58 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[0] = VolumeAndFlowReadSPIValue;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ceaa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ceae:	60fb      	str	r3, [r7, #12]
	Debugger.LoadcellSPI.Channel1=VolumeAndFlowReadSPIValue;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ceb6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ceba:	461a      	mov	r2, r3
 800cebc:	4b74      	ldr	r3, [pc, #464]	@ (800d090 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800cebe:	67da      	str	r2, [r3, #124]	@ 0x7c
	ReadFromSPI(DATA_CH0_1,LOAD_CELL_ALL);
 800cec0:	2201      	movs	r2, #1
 800cec2:	2103      	movs	r1, #3
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 fc45 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[1] = VolumeAndFlowReadSPIValue;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ced0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ced4:	613b      	str	r3, [r7, #16]
	Debugger.LoadcellSPI.Channel2=VolumeAndFlowReadSPIValue;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cedc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cee0:	461a      	mov	r2, r3
 800cee2:	4b6b      	ldr	r3, [pc, #428]	@ (800d090 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800cee4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	ReadFromSPI(DATA_CH0_2,LOAD_CELL_ALL);
 800cee8:	2201      	movs	r2, #1
 800ceea:	2105      	movs	r1, #5
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 fc31 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[2] = VolumeAndFlowReadSPIValue;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cef8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cefc:	617b      	str	r3, [r7, #20]
	Debugger.LoadcellSPI.Channel3=VolumeAndFlowReadSPIValue;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf04:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf08:	461a      	mov	r2, r3
 800cf0a:	4b61      	ldr	r3, [pc, #388]	@ (800d090 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800cf0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	ReadFromSPI(DATA_CH1_0,LOAD_CELL_ALL);
 800cf10:	2201      	movs	r2, #1
 800cf12:	2107      	movs	r1, #7
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fc1d 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[3] = VolumeAndFlowReadSPIValue;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf24:	61bb      	str	r3, [r7, #24]
	Debugger.LoadcellSPI.Channel4=VolumeAndFlowReadSPIValue;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf2c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf30:	461a      	mov	r2, r3
 800cf32:	4b57      	ldr	r3, [pc, #348]	@ (800d090 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800cf34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	ReadFromSPI(DATA_CH1_1,LOAD_CELL_ALL);
 800cf38:	2201      	movs	r2, #1
 800cf3a:	2109      	movs	r1, #9
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 fc09 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[4] = VolumeAndFlowReadSPIValue;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf48:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf4c:	61fb      	str	r3, [r7, #28]
	Debugger.LoadcellSPI.Channel5=VolumeAndFlowReadSPIValue;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf54:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf58:	461a      	mov	r2, r3
 800cf5a:	4b4d      	ldr	r3, [pc, #308]	@ (800d090 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800cf5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

	ReadFromSPI(DATA_CH1_2,LOAD_CELL_ALL);
 800cf60:	2201      	movs	r2, #1
 800cf62:	210b      	movs	r1, #11
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fbf5 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[5] = VolumeAndFlowReadSPIValue;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf70:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf74:	623b      	str	r3, [r7, #32]
	Debugger.LoadcellSPI.Channel6=VolumeAndFlowReadSPIValue;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf7c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf80:	461a      	mov	r2, r3
 800cf82:	4b43      	ldr	r3, [pc, #268]	@ (800d090 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800cf84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800cf88:	2300      	movs	r3, #0
 800cf8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf8c:	e036      	b.n	800cffc <_ZN8LoadCell17ReadVolumeAndFlowEv+0x178>
		VolumeValue = VolumeValue
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf94:	ed93 7a04 	vldr	s14, [r3, #16]
				+ readLoadCellValue[4] + (readLoadCellValue[3] << 8);
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	ee07 3a90 	vmov	s15, r3
 800cf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	021b      	lsls	r3, r3, #8
 800cfaa:	ee07 3a90 	vmov	s15, r3
 800cfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfb2:	ee77 7a27 	vadd.f32	s15, s14, s15
		VolumeValue = VolumeValue
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cfbc:	edc3 7a04 	vstr	s15, [r3, #16]
		FlowValue = readLoadCellValue[1]
 800cfc0:	693a      	ldr	r2, [r7, #16]
				+ (readLoadCellValue[0] << 8);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	021b      	lsls	r3, r3, #8
 800cfc6:	4413      	add	r3, r2
		FlowValue = readLoadCellValue[1]
 800cfc8:	ee07 3a90 	vmov	s15, r3
 800cfcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cfd6:	edc3 7a03 	vstr	s15, [r3, #12]
		FlowValue=(65536-FlowValue);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cfe0:	edd3 7a03 	vldr	s15, [r3, #12]
 800cfe4:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800d094 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x210>
 800cfe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cff2:	edc3 7a03 	vstr	s15, [r3, #12]
	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800cff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff8:	3301      	adds	r3, #1
 800cffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cffe:	2b27      	cmp	r3, #39	@ 0x27
 800d000:	ddc5      	ble.n	800cf8e <_ZN8LoadCell17ReadVolumeAndFlowEv+0x10a>
	}
	Debugger.ReadedVolume=VolumeValue;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	4a21      	ldr	r2, [pc, #132]	@ (800d090 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800d00c:	6113      	str	r3, [r2, #16]
	float32_t readedVolume=ExponantialSmoothingFilter(0.5, VolumeValue, LastReadVolumeValue);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d014:	edd3 7a04 	vldr	s15, [r3, #16]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d01e:	ed93 7a08 	vldr	s14, [r3, #32]
 800d022:	eeb0 1a47 	vmov.f32	s2, s14
 800d026:	eef0 0a67 	vmov.f32	s1, s15
 800d02a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 fc6a 	bl	800d908 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800d034:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	LastReadVolumeValue=readedVolume;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d03e:	461a      	mov	r2, r3
 800d040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d042:	6213      	str	r3, [r2, #32]

	Debugger.ReadedFlow=FlowValue;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	4a10      	ldr	r2, [pc, #64]	@ (800d090 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800d04e:	6153      	str	r3, [r2, #20]
	float32_t readedFlow=ExponantialSmoothingFilter(0.5, FlowValue, LastReadFlowValue);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d056:	edd3 7a03 	vldr	s15, [r3, #12]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d060:	ed93 7a07 	vldr	s14, [r3, #28]
 800d064:	eeb0 1a47 	vmov.f32	s2, s14
 800d068:	eef0 0a67 	vmov.f32	s1, s15
 800d06c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 fc49 	bl	800d908 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800d076:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	LastReadFlowValue=readedFlow;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d080:	461a      	mov	r2, r3
 800d082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d084:	61d3      	str	r3, [r2, #28]

}
 800d086:	bf00      	nop
 800d088:	3730      	adds	r7, #48	@ 0x30
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	20009318 	.word	0x20009318
 800d094:	47800000 	.word	0x47800000

0800d098 <_ZN8LoadCell10ReadVolumeEb>:
void LoadCell::ReadVolume(bool useBuffer){
 800d098:	b580      	push	{r7, lr}
 800d09a:	b088      	sub	sp, #32
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	70fb      	strb	r3, [r7, #3]
	VolumeValue=0;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	f04f 0300 	mov.w	r3, #0
 800d0b0:	6113      	str	r3, [r2, #16]
	uint32_t readLoadCellValue[3];

	ReadFromSPI(DATA_CH1_0,LOAD_CELL_VOLUME);
 800d0b2:	2202      	movs	r2, #2
 800d0b4:	2107      	movs	r1, #7
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 fb4c 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[0] = VolumeReadSPIValue;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d0c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0c6:	60fb      	str	r3, [r7, #12]

	ReadFromSPI(DATA_CH1_1,LOAD_CELL_VOLUME);
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	2109      	movs	r1, #9
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 fb41 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[1] = VolumeReadSPIValue;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d0d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0dc:	613b      	str	r3, [r7, #16]

	ReadFromSPI(DATA_CH1_2,LOAD_CELL_VOLUME);
 800d0de:	2202      	movs	r2, #2
 800d0e0:	210b      	movs	r1, #11
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 fb36 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[2] = VolumeReadSPIValue;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d0ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0f2:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	61fb      	str	r3, [r7, #28]
 800d0f8:	e01b      	b.n	800d132 <_ZN8LoadCell10ReadVolumeEb+0x9a>
		VolumeValue = VolumeValue
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d100:	ed93 7a04 	vldr	s14, [r3, #16]
				+ readLoadCellValue[1] + (readLoadCellValue[0] << 8);
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	ee07 3a90 	vmov	s15, r3
 800d10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	021b      	lsls	r3, r3, #8
 800d116:	ee07 3a90 	vmov	s15, r3
 800d11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d11e:	ee77 7a27 	vadd.f32	s15, s14, s15
		VolumeValue = VolumeValue
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d128:	edc3 7a04 	vstr	s15, [r3, #16]
	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	3301      	adds	r3, #1
 800d130:	61fb      	str	r3, [r7, #28]
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	2b27      	cmp	r3, #39	@ 0x27
 800d136:	dde0      	ble.n	800d0fa <_ZN8LoadCell10ReadVolumeEb+0x62>
	}
	float32_t newVal=CalculateRealVolumeData(VolumeValue);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d13e:	edd3 7a04 	vldr	s15, [r3, #16]
 800d142:	eeb0 0a67 	vmov.f32	s0, s15
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f894 	bl	800d274 <_ZN8LoadCell23CalculateRealVolumeDataEf>
 800d14c:	eef0 7a40 	vmov.f32	s15, s0
 800d150:	edc7 7a02 	vstr	s15, [r7, #8]
	if(newVal<MaxVolumeValue){
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d15a:	ed93 7a05 	vldr	s14, [r3, #20]
 800d15e:	edd7 7a02 	vldr	s15, [r7, #8]
 800d162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d16a:	bfcc      	ite	gt
 800d16c:	2301      	movgt	r3, #1
 800d16e:	2300      	movle	r3, #0
 800d170:	b2db      	uxtb	r3, r3
 800d172:	2b00      	cmp	r3, #0
 800d174:	d004      	beq.n	800d180 <_ZN8LoadCell10ReadVolumeEb+0xe8>
		newVal=MaxVolumeValue;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d17c:	695b      	ldr	r3, [r3, #20]
 800d17e:	60bb      	str	r3, [r7, #8]
	}
	MaxVolumeValue=newVal;
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800d188:	6153      	str	r3, [r2, #20]
	Debugger.Volume=newVal;
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	4a38      	ldr	r2, [pc, #224]	@ (800d270 <_ZN8LoadCell10ReadVolumeEb+0x1d8>)
 800d18e:	6213      	str	r3, [r2, #32]
	if(useBuffer==false) return;
 800d190:	78fb      	ldrb	r3, [r7, #3]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d067      	beq.n	800d266 <_ZN8LoadCell10ReadVolumeEb+0x1ce>
	VolumeBufferLen%=1024;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	425a      	negs	r2, r3
 800d1a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1a4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d1a8:	bf58      	it	pl
 800d1aa:	4253      	negpl	r3, r2
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d1b2:	6053      	str	r3, [r2, #4]
	uint8_t *array;
	array = (uint8_t*)(&newVal);
 800d1b4:	f107 0308 	add.w	r3, r7, #8
 800d1b8:	61bb      	str	r3, [r7, #24]
	VolumeBuffer[VolumeBufferLen]=array[0];
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	781a      	ldrb	r2, [r3, #0]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	ee07 2a90 	vmov	s15, r2
 800d1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	4413      	add	r3, r2
 800d1d4:	3304      	adds	r3, #4
 800d1d6:	edc3 7a00 	vstr	s15, [r3]
	VolumeBuffer[VolumeBufferLen+1]=array[1];
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	781a      	ldrb	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	ee07 2a90 	vmov	s15, r2
 800d1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	4413      	add	r3, r2
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	edc3 7a00 	vstr	s15, [r3]
	VolumeBuffer[VolumeBufferLen+2]=array[2];
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	3302      	adds	r3, #2
 800d202:	781a      	ldrb	r2, [r3, #0]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	3302      	adds	r3, #2
 800d20e:	ee07 2a90 	vmov	s15, r2
 800d212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	4413      	add	r3, r2
 800d21c:	3304      	adds	r3, #4
 800d21e:	edc3 7a00 	vstr	s15, [r3]
	VolumeBuffer[VolumeBufferLen+3]=array[3];
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	3303      	adds	r3, #3
 800d226:	781a      	ldrb	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	3303      	adds	r3, #3
 800d232:	ee07 2a90 	vmov	s15, r2
 800d236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	4413      	add	r3, r2
 800d240:	3304      	adds	r3, #4
 800d242:	edc3 7a00 	vstr	s15, [r3]
	VolumeBufferLen+=4;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	3304      	adds	r3, #4
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d256:	6053      	str	r3, [r2, #4]
	Debugger.VolumeBufferLen=VolumeBufferLen;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	4a03      	ldr	r2, [pc, #12]	@ (800d270 <_ZN8LoadCell10ReadVolumeEb+0x1d8>)
 800d262:	6013      	str	r3, [r2, #0]
 800d264:	e000      	b.n	800d268 <_ZN8LoadCell10ReadVolumeEb+0x1d0>
	if(useBuffer==false) return;
 800d266:	bf00      	nop
}
 800d268:	3720      	adds	r7, #32
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20009318 	.word	0x20009318

0800d274 <_ZN8LoadCell23CalculateRealVolumeDataEf>:
float32_t LoadCell::CalculateRealVolumeData(float32_t volume){
 800d274:	b580      	push	{r7, lr}
 800d276:	b08a      	sub	sp, #40	@ 0x28
 800d278:	af02      	add	r7, sp, #8
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	ed87 0a00 	vstr	s0, [r7]
	float32_t newVolume = 0;
 800d280:	f04f 0300 	mov.w	r3, #0
 800d284:	61fb      	str	r3, [r7, #28]
	float32_t movingVolumeData = 0;
 800d286:	f04f 0300 	mov.w	r3, #0
 800d28a:	617b      	str	r3, [r7, #20]
	Debugger.ReadedVolume=volume;
 800d28c:	4a5a      	ldr	r2, [pc, #360]	@ (800d3f8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	6113      	str	r3, [r2, #16]
	float32_t readedVolume=ExponantialSmoothingFilter(0.5, volume, LastReadVolumeValue);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d298:	edd3 7a08 	vldr	s15, [r3, #32]
 800d29c:	eeb0 1a67 	vmov.f32	s2, s15
 800d2a0:	edd7 0a00 	vldr	s1, [r7]
 800d2a4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 fb2d 	bl	800d908 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800d2ae:	ed87 0a04 	vstr	s0, [r7, #16]
	LastReadVolumeValue=readedVolume;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	6213      	str	r3, [r2, #32]

	VolumeFilter.FirstVolumeMAFLength++;
 800d2be:	4b4f      	ldr	r3, [pc, #316]	@ (800d3fc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d2c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	4b4c      	ldr	r3, [pc, #304]	@ (800d3fc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d2ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	if (VolumeFilter.FirstVolumeMAFLength
 800d2ce:	4b4b      	ldr	r3, [pc, #300]	@ (800d3fc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d2d0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
			>= VolumeFilter.Len) {
 800d2d4:	4b49      	ldr	r3, [pc, #292]	@ (800d3fc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d2d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
	if (VolumeFilter.FirstVolumeMAFLength
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d303      	bcc.n	800d2e6 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x72>
		VolumeFilter.FirstVolumeMAFLength = 0;
 800d2de:	4b47      	ldr	r3, [pc, #284]	@ (800d3fc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	}
	float32_t diff=readedVolume-SystemConfig.VolumeAverage;
 800d2e6:	4b46      	ldr	r3, [pc, #280]	@ (800d400 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800d2e8:	699b      	ldr	r3, [r3, #24]
 800d2ea:	ee07 3a90 	vmov	s15, r3
 800d2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2f2:	ed97 7a04 	vldr	s14, [r7, #16]
 800d2f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2fa:	edc7 7a06 	vstr	s15, [r7, #24]
	if(diff<0){
 800d2fe:	edd7 7a06 	vldr	s15, [r7, #24]
 800d302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d30a:	d502      	bpl.n	800d312 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x9e>
		diff=0;
 800d30c:	f04f 0300 	mov.w	r3, #0
 800d310:	61bb      	str	r3, [r7, #24]
	}
	Debugger.DiffAverageVolumeValue=diff;
 800d312:	4a39      	ldr	r2, [pc, #228]	@ (800d3f8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	6593      	str	r3, [r2, #88]	@ 0x58

	movingVolumeData = FilterInstance.MoovingAverage(
			VolumeFilter.FirstVolumeMAFArray,
			&VolumeFilter.SumFirstVolumeMAFValue,
			VolumeFilter.FirstVolumeMAFLength,VolumeFilter.Len , diff);
 800d318:	4b38      	ldr	r3, [pc, #224]	@ (800d3fc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d31a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
	movingVolumeData = FilterInstance.MoovingAverage(
 800d31e:	461a      	mov	r2, r3
			VolumeFilter.FirstVolumeMAFLength,VolumeFilter.Len , diff);
 800d320:	4b36      	ldr	r3, [pc, #216]	@ (800d3fc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d322:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
	movingVolumeData = FilterInstance.MoovingAverage(
 800d326:	9300      	str	r3, [sp, #0]
 800d328:	ed97 0a06 	vldr	s0, [r7, #24]
 800d32c:	4613      	mov	r3, r2
 800d32e:	4a33      	ldr	r2, [pc, #204]	@ (800d3fc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d330:	4934      	ldr	r1, [pc, #208]	@ (800d404 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x190>)
 800d332:	4835      	ldr	r0, [pc, #212]	@ (800d408 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x194>)
 800d334:	f7fe f876 	bl	800b424 <_ZN6Filter14MoovingAverageEPfS0_mmf>
 800d338:	ed87 0a05 	vstr	s0, [r7, #20]
	Debugger.MovingAverageVolumeValue=movingVolumeData;
 800d33c:	4a2e      	ldr	r2, [pc, #184]	@ (800d3f8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	6513      	str	r3, [r2, #80]	@ 0x50
	float32_t newValue=movingVolumeData/SystemConfig.VolumeRate;
 800d342:	4b2f      	ldr	r3, [pc, #188]	@ (800d400 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800d344:	ed93 7a07 	vldr	s14, [r3, #28]
 800d348:	edd7 6a05 	vldr	s13, [r7, #20]
 800d34c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d350:	edc7 7a03 	vstr	s15, [r7, #12]
	newVolume=ExponantialSmoothingFilter((newValue>10?0.5:0.85), newValue,LastVolumeValue);
 800d354:	edd7 7a03 	vldr	s15, [r7, #12]
 800d358:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800d35c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d364:	dd02      	ble.n	800d36c <_ZN8LoadCell23CalculateRealVolumeDataEf+0xf8>
 800d366:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d36a:	e001      	b.n	800d370 <_ZN8LoadCell23CalculateRealVolumeDataEf+0xfc>
 800d36c:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800d40c <_ZN8LoadCell23CalculateRealVolumeDataEf+0x198>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d376:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800d37a:	eeb0 1a47 	vmov.f32	s2, s14
 800d37e:	edd7 0a03 	vldr	s1, [r7, #12]
 800d382:	eeb0 0a67 	vmov.f32	s0, s15
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fabe 	bl	800d908 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800d38c:	ed87 0a07 	vstr	s0, [r7, #28]
	if(newValue>5){
 800d390:	edd7 7a03 	vldr	s15, [r7, #12]
 800d394:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a0:	dd06      	ble.n	800d3b0 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x13c>
		newVolume=ceil(newVolume);
 800d3a2:	ed97 0a07 	vldr	s0, [r7, #28]
 800d3a6:	f7ff fcdd 	bl	800cd64 <_ZSt4ceilf>
 800d3aa:	ed87 0a07 	vstr	s0, [r7, #28]
 800d3ae:	e005      	b.n	800d3bc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x148>
	}
	else{
		newVolume=floor(newVolume);
 800d3b0:	ed97 0a07 	vldr	s0, [r7, #28]
 800d3b4:	f7ff fce6 	bl	800cd84 <_ZSt5floorf>
 800d3b8:	ed87 0a07 	vstr	s0, [r7, #28]
	}
	if(newVolume<0){
 800d3bc:	edd7 7a07 	vldr	s15, [r7, #28]
 800d3c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3c8:	d502      	bpl.n	800d3d0 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x15c>
		newVolume=0;
 800d3ca:	f04f 0300 	mov.w	r3, #0
 800d3ce:	61fb      	str	r3, [r7, #28]
	}
	LastVolumeValue=newVolume;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	6293      	str	r3, [r2, #40]	@ 0x28
	Debugger.LastVolume=LastVolumeValue;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e4:	4a04      	ldr	r2, [pc, #16]	@ (800d3f8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800d3e6:	6193      	str	r3, [r2, #24]
	return newVolume;
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	ee07 3a90 	vmov	s15, r3
}
 800d3ee:	eeb0 0a67 	vmov.f32	s0, s15
 800d3f2:	3720      	adds	r7, #32
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	20009318 	.word	0x20009318
 800d3fc:	20004eec 	.word	0x20004eec
 800d400:	200092a0 	.word	0x200092a0
 800d404:	20004ef0 	.word	0x20004ef0
 800d408:	20004ee8 	.word	0x20004ee8
 800d40c:	3f59999a 	.word	0x3f59999a

0800d410 <_ZN8LoadCell8ReadFlowEb>:
void LoadCell::ReadFlow(bool useBuffer){
 800d410:	b580      	push	{r7, lr}
 800d412:	b08a      	sub	sp, #40	@ 0x28
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
	uint32_t readLoadCellValue[6];

	ReadFromSPI(DATA_CH0_0,LOAD_CELL_FLOW);
 800d41c:	2203      	movs	r2, #3
 800d41e:	2101      	movs	r1, #1
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 f997 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[0] = FlowReadSPIValue;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d42c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d430:	60fb      	str	r3, [r7, #12]

	ReadFromSPI(DATA_CH0_1,LOAD_CELL_FLOW);
 800d432:	2203      	movs	r2, #3
 800d434:	2103      	movs	r1, #3
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 f98c 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[1] = FlowReadSPIValue;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d442:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d446:	613b      	str	r3, [r7, #16]

	ReadFromSPI(DATA_CH0_2,LOAD_CELL_FLOW);
 800d448:	2203      	movs	r2, #3
 800d44a:	2105      	movs	r1, #5
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 f981 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[2] = FlowReadSPIValue;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d458:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d45c:	617b      	str	r3, [r7, #20]

	ReadFromSPI(DATA_CH1_0,LOAD_CELL_FLOW);
 800d45e:	2203      	movs	r2, #3
 800d460:	2107      	movs	r1, #7
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 f976 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[3] = FlowReadSPIValue;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d46e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d472:	61bb      	str	r3, [r7, #24]

	ReadFromSPI(DATA_CH1_1,LOAD_CELL_FLOW);
 800d474:	2203      	movs	r2, #3
 800d476:	2109      	movs	r1, #9
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 f96b 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[4] = FlowReadSPIValue;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d484:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d488:	61fb      	str	r3, [r7, #28]

	ReadFromSPI(DATA_CH1_2,LOAD_CELL_FLOW);
 800d48a:	2203      	movs	r2, #3
 800d48c:	210b      	movs	r1, #11
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f960 	bl	800d754 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[5] = FlowReadSPIValue;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d49a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d49e:	623b      	str	r3, [r7, #32]
	FlowValue = readLoadCellValue[1]
 800d4a0:	693a      	ldr	r2, [r7, #16]
			+ (readLoadCellValue[0] << 8);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	021b      	lsls	r3, r3, #8
 800d4a6:	4413      	add	r3, r2
	FlowValue = readLoadCellValue[1]
 800d4a8:	ee07 3a90 	vmov	s15, r3
 800d4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d4b6:	edc3 7a03 	vstr	s15, [r3, #12]
	FlowValue=(65536-FlowValue);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d4c0:	edd3 7a03 	vldr	s15, [r3, #12]
 800d4c4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800d5e0 <_ZN8LoadCell8ReadFlowEb+0x1d0>
 800d4c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d4d2:	edc3 7a03 	vstr	s15, [r3, #12]
	float32_t newVal=CalculateRealFlowData(FlowValue);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d4dc:	edd3 7a03 	vldr	s15, [r3, #12]
 800d4e0:	eeb0 0a67 	vmov.f32	s0, s15
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 f87f 	bl	800d5e8 <_ZN8LoadCell21CalculateRealFlowDataEf>
 800d4ea:	eef0 7a40 	vmov.f32	s15, s0
 800d4ee:	edc7 7a02 	vstr	s15, [r7, #8]
	Debugger.Flow=newVal;
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	4a3b      	ldr	r2, [pc, #236]	@ (800d5e4 <_ZN8LoadCell8ReadFlowEb+0x1d4>)
 800d4f6:	6253      	str	r3, [r2, #36]	@ 0x24
	if(useBuffer==false) return;
 800d4f8:	78fb      	ldrb	r3, [r7, #3]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d06b      	beq.n	800d5d6 <_ZN8LoadCell8ReadFlowEb+0x1c6>
	FlowBufferLen%=1024;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	425a      	negs	r2, r3
 800d508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d50c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d510:	bf58      	it	pl
 800d512:	4253      	negpl	r3, r2
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800d51a:	6093      	str	r3, [r2, #8]
	uint8_t *array;
	array = (uint8_t*)(&newVal);
 800d51c:	f107 0308 	add.w	r3, r7, #8
 800d520:	627b      	str	r3, [r7, #36]	@ 0x24
	FlowBuffer[FlowBufferLen]=array[0];
 800d522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d524:	781a      	ldrb	r2, [r3, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	ee07 2a90 	vmov	s15, r2
 800d532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d53c:	009b      	lsls	r3, r3, #2
 800d53e:	4413      	add	r3, r2
 800d540:	edc3 7a00 	vstr	s15, [r3]
	FlowBuffer[FlowBufferLen+1]=array[1];
 800d544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d546:	3301      	adds	r3, #1
 800d548:	781a      	ldrb	r2, [r3, #0]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	3301      	adds	r3, #1
 800d554:	ee07 2a90 	vmov	s15, r2
 800d558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	edc3 7a00 	vstr	s15, [r3]
	FlowBuffer[FlowBufferLen+2]=array[2];
 800d56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56c:	3302      	adds	r3, #2
 800d56e:	781a      	ldrb	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d576:	689b      	ldr	r3, [r3, #8]
 800d578:	3302      	adds	r3, #2
 800d57a:	ee07 2a90 	vmov	s15, r2
 800d57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	4413      	add	r3, r2
 800d58c:	edc3 7a00 	vstr	s15, [r3]
	FlowBuffer[FlowBufferLen+3]=array[3];
 800d590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d592:	3303      	adds	r3, #3
 800d594:	781a      	ldrb	r2, [r3, #0]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	3303      	adds	r3, #3
 800d5a0:	ee07 2a90 	vmov	s15, r2
 800d5a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	4413      	add	r3, r2
 800d5b2:	edc3 7a00 	vstr	s15, [r3]
	FlowBufferLen+=4;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	3304      	adds	r3, #4
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800d5c6:	6093      	str	r3, [r2, #8]
	Debugger.FlowBufferLen=FlowBufferLen;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d5ce:	689b      	ldr	r3, [r3, #8]
 800d5d0:	4a04      	ldr	r2, [pc, #16]	@ (800d5e4 <_ZN8LoadCell8ReadFlowEb+0x1d4>)
 800d5d2:	6053      	str	r3, [r2, #4]
 800d5d4:	e000      	b.n	800d5d8 <_ZN8LoadCell8ReadFlowEb+0x1c8>
	if(useBuffer==false) return;
 800d5d6:	bf00      	nop
}
 800d5d8:	3728      	adds	r7, #40	@ 0x28
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	47800000 	.word	0x47800000
 800d5e4:	20009318 	.word	0x20009318

0800d5e8 <_ZN8LoadCell21CalculateRealFlowDataEf>:
float32_t LoadCell::CalculateRealFlowData(float32_t flow){
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b08a      	sub	sp, #40	@ 0x28
 800d5ec:	af02      	add	r7, sp, #8
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	ed87 0a00 	vstr	s0, [r7]
	float32_t newFlow = 0;
 800d5f4:	f04f 0300 	mov.w	r3, #0
 800d5f8:	61fb      	str	r3, [r7, #28]
	float32_t movingFlowData = 0;
 800d5fa:	f04f 0300 	mov.w	r3, #0
 800d5fe:	617b      	str	r3, [r7, #20]

	Debugger.ReadedFlow=flow;
 800d600:	4a4e      	ldr	r2, [pc, #312]	@ (800d73c <_ZN8LoadCell21CalculateRealFlowDataEf+0x154>)
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	6153      	str	r3, [r2, #20]
	float32_t readedFlow=ExponantialSmoothingFilter(0.5, flow, LastReadFlowValue);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d60c:	edd3 7a07 	vldr	s15, [r3, #28]
 800d610:	eeb0 1a67 	vmov.f32	s2, s15
 800d614:	edd7 0a00 	vldr	s1, [r7]
 800d618:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 f973 	bl	800d908 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800d622:	ed87 0a04 	vstr	s0, [r7, #16]
	LastReadFlowValue=readedFlow;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d62c:	461a      	mov	r2, r3
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	61d3      	str	r3, [r2, #28]
	FlowFilter.FirstFlowMAFLength++;
 800d632:	4b43      	ldr	r3, [pc, #268]	@ (800d740 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d634:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800d638:	3301      	adds	r3, #1
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	4b40      	ldr	r3, [pc, #256]	@ (800d740 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d63e:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	float32_t diffFlow=readedFlow-SystemConfig.FlowAverage;
 800d642:	4b40      	ldr	r3, [pc, #256]	@ (800d744 <_ZN8LoadCell21CalculateRealFlowDataEf+0x15c>)
 800d644:	695b      	ldr	r3, [r3, #20]
 800d646:	ee07 3a90 	vmov	s15, r3
 800d64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d64e:	ed97 7a04 	vldr	s14, [r7, #16]
 800d652:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d656:	edc7 7a06 	vstr	s15, [r7, #24]
	if(diffFlow<0){
 800d65a:	edd7 7a06 	vldr	s15, [r7, #24]
 800d65e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d666:	d502      	bpl.n	800d66e <_ZN8LoadCell21CalculateRealFlowDataEf+0x86>
		diffFlow=0;
 800d668:	f04f 0300 	mov.w	r3, #0
 800d66c:	61bb      	str	r3, [r7, #24]
	}
	if (FlowFilter.FirstFlowMAFLength >= FlowFilter.Len) {
 800d66e:	4b34      	ldr	r3, [pc, #208]	@ (800d740 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d670:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800d674:	461a      	mov	r2, r3
 800d676:	4b32      	ldr	r3, [pc, #200]	@ (800d740 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d678:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800d67c:	429a      	cmp	r2, r3
 800d67e:	db03      	blt.n	800d688 <_ZN8LoadCell21CalculateRealFlowDataEf+0xa0>
		FlowFilter.FirstFlowMAFLength = 0;
 800d680:	4b2f      	ldr	r3, [pc, #188]	@ (800d740 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d682:	2200      	movs	r2, #0
 800d684:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	}

	movingFlowData = FilterInstance.MoovingAverage(
			FlowFilter.FirstFlowMAFArray,
			&FlowFilter.SumFirstFlowMAFValue,
			FlowFilter.FirstFlowMAFLength,
 800d688:	4b2d      	ldr	r3, [pc, #180]	@ (800d740 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d68a:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
	movingFlowData = FilterInstance.MoovingAverage(
 800d68e:	461a      	mov	r2, r3
			FlowFilter.Len,
 800d690:	4b2b      	ldr	r3, [pc, #172]	@ (800d740 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d692:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
	movingFlowData = FilterInstance.MoovingAverage(
 800d696:	9300      	str	r3, [sp, #0]
 800d698:	ed97 0a06 	vldr	s0, [r7, #24]
 800d69c:	4613      	mov	r3, r2
 800d69e:	4a28      	ldr	r2, [pc, #160]	@ (800d740 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d6a0:	4929      	ldr	r1, [pc, #164]	@ (800d748 <_ZN8LoadCell21CalculateRealFlowDataEf+0x160>)
 800d6a2:	482a      	ldr	r0, [pc, #168]	@ (800d74c <_ZN8LoadCell21CalculateRealFlowDataEf+0x164>)
 800d6a4:	f7fd febe 	bl	800b424 <_ZN6Filter14MoovingAverageEPfS0_mmf>
 800d6a8:	ed87 0a05 	vstr	s0, [r7, #20]
			diffFlow);
	float32_t newValue=movingFlowData/SystemConfig.FlowRate;
 800d6ac:	4b25      	ldr	r3, [pc, #148]	@ (800d744 <_ZN8LoadCell21CalculateRealFlowDataEf+0x15c>)
 800d6ae:	ed93 7a08 	vldr	s14, [r3, #32]
 800d6b2:	edd7 6a05 	vldr	s13, [r7, #20]
 800d6b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6ba:	edc7 7a03 	vstr	s15, [r7, #12]
	newFlow=ExponantialSmoothingFilter((newValue>4?0.5:0.85), newValue,LastFlowValue);
 800d6be:	edd7 7a03 	vldr	s15, [r7, #12]
 800d6c2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800d6c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ce:	dd02      	ble.n	800d6d6 <_ZN8LoadCell21CalculateRealFlowDataEf+0xee>
 800d6d0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d6d4:	e001      	b.n	800d6da <_ZN8LoadCell21CalculateRealFlowDataEf+0xf2>
 800d6d6:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d750 <_ZN8LoadCell21CalculateRealFlowDataEf+0x168>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d6e0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800d6e4:	eeb0 1a47 	vmov.f32	s2, s14
 800d6e8:	edd7 0a03 	vldr	s1, [r7, #12]
 800d6ec:	eeb0 0a67 	vmov.f32	s0, s15
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f000 f909 	bl	800d908 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800d6f6:	ed87 0a07 	vstr	s0, [r7, #28]
	if(newFlow<1.5){
 800d6fa:	edd7 7a07 	vldr	s15, [r7, #28]
 800d6fe:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d702:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d70a:	d502      	bpl.n	800d712 <_ZN8LoadCell21CalculateRealFlowDataEf+0x12a>
		newFlow=0;
 800d70c:	f04f 0300 	mov.w	r3, #0
 800d710:	61fb      	str	r3, [r7, #28]
	}
	LastFlowValue=newFlow;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d718:	461a      	mov	r2, r3
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	6253      	str	r3, [r2, #36]	@ 0x24
	Debugger.LastFlow=LastFlowValue;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d726:	4a05      	ldr	r2, [pc, #20]	@ (800d73c <_ZN8LoadCell21CalculateRealFlowDataEf+0x154>)
 800d728:	61d3      	str	r3, [r2, #28]
	return newFlow;
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	ee07 3a90 	vmov	s15, r3
}
 800d730:	eeb0 0a67 	vmov.f32	s0, s15
 800d734:	3720      	adds	r7, #32
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	20009318 	.word	0x20009318
 800d740:	20004f48 	.word	0x20004f48
 800d744:	200092a0 	.word	0x200092a0
 800d748:	20004f4c 	.word	0x20004f4c
 800d74c:	20004ee8 	.word	0x20004ee8
 800d750:	3f59999a 	.word	0x3f59999a

0800d754 <_ZN8LoadCell11ReadFromSPIEhi>:
void LoadCell::ReadFromSPI(uint8_t value, int type){
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	460b      	mov	r3, r1
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800d762:	2200      	movs	r2, #0
 800d764:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d768:	481f      	ldr	r0, [pc, #124]	@ (800d7e8 <_ZN8LoadCell11ReadFromSPIEhi+0x94>)
 800d76a:	f7f5 fc4f 	bl	800300c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(LOAD_CELL_SPI_CHANNEL, &value, 1);  //, 100
 800d76e:	f107 030b 	add.w	r3, r7, #11
 800d772:	2201      	movs	r2, #1
 800d774:	4619      	mov	r1, r3
 800d776:	481d      	ldr	r0, [pc, #116]	@ (800d7ec <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800d778:	f7f6 fa88 	bl	8003c8c <HAL_SPI_Transmit_DMA>
	switch(type){
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b03      	cmp	r3, #3
 800d780:	d01d      	beq.n	800d7be <_ZN8LoadCell11ReadFromSPIEhi+0x6a>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2b03      	cmp	r3, #3
 800d786:	dc24      	bgt.n	800d7d2 <_ZN8LoadCell11ReadFromSPIEhi+0x7e>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d003      	beq.n	800d796 <_ZN8LoadCell11ReadFromSPIEhi+0x42>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b02      	cmp	r3, #2
 800d792:	d00a      	beq.n	800d7aa <_ZN8LoadCell11ReadFromSPIEhi+0x56>
		break;
		case LOAD_CELL_FLOW:
			HAL_SPI_Receive_DMA(LOAD_CELL_SPI_CHANNEL, &FlowReadSPIValue,1);  //, 100
		break;
		default:
			break;
 800d794:	e01d      	b.n	800d7d2 <_ZN8LoadCell11ReadFromSPIEhi+0x7e>
			HAL_SPI_Receive_DMA(LOAD_CELL_SPI_CHANNEL, &VolumeAndFlowReadSPIValue,1);  //, 100
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d79c:	332c      	adds	r3, #44	@ 0x2c
 800d79e:	2201      	movs	r2, #1
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	4812      	ldr	r0, [pc, #72]	@ (800d7ec <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800d7a4:	f7f6 fb24 	bl	8003df0 <HAL_SPI_Receive_DMA>
		break;
 800d7a8:	e014      	b.n	800d7d4 <_ZN8LoadCell11ReadFromSPIEhi+0x80>
			HAL_SPI_Receive_DMA(LOAD_CELL_SPI_CHANNEL, &VolumeReadSPIValue,1);  //, 100
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d7b0:	332d      	adds	r3, #45	@ 0x2d
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	480d      	ldr	r0, [pc, #52]	@ (800d7ec <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800d7b8:	f7f6 fb1a 	bl	8003df0 <HAL_SPI_Receive_DMA>
		break;
 800d7bc:	e00a      	b.n	800d7d4 <_ZN8LoadCell11ReadFromSPIEhi+0x80>
			HAL_SPI_Receive_DMA(LOAD_CELL_SPI_CHANNEL, &FlowReadSPIValue,1);  //, 100
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d7c4:	332e      	adds	r3, #46	@ 0x2e
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	4808      	ldr	r0, [pc, #32]	@ (800d7ec <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800d7cc:	f7f6 fb10 	bl	8003df0 <HAL_SPI_Receive_DMA>
		break;
 800d7d0:	e000      	b.n	800d7d4 <_ZN8LoadCell11ReadFromSPIEhi+0x80>
			break;
 800d7d2:	bf00      	nop
	}
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d7da:	4803      	ldr	r0, [pc, #12]	@ (800d7e8 <_ZN8LoadCell11ReadFromSPIEhi+0x94>)
 800d7dc:	f7f5 fc16 	bl	800300c <HAL_GPIO_WritePin>
}
 800d7e0:	bf00      	nop
 800d7e2:	3710      	adds	r7, #16
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	40020000 	.word	0x40020000
 800d7ec:	20000180 	.word	0x20000180

0800d7f0 <_ZN8LoadCell11ClearParamsEv>:
void LoadCell::ClearParams(void){
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
	VolumeValue=0;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d7fe:	461a      	mov	r2, r3
 800d800:	f04f 0300 	mov.w	r3, #0
 800d804:	6113      	str	r3, [r2, #16]
	FlowValue=0;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d80c:	461a      	mov	r2, r3
 800d80e:	f04f 0300 	mov.w	r3, #0
 800d812:	60d3      	str	r3, [r2, #12]
	LastVolumeValue=0;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d81a:	461a      	mov	r2, r3
 800d81c:	f04f 0300 	mov.w	r3, #0
 800d820:	6293      	str	r3, [r2, #40]	@ 0x28
	LastFlowValue=0;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d828:	461a      	mov	r2, r3
 800d82a:	f04f 0300 	mov.w	r3, #0
 800d82e:	6253      	str	r3, [r2, #36]	@ 0x24
	LastReadVolumeValue=0;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d836:	461a      	mov	r2, r3
 800d838:	f04f 0300 	mov.w	r3, #0
 800d83c:	6213      	str	r3, [r2, #32]
	LastReadFlowValue=0;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d844:	461a      	mov	r2, r3
 800d846:	f04f 0300 	mov.w	r3, #0
 800d84a:	61d3      	str	r3, [r2, #28]
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800d84c:	2300      	movs	r3, #0
 800d84e:	60fb      	str	r3, [r7, #12]
 800d850:	e009      	b.n	800d866 <_ZN8LoadCell11ClearParamsEv+0x76>
		VolumeSamples[i]=0;
 800d852:	4a14      	ldr	r2, [pc, #80]	@ (800d8a4 <_ZN8LoadCell11ClearParamsEv+0xb4>)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4413      	add	r3, r2
 800d85a:	f04f 0200 	mov.w	r2, #0
 800d85e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	3301      	adds	r3, #1
 800d864:	60fb      	str	r3, [r7, #12]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2b0a      	cmp	r3, #10
 800d86a:	ddf2      	ble.n	800d852 <_ZN8LoadCell11ClearParamsEv+0x62>
	}
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800d86c:	2300      	movs	r3, #0
 800d86e:	60bb      	str	r3, [r7, #8]
 800d870:	e009      	b.n	800d886 <_ZN8LoadCell11ClearParamsEv+0x96>
		FlowSamples[i]=0;
 800d872:	4a0d      	ldr	r2, [pc, #52]	@ (800d8a8 <_ZN8LoadCell11ClearParamsEv+0xb8>)
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4413      	add	r3, r2
 800d87a:	f04f 0200 	mov.w	r2, #0
 800d87e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	3301      	adds	r3, #1
 800d884:	60bb      	str	r3, [r7, #8]
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	2b04      	cmp	r3, #4
 800d88a:	ddf2      	ble.n	800d872 <_ZN8LoadCell11ClearParamsEv+0x82>
	}
	FlowIndex=0;
 800d88c:	4b07      	ldr	r3, [pc, #28]	@ (800d8ac <_ZN8LoadCell11ClearParamsEv+0xbc>)
 800d88e:	2200      	movs	r2, #0
 800d890:	701a      	strb	r2, [r3, #0]
	VolumeIndex=0;
 800d892:	4b07      	ldr	r3, [pc, #28]	@ (800d8b0 <_ZN8LoadCell11ClearParamsEv+0xc0>)
 800d894:	2200      	movs	r2, #0
 800d896:	701a      	strb	r2, [r3, #0]
}
 800d898:	bf00      	nop
 800d89a:	3714      	adds	r7, #20
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr
 800d8a4:	20000010 	.word	0x20000010
 800d8a8:	2000003c 	.word	0x2000003c
 800d8ac:	20004ee4 	.word	0x20004ee4
 800d8b0:	20004ee5 	.word	0x20004ee5

0800d8b4 <_ZN8LoadCell10WriteToSPIEtt>:

void LoadCell::WriteToSPI(uint16_t SPIAddress, uint16_t value){
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	807b      	strh	r3, [r7, #2]
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	803b      	strh	r3, [r7, #0]

	uint8_t data[2];
	data[0] = SPIAddress;
 800d8c4:	887b      	ldrh	r3, [r7, #2]
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 800d8ca:	883b      	ldrh	r3, [r7, #0]
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d8d6:	480a      	ldr	r0, [pc, #40]	@ (800d900 <_ZN8LoadCell10WriteToSPIEtt+0x4c>)
 800d8d8:	f7f5 fb98 	bl	800300c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(LOAD_CELL_SPI_CHANNEL, data, 2, 100);
 800d8dc:	f107 010c 	add.w	r1, r7, #12
 800d8e0:	2364      	movs	r3, #100	@ 0x64
 800d8e2:	2202      	movs	r2, #2
 800d8e4:	4807      	ldr	r0, [pc, #28]	@ (800d904 <_ZN8LoadCell10WriteToSPIEtt+0x50>)
 800d8e6:	f7f6 f88c 	bl	8003a02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d8f0:	4803      	ldr	r0, [pc, #12]	@ (800d900 <_ZN8LoadCell10WriteToSPIEtt+0x4c>)
 800d8f2:	f7f5 fb8b 	bl	800300c <HAL_GPIO_WritePin>
}
 800d8f6:	bf00      	nop
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	40020000 	.word	0x40020000
 800d904:	20000180 	.word	0x20000180

0800d908 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>:
		}
	}
    return (sum==0)?0:sum / cnt;
}

float32_t LoadCell::ExponantialSmoothingFilter(float32_t alpha,float32_t value,float32_t lastValue){
 800d908:	b480      	push	{r7}
 800d90a:	b087      	sub	sp, #28
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	ed87 0a02 	vstr	s0, [r7, #8]
 800d914:	edc7 0a01 	vstr	s1, [r7, #4]
 800d918:	ed87 1a00 	vstr	s2, [r7]
    float forecast = alpha * value + (1 - alpha) * lastValue;
 800d91c:	ed97 7a02 	vldr	s14, [r7, #8]
 800d920:	edd7 7a01 	vldr	s15, [r7, #4]
 800d924:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d928:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d92c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d930:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d934:	edd7 7a00 	vldr	s15, [r7]
 800d938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d93c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d940:	edc7 7a05 	vstr	s15, [r7, #20]
    return forecast;
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	ee07 3a90 	vmov	s15, r3
}
 800d94a:	eeb0 0a67 	vmov.f32	s0, s15
 800d94e:	371c      	adds	r7, #28
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <_ZN8LoadCell12ClearSamplesEv>:
void LoadCell::ClearSamples(){
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800d960:	2300      	movs	r3, #0
 800d962:	60fb      	str	r3, [r7, #12]
 800d964:	e008      	b.n	800d978 <_ZN8LoadCell12ClearSamplesEv+0x20>
		FlowSamples[i]=-1;
 800d966:	4a13      	ldr	r2, [pc, #76]	@ (800d9b4 <_ZN8LoadCell12ClearSamplesEv+0x5c>)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	4413      	add	r3, r2
 800d96e:	4a12      	ldr	r2, [pc, #72]	@ (800d9b8 <_ZN8LoadCell12ClearSamplesEv+0x60>)
 800d970:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	3301      	adds	r3, #1
 800d976:	60fb      	str	r3, [r7, #12]
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2b04      	cmp	r3, #4
 800d97c:	ddf3      	ble.n	800d966 <_ZN8LoadCell12ClearSamplesEv+0xe>
	}
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800d97e:	2300      	movs	r3, #0
 800d980:	60bb      	str	r3, [r7, #8]
 800d982:	e008      	b.n	800d996 <_ZN8LoadCell12ClearSamplesEv+0x3e>
		VolumeSamples[i]=-1;
 800d984:	4a0d      	ldr	r2, [pc, #52]	@ (800d9bc <_ZN8LoadCell12ClearSamplesEv+0x64>)
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	4413      	add	r3, r2
 800d98c:	4a0a      	ldr	r2, [pc, #40]	@ (800d9b8 <_ZN8LoadCell12ClearSamplesEv+0x60>)
 800d98e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	3301      	adds	r3, #1
 800d994:	60bb      	str	r3, [r7, #8]
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	2b0a      	cmp	r3, #10
 800d99a:	ddf3      	ble.n	800d984 <_ZN8LoadCell12ClearSamplesEv+0x2c>
	}
	VolumeIndex=0;
 800d99c:	4b08      	ldr	r3, [pc, #32]	@ (800d9c0 <_ZN8LoadCell12ClearSamplesEv+0x68>)
 800d99e:	2200      	movs	r2, #0
 800d9a0:	701a      	strb	r2, [r3, #0]
	FlowIndex=0;
 800d9a2:	4b08      	ldr	r3, [pc, #32]	@ (800d9c4 <_ZN8LoadCell12ClearSamplesEv+0x6c>)
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	701a      	strb	r2, [r3, #0]

}
 800d9a8:	bf00      	nop
 800d9aa:	3714      	adds	r7, #20
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr
 800d9b4:	2000003c 	.word	0x2000003c
 800d9b8:	bf800000 	.word	0xbf800000
 800d9bc:	20000010 	.word	0x20000010
 800d9c0:	20004ee5 	.word	0x20004ee5
 800d9c4:	20004ee4 	.word	0x20004ee4

0800d9c8 <_Z41__static_initialization_and_destruction_0ii>:
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d10d      	bne.n	800d9f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d108      	bne.n	800d9f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
Filter FilterInstance;
 800d9e2:	480c      	ldr	r0, [pc, #48]	@ (800da14 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800d9e4:	f7fd fcee 	bl	800b3c4 <_ZN6FilterC1Ev>
VolumeFilterStruct VolumeFilter;
 800d9e8:	480b      	ldr	r0, [pc, #44]	@ (800da18 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800d9ea:	f7ff f9db 	bl	800cda4 <_ZN18VolumeFilterStructC1Ev>
FlowFilterStruct FlowFilter;
 800d9ee:	480b      	ldr	r0, [pc, #44]	@ (800da1c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800d9f0:	f7ff f9e7 	bl	800cdc2 <_ZN16FlowFilterStructC1Ev>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d107      	bne.n	800da0a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da00:	4293      	cmp	r3, r2
 800da02:	d102      	bne.n	800da0a <_Z41__static_initialization_and_destruction_0ii+0x42>
Filter FilterInstance;
 800da04:	4803      	ldr	r0, [pc, #12]	@ (800da14 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800da06:	f7fd fced 	bl	800b3e4 <_ZN6FilterD1Ev>
}
 800da0a:	bf00      	nop
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	20004ee8 	.word	0x20004ee8
 800da18:	20004eec 	.word	0x20004eec
 800da1c:	20004f48 	.word	0x20004f48

0800da20 <_GLOBAL__sub_I_VolumeSamples>:
 800da20:	b580      	push	{r7, lr}
 800da22:	af00      	add	r7, sp, #0
 800da24:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800da28:	2001      	movs	r0, #1
 800da2a:	f7ff ffcd 	bl	800d9c8 <_Z41__static_initialization_and_destruction_0ii>
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <_GLOBAL__sub_D_VolumeSamples>:
 800da30:	b580      	push	{r7, lr}
 800da32:	af00      	add	r7, sp, #0
 800da34:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800da38:	2000      	movs	r0, #0
 800da3a:	f7ff ffc5 	bl	800d9c8 <_Z41__static_initialization_and_destruction_0ii>
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <_ZN18SystemConfigStructC1Ev>:
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2214      	movs	r2, #20
 800da4c:	701a      	strb	r2, [r3, #0]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2228      	movs	r2, #40	@ 0x28
 800da52:	705a      	strb	r2, [r3, #1]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2228      	movs	r2, #40	@ 0x28
 800da58:	709a      	strb	r2, [r3, #2]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	220a      	movs	r2, #10
 800da5e:	70da      	strb	r2, [r3, #3]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2228      	movs	r2, #40	@ 0x28
 800da64:	711a      	strb	r2, [r3, #4]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	221e      	movs	r2, #30
 800da6a:	715a      	strb	r2, [r3, #5]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	221e      	movs	r2, #30
 800da70:	719a      	strb	r2, [r3, #6]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800da78:	811a      	strh	r2, [r3, #8]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800da80:	815a      	strh	r2, [r3, #10]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800da88:	819a      	strh	r2, [r3, #12]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800da90:	81da      	strh	r2, [r3, #14]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800da98:	821a      	strh	r2, [r3, #16]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800daa0:	825a      	strh	r2, [r3, #18]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	615a      	str	r2, [r3, #20]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	619a      	str	r2, [r3, #24]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800dab4:	61da      	str	r2, [r3, #28]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800dabc:	621a      	str	r2, [r3, #32]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800dac4:	625a      	str	r2, [r3, #36]	@ 0x24
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800dacc:	629a      	str	r2, [r3, #40]	@ 0x28
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	220a      	movs	r2, #10
 800dad2:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2200      	movs	r2, #0
 800dae0:	631a      	str	r2, [r3, #48]	@ 0x30
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	222c      	movs	r2, #44	@ 0x2c
 800daee:	665a      	str	r2, [r3, #100]	@ 0x64
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2264      	movs	r2, #100	@ 0x64
 800db0a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2264      	movs	r2, #100	@ 0x64
 800db12:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2264      	movs	r2, #100	@ 0x64
 800db1a:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4618      	mov	r0, r3
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <_ZN12FlashManagerC1ERKS_>:
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
 800db36:	4a25      	ldr	r2, [pc, #148]	@ (800dbcc <_ZN12FlashManagerC1ERKS_+0xa0>)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	601a      	str	r2, [r3, #0]
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	605a      	str	r2, [r3, #4]
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	689a      	ldr	r2, [r3, #8]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	609a      	str	r2, [r3, #8]
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	7b1a      	ldrb	r2, [r3, #12]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	731a      	strb	r2, [r3, #12]
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	7b5a      	ldrb	r2, [r3, #13]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	735a      	strb	r2, [r3, #13]
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	7b9a      	ldrb	r2, [r3, #14]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	739a      	strb	r2, [r3, #14]
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	7bda      	ldrb	r2, [r3, #15]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	73da      	strb	r2, [r3, #15]
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	7c1a      	ldrb	r2, [r3, #16]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	741a      	strb	r2, [r3, #16]
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	7c5a      	ldrb	r2, [r3, #17]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	745a      	strb	r2, [r3, #17]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	7c9a      	ldrb	r2, [r3, #18]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	749a      	strb	r2, [r3, #18]
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	7cda      	ldrb	r2, [r3, #19]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	74da      	strb	r2, [r3, #19]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	7d1a      	ldrb	r2, [r3, #20]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	751a      	strb	r2, [r3, #20]
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	7d5a      	ldrb	r2, [r3, #21]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	755a      	strb	r2, [r3, #21]
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	7d9a      	ldrb	r2, [r3, #22]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	759a      	strb	r2, [r3, #22]
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	7dda      	ldrb	r2, [r3, #23]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	75da      	strb	r2, [r3, #23]
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	7e1a      	ldrb	r2, [r3, #24]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	761a      	strb	r2, [r3, #24]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	7e5a      	ldrb	r2, [r3, #25]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	765a      	strb	r2, [r3, #25]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	370c      	adds	r7, #12
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr
 800dbca:	bf00      	nop
 800dbcc:	08010c54 	.word	0x08010c54

0800dbd0 <SetupOS>:
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b088      	sub	sp, #32
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	480f      	ldr	r0, [pc, #60]	@ (800dc14 <SetupOS+0x44>)
 800dbd8:	f7fd f9a4 	bl	800af24 <_ZN3Emg13FirstEmgSetupEv>
 800dbdc:	480d      	ldr	r0, [pc, #52]	@ (800dc14 <SetupOS+0x44>)
 800dbde:	f7fd f9c2 	bl	800af66 <_ZN3Emg14SecondEmgSetupEv>
 800dbe2:	480d      	ldr	r0, [pc, #52]	@ (800dc18 <SetupOS+0x48>)
 800dbe4:	f7ff f92d 	bl	800ce42 <_ZN8LoadCell5SetupEv>
 800dbe8:	f000 f912 	bl	800de10 <FlashInitialize>
 800dbec:	1d3b      	adds	r3, r7, #4
 800dbee:	490b      	ldr	r1, [pc, #44]	@ (800dc1c <SetupOS+0x4c>)
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7ff ff9b 	bl	800db2c <_ZN12FlashManagerC1ERKS_>
 800dbf6:	1d3b      	adds	r3, r7, #4
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	4809      	ldr	r0, [pc, #36]	@ (800dc20 <SetupOS+0x50>)
 800dbfc:	f7fd f846 	bl	800ac8c <_ZN13Communication15SetFlashManagerE12FlashManager>
 800dc00:	1d3b      	adds	r3, r7, #4
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fd fcf6 	bl	800b5f4 <_ZN12FlashManagerD1Ev>
 800dc08:	f7f8 fb44 	bl	8006294 <osKernelInitialize>
 800dc0c:	bf00      	nop
 800dc0e:	3720      	adds	r7, #32
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	20005008 	.word	0x20005008
 800dc18:	20007044 	.word	0x20007044
 800dc1c:	20009094 	.word	0x20009094
 800dc20:	20009074 	.word	0x20009074

0800dc24 <_Z14UpdatePriorityv>:
 800dc24:	b580      	push	{r7, lr}
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	4865      	ldr	r0, [pc, #404]	@ (800ddc0 <_Z14UpdatePriorityv+0x19c>)
 800dc2a:	f7f6 febb 	bl	80049a4 <HAL_TIM_Base_Start_IT>
 800dc2e:	4b65      	ldr	r3, [pc, #404]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc30:	3310      	adds	r3, #16
 800dc32:	2224      	movs	r2, #36	@ 0x24
 800dc34:	2100      	movs	r1, #0
 800dc36:	4618      	mov	r0, r3
 800dc38:	f002 f985 	bl	800ff46 <memset>
 800dc3c:	4b61      	ldr	r3, [pc, #388]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc3e:	4a62      	ldr	r2, [pc, #392]	@ (800ddc8 <_Z14UpdatePriorityv+0x1a4>)
 800dc40:	611a      	str	r2, [r3, #16]
 800dc42:	4b60      	ldr	r3, [pc, #384]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc48:	625a      	str	r2, [r3, #36]	@ 0x24
 800dc4a:	4b5e      	ldr	r3, [pc, #376]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc4c:	2218      	movs	r2, #24
 800dc4e:	629a      	str	r2, [r3, #40]	@ 0x28
 800dc50:	4b5c      	ldr	r3, [pc, #368]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc52:	3334      	adds	r3, #52	@ 0x34
 800dc54:	2224      	movs	r2, #36	@ 0x24
 800dc56:	2100      	movs	r1, #0
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f002 f974 	bl	800ff46 <memset>
 800dc5e:	4b59      	ldr	r3, [pc, #356]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc60:	4a59      	ldr	r2, [pc, #356]	@ (800ddc8 <_Z14UpdatePriorityv+0x1a4>)
 800dc62:	635a      	str	r2, [r3, #52]	@ 0x34
 800dc64:	4b57      	ldr	r3, [pc, #348]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc6a:	649a      	str	r2, [r3, #72]	@ 0x48
 800dc6c:	4b55      	ldr	r3, [pc, #340]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc6e:	2218      	movs	r2, #24
 800dc70:	64da      	str	r2, [r3, #76]	@ 0x4c
 800dc72:	4b54      	ldr	r3, [pc, #336]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc74:	33b0      	adds	r3, #176	@ 0xb0
 800dc76:	2224      	movs	r2, #36	@ 0x24
 800dc78:	2100      	movs	r1, #0
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f002 f963 	bl	800ff46 <memset>
 800dc80:	4b50      	ldr	r3, [pc, #320]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc82:	4a51      	ldr	r2, [pc, #324]	@ (800ddc8 <_Z14UpdatePriorityv+0x1a4>)
 800dc84:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800dc88:	4b4e      	ldr	r3, [pc, #312]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc8e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 800dc92:	4b4c      	ldr	r3, [pc, #304]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc94:	2218      	movs	r2, #24
 800dc96:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 800dc9a:	4b4a      	ldr	r3, [pc, #296]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dc9c:	338c      	adds	r3, #140	@ 0x8c
 800dc9e:	2224      	movs	r2, #36	@ 0x24
 800dca0:	2100      	movs	r1, #0
 800dca2:	4618      	mov	r0, r3
 800dca4:	f002 f94f 	bl	800ff46 <memset>
 800dca8:	4b46      	ldr	r3, [pc, #280]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dcaa:	4a47      	ldr	r2, [pc, #284]	@ (800ddc8 <_Z14UpdatePriorityv+0x1a4>)
 800dcac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800dcb0:	4b44      	ldr	r3, [pc, #272]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dcb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dcb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800dcba:	4b42      	ldr	r3, [pc, #264]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dcbc:	2218      	movs	r2, #24
 800dcbe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800dcc2:	4b40      	ldr	r3, [pc, #256]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dcc4:	33d4      	adds	r3, #212	@ 0xd4
 800dcc6:	2224      	movs	r2, #36	@ 0x24
 800dcc8:	2100      	movs	r1, #0
 800dcca:	4618      	mov	r0, r3
 800dccc:	f002 f93b 	bl	800ff46 <memset>
 800dcd0:	4b3c      	ldr	r3, [pc, #240]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dcd2:	4a3d      	ldr	r2, [pc, #244]	@ (800ddc8 <_Z14UpdatePriorityv+0x1a4>)
 800dcd4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800dcd8:	4b3a      	ldr	r3, [pc, #232]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dcda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dcde:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800dce2:	4b38      	ldr	r3, [pc, #224]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dce4:	2218      	movs	r2, #24
 800dce6:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800dcea:	4b36      	ldr	r3, [pc, #216]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dcec:	33f8      	adds	r3, #248	@ 0xf8
 800dcee:	2224      	movs	r2, #36	@ 0x24
 800dcf0:	2100      	movs	r1, #0
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f002 f927 	bl	800ff46 <memset>
 800dcf8:	4b32      	ldr	r3, [pc, #200]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dcfa:	4a33      	ldr	r2, [pc, #204]	@ (800ddc8 <_Z14UpdatePriorityv+0x1a4>)
 800dcfc:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 800dd00:	4b30      	ldr	r3, [pc, #192]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd06:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800dd0a:	4b2e      	ldr	r3, [pc, #184]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd0c:	2218      	movs	r2, #24
 800dd0e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 800dd12:	4b2c      	ldr	r3, [pc, #176]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd14:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dd18:	2224      	movs	r2, #36	@ 0x24
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f002 f912 	bl	800ff46 <memset>
 800dd22:	4b28      	ldr	r3, [pc, #160]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd24:	4a28      	ldr	r2, [pc, #160]	@ (800ddc8 <_Z14UpdatePriorityv+0x1a4>)
 800dd26:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 800dd2a:	4b26      	ldr	r3, [pc, #152]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd30:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 800dd34:	4b23      	ldr	r3, [pc, #140]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd36:	2218      	movs	r2, #24
 800dd38:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 800dd3c:	4b21      	ldr	r3, [pc, #132]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd3e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800dd42:	2224      	movs	r2, #36	@ 0x24
 800dd44:	2100      	movs	r1, #0
 800dd46:	4618      	mov	r0, r3
 800dd48:	f002 f8fd 	bl	800ff46 <memset>
 800dd4c:	4b1d      	ldr	r3, [pc, #116]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd4e:	4a1e      	ldr	r2, [pc, #120]	@ (800ddc8 <_Z14UpdatePriorityv+0x1a4>)
 800dd50:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800dd54:	4b1b      	ldr	r3, [pc, #108]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd5a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 800dd5e:	4b19      	ldr	r3, [pc, #100]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd60:	2218      	movs	r2, #24
 800dd62:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 800dd66:	4b17      	ldr	r3, [pc, #92]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd68:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800dd6c:	2224      	movs	r2, #36	@ 0x24
 800dd6e:	2100      	movs	r1, #0
 800dd70:	4618      	mov	r0, r3
 800dd72:	f002 f8e8 	bl	800ff46 <memset>
 800dd76:	4b13      	ldr	r3, [pc, #76]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd78:	4a13      	ldr	r2, [pc, #76]	@ (800ddc8 <_Z14UpdatePriorityv+0x1a4>)
 800dd7a:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 800dd7e:	4b11      	ldr	r3, [pc, #68]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd84:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 800dd88:	4b0e      	ldr	r3, [pc, #56]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd8a:	2218      	movs	r2, #24
 800dd8c:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
 800dd90:	4b0c      	ldr	r3, [pc, #48]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dd92:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800dd96:	2224      	movs	r2, #36	@ 0x24
 800dd98:	2100      	movs	r1, #0
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f002 f8d3 	bl	800ff46 <memset>
 800dda0:	4b08      	ldr	r3, [pc, #32]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800dda2:	4a09      	ldr	r2, [pc, #36]	@ (800ddc8 <_Z14UpdatePriorityv+0x1a4>)
 800dda4:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 800dda8:	4b06      	ldr	r3, [pc, #24]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800ddaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddae:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
 800ddb2:	4b04      	ldr	r3, [pc, #16]	@ (800ddc4 <_Z14UpdatePriorityv+0x1a0>)
 800ddb4:	2218      	movs	r2, #24
 800ddb6:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
 800ddba:	bf00      	nop
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	20000418 	.word	0x20000418
 800ddc4:	200090b0 	.word	0x200090b0
 800ddc8:	08010b5c 	.word	0x08010b5c

0800ddcc <StartOS>:
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	f7ff ff28 	bl	800dc24 <_Z14UpdatePriorityv>
 800ddd4:	4a05      	ldr	r2, [pc, #20]	@ (800ddec <StartOS+0x20>)
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	4805      	ldr	r0, [pc, #20]	@ (800ddf0 <StartOS+0x24>)
 800ddda:	f7f8 faa5 	bl	8006328 <osThreadNew>
 800ddde:	4603      	mov	r3, r0
 800dde0:	4a04      	ldr	r2, [pc, #16]	@ (800ddf4 <StartOS+0x28>)
 800dde2:	6053      	str	r3, [r2, #4]
 800dde4:	f7f8 fa7a 	bl	80062dc <osKernelStart>
 800dde8:	bf00      	nop
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	08010c6c 	.word	0x08010c6c
 800ddf0:	0800e14d 	.word	0x0800e14d
 800ddf4:	200090b0 	.word	0x200090b0

0800ddf8 <HardReset>:
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	2101      	movs	r1, #1
 800ddfe:	4803      	ldr	r0, [pc, #12]	@ (800de0c <HardReset+0x14>)
 800de00:	f7fd fc34 	bl	800b66c <_ZN12FlashManager9HardResetEb>
 800de04:	f7f4 f87b 	bl	8001efe <HAL_NVIC_SystemReset>
 800de08:	bf00      	nop
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	20009094 	.word	0x20009094

0800de10 <FlashInitialize>:
 800de10:	b580      	push	{r7, lr}
 800de12:	af00      	add	r7, sp, #0
 800de14:	4877      	ldr	r0, [pc, #476]	@ (800dff4 <FlashInitialize+0x1e4>)
 800de16:	f7fd fd37 	bl	800b888 <_ZN12FlashManager7IsSetupEv>
 800de1a:	4603      	mov	r3, r0
 800de1c:	f083 0301 	eor.w	r3, r3, #1
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b00      	cmp	r3, #0
 800de24:	d065      	beq.n	800def2 <FlashInitialize+0xe2>
 800de26:	4b74      	ldr	r3, [pc, #464]	@ (800dff8 <FlashInitialize+0x1e8>)
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	4619      	mov	r1, r3
 800de2c:	4871      	ldr	r0, [pc, #452]	@ (800dff4 <FlashInitialize+0x1e4>)
 800de2e:	f7fd fd85 	bl	800b93c <_ZN12FlashManager18WriteSendPerSecondEh>
 800de32:	4b71      	ldr	r3, [pc, #452]	@ (800dff8 <FlashInitialize+0x1e8>)
 800de34:	785b      	ldrb	r3, [r3, #1]
 800de36:	4619      	mov	r1, r3
 800de38:	486e      	ldr	r0, [pc, #440]	@ (800dff4 <FlashInitialize+0x1e4>)
 800de3a:	f7fd fe1b 	bl	800ba74 <_ZN12FlashManager22WriteFirstEmgPerSecondEh>
 800de3e:	4b6e      	ldr	r3, [pc, #440]	@ (800dff8 <FlashInitialize+0x1e8>)
 800de40:	789b      	ldrb	r3, [r3, #2]
 800de42:	4619      	mov	r1, r3
 800de44:	486b      	ldr	r0, [pc, #428]	@ (800dff4 <FlashInitialize+0x1e4>)
 800de46:	f7fd feb1 	bl	800bbac <_ZN12FlashManager23WriteSecondEmgPerSecondEh>
 800de4a:	4b6b      	ldr	r3, [pc, #428]	@ (800dff8 <FlashInitialize+0x1e8>)
 800de4c:	78db      	ldrb	r3, [r3, #3]
 800de4e:	4619      	mov	r1, r3
 800de50:	4868      	ldr	r0, [pc, #416]	@ (800dff4 <FlashInitialize+0x1e4>)
 800de52:	f7fd ff47 	bl	800bce4 <_ZN12FlashManager20WriteVolumePerSecondEh>
 800de56:	4b68      	ldr	r3, [pc, #416]	@ (800dff8 <FlashInitialize+0x1e8>)
 800de58:	791b      	ldrb	r3, [r3, #4]
 800de5a:	4619      	mov	r1, r3
 800de5c:	4865      	ldr	r0, [pc, #404]	@ (800dff4 <FlashInitialize+0x1e4>)
 800de5e:	f7fd ffdd 	bl	800be1c <_ZN12FlashManager18WriteFlowPerSecondEh>
 800de62:	4b65      	ldr	r3, [pc, #404]	@ (800dff8 <FlashInitialize+0x1e8>)
 800de64:	795b      	ldrb	r3, [r3, #5]
 800de66:	4619      	mov	r1, r3
 800de68:	4862      	ldr	r0, [pc, #392]	@ (800dff4 <FlashInitialize+0x1e4>)
 800de6a:	f7fe f873 	bl	800bf54 <_ZN12FlashManager19WritePumpMaxRunTimeEh>
 800de6e:	4b62      	ldr	r3, [pc, #392]	@ (800dff8 <FlashInitialize+0x1e8>)
 800de70:	799b      	ldrb	r3, [r3, #6]
 800de72:	4619      	mov	r1, r3
 800de74:	485f      	ldr	r0, [pc, #380]	@ (800dff4 <FlashInitialize+0x1e4>)
 800de76:	f7fe f909 	bl	800c08c <_ZN12FlashManager20WriteValveMaxRunTimeEh>
 800de7a:	4b5f      	ldr	r3, [pc, #380]	@ (800dff8 <FlashInitialize+0x1e8>)
 800de7c:	6a1b      	ldr	r3, [r3, #32]
 800de7e:	4618      	mov	r0, r3
 800de80:	f7f2 fb5a 	bl	8000538 <__aeabi_f2d>
 800de84:	4602      	mov	r2, r0
 800de86:	460b      	mov	r3, r1
 800de88:	ec43 2b10 	vmov	d0, r2, r3
 800de8c:	4859      	ldr	r0, [pc, #356]	@ (800dff4 <FlashInitialize+0x1e4>)
 800de8e:	f7fe f999 	bl	800c1c4 <_ZN12FlashManager13WriteFlowRateEd>
 800de92:	4b59      	ldr	r3, [pc, #356]	@ (800dff8 <FlashInitialize+0x1e8>)
 800de94:	69db      	ldr	r3, [r3, #28]
 800de96:	4618      	mov	r0, r3
 800de98:	f7f2 fb4e 	bl	8000538 <__aeabi_f2d>
 800de9c:	4602      	mov	r2, r0
 800de9e:	460b      	mov	r3, r1
 800dea0:	ec43 2b10 	vmov	d0, r2, r3
 800dea4:	4853      	ldr	r0, [pc, #332]	@ (800dff4 <FlashInitialize+0x1e4>)
 800dea6:	f7fe fa27 	bl	800c2f8 <_ZN12FlashManager15WriteVolumeRateEd>
 800deaa:	4b53      	ldr	r3, [pc, #332]	@ (800dff8 <FlashInitialize+0x1e8>)
 800deac:	695b      	ldr	r3, [r3, #20]
 800deae:	4619      	mov	r1, r3
 800deb0:	4850      	ldr	r0, [pc, #320]	@ (800dff4 <FlashInitialize+0x1e4>)
 800deb2:	f7fe fb4e 	bl	800c552 <_ZN12FlashManager16WriteFlowAverageEm>
 800deb6:	4b50      	ldr	r3, [pc, #320]	@ (800dff8 <FlashInitialize+0x1e8>)
 800deb8:	699b      	ldr	r3, [r3, #24]
 800deba:	4619      	mov	r1, r3
 800debc:	484d      	ldr	r0, [pc, #308]	@ (800dff4 <FlashInitialize+0x1e4>)
 800debe:	f7fe fab5 	bl	800c42c <_ZN12FlashManager18WriteVolumeAverageEm>
 800dec2:	4b4d      	ldr	r3, [pc, #308]	@ (800dff8 <FlashInitialize+0x1e8>)
 800dec4:	8919      	ldrh	r1, [r3, #8]
 800dec6:	4b4c      	ldr	r3, [pc, #304]	@ (800dff8 <FlashInitialize+0x1e8>)
 800dec8:	895a      	ldrh	r2, [r3, #10]
 800deca:	4b4b      	ldr	r3, [pc, #300]	@ (800dff8 <FlashInitialize+0x1e8>)
 800decc:	899b      	ldrh	r3, [r3, #12]
 800dece:	4849      	ldr	r0, [pc, #292]	@ (800dff4 <FlashInitialize+0x1e4>)
 800ded0:	f7fe fbd2 	bl	800c678 <_ZN12FlashManager17WriteFirstEmgDataEttt>
 800ded4:	4b48      	ldr	r3, [pc, #288]	@ (800dff8 <FlashInitialize+0x1e8>)
 800ded6:	89d9      	ldrh	r1, [r3, #14]
 800ded8:	4b47      	ldr	r3, [pc, #284]	@ (800dff8 <FlashInitialize+0x1e8>)
 800deda:	8a1a      	ldrh	r2, [r3, #16]
 800dedc:	4b46      	ldr	r3, [pc, #280]	@ (800dff8 <FlashInitialize+0x1e8>)
 800dede:	8a5b      	ldrh	r3, [r3, #18]
 800dee0:	4844      	ldr	r0, [pc, #272]	@ (800dff4 <FlashInitialize+0x1e4>)
 800dee2:	f7fe fd84 	bl	800c9ee <_ZN12FlashManager18WriteSecondEmgDataEttt>
 800dee6:	4843      	ldr	r0, [pc, #268]	@ (800dff4 <FlashInitialize+0x1e4>)
 800dee8:	f7fd fc86 	bl	800b7f8 <_ZN12FlashManager5SetupEv>
 800deec:	4841      	ldr	r0, [pc, #260]	@ (800dff4 <FlashInitialize+0x1e4>)
 800deee:	f7fd fc09 	bl	800b704 <_ZN12FlashManager6UpdateEv>
 800def2:	4840      	ldr	r0, [pc, #256]	@ (800dff4 <FlashInitialize+0x1e4>)
 800def4:	f7fd fd6c 	bl	800b9d0 <_ZN12FlashManager17ReadSendPerSecondEv>
 800def8:	4603      	mov	r3, r0
 800defa:	461a      	mov	r2, r3
 800defc:	4b3e      	ldr	r3, [pc, #248]	@ (800dff8 <FlashInitialize+0x1e8>)
 800defe:	701a      	strb	r2, [r3, #0]
 800df00:	483c      	ldr	r0, [pc, #240]	@ (800dff4 <FlashInitialize+0x1e4>)
 800df02:	f7fd fe01 	bl	800bb08 <_ZN12FlashManager21ReadFirstEmgPerSecondEv>
 800df06:	4603      	mov	r3, r0
 800df08:	461a      	mov	r2, r3
 800df0a:	4b3b      	ldr	r3, [pc, #236]	@ (800dff8 <FlashInitialize+0x1e8>)
 800df0c:	705a      	strb	r2, [r3, #1]
 800df0e:	4839      	ldr	r0, [pc, #228]	@ (800dff4 <FlashInitialize+0x1e4>)
 800df10:	f7fd fe96 	bl	800bc40 <_ZN12FlashManager22ReadSecondEmgPerSecondEv>
 800df14:	4603      	mov	r3, r0
 800df16:	461a      	mov	r2, r3
 800df18:	4b37      	ldr	r3, [pc, #220]	@ (800dff8 <FlashInitialize+0x1e8>)
 800df1a:	709a      	strb	r2, [r3, #2]
 800df1c:	4835      	ldr	r0, [pc, #212]	@ (800dff4 <FlashInitialize+0x1e4>)
 800df1e:	f7fd ff2b 	bl	800bd78 <_ZN12FlashManager19ReadVolumePerSecondEv>
 800df22:	4603      	mov	r3, r0
 800df24:	461a      	mov	r2, r3
 800df26:	4b34      	ldr	r3, [pc, #208]	@ (800dff8 <FlashInitialize+0x1e8>)
 800df28:	70da      	strb	r2, [r3, #3]
 800df2a:	4832      	ldr	r0, [pc, #200]	@ (800dff4 <FlashInitialize+0x1e4>)
 800df2c:	f7fd ffc0 	bl	800beb0 <_ZN12FlashManager17ReadFlowPerSecondEv>
 800df30:	4603      	mov	r3, r0
 800df32:	461a      	mov	r2, r3
 800df34:	4b30      	ldr	r3, [pc, #192]	@ (800dff8 <FlashInitialize+0x1e8>)
 800df36:	711a      	strb	r2, [r3, #4]
 800df38:	482e      	ldr	r0, [pc, #184]	@ (800dff4 <FlashInitialize+0x1e4>)
 800df3a:	f7fe f855 	bl	800bfe8 <_ZN12FlashManager18ReadPumpMaxRunTimeEv>
 800df3e:	4603      	mov	r3, r0
 800df40:	461a      	mov	r2, r3
 800df42:	4b2d      	ldr	r3, [pc, #180]	@ (800dff8 <FlashInitialize+0x1e8>)
 800df44:	715a      	strb	r2, [r3, #5]
 800df46:	482b      	ldr	r0, [pc, #172]	@ (800dff4 <FlashInitialize+0x1e4>)
 800df48:	f7fe f8ea 	bl	800c120 <_ZN12FlashManager19ReadValveMaxRunTimeEv>
 800df4c:	4603      	mov	r3, r0
 800df4e:	461a      	mov	r2, r3
 800df50:	4b29      	ldr	r3, [pc, #164]	@ (800dff8 <FlashInitialize+0x1e8>)
 800df52:	719a      	strb	r2, [r3, #6]
 800df54:	4827      	ldr	r0, [pc, #156]	@ (800dff4 <FlashInitialize+0x1e4>)
 800df56:	f7fe f977 	bl	800c248 <_ZN12FlashManager12ReadFlowRateEv>
 800df5a:	ec53 2b10 	vmov	r2, r3, d0
 800df5e:	4610      	mov	r0, r2
 800df60:	4619      	mov	r1, r3
 800df62:	f7f2 fd73 	bl	8000a4c <__aeabi_d2f>
 800df66:	4603      	mov	r3, r0
 800df68:	4a23      	ldr	r2, [pc, #140]	@ (800dff8 <FlashInitialize+0x1e8>)
 800df6a:	6213      	str	r3, [r2, #32]
 800df6c:	4821      	ldr	r0, [pc, #132]	@ (800dff4 <FlashInitialize+0x1e4>)
 800df6e:	f7fe fa05 	bl	800c37c <_ZN12FlashManager14ReadVolumeRateEv>
 800df72:	ec53 2b10 	vmov	r2, r3, d0
 800df76:	4610      	mov	r0, r2
 800df78:	4619      	mov	r1, r3
 800df7a:	f7f2 fd67 	bl	8000a4c <__aeabi_d2f>
 800df7e:	4603      	mov	r3, r0
 800df80:	4a1d      	ldr	r2, [pc, #116]	@ (800dff8 <FlashInitialize+0x1e8>)
 800df82:	61d3      	str	r3, [r2, #28]
 800df84:	481b      	ldr	r0, [pc, #108]	@ (800dff4 <FlashInitialize+0x1e4>)
 800df86:	f7fe fb25 	bl	800c5d4 <_ZN12FlashManager15ReadFlowAverageEv>
 800df8a:	4603      	mov	r3, r0
 800df8c:	4a1a      	ldr	r2, [pc, #104]	@ (800dff8 <FlashInitialize+0x1e8>)
 800df8e:	6153      	str	r3, [r2, #20]
 800df90:	4818      	ldr	r0, [pc, #96]	@ (800dff4 <FlashInitialize+0x1e4>)
 800df92:	f7fe fa8c 	bl	800c4ae <_ZN12FlashManager17ReadVolumeAverageEv>
 800df96:	4603      	mov	r3, r0
 800df98:	4a17      	ldr	r2, [pc, #92]	@ (800dff8 <FlashInitialize+0x1e8>)
 800df9a:	6193      	str	r3, [r2, #24]
 800df9c:	4815      	ldr	r0, [pc, #84]	@ (800dff4 <FlashInitialize+0x1e4>)
 800df9e:	f7fe fc29 	bl	800c7f4 <_ZN12FlashManager19ReadFirstEmgMaxTrimEv>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	4b14      	ldr	r3, [pc, #80]	@ (800dff8 <FlashInitialize+0x1e8>)
 800dfa8:	811a      	strh	r2, [r3, #8]
 800dfaa:	4812      	ldr	r0, [pc, #72]	@ (800dff4 <FlashInitialize+0x1e4>)
 800dfac:	f7fe fc75 	bl	800c89a <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	4b10      	ldr	r3, [pc, #64]	@ (800dff8 <FlashInitialize+0x1e8>)
 800dfb6:	815a      	strh	r2, [r3, #10]
 800dfb8:	480e      	ldr	r0, [pc, #56]	@ (800dff4 <FlashInitialize+0x1e4>)
 800dfba:	f7fe fcc3 	bl	800c944 <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	4b0d      	ldr	r3, [pc, #52]	@ (800dff8 <FlashInitialize+0x1e8>)
 800dfc4:	819a      	strh	r2, [r3, #12]
 800dfc6:	480b      	ldr	r0, [pc, #44]	@ (800dff4 <FlashInitialize+0x1e4>)
 800dfc8:	f7fe fdcf 	bl	800cb6a <_ZN12FlashManager20ReadSecondEmgMaxTrimEv>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	461a      	mov	r2, r3
 800dfd0:	4b09      	ldr	r3, [pc, #36]	@ (800dff8 <FlashInitialize+0x1e8>)
 800dfd2:	81da      	strh	r2, [r3, #14]
 800dfd4:	4807      	ldr	r0, [pc, #28]	@ (800dff4 <FlashInitialize+0x1e4>)
 800dfd6:	f7fe fe1b 	bl	800cc10 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	461a      	mov	r2, r3
 800dfde:	4b06      	ldr	r3, [pc, #24]	@ (800dff8 <FlashInitialize+0x1e8>)
 800dfe0:	821a      	strh	r2, [r3, #16]
 800dfe2:	4804      	ldr	r0, [pc, #16]	@ (800dff4 <FlashInitialize+0x1e4>)
 800dfe4:	f7fe fe69 	bl	800ccba <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	461a      	mov	r2, r3
 800dfec:	4b02      	ldr	r3, [pc, #8]	@ (800dff8 <FlashInitialize+0x1e8>)
 800dfee:	825a      	strh	r2, [r3, #18]
 800dff0:	bf00      	nop
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	20009094 	.word	0x20009094
 800dff8:	200092a0 	.word	0x200092a0

0800dffc <SuccessResult>:
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b082      	sub	sp, #8
 800e000:	af00      	add	r7, sp, #0
 800e002:	2301      	movs	r3, #1
 800e004:	713b      	strb	r3, [r7, #4]
 800e006:	1d3b      	adds	r3, r7, #4
 800e008:	2101      	movs	r1, #1
 800e00a:	4618      	mov	r0, r3
 800e00c:	f000 f91e 	bl	800e24c <WriteUart>
 800e010:	bf00      	nop
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <SuccessDataResult>:
 800e018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e01c:	b089      	sub	sp, #36	@ 0x24
 800e01e:	af00      	add	r7, sp, #0
 800e020:	60ba      	str	r2, [r7, #8]
 800e022:	607b      	str	r3, [r7, #4]
 800e024:	4603      	mov	r3, r0
 800e026:	73fb      	strb	r3, [r7, #15]
 800e028:	460b      	mov	r3, r1
 800e02a:	73bb      	strb	r3, [r7, #14]
 800e02c:	466b      	mov	r3, sp
 800e02e:	461e      	mov	r6, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	1d99      	adds	r1, r3, #6
 800e034:	1e4b      	subs	r3, r1, #1
 800e036:	61bb      	str	r3, [r7, #24]
 800e038:	460a      	mov	r2, r1
 800e03a:	2300      	movs	r3, #0
 800e03c:	4690      	mov	r8, r2
 800e03e:	4699      	mov	r9, r3
 800e040:	f04f 0200 	mov.w	r2, #0
 800e044:	f04f 0300 	mov.w	r3, #0
 800e048:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e04c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e050:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e054:	460a      	mov	r2, r1
 800e056:	2300      	movs	r3, #0
 800e058:	4614      	mov	r4, r2
 800e05a:	461d      	mov	r5, r3
 800e05c:	f04f 0200 	mov.w	r2, #0
 800e060:	f04f 0300 	mov.w	r3, #0
 800e064:	00eb      	lsls	r3, r5, #3
 800e066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e06a:	00e2      	lsls	r2, r4, #3
 800e06c:	460b      	mov	r3, r1
 800e06e:	3307      	adds	r3, #7
 800e070:	08db      	lsrs	r3, r3, #3
 800e072:	00db      	lsls	r3, r3, #3
 800e074:	ebad 0d03 	sub.w	sp, sp, r3
 800e078:	466b      	mov	r3, sp
 800e07a:	3300      	adds	r3, #0
 800e07c:	617b      	str	r3, [r7, #20]
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	3901      	subs	r1, #1
 800e082:	2200      	movs	r2, #0
 800e084:	701a      	strb	r2, [r3, #0]
 800e086:	1c5a      	adds	r2, r3, #1
 800e088:	1e4b      	subs	r3, r1, #1
 800e08a:	e003      	b.n	800e094 <SuccessDataResult+0x7c>
 800e08c:	2100      	movs	r1, #0
 800e08e:	7011      	strb	r1, [r2, #0]
 800e090:	3b01      	subs	r3, #1
 800e092:	3201      	adds	r2, #1
 800e094:	2b00      	cmp	r3, #0
 800e096:	daf9      	bge.n	800e08c <SuccessDataResult+0x74>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	3303      	adds	r3, #3
 800e09e:	827b      	strh	r3, [r7, #18]
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	2202      	movs	r2, #2
 800e0a4:	701a      	strb	r2, [r3, #0]
 800e0a6:	8a7b      	ldrh	r3, [r7, #18]
 800e0a8:	0a1b      	lsrs	r3, r3, #8
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	705a      	strb	r2, [r3, #1]
 800e0b2:	8a7b      	ldrh	r3, [r7, #18]
 800e0b4:	b2da      	uxtb	r2, r3
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	709a      	strb	r2, [r3, #2]
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	70da      	strb	r2, [r3, #3]
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	7bfa      	ldrb	r2, [r7, #15]
 800e0c4:	711a      	strb	r2, [r3, #4]
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	7bba      	ldrb	r2, [r7, #14]
 800e0ca:	715a      	strb	r2, [r3, #5]
 800e0cc:	2306      	movs	r3, #6
 800e0ce:	61fb      	str	r3, [r7, #28]
 800e0d0:	e00c      	b.n	800e0ec <SuccessDataResult+0xd4>
 800e0d2:	69fb      	ldr	r3, [r7, #28]
 800e0d4:	3b06      	subs	r3, #6
 800e0d6:	68ba      	ldr	r2, [r7, #8]
 800e0d8:	4413      	add	r3, r2
 800e0da:	7819      	ldrb	r1, [r3, #0]
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	460a      	mov	r2, r1
 800e0e4:	701a      	strb	r2, [r3, #0]
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	61fb      	str	r3, [r7, #28]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	3305      	adds	r3, #5
 800e0f0:	69fa      	ldr	r2, [r7, #28]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	dded      	ble.n	800e0d2 <SuccessDataResult+0xba>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	3306      	adds	r3, #6
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	6978      	ldr	r0, [r7, #20]
 800e0fe:	f000 f8a5 	bl	800e24c <WriteUart>
 800e102:	46b5      	mov	sp, r6
 800e104:	bf00      	nop
 800e106:	3724      	adds	r7, #36	@ 0x24
 800e108:	46bd      	mov	sp, r7
 800e10a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e10e <ErrorResult>:
 800e10e:	b580      	push	{r7, lr}
 800e110:	b084      	sub	sp, #16
 800e112:	af00      	add	r7, sp, #0
 800e114:	4603      	mov	r3, r0
 800e116:	460a      	mov	r2, r1
 800e118:	71fb      	strb	r3, [r7, #7]
 800e11a:	4613      	mov	r3, r2
 800e11c:	80bb      	strh	r3, [r7, #4]
 800e11e:	2300      	movs	r3, #0
 800e120:	733b      	strb	r3, [r7, #12]
 800e122:	79fb      	ldrb	r3, [r7, #7]
 800e124:	737b      	strb	r3, [r7, #13]
 800e126:	88bb      	ldrh	r3, [r7, #4]
 800e128:	0a1b      	lsrs	r3, r3, #8
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	73bb      	strb	r3, [r7, #14]
 800e130:	88bb      	ldrh	r3, [r7, #4]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	73fb      	strb	r3, [r7, #15]
 800e136:	f107 030c 	add.w	r3, r7, #12
 800e13a:	2104      	movs	r1, #4
 800e13c:	4618      	mov	r0, r3
 800e13e:	f000 f885 	bl	800e24c <WriteUart>
 800e142:	bf00      	nop
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
	...

0800e14c <StartReadUARTTask>:
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b08a      	sub	sp, #40	@ 0x28
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	2364      	movs	r3, #100	@ 0x64
 800e156:	61fb      	str	r3, [r7, #28]
 800e158:	4a35      	ldr	r2, [pc, #212]	@ (800e230 <StartReadUARTTask+0xe4>)
 800e15a:	2101      	movs	r1, #1
 800e15c:	2001      	movs	r0, #1
 800e15e:	f7f8 f9a2 	bl	80064a6 <osSemaphoreNew>
 800e162:	4603      	mov	r3, r0
 800e164:	4a33      	ldr	r2, [pc, #204]	@ (800e234 <StartReadUARTTask+0xe8>)
 800e166:	f8c2 31e0 	str.w	r3, [r2, #480]	@ 0x1e0
 800e16a:	4a33      	ldr	r2, [pc, #204]	@ (800e238 <StartReadUARTTask+0xec>)
 800e16c:	2100      	movs	r1, #0
 800e16e:	4833      	ldr	r0, [pc, #204]	@ (800e23c <StartReadUARTTask+0xf0>)
 800e170:	f7f8 f8da 	bl	8006328 <osThreadNew>
 800e174:	4603      	mov	r3, r0
 800e176:	4a2f      	ldr	r2, [pc, #188]	@ (800e234 <StartReadUARTTask+0xe8>)
 800e178:	6013      	str	r3, [r2, #0]
 800e17a:	2300      	movs	r3, #0
 800e17c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e180:	23ff      	movs	r3, #255	@ 0xff
 800e182:	61bb      	str	r3, [r7, #24]
 800e184:	2301      	movs	r3, #1
 800e186:	69ba      	ldr	r2, [r7, #24]
 800e188:	21ff      	movs	r1, #255	@ 0xff
 800e18a:	2064      	movs	r0, #100	@ 0x64
 800e18c:	f7ff ff44 	bl	800e018 <SuccessDataResult>
 800e190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e194:	2b00      	cmp	r3, #0
 800e196:	d107      	bne.n	800e1a8 <StartReadUARTTask+0x5c>
 800e198:	2208      	movs	r2, #8
 800e19a:	4929      	ldr	r1, [pc, #164]	@ (800e240 <StartReadUARTTask+0xf4>)
 800e19c:	4829      	ldr	r0, [pc, #164]	@ (800e244 <StartReadUARTTask+0xf8>)
 800e19e:	f7f6 ff2e 	bl	8004ffe <HAL_UART_Receive_DMA>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d101      	bne.n	800e1ac <StartReadUARTTask+0x60>
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	e000      	b.n	800e1ae <StartReadUARTTask+0x62>
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d03a      	beq.n	800e228 <StartReadUARTTask+0xdc>
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e1b8:	4b21      	ldr	r3, [pc, #132]	@ (800e240 <StartReadUARTTask+0xf4>)
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d033      	beq.n	800e228 <StartReadUARTTask+0xdc>
 800e1c0:	4b1c      	ldr	r3, [pc, #112]	@ (800e234 <StartReadUARTTask+0xe8>)
 800e1c2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800e1c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7f8 f9f4 	bl	80065b8 <osSemaphoreAcquire>
 800e1d0:	6178      	str	r0, [r7, #20]
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d124      	bne.n	800e222 <StartReadUARTTask+0xd6>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	623b      	str	r3, [r7, #32]
 800e1dc:	e011      	b.n	800e202 <StartReadUARTTask+0xb6>
 800e1de:	4a18      	ldr	r2, [pc, #96]	@ (800e240 <StartReadUARTTask+0xf4>)
 800e1e0:	6a3b      	ldr	r3, [r7, #32]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	7819      	ldrb	r1, [r3, #0]
 800e1e6:	f107 020c 	add.w	r2, r7, #12
 800e1ea:	6a3b      	ldr	r3, [r7, #32]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	460a      	mov	r2, r1
 800e1f0:	701a      	strb	r2, [r3, #0]
 800e1f2:	4a13      	ldr	r2, [pc, #76]	@ (800e240 <StartReadUARTTask+0xf4>)
 800e1f4:	6a3b      	ldr	r3, [r7, #32]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	701a      	strb	r2, [r3, #0]
 800e1fc:	6a3b      	ldr	r3, [r7, #32]
 800e1fe:	3301      	adds	r3, #1
 800e200:	623b      	str	r3, [r7, #32]
 800e202:	6a3b      	ldr	r3, [r7, #32]
 800e204:	2b07      	cmp	r3, #7
 800e206:	ddea      	ble.n	800e1de <StartReadUARTTask+0x92>
 800e208:	f107 030c 	add.w	r3, r7, #12
 800e20c:	4619      	mov	r1, r3
 800e20e:	480e      	ldr	r0, [pc, #56]	@ (800e248 <StartReadUARTTask+0xfc>)
 800e210:	f7fb fcbe 	bl	8009b90 <_ZN13Communication14ProcessCommandEPh>
 800e214:	4b07      	ldr	r3, [pc, #28]	@ (800e234 <StartReadUARTTask+0xe8>)
 800e216:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7f8 fa1e 	bl	800665c <osSemaphoreRelease>
 800e220:	e002      	b.n	800e228 <StartReadUARTTask+0xdc>
 800e222:	2301      	movs	r3, #1
 800e224:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e228:	2064      	movs	r0, #100	@ 0x64
 800e22a:	f7f9 fe09 	bl	8007e40 <vTaskDelay>
 800e22e:	e7af      	b.n	800e190 <StartReadUARTTask+0x44>
 800e230:	08010cd0 	.word	0x08010cd0
 800e234:	200090b0 	.word	0x200090b0
 800e238:	08010c6c 	.word	0x08010c6c
 800e23c:	0800e2a1 	.word	0x0800e2a1
 800e240:	20005000 	.word	0x20005000
 800e244:	20000460 	.word	0x20000460
 800e248:	20009074 	.word	0x20009074

0800e24c <WriteUart>:
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
 800e256:	2300      	movs	r3, #0
 800e258:	73fb      	strb	r3, [r7, #15]
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	f04f 33ff 	mov.w	r3, #4294967295
 800e262:	6879      	ldr	r1, [r7, #4]
 800e264:	480d      	ldr	r0, [pc, #52]	@ (800e29c <WriteUart+0x50>)
 800e266:	f7f6 fe3f 	bl	8004ee8 <HAL_UART_Transmit>
 800e26a:	4603      	mov	r3, r0
 800e26c:	73bb      	strb	r3, [r7, #14]
 800e26e:	7bbb      	ldrb	r3, [r7, #14]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00f      	beq.n	800e294 <WriteUart+0x48>
 800e274:	7bfb      	ldrb	r3, [r7, #15]
 800e276:	2b04      	cmp	r3, #4
 800e278:	d80c      	bhi.n	800e294 <WriteUart+0x48>
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	b29a      	uxth	r2, r3
 800e27e:	f04f 33ff 	mov.w	r3, #4294967295
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	4805      	ldr	r0, [pc, #20]	@ (800e29c <WriteUart+0x50>)
 800e286:	f7f6 fe2f 	bl	8004ee8 <HAL_UART_Transmit>
 800e28a:	4603      	mov	r3, r0
 800e28c:	73bb      	strb	r3, [r7, #14]
 800e28e:	7bfb      	ldrb	r3, [r7, #15]
 800e290:	3301      	adds	r3, #1
 800e292:	73fb      	strb	r3, [r7, #15]
 800e294:	bf00      	nop
 800e296:	3710      	adds	r7, #16
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	20000460 	.word	0x20000460

0800e2a0 <StartSendUARTTask>:
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e2ae:	f843 0c4c 	str.w	r0, [r3, #-76]
 800e2b2:	f7f9 ff77 	bl	80081a4 <xTaskGetTickCount>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800e2bc:	f102 0208 	add.w	r2, r2, #8
 800e2c0:	6013      	str	r3, [r2, #0]
 800e2c2:	4bb1      	ldr	r3, [pc, #708]	@ (800e588 <StartSendUARTTask+0x2e8>)
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e2cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2d0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e2d4:	f102 0218 	add.w	r2, r2, #24
 800e2d8:	6013      	str	r3, [r2, #0]
 800e2da:	230b      	movs	r3, #11
 800e2dc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e2e0:	f102 020e 	add.w	r2, r2, #14
 800e2e4:	8013      	strh	r3, [r2, #0]
 800e2e6:	4ba9      	ldr	r3, [pc, #676]	@ (800e58c <StartSendUARTTask+0x2ec>)
 800e2e8:	f8d3 21d0 	ldr.w	r2, [r3, #464]	@ 0x1d0
 800e2ec:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e2f0:	f103 0318 	add.w	r3, r3, #24
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	49a6      	ldr	r1, [pc, #664]	@ (800e590 <StartSendUARTTask+0x2f0>)
 800e2f8:	fba1 1303 	umull	r1, r3, r1, r3
 800e2fc:	08db      	lsrs	r3, r3, #3
 800e2fe:	4619      	mov	r1, r3
 800e300:	4610      	mov	r0, r2
 800e302:	f7f8 f959 	bl	80065b8 <osSemaphoreAcquire>
 800e306:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e30a:	f103 0314 	add.w	r3, r3, #20
 800e30e:	6018      	str	r0, [r3, #0]
 800e310:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e314:	f103 0314 	add.w	r3, r3, #20
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	f040 80b1 	bne.w	800e482 <StartSendUARTTask+0x1e2>
 800e320:	4b9c      	ldr	r3, [pc, #624]	@ (800e594 <StartSendUARTTask+0x2f4>)
 800e322:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e328:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e32c:	f102 0210 	add.w	r2, r2, #16
 800e330:	6013      	str	r3, [r2, #0]
 800e332:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e336:	f103 0310 	add.w	r3, r3, #16
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	f340 809a 	ble.w	800e476 <StartSendUARTTask+0x1d6>
 800e342:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e346:	f103 030e 	add.w	r3, r3, #14
 800e34a:	881b      	ldrh	r3, [r3, #0]
 800e34c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e350:	4413      	add	r3, r2
 800e352:	2201      	movs	r2, #1
 800e354:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e358:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e35c:	f103 030e 	add.w	r3, r3, #14
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	3301      	adds	r3, #1
 800e364:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e368:	f102 020e 	add.w	r2, r2, #14
 800e36c:	8013      	strh	r3, [r2, #0]
 800e36e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e372:	f103 0310 	add.w	r3, r3, #16
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	121a      	asrs	r2, r3, #8
 800e37a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e37e:	f103 030e 	add.w	r3, r3, #14
 800e382:	881b      	ldrh	r3, [r3, #0]
 800e384:	b2d2      	uxtb	r2, r2
 800e386:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e38a:	440b      	add	r3, r1
 800e38c:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e390:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e394:	f103 030e 	add.w	r3, r3, #14
 800e398:	881b      	ldrh	r3, [r3, #0]
 800e39a:	3301      	adds	r3, #1
 800e39c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e3a0:	f102 020e 	add.w	r2, r2, #14
 800e3a4:	8013      	strh	r3, [r2, #0]
 800e3a6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e3aa:	f103 030e 	add.w	r3, r3, #14
 800e3ae:	881b      	ldrh	r3, [r3, #0]
 800e3b0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e3b4:	f102 0210 	add.w	r2, r2, #16
 800e3b8:	6812      	ldr	r2, [r2, #0]
 800e3ba:	b2d2      	uxtb	r2, r2
 800e3bc:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e3c0:	440b      	add	r3, r1
 800e3c2:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e3c6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e3ca:	f103 030e 	add.w	r3, r3, #14
 800e3ce:	881b      	ldrh	r3, [r3, #0]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e3d6:	f102 020e 	add.w	r2, r2, #14
 800e3da:	8013      	strh	r3, [r2, #0]
 800e3dc:	2300      	movs	r3, #0
 800e3de:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e3e2:	f102 0208 	add.w	r2, r2, #8
 800e3e6:	6013      	str	r3, [r2, #0]
 800e3e8:	e033      	b.n	800e452 <StartSendUARTTask+0x1b2>
 800e3ea:	4a6a      	ldr	r2, [pc, #424]	@ (800e594 <StartSendUARTTask+0x2f4>)
 800e3ec:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e3f0:	f103 0308 	add.w	r3, r3, #8
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	330a      	adds	r3, #10
 800e3f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e3fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e400:	f103 030e 	add.w	r3, r3, #14
 800e404:	881b      	ldrh	r3, [r3, #0]
 800e406:	b2d2      	uxtb	r2, r2
 800e408:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e40c:	440b      	add	r3, r1
 800e40e:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e412:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e416:	f103 030e 	add.w	r3, r3, #14
 800e41a:	881b      	ldrh	r3, [r3, #0]
 800e41c:	3301      	adds	r3, #1
 800e41e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e422:	f102 020e 	add.w	r2, r2, #14
 800e426:	8013      	strh	r3, [r2, #0]
 800e428:	4a5a      	ldr	r2, [pc, #360]	@ (800e594 <StartSendUARTTask+0x2f4>)
 800e42a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e42e:	f103 0308 	add.w	r3, r3, #8
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	330a      	adds	r3, #10
 800e436:	2100      	movs	r1, #0
 800e438:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800e43c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e440:	f103 0308 	add.w	r3, r3, #8
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	3301      	adds	r3, #1
 800e448:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e44c:	f102 0208 	add.w	r2, r2, #8
 800e450:	6013      	str	r3, [r2, #0]
 800e452:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e456:	f103 0308 	add.w	r3, r3, #8
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e460:	f103 0310 	add.w	r3, r3, #16
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	429a      	cmp	r2, r3
 800e468:	dbbf      	blt.n	800e3ea <StartSendUARTTask+0x14a>
 800e46a:	4b4a      	ldr	r3, [pc, #296]	@ (800e594 <StartSendUARTTask+0x2f4>)
 800e46c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e470:	461a      	mov	r2, r3
 800e472:	2300      	movs	r3, #0
 800e474:	6293      	str	r3, [r2, #40]	@ 0x28
 800e476:	4b45      	ldr	r3, [pc, #276]	@ (800e58c <StartSendUARTTask+0x2ec>)
 800e478:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7f8 f8ed 	bl	800665c <osSemaphoreRelease>
 800e482:	4b42      	ldr	r3, [pc, #264]	@ (800e58c <StartSendUARTTask+0x2ec>)
 800e484:	f8d3 21d4 	ldr.w	r2, [r3, #468]	@ 0x1d4
 800e488:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e48c:	f103 0318 	add.w	r3, r3, #24
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	493f      	ldr	r1, [pc, #252]	@ (800e590 <StartSendUARTTask+0x2f0>)
 800e494:	fba1 1303 	umull	r1, r3, r1, r3
 800e498:	08db      	lsrs	r3, r3, #3
 800e49a:	4619      	mov	r1, r3
 800e49c:	4610      	mov	r0, r2
 800e49e:	f7f8 f88b 	bl	80065b8 <osSemaphoreAcquire>
 800e4a2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e4a6:	f103 030c 	add.w	r3, r3, #12
 800e4aa:	6018      	str	r0, [r3, #0]
 800e4ac:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e4b0:	f103 030c 	add.w	r3, r3, #12
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f040 80bc 	bne.w	800e634 <StartSendUARTTask+0x394>
 800e4bc:	4b35      	ldr	r3, [pc, #212]	@ (800e594 <StartSendUARTTask+0x2f4>)
 800e4be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4c4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e4c8:	f102 0208 	add.w	r2, r2, #8
 800e4cc:	6013      	str	r3, [r2, #0]
 800e4ce:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e4d2:	f103 0308 	add.w	r3, r3, #8
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f340 80a5 	ble.w	800e628 <StartSendUARTTask+0x388>
 800e4de:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e4e2:	f103 030e 	add.w	r3, r3, #14
 800e4e6:	881b      	ldrh	r3, [r3, #0]
 800e4e8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e4ec:	4413      	add	r3, r2
 800e4ee:	2202      	movs	r2, #2
 800e4f0:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e4f4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e4f8:	f103 030e 	add.w	r3, r3, #14
 800e4fc:	881b      	ldrh	r3, [r3, #0]
 800e4fe:	3301      	adds	r3, #1
 800e500:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e504:	f102 020e 	add.w	r2, r2, #14
 800e508:	8013      	strh	r3, [r2, #0]
 800e50a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e50e:	f103 0308 	add.w	r3, r3, #8
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	121a      	asrs	r2, r3, #8
 800e516:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e51a:	f103 030e 	add.w	r3, r3, #14
 800e51e:	881b      	ldrh	r3, [r3, #0]
 800e520:	b2d2      	uxtb	r2, r2
 800e522:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e526:	440b      	add	r3, r1
 800e528:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e52c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e530:	f103 030e 	add.w	r3, r3, #14
 800e534:	881b      	ldrh	r3, [r3, #0]
 800e536:	3301      	adds	r3, #1
 800e538:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e53c:	f102 020e 	add.w	r2, r2, #14
 800e540:	8013      	strh	r3, [r2, #0]
 800e542:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e546:	f103 030e 	add.w	r3, r3, #14
 800e54a:	881b      	ldrh	r3, [r3, #0]
 800e54c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e550:	f102 0208 	add.w	r2, r2, #8
 800e554:	6812      	ldr	r2, [r2, #0]
 800e556:	b2d2      	uxtb	r2, r2
 800e558:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e55c:	440b      	add	r3, r1
 800e55e:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e562:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e566:	f103 030e 	add.w	r3, r3, #14
 800e56a:	881b      	ldrh	r3, [r3, #0]
 800e56c:	3301      	adds	r3, #1
 800e56e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e572:	f102 020e 	add.w	r2, r2, #14
 800e576:	8013      	strh	r3, [r2, #0]
 800e578:	2300      	movs	r3, #0
 800e57a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e57e:	f102 0204 	add.w	r2, r2, #4
 800e582:	6013      	str	r3, [r2, #0]
 800e584:	e03e      	b.n	800e604 <StartSendUARTTask+0x364>
 800e586:	bf00      	nop
 800e588:	200092a0 	.word	0x200092a0
 800e58c:	200090b0 	.word	0x200090b0
 800e590:	cccccccd 	.word	0xcccccccd
 800e594:	20005008 	.word	0x20005008
 800e598:	4ac8      	ldr	r2, [pc, #800]	@ (800e8bc <StartSendUARTTask+0x61c>)
 800e59a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e59e:	f103 0304 	add.w	r3, r3, #4
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f203 430a 	addw	r3, r3, #1034	@ 0x40a
 800e5a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e5ac:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e5b0:	f103 030e 	add.w	r3, r3, #14
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	b2d2      	uxtb	r2, r2
 800e5b8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e5bc:	440b      	add	r3, r1
 800e5be:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e5c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e5c6:	f103 030e 	add.w	r3, r3, #14
 800e5ca:	881b      	ldrh	r3, [r3, #0]
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e5d2:	f102 020e 	add.w	r2, r2, #14
 800e5d6:	8013      	strh	r3, [r2, #0]
 800e5d8:	4ab8      	ldr	r2, [pc, #736]	@ (800e8bc <StartSendUARTTask+0x61c>)
 800e5da:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e5de:	f103 0304 	add.w	r3, r3, #4
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f203 430a 	addw	r3, r3, #1034	@ 0x40a
 800e5e8:	2100      	movs	r1, #0
 800e5ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800e5ee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e5f2:	f103 0304 	add.w	r3, r3, #4
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e5fe:	f102 0204 	add.w	r2, r2, #4
 800e602:	6013      	str	r3, [r2, #0]
 800e604:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e608:	f103 0304 	add.w	r3, r3, #4
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e612:	f103 0308 	add.w	r3, r3, #8
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	429a      	cmp	r2, r3
 800e61a:	dbbd      	blt.n	800e598 <StartSendUARTTask+0x2f8>
 800e61c:	4ba7      	ldr	r3, [pc, #668]	@ (800e8bc <StartSendUARTTask+0x61c>)
 800e61e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e622:	461a      	mov	r2, r3
 800e624:	2300      	movs	r3, #0
 800e626:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e628:	4ba5      	ldr	r3, [pc, #660]	@ (800e8c0 <StartSendUARTTask+0x620>)
 800e62a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800e62e:	4618      	mov	r0, r3
 800e630:	f7f8 f814 	bl	800665c <osSemaphoreRelease>
 800e634:	4ba2      	ldr	r3, [pc, #648]	@ (800e8c0 <StartSendUARTTask+0x620>)
 800e636:	f8d3 21dc 	ldr.w	r2, [r3, #476]	@ 0x1dc
 800e63a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e63e:	f103 0318 	add.w	r3, r3, #24
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	499f      	ldr	r1, [pc, #636]	@ (800e8c4 <StartSendUARTTask+0x624>)
 800e646:	fba1 1303 	umull	r1, r3, r1, r3
 800e64a:	08db      	lsrs	r3, r3, #3
 800e64c:	4619      	mov	r1, r3
 800e64e:	4610      	mov	r0, r2
 800e650:	f7f7 ffb2 	bl	80065b8 <osSemaphoreAcquire>
 800e654:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e658:	f103 0304 	add.w	r3, r3, #4
 800e65c:	6018      	str	r0, [r3, #0]
 800e65e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e662:	f103 0304 	add.w	r3, r3, #4
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	f040 80a4 	bne.w	800e7b6 <StartSendUARTTask+0x516>
 800e66e:	4b96      	ldr	r3, [pc, #600]	@ (800e8c8 <StartSendUARTTask+0x628>)
 800e670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e67a:	6013      	str	r3, [r2, #0]
 800e67c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	f340 8091 	ble.w	800e7aa <StartSendUARTTask+0x50a>
 800e688:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e68c:	f103 030e 	add.w	r3, r3, #14
 800e690:	881b      	ldrh	r3, [r3, #0]
 800e692:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e696:	4413      	add	r3, r2
 800e698:	2203      	movs	r2, #3
 800e69a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e69e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e6a2:	f103 030e 	add.w	r3, r3, #14
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e6ae:	f102 020e 	add.w	r2, r2, #14
 800e6b2:	8013      	strh	r3, [r2, #0]
 800e6b4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	121a      	asrs	r2, r3, #8
 800e6bc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e6c0:	f103 030e 	add.w	r3, r3, #14
 800e6c4:	881b      	ldrh	r3, [r3, #0]
 800e6c6:	b2d2      	uxtb	r2, r2
 800e6c8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e6cc:	440b      	add	r3, r1
 800e6ce:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e6d2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e6d6:	f103 030e 	add.w	r3, r3, #14
 800e6da:	881b      	ldrh	r3, [r3, #0]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e6e2:	f102 020e 	add.w	r2, r2, #14
 800e6e6:	8013      	strh	r3, [r2, #0]
 800e6e8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e6ec:	f103 030e 	add.w	r3, r3, #14
 800e6f0:	881b      	ldrh	r3, [r3, #0]
 800e6f2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e6f6:	6812      	ldr	r2, [r2, #0]
 800e6f8:	b2d2      	uxtb	r2, r2
 800e6fa:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e6fe:	440b      	add	r3, r1
 800e700:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e704:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e708:	f103 030e 	add.w	r3, r3, #14
 800e70c:	881b      	ldrh	r3, [r3, #0]
 800e70e:	3301      	adds	r3, #1
 800e710:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e714:	f102 020e 	add.w	r2, r2, #14
 800e718:	8013      	strh	r3, [r2, #0]
 800e71a:	2300      	movs	r3, #0
 800e71c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e720:	6013      	str	r3, [r2, #0]
 800e722:	e034      	b.n	800e78e <StartSendUARTTask+0x4ee>
 800e724:	4a68      	ldr	r2, [pc, #416]	@ (800e8c8 <StartSendUARTTask+0x628>)
 800e726:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	4413      	add	r3, r2
 800e730:	3304      	adds	r3, #4
 800e732:	edd3 7a00 	vldr	s15, [r3]
 800e736:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e73a:	f103 030e 	add.w	r3, r3, #14
 800e73e:	881b      	ldrh	r3, [r3, #0]
 800e740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e744:	edc7 7a00 	vstr	s15, [r7]
 800e748:	783a      	ldrb	r2, [r7, #0]
 800e74a:	b2d2      	uxtb	r2, r2
 800e74c:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e750:	440b      	add	r3, r1
 800e752:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e756:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e75a:	f103 030e 	add.w	r3, r3, #14
 800e75e:	881b      	ldrh	r3, [r3, #0]
 800e760:	3301      	adds	r3, #1
 800e762:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e766:	f102 020e 	add.w	r2, r2, #14
 800e76a:	8013      	strh	r3, [r2, #0]
 800e76c:	4a56      	ldr	r2, [pc, #344]	@ (800e8c8 <StartSendUARTTask+0x628>)
 800e76e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	4413      	add	r3, r2
 800e778:	3304      	adds	r3, #4
 800e77a:	f04f 0200 	mov.w	r2, #0
 800e77e:	601a      	str	r2, [r3, #0]
 800e780:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	3301      	adds	r3, #1
 800e788:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e78c:	6013      	str	r3, [r2, #0]
 800e78e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	dbc2      	blt.n	800e724 <StartSendUARTTask+0x484>
 800e79e:	4b4a      	ldr	r3, [pc, #296]	@ (800e8c8 <StartSendUARTTask+0x628>)
 800e7a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	6053      	str	r3, [r2, #4]
 800e7aa:	4b45      	ldr	r3, [pc, #276]	@ (800e8c0 <StartSendUARTTask+0x620>)
 800e7ac:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7f7 ff53 	bl	800665c <osSemaphoreRelease>
 800e7b6:	4b42      	ldr	r3, [pc, #264]	@ (800e8c0 <StartSendUARTTask+0x620>)
 800e7b8:	f8d3 21d8 	ldr.w	r2, [r3, #472]	@ 0x1d8
 800e7bc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e7c0:	f103 0318 	add.w	r3, r3, #24
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	493f      	ldr	r1, [pc, #252]	@ (800e8c4 <StartSendUARTTask+0x624>)
 800e7c8:	fba1 1303 	umull	r1, r3, r1, r3
 800e7cc:	08db      	lsrs	r3, r3, #3
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	f7f7 fef1 	bl	80065b8 <osSemaphoreAcquire>
 800e7d6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800e7da:	f103 031c 	add.w	r3, r3, #28
 800e7de:	6018      	str	r0, [r3, #0]
 800e7e0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800e7e4:	f103 031c 	add.w	r3, r3, #28
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f040 80c5 	bne.w	800e97a <StartSendUARTTask+0x6da>
 800e7f0:	4b35      	ldr	r3, [pc, #212]	@ (800e8c8 <StartSendUARTTask+0x628>)
 800e7f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e7f6:	689b      	ldr	r3, [r3, #8]
 800e7f8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800e7fc:	f102 0218 	add.w	r2, r2, #24
 800e800:	6013      	str	r3, [r2, #0]
 800e802:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800e806:	f103 0318 	add.w	r3, r3, #24
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	f340 80ae 	ble.w	800e96e <StartSendUARTTask+0x6ce>
 800e812:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e816:	f103 030e 	add.w	r3, r3, #14
 800e81a:	881b      	ldrh	r3, [r3, #0]
 800e81c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e820:	4413      	add	r3, r2
 800e822:	2204      	movs	r2, #4
 800e824:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e828:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e82c:	f103 030e 	add.w	r3, r3, #14
 800e830:	881b      	ldrh	r3, [r3, #0]
 800e832:	3301      	adds	r3, #1
 800e834:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e838:	f102 020e 	add.w	r2, r2, #14
 800e83c:	8013      	strh	r3, [r2, #0]
 800e83e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800e842:	f103 0318 	add.w	r3, r3, #24
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	121a      	asrs	r2, r3, #8
 800e84a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e84e:	f103 030e 	add.w	r3, r3, #14
 800e852:	881b      	ldrh	r3, [r3, #0]
 800e854:	b2d2      	uxtb	r2, r2
 800e856:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e85a:	440b      	add	r3, r1
 800e85c:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e860:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e864:	f103 030e 	add.w	r3, r3, #14
 800e868:	881b      	ldrh	r3, [r3, #0]
 800e86a:	3301      	adds	r3, #1
 800e86c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e870:	f102 020e 	add.w	r2, r2, #14
 800e874:	8013      	strh	r3, [r2, #0]
 800e876:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e87a:	f103 030e 	add.w	r3, r3, #14
 800e87e:	881b      	ldrh	r3, [r3, #0]
 800e880:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800e884:	f102 0218 	add.w	r2, r2, #24
 800e888:	6812      	ldr	r2, [r2, #0]
 800e88a:	b2d2      	uxtb	r2, r2
 800e88c:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e890:	440b      	add	r3, r1
 800e892:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e896:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e89a:	f103 030e 	add.w	r3, r3, #14
 800e89e:	881b      	ldrh	r3, [r3, #0]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e8a6:	f102 020e 	add.w	r2, r2, #14
 800e8aa:	8013      	strh	r3, [r2, #0]
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e8b2:	f102 021c 	add.w	r2, r2, #28
 800e8b6:	6013      	str	r3, [r2, #0]
 800e8b8:	e047      	b.n	800e94a <StartSendUARTTask+0x6aa>
 800e8ba:	bf00      	nop
 800e8bc:	20005008 	.word	0x20005008
 800e8c0:	200090b0 	.word	0x200090b0
 800e8c4:	cccccccd 	.word	0xcccccccd
 800e8c8:	20007044 	.word	0x20007044
 800e8cc:	4a8d      	ldr	r2, [pc, #564]	@ (800eb04 <StartSendUARTTask+0x864>)
 800e8ce:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e8d2:	f103 031c 	add.w	r3, r3, #28
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	4413      	add	r3, r2
 800e8e0:	edd3 7a00 	vldr	s15, [r3]
 800e8e4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e8e8:	f103 030e 	add.w	r3, r3, #14
 800e8ec:	881b      	ldrh	r3, [r3, #0]
 800e8ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e8f2:	edc7 7a00 	vstr	s15, [r7]
 800e8f6:	783a      	ldrb	r2, [r7, #0]
 800e8f8:	b2d2      	uxtb	r2, r2
 800e8fa:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e8fe:	440b      	add	r3, r1
 800e900:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e904:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e908:	f103 030e 	add.w	r3, r3, #14
 800e90c:	881b      	ldrh	r3, [r3, #0]
 800e90e:	3301      	adds	r3, #1
 800e910:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e914:	f102 020e 	add.w	r2, r2, #14
 800e918:	8013      	strh	r3, [r2, #0]
 800e91a:	4a7a      	ldr	r2, [pc, #488]	@ (800eb04 <StartSendUARTTask+0x864>)
 800e91c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e920:	f103 031c 	add.w	r3, r3, #28
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e92a:	009b      	lsls	r3, r3, #2
 800e92c:	4413      	add	r3, r2
 800e92e:	f04f 0200 	mov.w	r2, #0
 800e932:	601a      	str	r2, [r3, #0]
 800e934:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e938:	f103 031c 	add.w	r3, r3, #28
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	3301      	adds	r3, #1
 800e940:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e944:	f102 021c 	add.w	r2, r2, #28
 800e948:	6013      	str	r3, [r2, #0]
 800e94a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e94e:	f103 031c 	add.w	r3, r3, #28
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800e958:	f103 0318 	add.w	r3, r3, #24
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	429a      	cmp	r2, r3
 800e960:	dbb4      	blt.n	800e8cc <StartSendUARTTask+0x62c>
 800e962:	4b68      	ldr	r3, [pc, #416]	@ (800eb04 <StartSendUARTTask+0x864>)
 800e964:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e968:	461a      	mov	r2, r3
 800e96a:	2300      	movs	r3, #0
 800e96c:	6093      	str	r3, [r2, #8]
 800e96e:	4b66      	ldr	r3, [pc, #408]	@ (800eb08 <StartSendUARTTask+0x868>)
 800e970:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800e974:	4618      	mov	r0, r3
 800e976:	f7f7 fe71 	bl	800665c <osSemaphoreRelease>
 800e97a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e97e:	f103 030e 	add.w	r3, r3, #14
 800e982:	881b      	ldrh	r3, [r3, #0]
 800e984:	2b0b      	cmp	r3, #11
 800e986:	f240 80ae 	bls.w	800eae6 <StartSendUARTTask+0x846>
 800e98a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e98e:	f103 030e 	add.w	r3, r3, #14
 800e992:	881b      	ldrh	r3, [r3, #0]
 800e994:	3b03      	subs	r3, #3
 800e996:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800e99a:	f102 0216 	add.w	r2, r2, #22
 800e99e:	8013      	strh	r3, [r2, #0]
 800e9a0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e9a4:	2203      	movs	r2, #3
 800e9a6:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e9aa:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800e9ae:	f103 0316 	add.w	r3, r3, #22
 800e9b2:	881b      	ldrh	r3, [r3, #0]
 800e9b4:	0a1b      	lsrs	r3, r3, #8
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e9be:	f803 2c47 	strb.w	r2, [r3, #-71]
 800e9c2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800e9c6:	f103 0316 	add.w	r3, r3, #22
 800e9ca:	881b      	ldrh	r3, [r3, #0]
 800e9cc:	b2da      	uxtb	r2, r3
 800e9ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e9d2:	f803 2c46 	strb.w	r2, [r3, #-70]
 800e9d6:	4b4d      	ldr	r3, [pc, #308]	@ (800eb0c <StartSendUARTTask+0x86c>)
 800e9d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9da:	0e1b      	lsrs	r3, r3, #24
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e9e2:	f803 2c45 	strb.w	r2, [r3, #-69]
 800e9e6:	4b49      	ldr	r3, [pc, #292]	@ (800eb0c <StartSendUARTTask+0x86c>)
 800e9e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9ea:	141b      	asrs	r3, r3, #16
 800e9ec:	b2da      	uxtb	r2, r3
 800e9ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e9f2:	f803 2c44 	strb.w	r2, [r3, #-68]
 800e9f6:	4b45      	ldr	r3, [pc, #276]	@ (800eb0c <StartSendUARTTask+0x86c>)
 800e9f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9fa:	121b      	asrs	r3, r3, #8
 800e9fc:	b2da      	uxtb	r2, r3
 800e9fe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea02:	f803 2c43 	strb.w	r2, [r3, #-67]
 800ea06:	4b41      	ldr	r3, [pc, #260]	@ (800eb0c <StartSendUARTTask+0x86c>)
 800ea08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea10:	f803 2c42 	strb.w	r2, [r3, #-66]
 800ea14:	4b3e      	ldr	r3, [pc, #248]	@ (800eb10 <StartSendUARTTask+0x870>)
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	4b3c      	ldr	r3, [pc, #240]	@ (800eb0c <StartSendUARTTask+0x86c>)
 800ea1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	4a3d      	ldr	r2, [pc, #244]	@ (800eb14 <StartSendUARTTask+0x874>)
 800ea20:	fba2 2303 	umull	r2, r3, r2, r3
 800ea24:	08db      	lsrs	r3, r3, #3
 800ea26:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800ea2a:	f102 0210 	add.w	r2, r2, #16
 800ea2e:	6013      	str	r3, [r2, #0]
 800ea30:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800ea34:	f103 0310 	add.w	r3, r3, #16
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	0e1b      	lsrs	r3, r3, #24
 800ea3c:	b2da      	uxtb	r2, r3
 800ea3e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea42:	f803 2c41 	strb.w	r2, [r3, #-65]
 800ea46:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800ea4a:	f103 0310 	add.w	r3, r3, #16
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	0c1b      	lsrs	r3, r3, #16
 800ea52:	b2da      	uxtb	r2, r3
 800ea54:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea58:	f803 2c40 	strb.w	r2, [r3, #-64]
 800ea5c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800ea60:	f103 0310 	add.w	r3, r3, #16
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	0a1b      	lsrs	r3, r3, #8
 800ea68:	b2da      	uxtb	r2, r3
 800ea6a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea6e:	f803 2c3f 	strb.w	r2, [r3, #-63]
 800ea72:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800ea76:	f103 0310 	add.w	r3, r3, #16
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	b2da      	uxtb	r2, r3
 800ea7e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea82:	f803 2c3e 	strb.w	r2, [r3, #-62]
 800ea86:	4b21      	ldr	r3, [pc, #132]	@ (800eb0c <StartSendUARTTask+0x86c>)
 800ea88:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d025      	beq.n	800eadc <StartSendUARTTask+0x83c>
 800ea90:	4b1d      	ldr	r3, [pc, #116]	@ (800eb08 <StartSendUARTTask+0x868>)
 800ea92:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800ea96:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7f7 fd8c 	bl	80065b8 <osSemaphoreAcquire>
 800eaa0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800eaa4:	f103 030c 	add.w	r3, r3, #12
 800eaa8:	6018      	str	r0, [r3, #0]
 800eaaa:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800eaae:	f103 030c 	add.w	r3, r3, #12
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d111      	bne.n	800eadc <StartSendUARTTask+0x83c>
 800eab8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800eabc:	f103 030e 	add.w	r3, r3, #14
 800eac0:	881a      	ldrh	r2, [r3, #0]
 800eac2:	f107 0310 	add.w	r3, r7, #16
 800eac6:	3b08      	subs	r3, #8
 800eac8:	4611      	mov	r1, r2
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7ff fbbe 	bl	800e24c <WriteUart>
 800ead0:	4b0d      	ldr	r3, [pc, #52]	@ (800eb08 <StartSendUARTTask+0x868>)
 800ead2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7f7 fdc0 	bl	800665c <osSemaphoreRelease>
 800eadc:	4b0b      	ldr	r3, [pc, #44]	@ (800eb0c <StartSendUARTTask+0x86c>)
 800eade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eae0:	3301      	adds	r3, #1
 800eae2:	4a0a      	ldr	r2, [pc, #40]	@ (800eb0c <StartSendUARTTask+0x86c>)
 800eae4:	66d3      	str	r3, [r2, #108]	@ 0x6c
 800eae6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800eaea:	f103 0308 	add.w	r3, r3, #8
 800eaee:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800eaf2:	f102 0218 	add.w	r2, r2, #24
 800eaf6:	6811      	ldr	r1, [r2, #0]
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7f9 f921 	bl	8007d40 <vTaskDelayUntil>
 800eafe:	f7ff bbec 	b.w	800e2da <StartSendUARTTask+0x3a>
 800eb02:	bf00      	nop
 800eb04:	20007044 	.word	0x20007044
 800eb08:	200090b0 	.word	0x200090b0
 800eb0c:	200092a0 	.word	0x200092a0
 800eb10:	200000cc 	.word	0x200000cc
 800eb14:	cccccccd 	.word	0xcccccccd

0800eb18 <StartFirstEmgTask>:
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	4b17      	ldr	r3, [pc, #92]	@ (800eb80 <StartFirstEmgTask+0x68>)
 800eb22:	785b      	ldrb	r3, [r3, #1]
 800eb24:	461a      	mov	r2, r3
 800eb26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eb2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb2e:	60fb      	str	r3, [r7, #12]
 800eb30:	4a14      	ldr	r2, [pc, #80]	@ (800eb84 <StartFirstEmgTask+0x6c>)
 800eb32:	2101      	movs	r1, #1
 800eb34:	2001      	movs	r0, #1
 800eb36:	f7f7 fcb6 	bl	80064a6 <osSemaphoreNew>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	4a12      	ldr	r2, [pc, #72]	@ (800eb88 <StartFirstEmgTask+0x70>)
 800eb3e:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
 800eb42:	4b11      	ldr	r3, [pc, #68]	@ (800eb88 <StartFirstEmgTask+0x70>)
 800eb44:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800eb48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7f7 fd33 	bl	80065b8 <osSemaphoreAcquire>
 800eb52:	60b8      	str	r0, [r7, #8]
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1f3      	bne.n	800eb42 <StartFirstEmgTask+0x2a>
 800eb5a:	4b0c      	ldr	r3, [pc, #48]	@ (800eb8c <StartFirstEmgTask+0x74>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	4a0a      	ldr	r2, [pc, #40]	@ (800eb8c <StartFirstEmgTask+0x74>)
 800eb62:	6013      	str	r3, [r2, #0]
 800eb64:	2101      	movs	r1, #1
 800eb66:	480a      	ldr	r0, [pc, #40]	@ (800eb90 <StartFirstEmgTask+0x78>)
 800eb68:	f7fc f8e6 	bl	800ad38 <_ZN3Emg12FirstEmgReadEb>
 800eb6c:	4b06      	ldr	r3, [pc, #24]	@ (800eb88 <StartFirstEmgTask+0x70>)
 800eb6e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7f7 fd72 	bl	800665c <osSemaphoreRelease>
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f7f9 f961 	bl	8007e40 <vTaskDelay>
 800eb7e:	e7e0      	b.n	800eb42 <StartFirstEmgTask+0x2a>
 800eb80:	200092a0 	.word	0x200092a0
 800eb84:	08010c90 	.word	0x08010c90
 800eb88:	200090b0 	.word	0x200090b0
 800eb8c:	20004ff0 	.word	0x20004ff0
 800eb90:	20005008 	.word	0x20005008

0800eb94 <StartReadFirstEmgTask>:
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b08a      	sub	sp, #40	@ 0x28
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	4b32      	ldr	r3, [pc, #200]	@ (800ec68 <StartReadFirstEmgTask+0xd4>)
 800eb9e:	785b      	ldrb	r3, [r3, #1]
 800eba0:	461a      	mov	r2, r3
 800eba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eba6:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebac:	4a2f      	ldr	r2, [pc, #188]	@ (800ec6c <StartReadFirstEmgTask+0xd8>)
 800ebae:	2101      	movs	r1, #1
 800ebb0:	2001      	movs	r0, #1
 800ebb2:	f7f7 fc78 	bl	80064a6 <osSemaphoreNew>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	4a2d      	ldr	r2, [pc, #180]	@ (800ec70 <StartReadFirstEmgTask+0xdc>)
 800ebba:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
 800ebbe:	4b2d      	ldr	r3, [pc, #180]	@ (800ec74 <StartReadFirstEmgTask+0xe0>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	4a29      	ldr	r2, [pc, #164]	@ (800ec68 <StartReadFirstEmgTask+0xd4>)
 800ebc4:	6313      	str	r3, [r2, #48]	@ 0x30
 800ebc6:	4b2a      	ldr	r3, [pc, #168]	@ (800ec70 <StartReadFirstEmgTask+0xdc>)
 800ebc8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800ebcc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7f7 fcf1 	bl	80065b8 <osSemaphoreAcquire>
 800ebd6:	6238      	str	r0, [r7, #32]
 800ebd8:	6a3b      	ldr	r3, [r7, #32]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d140      	bne.n	800ec60 <StartReadFirstEmgTask+0xcc>
 800ebde:	2100      	movs	r1, #0
 800ebe0:	4825      	ldr	r0, [pc, #148]	@ (800ec78 <StartReadFirstEmgTask+0xe4>)
 800ebe2:	f7fc f8a9 	bl	800ad38 <_ZN3Emg12FirstEmgReadEb>
 800ebe6:	4b24      	ldr	r3, [pc, #144]	@ (800ec78 <StartReadFirstEmgTask+0xe4>)
 800ebe8:	6a1b      	ldr	r3, [r3, #32]
 800ebea:	ee07 3a90 	vmov	s15, r3
 800ebee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebf2:	edc7 7a03 	vstr	s15, [r7, #12]
 800ebf6:	f107 030c 	add.w	r3, r7, #12
 800ebfa:	61fb      	str	r3, [r7, #28]
 800ebfc:	4b1d      	ldr	r3, [pc, #116]	@ (800ec74 <StartReadFirstEmgTask+0xe0>)
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	4b19      	ldr	r3, [pc, #100]	@ (800ec68 <StartReadFirstEmgTask+0xd4>)
 800ec02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	4a1d      	ldr	r2, [pc, #116]	@ (800ec7c <StartReadFirstEmgTask+0xe8>)
 800ec08:	fba2 2303 	umull	r2, r3, r2, r3
 800ec0c:	08db      	lsrs	r3, r3, #3
 800ec0e:	61bb      	str	r3, [r7, #24]
 800ec10:	69bb      	ldr	r3, [r7, #24]
 800ec12:	0e1b      	lsrs	r3, r3, #24
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	743b      	strb	r3, [r7, #16]
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	0c1b      	lsrs	r3, r3, #16
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	747b      	strb	r3, [r7, #17]
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	0a1b      	lsrs	r3, r3, #8
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	74bb      	strb	r3, [r7, #18]
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	74fb      	strb	r3, [r7, #19]
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	753b      	strb	r3, [r7, #20]
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	785b      	ldrb	r3, [r3, #1]
 800ec38:	757b      	strb	r3, [r7, #21]
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	789b      	ldrb	r3, [r3, #2]
 800ec3e:	75bb      	strb	r3, [r7, #22]
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	78db      	ldrb	r3, [r3, #3]
 800ec44:	75fb      	strb	r3, [r7, #23]
 800ec46:	f107 0210 	add.w	r2, r7, #16
 800ec4a:	2308      	movs	r3, #8
 800ec4c:	210a      	movs	r1, #10
 800ec4e:	2000      	movs	r0, #0
 800ec50:	f7ff f9e2 	bl	800e018 <SuccessDataResult>
 800ec54:	4b06      	ldr	r3, [pc, #24]	@ (800ec70 <StartReadFirstEmgTask+0xdc>)
 800ec56:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7f7 fcfe 	bl	800665c <osSemaphoreRelease>
 800ec60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec62:	f7f9 f8ed 	bl	8007e40 <vTaskDelay>
 800ec66:	e7ae      	b.n	800ebc6 <StartReadFirstEmgTask+0x32>
 800ec68:	200092a0 	.word	0x200092a0
 800ec6c:	08010c90 	.word	0x08010c90
 800ec70:	200090b0 	.word	0x200090b0
 800ec74:	200000cc 	.word	0x200000cc
 800ec78:	20005008 	.word	0x20005008
 800ec7c:	cccccccd 	.word	0xcccccccd

0800ec80 <StartSecondEmgTask>:
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	4b17      	ldr	r3, [pc, #92]	@ (800ece8 <StartSecondEmgTask+0x68>)
 800ec8a:	789b      	ldrb	r3, [r3, #2]
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ec92:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec96:	60fb      	str	r3, [r7, #12]
 800ec98:	4a14      	ldr	r2, [pc, #80]	@ (800ecec <StartSecondEmgTask+0x6c>)
 800ec9a:	2101      	movs	r1, #1
 800ec9c:	2001      	movs	r0, #1
 800ec9e:	f7f7 fc02 	bl	80064a6 <osSemaphoreNew>
 800eca2:	4603      	mov	r3, r0
 800eca4:	4a12      	ldr	r2, [pc, #72]	@ (800ecf0 <StartSecondEmgTask+0x70>)
 800eca6:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
 800ecaa:	4b11      	ldr	r3, [pc, #68]	@ (800ecf0 <StartSecondEmgTask+0x70>)
 800ecac:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800ecb0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7f7 fc7f 	bl	80065b8 <osSemaphoreAcquire>
 800ecba:	60b8      	str	r0, [r7, #8]
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10e      	bne.n	800ece0 <StartSecondEmgTask+0x60>
 800ecc2:	4b0c      	ldr	r3, [pc, #48]	@ (800ecf4 <StartSecondEmgTask+0x74>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	4a0a      	ldr	r2, [pc, #40]	@ (800ecf4 <StartSecondEmgTask+0x74>)
 800ecca:	6013      	str	r3, [r2, #0]
 800eccc:	2101      	movs	r1, #1
 800ecce:	480a      	ldr	r0, [pc, #40]	@ (800ecf8 <StartSecondEmgTask+0x78>)
 800ecd0:	f7fc f8ac 	bl	800ae2c <_ZN3Emg13SecondEmgReadEb>
 800ecd4:	4b06      	ldr	r3, [pc, #24]	@ (800ecf0 <StartSecondEmgTask+0x70>)
 800ecd6:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7f7 fcbe 	bl	800665c <osSemaphoreRelease>
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	f7f9 f8ad 	bl	8007e40 <vTaskDelay>
 800ece6:	e7e0      	b.n	800ecaa <StartSecondEmgTask+0x2a>
 800ece8:	200092a0 	.word	0x200092a0
 800ecec:	08010ca0 	.word	0x08010ca0
 800ecf0:	200090b0 	.word	0x200090b0
 800ecf4:	20004ff4 	.word	0x20004ff4
 800ecf8:	20005008 	.word	0x20005008

0800ecfc <StartReadSecondEmgTask>:
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b08a      	sub	sp, #40	@ 0x28
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	4b32      	ldr	r3, [pc, #200]	@ (800edd0 <StartReadSecondEmgTask+0xd4>)
 800ed06:	789b      	ldrb	r3, [r3, #2]
 800ed08:	461a      	mov	r2, r3
 800ed0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ed0e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed12:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed14:	4a2f      	ldr	r2, [pc, #188]	@ (800edd4 <StartReadSecondEmgTask+0xd8>)
 800ed16:	2101      	movs	r1, #1
 800ed18:	2001      	movs	r0, #1
 800ed1a:	f7f7 fbc4 	bl	80064a6 <osSemaphoreNew>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	4a2d      	ldr	r2, [pc, #180]	@ (800edd8 <StartReadSecondEmgTask+0xdc>)
 800ed22:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
 800ed26:	4b2d      	ldr	r3, [pc, #180]	@ (800eddc <StartReadSecondEmgTask+0xe0>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a29      	ldr	r2, [pc, #164]	@ (800edd0 <StartReadSecondEmgTask+0xd4>)
 800ed2c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ed2e:	4b2a      	ldr	r3, [pc, #168]	@ (800edd8 <StartReadSecondEmgTask+0xdc>)
 800ed30:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800ed34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7f7 fc3d 	bl	80065b8 <osSemaphoreAcquire>
 800ed3e:	6238      	str	r0, [r7, #32]
 800ed40:	6a3b      	ldr	r3, [r7, #32]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d140      	bne.n	800edc8 <StartReadSecondEmgTask+0xcc>
 800ed46:	2100      	movs	r1, #0
 800ed48:	4825      	ldr	r0, [pc, #148]	@ (800ede0 <StartReadSecondEmgTask+0xe4>)
 800ed4a:	f7fc f86f 	bl	800ae2c <_ZN3Emg13SecondEmgReadEb>
 800ed4e:	4b24      	ldr	r3, [pc, #144]	@ (800ede0 <StartReadSecondEmgTask+0xe4>)
 800ed50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed52:	ee07 3a90 	vmov	s15, r3
 800ed56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed5a:	edc7 7a03 	vstr	s15, [r7, #12]
 800ed5e:	f107 030c 	add.w	r3, r7, #12
 800ed62:	61fb      	str	r3, [r7, #28]
 800ed64:	4b1d      	ldr	r3, [pc, #116]	@ (800eddc <StartReadSecondEmgTask+0xe0>)
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	4b19      	ldr	r3, [pc, #100]	@ (800edd0 <StartReadSecondEmgTask+0xd4>)
 800ed6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed6c:	1ad3      	subs	r3, r2, r3
 800ed6e:	4a1d      	ldr	r2, [pc, #116]	@ (800ede4 <StartReadSecondEmgTask+0xe8>)
 800ed70:	fba2 2303 	umull	r2, r3, r2, r3
 800ed74:	08db      	lsrs	r3, r3, #3
 800ed76:	61bb      	str	r3, [r7, #24]
 800ed78:	69bb      	ldr	r3, [r7, #24]
 800ed7a:	0e1b      	lsrs	r3, r3, #24
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	743b      	strb	r3, [r7, #16]
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	0c1b      	lsrs	r3, r3, #16
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	747b      	strb	r3, [r7, #17]
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	0a1b      	lsrs	r3, r3, #8
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	74bb      	strb	r3, [r7, #18]
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	74fb      	strb	r3, [r7, #19]
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	753b      	strb	r3, [r7, #20]
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	785b      	ldrb	r3, [r3, #1]
 800eda0:	757b      	strb	r3, [r7, #21]
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	789b      	ldrb	r3, [r3, #2]
 800eda6:	75bb      	strb	r3, [r7, #22]
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	78db      	ldrb	r3, [r3, #3]
 800edac:	75fb      	strb	r3, [r7, #23]
 800edae:	f107 0210 	add.w	r2, r7, #16
 800edb2:	2308      	movs	r3, #8
 800edb4:	210b      	movs	r1, #11
 800edb6:	2000      	movs	r0, #0
 800edb8:	f7ff f92e 	bl	800e018 <SuccessDataResult>
 800edbc:	4b06      	ldr	r3, [pc, #24]	@ (800edd8 <StartReadSecondEmgTask+0xdc>)
 800edbe:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7f7 fc4a 	bl	800665c <osSemaphoreRelease>
 800edc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800edca:	f7f9 f839 	bl	8007e40 <vTaskDelay>
 800edce:	e7ae      	b.n	800ed2e <StartReadSecondEmgTask+0x32>
 800edd0:	200092a0 	.word	0x200092a0
 800edd4:	08010ca0 	.word	0x08010ca0
 800edd8:	200090b0 	.word	0x200090b0
 800eddc:	200000cc 	.word	0x200000cc
 800ede0:	20005008 	.word	0x20005008
 800ede4:	cccccccd 	.word	0xcccccccd

0800ede8 <StartFlowTask>:
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	4b17      	ldr	r3, [pc, #92]	@ (800ee50 <StartFlowTask+0x68>)
 800edf2:	791b      	ldrb	r3, [r3, #4]
 800edf4:	461a      	mov	r2, r3
 800edf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800edfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800edfe:	60fb      	str	r3, [r7, #12]
 800ee00:	4a14      	ldr	r2, [pc, #80]	@ (800ee54 <StartFlowTask+0x6c>)
 800ee02:	2101      	movs	r1, #1
 800ee04:	2001      	movs	r0, #1
 800ee06:	f7f7 fb4e 	bl	80064a6 <osSemaphoreNew>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	4a12      	ldr	r2, [pc, #72]	@ (800ee58 <StartFlowTask+0x70>)
 800ee0e:	f8c2 31d8 	str.w	r3, [r2, #472]	@ 0x1d8
 800ee12:	4b11      	ldr	r3, [pc, #68]	@ (800ee58 <StartFlowTask+0x70>)
 800ee14:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800ee18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7f7 fbcb 	bl	80065b8 <osSemaphoreAcquire>
 800ee22:	60b8      	str	r0, [r7, #8]
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d10e      	bne.n	800ee48 <StartFlowTask+0x60>
 800ee2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ee5c <StartFlowTask+0x74>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	3301      	adds	r3, #1
 800ee30:	4a0a      	ldr	r2, [pc, #40]	@ (800ee5c <StartFlowTask+0x74>)
 800ee32:	6013      	str	r3, [r2, #0]
 800ee34:	2101      	movs	r1, #1
 800ee36:	480a      	ldr	r0, [pc, #40]	@ (800ee60 <StartFlowTask+0x78>)
 800ee38:	f7fe faea 	bl	800d410 <_ZN8LoadCell8ReadFlowEb>
 800ee3c:	4b06      	ldr	r3, [pc, #24]	@ (800ee58 <StartFlowTask+0x70>)
 800ee3e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7f7 fc0a 	bl	800665c <osSemaphoreRelease>
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f7f8 fff9 	bl	8007e40 <vTaskDelay>
 800ee4e:	e7e0      	b.n	800ee12 <StartFlowTask+0x2a>
 800ee50:	200092a0 	.word	0x200092a0
 800ee54:	08010cb0 	.word	0x08010cb0
 800ee58:	200090b0 	.word	0x200090b0
 800ee5c:	20004ff8 	.word	0x20004ff8
 800ee60:	20007044 	.word	0x20007044

0800ee64 <StartReadFlowTask>:
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b08e      	sub	sp, #56	@ 0x38
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	4838      	ldr	r0, [pc, #224]	@ (800ef50 <StartReadFlowTask+0xec>)
 800ee6e:	f7fe fd73 	bl	800d958 <_ZN8LoadCell12ClearSamplesEv>
 800ee72:	4b38      	ldr	r3, [pc, #224]	@ (800ef54 <StartReadFlowTask+0xf0>)
 800ee74:	791b      	ldrb	r3, [r3, #4]
 800ee76:	461a      	mov	r2, r3
 800ee78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ee7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee82:	4a35      	ldr	r2, [pc, #212]	@ (800ef58 <StartReadFlowTask+0xf4>)
 800ee84:	2101      	movs	r1, #1
 800ee86:	2001      	movs	r0, #1
 800ee88:	f7f7 fb0d 	bl	80064a6 <osSemaphoreNew>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	4a33      	ldr	r2, [pc, #204]	@ (800ef5c <StartReadFlowTask+0xf8>)
 800ee90:	f8c2 31d8 	str.w	r3, [r2, #472]	@ 0x1d8
 800ee94:	4b2f      	ldr	r3, [pc, #188]	@ (800ef54 <StartReadFlowTask+0xf0>)
 800ee96:	695b      	ldr	r3, [r3, #20]
 800ee98:	ee07 3a90 	vmov	s15, r3
 800ee9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eea0:	edc7 7a08 	vstr	s15, [r7, #32]
 800eea4:	f107 0320 	add.w	r3, r7, #32
 800eea8:	633b      	str	r3, [r7, #48]	@ 0x30
 800eeaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	753b      	strb	r3, [r7, #20]
 800eeb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb2:	785b      	ldrb	r3, [r3, #1]
 800eeb4:	757b      	strb	r3, [r7, #21]
 800eeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb8:	789b      	ldrb	r3, [r3, #2]
 800eeba:	75bb      	strb	r3, [r7, #22]
 800eebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eebe:	78db      	ldrb	r3, [r3, #3]
 800eec0:	75fb      	strb	r3, [r7, #23]
 800eec2:	4b26      	ldr	r3, [pc, #152]	@ (800ef5c <StartReadFlowTask+0xf8>)
 800eec4:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800eec8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800eecc:	4618      	mov	r0, r3
 800eece:	f7f7 fb73 	bl	80065b8 <osSemaphoreAcquire>
 800eed2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800eed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d136      	bne.n	800ef48 <StartReadFlowTask+0xe4>
 800eeda:	2100      	movs	r1, #0
 800eedc:	481c      	ldr	r0, [pc, #112]	@ (800ef50 <StartReadFlowTask+0xec>)
 800eede:	f7fe fa97 	bl	800d410 <_ZN8LoadCell8ReadFlowEb>
 800eee2:	4b1c      	ldr	r3, [pc, #112]	@ (800ef54 <StartReadFlowTask+0xf0>)
 800eee4:	6a1b      	ldr	r3, [r3, #32]
 800eee6:	613b      	str	r3, [r7, #16]
 800eee8:	f107 0310 	add.w	r3, r7, #16
 800eeec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eeee:	4b18      	ldr	r3, [pc, #96]	@ (800ef50 <StartReadFlowTask+0xec>)
 800eef0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800eef4:	69db      	ldr	r3, [r3, #28]
 800eef6:	60fb      	str	r3, [r7, #12]
 800eef8:	f107 030c 	add.w	r3, r7, #12
 800eefc:	627b      	str	r3, [r7, #36]	@ 0x24
 800eefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	763b      	strb	r3, [r7, #24]
 800ef04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef06:	785b      	ldrb	r3, [r3, #1]
 800ef08:	767b      	strb	r3, [r7, #25]
 800ef0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef0c:	789b      	ldrb	r3, [r3, #2]
 800ef0e:	76bb      	strb	r3, [r7, #26]
 800ef10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef12:	78db      	ldrb	r3, [r3, #3]
 800ef14:	76fb      	strb	r3, [r7, #27]
 800ef16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	773b      	strb	r3, [r7, #28]
 800ef1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef1e:	785b      	ldrb	r3, [r3, #1]
 800ef20:	777b      	strb	r3, [r7, #29]
 800ef22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef24:	789b      	ldrb	r3, [r3, #2]
 800ef26:	77bb      	strb	r3, [r7, #30]
 800ef28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef2a:	78db      	ldrb	r3, [r3, #3]
 800ef2c:	77fb      	strb	r3, [r7, #31]
 800ef2e:	f107 0214 	add.w	r2, r7, #20
 800ef32:	230c      	movs	r3, #12
 800ef34:	2105      	movs	r1, #5
 800ef36:	2000      	movs	r0, #0
 800ef38:	f7ff f86e 	bl	800e018 <SuccessDataResult>
 800ef3c:	4b07      	ldr	r3, [pc, #28]	@ (800ef5c <StartReadFlowTask+0xf8>)
 800ef3e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7f7 fb8a 	bl	800665c <osSemaphoreRelease>
 800ef48:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ef4a:	f7f8 ff79 	bl	8007e40 <vTaskDelay>
 800ef4e:	e7b8      	b.n	800eec2 <StartReadFlowTask+0x5e>
 800ef50:	20007044 	.word	0x20007044
 800ef54:	200092a0 	.word	0x200092a0
 800ef58:	08010cb0 	.word	0x08010cb0
 800ef5c:	200090b0 	.word	0x200090b0

0800ef60 <StartVolumeTask>:
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b084      	sub	sp, #16
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	4819      	ldr	r0, [pc, #100]	@ (800efd0 <StartVolumeTask+0x70>)
 800ef6a:	f7fe fcf5 	bl	800d958 <_ZN8LoadCell12ClearSamplesEv>
 800ef6e:	4b19      	ldr	r3, [pc, #100]	@ (800efd4 <StartVolumeTask+0x74>)
 800ef70:	78db      	ldrb	r3, [r3, #3]
 800ef72:	461a      	mov	r2, r3
 800ef74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ef78:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef7c:	60fb      	str	r3, [r7, #12]
 800ef7e:	4a16      	ldr	r2, [pc, #88]	@ (800efd8 <StartVolumeTask+0x78>)
 800ef80:	2101      	movs	r1, #1
 800ef82:	2001      	movs	r0, #1
 800ef84:	f7f7 fa8f 	bl	80064a6 <osSemaphoreNew>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	4a14      	ldr	r2, [pc, #80]	@ (800efdc <StartVolumeTask+0x7c>)
 800ef8c:	f8c2 31dc 	str.w	r3, [r2, #476]	@ 0x1dc
 800ef90:	4b12      	ldr	r3, [pc, #72]	@ (800efdc <StartVolumeTask+0x7c>)
 800ef92:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800ef96:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7f7 fb0c 	bl	80065b8 <osSemaphoreAcquire>
 800efa0:	60b8      	str	r0, [r7, #8]
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1f3      	bne.n	800ef90 <StartVolumeTask+0x30>
 800efa8:	4b0d      	ldr	r3, [pc, #52]	@ (800efe0 <StartVolumeTask+0x80>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	3301      	adds	r3, #1
 800efae:	4a0c      	ldr	r2, [pc, #48]	@ (800efe0 <StartVolumeTask+0x80>)
 800efb0:	6013      	str	r3, [r2, #0]
 800efb2:	2101      	movs	r1, #1
 800efb4:	4806      	ldr	r0, [pc, #24]	@ (800efd0 <StartVolumeTask+0x70>)
 800efb6:	f7fe f86f 	bl	800d098 <_ZN8LoadCell10ReadVolumeEb>
 800efba:	4b08      	ldr	r3, [pc, #32]	@ (800efdc <StartVolumeTask+0x7c>)
 800efbc:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7f7 fb4b 	bl	800665c <osSemaphoreRelease>
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f7f8 ff3a 	bl	8007e40 <vTaskDelay>
 800efcc:	e7e0      	b.n	800ef90 <StartVolumeTask+0x30>
 800efce:	bf00      	nop
 800efd0:	20007044 	.word	0x20007044
 800efd4:	200092a0 	.word	0x200092a0
 800efd8:	08010cc0 	.word	0x08010cc0
 800efdc:	200090b0 	.word	0x200090b0
 800efe0:	20004ffc 	.word	0x20004ffc

0800efe4 <StartReadVolumeTask>:
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b08e      	sub	sp, #56	@ 0x38
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	4838      	ldr	r0, [pc, #224]	@ (800f0d0 <StartReadVolumeTask+0xec>)
 800efee:	f7fe fcb3 	bl	800d958 <_ZN8LoadCell12ClearSamplesEv>
 800eff2:	4b38      	ldr	r3, [pc, #224]	@ (800f0d4 <StartReadVolumeTask+0xf0>)
 800eff4:	78db      	ldrb	r3, [r3, #3]
 800eff6:	461a      	mov	r2, r3
 800eff8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800effc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f000:	637b      	str	r3, [r7, #52]	@ 0x34
 800f002:	4a35      	ldr	r2, [pc, #212]	@ (800f0d8 <StartReadVolumeTask+0xf4>)
 800f004:	2101      	movs	r1, #1
 800f006:	2001      	movs	r0, #1
 800f008:	f7f7 fa4d 	bl	80064a6 <osSemaphoreNew>
 800f00c:	4603      	mov	r3, r0
 800f00e:	4a33      	ldr	r2, [pc, #204]	@ (800f0dc <StartReadVolumeTask+0xf8>)
 800f010:	f8c2 31dc 	str.w	r3, [r2, #476]	@ 0x1dc
 800f014:	4b2f      	ldr	r3, [pc, #188]	@ (800f0d4 <StartReadVolumeTask+0xf0>)
 800f016:	699b      	ldr	r3, [r3, #24]
 800f018:	ee07 3a90 	vmov	s15, r3
 800f01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f020:	edc7 7a08 	vstr	s15, [r7, #32]
 800f024:	f107 0320 	add.w	r3, r7, #32
 800f028:	633b      	str	r3, [r7, #48]	@ 0x30
 800f02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	753b      	strb	r3, [r7, #20]
 800f030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f032:	785b      	ldrb	r3, [r3, #1]
 800f034:	757b      	strb	r3, [r7, #21]
 800f036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f038:	789b      	ldrb	r3, [r3, #2]
 800f03a:	75bb      	strb	r3, [r7, #22]
 800f03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f03e:	78db      	ldrb	r3, [r3, #3]
 800f040:	75fb      	strb	r3, [r7, #23]
 800f042:	4b26      	ldr	r3, [pc, #152]	@ (800f0dc <StartReadVolumeTask+0xf8>)
 800f044:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800f048:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7f7 fab3 	bl	80065b8 <osSemaphoreAcquire>
 800f052:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800f054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f056:	2b00      	cmp	r3, #0
 800f058:	d136      	bne.n	800f0c8 <StartReadVolumeTask+0xe4>
 800f05a:	2100      	movs	r1, #0
 800f05c:	481c      	ldr	r0, [pc, #112]	@ (800f0d0 <StartReadVolumeTask+0xec>)
 800f05e:	f7fe f81b 	bl	800d098 <_ZN8LoadCell10ReadVolumeEb>
 800f062:	4b1c      	ldr	r3, [pc, #112]	@ (800f0d4 <StartReadVolumeTask+0xf0>)
 800f064:	69db      	ldr	r3, [r3, #28]
 800f066:	613b      	str	r3, [r7, #16]
 800f068:	f107 0310 	add.w	r3, r7, #16
 800f06c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f06e:	4b18      	ldr	r3, [pc, #96]	@ (800f0d0 <StartReadVolumeTask+0xec>)
 800f070:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f074:	6a1b      	ldr	r3, [r3, #32]
 800f076:	60fb      	str	r3, [r7, #12]
 800f078:	f107 030c 	add.w	r3, r7, #12
 800f07c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	763b      	strb	r3, [r7, #24]
 800f084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f086:	785b      	ldrb	r3, [r3, #1]
 800f088:	767b      	strb	r3, [r7, #25]
 800f08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f08c:	789b      	ldrb	r3, [r3, #2]
 800f08e:	76bb      	strb	r3, [r7, #26]
 800f090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f092:	78db      	ldrb	r3, [r3, #3]
 800f094:	76fb      	strb	r3, [r7, #27]
 800f096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	773b      	strb	r3, [r7, #28]
 800f09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f09e:	785b      	ldrb	r3, [r3, #1]
 800f0a0:	777b      	strb	r3, [r7, #29]
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a4:	789b      	ldrb	r3, [r3, #2]
 800f0a6:	77bb      	strb	r3, [r7, #30]
 800f0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0aa:	78db      	ldrb	r3, [r3, #3]
 800f0ac:	77fb      	strb	r3, [r7, #31]
 800f0ae:	f107 0214 	add.w	r2, r7, #20
 800f0b2:	230c      	movs	r3, #12
 800f0b4:	2104      	movs	r1, #4
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	f7fe ffae 	bl	800e018 <SuccessDataResult>
 800f0bc:	4b07      	ldr	r3, [pc, #28]	@ (800f0dc <StartReadVolumeTask+0xf8>)
 800f0be:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7f7 faca 	bl	800665c <osSemaphoreRelease>
 800f0c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f0ca:	f7f8 feb9 	bl	8007e40 <vTaskDelay>
 800f0ce:	e7b8      	b.n	800f042 <StartReadVolumeTask+0x5e>
 800f0d0:	20007044 	.word	0x20007044
 800f0d4:	200092a0 	.word	0x200092a0
 800f0d8:	08010cc0 	.word	0x08010cc0
 800f0dc:	200090b0 	.word	0x200090b0

0800f0e0 <StartAutoClosePumpTask>:
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	4b08      	ldr	r3, [pc, #32]	@ (800f10c <StartAutoClosePumpTask+0x2c>)
 800f0ea:	795b      	ldrb	r3, [r3, #5]
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f0f2:	fb02 f303 	mul.w	r3, r2, r3
 800f0f6:	60fb      	str	r3, [r7, #12]
 800f0f8:	68f8      	ldr	r0, [r7, #12]
 800f0fa:	f7f8 fea1 	bl	8007e40 <vTaskDelay>
 800f0fe:	2100      	movs	r1, #0
 800f100:	4803      	ldr	r0, [pc, #12]	@ (800f110 <StartAutoClosePumpTask+0x30>)
 800f102:	f7fb fb67 	bl	800a7d4 <_ZN13Communication10TogglePumpEb>
 800f106:	bf00      	nop
 800f108:	e7f6      	b.n	800f0f8 <StartAutoClosePumpTask+0x18>
 800f10a:	bf00      	nop
 800f10c:	200092a0 	.word	0x200092a0
 800f110:	20009074 	.word	0x20009074

0800f114 <StartAutoCloseValveTask>:
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	4b0c      	ldr	r3, [pc, #48]	@ (800f150 <StartAutoCloseValveTask+0x3c>)
 800f11e:	799b      	ldrb	r3, [r3, #6]
 800f120:	461a      	mov	r2, r3
 800f122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f126:	fb02 f303 	mul.w	r3, r2, r3
 800f12a:	60fb      	str	r3, [r7, #12]
 800f12c:	68f8      	ldr	r0, [r7, #12]
 800f12e:	f7f8 fe87 	bl	8007e40 <vTaskDelay>
 800f132:	2100      	movs	r1, #0
 800f134:	4807      	ldr	r0, [pc, #28]	@ (800f154 <StartAutoCloseValveTask+0x40>)
 800f136:	f7fb fb87 	bl	800a848 <_ZN13Communication11ToggleValveEb>
 800f13a:	4b07      	ldr	r3, [pc, #28]	@ (800f158 <StartAutoCloseValveTask+0x44>)
 800f13c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f13e:	4618      	mov	r0, r3
 800f140:	f7f7 f984 	bl	800644c <osThreadTerminate>
 800f144:	4b04      	ldr	r3, [pc, #16]	@ (800f158 <StartAutoCloseValveTask+0x44>)
 800f146:	2200      	movs	r2, #0
 800f148:	675a      	str	r2, [r3, #116]	@ 0x74
 800f14a:	bf00      	nop
 800f14c:	e7ee      	b.n	800f12c <StartAutoCloseValveTask+0x18>
 800f14e:	bf00      	nop
 800f150:	200092a0 	.word	0x200092a0
 800f154:	20009074 	.word	0x20009074
 800f158:	200090b0 	.word	0x200090b0

0800f15c <StartLoadcellAverageTask>:
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b08c      	sub	sp, #48	@ 0x30
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	2319      	movs	r3, #25
 800f166:	623b      	str	r3, [r7, #32]
 800f168:	f04f 0300 	mov.w	r3, #0
 800f16c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f16e:	f04f 0300 	mov.w	r3, #0
 800f172:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f174:	2300      	movs	r3, #0
 800f176:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f178:	2332      	movs	r3, #50	@ 0x32
 800f17a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f17e:	2300      	movs	r3, #0
 800f180:	77fb      	strb	r3, [r7, #31]
 800f182:	4854      	ldr	r0, [pc, #336]	@ (800f2d4 <StartLoadcellAverageTask+0x178>)
 800f184:	f7fe fbe8 	bl	800d958 <_ZN8LoadCell12ClearSamplesEv>
 800f188:	4852      	ldr	r0, [pc, #328]	@ (800f2d4 <StartLoadcellAverageTask+0x178>)
 800f18a:	f7fd fe7b 	bl	800ce84 <_ZN8LoadCell17ReadVolumeAndFlowEv>
 800f18e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f192:	2b00      	cmp	r3, #0
 800f194:	d008      	beq.n	800f1a8 <StartLoadcellAverageTask+0x4c>
 800f196:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f19a:	3b01      	subs	r3, #1
 800f19c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f1a0:	2019      	movs	r0, #25
 800f1a2:	f7f8 fe4d 	bl	8007e40 <vTaskDelay>
 800f1a6:	e093      	b.n	800f2d0 <StartLoadcellAverageTask+0x174>
 800f1a8:	4b4a      	ldr	r3, [pc, #296]	@ (800f2d4 <StartLoadcellAverageTask+0x178>)
 800f1aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f1ae:	edd3 7a03 	vldr	s15, [r3, #12]
 800f1b2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800f1b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1ba:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800f1be:	4b45      	ldr	r3, [pc, #276]	@ (800f2d4 <StartLoadcellAverageTask+0x178>)
 800f1c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f1c4:	edd3 7a04 	vldr	s15, [r3, #16]
 800f1c8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800f1cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1d0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 800f1d4:	4b40      	ldr	r3, [pc, #256]	@ (800f2d8 <StartLoadcellAverageTask+0x17c>)
 800f1d6:	61bb      	str	r3, [r7, #24]
 800f1d8:	4b40      	ldr	r3, [pc, #256]	@ (800f2dc <StartLoadcellAverageTask+0x180>)
 800f1da:	617b      	str	r3, [r7, #20]
 800f1dc:	69bb      	ldr	r3, [r7, #24]
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	733b      	strb	r3, [r7, #12]
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	785b      	ldrb	r3, [r3, #1]
 800f1e6:	737b      	strb	r3, [r7, #13]
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	789b      	ldrb	r3, [r3, #2]
 800f1ec:	73bb      	strb	r3, [r7, #14]
 800f1ee:	69bb      	ldr	r3, [r7, #24]
 800f1f0:	78db      	ldrb	r3, [r3, #3]
 800f1f2:	73fb      	strb	r3, [r7, #15]
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	743b      	strb	r3, [r7, #16]
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	785b      	ldrb	r3, [r3, #1]
 800f1fe:	747b      	strb	r3, [r7, #17]
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	789b      	ldrb	r3, [r3, #2]
 800f204:	74bb      	strb	r3, [r7, #18]
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	78db      	ldrb	r3, [r3, #3]
 800f20a:	74fb      	strb	r3, [r7, #19]
 800f20c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f20e:	3301      	adds	r3, #1
 800f210:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f212:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f214:	2264      	movs	r2, #100	@ 0x64
 800f216:	fb02 f303 	mul.w	r3, r2, r3
 800f21a:	4a31      	ldr	r2, [pc, #196]	@ (800f2e0 <StartLoadcellAverageTask+0x184>)
 800f21c:	f892 2071 	ldrb.w	r2, [r2, #113]	@ 0x71
 800f220:	fb93 f3f2 	sdiv	r3, r3, r2
 800f224:	b2db      	uxtb	r3, r3
 800f226:	3b01      	subs	r3, #1
 800f228:	77fb      	strb	r3, [r7, #31]
 800f22a:	4a2e      	ldr	r2, [pc, #184]	@ (800f2e4 <StartLoadcellAverageTask+0x188>)
 800f22c:	7ffb      	ldrb	r3, [r7, #31]
 800f22e:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
 800f232:	f107 020c 	add.w	r2, r7, #12
 800f236:	7ff8      	ldrb	r0, [r7, #31]
 800f238:	2308      	movs	r3, #8
 800f23a:	2106      	movs	r1, #6
 800f23c:	f7fe feec 	bl	800e018 <SuccessDataResult>
 800f240:	4b27      	ldr	r3, [pc, #156]	@ (800f2e0 <StartLoadcellAverageTask+0x184>)
 800f242:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800f246:	461a      	mov	r2, r3
 800f248:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d33d      	bcc.n	800f2ca <StartLoadcellAverageTask+0x16e>
 800f24e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f250:	ee07 3a90 	vmov	s15, r3
 800f254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f258:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800f25c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f264:	ee17 2a90 	vmov	r2, s15
 800f268:	4b1d      	ldr	r3, [pc, #116]	@ (800f2e0 <StartLoadcellAverageTask+0x184>)
 800f26a:	619a      	str	r2, [r3, #24]
 800f26c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f26e:	3b01      	subs	r3, #1
 800f270:	ee07 3a90 	vmov	s15, r3
 800f274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f278:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800f27c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f284:	ee17 2a90 	vmov	r2, s15
 800f288:	4b15      	ldr	r3, [pc, #84]	@ (800f2e0 <StartLoadcellAverageTask+0x184>)
 800f28a:	615a      	str	r2, [r3, #20]
 800f28c:	4b14      	ldr	r3, [pc, #80]	@ (800f2e0 <StartLoadcellAverageTask+0x184>)
 800f28e:	699b      	ldr	r3, [r3, #24]
 800f290:	4619      	mov	r1, r3
 800f292:	4815      	ldr	r0, [pc, #84]	@ (800f2e8 <StartLoadcellAverageTask+0x18c>)
 800f294:	f7fd f8ca 	bl	800c42c <_ZN12FlashManager18WriteVolumeAverageEm>
 800f298:	4b11      	ldr	r3, [pc, #68]	@ (800f2e0 <StartLoadcellAverageTask+0x184>)
 800f29a:	695b      	ldr	r3, [r3, #20]
 800f29c:	4619      	mov	r1, r3
 800f29e:	4812      	ldr	r0, [pc, #72]	@ (800f2e8 <StartLoadcellAverageTask+0x18c>)
 800f2a0:	f7fd f957 	bl	800c552 <_ZN12FlashManager16WriteFlowAverageEm>
 800f2a4:	f107 020c 	add.w	r2, r7, #12
 800f2a8:	2308      	movs	r3, #8
 800f2aa:	2106      	movs	r1, #6
 800f2ac:	2064      	movs	r0, #100	@ 0x64
 800f2ae:	f7fe feb3 	bl	800e018 <SuccessDataResult>
 800f2b2:	4b0b      	ldr	r3, [pc, #44]	@ (800f2e0 <StartLoadcellAverageTask+0x184>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800f2ba:	4b0c      	ldr	r3, [pc, #48]	@ (800f2ec <StartLoadcellAverageTask+0x190>)
 800f2bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7f7 f8c4 	bl	800644c <osThreadTerminate>
 800f2c4:	4b09      	ldr	r3, [pc, #36]	@ (800f2ec <StartLoadcellAverageTask+0x190>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	679a      	str	r2, [r3, #120]	@ 0x78
 800f2ca:	2019      	movs	r0, #25
 800f2cc:	f7f8 fdb8 	bl	8007e40 <vTaskDelay>
 800f2d0:	e75a      	b.n	800f188 <StartLoadcellAverageTask+0x2c>
 800f2d2:	bf00      	nop
 800f2d4:	20007044 	.word	0x20007044
 800f2d8:	20009054 	.word	0x20009054
 800f2dc:	20009050 	.word	0x20009050
 800f2e0:	200092a0 	.word	0x200092a0
 800f2e4:	20009318 	.word	0x20009318
 800f2e8:	20009094 	.word	0x20009094
 800f2ec:	200090b0 	.word	0x200090b0

0800f2f0 <StartCalibrationVolumeTask>:
 800f2f0:	b5b0      	push	{r4, r5, r7, lr}
 800f2f2:	b08a      	sub	sp, #40	@ 0x28
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	2364      	movs	r3, #100	@ 0x64
 800f2fa:	61fb      	str	r3, [r7, #28]
 800f2fc:	f04f 0300 	mov.w	r3, #0
 800f300:	627b      	str	r3, [r7, #36]	@ 0x24
 800f302:	2300      	movs	r3, #0
 800f304:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f306:	2332      	movs	r3, #50	@ 0x32
 800f308:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800f30c:	2300      	movs	r3, #0
 800f30e:	76fb      	strb	r3, [r7, #27]
 800f310:	485c      	ldr	r0, [pc, #368]	@ (800f484 <StartCalibrationVolumeTask+0x194>)
 800f312:	f7fd fdb7 	bl	800ce84 <_ZN8LoadCell17ReadVolumeAndFlowEv>
 800f316:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d008      	beq.n	800f330 <StartCalibrationVolumeTask+0x40>
 800f31e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f322:	3b01      	subs	r3, #1
 800f324:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800f328:	2064      	movs	r0, #100	@ 0x64
 800f32a:	f7f8 fd89 	bl	8007e40 <vTaskDelay>
 800f32e:	e0a7      	b.n	800f480 <StartCalibrationVolumeTask+0x190>
 800f330:	4b54      	ldr	r3, [pc, #336]	@ (800f484 <StartCalibrationVolumeTask+0x194>)
 800f332:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f336:	ed93 7a04 	vldr	s14, [r3, #16]
 800f33a:	4b53      	ldr	r3, [pc, #332]	@ (800f488 <StartCalibrationVolumeTask+0x198>)
 800f33c:	699b      	ldr	r3, [r3, #24]
 800f33e:	ee07 3a90 	vmov	s15, r3
 800f342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f34a:	edc7 7a05 	vstr	s15, [r7, #20]
 800f34e:	edd7 7a05 	vldr	s15, [r7, #20]
 800f352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35e:	d503      	bpl.n	800f368 <StartCalibrationVolumeTask+0x78>
 800f360:	2064      	movs	r0, #100	@ 0x64
 800f362:	f7f8 fd6d 	bl	8007e40 <vTaskDelay>
 800f366:	e08b      	b.n	800f480 <StartCalibrationVolumeTask+0x190>
 800f368:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800f36c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f370:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f374:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800f378:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f37a:	ee07 3a90 	vmov	s15, r3
 800f37e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f382:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800f386:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f38a:	4b3f      	ldr	r3, [pc, #252]	@ (800f488 <StartCalibrationVolumeTask+0x198>)
 800f38c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800f390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f394:	edc7 7a03 	vstr	s15, [r7, #12]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7f1 f8cc 	bl	8000538 <__aeabi_f2d>
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	4939      	ldr	r1, [pc, #228]	@ (800f48c <StartCalibrationVolumeTask+0x19c>)
 800f3a6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 800f3aa:	f107 030c 	add.w	r3, r7, #12
 800f3ae:	613b      	str	r3, [r7, #16]
 800f3b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f3b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f3b8:	2264      	movs	r2, #100	@ 0x64
 800f3ba:	fb02 f303 	mul.w	r3, r2, r3
 800f3be:	4a32      	ldr	r2, [pc, #200]	@ (800f488 <StartCalibrationVolumeTask+0x198>)
 800f3c0:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 800f3c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	3b01      	subs	r3, #1
 800f3cc:	76fb      	strb	r3, [r7, #27]
 800f3ce:	4a2f      	ldr	r2, [pc, #188]	@ (800f48c <StartCalibrationVolumeTask+0x19c>)
 800f3d0:	7efb      	ldrb	r3, [r7, #27]
 800f3d2:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
 800f3d6:	7ef8      	ldrb	r0, [r7, #27]
 800f3d8:	2304      	movs	r3, #4
 800f3da:	693a      	ldr	r2, [r7, #16]
 800f3dc:	2108      	movs	r1, #8
 800f3de:	f7fe fe1b 	bl	800e018 <SuccessDataResult>
 800f3e2:	4b29      	ldr	r3, [pc, #164]	@ (800f488 <StartCalibrationVolumeTask+0x198>)
 800f3e4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d344      	bcc.n	800f47a <StartCalibrationVolumeTask+0x18a>
 800f3f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f3f2:	f7f1 f8a1 	bl	8000538 <__aeabi_f2d>
 800f3f6:	4604      	mov	r4, r0
 800f3f8:	460d      	mov	r5, r1
 800f3fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7f1 f879 	bl	80004f4 <__aeabi_ui2d>
 800f402:	4602      	mov	r2, r0
 800f404:	460b      	mov	r3, r1
 800f406:	4620      	mov	r0, r4
 800f408:	4629      	mov	r1, r5
 800f40a:	f7f1 fa17 	bl	800083c <__aeabi_ddiv>
 800f40e:	4602      	mov	r2, r0
 800f410:	460b      	mov	r3, r1
 800f412:	4614      	mov	r4, r2
 800f414:	461d      	mov	r5, r3
 800f416:	4b1c      	ldr	r3, [pc, #112]	@ (800f488 <StartCalibrationVolumeTask+0x198>)
 800f418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7f1 f88c 	bl	8000538 <__aeabi_f2d>
 800f420:	4602      	mov	r2, r0
 800f422:	460b      	mov	r3, r1
 800f424:	4620      	mov	r0, r4
 800f426:	4629      	mov	r1, r5
 800f428:	f7f1 fa08 	bl	800083c <__aeabi_ddiv>
 800f42c:	4602      	mov	r2, r0
 800f42e:	460b      	mov	r3, r1
 800f430:	4610      	mov	r0, r2
 800f432:	4619      	mov	r1, r3
 800f434:	f7f1 fb0a 	bl	8000a4c <__aeabi_d2f>
 800f438:	4603      	mov	r3, r0
 800f43a:	4a13      	ldr	r2, [pc, #76]	@ (800f488 <StartCalibrationVolumeTask+0x198>)
 800f43c:	61d3      	str	r3, [r2, #28]
 800f43e:	4b12      	ldr	r3, [pc, #72]	@ (800f488 <StartCalibrationVolumeTask+0x198>)
 800f440:	69db      	ldr	r3, [r3, #28]
 800f442:	4618      	mov	r0, r3
 800f444:	f7f1 f878 	bl	8000538 <__aeabi_f2d>
 800f448:	4602      	mov	r2, r0
 800f44a:	460b      	mov	r3, r1
 800f44c:	ec43 2b10 	vmov	d0, r2, r3
 800f450:	480f      	ldr	r0, [pc, #60]	@ (800f490 <StartCalibrationVolumeTask+0x1a0>)
 800f452:	f7fc ff51 	bl	800c2f8 <_ZN12FlashManager15WriteVolumeRateEd>
 800f456:	2304      	movs	r3, #4
 800f458:	693a      	ldr	r2, [r7, #16]
 800f45a:	2108      	movs	r1, #8
 800f45c:	2064      	movs	r0, #100	@ 0x64
 800f45e:	f7fe fddb 	bl	800e018 <SuccessDataResult>
 800f462:	4b09      	ldr	r3, [pc, #36]	@ (800f488 <StartCalibrationVolumeTask+0x198>)
 800f464:	2200      	movs	r2, #0
 800f466:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800f46a:	4b0a      	ldr	r3, [pc, #40]	@ (800f494 <StartCalibrationVolumeTask+0x1a4>)
 800f46c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f46e:	4618      	mov	r0, r3
 800f470:	f7f6 ffec 	bl	800644c <osThreadTerminate>
 800f474:	4b07      	ldr	r3, [pc, #28]	@ (800f494 <StartCalibrationVolumeTask+0x1a4>)
 800f476:	2200      	movs	r2, #0
 800f478:	67da      	str	r2, [r3, #124]	@ 0x7c
 800f47a:	2064      	movs	r0, #100	@ 0x64
 800f47c:	f7f8 fce0 	bl	8007e40 <vTaskDelay>
 800f480:	e746      	b.n	800f310 <StartCalibrationVolumeTask+0x20>
 800f482:	bf00      	nop
 800f484:	20007044 	.word	0x20007044
 800f488:	200092a0 	.word	0x200092a0
 800f48c:	20009318 	.word	0x20009318
 800f490:	20009094 	.word	0x20009094
 800f494:	200090b0 	.word	0x200090b0

0800f498 <StartCalibrationFlowTask>:
 800f498:	b580      	push	{r7, lr}
 800f49a:	b08a      	sub	sp, #40	@ 0x28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	2364      	movs	r3, #100	@ 0x64
 800f4a2:	61fb      	str	r3, [r7, #28]
 800f4a4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800f4a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f4ae:	2332      	movs	r3, #50	@ 0x32
 800f4b0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	76fb      	strb	r3, [r7, #27]
 800f4b8:	4859      	ldr	r0, [pc, #356]	@ (800f620 <StartCalibrationFlowTask+0x188>)
 800f4ba:	f7fd fce3 	bl	800ce84 <_ZN8LoadCell17ReadVolumeAndFlowEv>
 800f4be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d008      	beq.n	800f4d8 <StartCalibrationFlowTask+0x40>
 800f4c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800f4d0:	2064      	movs	r0, #100	@ 0x64
 800f4d2:	f7f8 fcb5 	bl	8007e40 <vTaskDelay>
 800f4d6:	e7ef      	b.n	800f4b8 <StartCalibrationFlowTask+0x20>
 800f4d8:	4b52      	ldr	r3, [pc, #328]	@ (800f624 <StartCalibrationFlowTask+0x18c>)
 800f4da:	695b      	ldr	r3, [r3, #20]
 800f4dc:	ee07 3a90 	vmov	s15, r3
 800f4e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f4e4:	4b4e      	ldr	r3, [pc, #312]	@ (800f620 <StartCalibrationFlowTask+0x188>)
 800f4e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f4ea:	edd3 7a03 	vldr	s15, [r3, #12]
 800f4ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f6:	bfcc      	ite	gt
 800f4f8:	2301      	movgt	r3, #1
 800f4fa:	2300      	movle	r3, #0
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d00a      	beq.n	800f518 <StartCalibrationFlowTask+0x80>
 800f502:	4b48      	ldr	r3, [pc, #288]	@ (800f624 <StartCalibrationFlowTask+0x18c>)
 800f504:	695b      	ldr	r3, [r3, #20]
 800f506:	ee07 3a90 	vmov	s15, r3
 800f50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f50e:	4b44      	ldr	r3, [pc, #272]	@ (800f620 <StartCalibrationFlowTask+0x188>)
 800f510:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f514:	edc3 7a03 	vstr	s15, [r3, #12]
 800f518:	4b41      	ldr	r3, [pc, #260]	@ (800f620 <StartCalibrationFlowTask+0x188>)
 800f51a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f51e:	ed93 7a03 	vldr	s14, [r3, #12]
 800f522:	4b40      	ldr	r3, [pc, #256]	@ (800f624 <StartCalibrationFlowTask+0x18c>)
 800f524:	695b      	ldr	r3, [r3, #20]
 800f526:	ee07 3a90 	vmov	s15, r3
 800f52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f52e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f536:	ee17 3a90 	vmov	r3, s15
 800f53a:	617b      	str	r3, [r7, #20]
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	ee07 3a90 	vmov	s15, r3
 800f542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f546:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800f54a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f552:	d506      	bpl.n	800f562 <StartCalibrationFlowTask+0xca>
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	ee07 3a90 	vmov	s15, r3
 800f55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f55e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800f562:	4b30      	ldr	r3, [pc, #192]	@ (800f624 <StartCalibrationFlowTask+0x18c>)
 800f564:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800f568:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f56c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f570:	edc7 7a03 	vstr	s15, [r7, #12]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	4618      	mov	r0, r3
 800f578:	f7f0 ffde 	bl	8000538 <__aeabi_f2d>
 800f57c:	4602      	mov	r2, r0
 800f57e:	460b      	mov	r3, r1
 800f580:	4929      	ldr	r1, [pc, #164]	@ (800f628 <StartCalibrationFlowTask+0x190>)
 800f582:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 800f586:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f588:	3301      	adds	r3, #1
 800f58a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f58c:	f107 030c 	add.w	r3, r7, #12
 800f590:	613b      	str	r3, [r7, #16]
 800f592:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f594:	2264      	movs	r2, #100	@ 0x64
 800f596:	fb02 f303 	mul.w	r3, r2, r3
 800f59a:	4a22      	ldr	r2, [pc, #136]	@ (800f624 <StartCalibrationFlowTask+0x18c>)
 800f59c:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 800f5a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	3b01      	subs	r3, #1
 800f5a8:	76fb      	strb	r3, [r7, #27]
 800f5aa:	7ef8      	ldrb	r0, [r7, #27]
 800f5ac:	2304      	movs	r3, #4
 800f5ae:	693a      	ldr	r2, [r7, #16]
 800f5b0:	2109      	movs	r1, #9
 800f5b2:	f7fe fd31 	bl	800e018 <SuccessDataResult>
 800f5b6:	4b1b      	ldr	r3, [pc, #108]	@ (800f624 <StartCalibrationFlowTask+0x18c>)
 800f5b8:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 800f5bc:	461a      	mov	r2, r3
 800f5be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d929      	bls.n	800f618 <StartCalibrationFlowTask+0x180>
 800f5c4:	4b17      	ldr	r3, [pc, #92]	@ (800f624 <StartCalibrationFlowTask+0x18c>)
 800f5c6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800f5ca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f5ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5d2:	4b14      	ldr	r3, [pc, #80]	@ (800f624 <StartCalibrationFlowTask+0x18c>)
 800f5d4:	edc3 7a08 	vstr	s15, [r3, #32]
 800f5d8:	4b12      	ldr	r3, [pc, #72]	@ (800f624 <StartCalibrationFlowTask+0x18c>)
 800f5da:	6a1b      	ldr	r3, [r3, #32]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7f0 ffab 	bl	8000538 <__aeabi_f2d>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	ec43 2b10 	vmov	d0, r2, r3
 800f5ea:	4810      	ldr	r0, [pc, #64]	@ (800f62c <StartCalibrationFlowTask+0x194>)
 800f5ec:	f7fc fdea 	bl	800c1c4 <_ZN12FlashManager13WriteFlowRateEd>
 800f5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800f624 <StartCalibrationFlowTask+0x18c>)
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800f5f8:	2304      	movs	r3, #4
 800f5fa:	693a      	ldr	r2, [r7, #16]
 800f5fc:	2109      	movs	r1, #9
 800f5fe:	2064      	movs	r0, #100	@ 0x64
 800f600:	f7fe fd0a 	bl	800e018 <SuccessDataResult>
 800f604:	4b0a      	ldr	r3, [pc, #40]	@ (800f630 <StartCalibrationFlowTask+0x198>)
 800f606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7f6 ff1e 	bl	800644c <osThreadTerminate>
 800f610:	4b07      	ldr	r3, [pc, #28]	@ (800f630 <StartCalibrationFlowTask+0x198>)
 800f612:	2200      	movs	r2, #0
 800f614:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800f618:	2064      	movs	r0, #100	@ 0x64
 800f61a:	f7f8 fc11 	bl	8007e40 <vTaskDelay>
 800f61e:	e74b      	b.n	800f4b8 <StartCalibrationFlowTask+0x20>
 800f620:	20007044 	.word	0x20007044
 800f624:	200092a0 	.word	0x200092a0
 800f628:	20009318 	.word	0x20009318
 800f62c:	20009094 	.word	0x20009094
 800f630:	200090b0 	.word	0x200090b0

0800f634 <StartCleanTask>:
 800f634:	b580      	push	{r7, lr}
 800f636:	b086      	sub	sp, #24
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	2364      	movs	r3, #100	@ 0x64
 800f63e:	613b      	str	r3, [r7, #16]
 800f640:	2300      	movs	r3, #0
 800f642:	82fb      	strh	r3, [r7, #22]
 800f644:	2300      	movs	r3, #0
 800f646:	73fb      	strb	r3, [r7, #15]
 800f648:	487f      	ldr	r0, [pc, #508]	@ (800f848 <StartCleanTask+0x214>)
 800f64a:	f7fe f985 	bl	800d958 <_ZN8LoadCell12ClearSamplesEv>
 800f64e:	2101      	movs	r1, #1
 800f650:	487e      	ldr	r0, [pc, #504]	@ (800f84c <StartCleanTask+0x218>)
 800f652:	f7fb f8bf 	bl	800a7d4 <_ZN13Communication10TogglePumpEb>
 800f656:	4b7e      	ldr	r3, [pc, #504]	@ (800f850 <StartCleanTask+0x21c>)
 800f658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7f6 fef6 	bl	800644c <osThreadTerminate>
 800f660:	4b7b      	ldr	r3, [pc, #492]	@ (800f850 <StartCleanTask+0x21c>)
 800f662:	2200      	movs	r2, #0
 800f664:	671a      	str	r2, [r3, #112]	@ 0x70
 800f666:	4878      	ldr	r0, [pc, #480]	@ (800f848 <StartCleanTask+0x214>)
 800f668:	f7fd fc0c 	bl	800ce84 <_ZN8LoadCell17ReadVolumeAndFlowEv>
 800f66c:	4b76      	ldr	r3, [pc, #472]	@ (800f848 <StartCleanTask+0x214>)
 800f66e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f672:	691b      	ldr	r3, [r3, #16]
 800f674:	4a77      	ldr	r2, [pc, #476]	@ (800f854 <StartCleanTask+0x220>)
 800f676:	6113      	str	r3, [r2, #16]
 800f678:	4b73      	ldr	r3, [pc, #460]	@ (800f848 <StartCleanTask+0x214>)
 800f67a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f67e:	ed93 7a04 	vldr	s14, [r3, #16]
 800f682:	4b71      	ldr	r3, [pc, #452]	@ (800f848 <StartCleanTask+0x214>)
 800f684:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f688:	edd3 7a04 	vldr	s15, [r3, #16]
 800f68c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f694:	bfcc      	ite	gt
 800f696:	2301      	movgt	r3, #1
 800f698:	2300      	movle	r3, #0
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d012      	beq.n	800f6c6 <StartCleanTask+0x92>
 800f6a0:	4b69      	ldr	r3, [pc, #420]	@ (800f848 <StartCleanTask+0x214>)
 800f6a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f6a6:	ed93 7a04 	vldr	s14, [r3, #16]
 800f6aa:	4b6b      	ldr	r3, [pc, #428]	@ (800f858 <StartCleanTask+0x224>)
 800f6ac:	699b      	ldr	r3, [r3, #24]
 800f6ae:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800f6b2:	ee07 3a90 	vmov	s15, r3
 800f6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6be:	4b65      	ldr	r3, [pc, #404]	@ (800f854 <StartCleanTask+0x220>)
 800f6c0:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
 800f6c4:	e012      	b.n	800f6ec <StartCleanTask+0xb8>
 800f6c6:	4b64      	ldr	r3, [pc, #400]	@ (800f858 <StartCleanTask+0x224>)
 800f6c8:	699b      	ldr	r3, [r3, #24]
 800f6ca:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800f6ce:	3310      	adds	r3, #16
 800f6d0:	ee07 3a90 	vmov	s15, r3
 800f6d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f6d8:	4b5b      	ldr	r3, [pc, #364]	@ (800f848 <StartCleanTask+0x214>)
 800f6da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f6de:	edd3 7a04 	vldr	s15, [r3, #16]
 800f6e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6e6:	4b5b      	ldr	r3, [pc, #364]	@ (800f854 <StartCleanTask+0x220>)
 800f6e8:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
 800f6ec:	4b56      	ldr	r3, [pc, #344]	@ (800f848 <StartCleanTask+0x214>)
 800f6ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f6f2:	ed93 7a04 	vldr	s14, [r3, #16]
 800f6f6:	4b58      	ldr	r3, [pc, #352]	@ (800f858 <StartCleanTask+0x224>)
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800f6fe:	3310      	adds	r3, #16
 800f700:	ee07 3a90 	vmov	s15, r3
 800f704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f70c:	4b51      	ldr	r3, [pc, #324]	@ (800f854 <StartCleanTask+0x220>)
 800f70e:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
 800f712:	7bfb      	ldrb	r3, [r7, #15]
 800f714:	b2da      	uxtb	r2, r3
 800f716:	4b4f      	ldr	r3, [pc, #316]	@ (800f854 <StartCleanTask+0x220>)
 800f718:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800f71c:	7bfb      	ldrb	r3, [r7, #15]
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	2b00      	cmp	r3, #0
 800f722:	d003      	beq.n	800f72c <StartCleanTask+0xf8>
 800f724:	7bfb      	ldrb	r3, [r7, #15]
 800f726:	b2db      	uxtb	r3, r3
 800f728:	2b02      	cmp	r3, #2
 800f72a:	d101      	bne.n	800f730 <StartCleanTask+0xfc>
 800f72c:	2301      	movs	r3, #1
 800f72e:	e000      	b.n	800f732 <StartCleanTask+0xfe>
 800f730:	2300      	movs	r3, #0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d03c      	beq.n	800f7b0 <StartCleanTask+0x17c>
 800f736:	4b48      	ldr	r3, [pc, #288]	@ (800f858 <StartCleanTask+0x224>)
 800f738:	699b      	ldr	r3, [r3, #24]
 800f73a:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800f73e:	3310      	adds	r3, #16
 800f740:	ee07 3a90 	vmov	s15, r3
 800f744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f748:	4b3f      	ldr	r3, [pc, #252]	@ (800f848 <StartCleanTask+0x214>)
 800f74a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f74e:	edd3 7a04 	vldr	s15, [r3, #16]
 800f752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75a:	bfcc      	ite	gt
 800f75c:	2301      	movgt	r3, #1
 800f75e:	2300      	movle	r3, #0
 800f760:	b2db      	uxtb	r3, r3
 800f762:	2b00      	cmp	r3, #0
 800f764:	d002      	beq.n	800f76c <StartCleanTask+0x138>
 800f766:	8afb      	ldrh	r3, [r7, #22]
 800f768:	3301      	adds	r3, #1
 800f76a:	82fb      	strh	r3, [r7, #22]
 800f76c:	8afb      	ldrh	r3, [r7, #22]
 800f76e:	2b1e      	cmp	r3, #30
 800f770:	d961      	bls.n	800f836 <StartCleanTask+0x202>
 800f772:	7bfb      	ldrb	r3, [r7, #15]
 800f774:	b2db      	uxtb	r3, r3
 800f776:	2b00      	cmp	r3, #0
 800f778:	bf0c      	ite	eq
 800f77a:	2301      	moveq	r3, #1
 800f77c:	2300      	movne	r3, #0
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	2b00      	cmp	r3, #0
 800f782:	d009      	beq.n	800f798 <StartCleanTask+0x164>
 800f784:	2101      	movs	r1, #1
 800f786:	4831      	ldr	r0, [pc, #196]	@ (800f84c <StartCleanTask+0x218>)
 800f788:	f7fb f85e 	bl	800a848 <_ZN13Communication11ToggleValveEb>
 800f78c:	4b32      	ldr	r3, [pc, #200]	@ (800f858 <StartCleanTask+0x224>)
 800f78e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f790:	4618      	mov	r0, r3
 800f792:	f7f8 fb55 	bl	8007e40 <vTaskDelay>
 800f796:	e003      	b.n	800f7a0 <StartCleanTask+0x16c>
 800f798:	2100      	movs	r1, #0
 800f79a:	482c      	ldr	r0, [pc, #176]	@ (800f84c <StartCleanTask+0x218>)
 800f79c:	f7fb f81a 	bl	800a7d4 <_ZN13Communication10TogglePumpEb>
 800f7a0:	7bfb      	ldrb	r3, [r7, #15]
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	73fb      	strb	r3, [r7, #15]
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	82fb      	strh	r3, [r7, #22]
 800f7ae:	e042      	b.n	800f836 <StartCleanTask+0x202>
 800f7b0:	7bfb      	ldrb	r3, [r7, #15]
 800f7b2:	b2db      	uxtb	r3, r3
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	bf0c      	ite	eq
 800f7b8:	2301      	moveq	r3, #1
 800f7ba:	2300      	movne	r3, #0
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d015      	beq.n	800f7ee <StartCleanTask+0x1ba>
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	4821      	ldr	r0, [pc, #132]	@ (800f84c <StartCleanTask+0x218>)
 800f7c6:	f7fb f83f 	bl	800a848 <_ZN13Communication11ToggleValveEb>
 800f7ca:	2101      	movs	r1, #1
 800f7cc:	481f      	ldr	r0, [pc, #124]	@ (800f84c <StartCleanTask+0x218>)
 800f7ce:	f7fb f801 	bl	800a7d4 <_ZN13Communication10TogglePumpEb>
 800f7d2:	4b1f      	ldr	r3, [pc, #124]	@ (800f850 <StartCleanTask+0x21c>)
 800f7d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7f6 fe38 	bl	800644c <osThreadTerminate>
 800f7dc:	4b1c      	ldr	r3, [pc, #112]	@ (800f850 <StartCleanTask+0x21c>)
 800f7de:	2200      	movs	r2, #0
 800f7e0:	671a      	str	r2, [r3, #112]	@ 0x70
 800f7e2:	7bfb      	ldrb	r3, [r7, #15]
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	73fb      	strb	r3, [r7, #15]
 800f7ec:	e023      	b.n	800f836 <StartCleanTask+0x202>
 800f7ee:	7bfb      	ldrb	r3, [r7, #15]
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	2b03      	cmp	r3, #3
 800f7f4:	bf0c      	ite	eq
 800f7f6:	2301      	moveq	r3, #1
 800f7f8:	2300      	movne	r3, #0
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d01a      	beq.n	800f836 <StartCleanTask+0x202>
 800f800:	f7fe fbfc 	bl	800dffc <SuccessResult>
 800f804:	4b14      	ldr	r3, [pc, #80]	@ (800f858 <StartCleanTask+0x224>)
 800f806:	2200      	movs	r2, #0
 800f808:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800f80c:	4b10      	ldr	r3, [pc, #64]	@ (800f850 <StartCleanTask+0x21c>)
 800f80e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f812:	2b00      	cmp	r3, #0
 800f814:	d013      	beq.n	800f83e <StartCleanTask+0x20a>
 800f816:	4b0e      	ldr	r3, [pc, #56]	@ (800f850 <StartCleanTask+0x21c>)
 800f818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00e      	beq.n	800f83e <StartCleanTask+0x20a>
 800f820:	4b0b      	ldr	r3, [pc, #44]	@ (800f850 <StartCleanTask+0x21c>)
 800f822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f826:	4618      	mov	r0, r3
 800f828:	f7f6 fe10 	bl	800644c <osThreadTerminate>
 800f82c:	4b08      	ldr	r3, [pc, #32]	@ (800f850 <StartCleanTask+0x21c>)
 800f82e:	2200      	movs	r2, #0
 800f830:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800f834:	e003      	b.n	800f83e <StartCleanTask+0x20a>
 800f836:	2064      	movs	r0, #100	@ 0x64
 800f838:	f7f8 fb02 	bl	8007e40 <vTaskDelay>
 800f83c:	e713      	b.n	800f666 <StartCleanTask+0x32>
 800f83e:	bf00      	nop
 800f840:	bf00      	nop
 800f842:	3718      	adds	r7, #24
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	20007044 	.word	0x20007044
 800f84c:	20009074 	.word	0x20009074
 800f850:	200090b0 	.word	0x200090b0
 800f854:	20009318 	.word	0x20009318
 800f858:	200092a0 	.word	0x200092a0

0800f85c <StartSafeModeTask>:
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b086      	sub	sp, #24
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f868:	613b      	str	r3, [r7, #16]
 800f86a:	2364      	movs	r3, #100	@ 0x64
 800f86c:	60fb      	str	r3, [r7, #12]
 800f86e:	2300      	movs	r3, #0
 800f870:	75fb      	strb	r3, [r7, #23]
 800f872:	2300      	movs	r3, #0
 800f874:	75bb      	strb	r3, [r7, #22]
 800f876:	4837      	ldr	r0, [pc, #220]	@ (800f954 <StartSafeModeTask+0xf8>)
 800f878:	f7fd fb04 	bl	800ce84 <_ZN8LoadCell17ReadVolumeAndFlowEv>
 800f87c:	7dfb      	ldrb	r3, [r7, #23]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d12b      	bne.n	800f8da <StartSafeModeTask+0x7e>
 800f882:	4b35      	ldr	r3, [pc, #212]	@ (800f958 <StartSafeModeTask+0xfc>)
 800f884:	699b      	ldr	r3, [r3, #24]
 800f886:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800f88a:	3308      	adds	r3, #8
 800f88c:	ee07 3a90 	vmov	s15, r3
 800f890:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f894:	4b2f      	ldr	r3, [pc, #188]	@ (800f954 <StartSafeModeTask+0xf8>)
 800f896:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f89a:	edd3 7a04 	vldr	s15, [r3, #16]
 800f89e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8a6:	bf4c      	ite	mi
 800f8a8:	2301      	movmi	r3, #1
 800f8aa:	2300      	movpl	r3, #0
 800f8ac:	b2db      	uxtb	r3, r3
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d00e      	beq.n	800f8d0 <StartSafeModeTask+0x74>
 800f8b2:	2101      	movs	r1, #1
 800f8b4:	4829      	ldr	r0, [pc, #164]	@ (800f95c <StartSafeModeTask+0x100>)
 800f8b6:	f7fa ff8d 	bl	800a7d4 <_ZN13Communication10TogglePumpEb>
 800f8ba:	4b29      	ldr	r3, [pc, #164]	@ (800f960 <StartSafeModeTask+0x104>)
 800f8bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7f6 fdc4 	bl	800644c <osThreadTerminate>
 800f8c4:	4b26      	ldr	r3, [pc, #152]	@ (800f960 <StartSafeModeTask+0x104>)
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	671a      	str	r2, [r3, #112]	@ 0x70
 800f8ca:	7dfb      	ldrb	r3, [r7, #23]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	75fb      	strb	r3, [r7, #23]
 800f8d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800f8d4:	f7f8 fab4 	bl	8007e40 <vTaskDelay>
 800f8d8:	e7cd      	b.n	800f876 <StartSafeModeTask+0x1a>
 800f8da:	7dfb      	ldrb	r3, [r7, #23]
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d1ca      	bne.n	800f876 <StartSafeModeTask+0x1a>
 800f8e0:	4b1d      	ldr	r3, [pc, #116]	@ (800f958 <StartSafeModeTask+0xfc>)
 800f8e2:	699b      	ldr	r3, [r3, #24]
 800f8e4:	ee07 3a90 	vmov	s15, r3
 800f8e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f8ec:	4b19      	ldr	r3, [pc, #100]	@ (800f954 <StartSafeModeTask+0xf8>)
 800f8ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f8f2:	edd3 7a04 	vldr	s15, [r3, #16]
 800f8f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8fe:	dc12      	bgt.n	800f926 <StartSafeModeTask+0xca>
 800f900:	4b15      	ldr	r3, [pc, #84]	@ (800f958 <StartSafeModeTask+0xfc>)
 800f902:	699b      	ldr	r3, [r3, #24]
 800f904:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800f908:	3308      	adds	r3, #8
 800f90a:	ee07 3a90 	vmov	s15, r3
 800f90e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f912:	4b10      	ldr	r3, [pc, #64]	@ (800f954 <StartSafeModeTask+0xf8>)
 800f914:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f918:	edd3 7a04 	vldr	s15, [r3, #16]
 800f91c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f924:	db01      	blt.n	800f92a <StartSafeModeTask+0xce>
 800f926:	2301      	movs	r3, #1
 800f928:	e000      	b.n	800f92c <StartSafeModeTask+0xd0>
 800f92a:	2300      	movs	r3, #0
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d002      	beq.n	800f936 <StartSafeModeTask+0xda>
 800f930:	7dbb      	ldrb	r3, [r7, #22]
 800f932:	3301      	adds	r3, #1
 800f934:	75bb      	strb	r3, [r7, #22]
 800f936:	7dbb      	ldrb	r3, [r7, #22]
 800f938:	2b03      	cmp	r3, #3
 800f93a:	d907      	bls.n	800f94c <StartSafeModeTask+0xf0>
 800f93c:	2100      	movs	r1, #0
 800f93e:	4807      	ldr	r0, [pc, #28]	@ (800f95c <StartSafeModeTask+0x100>)
 800f940:	f7fa ff48 	bl	800a7d4 <_ZN13Communication10TogglePumpEb>
 800f944:	2300      	movs	r3, #0
 800f946:	75fb      	strb	r3, [r7, #23]
 800f948:	2300      	movs	r3, #0
 800f94a:	75bb      	strb	r3, [r7, #22]
 800f94c:	2064      	movs	r0, #100	@ 0x64
 800f94e:	f7f8 fa77 	bl	8007e40 <vTaskDelay>
 800f952:	e790      	b.n	800f876 <StartSafeModeTask+0x1a>
 800f954:	20007044 	.word	0x20007044
 800f958:	200092a0 	.word	0x200092a0
 800f95c:	20009074 	.word	0x20009074
 800f960:	200090b0 	.word	0x200090b0

0800f964 <ClearLoadcellParams>:
 800f964:	b580      	push	{r7, lr}
 800f966:	af00      	add	r7, sp, #0
 800f968:	4b09      	ldr	r3, [pc, #36]	@ (800f990 <ClearLoadcellParams+0x2c>)
 800f96a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f96e:	461a      	mov	r2, r3
 800f970:	f04f 0300 	mov.w	r3, #0
 800f974:	6253      	str	r3, [r2, #36]	@ 0x24
 800f976:	4b06      	ldr	r3, [pc, #24]	@ (800f990 <ClearLoadcellParams+0x2c>)
 800f978:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f97c:	461a      	mov	r2, r3
 800f97e:	f04f 0300 	mov.w	r3, #0
 800f982:	6293      	str	r3, [r2, #40]	@ 0x28
 800f984:	4802      	ldr	r0, [pc, #8]	@ (800f990 <ClearLoadcellParams+0x2c>)
 800f986:	f7fd ff33 	bl	800d7f0 <_ZN8LoadCell11ClearParamsEv>
 800f98a:	bf00      	nop
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	20007044 	.word	0x20007044

0800f994 <_Z41__static_initialization_and_destruction_0ii>:
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d113      	bne.n	800f9cc <_Z41__static_initialization_and_destruction_0ii+0x38>
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d10e      	bne.n	800f9cc <_Z41__static_initialization_and_destruction_0ii+0x38>
 800f9ae:	4813      	ldr	r0, [pc, #76]	@ (800f9fc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800f9b0:	f7fb f97c 	bl	800acac <_ZN3EmgC1Ev>
 800f9b4:	4812      	ldr	r0, [pc, #72]	@ (800fa00 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800f9b6:	f7fd fa13 	bl	800cde0 <_ZN8LoadCellC1Ev>
 800f9ba:	4812      	ldr	r0, [pc, #72]	@ (800fa04 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800f9bc:	f7fa f8ac 	bl	8009b18 <_ZN13CommunicationC1Ev>
 800f9c0:	4811      	ldr	r0, [pc, #68]	@ (800fa08 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800f9c2:	f7fb fdc7 	bl	800b554 <_ZN12FlashManagerC1Ev>
 800f9c6:	4811      	ldr	r0, [pc, #68]	@ (800fa0c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800f9c8:	f7fe f83a 	bl	800da40 <_ZN18SystemConfigStructC1Ev>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d110      	bne.n	800f9f4 <_Z41__static_initialization_and_destruction_0ii+0x60>
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d10b      	bne.n	800f9f4 <_Z41__static_initialization_and_destruction_0ii+0x60>
 800f9dc:	480a      	ldr	r0, [pc, #40]	@ (800fa08 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800f9de:	f7fb fe09 	bl	800b5f4 <_ZN12FlashManagerD1Ev>
 800f9e2:	4808      	ldr	r0, [pc, #32]	@ (800fa04 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800f9e4:	f7fa f8b0 	bl	8009b48 <_ZN13CommunicationD1Ev>
 800f9e8:	4805      	ldr	r0, [pc, #20]	@ (800fa00 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800f9ea:	f7fd fa09 	bl	800ce00 <_ZN8LoadCellD1Ev>
 800f9ee:	4803      	ldr	r0, [pc, #12]	@ (800f9fc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800f9f0:	f7fb f980 	bl	800acf4 <_ZN3EmgD1Ev>
 800f9f4:	bf00      	nop
 800f9f6:	3708      	adds	r7, #8
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	20005008 	.word	0x20005008
 800fa00:	20007044 	.word	0x20007044
 800fa04:	20009074 	.word	0x20009074
 800fa08:	20009094 	.word	0x20009094
 800fa0c:	200092a0 	.word	0x200092a0

0800fa10 <_GLOBAL__sub_I_sendCounter>:
 800fa10:	b580      	push	{r7, lr}
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fa18:	2001      	movs	r0, #1
 800fa1a:	f7ff ffbb 	bl	800f994 <_Z41__static_initialization_and_destruction_0ii>
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <_GLOBAL__sub_D_sendCounter>:
 800fa20:	b580      	push	{r7, lr}
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fa28:	2000      	movs	r0, #0
 800fa2a:	f7ff ffb3 	bl	800f994 <_Z41__static_initialization_and_destruction_0ii>
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <_ZdlPvj>:
 800fa30:	f000 b800 	b.w	800fa34 <_ZdlPv>

0800fa34 <_ZdlPv>:
 800fa34:	f000 b88e 	b.w	800fb54 <free>

0800fa38 <ceilf>:
 800fa38:	ee10 3a10 	vmov	r3, s0
 800fa3c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fa40:	3a7f      	subs	r2, #127	@ 0x7f
 800fa42:	2a16      	cmp	r2, #22
 800fa44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fa48:	dc2a      	bgt.n	800faa0 <ceilf+0x68>
 800fa4a:	2a00      	cmp	r2, #0
 800fa4c:	da11      	bge.n	800fa72 <ceilf+0x3a>
 800fa4e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fab4 <ceilf+0x7c>
 800fa52:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fa56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fa5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa5e:	dd05      	ble.n	800fa6c <ceilf+0x34>
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	db23      	blt.n	800faac <ceilf+0x74>
 800fa64:	2900      	cmp	r1, #0
 800fa66:	bf18      	it	ne
 800fa68:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 800fa6c:	ee00 3a10 	vmov	s0, r3
 800fa70:	4770      	bx	lr
 800fa72:	4911      	ldr	r1, [pc, #68]	@ (800fab8 <ceilf+0x80>)
 800fa74:	4111      	asrs	r1, r2
 800fa76:	420b      	tst	r3, r1
 800fa78:	d0fa      	beq.n	800fa70 <ceilf+0x38>
 800fa7a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fab4 <ceilf+0x7c>
 800fa7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fa82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fa86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa8a:	ddef      	ble.n	800fa6c <ceilf+0x34>
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	bfc2      	ittt	gt
 800fa90:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 800fa94:	fa40 f202 	asrgt.w	r2, r0, r2
 800fa98:	189b      	addgt	r3, r3, r2
 800fa9a:	ea23 0301 	bic.w	r3, r3, r1
 800fa9e:	e7e5      	b.n	800fa6c <ceilf+0x34>
 800faa0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800faa4:	d3e4      	bcc.n	800fa70 <ceilf+0x38>
 800faa6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800faaa:	4770      	bx	lr
 800faac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fab0:	e7dc      	b.n	800fa6c <ceilf+0x34>
 800fab2:	bf00      	nop
 800fab4:	7149f2ca 	.word	0x7149f2ca
 800fab8:	007fffff 	.word	0x007fffff

0800fabc <floorf>:
 800fabc:	ee10 3a10 	vmov	r3, s0
 800fac0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fac4:	3a7f      	subs	r2, #127	@ 0x7f
 800fac6:	2a16      	cmp	r2, #22
 800fac8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800facc:	dc2b      	bgt.n	800fb26 <floorf+0x6a>
 800face:	2a00      	cmp	r2, #0
 800fad0:	da12      	bge.n	800faf8 <floorf+0x3c>
 800fad2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fb38 <floorf+0x7c>
 800fad6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fada:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fae2:	dd06      	ble.n	800faf2 <floorf+0x36>
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	da24      	bge.n	800fb32 <floorf+0x76>
 800fae8:	2900      	cmp	r1, #0
 800faea:	4b14      	ldr	r3, [pc, #80]	@ (800fb3c <floorf+0x80>)
 800faec:	bf08      	it	eq
 800faee:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800faf2:	ee00 3a10 	vmov	s0, r3
 800faf6:	4770      	bx	lr
 800faf8:	4911      	ldr	r1, [pc, #68]	@ (800fb40 <floorf+0x84>)
 800fafa:	4111      	asrs	r1, r2
 800fafc:	420b      	tst	r3, r1
 800fafe:	d0fa      	beq.n	800faf6 <floorf+0x3a>
 800fb00:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800fb38 <floorf+0x7c>
 800fb04:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fb08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb10:	ddef      	ble.n	800faf2 <floorf+0x36>
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	bfbe      	ittt	lt
 800fb16:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800fb1a:	fa40 f202 	asrlt.w	r2, r0, r2
 800fb1e:	189b      	addlt	r3, r3, r2
 800fb20:	ea23 0301 	bic.w	r3, r3, r1
 800fb24:	e7e5      	b.n	800faf2 <floorf+0x36>
 800fb26:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fb2a:	d3e4      	bcc.n	800faf6 <floorf+0x3a>
 800fb2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fb30:	4770      	bx	lr
 800fb32:	2300      	movs	r3, #0
 800fb34:	e7dd      	b.n	800faf2 <floorf+0x36>
 800fb36:	bf00      	nop
 800fb38:	7149f2ca 	.word	0x7149f2ca
 800fb3c:	bf800000 	.word	0xbf800000
 800fb40:	007fffff 	.word	0x007fffff

0800fb44 <malloc>:
 800fb44:	4b02      	ldr	r3, [pc, #8]	@ (800fb50 <malloc+0xc>)
 800fb46:	4601      	mov	r1, r0
 800fb48:	6818      	ldr	r0, [r3, #0]
 800fb4a:	f000 b82d 	b.w	800fba8 <_malloc_r>
 800fb4e:	bf00      	nop
 800fb50:	2000005c 	.word	0x2000005c

0800fb54 <free>:
 800fb54:	4b02      	ldr	r3, [pc, #8]	@ (800fb60 <free+0xc>)
 800fb56:	4601      	mov	r1, r0
 800fb58:	6818      	ldr	r0, [r3, #0]
 800fb5a:	f000 baad 	b.w	80100b8 <_free_r>
 800fb5e:	bf00      	nop
 800fb60:	2000005c 	.word	0x2000005c

0800fb64 <sbrk_aligned>:
 800fb64:	b570      	push	{r4, r5, r6, lr}
 800fb66:	4e0f      	ldr	r6, [pc, #60]	@ (800fba4 <sbrk_aligned+0x40>)
 800fb68:	460c      	mov	r4, r1
 800fb6a:	6831      	ldr	r1, [r6, #0]
 800fb6c:	4605      	mov	r5, r0
 800fb6e:	b911      	cbnz	r1, 800fb76 <sbrk_aligned+0x12>
 800fb70:	f000 fa26 	bl	800ffc0 <_sbrk_r>
 800fb74:	6030      	str	r0, [r6, #0]
 800fb76:	4621      	mov	r1, r4
 800fb78:	4628      	mov	r0, r5
 800fb7a:	f000 fa21 	bl	800ffc0 <_sbrk_r>
 800fb7e:	1c43      	adds	r3, r0, #1
 800fb80:	d103      	bne.n	800fb8a <sbrk_aligned+0x26>
 800fb82:	f04f 34ff 	mov.w	r4, #4294967295
 800fb86:	4620      	mov	r0, r4
 800fb88:	bd70      	pop	{r4, r5, r6, pc}
 800fb8a:	1cc4      	adds	r4, r0, #3
 800fb8c:	f024 0403 	bic.w	r4, r4, #3
 800fb90:	42a0      	cmp	r0, r4
 800fb92:	d0f8      	beq.n	800fb86 <sbrk_aligned+0x22>
 800fb94:	1a21      	subs	r1, r4, r0
 800fb96:	4628      	mov	r0, r5
 800fb98:	f000 fa12 	bl	800ffc0 <_sbrk_r>
 800fb9c:	3001      	adds	r0, #1
 800fb9e:	d1f2      	bne.n	800fb86 <sbrk_aligned+0x22>
 800fba0:	e7ef      	b.n	800fb82 <sbrk_aligned+0x1e>
 800fba2:	bf00      	nop
 800fba4:	200093b0 	.word	0x200093b0

0800fba8 <_malloc_r>:
 800fba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbac:	1ccd      	adds	r5, r1, #3
 800fbae:	f025 0503 	bic.w	r5, r5, #3
 800fbb2:	3508      	adds	r5, #8
 800fbb4:	2d0c      	cmp	r5, #12
 800fbb6:	bf38      	it	cc
 800fbb8:	250c      	movcc	r5, #12
 800fbba:	2d00      	cmp	r5, #0
 800fbbc:	4606      	mov	r6, r0
 800fbbe:	db01      	blt.n	800fbc4 <_malloc_r+0x1c>
 800fbc0:	42a9      	cmp	r1, r5
 800fbc2:	d904      	bls.n	800fbce <_malloc_r+0x26>
 800fbc4:	230c      	movs	r3, #12
 800fbc6:	6033      	str	r3, [r6, #0]
 800fbc8:	2000      	movs	r0, #0
 800fbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fca4 <_malloc_r+0xfc>
 800fbd2:	f000 f869 	bl	800fca8 <__malloc_lock>
 800fbd6:	f8d8 3000 	ldr.w	r3, [r8]
 800fbda:	461c      	mov	r4, r3
 800fbdc:	bb44      	cbnz	r4, 800fc30 <_malloc_r+0x88>
 800fbde:	4629      	mov	r1, r5
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	f7ff ffbf 	bl	800fb64 <sbrk_aligned>
 800fbe6:	1c43      	adds	r3, r0, #1
 800fbe8:	4604      	mov	r4, r0
 800fbea:	d158      	bne.n	800fc9e <_malloc_r+0xf6>
 800fbec:	f8d8 4000 	ldr.w	r4, [r8]
 800fbf0:	4627      	mov	r7, r4
 800fbf2:	2f00      	cmp	r7, #0
 800fbf4:	d143      	bne.n	800fc7e <_malloc_r+0xd6>
 800fbf6:	2c00      	cmp	r4, #0
 800fbf8:	d04b      	beq.n	800fc92 <_malloc_r+0xea>
 800fbfa:	6823      	ldr	r3, [r4, #0]
 800fbfc:	4639      	mov	r1, r7
 800fbfe:	4630      	mov	r0, r6
 800fc00:	eb04 0903 	add.w	r9, r4, r3
 800fc04:	f000 f9dc 	bl	800ffc0 <_sbrk_r>
 800fc08:	4581      	cmp	r9, r0
 800fc0a:	d142      	bne.n	800fc92 <_malloc_r+0xea>
 800fc0c:	6821      	ldr	r1, [r4, #0]
 800fc0e:	1a6d      	subs	r5, r5, r1
 800fc10:	4629      	mov	r1, r5
 800fc12:	4630      	mov	r0, r6
 800fc14:	f7ff ffa6 	bl	800fb64 <sbrk_aligned>
 800fc18:	3001      	adds	r0, #1
 800fc1a:	d03a      	beq.n	800fc92 <_malloc_r+0xea>
 800fc1c:	6823      	ldr	r3, [r4, #0]
 800fc1e:	442b      	add	r3, r5
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	f8d8 3000 	ldr.w	r3, [r8]
 800fc26:	685a      	ldr	r2, [r3, #4]
 800fc28:	bb62      	cbnz	r2, 800fc84 <_malloc_r+0xdc>
 800fc2a:	f8c8 7000 	str.w	r7, [r8]
 800fc2e:	e00f      	b.n	800fc50 <_malloc_r+0xa8>
 800fc30:	6822      	ldr	r2, [r4, #0]
 800fc32:	1b52      	subs	r2, r2, r5
 800fc34:	d420      	bmi.n	800fc78 <_malloc_r+0xd0>
 800fc36:	2a0b      	cmp	r2, #11
 800fc38:	d917      	bls.n	800fc6a <_malloc_r+0xc2>
 800fc3a:	1961      	adds	r1, r4, r5
 800fc3c:	42a3      	cmp	r3, r4
 800fc3e:	6025      	str	r5, [r4, #0]
 800fc40:	bf18      	it	ne
 800fc42:	6059      	strne	r1, [r3, #4]
 800fc44:	6863      	ldr	r3, [r4, #4]
 800fc46:	bf08      	it	eq
 800fc48:	f8c8 1000 	streq.w	r1, [r8]
 800fc4c:	5162      	str	r2, [r4, r5]
 800fc4e:	604b      	str	r3, [r1, #4]
 800fc50:	4630      	mov	r0, r6
 800fc52:	f000 f82f 	bl	800fcb4 <__malloc_unlock>
 800fc56:	f104 000b 	add.w	r0, r4, #11
 800fc5a:	1d23      	adds	r3, r4, #4
 800fc5c:	f020 0007 	bic.w	r0, r0, #7
 800fc60:	1ac2      	subs	r2, r0, r3
 800fc62:	bf1c      	itt	ne
 800fc64:	1a1b      	subne	r3, r3, r0
 800fc66:	50a3      	strne	r3, [r4, r2]
 800fc68:	e7af      	b.n	800fbca <_malloc_r+0x22>
 800fc6a:	6862      	ldr	r2, [r4, #4]
 800fc6c:	42a3      	cmp	r3, r4
 800fc6e:	bf0c      	ite	eq
 800fc70:	f8c8 2000 	streq.w	r2, [r8]
 800fc74:	605a      	strne	r2, [r3, #4]
 800fc76:	e7eb      	b.n	800fc50 <_malloc_r+0xa8>
 800fc78:	4623      	mov	r3, r4
 800fc7a:	6864      	ldr	r4, [r4, #4]
 800fc7c:	e7ae      	b.n	800fbdc <_malloc_r+0x34>
 800fc7e:	463c      	mov	r4, r7
 800fc80:	687f      	ldr	r7, [r7, #4]
 800fc82:	e7b6      	b.n	800fbf2 <_malloc_r+0x4a>
 800fc84:	461a      	mov	r2, r3
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	42a3      	cmp	r3, r4
 800fc8a:	d1fb      	bne.n	800fc84 <_malloc_r+0xdc>
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	6053      	str	r3, [r2, #4]
 800fc90:	e7de      	b.n	800fc50 <_malloc_r+0xa8>
 800fc92:	230c      	movs	r3, #12
 800fc94:	6033      	str	r3, [r6, #0]
 800fc96:	4630      	mov	r0, r6
 800fc98:	f000 f80c 	bl	800fcb4 <__malloc_unlock>
 800fc9c:	e794      	b.n	800fbc8 <_malloc_r+0x20>
 800fc9e:	6005      	str	r5, [r0, #0]
 800fca0:	e7d6      	b.n	800fc50 <_malloc_r+0xa8>
 800fca2:	bf00      	nop
 800fca4:	200093b4 	.word	0x200093b4

0800fca8 <__malloc_lock>:
 800fca8:	4801      	ldr	r0, [pc, #4]	@ (800fcb0 <__malloc_lock+0x8>)
 800fcaa:	f000 b9d6 	b.w	801005a <__retarget_lock_acquire_recursive>
 800fcae:	bf00      	nop
 800fcb0:	200094f8 	.word	0x200094f8

0800fcb4 <__malloc_unlock>:
 800fcb4:	4801      	ldr	r0, [pc, #4]	@ (800fcbc <__malloc_unlock+0x8>)
 800fcb6:	f000 b9d1 	b.w	801005c <__retarget_lock_release_recursive>
 800fcba:	bf00      	nop
 800fcbc:	200094f8 	.word	0x200094f8

0800fcc0 <rand>:
 800fcc0:	4b16      	ldr	r3, [pc, #88]	@ (800fd1c <rand+0x5c>)
 800fcc2:	b510      	push	{r4, lr}
 800fcc4:	681c      	ldr	r4, [r3, #0]
 800fcc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fcc8:	b9b3      	cbnz	r3, 800fcf8 <rand+0x38>
 800fcca:	2018      	movs	r0, #24
 800fccc:	f7ff ff3a 	bl	800fb44 <malloc>
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	6320      	str	r0, [r4, #48]	@ 0x30
 800fcd4:	b920      	cbnz	r0, 800fce0 <rand+0x20>
 800fcd6:	4b12      	ldr	r3, [pc, #72]	@ (800fd20 <rand+0x60>)
 800fcd8:	4812      	ldr	r0, [pc, #72]	@ (800fd24 <rand+0x64>)
 800fcda:	2152      	movs	r1, #82	@ 0x52
 800fcdc:	f000 f9ce 	bl	801007c <__assert_func>
 800fce0:	4911      	ldr	r1, [pc, #68]	@ (800fd28 <rand+0x68>)
 800fce2:	4b12      	ldr	r3, [pc, #72]	@ (800fd2c <rand+0x6c>)
 800fce4:	e9c0 1300 	strd	r1, r3, [r0]
 800fce8:	4b11      	ldr	r3, [pc, #68]	@ (800fd30 <rand+0x70>)
 800fcea:	6083      	str	r3, [r0, #8]
 800fcec:	230b      	movs	r3, #11
 800fcee:	8183      	strh	r3, [r0, #12]
 800fcf0:	2100      	movs	r1, #0
 800fcf2:	2001      	movs	r0, #1
 800fcf4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fcf8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fcfa:	480e      	ldr	r0, [pc, #56]	@ (800fd34 <rand+0x74>)
 800fcfc:	690b      	ldr	r3, [r1, #16]
 800fcfe:	694c      	ldr	r4, [r1, #20]
 800fd00:	4a0d      	ldr	r2, [pc, #52]	@ (800fd38 <rand+0x78>)
 800fd02:	4358      	muls	r0, r3
 800fd04:	fb02 0004 	mla	r0, r2, r4, r0
 800fd08:	fba3 3202 	umull	r3, r2, r3, r2
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	eb40 0002 	adc.w	r0, r0, r2
 800fd12:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800fd16:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800fd1a:	bd10      	pop	{r4, pc}
 800fd1c:	2000005c 	.word	0x2000005c
 800fd20:	08010ce0 	.word	0x08010ce0
 800fd24:	08010cf7 	.word	0x08010cf7
 800fd28:	abcd330e 	.word	0xabcd330e
 800fd2c:	e66d1234 	.word	0xe66d1234
 800fd30:	0005deec 	.word	0x0005deec
 800fd34:	5851f42d 	.word	0x5851f42d
 800fd38:	4c957f2d 	.word	0x4c957f2d

0800fd3c <std>:
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	b510      	push	{r4, lr}
 800fd40:	4604      	mov	r4, r0
 800fd42:	e9c0 3300 	strd	r3, r3, [r0]
 800fd46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd4a:	6083      	str	r3, [r0, #8]
 800fd4c:	8181      	strh	r1, [r0, #12]
 800fd4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800fd50:	81c2      	strh	r2, [r0, #14]
 800fd52:	6183      	str	r3, [r0, #24]
 800fd54:	4619      	mov	r1, r3
 800fd56:	2208      	movs	r2, #8
 800fd58:	305c      	adds	r0, #92	@ 0x5c
 800fd5a:	f000 f8f4 	bl	800ff46 <memset>
 800fd5e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd94 <std+0x58>)
 800fd60:	6263      	str	r3, [r4, #36]	@ 0x24
 800fd62:	4b0d      	ldr	r3, [pc, #52]	@ (800fd98 <std+0x5c>)
 800fd64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd66:	4b0d      	ldr	r3, [pc, #52]	@ (800fd9c <std+0x60>)
 800fd68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd6a:	4b0d      	ldr	r3, [pc, #52]	@ (800fda0 <std+0x64>)
 800fd6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd6e:	4b0d      	ldr	r3, [pc, #52]	@ (800fda4 <std+0x68>)
 800fd70:	6224      	str	r4, [r4, #32]
 800fd72:	429c      	cmp	r4, r3
 800fd74:	d006      	beq.n	800fd84 <std+0x48>
 800fd76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd7a:	4294      	cmp	r4, r2
 800fd7c:	d002      	beq.n	800fd84 <std+0x48>
 800fd7e:	33d0      	adds	r3, #208	@ 0xd0
 800fd80:	429c      	cmp	r4, r3
 800fd82:	d105      	bne.n	800fd90 <std+0x54>
 800fd84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd8c:	f000 b964 	b.w	8010058 <__retarget_lock_init_recursive>
 800fd90:	bd10      	pop	{r4, pc}
 800fd92:	bf00      	nop
 800fd94:	0800fec1 	.word	0x0800fec1
 800fd98:	0800fee3 	.word	0x0800fee3
 800fd9c:	0800ff1b 	.word	0x0800ff1b
 800fda0:	0800ff3f 	.word	0x0800ff3f
 800fda4:	200093b8 	.word	0x200093b8

0800fda8 <stdio_exit_handler>:
 800fda8:	4a02      	ldr	r2, [pc, #8]	@ (800fdb4 <stdio_exit_handler+0xc>)
 800fdaa:	4903      	ldr	r1, [pc, #12]	@ (800fdb8 <stdio_exit_handler+0x10>)
 800fdac:	4803      	ldr	r0, [pc, #12]	@ (800fdbc <stdio_exit_handler+0x14>)
 800fdae:	f000 b869 	b.w	800fe84 <_fwalk_sglue>
 800fdb2:	bf00      	nop
 800fdb4:	20000050 	.word	0x20000050
 800fdb8:	08010255 	.word	0x08010255
 800fdbc:	20000060 	.word	0x20000060

0800fdc0 <cleanup_stdio>:
 800fdc0:	6841      	ldr	r1, [r0, #4]
 800fdc2:	4b0c      	ldr	r3, [pc, #48]	@ (800fdf4 <cleanup_stdio+0x34>)
 800fdc4:	4299      	cmp	r1, r3
 800fdc6:	b510      	push	{r4, lr}
 800fdc8:	4604      	mov	r4, r0
 800fdca:	d001      	beq.n	800fdd0 <cleanup_stdio+0x10>
 800fdcc:	f000 fa42 	bl	8010254 <_fflush_r>
 800fdd0:	68a1      	ldr	r1, [r4, #8]
 800fdd2:	4b09      	ldr	r3, [pc, #36]	@ (800fdf8 <cleanup_stdio+0x38>)
 800fdd4:	4299      	cmp	r1, r3
 800fdd6:	d002      	beq.n	800fdde <cleanup_stdio+0x1e>
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f000 fa3b 	bl	8010254 <_fflush_r>
 800fdde:	68e1      	ldr	r1, [r4, #12]
 800fde0:	4b06      	ldr	r3, [pc, #24]	@ (800fdfc <cleanup_stdio+0x3c>)
 800fde2:	4299      	cmp	r1, r3
 800fde4:	d004      	beq.n	800fdf0 <cleanup_stdio+0x30>
 800fde6:	4620      	mov	r0, r4
 800fde8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdec:	f000 ba32 	b.w	8010254 <_fflush_r>
 800fdf0:	bd10      	pop	{r4, pc}
 800fdf2:	bf00      	nop
 800fdf4:	200093b8 	.word	0x200093b8
 800fdf8:	20009420 	.word	0x20009420
 800fdfc:	20009488 	.word	0x20009488

0800fe00 <global_stdio_init.part.0>:
 800fe00:	b510      	push	{r4, lr}
 800fe02:	4b0b      	ldr	r3, [pc, #44]	@ (800fe30 <global_stdio_init.part.0+0x30>)
 800fe04:	4c0b      	ldr	r4, [pc, #44]	@ (800fe34 <global_stdio_init.part.0+0x34>)
 800fe06:	4a0c      	ldr	r2, [pc, #48]	@ (800fe38 <global_stdio_init.part.0+0x38>)
 800fe08:	601a      	str	r2, [r3, #0]
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	2104      	movs	r1, #4
 800fe10:	f7ff ff94 	bl	800fd3c <std>
 800fe14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fe18:	2201      	movs	r2, #1
 800fe1a:	2109      	movs	r1, #9
 800fe1c:	f7ff ff8e 	bl	800fd3c <std>
 800fe20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fe24:	2202      	movs	r2, #2
 800fe26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe2a:	2112      	movs	r1, #18
 800fe2c:	f7ff bf86 	b.w	800fd3c <std>
 800fe30:	200094f0 	.word	0x200094f0
 800fe34:	200093b8 	.word	0x200093b8
 800fe38:	0800fda9 	.word	0x0800fda9

0800fe3c <__sfp_lock_acquire>:
 800fe3c:	4801      	ldr	r0, [pc, #4]	@ (800fe44 <__sfp_lock_acquire+0x8>)
 800fe3e:	f000 b90c 	b.w	801005a <__retarget_lock_acquire_recursive>
 800fe42:	bf00      	nop
 800fe44:	200094f9 	.word	0x200094f9

0800fe48 <__sfp_lock_release>:
 800fe48:	4801      	ldr	r0, [pc, #4]	@ (800fe50 <__sfp_lock_release+0x8>)
 800fe4a:	f000 b907 	b.w	801005c <__retarget_lock_release_recursive>
 800fe4e:	bf00      	nop
 800fe50:	200094f9 	.word	0x200094f9

0800fe54 <__sinit>:
 800fe54:	b510      	push	{r4, lr}
 800fe56:	4604      	mov	r4, r0
 800fe58:	f7ff fff0 	bl	800fe3c <__sfp_lock_acquire>
 800fe5c:	6a23      	ldr	r3, [r4, #32]
 800fe5e:	b11b      	cbz	r3, 800fe68 <__sinit+0x14>
 800fe60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe64:	f7ff bff0 	b.w	800fe48 <__sfp_lock_release>
 800fe68:	4b04      	ldr	r3, [pc, #16]	@ (800fe7c <__sinit+0x28>)
 800fe6a:	6223      	str	r3, [r4, #32]
 800fe6c:	4b04      	ldr	r3, [pc, #16]	@ (800fe80 <__sinit+0x2c>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d1f5      	bne.n	800fe60 <__sinit+0xc>
 800fe74:	f7ff ffc4 	bl	800fe00 <global_stdio_init.part.0>
 800fe78:	e7f2      	b.n	800fe60 <__sinit+0xc>
 800fe7a:	bf00      	nop
 800fe7c:	0800fdc1 	.word	0x0800fdc1
 800fe80:	200094f0 	.word	0x200094f0

0800fe84 <_fwalk_sglue>:
 800fe84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe88:	4607      	mov	r7, r0
 800fe8a:	4688      	mov	r8, r1
 800fe8c:	4614      	mov	r4, r2
 800fe8e:	2600      	movs	r6, #0
 800fe90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe94:	f1b9 0901 	subs.w	r9, r9, #1
 800fe98:	d505      	bpl.n	800fea6 <_fwalk_sglue+0x22>
 800fe9a:	6824      	ldr	r4, [r4, #0]
 800fe9c:	2c00      	cmp	r4, #0
 800fe9e:	d1f7      	bne.n	800fe90 <_fwalk_sglue+0xc>
 800fea0:	4630      	mov	r0, r6
 800fea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fea6:	89ab      	ldrh	r3, [r5, #12]
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d907      	bls.n	800febc <_fwalk_sglue+0x38>
 800feac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800feb0:	3301      	adds	r3, #1
 800feb2:	d003      	beq.n	800febc <_fwalk_sglue+0x38>
 800feb4:	4629      	mov	r1, r5
 800feb6:	4638      	mov	r0, r7
 800feb8:	47c0      	blx	r8
 800feba:	4306      	orrs	r6, r0
 800febc:	3568      	adds	r5, #104	@ 0x68
 800febe:	e7e9      	b.n	800fe94 <_fwalk_sglue+0x10>

0800fec0 <__sread>:
 800fec0:	b510      	push	{r4, lr}
 800fec2:	460c      	mov	r4, r1
 800fec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fec8:	f000 f868 	bl	800ff9c <_read_r>
 800fecc:	2800      	cmp	r0, #0
 800fece:	bfab      	itete	ge
 800fed0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fed2:	89a3      	ldrhlt	r3, [r4, #12]
 800fed4:	181b      	addge	r3, r3, r0
 800fed6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800feda:	bfac      	ite	ge
 800fedc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fede:	81a3      	strhlt	r3, [r4, #12]
 800fee0:	bd10      	pop	{r4, pc}

0800fee2 <__swrite>:
 800fee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee6:	461f      	mov	r7, r3
 800fee8:	898b      	ldrh	r3, [r1, #12]
 800feea:	05db      	lsls	r3, r3, #23
 800feec:	4605      	mov	r5, r0
 800feee:	460c      	mov	r4, r1
 800fef0:	4616      	mov	r6, r2
 800fef2:	d505      	bpl.n	800ff00 <__swrite+0x1e>
 800fef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fef8:	2302      	movs	r3, #2
 800fefa:	2200      	movs	r2, #0
 800fefc:	f000 f83c 	bl	800ff78 <_lseek_r>
 800ff00:	89a3      	ldrh	r3, [r4, #12]
 800ff02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ff0a:	81a3      	strh	r3, [r4, #12]
 800ff0c:	4632      	mov	r2, r6
 800ff0e:	463b      	mov	r3, r7
 800ff10:	4628      	mov	r0, r5
 800ff12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff16:	f000 b863 	b.w	800ffe0 <_write_r>

0800ff1a <__sseek>:
 800ff1a:	b510      	push	{r4, lr}
 800ff1c:	460c      	mov	r4, r1
 800ff1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff22:	f000 f829 	bl	800ff78 <_lseek_r>
 800ff26:	1c43      	adds	r3, r0, #1
 800ff28:	89a3      	ldrh	r3, [r4, #12]
 800ff2a:	bf15      	itete	ne
 800ff2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ff2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ff32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ff36:	81a3      	strheq	r3, [r4, #12]
 800ff38:	bf18      	it	ne
 800ff3a:	81a3      	strhne	r3, [r4, #12]
 800ff3c:	bd10      	pop	{r4, pc}

0800ff3e <__sclose>:
 800ff3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff42:	f000 b809 	b.w	800ff58 <_close_r>

0800ff46 <memset>:
 800ff46:	4402      	add	r2, r0
 800ff48:	4603      	mov	r3, r0
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d100      	bne.n	800ff50 <memset+0xa>
 800ff4e:	4770      	bx	lr
 800ff50:	f803 1b01 	strb.w	r1, [r3], #1
 800ff54:	e7f9      	b.n	800ff4a <memset+0x4>
	...

0800ff58 <_close_r>:
 800ff58:	b538      	push	{r3, r4, r5, lr}
 800ff5a:	4d06      	ldr	r5, [pc, #24]	@ (800ff74 <_close_r+0x1c>)
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	4604      	mov	r4, r0
 800ff60:	4608      	mov	r0, r1
 800ff62:	602b      	str	r3, [r5, #0]
 800ff64:	f7f1 fd98 	bl	8001a98 <_close>
 800ff68:	1c43      	adds	r3, r0, #1
 800ff6a:	d102      	bne.n	800ff72 <_close_r+0x1a>
 800ff6c:	682b      	ldr	r3, [r5, #0]
 800ff6e:	b103      	cbz	r3, 800ff72 <_close_r+0x1a>
 800ff70:	6023      	str	r3, [r4, #0]
 800ff72:	bd38      	pop	{r3, r4, r5, pc}
 800ff74:	200094f4 	.word	0x200094f4

0800ff78 <_lseek_r>:
 800ff78:	b538      	push	{r3, r4, r5, lr}
 800ff7a:	4d07      	ldr	r5, [pc, #28]	@ (800ff98 <_lseek_r+0x20>)
 800ff7c:	4604      	mov	r4, r0
 800ff7e:	4608      	mov	r0, r1
 800ff80:	4611      	mov	r1, r2
 800ff82:	2200      	movs	r2, #0
 800ff84:	602a      	str	r2, [r5, #0]
 800ff86:	461a      	mov	r2, r3
 800ff88:	f7f1 fdad 	bl	8001ae6 <_lseek>
 800ff8c:	1c43      	adds	r3, r0, #1
 800ff8e:	d102      	bne.n	800ff96 <_lseek_r+0x1e>
 800ff90:	682b      	ldr	r3, [r5, #0]
 800ff92:	b103      	cbz	r3, 800ff96 <_lseek_r+0x1e>
 800ff94:	6023      	str	r3, [r4, #0]
 800ff96:	bd38      	pop	{r3, r4, r5, pc}
 800ff98:	200094f4 	.word	0x200094f4

0800ff9c <_read_r>:
 800ff9c:	b538      	push	{r3, r4, r5, lr}
 800ff9e:	4d07      	ldr	r5, [pc, #28]	@ (800ffbc <_read_r+0x20>)
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	4608      	mov	r0, r1
 800ffa4:	4611      	mov	r1, r2
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	602a      	str	r2, [r5, #0]
 800ffaa:	461a      	mov	r2, r3
 800ffac:	f7f1 fd3b 	bl	8001a26 <_read>
 800ffb0:	1c43      	adds	r3, r0, #1
 800ffb2:	d102      	bne.n	800ffba <_read_r+0x1e>
 800ffb4:	682b      	ldr	r3, [r5, #0]
 800ffb6:	b103      	cbz	r3, 800ffba <_read_r+0x1e>
 800ffb8:	6023      	str	r3, [r4, #0]
 800ffba:	bd38      	pop	{r3, r4, r5, pc}
 800ffbc:	200094f4 	.word	0x200094f4

0800ffc0 <_sbrk_r>:
 800ffc0:	b538      	push	{r3, r4, r5, lr}
 800ffc2:	4d06      	ldr	r5, [pc, #24]	@ (800ffdc <_sbrk_r+0x1c>)
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	4608      	mov	r0, r1
 800ffca:	602b      	str	r3, [r5, #0]
 800ffcc:	f7f1 fd98 	bl	8001b00 <_sbrk>
 800ffd0:	1c43      	adds	r3, r0, #1
 800ffd2:	d102      	bne.n	800ffda <_sbrk_r+0x1a>
 800ffd4:	682b      	ldr	r3, [r5, #0]
 800ffd6:	b103      	cbz	r3, 800ffda <_sbrk_r+0x1a>
 800ffd8:	6023      	str	r3, [r4, #0]
 800ffda:	bd38      	pop	{r3, r4, r5, pc}
 800ffdc:	200094f4 	.word	0x200094f4

0800ffe0 <_write_r>:
 800ffe0:	b538      	push	{r3, r4, r5, lr}
 800ffe2:	4d07      	ldr	r5, [pc, #28]	@ (8010000 <_write_r+0x20>)
 800ffe4:	4604      	mov	r4, r0
 800ffe6:	4608      	mov	r0, r1
 800ffe8:	4611      	mov	r1, r2
 800ffea:	2200      	movs	r2, #0
 800ffec:	602a      	str	r2, [r5, #0]
 800ffee:	461a      	mov	r2, r3
 800fff0:	f7f1 fd36 	bl	8001a60 <_write>
 800fff4:	1c43      	adds	r3, r0, #1
 800fff6:	d102      	bne.n	800fffe <_write_r+0x1e>
 800fff8:	682b      	ldr	r3, [r5, #0]
 800fffa:	b103      	cbz	r3, 800fffe <_write_r+0x1e>
 800fffc:	6023      	str	r3, [r4, #0]
 800fffe:	bd38      	pop	{r3, r4, r5, pc}
 8010000:	200094f4 	.word	0x200094f4

08010004 <__errno>:
 8010004:	4b01      	ldr	r3, [pc, #4]	@ (801000c <__errno+0x8>)
 8010006:	6818      	ldr	r0, [r3, #0]
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	2000005c 	.word	0x2000005c

08010010 <__libc_init_array>:
 8010010:	b570      	push	{r4, r5, r6, lr}
 8010012:	4d0d      	ldr	r5, [pc, #52]	@ (8010048 <__libc_init_array+0x38>)
 8010014:	4c0d      	ldr	r4, [pc, #52]	@ (801004c <__libc_init_array+0x3c>)
 8010016:	1b64      	subs	r4, r4, r5
 8010018:	10a4      	asrs	r4, r4, #2
 801001a:	2600      	movs	r6, #0
 801001c:	42a6      	cmp	r6, r4
 801001e:	d109      	bne.n	8010034 <__libc_init_array+0x24>
 8010020:	4d0b      	ldr	r5, [pc, #44]	@ (8010050 <__libc_init_array+0x40>)
 8010022:	4c0c      	ldr	r4, [pc, #48]	@ (8010054 <__libc_init_array+0x44>)
 8010024:	f000 fd82 	bl	8010b2c <_init>
 8010028:	1b64      	subs	r4, r4, r5
 801002a:	10a4      	asrs	r4, r4, #2
 801002c:	2600      	movs	r6, #0
 801002e:	42a6      	cmp	r6, r4
 8010030:	d105      	bne.n	801003e <__libc_init_array+0x2e>
 8010032:	bd70      	pop	{r4, r5, r6, pc}
 8010034:	f855 3b04 	ldr.w	r3, [r5], #4
 8010038:	4798      	blx	r3
 801003a:	3601      	adds	r6, #1
 801003c:	e7ee      	b.n	801001c <__libc_init_array+0xc>
 801003e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010042:	4798      	blx	r3
 8010044:	3601      	adds	r6, #1
 8010046:	e7f2      	b.n	801002e <__libc_init_array+0x1e>
 8010048:	08010dc8 	.word	0x08010dc8
 801004c:	08010dc8 	.word	0x08010dc8
 8010050:	08010dc8 	.word	0x08010dc8
 8010054:	08010dd4 	.word	0x08010dd4

08010058 <__retarget_lock_init_recursive>:
 8010058:	4770      	bx	lr

0801005a <__retarget_lock_acquire_recursive>:
 801005a:	4770      	bx	lr

0801005c <__retarget_lock_release_recursive>:
 801005c:	4770      	bx	lr

0801005e <memcpy>:
 801005e:	440a      	add	r2, r1
 8010060:	4291      	cmp	r1, r2
 8010062:	f100 33ff 	add.w	r3, r0, #4294967295
 8010066:	d100      	bne.n	801006a <memcpy+0xc>
 8010068:	4770      	bx	lr
 801006a:	b510      	push	{r4, lr}
 801006c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010070:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010074:	4291      	cmp	r1, r2
 8010076:	d1f9      	bne.n	801006c <memcpy+0xe>
 8010078:	bd10      	pop	{r4, pc}
	...

0801007c <__assert_func>:
 801007c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801007e:	4614      	mov	r4, r2
 8010080:	461a      	mov	r2, r3
 8010082:	4b09      	ldr	r3, [pc, #36]	@ (80100a8 <__assert_func+0x2c>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4605      	mov	r5, r0
 8010088:	68d8      	ldr	r0, [r3, #12]
 801008a:	b954      	cbnz	r4, 80100a2 <__assert_func+0x26>
 801008c:	4b07      	ldr	r3, [pc, #28]	@ (80100ac <__assert_func+0x30>)
 801008e:	461c      	mov	r4, r3
 8010090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010094:	9100      	str	r1, [sp, #0]
 8010096:	462b      	mov	r3, r5
 8010098:	4905      	ldr	r1, [pc, #20]	@ (80100b0 <__assert_func+0x34>)
 801009a:	f000 f903 	bl	80102a4 <fiprintf>
 801009e:	f000 f913 	bl	80102c8 <abort>
 80100a2:	4b04      	ldr	r3, [pc, #16]	@ (80100b4 <__assert_func+0x38>)
 80100a4:	e7f4      	b.n	8010090 <__assert_func+0x14>
 80100a6:	bf00      	nop
 80100a8:	2000005c 	.word	0x2000005c
 80100ac:	08010d8a 	.word	0x08010d8a
 80100b0:	08010d5c 	.word	0x08010d5c
 80100b4:	08010d4f 	.word	0x08010d4f

080100b8 <_free_r>:
 80100b8:	b538      	push	{r3, r4, r5, lr}
 80100ba:	4605      	mov	r5, r0
 80100bc:	2900      	cmp	r1, #0
 80100be:	d041      	beq.n	8010144 <_free_r+0x8c>
 80100c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100c4:	1f0c      	subs	r4, r1, #4
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	bfb8      	it	lt
 80100ca:	18e4      	addlt	r4, r4, r3
 80100cc:	f7ff fdec 	bl	800fca8 <__malloc_lock>
 80100d0:	4a1d      	ldr	r2, [pc, #116]	@ (8010148 <_free_r+0x90>)
 80100d2:	6813      	ldr	r3, [r2, #0]
 80100d4:	b933      	cbnz	r3, 80100e4 <_free_r+0x2c>
 80100d6:	6063      	str	r3, [r4, #4]
 80100d8:	6014      	str	r4, [r2, #0]
 80100da:	4628      	mov	r0, r5
 80100dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100e0:	f7ff bde8 	b.w	800fcb4 <__malloc_unlock>
 80100e4:	42a3      	cmp	r3, r4
 80100e6:	d908      	bls.n	80100fa <_free_r+0x42>
 80100e8:	6820      	ldr	r0, [r4, #0]
 80100ea:	1821      	adds	r1, r4, r0
 80100ec:	428b      	cmp	r3, r1
 80100ee:	bf01      	itttt	eq
 80100f0:	6819      	ldreq	r1, [r3, #0]
 80100f2:	685b      	ldreq	r3, [r3, #4]
 80100f4:	1809      	addeq	r1, r1, r0
 80100f6:	6021      	streq	r1, [r4, #0]
 80100f8:	e7ed      	b.n	80100d6 <_free_r+0x1e>
 80100fa:	461a      	mov	r2, r3
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	b10b      	cbz	r3, 8010104 <_free_r+0x4c>
 8010100:	42a3      	cmp	r3, r4
 8010102:	d9fa      	bls.n	80100fa <_free_r+0x42>
 8010104:	6811      	ldr	r1, [r2, #0]
 8010106:	1850      	adds	r0, r2, r1
 8010108:	42a0      	cmp	r0, r4
 801010a:	d10b      	bne.n	8010124 <_free_r+0x6c>
 801010c:	6820      	ldr	r0, [r4, #0]
 801010e:	4401      	add	r1, r0
 8010110:	1850      	adds	r0, r2, r1
 8010112:	4283      	cmp	r3, r0
 8010114:	6011      	str	r1, [r2, #0]
 8010116:	d1e0      	bne.n	80100da <_free_r+0x22>
 8010118:	6818      	ldr	r0, [r3, #0]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	6053      	str	r3, [r2, #4]
 801011e:	4408      	add	r0, r1
 8010120:	6010      	str	r0, [r2, #0]
 8010122:	e7da      	b.n	80100da <_free_r+0x22>
 8010124:	d902      	bls.n	801012c <_free_r+0x74>
 8010126:	230c      	movs	r3, #12
 8010128:	602b      	str	r3, [r5, #0]
 801012a:	e7d6      	b.n	80100da <_free_r+0x22>
 801012c:	6820      	ldr	r0, [r4, #0]
 801012e:	1821      	adds	r1, r4, r0
 8010130:	428b      	cmp	r3, r1
 8010132:	bf04      	itt	eq
 8010134:	6819      	ldreq	r1, [r3, #0]
 8010136:	685b      	ldreq	r3, [r3, #4]
 8010138:	6063      	str	r3, [r4, #4]
 801013a:	bf04      	itt	eq
 801013c:	1809      	addeq	r1, r1, r0
 801013e:	6021      	streq	r1, [r4, #0]
 8010140:	6054      	str	r4, [r2, #4]
 8010142:	e7ca      	b.n	80100da <_free_r+0x22>
 8010144:	bd38      	pop	{r3, r4, r5, pc}
 8010146:	bf00      	nop
 8010148:	200093b4 	.word	0x200093b4

0801014c <__sflush_r>:
 801014c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010154:	0716      	lsls	r6, r2, #28
 8010156:	4605      	mov	r5, r0
 8010158:	460c      	mov	r4, r1
 801015a:	d454      	bmi.n	8010206 <__sflush_r+0xba>
 801015c:	684b      	ldr	r3, [r1, #4]
 801015e:	2b00      	cmp	r3, #0
 8010160:	dc02      	bgt.n	8010168 <__sflush_r+0x1c>
 8010162:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010164:	2b00      	cmp	r3, #0
 8010166:	dd48      	ble.n	80101fa <__sflush_r+0xae>
 8010168:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801016a:	2e00      	cmp	r6, #0
 801016c:	d045      	beq.n	80101fa <__sflush_r+0xae>
 801016e:	2300      	movs	r3, #0
 8010170:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010174:	682f      	ldr	r7, [r5, #0]
 8010176:	6a21      	ldr	r1, [r4, #32]
 8010178:	602b      	str	r3, [r5, #0]
 801017a:	d030      	beq.n	80101de <__sflush_r+0x92>
 801017c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801017e:	89a3      	ldrh	r3, [r4, #12]
 8010180:	0759      	lsls	r1, r3, #29
 8010182:	d505      	bpl.n	8010190 <__sflush_r+0x44>
 8010184:	6863      	ldr	r3, [r4, #4]
 8010186:	1ad2      	subs	r2, r2, r3
 8010188:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801018a:	b10b      	cbz	r3, 8010190 <__sflush_r+0x44>
 801018c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801018e:	1ad2      	subs	r2, r2, r3
 8010190:	2300      	movs	r3, #0
 8010192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010194:	6a21      	ldr	r1, [r4, #32]
 8010196:	4628      	mov	r0, r5
 8010198:	47b0      	blx	r6
 801019a:	1c43      	adds	r3, r0, #1
 801019c:	89a3      	ldrh	r3, [r4, #12]
 801019e:	d106      	bne.n	80101ae <__sflush_r+0x62>
 80101a0:	6829      	ldr	r1, [r5, #0]
 80101a2:	291d      	cmp	r1, #29
 80101a4:	d82b      	bhi.n	80101fe <__sflush_r+0xb2>
 80101a6:	4a2a      	ldr	r2, [pc, #168]	@ (8010250 <__sflush_r+0x104>)
 80101a8:	410a      	asrs	r2, r1
 80101aa:	07d6      	lsls	r6, r2, #31
 80101ac:	d427      	bmi.n	80101fe <__sflush_r+0xb2>
 80101ae:	2200      	movs	r2, #0
 80101b0:	6062      	str	r2, [r4, #4]
 80101b2:	04d9      	lsls	r1, r3, #19
 80101b4:	6922      	ldr	r2, [r4, #16]
 80101b6:	6022      	str	r2, [r4, #0]
 80101b8:	d504      	bpl.n	80101c4 <__sflush_r+0x78>
 80101ba:	1c42      	adds	r2, r0, #1
 80101bc:	d101      	bne.n	80101c2 <__sflush_r+0x76>
 80101be:	682b      	ldr	r3, [r5, #0]
 80101c0:	b903      	cbnz	r3, 80101c4 <__sflush_r+0x78>
 80101c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80101c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101c6:	602f      	str	r7, [r5, #0]
 80101c8:	b1b9      	cbz	r1, 80101fa <__sflush_r+0xae>
 80101ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101ce:	4299      	cmp	r1, r3
 80101d0:	d002      	beq.n	80101d8 <__sflush_r+0x8c>
 80101d2:	4628      	mov	r0, r5
 80101d4:	f7ff ff70 	bl	80100b8 <_free_r>
 80101d8:	2300      	movs	r3, #0
 80101da:	6363      	str	r3, [r4, #52]	@ 0x34
 80101dc:	e00d      	b.n	80101fa <__sflush_r+0xae>
 80101de:	2301      	movs	r3, #1
 80101e0:	4628      	mov	r0, r5
 80101e2:	47b0      	blx	r6
 80101e4:	4602      	mov	r2, r0
 80101e6:	1c50      	adds	r0, r2, #1
 80101e8:	d1c9      	bne.n	801017e <__sflush_r+0x32>
 80101ea:	682b      	ldr	r3, [r5, #0]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d0c6      	beq.n	801017e <__sflush_r+0x32>
 80101f0:	2b1d      	cmp	r3, #29
 80101f2:	d001      	beq.n	80101f8 <__sflush_r+0xac>
 80101f4:	2b16      	cmp	r3, #22
 80101f6:	d11e      	bne.n	8010236 <__sflush_r+0xea>
 80101f8:	602f      	str	r7, [r5, #0]
 80101fa:	2000      	movs	r0, #0
 80101fc:	e022      	b.n	8010244 <__sflush_r+0xf8>
 80101fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010202:	b21b      	sxth	r3, r3
 8010204:	e01b      	b.n	801023e <__sflush_r+0xf2>
 8010206:	690f      	ldr	r7, [r1, #16]
 8010208:	2f00      	cmp	r7, #0
 801020a:	d0f6      	beq.n	80101fa <__sflush_r+0xae>
 801020c:	0793      	lsls	r3, r2, #30
 801020e:	680e      	ldr	r6, [r1, #0]
 8010210:	bf08      	it	eq
 8010212:	694b      	ldreq	r3, [r1, #20]
 8010214:	600f      	str	r7, [r1, #0]
 8010216:	bf18      	it	ne
 8010218:	2300      	movne	r3, #0
 801021a:	eba6 0807 	sub.w	r8, r6, r7
 801021e:	608b      	str	r3, [r1, #8]
 8010220:	f1b8 0f00 	cmp.w	r8, #0
 8010224:	dde9      	ble.n	80101fa <__sflush_r+0xae>
 8010226:	6a21      	ldr	r1, [r4, #32]
 8010228:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801022a:	4643      	mov	r3, r8
 801022c:	463a      	mov	r2, r7
 801022e:	4628      	mov	r0, r5
 8010230:	47b0      	blx	r6
 8010232:	2800      	cmp	r0, #0
 8010234:	dc08      	bgt.n	8010248 <__sflush_r+0xfc>
 8010236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801023a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801023e:	81a3      	strh	r3, [r4, #12]
 8010240:	f04f 30ff 	mov.w	r0, #4294967295
 8010244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010248:	4407      	add	r7, r0
 801024a:	eba8 0800 	sub.w	r8, r8, r0
 801024e:	e7e7      	b.n	8010220 <__sflush_r+0xd4>
 8010250:	dfbffffe 	.word	0xdfbffffe

08010254 <_fflush_r>:
 8010254:	b538      	push	{r3, r4, r5, lr}
 8010256:	690b      	ldr	r3, [r1, #16]
 8010258:	4605      	mov	r5, r0
 801025a:	460c      	mov	r4, r1
 801025c:	b913      	cbnz	r3, 8010264 <_fflush_r+0x10>
 801025e:	2500      	movs	r5, #0
 8010260:	4628      	mov	r0, r5
 8010262:	bd38      	pop	{r3, r4, r5, pc}
 8010264:	b118      	cbz	r0, 801026e <_fflush_r+0x1a>
 8010266:	6a03      	ldr	r3, [r0, #32]
 8010268:	b90b      	cbnz	r3, 801026e <_fflush_r+0x1a>
 801026a:	f7ff fdf3 	bl	800fe54 <__sinit>
 801026e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d0f3      	beq.n	801025e <_fflush_r+0xa>
 8010276:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010278:	07d0      	lsls	r0, r2, #31
 801027a:	d404      	bmi.n	8010286 <_fflush_r+0x32>
 801027c:	0599      	lsls	r1, r3, #22
 801027e:	d402      	bmi.n	8010286 <_fflush_r+0x32>
 8010280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010282:	f7ff feea 	bl	801005a <__retarget_lock_acquire_recursive>
 8010286:	4628      	mov	r0, r5
 8010288:	4621      	mov	r1, r4
 801028a:	f7ff ff5f 	bl	801014c <__sflush_r>
 801028e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010290:	07da      	lsls	r2, r3, #31
 8010292:	4605      	mov	r5, r0
 8010294:	d4e4      	bmi.n	8010260 <_fflush_r+0xc>
 8010296:	89a3      	ldrh	r3, [r4, #12]
 8010298:	059b      	lsls	r3, r3, #22
 801029a:	d4e1      	bmi.n	8010260 <_fflush_r+0xc>
 801029c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801029e:	f7ff fedd 	bl	801005c <__retarget_lock_release_recursive>
 80102a2:	e7dd      	b.n	8010260 <_fflush_r+0xc>

080102a4 <fiprintf>:
 80102a4:	b40e      	push	{r1, r2, r3}
 80102a6:	b503      	push	{r0, r1, lr}
 80102a8:	4601      	mov	r1, r0
 80102aa:	ab03      	add	r3, sp, #12
 80102ac:	4805      	ldr	r0, [pc, #20]	@ (80102c4 <fiprintf+0x20>)
 80102ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80102b2:	6800      	ldr	r0, [r0, #0]
 80102b4:	9301      	str	r3, [sp, #4]
 80102b6:	f000 f837 	bl	8010328 <_vfiprintf_r>
 80102ba:	b002      	add	sp, #8
 80102bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80102c0:	b003      	add	sp, #12
 80102c2:	4770      	bx	lr
 80102c4:	2000005c 	.word	0x2000005c

080102c8 <abort>:
 80102c8:	b508      	push	{r3, lr}
 80102ca:	2006      	movs	r0, #6
 80102cc:	f000 fb8e 	bl	80109ec <raise>
 80102d0:	2001      	movs	r0, #1
 80102d2:	f7f1 fb9d 	bl	8001a10 <_exit>

080102d6 <__sfputc_r>:
 80102d6:	6893      	ldr	r3, [r2, #8]
 80102d8:	3b01      	subs	r3, #1
 80102da:	2b00      	cmp	r3, #0
 80102dc:	b410      	push	{r4}
 80102de:	6093      	str	r3, [r2, #8]
 80102e0:	da08      	bge.n	80102f4 <__sfputc_r+0x1e>
 80102e2:	6994      	ldr	r4, [r2, #24]
 80102e4:	42a3      	cmp	r3, r4
 80102e6:	db01      	blt.n	80102ec <__sfputc_r+0x16>
 80102e8:	290a      	cmp	r1, #10
 80102ea:	d103      	bne.n	80102f4 <__sfputc_r+0x1e>
 80102ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102f0:	f000 bac0 	b.w	8010874 <__swbuf_r>
 80102f4:	6813      	ldr	r3, [r2, #0]
 80102f6:	1c58      	adds	r0, r3, #1
 80102f8:	6010      	str	r0, [r2, #0]
 80102fa:	7019      	strb	r1, [r3, #0]
 80102fc:	4608      	mov	r0, r1
 80102fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010302:	4770      	bx	lr

08010304 <__sfputs_r>:
 8010304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010306:	4606      	mov	r6, r0
 8010308:	460f      	mov	r7, r1
 801030a:	4614      	mov	r4, r2
 801030c:	18d5      	adds	r5, r2, r3
 801030e:	42ac      	cmp	r4, r5
 8010310:	d101      	bne.n	8010316 <__sfputs_r+0x12>
 8010312:	2000      	movs	r0, #0
 8010314:	e007      	b.n	8010326 <__sfputs_r+0x22>
 8010316:	f814 1b01 	ldrb.w	r1, [r4], #1
 801031a:	463a      	mov	r2, r7
 801031c:	4630      	mov	r0, r6
 801031e:	f7ff ffda 	bl	80102d6 <__sfputc_r>
 8010322:	1c43      	adds	r3, r0, #1
 8010324:	d1f3      	bne.n	801030e <__sfputs_r+0xa>
 8010326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010328 <_vfiprintf_r>:
 8010328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801032c:	460d      	mov	r5, r1
 801032e:	b09d      	sub	sp, #116	@ 0x74
 8010330:	4614      	mov	r4, r2
 8010332:	4698      	mov	r8, r3
 8010334:	4606      	mov	r6, r0
 8010336:	b118      	cbz	r0, 8010340 <_vfiprintf_r+0x18>
 8010338:	6a03      	ldr	r3, [r0, #32]
 801033a:	b90b      	cbnz	r3, 8010340 <_vfiprintf_r+0x18>
 801033c:	f7ff fd8a 	bl	800fe54 <__sinit>
 8010340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010342:	07d9      	lsls	r1, r3, #31
 8010344:	d405      	bmi.n	8010352 <_vfiprintf_r+0x2a>
 8010346:	89ab      	ldrh	r3, [r5, #12]
 8010348:	059a      	lsls	r2, r3, #22
 801034a:	d402      	bmi.n	8010352 <_vfiprintf_r+0x2a>
 801034c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801034e:	f7ff fe84 	bl	801005a <__retarget_lock_acquire_recursive>
 8010352:	89ab      	ldrh	r3, [r5, #12]
 8010354:	071b      	lsls	r3, r3, #28
 8010356:	d501      	bpl.n	801035c <_vfiprintf_r+0x34>
 8010358:	692b      	ldr	r3, [r5, #16]
 801035a:	b99b      	cbnz	r3, 8010384 <_vfiprintf_r+0x5c>
 801035c:	4629      	mov	r1, r5
 801035e:	4630      	mov	r0, r6
 8010360:	f000 fac6 	bl	80108f0 <__swsetup_r>
 8010364:	b170      	cbz	r0, 8010384 <_vfiprintf_r+0x5c>
 8010366:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010368:	07dc      	lsls	r4, r3, #31
 801036a:	d504      	bpl.n	8010376 <_vfiprintf_r+0x4e>
 801036c:	f04f 30ff 	mov.w	r0, #4294967295
 8010370:	b01d      	add	sp, #116	@ 0x74
 8010372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010376:	89ab      	ldrh	r3, [r5, #12]
 8010378:	0598      	lsls	r0, r3, #22
 801037a:	d4f7      	bmi.n	801036c <_vfiprintf_r+0x44>
 801037c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801037e:	f7ff fe6d 	bl	801005c <__retarget_lock_release_recursive>
 8010382:	e7f3      	b.n	801036c <_vfiprintf_r+0x44>
 8010384:	2300      	movs	r3, #0
 8010386:	9309      	str	r3, [sp, #36]	@ 0x24
 8010388:	2320      	movs	r3, #32
 801038a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801038e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010392:	2330      	movs	r3, #48	@ 0x30
 8010394:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010544 <_vfiprintf_r+0x21c>
 8010398:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801039c:	f04f 0901 	mov.w	r9, #1
 80103a0:	4623      	mov	r3, r4
 80103a2:	469a      	mov	sl, r3
 80103a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103a8:	b10a      	cbz	r2, 80103ae <_vfiprintf_r+0x86>
 80103aa:	2a25      	cmp	r2, #37	@ 0x25
 80103ac:	d1f9      	bne.n	80103a2 <_vfiprintf_r+0x7a>
 80103ae:	ebba 0b04 	subs.w	fp, sl, r4
 80103b2:	d00b      	beq.n	80103cc <_vfiprintf_r+0xa4>
 80103b4:	465b      	mov	r3, fp
 80103b6:	4622      	mov	r2, r4
 80103b8:	4629      	mov	r1, r5
 80103ba:	4630      	mov	r0, r6
 80103bc:	f7ff ffa2 	bl	8010304 <__sfputs_r>
 80103c0:	3001      	adds	r0, #1
 80103c2:	f000 80a7 	beq.w	8010514 <_vfiprintf_r+0x1ec>
 80103c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103c8:	445a      	add	r2, fp
 80103ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80103cc:	f89a 3000 	ldrb.w	r3, [sl]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	f000 809f 	beq.w	8010514 <_vfiprintf_r+0x1ec>
 80103d6:	2300      	movs	r3, #0
 80103d8:	f04f 32ff 	mov.w	r2, #4294967295
 80103dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103e0:	f10a 0a01 	add.w	sl, sl, #1
 80103e4:	9304      	str	r3, [sp, #16]
 80103e6:	9307      	str	r3, [sp, #28]
 80103e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80103ee:	4654      	mov	r4, sl
 80103f0:	2205      	movs	r2, #5
 80103f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103f6:	4853      	ldr	r0, [pc, #332]	@ (8010544 <_vfiprintf_r+0x21c>)
 80103f8:	f7ef feea 	bl	80001d0 <memchr>
 80103fc:	9a04      	ldr	r2, [sp, #16]
 80103fe:	b9d8      	cbnz	r0, 8010438 <_vfiprintf_r+0x110>
 8010400:	06d1      	lsls	r1, r2, #27
 8010402:	bf44      	itt	mi
 8010404:	2320      	movmi	r3, #32
 8010406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801040a:	0713      	lsls	r3, r2, #28
 801040c:	bf44      	itt	mi
 801040e:	232b      	movmi	r3, #43	@ 0x2b
 8010410:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010414:	f89a 3000 	ldrb.w	r3, [sl]
 8010418:	2b2a      	cmp	r3, #42	@ 0x2a
 801041a:	d015      	beq.n	8010448 <_vfiprintf_r+0x120>
 801041c:	9a07      	ldr	r2, [sp, #28]
 801041e:	4654      	mov	r4, sl
 8010420:	2000      	movs	r0, #0
 8010422:	f04f 0c0a 	mov.w	ip, #10
 8010426:	4621      	mov	r1, r4
 8010428:	f811 3b01 	ldrb.w	r3, [r1], #1
 801042c:	3b30      	subs	r3, #48	@ 0x30
 801042e:	2b09      	cmp	r3, #9
 8010430:	d94b      	bls.n	80104ca <_vfiprintf_r+0x1a2>
 8010432:	b1b0      	cbz	r0, 8010462 <_vfiprintf_r+0x13a>
 8010434:	9207      	str	r2, [sp, #28]
 8010436:	e014      	b.n	8010462 <_vfiprintf_r+0x13a>
 8010438:	eba0 0308 	sub.w	r3, r0, r8
 801043c:	fa09 f303 	lsl.w	r3, r9, r3
 8010440:	4313      	orrs	r3, r2
 8010442:	9304      	str	r3, [sp, #16]
 8010444:	46a2      	mov	sl, r4
 8010446:	e7d2      	b.n	80103ee <_vfiprintf_r+0xc6>
 8010448:	9b03      	ldr	r3, [sp, #12]
 801044a:	1d19      	adds	r1, r3, #4
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	9103      	str	r1, [sp, #12]
 8010450:	2b00      	cmp	r3, #0
 8010452:	bfbb      	ittet	lt
 8010454:	425b      	neglt	r3, r3
 8010456:	f042 0202 	orrlt.w	r2, r2, #2
 801045a:	9307      	strge	r3, [sp, #28]
 801045c:	9307      	strlt	r3, [sp, #28]
 801045e:	bfb8      	it	lt
 8010460:	9204      	strlt	r2, [sp, #16]
 8010462:	7823      	ldrb	r3, [r4, #0]
 8010464:	2b2e      	cmp	r3, #46	@ 0x2e
 8010466:	d10a      	bne.n	801047e <_vfiprintf_r+0x156>
 8010468:	7863      	ldrb	r3, [r4, #1]
 801046a:	2b2a      	cmp	r3, #42	@ 0x2a
 801046c:	d132      	bne.n	80104d4 <_vfiprintf_r+0x1ac>
 801046e:	9b03      	ldr	r3, [sp, #12]
 8010470:	1d1a      	adds	r2, r3, #4
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	9203      	str	r2, [sp, #12]
 8010476:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801047a:	3402      	adds	r4, #2
 801047c:	9305      	str	r3, [sp, #20]
 801047e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010554 <_vfiprintf_r+0x22c>
 8010482:	7821      	ldrb	r1, [r4, #0]
 8010484:	2203      	movs	r2, #3
 8010486:	4650      	mov	r0, sl
 8010488:	f7ef fea2 	bl	80001d0 <memchr>
 801048c:	b138      	cbz	r0, 801049e <_vfiprintf_r+0x176>
 801048e:	9b04      	ldr	r3, [sp, #16]
 8010490:	eba0 000a 	sub.w	r0, r0, sl
 8010494:	2240      	movs	r2, #64	@ 0x40
 8010496:	4082      	lsls	r2, r0
 8010498:	4313      	orrs	r3, r2
 801049a:	3401      	adds	r4, #1
 801049c:	9304      	str	r3, [sp, #16]
 801049e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104a2:	4829      	ldr	r0, [pc, #164]	@ (8010548 <_vfiprintf_r+0x220>)
 80104a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80104a8:	2206      	movs	r2, #6
 80104aa:	f7ef fe91 	bl	80001d0 <memchr>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	d03f      	beq.n	8010532 <_vfiprintf_r+0x20a>
 80104b2:	4b26      	ldr	r3, [pc, #152]	@ (801054c <_vfiprintf_r+0x224>)
 80104b4:	bb1b      	cbnz	r3, 80104fe <_vfiprintf_r+0x1d6>
 80104b6:	9b03      	ldr	r3, [sp, #12]
 80104b8:	3307      	adds	r3, #7
 80104ba:	f023 0307 	bic.w	r3, r3, #7
 80104be:	3308      	adds	r3, #8
 80104c0:	9303      	str	r3, [sp, #12]
 80104c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104c4:	443b      	add	r3, r7
 80104c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80104c8:	e76a      	b.n	80103a0 <_vfiprintf_r+0x78>
 80104ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80104ce:	460c      	mov	r4, r1
 80104d0:	2001      	movs	r0, #1
 80104d2:	e7a8      	b.n	8010426 <_vfiprintf_r+0xfe>
 80104d4:	2300      	movs	r3, #0
 80104d6:	3401      	adds	r4, #1
 80104d8:	9305      	str	r3, [sp, #20]
 80104da:	4619      	mov	r1, r3
 80104dc:	f04f 0c0a 	mov.w	ip, #10
 80104e0:	4620      	mov	r0, r4
 80104e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104e6:	3a30      	subs	r2, #48	@ 0x30
 80104e8:	2a09      	cmp	r2, #9
 80104ea:	d903      	bls.n	80104f4 <_vfiprintf_r+0x1cc>
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d0c6      	beq.n	801047e <_vfiprintf_r+0x156>
 80104f0:	9105      	str	r1, [sp, #20]
 80104f2:	e7c4      	b.n	801047e <_vfiprintf_r+0x156>
 80104f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80104f8:	4604      	mov	r4, r0
 80104fa:	2301      	movs	r3, #1
 80104fc:	e7f0      	b.n	80104e0 <_vfiprintf_r+0x1b8>
 80104fe:	ab03      	add	r3, sp, #12
 8010500:	9300      	str	r3, [sp, #0]
 8010502:	462a      	mov	r2, r5
 8010504:	4b12      	ldr	r3, [pc, #72]	@ (8010550 <_vfiprintf_r+0x228>)
 8010506:	a904      	add	r1, sp, #16
 8010508:	4630      	mov	r0, r6
 801050a:	f3af 8000 	nop.w
 801050e:	4607      	mov	r7, r0
 8010510:	1c78      	adds	r0, r7, #1
 8010512:	d1d6      	bne.n	80104c2 <_vfiprintf_r+0x19a>
 8010514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010516:	07d9      	lsls	r1, r3, #31
 8010518:	d405      	bmi.n	8010526 <_vfiprintf_r+0x1fe>
 801051a:	89ab      	ldrh	r3, [r5, #12]
 801051c:	059a      	lsls	r2, r3, #22
 801051e:	d402      	bmi.n	8010526 <_vfiprintf_r+0x1fe>
 8010520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010522:	f7ff fd9b 	bl	801005c <__retarget_lock_release_recursive>
 8010526:	89ab      	ldrh	r3, [r5, #12]
 8010528:	065b      	lsls	r3, r3, #25
 801052a:	f53f af1f 	bmi.w	801036c <_vfiprintf_r+0x44>
 801052e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010530:	e71e      	b.n	8010370 <_vfiprintf_r+0x48>
 8010532:	ab03      	add	r3, sp, #12
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	462a      	mov	r2, r5
 8010538:	4b05      	ldr	r3, [pc, #20]	@ (8010550 <_vfiprintf_r+0x228>)
 801053a:	a904      	add	r1, sp, #16
 801053c:	4630      	mov	r0, r6
 801053e:	f000 f879 	bl	8010634 <_printf_i>
 8010542:	e7e4      	b.n	801050e <_vfiprintf_r+0x1e6>
 8010544:	08010d8b 	.word	0x08010d8b
 8010548:	08010d95 	.word	0x08010d95
 801054c:	00000000 	.word	0x00000000
 8010550:	08010305 	.word	0x08010305
 8010554:	08010d91 	.word	0x08010d91

08010558 <_printf_common>:
 8010558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801055c:	4616      	mov	r6, r2
 801055e:	4698      	mov	r8, r3
 8010560:	688a      	ldr	r2, [r1, #8]
 8010562:	690b      	ldr	r3, [r1, #16]
 8010564:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010568:	4293      	cmp	r3, r2
 801056a:	bfb8      	it	lt
 801056c:	4613      	movlt	r3, r2
 801056e:	6033      	str	r3, [r6, #0]
 8010570:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010574:	4607      	mov	r7, r0
 8010576:	460c      	mov	r4, r1
 8010578:	b10a      	cbz	r2, 801057e <_printf_common+0x26>
 801057a:	3301      	adds	r3, #1
 801057c:	6033      	str	r3, [r6, #0]
 801057e:	6823      	ldr	r3, [r4, #0]
 8010580:	0699      	lsls	r1, r3, #26
 8010582:	bf42      	ittt	mi
 8010584:	6833      	ldrmi	r3, [r6, #0]
 8010586:	3302      	addmi	r3, #2
 8010588:	6033      	strmi	r3, [r6, #0]
 801058a:	6825      	ldr	r5, [r4, #0]
 801058c:	f015 0506 	ands.w	r5, r5, #6
 8010590:	d106      	bne.n	80105a0 <_printf_common+0x48>
 8010592:	f104 0a19 	add.w	sl, r4, #25
 8010596:	68e3      	ldr	r3, [r4, #12]
 8010598:	6832      	ldr	r2, [r6, #0]
 801059a:	1a9b      	subs	r3, r3, r2
 801059c:	42ab      	cmp	r3, r5
 801059e:	dc26      	bgt.n	80105ee <_printf_common+0x96>
 80105a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80105a4:	6822      	ldr	r2, [r4, #0]
 80105a6:	3b00      	subs	r3, #0
 80105a8:	bf18      	it	ne
 80105aa:	2301      	movne	r3, #1
 80105ac:	0692      	lsls	r2, r2, #26
 80105ae:	d42b      	bmi.n	8010608 <_printf_common+0xb0>
 80105b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80105b4:	4641      	mov	r1, r8
 80105b6:	4638      	mov	r0, r7
 80105b8:	47c8      	blx	r9
 80105ba:	3001      	adds	r0, #1
 80105bc:	d01e      	beq.n	80105fc <_printf_common+0xa4>
 80105be:	6823      	ldr	r3, [r4, #0]
 80105c0:	6922      	ldr	r2, [r4, #16]
 80105c2:	f003 0306 	and.w	r3, r3, #6
 80105c6:	2b04      	cmp	r3, #4
 80105c8:	bf02      	ittt	eq
 80105ca:	68e5      	ldreq	r5, [r4, #12]
 80105cc:	6833      	ldreq	r3, [r6, #0]
 80105ce:	1aed      	subeq	r5, r5, r3
 80105d0:	68a3      	ldr	r3, [r4, #8]
 80105d2:	bf0c      	ite	eq
 80105d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105d8:	2500      	movne	r5, #0
 80105da:	4293      	cmp	r3, r2
 80105dc:	bfc4      	itt	gt
 80105de:	1a9b      	subgt	r3, r3, r2
 80105e0:	18ed      	addgt	r5, r5, r3
 80105e2:	2600      	movs	r6, #0
 80105e4:	341a      	adds	r4, #26
 80105e6:	42b5      	cmp	r5, r6
 80105e8:	d11a      	bne.n	8010620 <_printf_common+0xc8>
 80105ea:	2000      	movs	r0, #0
 80105ec:	e008      	b.n	8010600 <_printf_common+0xa8>
 80105ee:	2301      	movs	r3, #1
 80105f0:	4652      	mov	r2, sl
 80105f2:	4641      	mov	r1, r8
 80105f4:	4638      	mov	r0, r7
 80105f6:	47c8      	blx	r9
 80105f8:	3001      	adds	r0, #1
 80105fa:	d103      	bne.n	8010604 <_printf_common+0xac>
 80105fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010604:	3501      	adds	r5, #1
 8010606:	e7c6      	b.n	8010596 <_printf_common+0x3e>
 8010608:	18e1      	adds	r1, r4, r3
 801060a:	1c5a      	adds	r2, r3, #1
 801060c:	2030      	movs	r0, #48	@ 0x30
 801060e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010612:	4422      	add	r2, r4
 8010614:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010618:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801061c:	3302      	adds	r3, #2
 801061e:	e7c7      	b.n	80105b0 <_printf_common+0x58>
 8010620:	2301      	movs	r3, #1
 8010622:	4622      	mov	r2, r4
 8010624:	4641      	mov	r1, r8
 8010626:	4638      	mov	r0, r7
 8010628:	47c8      	blx	r9
 801062a:	3001      	adds	r0, #1
 801062c:	d0e6      	beq.n	80105fc <_printf_common+0xa4>
 801062e:	3601      	adds	r6, #1
 8010630:	e7d9      	b.n	80105e6 <_printf_common+0x8e>
	...

08010634 <_printf_i>:
 8010634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010638:	7e0f      	ldrb	r7, [r1, #24]
 801063a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801063c:	2f78      	cmp	r7, #120	@ 0x78
 801063e:	4691      	mov	r9, r2
 8010640:	4680      	mov	r8, r0
 8010642:	460c      	mov	r4, r1
 8010644:	469a      	mov	sl, r3
 8010646:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801064a:	d807      	bhi.n	801065c <_printf_i+0x28>
 801064c:	2f62      	cmp	r7, #98	@ 0x62
 801064e:	d80a      	bhi.n	8010666 <_printf_i+0x32>
 8010650:	2f00      	cmp	r7, #0
 8010652:	f000 80d2 	beq.w	80107fa <_printf_i+0x1c6>
 8010656:	2f58      	cmp	r7, #88	@ 0x58
 8010658:	f000 80b9 	beq.w	80107ce <_printf_i+0x19a>
 801065c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010660:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010664:	e03a      	b.n	80106dc <_printf_i+0xa8>
 8010666:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801066a:	2b15      	cmp	r3, #21
 801066c:	d8f6      	bhi.n	801065c <_printf_i+0x28>
 801066e:	a101      	add	r1, pc, #4	@ (adr r1, 8010674 <_printf_i+0x40>)
 8010670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010674:	080106cd 	.word	0x080106cd
 8010678:	080106e1 	.word	0x080106e1
 801067c:	0801065d 	.word	0x0801065d
 8010680:	0801065d 	.word	0x0801065d
 8010684:	0801065d 	.word	0x0801065d
 8010688:	0801065d 	.word	0x0801065d
 801068c:	080106e1 	.word	0x080106e1
 8010690:	0801065d 	.word	0x0801065d
 8010694:	0801065d 	.word	0x0801065d
 8010698:	0801065d 	.word	0x0801065d
 801069c:	0801065d 	.word	0x0801065d
 80106a0:	080107e1 	.word	0x080107e1
 80106a4:	0801070b 	.word	0x0801070b
 80106a8:	0801079b 	.word	0x0801079b
 80106ac:	0801065d 	.word	0x0801065d
 80106b0:	0801065d 	.word	0x0801065d
 80106b4:	08010803 	.word	0x08010803
 80106b8:	0801065d 	.word	0x0801065d
 80106bc:	0801070b 	.word	0x0801070b
 80106c0:	0801065d 	.word	0x0801065d
 80106c4:	0801065d 	.word	0x0801065d
 80106c8:	080107a3 	.word	0x080107a3
 80106cc:	6833      	ldr	r3, [r6, #0]
 80106ce:	1d1a      	adds	r2, r3, #4
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	6032      	str	r2, [r6, #0]
 80106d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80106d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80106dc:	2301      	movs	r3, #1
 80106de:	e09d      	b.n	801081c <_printf_i+0x1e8>
 80106e0:	6833      	ldr	r3, [r6, #0]
 80106e2:	6820      	ldr	r0, [r4, #0]
 80106e4:	1d19      	adds	r1, r3, #4
 80106e6:	6031      	str	r1, [r6, #0]
 80106e8:	0606      	lsls	r6, r0, #24
 80106ea:	d501      	bpl.n	80106f0 <_printf_i+0xbc>
 80106ec:	681d      	ldr	r5, [r3, #0]
 80106ee:	e003      	b.n	80106f8 <_printf_i+0xc4>
 80106f0:	0645      	lsls	r5, r0, #25
 80106f2:	d5fb      	bpl.n	80106ec <_printf_i+0xb8>
 80106f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80106f8:	2d00      	cmp	r5, #0
 80106fa:	da03      	bge.n	8010704 <_printf_i+0xd0>
 80106fc:	232d      	movs	r3, #45	@ 0x2d
 80106fe:	426d      	negs	r5, r5
 8010700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010704:	4859      	ldr	r0, [pc, #356]	@ (801086c <_printf_i+0x238>)
 8010706:	230a      	movs	r3, #10
 8010708:	e011      	b.n	801072e <_printf_i+0xfa>
 801070a:	6821      	ldr	r1, [r4, #0]
 801070c:	6833      	ldr	r3, [r6, #0]
 801070e:	0608      	lsls	r0, r1, #24
 8010710:	f853 5b04 	ldr.w	r5, [r3], #4
 8010714:	d402      	bmi.n	801071c <_printf_i+0xe8>
 8010716:	0649      	lsls	r1, r1, #25
 8010718:	bf48      	it	mi
 801071a:	b2ad      	uxthmi	r5, r5
 801071c:	2f6f      	cmp	r7, #111	@ 0x6f
 801071e:	4853      	ldr	r0, [pc, #332]	@ (801086c <_printf_i+0x238>)
 8010720:	6033      	str	r3, [r6, #0]
 8010722:	bf14      	ite	ne
 8010724:	230a      	movne	r3, #10
 8010726:	2308      	moveq	r3, #8
 8010728:	2100      	movs	r1, #0
 801072a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801072e:	6866      	ldr	r6, [r4, #4]
 8010730:	60a6      	str	r6, [r4, #8]
 8010732:	2e00      	cmp	r6, #0
 8010734:	bfa2      	ittt	ge
 8010736:	6821      	ldrge	r1, [r4, #0]
 8010738:	f021 0104 	bicge.w	r1, r1, #4
 801073c:	6021      	strge	r1, [r4, #0]
 801073e:	b90d      	cbnz	r5, 8010744 <_printf_i+0x110>
 8010740:	2e00      	cmp	r6, #0
 8010742:	d04b      	beq.n	80107dc <_printf_i+0x1a8>
 8010744:	4616      	mov	r6, r2
 8010746:	fbb5 f1f3 	udiv	r1, r5, r3
 801074a:	fb03 5711 	mls	r7, r3, r1, r5
 801074e:	5dc7      	ldrb	r7, [r0, r7]
 8010750:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010754:	462f      	mov	r7, r5
 8010756:	42bb      	cmp	r3, r7
 8010758:	460d      	mov	r5, r1
 801075a:	d9f4      	bls.n	8010746 <_printf_i+0x112>
 801075c:	2b08      	cmp	r3, #8
 801075e:	d10b      	bne.n	8010778 <_printf_i+0x144>
 8010760:	6823      	ldr	r3, [r4, #0]
 8010762:	07df      	lsls	r7, r3, #31
 8010764:	d508      	bpl.n	8010778 <_printf_i+0x144>
 8010766:	6923      	ldr	r3, [r4, #16]
 8010768:	6861      	ldr	r1, [r4, #4]
 801076a:	4299      	cmp	r1, r3
 801076c:	bfde      	ittt	le
 801076e:	2330      	movle	r3, #48	@ 0x30
 8010770:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010774:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010778:	1b92      	subs	r2, r2, r6
 801077a:	6122      	str	r2, [r4, #16]
 801077c:	f8cd a000 	str.w	sl, [sp]
 8010780:	464b      	mov	r3, r9
 8010782:	aa03      	add	r2, sp, #12
 8010784:	4621      	mov	r1, r4
 8010786:	4640      	mov	r0, r8
 8010788:	f7ff fee6 	bl	8010558 <_printf_common>
 801078c:	3001      	adds	r0, #1
 801078e:	d14a      	bne.n	8010826 <_printf_i+0x1f2>
 8010790:	f04f 30ff 	mov.w	r0, #4294967295
 8010794:	b004      	add	sp, #16
 8010796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	f043 0320 	orr.w	r3, r3, #32
 80107a0:	6023      	str	r3, [r4, #0]
 80107a2:	4833      	ldr	r0, [pc, #204]	@ (8010870 <_printf_i+0x23c>)
 80107a4:	2778      	movs	r7, #120	@ 0x78
 80107a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80107aa:	6823      	ldr	r3, [r4, #0]
 80107ac:	6831      	ldr	r1, [r6, #0]
 80107ae:	061f      	lsls	r7, r3, #24
 80107b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80107b4:	d402      	bmi.n	80107bc <_printf_i+0x188>
 80107b6:	065f      	lsls	r7, r3, #25
 80107b8:	bf48      	it	mi
 80107ba:	b2ad      	uxthmi	r5, r5
 80107bc:	6031      	str	r1, [r6, #0]
 80107be:	07d9      	lsls	r1, r3, #31
 80107c0:	bf44      	itt	mi
 80107c2:	f043 0320 	orrmi.w	r3, r3, #32
 80107c6:	6023      	strmi	r3, [r4, #0]
 80107c8:	b11d      	cbz	r5, 80107d2 <_printf_i+0x19e>
 80107ca:	2310      	movs	r3, #16
 80107cc:	e7ac      	b.n	8010728 <_printf_i+0xf4>
 80107ce:	4827      	ldr	r0, [pc, #156]	@ (801086c <_printf_i+0x238>)
 80107d0:	e7e9      	b.n	80107a6 <_printf_i+0x172>
 80107d2:	6823      	ldr	r3, [r4, #0]
 80107d4:	f023 0320 	bic.w	r3, r3, #32
 80107d8:	6023      	str	r3, [r4, #0]
 80107da:	e7f6      	b.n	80107ca <_printf_i+0x196>
 80107dc:	4616      	mov	r6, r2
 80107de:	e7bd      	b.n	801075c <_printf_i+0x128>
 80107e0:	6833      	ldr	r3, [r6, #0]
 80107e2:	6825      	ldr	r5, [r4, #0]
 80107e4:	6961      	ldr	r1, [r4, #20]
 80107e6:	1d18      	adds	r0, r3, #4
 80107e8:	6030      	str	r0, [r6, #0]
 80107ea:	062e      	lsls	r6, r5, #24
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	d501      	bpl.n	80107f4 <_printf_i+0x1c0>
 80107f0:	6019      	str	r1, [r3, #0]
 80107f2:	e002      	b.n	80107fa <_printf_i+0x1c6>
 80107f4:	0668      	lsls	r0, r5, #25
 80107f6:	d5fb      	bpl.n	80107f0 <_printf_i+0x1bc>
 80107f8:	8019      	strh	r1, [r3, #0]
 80107fa:	2300      	movs	r3, #0
 80107fc:	6123      	str	r3, [r4, #16]
 80107fe:	4616      	mov	r6, r2
 8010800:	e7bc      	b.n	801077c <_printf_i+0x148>
 8010802:	6833      	ldr	r3, [r6, #0]
 8010804:	1d1a      	adds	r2, r3, #4
 8010806:	6032      	str	r2, [r6, #0]
 8010808:	681e      	ldr	r6, [r3, #0]
 801080a:	6862      	ldr	r2, [r4, #4]
 801080c:	2100      	movs	r1, #0
 801080e:	4630      	mov	r0, r6
 8010810:	f7ef fcde 	bl	80001d0 <memchr>
 8010814:	b108      	cbz	r0, 801081a <_printf_i+0x1e6>
 8010816:	1b80      	subs	r0, r0, r6
 8010818:	6060      	str	r0, [r4, #4]
 801081a:	6863      	ldr	r3, [r4, #4]
 801081c:	6123      	str	r3, [r4, #16]
 801081e:	2300      	movs	r3, #0
 8010820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010824:	e7aa      	b.n	801077c <_printf_i+0x148>
 8010826:	6923      	ldr	r3, [r4, #16]
 8010828:	4632      	mov	r2, r6
 801082a:	4649      	mov	r1, r9
 801082c:	4640      	mov	r0, r8
 801082e:	47d0      	blx	sl
 8010830:	3001      	adds	r0, #1
 8010832:	d0ad      	beq.n	8010790 <_printf_i+0x15c>
 8010834:	6823      	ldr	r3, [r4, #0]
 8010836:	079b      	lsls	r3, r3, #30
 8010838:	d413      	bmi.n	8010862 <_printf_i+0x22e>
 801083a:	68e0      	ldr	r0, [r4, #12]
 801083c:	9b03      	ldr	r3, [sp, #12]
 801083e:	4298      	cmp	r0, r3
 8010840:	bfb8      	it	lt
 8010842:	4618      	movlt	r0, r3
 8010844:	e7a6      	b.n	8010794 <_printf_i+0x160>
 8010846:	2301      	movs	r3, #1
 8010848:	4632      	mov	r2, r6
 801084a:	4649      	mov	r1, r9
 801084c:	4640      	mov	r0, r8
 801084e:	47d0      	blx	sl
 8010850:	3001      	adds	r0, #1
 8010852:	d09d      	beq.n	8010790 <_printf_i+0x15c>
 8010854:	3501      	adds	r5, #1
 8010856:	68e3      	ldr	r3, [r4, #12]
 8010858:	9903      	ldr	r1, [sp, #12]
 801085a:	1a5b      	subs	r3, r3, r1
 801085c:	42ab      	cmp	r3, r5
 801085e:	dcf2      	bgt.n	8010846 <_printf_i+0x212>
 8010860:	e7eb      	b.n	801083a <_printf_i+0x206>
 8010862:	2500      	movs	r5, #0
 8010864:	f104 0619 	add.w	r6, r4, #25
 8010868:	e7f5      	b.n	8010856 <_printf_i+0x222>
 801086a:	bf00      	nop
 801086c:	08010d9c 	.word	0x08010d9c
 8010870:	08010dad 	.word	0x08010dad

08010874 <__swbuf_r>:
 8010874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010876:	460e      	mov	r6, r1
 8010878:	4614      	mov	r4, r2
 801087a:	4605      	mov	r5, r0
 801087c:	b118      	cbz	r0, 8010886 <__swbuf_r+0x12>
 801087e:	6a03      	ldr	r3, [r0, #32]
 8010880:	b90b      	cbnz	r3, 8010886 <__swbuf_r+0x12>
 8010882:	f7ff fae7 	bl	800fe54 <__sinit>
 8010886:	69a3      	ldr	r3, [r4, #24]
 8010888:	60a3      	str	r3, [r4, #8]
 801088a:	89a3      	ldrh	r3, [r4, #12]
 801088c:	071a      	lsls	r2, r3, #28
 801088e:	d501      	bpl.n	8010894 <__swbuf_r+0x20>
 8010890:	6923      	ldr	r3, [r4, #16]
 8010892:	b943      	cbnz	r3, 80108a6 <__swbuf_r+0x32>
 8010894:	4621      	mov	r1, r4
 8010896:	4628      	mov	r0, r5
 8010898:	f000 f82a 	bl	80108f0 <__swsetup_r>
 801089c:	b118      	cbz	r0, 80108a6 <__swbuf_r+0x32>
 801089e:	f04f 37ff 	mov.w	r7, #4294967295
 80108a2:	4638      	mov	r0, r7
 80108a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108a6:	6823      	ldr	r3, [r4, #0]
 80108a8:	6922      	ldr	r2, [r4, #16]
 80108aa:	1a98      	subs	r0, r3, r2
 80108ac:	6963      	ldr	r3, [r4, #20]
 80108ae:	b2f6      	uxtb	r6, r6
 80108b0:	4283      	cmp	r3, r0
 80108b2:	4637      	mov	r7, r6
 80108b4:	dc05      	bgt.n	80108c2 <__swbuf_r+0x4e>
 80108b6:	4621      	mov	r1, r4
 80108b8:	4628      	mov	r0, r5
 80108ba:	f7ff fccb 	bl	8010254 <_fflush_r>
 80108be:	2800      	cmp	r0, #0
 80108c0:	d1ed      	bne.n	801089e <__swbuf_r+0x2a>
 80108c2:	68a3      	ldr	r3, [r4, #8]
 80108c4:	3b01      	subs	r3, #1
 80108c6:	60a3      	str	r3, [r4, #8]
 80108c8:	6823      	ldr	r3, [r4, #0]
 80108ca:	1c5a      	adds	r2, r3, #1
 80108cc:	6022      	str	r2, [r4, #0]
 80108ce:	701e      	strb	r6, [r3, #0]
 80108d0:	6962      	ldr	r2, [r4, #20]
 80108d2:	1c43      	adds	r3, r0, #1
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d004      	beq.n	80108e2 <__swbuf_r+0x6e>
 80108d8:	89a3      	ldrh	r3, [r4, #12]
 80108da:	07db      	lsls	r3, r3, #31
 80108dc:	d5e1      	bpl.n	80108a2 <__swbuf_r+0x2e>
 80108de:	2e0a      	cmp	r6, #10
 80108e0:	d1df      	bne.n	80108a2 <__swbuf_r+0x2e>
 80108e2:	4621      	mov	r1, r4
 80108e4:	4628      	mov	r0, r5
 80108e6:	f7ff fcb5 	bl	8010254 <_fflush_r>
 80108ea:	2800      	cmp	r0, #0
 80108ec:	d0d9      	beq.n	80108a2 <__swbuf_r+0x2e>
 80108ee:	e7d6      	b.n	801089e <__swbuf_r+0x2a>

080108f0 <__swsetup_r>:
 80108f0:	b538      	push	{r3, r4, r5, lr}
 80108f2:	4b29      	ldr	r3, [pc, #164]	@ (8010998 <__swsetup_r+0xa8>)
 80108f4:	4605      	mov	r5, r0
 80108f6:	6818      	ldr	r0, [r3, #0]
 80108f8:	460c      	mov	r4, r1
 80108fa:	b118      	cbz	r0, 8010904 <__swsetup_r+0x14>
 80108fc:	6a03      	ldr	r3, [r0, #32]
 80108fe:	b90b      	cbnz	r3, 8010904 <__swsetup_r+0x14>
 8010900:	f7ff faa8 	bl	800fe54 <__sinit>
 8010904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010908:	0719      	lsls	r1, r3, #28
 801090a:	d422      	bmi.n	8010952 <__swsetup_r+0x62>
 801090c:	06da      	lsls	r2, r3, #27
 801090e:	d407      	bmi.n	8010920 <__swsetup_r+0x30>
 8010910:	2209      	movs	r2, #9
 8010912:	602a      	str	r2, [r5, #0]
 8010914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010918:	81a3      	strh	r3, [r4, #12]
 801091a:	f04f 30ff 	mov.w	r0, #4294967295
 801091e:	e033      	b.n	8010988 <__swsetup_r+0x98>
 8010920:	0758      	lsls	r0, r3, #29
 8010922:	d512      	bpl.n	801094a <__swsetup_r+0x5a>
 8010924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010926:	b141      	cbz	r1, 801093a <__swsetup_r+0x4a>
 8010928:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801092c:	4299      	cmp	r1, r3
 801092e:	d002      	beq.n	8010936 <__swsetup_r+0x46>
 8010930:	4628      	mov	r0, r5
 8010932:	f7ff fbc1 	bl	80100b8 <_free_r>
 8010936:	2300      	movs	r3, #0
 8010938:	6363      	str	r3, [r4, #52]	@ 0x34
 801093a:	89a3      	ldrh	r3, [r4, #12]
 801093c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010940:	81a3      	strh	r3, [r4, #12]
 8010942:	2300      	movs	r3, #0
 8010944:	6063      	str	r3, [r4, #4]
 8010946:	6923      	ldr	r3, [r4, #16]
 8010948:	6023      	str	r3, [r4, #0]
 801094a:	89a3      	ldrh	r3, [r4, #12]
 801094c:	f043 0308 	orr.w	r3, r3, #8
 8010950:	81a3      	strh	r3, [r4, #12]
 8010952:	6923      	ldr	r3, [r4, #16]
 8010954:	b94b      	cbnz	r3, 801096a <__swsetup_r+0x7a>
 8010956:	89a3      	ldrh	r3, [r4, #12]
 8010958:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801095c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010960:	d003      	beq.n	801096a <__swsetup_r+0x7a>
 8010962:	4621      	mov	r1, r4
 8010964:	4628      	mov	r0, r5
 8010966:	f000 f883 	bl	8010a70 <__smakebuf_r>
 801096a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801096e:	f013 0201 	ands.w	r2, r3, #1
 8010972:	d00a      	beq.n	801098a <__swsetup_r+0x9a>
 8010974:	2200      	movs	r2, #0
 8010976:	60a2      	str	r2, [r4, #8]
 8010978:	6962      	ldr	r2, [r4, #20]
 801097a:	4252      	negs	r2, r2
 801097c:	61a2      	str	r2, [r4, #24]
 801097e:	6922      	ldr	r2, [r4, #16]
 8010980:	b942      	cbnz	r2, 8010994 <__swsetup_r+0xa4>
 8010982:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010986:	d1c5      	bne.n	8010914 <__swsetup_r+0x24>
 8010988:	bd38      	pop	{r3, r4, r5, pc}
 801098a:	0799      	lsls	r1, r3, #30
 801098c:	bf58      	it	pl
 801098e:	6962      	ldrpl	r2, [r4, #20]
 8010990:	60a2      	str	r2, [r4, #8]
 8010992:	e7f4      	b.n	801097e <__swsetup_r+0x8e>
 8010994:	2000      	movs	r0, #0
 8010996:	e7f7      	b.n	8010988 <__swsetup_r+0x98>
 8010998:	2000005c 	.word	0x2000005c

0801099c <_raise_r>:
 801099c:	291f      	cmp	r1, #31
 801099e:	b538      	push	{r3, r4, r5, lr}
 80109a0:	4605      	mov	r5, r0
 80109a2:	460c      	mov	r4, r1
 80109a4:	d904      	bls.n	80109b0 <_raise_r+0x14>
 80109a6:	2316      	movs	r3, #22
 80109a8:	6003      	str	r3, [r0, #0]
 80109aa:	f04f 30ff 	mov.w	r0, #4294967295
 80109ae:	bd38      	pop	{r3, r4, r5, pc}
 80109b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80109b2:	b112      	cbz	r2, 80109ba <_raise_r+0x1e>
 80109b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80109b8:	b94b      	cbnz	r3, 80109ce <_raise_r+0x32>
 80109ba:	4628      	mov	r0, r5
 80109bc:	f000 f830 	bl	8010a20 <_getpid_r>
 80109c0:	4622      	mov	r2, r4
 80109c2:	4601      	mov	r1, r0
 80109c4:	4628      	mov	r0, r5
 80109c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109ca:	f000 b817 	b.w	80109fc <_kill_r>
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d00a      	beq.n	80109e8 <_raise_r+0x4c>
 80109d2:	1c59      	adds	r1, r3, #1
 80109d4:	d103      	bne.n	80109de <_raise_r+0x42>
 80109d6:	2316      	movs	r3, #22
 80109d8:	6003      	str	r3, [r0, #0]
 80109da:	2001      	movs	r0, #1
 80109dc:	e7e7      	b.n	80109ae <_raise_r+0x12>
 80109de:	2100      	movs	r1, #0
 80109e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80109e4:	4620      	mov	r0, r4
 80109e6:	4798      	blx	r3
 80109e8:	2000      	movs	r0, #0
 80109ea:	e7e0      	b.n	80109ae <_raise_r+0x12>

080109ec <raise>:
 80109ec:	4b02      	ldr	r3, [pc, #8]	@ (80109f8 <raise+0xc>)
 80109ee:	4601      	mov	r1, r0
 80109f0:	6818      	ldr	r0, [r3, #0]
 80109f2:	f7ff bfd3 	b.w	801099c <_raise_r>
 80109f6:	bf00      	nop
 80109f8:	2000005c 	.word	0x2000005c

080109fc <_kill_r>:
 80109fc:	b538      	push	{r3, r4, r5, lr}
 80109fe:	4d07      	ldr	r5, [pc, #28]	@ (8010a1c <_kill_r+0x20>)
 8010a00:	2300      	movs	r3, #0
 8010a02:	4604      	mov	r4, r0
 8010a04:	4608      	mov	r0, r1
 8010a06:	4611      	mov	r1, r2
 8010a08:	602b      	str	r3, [r5, #0]
 8010a0a:	f7f0 fff1 	bl	80019f0 <_kill>
 8010a0e:	1c43      	adds	r3, r0, #1
 8010a10:	d102      	bne.n	8010a18 <_kill_r+0x1c>
 8010a12:	682b      	ldr	r3, [r5, #0]
 8010a14:	b103      	cbz	r3, 8010a18 <_kill_r+0x1c>
 8010a16:	6023      	str	r3, [r4, #0]
 8010a18:	bd38      	pop	{r3, r4, r5, pc}
 8010a1a:	bf00      	nop
 8010a1c:	200094f4 	.word	0x200094f4

08010a20 <_getpid_r>:
 8010a20:	f7f0 bfde 	b.w	80019e0 <_getpid>

08010a24 <__swhatbuf_r>:
 8010a24:	b570      	push	{r4, r5, r6, lr}
 8010a26:	460c      	mov	r4, r1
 8010a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a2c:	2900      	cmp	r1, #0
 8010a2e:	b096      	sub	sp, #88	@ 0x58
 8010a30:	4615      	mov	r5, r2
 8010a32:	461e      	mov	r6, r3
 8010a34:	da0d      	bge.n	8010a52 <__swhatbuf_r+0x2e>
 8010a36:	89a3      	ldrh	r3, [r4, #12]
 8010a38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010a3c:	f04f 0100 	mov.w	r1, #0
 8010a40:	bf14      	ite	ne
 8010a42:	2340      	movne	r3, #64	@ 0x40
 8010a44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010a48:	2000      	movs	r0, #0
 8010a4a:	6031      	str	r1, [r6, #0]
 8010a4c:	602b      	str	r3, [r5, #0]
 8010a4e:	b016      	add	sp, #88	@ 0x58
 8010a50:	bd70      	pop	{r4, r5, r6, pc}
 8010a52:	466a      	mov	r2, sp
 8010a54:	f000 f848 	bl	8010ae8 <_fstat_r>
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	dbec      	blt.n	8010a36 <__swhatbuf_r+0x12>
 8010a5c:	9901      	ldr	r1, [sp, #4]
 8010a5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010a62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010a66:	4259      	negs	r1, r3
 8010a68:	4159      	adcs	r1, r3
 8010a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a6e:	e7eb      	b.n	8010a48 <__swhatbuf_r+0x24>

08010a70 <__smakebuf_r>:
 8010a70:	898b      	ldrh	r3, [r1, #12]
 8010a72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a74:	079d      	lsls	r5, r3, #30
 8010a76:	4606      	mov	r6, r0
 8010a78:	460c      	mov	r4, r1
 8010a7a:	d507      	bpl.n	8010a8c <__smakebuf_r+0x1c>
 8010a7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010a80:	6023      	str	r3, [r4, #0]
 8010a82:	6123      	str	r3, [r4, #16]
 8010a84:	2301      	movs	r3, #1
 8010a86:	6163      	str	r3, [r4, #20]
 8010a88:	b003      	add	sp, #12
 8010a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a8c:	ab01      	add	r3, sp, #4
 8010a8e:	466a      	mov	r2, sp
 8010a90:	f7ff ffc8 	bl	8010a24 <__swhatbuf_r>
 8010a94:	9f00      	ldr	r7, [sp, #0]
 8010a96:	4605      	mov	r5, r0
 8010a98:	4639      	mov	r1, r7
 8010a9a:	4630      	mov	r0, r6
 8010a9c:	f7ff f884 	bl	800fba8 <_malloc_r>
 8010aa0:	b948      	cbnz	r0, 8010ab6 <__smakebuf_r+0x46>
 8010aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010aa6:	059a      	lsls	r2, r3, #22
 8010aa8:	d4ee      	bmi.n	8010a88 <__smakebuf_r+0x18>
 8010aaa:	f023 0303 	bic.w	r3, r3, #3
 8010aae:	f043 0302 	orr.w	r3, r3, #2
 8010ab2:	81a3      	strh	r3, [r4, #12]
 8010ab4:	e7e2      	b.n	8010a7c <__smakebuf_r+0xc>
 8010ab6:	89a3      	ldrh	r3, [r4, #12]
 8010ab8:	6020      	str	r0, [r4, #0]
 8010aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010abe:	81a3      	strh	r3, [r4, #12]
 8010ac0:	9b01      	ldr	r3, [sp, #4]
 8010ac2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010ac6:	b15b      	cbz	r3, 8010ae0 <__smakebuf_r+0x70>
 8010ac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010acc:	4630      	mov	r0, r6
 8010ace:	f000 f81d 	bl	8010b0c <_isatty_r>
 8010ad2:	b128      	cbz	r0, 8010ae0 <__smakebuf_r+0x70>
 8010ad4:	89a3      	ldrh	r3, [r4, #12]
 8010ad6:	f023 0303 	bic.w	r3, r3, #3
 8010ada:	f043 0301 	orr.w	r3, r3, #1
 8010ade:	81a3      	strh	r3, [r4, #12]
 8010ae0:	89a3      	ldrh	r3, [r4, #12]
 8010ae2:	431d      	orrs	r5, r3
 8010ae4:	81a5      	strh	r5, [r4, #12]
 8010ae6:	e7cf      	b.n	8010a88 <__smakebuf_r+0x18>

08010ae8 <_fstat_r>:
 8010ae8:	b538      	push	{r3, r4, r5, lr}
 8010aea:	4d07      	ldr	r5, [pc, #28]	@ (8010b08 <_fstat_r+0x20>)
 8010aec:	2300      	movs	r3, #0
 8010aee:	4604      	mov	r4, r0
 8010af0:	4608      	mov	r0, r1
 8010af2:	4611      	mov	r1, r2
 8010af4:	602b      	str	r3, [r5, #0]
 8010af6:	f7f0 ffdb 	bl	8001ab0 <_fstat>
 8010afa:	1c43      	adds	r3, r0, #1
 8010afc:	d102      	bne.n	8010b04 <_fstat_r+0x1c>
 8010afe:	682b      	ldr	r3, [r5, #0]
 8010b00:	b103      	cbz	r3, 8010b04 <_fstat_r+0x1c>
 8010b02:	6023      	str	r3, [r4, #0]
 8010b04:	bd38      	pop	{r3, r4, r5, pc}
 8010b06:	bf00      	nop
 8010b08:	200094f4 	.word	0x200094f4

08010b0c <_isatty_r>:
 8010b0c:	b538      	push	{r3, r4, r5, lr}
 8010b0e:	4d06      	ldr	r5, [pc, #24]	@ (8010b28 <_isatty_r+0x1c>)
 8010b10:	2300      	movs	r3, #0
 8010b12:	4604      	mov	r4, r0
 8010b14:	4608      	mov	r0, r1
 8010b16:	602b      	str	r3, [r5, #0]
 8010b18:	f7f0 ffda 	bl	8001ad0 <_isatty>
 8010b1c:	1c43      	adds	r3, r0, #1
 8010b1e:	d102      	bne.n	8010b26 <_isatty_r+0x1a>
 8010b20:	682b      	ldr	r3, [r5, #0]
 8010b22:	b103      	cbz	r3, 8010b26 <_isatty_r+0x1a>
 8010b24:	6023      	str	r3, [r4, #0]
 8010b26:	bd38      	pop	{r3, r4, r5, pc}
 8010b28:	200094f4 	.word	0x200094f4

08010b2c <_init>:
 8010b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b2e:	bf00      	nop
 8010b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b32:	bc08      	pop	{r3}
 8010b34:	469e      	mov	lr, r3
 8010b36:	4770      	bx	lr

08010b38 <_fini>:
 8010b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b3a:	bf00      	nop
 8010b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b3e:	bc08      	pop	{r3}
 8010b40:	469e      	mov	lr, r3
 8010b42:	4770      	bx	lr
