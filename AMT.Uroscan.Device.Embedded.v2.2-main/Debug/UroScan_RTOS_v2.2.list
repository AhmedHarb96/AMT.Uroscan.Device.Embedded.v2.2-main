
UroScan_RTOS_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08010c90  08010c90  00011c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f0c  08010f0c  000120ac  2**0
                  CONTENTS
  4 .ARM          00000008  08010f0c  08010f0c  00011f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f14  08010f14  000120ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08010f14  08010f14  00011f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08010f20  08010f20  00011f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08010f2c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000120ac  2**0
                  CONTENTS
 10 .bss          00009454  200000b0  200000b0  000120b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20009504  20009504  000120b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000120ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a8ad  00000000  00000000  000120dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005743  00000000  00000000  0003c989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc8  00000000  00000000  000420d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a935  00000000  00000000  00043e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000ba51  00000000  00000000  0005e7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0006a21e  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001716  00000000  00000000  0006a261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008934  00000000  00000000  0006b978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000742ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010c78 	.word	0x08010c78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08010c78 	.word	0x08010c78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96a 	b.w	8000dd8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	460c      	mov	r4, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d14e      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	458c      	cmp	ip, r1
 8000b2c:	4686      	mov	lr, r0
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	d962      	bls.n	8000bfa <__udivmoddi4+0xde>
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	4319      	orrs	r1, r3
 8000b46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4e:	fa1f f68c 	uxth.w	r6, ip
 8000b52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb04 f106 	mul.w	r1, r4, r6
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b72:	f080 8112 	bcs.w	8000d9a <__udivmoddi4+0x27e>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 810f 	bls.w	8000d9a <__udivmoddi4+0x27e>
 8000b7c:	3c02      	subs	r4, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	fa1f f38e 	uxth.w	r3, lr
 8000b86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb00 f606 	mul.w	r6, r0, r6
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x94>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba2:	f080 80fc 	bcs.w	8000d9e <__udivmoddi4+0x282>
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	f240 80f9 	bls.w	8000d9e <__udivmoddi4+0x282>
 8000bac:	4463      	add	r3, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11d      	cbz	r5, 8000bc2 <__udivmoddi4+0xa6>
 8000bba:	40d3      	lsrs	r3, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d905      	bls.n	8000bd6 <__udivmoddi4+0xba>
 8000bca:	b10d      	cbz	r5, 8000bd0 <__udivmoddi4+0xb4>
 8000bcc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e7f5      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d146      	bne.n	8000c6c <__udivmoddi4+0x150>
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xcc>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f0c0 80f0 	bcc.w	8000dc8 <__udivmoddi4+0x2ac>
 8000be8:	1a86      	subs	r6, r0, r2
 8000bea:	eb64 0303 	sbc.w	r3, r4, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0e6      	beq.n	8000bc2 <__udivmoddi4+0xa6>
 8000bf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf8:	e7e3      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	f040 8090 	bne.w	8000d20 <__udivmoddi4+0x204>
 8000c00:	eba1 040c 	sub.w	r4, r1, ip
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa1f f78c 	uxth.w	r7, ip
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1e:	fb07 f006 	mul.w	r0, r7, r6
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x11c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x11a>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f200 80cd 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000c36:	4626      	mov	r6, r4
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c42:	fb08 4410 	mls	r4, r8, r0, r4
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	fb00 f707 	mul.w	r7, r0, r7
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x148>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x146>
 8000c5c:	429f      	cmp	r7, r3
 8000c5e:	f200 80b0 	bhi.w	8000dc2 <__udivmoddi4+0x2a6>
 8000c62:	4620      	mov	r0, r4
 8000c64:	1bdb      	subs	r3, r3, r7
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0x9c>
 8000c6c:	f1c1 0620 	rsb	r6, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 f706 	lsr.w	r7, r2, r6
 8000c76:	431f      	orrs	r7, r3
 8000c78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c80:	ea43 030c 	orr.w	r3, r3, ip
 8000c84:	40f4      	lsrs	r4, r6
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	0c38      	lsrs	r0, r7, #16
 8000c8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c90:	fbb4 fef0 	udiv	lr, r4, r0
 8000c94:	fa1f fc87 	uxth.w	ip, r7
 8000c98:	fb00 441e 	mls	r4, r0, lr, r4
 8000c9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca4:	45a1      	cmp	r9, r4
 8000ca6:	fa02 f201 	lsl.w	r2, r2, r1
 8000caa:	d90a      	bls.n	8000cc2 <__udivmoddi4+0x1a6>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cb2:	f080 8084 	bcs.w	8000dbe <__udivmoddi4+0x2a2>
 8000cb6:	45a1      	cmp	r9, r4
 8000cb8:	f240 8081 	bls.w	8000dbe <__udivmoddi4+0x2a2>
 8000cbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	eba4 0409 	sub.w	r4, r4, r9
 8000cc6:	fa1f f983 	uxth.w	r9, r3
 8000cca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cce:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x1d2>
 8000cde:	193c      	adds	r4, r7, r4
 8000ce0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce4:	d267      	bcs.n	8000db6 <__udivmoddi4+0x29a>
 8000ce6:	45a4      	cmp	ip, r4
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0x29a>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	443c      	add	r4, r7
 8000cee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cf6:	eba4 040c 	sub.w	r4, r4, ip
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	469c      	mov	ip, r3
 8000d00:	d351      	bcc.n	8000da6 <__udivmoddi4+0x28a>
 8000d02:	d04e      	beq.n	8000da2 <__udivmoddi4+0x286>
 8000d04:	b155      	cbz	r5, 8000d1c <__udivmoddi4+0x200>
 8000d06:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d12:	40cb      	lsrs	r3, r1
 8000d14:	431e      	orrs	r6, r3
 8000d16:	40cc      	lsrs	r4, r1
 8000d18:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e750      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f103 	lsr.w	r1, r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d30:	4094      	lsls	r4, r2
 8000d32:	430c      	orrs	r4, r1
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3110 	mls	r1, r8, r0, r3
 8000d48:	0c23      	lsrs	r3, r4, #16
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f107 	mul.w	r1, r0, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x24c>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d5e:	d22c      	bcs.n	8000dba <__udivmoddi4+0x29e>
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d92a      	bls.n	8000dba <__udivmoddi4+0x29e>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d70:	fb08 3311 	mls	r3, r8, r1, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb01 f307 	mul.w	r3, r1, r7
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x276>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d88:	d213      	bcs.n	8000db2 <__udivmoddi4+0x296>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d911      	bls.n	8000db2 <__udivmoddi4+0x296>
 8000d8e:	3902      	subs	r1, #2
 8000d90:	4464      	add	r4, ip
 8000d92:	1ae4      	subs	r4, r4, r3
 8000d94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d98:	e739      	b.n	8000c0e <__udivmoddi4+0xf2>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	e6f0      	b.n	8000b80 <__udivmoddi4+0x64>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e706      	b.n	8000bb0 <__udivmoddi4+0x94>
 8000da2:	45c8      	cmp	r8, r9
 8000da4:	d2ae      	bcs.n	8000d04 <__udivmoddi4+0x1e8>
 8000da6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000daa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dae:	3801      	subs	r0, #1
 8000db0:	e7a8      	b.n	8000d04 <__udivmoddi4+0x1e8>
 8000db2:	4631      	mov	r1, r6
 8000db4:	e7ed      	b.n	8000d92 <__udivmoddi4+0x276>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e799      	b.n	8000cee <__udivmoddi4+0x1d2>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e7d4      	b.n	8000d68 <__udivmoddi4+0x24c>
 8000dbe:	46d6      	mov	lr, sl
 8000dc0:	e77f      	b.n	8000cc2 <__udivmoddi4+0x1a6>
 8000dc2:	4463      	add	r3, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	e74d      	b.n	8000c64 <__udivmoddi4+0x148>
 8000dc8:	4606      	mov	r6, r0
 8000dca:	4623      	mov	r3, r4
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e70f      	b.n	8000bf0 <__udivmoddi4+0xd4>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	e730      	b.n	8000c38 <__udivmoddi4+0x11c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de0:	f000 ff00 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de4:	f000 f816 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de8:	f000 f9c6 	bl	8001178 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dec:	f000 f95e 	bl	80010ac <MX_DMA_Init>
  MX_SPI1_Init();
 8000df0:	f000 f86e 	bl	8000ed0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000df4:	f000 f8a2 	bl	8000f3c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000df8:	f000 f8d6 	bl	8000fa8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000dfc:	f000 f92c 	bl	8001058 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8000e00:	f000 f908 	bl	8001014 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	  SetupOS();
 8000e04:	f00c ff00 	bl	800dc08 <SetupOS>
	  StartOS();
 8000e08:	f00c fffc 	bl	800de04 <StartOS>
	  return 0;
 8000e0c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b094      	sub	sp, #80	@ 0x50
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0320 	add.w	r3, r7, #32
 8000e1e:	2230      	movs	r2, #48	@ 0x30
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00f f935 	bl	8010092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <SystemClock_Config+0xb4>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e40:	4a21      	ldr	r2, [pc, #132]	@ (8000ec8 <SystemClock_Config+0xb4>)
 8000e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <SystemClock_Config+0xb4>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <SystemClock_Config+0xb8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ecc <SystemClock_Config+0xb8>)
 8000e5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <SystemClock_Config+0xb8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e70:	2302      	movs	r3, #2
 8000e72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e74:	2301      	movs	r3, #1
 8000e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e78:	2310      	movs	r3, #16
 8000e7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 f8ff 	bl	8003088 <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e90:	f000 f9ea 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 fb62 	bl	8003578 <HAL_RCC_ClockConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000eba:	f000 f9d5 	bl	8001268 <Error_Handler>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3750      	adds	r7, #80	@ 0x50
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40007000 	.word	0x40007000

08000ed0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000ed6:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <MX_SPI1_Init+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000edc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000efc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f04:	2208      	movs	r2, #8
 8000f06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f1c:	220a      	movs	r2, #10
 8000f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f22:	f002 fd09 	bl	8003938 <HAL_SPI_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f2c:	f000 f99c 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200000d0 	.word	0x200000d0
 8000f38:	40013000 	.word	0x40013000

08000f3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f42:	4a18      	ldr	r2, [pc, #96]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f70:	2208      	movs	r2, #8
 8000f72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f88:	220a      	movs	r2, #10
 8000f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <MX_SPI2_Init+0x64>)
 8000f8e:	f002 fcd3 	bl	8003938 <HAL_SPI_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f98:	f000 f966 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000128 	.word	0x20000128
 8000fa4:	40003800 	.word	0x40003800

08000fa8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fac:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fae:	4a18      	ldr	r2, [pc, #96]	@ (8001010 <MX_SPI3_Init+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fdc:	2210      	movs	r2, #16
 8000fde:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <MX_SPI3_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <MX_SPI3_Init+0x64>)
 8000ff4:	220a      	movs	r2, #10
 8000ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	@ (800100c <MX_SPI3_Init+0x64>)
 8000ffa:	f002 fc9d 	bl	8003938 <HAL_SPI_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001004:	f000 f930 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000180 	.word	0x20000180
 8001010:	40003c00 	.word	0x40003c00

08001014 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001018:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <MX_TIM11_Init+0x3c>)
 800101a:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <MX_TIM11_Init+0x40>)
 800101c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16;
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <MX_TIM11_Init+0x3c>)
 8001020:	2210      	movs	r2, #16
 8001022:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <MX_TIM11_Init+0x3c>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_TIM11_Init+0x3c>)
 800102c:	2263      	movs	r2, #99	@ 0x63
 800102e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <MX_TIM11_Init+0x3c>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_TIM11_Init+0x3c>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	@ (8001050 <MX_TIM11_Init+0x3c>)
 800103e:	f003 fc85 	bl	800494c <HAL_TIM_Base_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8001048:	f000 f90e 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000418 	.word	0x20000418
 8001054:	40014800 	.word	0x40014800

08001058 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <MX_USART1_UART_Init+0x50>)
 8001060:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001064:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001068:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001090:	f003 fefe 	bl	8004e90 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800109a:	f000 f8e5 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000460 	.word	0x20000460
 80010a8:	40011000 	.word	0x40011000

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <MX_DMA_Init+0xc8>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001174 <MX_DMA_Init+0xc8>)
 80010bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <MX_DMA_Init+0xc8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <MX_DMA_Init+0xc8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a27      	ldr	r2, [pc, #156]	@ (8001174 <MX_DMA_Init+0xc8>)
 80010d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b25      	ldr	r3, [pc, #148]	@ (8001174 <MX_DMA_Init+0xc8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	200b      	movs	r0, #11
 80010f0:	f000 feff 	bl	8001ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010f4:	200b      	movs	r0, #11
 80010f6:	f000 ff18 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2105      	movs	r1, #5
 80010fe:	200e      	movs	r0, #14
 8001100:	f000 fef7 	bl	8001ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001104:	200e      	movs	r0, #14
 8001106:	f000 ff10 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2105      	movs	r1, #5
 800110e:	200f      	movs	r0, #15
 8001110:	f000 feef 	bl	8001ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001114:	200f      	movs	r0, #15
 8001116:	f000 ff08 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2105      	movs	r1, #5
 800111e:	2010      	movs	r0, #16
 8001120:	f000 fee7 	bl	8001ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001124:	2010      	movs	r0, #16
 8001126:	f000 ff00 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2105      	movs	r1, #5
 800112e:	2038      	movs	r0, #56	@ 0x38
 8001130:	f000 fedf 	bl	8001ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001134:	2038      	movs	r0, #56	@ 0x38
 8001136:	f000 fef8 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2105      	movs	r1, #5
 800113e:	203a      	movs	r0, #58	@ 0x3a
 8001140:	f000 fed7 	bl	8001ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001144:	203a      	movs	r0, #58	@ 0x3a
 8001146:	f000 fef0 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2105      	movs	r1, #5
 800114e:	203b      	movs	r0, #59	@ 0x3b
 8001150:	f000 fecf 	bl	8001ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001154:	203b      	movs	r0, #59	@ 0x3b
 8001156:	f000 fee8 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2105      	movs	r1, #5
 800115e:	2046      	movs	r0, #70	@ 0x46
 8001160:	f000 fec7 	bl	8001ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001164:	2046      	movs	r0, #70	@ 0x46
 8001166:	f000 fee0 	bl	8001f2a <HAL_NVIC_EnableIRQ>

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b32      	ldr	r3, [pc, #200]	@ (800125c <MX_GPIO_Init+0xe4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a31      	ldr	r2, [pc, #196]	@ (800125c <MX_GPIO_Init+0xe4>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b2f      	ldr	r3, [pc, #188]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a2a      	ldr	r2, [pc, #168]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b28      	ldr	r3, [pc, #160]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b24      	ldr	r3, [pc, #144]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a23      	ldr	r2, [pc, #140]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a1c      	ldr	r2, [pc, #112]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_GPIO_Init+0xe4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f248 0110 	movw	r1, #32784	@ 0x8010
 8001204:	4816      	ldr	r0, [pc, #88]	@ (8001260 <MX_GPIO_Init+0xe8>)
 8001206:	f001 ff25 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PUMP_Pin|VALVE_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f241 0103 	movw	r1, #4099	@ 0x1003
 8001210:	4814      	ldr	r0, [pc, #80]	@ (8001264 <MX_GPIO_Init+0xec>)
 8001212:	f001 ff1f 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI3_CS_Pin;
 8001216:	f248 0310 	movw	r3, #32784	@ 0x8010
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480c      	ldr	r0, [pc, #48]	@ (8001260 <MX_GPIO_Init+0xe8>)
 8001230:	f001 fd74 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PUMP_Pin VALVE_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = PUMP_Pin|VALVE_Pin|SPI2_CS_Pin;
 8001234:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <MX_GPIO_Init+0xec>)
 800124e:	f001 fd65 	bl	8002d1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	@ 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <Error_Handler+0x8>

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_MspInit+0x54>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	4a11      	ldr	r2, [pc, #68]	@ (80012c8 <HAL_MspInit+0x54>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001288:	6453      	str	r3, [r2, #68]	@ 0x44
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_MspInit+0x54>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_MspInit+0x54>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <HAL_MspInit+0x54>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <HAL_MspInit+0x54>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	210f      	movs	r1, #15
 80012b6:	f06f 0001 	mvn.w	r0, #1
 80012ba:	f000 fe1a 	bl	8001ef2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	@ 0x38
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a95      	ldr	r2, [pc, #596]	@ (8001540 <HAL_SPI_MspInit+0x274>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	f040 8091 	bne.w	8001412 <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	4b93      	ldr	r3, [pc, #588]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 80012f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f8:	4a92      	ldr	r2, [pc, #584]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 80012fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001300:	4b90      	ldr	r3, [pc, #576]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001308:	623b      	str	r3, [r7, #32]
 800130a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	4b8c      	ldr	r3, [pc, #560]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	4a8b      	ldr	r2, [pc, #556]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6313      	str	r3, [r2, #48]	@ 0x30
 800131c:	4b89      	ldr	r3, [pc, #548]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001328:	23e0      	movs	r3, #224	@ 0xe0
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001338:	2305      	movs	r3, #5
 800133a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	4881      	ldr	r0, [pc, #516]	@ (8001548 <HAL_SPI_MspInit+0x27c>)
 8001344:	f001 fcea 	bl	8002d1c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001348:	4b80      	ldr	r3, [pc, #512]	@ (800154c <HAL_SPI_MspInit+0x280>)
 800134a:	4a81      	ldr	r2, [pc, #516]	@ (8001550 <HAL_SPI_MspInit+0x284>)
 800134c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800134e:	4b7f      	ldr	r3, [pc, #508]	@ (800154c <HAL_SPI_MspInit+0x280>)
 8001350:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001354:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001356:	4b7d      	ldr	r3, [pc, #500]	@ (800154c <HAL_SPI_MspInit+0x280>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135c:	4b7b      	ldr	r3, [pc, #492]	@ (800154c <HAL_SPI_MspInit+0x280>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001362:	4b7a      	ldr	r3, [pc, #488]	@ (800154c <HAL_SPI_MspInit+0x280>)
 8001364:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001368:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800136a:	4b78      	ldr	r3, [pc, #480]	@ (800154c <HAL_SPI_MspInit+0x280>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001370:	4b76      	ldr	r3, [pc, #472]	@ (800154c <HAL_SPI_MspInit+0x280>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001376:	4b75      	ldr	r3, [pc, #468]	@ (800154c <HAL_SPI_MspInit+0x280>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800137c:	4b73      	ldr	r3, [pc, #460]	@ (800154c <HAL_SPI_MspInit+0x280>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001382:	4b72      	ldr	r3, [pc, #456]	@ (800154c <HAL_SPI_MspInit+0x280>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001388:	4870      	ldr	r0, [pc, #448]	@ (800154c <HAL_SPI_MspInit+0x280>)
 800138a:	f000 fded 	bl	8001f68 <HAL_DMA_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001394:	f7ff ff68 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a6c      	ldr	r2, [pc, #432]	@ (800154c <HAL_SPI_MspInit+0x280>)
 800139c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800139e:	4a6b      	ldr	r2, [pc, #428]	@ (800154c <HAL_SPI_MspInit+0x280>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001558 <HAL_SPI_MspInit+0x28c>)
 80013a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013ac:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013b0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b2:	4b68      	ldr	r3, [pc, #416]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013b4:	2240      	movs	r2, #64	@ 0x40
 80013b6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b8:	4b66      	ldr	r3, [pc, #408]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013be:	4b65      	ldr	r3, [pc, #404]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013c6:	4b63      	ldr	r3, [pc, #396]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013cc:	4b61      	ldr	r3, [pc, #388]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013d2:	4b60      	ldr	r3, [pc, #384]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013da:	2200      	movs	r2, #0
 80013dc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013de:	4b5d      	ldr	r3, [pc, #372]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013e4:	485b      	ldr	r0, [pc, #364]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013e6:	f000 fdbf 	bl	8001f68 <HAL_DMA_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80013f0:	f7ff ff3a 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a57      	ldr	r2, [pc, #348]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013f8:	649a      	str	r2, [r3, #72]	@ 0x48
 80013fa:	4a56      	ldr	r2, [pc, #344]	@ (8001554 <HAL_SPI_MspInit+0x288>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2105      	movs	r1, #5
 8001404:	2023      	movs	r0, #35	@ 0x23
 8001406:	f000 fd74 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800140a:	2023      	movs	r0, #35	@ 0x23
 800140c:	f000 fd8d 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001410:	e145      	b.n	800169e <HAL_SPI_MspInit+0x3d2>
  else if(hspi->Instance==SPI2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a51      	ldr	r2, [pc, #324]	@ (800155c <HAL_SPI_MspInit+0x290>)
 8001418:	4293      	cmp	r3, r2
 800141a:	f040 80ab 	bne.w	8001574 <HAL_SPI_MspInit+0x2a8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	4b48      	ldr	r3, [pc, #288]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	4a47      	ldr	r2, [pc, #284]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142c:	6413      	str	r3, [r2, #64]	@ 0x40
 800142e:	4b45      	ldr	r3, [pc, #276]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	4b41      	ldr	r3, [pc, #260]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a40      	ldr	r2, [pc, #256]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b3e      	ldr	r3, [pc, #248]	@ (8001544 <HAL_SPI_MspInit+0x278>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001456:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001468:	2305      	movs	r3, #5
 800146a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001470:	4619      	mov	r1, r3
 8001472:	483b      	ldr	r0, [pc, #236]	@ (8001560 <HAL_SPI_MspInit+0x294>)
 8001474:	f001 fc52 	bl	8002d1c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001478:	4b3a      	ldr	r3, [pc, #232]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 800147a:	4a3b      	ldr	r2, [pc, #236]	@ (8001568 <HAL_SPI_MspInit+0x29c>)
 800147c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800147e:	4b39      	ldr	r3, [pc, #228]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001484:	4b37      	ldr	r3, [pc, #220]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148a:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001490:	4b34      	ldr	r3, [pc, #208]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 8001492:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001496:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001498:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149e:	4b31      	ldr	r3, [pc, #196]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80014a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80014b6:	482b      	ldr	r0, [pc, #172]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014b8:	f000 fd56 	bl	8001f68 <HAL_DMA_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_SPI_MspInit+0x1fa>
      Error_Handler();
 80014c2:	f7ff fed1 	bl	8001268 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a26      	ldr	r2, [pc, #152]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014cc:	4a25      	ldr	r2, [pc, #148]	@ (8001564 <HAL_SPI_MspInit+0x298>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80014d2:	4b26      	ldr	r3, [pc, #152]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014d4:	4a26      	ldr	r2, [pc, #152]	@ (8001570 <HAL_SPI_MspInit+0x2a4>)
 80014d6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80014d8:	4b24      	ldr	r3, [pc, #144]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014de:	4b23      	ldr	r3, [pc, #140]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014e0:	2240      	movs	r2, #64	@ 0x40
 80014e2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e4:	4b21      	ldr	r3, [pc, #132]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014ea:	4b20      	ldr	r3, [pc, #128]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80014fe:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001504:	4b19      	ldr	r3, [pc, #100]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001510:	4816      	ldr	r0, [pc, #88]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 8001512:	f000 fd29 	bl	8001f68 <HAL_DMA_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 800151c:	f7ff fea4 	bl	8001268 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 8001524:	649a      	str	r2, [r3, #72]	@ 0x48
 8001526:	4a11      	ldr	r2, [pc, #68]	@ (800156c <HAL_SPI_MspInit+0x2a0>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2105      	movs	r1, #5
 8001530:	2024      	movs	r0, #36	@ 0x24
 8001532:	f000 fcde 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001536:	2024      	movs	r0, #36	@ 0x24
 8001538:	f000 fcf7 	bl	8001f2a <HAL_NVIC_EnableIRQ>
}
 800153c:	e0af      	b.n	800169e <HAL_SPI_MspInit+0x3d2>
 800153e:	bf00      	nop
 8001540:	40013000 	.word	0x40013000
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	200001d8 	.word	0x200001d8
 8001550:	40026410 	.word	0x40026410
 8001554:	20000238 	.word	0x20000238
 8001558:	40026458 	.word	0x40026458
 800155c:	40003800 	.word	0x40003800
 8001560:	40020400 	.word	0x40020400
 8001564:	20000298 	.word	0x20000298
 8001568:	40026058 	.word	0x40026058
 800156c:	200002f8 	.word	0x200002f8
 8001570:	40026070 	.word	0x40026070
  else if(hspi->Instance==SPI3)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a4b      	ldr	r2, [pc, #300]	@ (80016a8 <HAL_SPI_MspInit+0x3dc>)
 800157a:	4293      	cmp	r3, r2
 800157c:	f040 808f 	bne.w	800169e <HAL_SPI_MspInit+0x3d2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	4b49      	ldr	r3, [pc, #292]	@ (80016ac <HAL_SPI_MspInit+0x3e0>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	4a48      	ldr	r2, [pc, #288]	@ (80016ac <HAL_SPI_MspInit+0x3e0>)
 800158a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800158e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001590:	4b46      	ldr	r3, [pc, #280]	@ (80016ac <HAL_SPI_MspInit+0x3e0>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4b42      	ldr	r3, [pc, #264]	@ (80016ac <HAL_SPI_MspInit+0x3e0>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	4a41      	ldr	r2, [pc, #260]	@ (80016ac <HAL_SPI_MspInit+0x3e0>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ac:	4b3f      	ldr	r3, [pc, #252]	@ (80016ac <HAL_SPI_MspInit+0x3e0>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015ca:	2306      	movs	r3, #6
 80015cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	4836      	ldr	r0, [pc, #216]	@ (80016b0 <HAL_SPI_MspInit+0x3e4>)
 80015d6:	f001 fba1 	bl	8002d1c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80015da:	4b36      	ldr	r3, [pc, #216]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 80015dc:	4a36      	ldr	r2, [pc, #216]	@ (80016b8 <HAL_SPI_MspInit+0x3ec>)
 80015de:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80015e0:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e6:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ec:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015f2:	4b30      	ldr	r3, [pc, #192]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 80015f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015f8:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015fa:	4b2e      	ldr	r3, [pc, #184]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001600:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001606:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 8001608:	2200      	movs	r2, #0
 800160a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800160c:	4b29      	ldr	r3, [pc, #164]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 800160e:	2200      	movs	r2, #0
 8001610:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001612:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 8001614:	2200      	movs	r2, #0
 8001616:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001618:	4826      	ldr	r0, [pc, #152]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 800161a:	f000 fca5 	bl	8001f68 <HAL_DMA_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_SPI_MspInit+0x35c>
      Error_Handler();
 8001624:	f7ff fe20 	bl	8001268 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a22      	ldr	r2, [pc, #136]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 800162c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800162e:	4a21      	ldr	r2, [pc, #132]	@ (80016b4 <HAL_SPI_MspInit+0x3e8>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001634:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001636:	4a22      	ldr	r2, [pc, #136]	@ (80016c0 <HAL_SPI_MspInit+0x3f4>)
 8001638:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800163a:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001640:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001642:	2240      	movs	r2, #64	@ 0x40
 8001644:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 800164e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001652:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800165a:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001660:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001672:	4812      	ldr	r0, [pc, #72]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001674:	f000 fc78 	bl	8001f68 <HAL_DMA_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_SPI_MspInit+0x3b6>
      Error_Handler();
 800167e:	f7ff fdf3 	bl	8001268 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 8001686:	649a      	str	r2, [r3, #72]	@ 0x48
 8001688:	4a0c      	ldr	r2, [pc, #48]	@ (80016bc <HAL_SPI_MspInit+0x3f0>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2105      	movs	r1, #5
 8001692:	2033      	movs	r0, #51	@ 0x33
 8001694:	f000 fc2d 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001698:	2033      	movs	r0, #51	@ 0x33
 800169a:	f000 fc46 	bl	8001f2a <HAL_NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3738      	adds	r7, #56	@ 0x38
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40003c00 	.word	0x40003c00
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020800 	.word	0x40020800
 80016b4:	20000358 	.word	0x20000358
 80016b8:	40026010 	.word	0x40026010
 80016bc:	200003b8 	.word	0x200003b8
 80016c0:	40026088 	.word	0x40026088

080016c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <HAL_TIM_Base_MspInit+0x48>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d115      	bne.n	8001702 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <HAL_TIM_Base_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	4a0c      	ldr	r2, [pc, #48]	@ (8001710 <HAL_TIM_Base_MspInit+0x4c>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_TIM_Base_MspInit+0x4c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2105      	movs	r1, #5
 80016f6:	201a      	movs	r0, #26
 80016f8:	f000 fbfb 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016fc:	201a      	movs	r0, #26
 80016fe:	f000 fc14 	bl	8001f2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40014800 	.word	0x40014800
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a4c      	ldr	r2, [pc, #304]	@ (8001864 <HAL_UART_MspInit+0x150>)
 8001732:	4293      	cmp	r3, r2
 8001734:	f040 8091 	bne.w	800185a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	4b4a      	ldr	r3, [pc, #296]	@ (8001868 <HAL_UART_MspInit+0x154>)
 800173e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001740:	4a49      	ldr	r2, [pc, #292]	@ (8001868 <HAL_UART_MspInit+0x154>)
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	6453      	str	r3, [r2, #68]	@ 0x44
 8001748:	4b47      	ldr	r3, [pc, #284]	@ (8001868 <HAL_UART_MspInit+0x154>)
 800174a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	4b43      	ldr	r3, [pc, #268]	@ (8001868 <HAL_UART_MspInit+0x154>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175c:	4a42      	ldr	r2, [pc, #264]	@ (8001868 <HAL_UART_MspInit+0x154>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6313      	str	r3, [r2, #48]	@ 0x30
 8001764:	4b40      	ldr	r3, [pc, #256]	@ (8001868 <HAL_UART_MspInit+0x154>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001770:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001782:	2307      	movs	r3, #7
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	4837      	ldr	r0, [pc, #220]	@ (800186c <HAL_UART_MspInit+0x158>)
 800178e:	f001 fac5 	bl	8002d1c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001792:	4b37      	ldr	r3, [pc, #220]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 8001794:	4a37      	ldr	r2, [pc, #220]	@ (8001874 <HAL_UART_MspInit+0x160>)
 8001796:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001798:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 800179a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800179e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a0:	4b33      	ldr	r3, [pc, #204]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a6:	4b32      	ldr	r3, [pc, #200]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ac:	4b30      	ldr	r3, [pc, #192]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017cc:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017d2:	4827      	ldr	r0, [pc, #156]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017d4:	f000 fbc8 	bl	8001f68 <HAL_DMA_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80017de:	f7ff fd43 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a22      	ldr	r2, [pc, #136]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017e8:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <HAL_UART_MspInit+0x15c>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_UART_MspInit+0x164>)
 80017f0:	4a22      	ldr	r2, [pc, #136]	@ (800187c <HAL_UART_MspInit+0x168>)
 80017f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80017f4:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_UART_MspInit+0x164>)
 80017f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <HAL_UART_MspInit+0x164>)
 80017fe:	2240      	movs	r2, #64	@ 0x40
 8001800:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001802:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <HAL_UART_MspInit+0x164>)
 800180a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800180e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001816:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <HAL_UART_MspInit+0x164>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001828:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <HAL_UART_MspInit+0x164>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800182e:	4812      	ldr	r0, [pc, #72]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001830:	f000 fb9a 	bl	8001f68 <HAL_DMA_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800183a:	f7ff fd15 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001842:	639a      	str	r2, [r3, #56]	@ 0x38
 8001844:	4a0c      	ldr	r2, [pc, #48]	@ (8001878 <HAL_UART_MspInit+0x164>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2105      	movs	r1, #5
 800184e:	2025      	movs	r0, #37	@ 0x25
 8001850:	f000 fb4f 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001854:	2025      	movs	r0, #37	@ 0x25
 8001856:	f000 fb68 	bl	8001f2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	@ 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40011000 	.word	0x40011000
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000
 8001870:	200004a8 	.word	0x200004a8
 8001874:	40026440 	.word	0x40026440
 8001878:	20000508 	.word	0x20000508
 800187c:	400264b8 	.word	0x400264b8

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <NMI_Handler+0x4>

08001888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <MemManage_Handler+0x4>

08001898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ba:	f000 f9e5 	bl	8001c88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018be:	f006 ffcf 	bl	8008860 <xTaskGetSchedulerState>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d001      	beq.n	80018cc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018c8:	f007 fec6 	bl	8009658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <DMA1_Stream0_IRQHandler+0x10>)
 80018d6:	f000 fcdf 	bl	8002298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000358 	.word	0x20000358

080018e4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <DMA1_Stream3_IRQHandler+0x10>)
 80018ea:	f000 fcd5 	bl	8002298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000298 	.word	0x20000298

080018f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <DMA1_Stream4_IRQHandler+0x10>)
 80018fe:	f000 fccb 	bl	8002298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200002f8 	.word	0x200002f8

0800190c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <DMA1_Stream5_IRQHandler+0x10>)
 8001912:	f000 fcc1 	bl	8002298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200003b8 	.word	0x200003b8

08001920 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	StartTimerTicks++;
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	4a03      	ldr	r2, [pc, #12]	@ (8001938 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800192c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800192e:	4803      	ldr	r0, [pc, #12]	@ (800193c <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8001930:	f003 f8cc 	bl	8004acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200000cc 	.word	0x200000cc
 800193c:	20000418 	.word	0x20000418

08001940 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <SPI1_IRQHandler+0x10>)
 8001946:	f002 fc37 	bl	80041b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200000d0 	.word	0x200000d0

08001954 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <SPI2_IRQHandler+0x10>)
 800195a:	f002 fc2d 	bl	80041b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000128 	.word	0x20000128

08001968 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <USART1_IRQHandler+0x10>)
 800196e:	f003 fb8f 	bl	8005090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000460 	.word	0x20000460

0800197c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <SPI3_IRQHandler+0x10>)
 8001982:	f002 fc19 	bl	80041b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000180 	.word	0x20000180

08001990 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001996:	f000 fc7f 	bl	8002298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200001d8 	.word	0x200001d8

080019a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <DMA2_Stream2_IRQHandler+0x10>)
 80019aa:	f000 fc75 	bl	8002298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200004a8 	.word	0x200004a8

080019b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <DMA2_Stream3_IRQHandler+0x10>)
 80019be:	f000 fc6b 	bl	8002298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000238 	.word	0x20000238

080019cc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <DMA2_Stream7_IRQHandler+0x10>)
 80019d2:	f000 fc61 	bl	8002298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000508 	.word	0x20000508

080019e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_kill>:

int _kill(int pid, int sig)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019fa:	f00e fba9 	bl	8010150 <__errno>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2216      	movs	r2, #22
 8001a02:	601a      	str	r2, [r3, #0]
  return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_exit>:

void _exit (int status)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ffe7 	bl	80019f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a22:	bf00      	nop
 8001a24:	e7fd      	b.n	8001a22 <_exit+0x12>

08001a26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e00a      	b.n	8001a4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a38:	f3af 8000 	nop.w
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	60ba      	str	r2, [r7, #8]
 8001a44:	b2ca      	uxtb	r2, r1
 8001a46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	dbf0      	blt.n	8001a38 <_read+0x12>
  }

  return len;
 8001a56:	687b      	ldr	r3, [r7, #4]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e009      	b.n	8001a86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	60ba      	str	r2, [r7, #8]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dbf1      	blt.n	8001a72 <_write+0x12>
  }
  return len;
 8001a8e:	687b      	ldr	r3, [r7, #4]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_close>:

int _close(int file)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_isatty>:

int _isatty(int file)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b08:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <_sbrk+0x5c>)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <_sbrk+0x60>)
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <_sbrk+0x64>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <_sbrk+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b30:	f00e fb0e 	bl	8010150 <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	220c      	movs	r2, #12
 8001b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	e009      	b.n	8001b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <_sbrk+0x64>)
 8001b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20020000 	.word	0x20020000
 8001b60:	00000400 	.word	0x00000400
 8001b64:	20000568 	.word	0x20000568
 8001b68:	20009508 	.word	0x20009508

08001b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <SystemInit+0x20>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b76:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <SystemInit+0x20>)
 8001b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b94:	f7ff ffea 	bl	8001b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b98:	480c      	ldr	r0, [pc, #48]	@ (8001bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9a:	490d      	ldr	r1, [pc, #52]	@ (8001bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f00e facd 	bl	801015c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc2:	f7ff f90b 	bl	8000ddc <main>
  bx  lr    
 8001bc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001bd4:	08010f2c 	.word	0x08010f2c
  ldr r2, =_sbss
 8001bd8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001bdc:	20009504 	.word	0x20009504

08001be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c24 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	@ (8001c24 <HAL_Init+0x40>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <HAL_Init+0x40>)
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	@ (8001c24 <HAL_Init+0x40>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f965 	bl	8001edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	200f      	movs	r0, #15
 8001c14:	f000 f808 	bl	8001c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fb2c 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_InitTick+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_InitTick+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f981 	bl	8001f4e <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00e      	b.n	8001c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d80a      	bhi.n	8001c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 f945 	bl	8001ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c68:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <HAL_InitTick+0x5c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	2000056c 	.word	0x2000056c

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000056c 	.word	0x2000056c

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_Delay+0x44>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffde 	bl	8001cb0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000008 	.word	0x20000008

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	@ (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4907      	ldr	r1, [pc, #28]	@ (8001dac <__NVIC_EnableIRQ+0x38>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	@ (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	@ (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	@ 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
         );
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	@ 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001e70:	f3bf 8f4f 	dsb	sy
}
 8001e74:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <__NVIC_SystemReset+0x24>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e7e:	4904      	ldr	r1, [pc, #16]	@ (8001e90 <__NVIC_SystemReset+0x24>)
 8001e80:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <__NVIC_SystemReset+0x28>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e86:	f3bf 8f4f 	dsb	sy
}
 8001e8a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <__NVIC_SystemReset+0x20>
 8001e90:	e000ed00 	.word	0xe000ed00
 8001e94:	05fa0004 	.word	0x05fa0004

08001e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ea8:	d301      	bcc.n	8001eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00f      	b.n	8001ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <SysTick_Config+0x40>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f7ff ff78 	bl	8001db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec0:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <SysTick_Config+0x40>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec6:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <SysTick_Config+0x40>)
 8001ec8:	2207      	movs	r2, #7
 8001eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	e000e010 	.word	0xe000e010

08001edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff13 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff28 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff78 	bl	8001e04 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff47 	bl	8001db0 <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff1b 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001f4a:	f7ff ff8f 	bl	8001e6c <__NVIC_SystemReset>

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ff9e 	bl	8001e98 <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff fe9c 	bl	8001cb0 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e099      	b.n	80020b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa4:	e00f      	b.n	8001fc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fa6:	f7ff fe83 	bl	8001cb0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d908      	bls.n	8001fc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e078      	b.n	80020b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e8      	bne.n	8001fa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4b38      	ldr	r3, [pc, #224]	@ (80020c0 <HAL_DMA_Init+0x158>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	2b04      	cmp	r3, #4
 800201e:	d107      	bne.n	8002030 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	4313      	orrs	r3, r2
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f023 0307 	bic.w	r3, r3, #7
 8002046:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	4313      	orrs	r3, r2
 8002050:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	2b04      	cmp	r3, #4
 8002058:	d117      	bne.n	800208a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00e      	beq.n	800208a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fb01 	bl	8002674 <DMA_CheckFifoParam>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2240      	movs	r2, #64	@ 0x40
 800207c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002086:	2301      	movs	r3, #1
 8002088:	e016      	b.n	80020b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fab8 	bl	8002608 <DMA_CalcBaseAndBitshift>
 8002098:	4603      	mov	r3, r0
 800209a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a0:	223f      	movs	r2, #63	@ 0x3f
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	f010803f 	.word	0xf010803f

080020c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_DMA_Start_IT+0x26>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e040      	b.n	800216c <HAL_DMA_Start_IT+0xa8>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d12f      	bne.n	800215e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2202      	movs	r2, #2
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 fa4a 	bl	80025ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211c:	223f      	movs	r2, #63	@ 0x3f
 800211e:	409a      	lsls	r2, r3
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0216 	orr.w	r2, r2, #22
 8002132:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0208 	orr.w	r2, r2, #8
 800214a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e005      	b.n	800216a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002166:	2302      	movs	r3, #2
 8002168:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800216a:	7dfb      	ldrb	r3, [r7, #23]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002180:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002182:	f7ff fd95 	bl	8001cb0 <HAL_GetTick>
 8002186:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d008      	beq.n	80021a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2280      	movs	r2, #128	@ 0x80
 8002198:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e052      	b.n	800224c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0216 	bic.w	r2, r2, #22
 80021b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <HAL_DMA_Abort+0x62>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0208 	bic.w	r2, r2, #8
 80021e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f6:	e013      	b.n	8002220 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f8:	f7ff fd5a 	bl	8001cb0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b05      	cmp	r3, #5
 8002204:	d90c      	bls.n	8002220 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2203      	movs	r2, #3
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e015      	b.n	800224c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1e4      	bne.n	80021f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002232:	223f      	movs	r2, #63	@ 0x3f
 8002234:	409a      	lsls	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d004      	beq.n	8002272 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2280      	movs	r2, #128	@ 0x80
 800226c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00c      	b.n	800228c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2205      	movs	r2, #5
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022a4:	4b8e      	ldr	r3, [pc, #568]	@ (80024e0 <HAL_DMA_IRQHandler+0x248>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a8e      	ldr	r2, [pc, #568]	@ (80024e4 <HAL_DMA_IRQHandler+0x24c>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	0a9b      	lsrs	r3, r3, #10
 80022b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c2:	2208      	movs	r2, #8
 80022c4:	409a      	lsls	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01a      	beq.n	8002304 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0204 	bic.w	r2, r2, #4
 80022ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f0:	2208      	movs	r2, #8
 80022f2:	409a      	lsls	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002308:	2201      	movs	r2, #1
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d012      	beq.n	800233a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002326:	2201      	movs	r2, #1
 8002328:	409a      	lsls	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002332:	f043 0202 	orr.w	r2, r3, #2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233e:	2204      	movs	r2, #4
 8002340:	409a      	lsls	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d012      	beq.n	8002370 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235c:	2204      	movs	r2, #4
 800235e:	409a      	lsls	r2, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002368:	f043 0204 	orr.w	r2, r3, #4
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002374:	2210      	movs	r2, #16
 8002376:	409a      	lsls	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d043      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d03c      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002392:	2210      	movs	r2, #16
 8002394:	409a      	lsls	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d018      	beq.n	80023da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d108      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d024      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	4798      	blx	r3
 80023c6:	e01f      	b.n	8002408 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01b      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
 80023d8:	e016      	b.n	8002408 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d107      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0208 	bic.w	r2, r2, #8
 80023f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240c:	2220      	movs	r2, #32
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 808f 	beq.w	8002538 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8087 	beq.w	8002538 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	2220      	movs	r2, #32
 8002430:	409a      	lsls	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b05      	cmp	r3, #5
 8002440:	d136      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0216 	bic.w	r2, r2, #22
 8002450:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002460:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d103      	bne.n	8002472 <HAL_DMA_IRQHandler+0x1da>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0208 	bic.w	r2, r2, #8
 8002480:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	223f      	movs	r2, #63	@ 0x3f
 8002488:	409a      	lsls	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d07e      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4798      	blx	r3
        }
        return;
 80024ae:	e079      	b.n	80025a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01d      	beq.n	80024fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10d      	bne.n	80024e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d031      	beq.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	4798      	blx	r3
 80024dc:	e02c      	b.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
 80024de:	bf00      	nop
 80024e0:	20000000 	.word	0x20000000
 80024e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d023      	beq.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
 80024f8:	e01e      	b.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10f      	bne.n	8002528 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0210 	bic.w	r2, r2, #16
 8002516:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253c:	2b00      	cmp	r3, #0
 800253e:	d032      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d022      	beq.n	8002592 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2205      	movs	r2, #5
 8002550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	3301      	adds	r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	d307      	bcc.n	8002580 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f2      	bne.n	8002564 <HAL_DMA_IRQHandler+0x2cc>
 800257e:	e000      	b.n	8002582 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002580:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
 80025a2:	e000      	b.n	80025a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025a4:	bf00      	nop
    }
  }
}
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b40      	cmp	r3, #64	@ 0x40
 80025d8:	d108      	bne.n	80025ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025ea:	e007      	b.n	80025fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	60da      	str	r2, [r3, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3b10      	subs	r3, #16
 8002618:	4a14      	ldr	r2, [pc, #80]	@ (800266c <DMA_CalcBaseAndBitshift+0x64>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002622:	4a13      	ldr	r2, [pc, #76]	@ (8002670 <DMA_CalcBaseAndBitshift+0x68>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d909      	bls.n	800264a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	1d1a      	adds	r2, r3, #4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	659a      	str	r2, [r3, #88]	@ 0x58
 8002648:	e007      	b.n	800265a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002652:	f023 0303 	bic.w	r3, r3, #3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	aaaaaaab 	.word	0xaaaaaaab
 8002670:	08010d60 	.word	0x08010d60

08002674 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002684:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11f      	bne.n	80026ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d856      	bhi.n	8002742 <DMA_CheckFifoParam+0xce>
 8002694:	a201      	add	r2, pc, #4	@ (adr r2, 800269c <DMA_CheckFifoParam+0x28>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026bf 	.word	0x080026bf
 80026a4:	080026ad 	.word	0x080026ad
 80026a8:	08002743 	.word	0x08002743
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d046      	beq.n	8002746 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e043      	b.n	8002746 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026c6:	d140      	bne.n	800274a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026cc:	e03d      	b.n	800274a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d6:	d121      	bne.n	800271c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d837      	bhi.n	800274e <DMA_CheckFifoParam+0xda>
 80026de:	a201      	add	r2, pc, #4	@ (adr r2, 80026e4 <DMA_CheckFifoParam+0x70>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	080026f5 	.word	0x080026f5
 80026e8:	080026fb 	.word	0x080026fb
 80026ec:	080026f5 	.word	0x080026f5
 80026f0:	0800270d 	.word	0x0800270d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      break;
 80026f8:	e030      	b.n	800275c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d025      	beq.n	8002752 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270a:	e022      	b.n	8002752 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002714:	d11f      	bne.n	8002756 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800271a:	e01c      	b.n	8002756 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d903      	bls.n	800272a <DMA_CheckFifoParam+0xb6>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d003      	beq.n	8002730 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002728:	e018      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      break;
 800272e:	e015      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00e      	beq.n	800275a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e00b      	b.n	800275a <DMA_CheckFifoParam+0xe6>
      break;
 8002742:	bf00      	nop
 8002744:	e00a      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
 8002748:	e008      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
 800274c:	e006      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800274e:	bf00      	nop
 8002750:	e004      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;   
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800275a:	bf00      	nop
    }
  } 
  
  return status; 
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop

0800276c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800277e:	4b23      	ldr	r3, [pc, #140]	@ (800280c <HAL_FLASH_Program+0xa0>)
 8002780:	7e1b      	ldrb	r3, [r3, #24]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_FLASH_Program+0x1e>
 8002786:	2302      	movs	r3, #2
 8002788:	e03b      	b.n	8002802 <HAL_FLASH_Program+0x96>
 800278a:	4b20      	ldr	r3, [pc, #128]	@ (800280c <HAL_FLASH_Program+0xa0>)
 800278c:	2201      	movs	r2, #1
 800278e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002790:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002794:	f000 f870 	bl	8002878 <FLASH_WaitForLastOperation>
 8002798:	4603      	mov	r3, r0
 800279a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d12b      	bne.n	80027fa <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80027a8:	783b      	ldrb	r3, [r7, #0]
 80027aa:	4619      	mov	r1, r3
 80027ac:	68b8      	ldr	r0, [r7, #8]
 80027ae:	f000 f91b 	bl	80029e8 <FLASH_Program_Byte>
 80027b2:	e016      	b.n	80027e2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d105      	bne.n	80027c6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80027ba:	883b      	ldrh	r3, [r7, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	68b8      	ldr	r0, [r7, #8]
 80027c0:	f000 f8ee 	bl	80029a0 <FLASH_Program_HalfWord>
 80027c4:	e00d      	b.n	80027e2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d105      	bne.n	80027d8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	68b8      	ldr	r0, [r7, #8]
 80027d2:	f000 f8c3 	bl	800295c <FLASH_Program_Word>
 80027d6:	e004      	b.n	80027e2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80027d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027dc:	68b8      	ldr	r0, [r7, #8]
 80027de:	f000 f88b 	bl	80028f8 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027e2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80027e6:	f000 f847 	bl	8002878 <FLASH_WaitForLastOperation>
 80027ea:	4603      	mov	r3, r0
 80027ec:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80027ee:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <HAL_FLASH_Program+0xa4>)
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	4a07      	ldr	r2, [pc, #28]	@ (8002810 <HAL_FLASH_Program+0xa4>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027fa:	4b04      	ldr	r3, [pc, #16]	@ (800280c <HAL_FLASH_Program+0xa0>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	761a      	strb	r2, [r3, #24]

  return status;
 8002800:	7dfb      	ldrb	r3, [r7, #23]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000570 	.word	0x20000570
 8002810:	40023c00 	.word	0x40023c00

08002814 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800281e:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_FLASH_Unlock+0x38>)
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	da0b      	bge.n	800283e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002826:	4b09      	ldr	r3, [pc, #36]	@ (800284c <HAL_FLASH_Unlock+0x38>)
 8002828:	4a09      	ldr	r2, [pc, #36]	@ (8002850 <HAL_FLASH_Unlock+0x3c>)
 800282a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800282c:	4b07      	ldr	r3, [pc, #28]	@ (800284c <HAL_FLASH_Unlock+0x38>)
 800282e:	4a09      	ldr	r2, [pc, #36]	@ (8002854 <HAL_FLASH_Unlock+0x40>)
 8002830:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_FLASH_Unlock+0x38>)
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	da01      	bge.n	800283e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800283e:	79fb      	ldrb	r3, [r7, #7]
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	40023c00 	.word	0x40023c00
 8002850:	45670123 	.word	0x45670123
 8002854:	cdef89ab 	.word	0xcdef89ab

08002858 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800285c:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <HAL_FLASH_Lock+0x1c>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <HAL_FLASH_Lock+0x1c>)
 8002862:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002866:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40023c00 	.word	0x40023c00

08002878 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002884:	4b1a      	ldr	r3, [pc, #104]	@ (80028f0 <FLASH_WaitForLastOperation+0x78>)
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800288a:	f7ff fa11 	bl	8001cb0 <HAL_GetTick>
 800288e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002890:	e010      	b.n	80028b4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d00c      	beq.n	80028b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <FLASH_WaitForLastOperation+0x38>
 80028a0:	f7ff fa06 	bl	8001cb0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d201      	bcs.n	80028b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e019      	b.n	80028e8 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80028b4:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <FLASH_WaitForLastOperation+0x7c>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e8      	bne.n	8002892 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80028c0:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <FLASH_WaitForLastOperation+0x7c>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80028cc:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <FLASH_WaitForLastOperation+0x7c>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80028d2:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <FLASH_WaitForLastOperation+0x7c>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80028de:	f000 f8a5 	bl	8002a2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0

}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000570 	.word	0x20000570
 80028f4:	40023c00 	.word	0x40023c00

080028f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002904:	4b14      	ldr	r3, [pc, #80]	@ (8002958 <FLASH_Program_DoubleWord+0x60>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	4a13      	ldr	r2, [pc, #76]	@ (8002958 <FLASH_Program_DoubleWord+0x60>)
 800290a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800290e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002910:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <FLASH_Program_DoubleWord+0x60>)
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	4a10      	ldr	r2, [pc, #64]	@ (8002958 <FLASH_Program_DoubleWord+0x60>)
 8002916:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800291a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800291c:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <FLASH_Program_DoubleWord+0x60>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	4a0d      	ldr	r2, [pc, #52]	@ (8002958 <FLASH_Program_DoubleWord+0x60>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800292e:	f3bf 8f6f 	isb	sy
}
 8002932:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002934:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	000a      	movs	r2, r1
 8002942:	2300      	movs	r3, #0
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	3104      	adds	r1, #4
 8002948:	4613      	mov	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40023c00 	.word	0x40023c00

0800295c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <FLASH_Program_Word+0x40>)
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	4a0c      	ldr	r2, [pc, #48]	@ (800299c <FLASH_Program_Word+0x40>)
 800296c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002970:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <FLASH_Program_Word+0x40>)
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	4a09      	ldr	r2, [pc, #36]	@ (800299c <FLASH_Program_Word+0x40>)
 8002978:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800297c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <FLASH_Program_Word+0x40>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	4a06      	ldr	r2, [pc, #24]	@ (800299c <FLASH_Program_Word+0x40>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	601a      	str	r2, [r3, #0]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40023c00 	.word	0x40023c00

080029a0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029ac:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <FLASH_Program_HalfWord+0x44>)
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	4a0c      	ldr	r2, [pc, #48]	@ (80029e4 <FLASH_Program_HalfWord+0x44>)
 80029b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80029b8:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <FLASH_Program_HalfWord+0x44>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	4a09      	ldr	r2, [pc, #36]	@ (80029e4 <FLASH_Program_HalfWord+0x44>)
 80029be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029c4:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <FLASH_Program_HalfWord+0x44>)
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	4a06      	ldr	r2, [pc, #24]	@ (80029e4 <FLASH_Program_HalfWord+0x44>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	801a      	strh	r2, [r3, #0]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40023c00 	.word	0x40023c00

080029e8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <FLASH_Program_Byte+0x40>)
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002a28 <FLASH_Program_Byte+0x40>)
 80029fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002a00:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <FLASH_Program_Byte+0x40>)
 8002a02:	4a09      	ldr	r2, [pc, #36]	@ (8002a28 <FLASH_Program_Byte+0x40>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a08:	4b07      	ldr	r3, [pc, #28]	@ (8002a28 <FLASH_Program_Byte+0x40>)
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	4a06      	ldr	r2, [pc, #24]	@ (8002a28 <FLASH_Program_Byte+0x40>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	701a      	strb	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40023c00 	.word	0x40023c00

08002a2c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002a30:	4b27      	ldr	r3, [pc, #156]	@ (8002ad0 <FLASH_SetErrorCode+0xa4>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a3c:	4b25      	ldr	r3, [pc, #148]	@ (8002ad4 <FLASH_SetErrorCode+0xa8>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f043 0310 	orr.w	r3, r3, #16
 8002a44:	4a23      	ldr	r2, [pc, #140]	@ (8002ad4 <FLASH_SetErrorCode+0xa8>)
 8002a46:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002a48:	4b21      	ldr	r3, [pc, #132]	@ (8002ad0 <FLASH_SetErrorCode+0xa4>)
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002a4e:	4b20      	ldr	r3, [pc, #128]	@ (8002ad0 <FLASH_SetErrorCode+0xa4>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad4 <FLASH_SetErrorCode+0xa8>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f043 0308 	orr.w	r3, r3, #8
 8002a62:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad4 <FLASH_SetErrorCode+0xa8>)
 8002a64:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002a66:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad0 <FLASH_SetErrorCode+0xa4>)
 8002a68:	2220      	movs	r2, #32
 8002a6a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002a6c:	4b18      	ldr	r3, [pc, #96]	@ (8002ad0 <FLASH_SetErrorCode+0xa4>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002a78:	4b16      	ldr	r3, [pc, #88]	@ (8002ad4 <FLASH_SetErrorCode+0xa8>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	4a14      	ldr	r2, [pc, #80]	@ (8002ad4 <FLASH_SetErrorCode+0xa8>)
 8002a82:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002a84:	4b12      	ldr	r3, [pc, #72]	@ (8002ad0 <FLASH_SetErrorCode+0xa4>)
 8002a86:	2240      	movs	r2, #64	@ 0x40
 8002a88:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002a8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <FLASH_SetErrorCode+0xa4>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002a96:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <FLASH_SetErrorCode+0xa8>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f043 0302 	orr.w	r3, r3, #2
 8002a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad4 <FLASH_SetErrorCode+0xa8>)
 8002aa0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <FLASH_SetErrorCode+0xa4>)
 8002aa4:	2280      	movs	r2, #128	@ 0x80
 8002aa6:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002aa8:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <FLASH_SetErrorCode+0xa4>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002ab4:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <FLASH_SetErrorCode+0xa8>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f043 0320 	orr.w	r3, r3, #32
 8002abc:	4a05      	ldr	r2, [pc, #20]	@ (8002ad4 <FLASH_SetErrorCode+0xa8>)
 8002abe:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002ac0:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <FLASH_SetErrorCode+0xa4>)
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	60da      	str	r2, [r3, #12]
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40023c00 	.word	0x40023c00
 8002ad4:	20000570 	.word	0x20000570

08002ad8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002aea:	4b31      	ldr	r3, [pc, #196]	@ (8002bb0 <HAL_FLASHEx_Erase+0xd8>)
 8002aec:	7e1b      	ldrb	r3, [r3, #24]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_FLASHEx_Erase+0x1e>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e058      	b.n	8002ba8 <HAL_FLASHEx_Erase+0xd0>
 8002af6:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <HAL_FLASHEx_Erase+0xd8>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002afc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b00:	f7ff feba 	bl	8002878 <FLASH_WaitForLastOperation>
 8002b04:	4603      	mov	r3, r0
 8002b06:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d148      	bne.n	8002ba0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d115      	bne.n	8002b4a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	f000 f844 	bl	8002bb8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b30:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b34:	f7ff fea0 	bl	8002878 <FLASH_WaitForLastOperation>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb4 <HAL_FLASHEx_Erase+0xdc>)
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb4 <HAL_FLASHEx_Erase+0xdc>)
 8002b42:	f023 0304 	bic.w	r3, r3, #4
 8002b46:	6113      	str	r3, [r2, #16]
 8002b48:	e028      	b.n	8002b9c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	e01c      	b.n	8002b8c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	4619      	mov	r1, r3
 8002b5a:	68b8      	ldr	r0, [r7, #8]
 8002b5c:	f000 f850 	bl	8002c00 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b60:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b64:	f7ff fe88 	bl	8002878 <FLASH_WaitForLastOperation>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002b6c:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <HAL_FLASHEx_Erase+0xdc>)
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	4a10      	ldr	r2, [pc, #64]	@ (8002bb4 <HAL_FLASHEx_Erase+0xdc>)
 8002b72:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002b76:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	601a      	str	r2, [r3, #0]
          break;
 8002b84:	e00a      	b.n	8002b9c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4413      	add	r3, r2
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d3da      	bcc.n	8002b52 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002b9c:	f000 f878 	bl	8002c90 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002ba0:	4b03      	ldr	r3, [pc, #12]	@ (8002bb0 <HAL_FLASHEx_Erase+0xd8>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	761a      	strb	r2, [r3, #24]

  return status;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000570 	.word	0x20000570
 8002bb4:	40023c00 	.word	0x40023c00

08002bb8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	6039      	str	r1, [r7, #0]
 8002bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bfc <FLASH_MassErase+0x44>)
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002bfc <FLASH_MassErase+0x44>)
 8002bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <FLASH_MassErase+0x44>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <FLASH_MassErase+0x44>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002bdc:	4b07      	ldr	r3, [pc, #28]	@ (8002bfc <FLASH_MassErase+0x44>)
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	4313      	orrs	r3, r2
 8002be6:	4a05      	ldr	r2, [pc, #20]	@ (8002bfc <FLASH_MassErase+0x44>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bec:	6113      	str	r3, [r2, #16]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40023c00 	.word	0x40023c00

08002c00 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	e010      	b.n	8002c3e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d103      	bne.n	8002c2a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002c22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e009      	b.n	8002c3e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d103      	bne.n	8002c38 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002c30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e002      	b.n	8002c3e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002c38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c3e:	4b13      	ldr	r3, [pc, #76]	@ (8002c8c <FLASH_Erase_Sector+0x8c>)
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	4a12      	ldr	r2, [pc, #72]	@ (8002c8c <FLASH_Erase_Sector+0x8c>)
 8002c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002c4a:	4b10      	ldr	r3, [pc, #64]	@ (8002c8c <FLASH_Erase_Sector+0x8c>)
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	490f      	ldr	r1, [pc, #60]	@ (8002c8c <FLASH_Erase_Sector+0x8c>)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <FLASH_Erase_Sector+0x8c>)
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c8c <FLASH_Erase_Sector+0x8c>)
 8002c5c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002c60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002c62:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <FLASH_Erase_Sector+0x8c>)
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	4a07      	ldr	r2, [pc, #28]	@ (8002c8c <FLASH_Erase_Sector+0x8c>)
 8002c6e:	f043 0302 	orr.w	r3, r3, #2
 8002c72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002c74:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <FLASH_Erase_Sector+0x8c>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	4a04      	ldr	r2, [pc, #16]	@ (8002c8c <FLASH_Erase_Sector+0x8c>)
 8002c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7e:	6113      	str	r3, [r2, #16]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	40023c00 	.word	0x40023c00

08002c90 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002c94:	4b20      	ldr	r3, [pc, #128]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002ca6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002caa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002cac:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a19      	ldr	r2, [pc, #100]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002cb2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b17      	ldr	r3, [pc, #92]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a16      	ldr	r2, [pc, #88]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002cbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cc2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc4:	4b14      	ldr	r3, [pc, #80]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a13      	ldr	r2, [pc, #76]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002cd0:	4b11      	ldr	r3, [pc, #68]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d017      	beq.n	8002d0c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002ce2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ce6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0a      	ldr	r2, [pc, #40]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002cee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a07      	ldr	r2, [pc, #28]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002cfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cfe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a04      	ldr	r2, [pc, #16]	@ (8002d18 <FLASH_FlushCaches+0x88>)
 8002d06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d0a:	6013      	str	r3, [r2, #0]
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40023c00 	.word	0x40023c00

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	e16b      	b.n	8003010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d38:	2201      	movs	r2, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	f040 815a 	bne.w	800300a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d005      	beq.n	8002d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d130      	bne.n	8002dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	2203      	movs	r2, #3
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da4:	2201      	movs	r2, #1
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 0201 	and.w	r2, r3, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d017      	beq.n	8002e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	2203      	movs	r2, #3
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d123      	bne.n	8002e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	08da      	lsrs	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3208      	adds	r2, #8
 8002e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	220f      	movs	r2, #15
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	08da      	lsrs	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3208      	adds	r2, #8
 8002e5a:	69b9      	ldr	r1, [r7, #24]
 8002e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0203 	and.w	r2, r3, #3
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80b4 	beq.w	800300a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b60      	ldr	r3, [pc, #384]	@ (8003028 <HAL_GPIO_Init+0x30c>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	4a5f      	ldr	r2, [pc, #380]	@ (8003028 <HAL_GPIO_Init+0x30c>)
 8002eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8003028 <HAL_GPIO_Init+0x30c>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800302c <HAL_GPIO_Init+0x310>)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a52      	ldr	r2, [pc, #328]	@ (8003030 <HAL_GPIO_Init+0x314>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d02b      	beq.n	8002f42 <HAL_GPIO_Init+0x226>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a51      	ldr	r2, [pc, #324]	@ (8003034 <HAL_GPIO_Init+0x318>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d025      	beq.n	8002f3e <HAL_GPIO_Init+0x222>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a50      	ldr	r2, [pc, #320]	@ (8003038 <HAL_GPIO_Init+0x31c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01f      	beq.n	8002f3a <HAL_GPIO_Init+0x21e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4f      	ldr	r2, [pc, #316]	@ (800303c <HAL_GPIO_Init+0x320>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d019      	beq.n	8002f36 <HAL_GPIO_Init+0x21a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4e      	ldr	r2, [pc, #312]	@ (8003040 <HAL_GPIO_Init+0x324>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_GPIO_Init+0x216>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8003044 <HAL_GPIO_Init+0x328>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00d      	beq.n	8002f2e <HAL_GPIO_Init+0x212>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4c      	ldr	r2, [pc, #304]	@ (8003048 <HAL_GPIO_Init+0x32c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <HAL_GPIO_Init+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800304c <HAL_GPIO_Init+0x330>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_GPIO_Init+0x20a>
 8002f22:	2307      	movs	r3, #7
 8002f24:	e00e      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f26:	2308      	movs	r3, #8
 8002f28:	e00c      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	e00a      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f2e:	2305      	movs	r3, #5
 8002f30:	e008      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e006      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e004      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e002      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f42:	2300      	movs	r3, #0
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	f002 0203 	and.w	r2, r2, #3
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	4093      	lsls	r3, r2
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f54:	4935      	ldr	r1, [pc, #212]	@ (800302c <HAL_GPIO_Init+0x310>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f62:	4b3b      	ldr	r3, [pc, #236]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f86:	4a32      	ldr	r2, [pc, #200]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f8c:	4b30      	ldr	r3, [pc, #192]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb0:	4a27      	ldr	r2, [pc, #156]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fb6:	4b26      	ldr	r3, [pc, #152]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fda:	4a1d      	ldr	r2, [pc, #116]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003004:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3301      	adds	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b0f      	cmp	r3, #15
 8003014:	f67f ae90 	bls.w	8002d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3724      	adds	r7, #36	@ 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	40013800 	.word	0x40013800
 8003030:	40020000 	.word	0x40020000
 8003034:	40020400 	.word	0x40020400
 8003038:	40020800 	.word	0x40020800
 800303c:	40020c00 	.word	0x40020c00
 8003040:	40021000 	.word	0x40021000
 8003044:	40021400 	.word	0x40021400
 8003048:	40021800 	.word	0x40021800
 800304c:	40021c00 	.word	0x40021c00
 8003050:	40013c00 	.word	0x40013c00

08003054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
 8003060:	4613      	mov	r3, r2
 8003062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003064:	787b      	ldrb	r3, [r7, #1]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003070:	e003      	b.n	800307a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003072:	887b      	ldrh	r3, [r7, #2]
 8003074:	041a      	lsls	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	619a      	str	r2, [r3, #24]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e267      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d075      	beq.n	8003192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030a6:	4b88      	ldr	r3, [pc, #544]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d00c      	beq.n	80030cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b2:	4b85      	ldr	r3, [pc, #532]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d112      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030be:	4b82      	ldr	r3, [pc, #520]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030ca:	d10b      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	4b7e      	ldr	r3, [pc, #504]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d05b      	beq.n	8003190 <HAL_RCC_OscConfig+0x108>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d157      	bne.n	8003190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e242      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ec:	d106      	bne.n	80030fc <HAL_RCC_OscConfig+0x74>
 80030ee:	4b76      	ldr	r3, [pc, #472]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a75      	ldr	r2, [pc, #468]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e01d      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x98>
 8003106:	4b70      	ldr	r3, [pc, #448]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6f      	ldr	r2, [pc, #444]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b6d      	ldr	r3, [pc, #436]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6c      	ldr	r2, [pc, #432]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 8003120:	4b69      	ldr	r3, [pc, #420]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a68      	ldr	r2, [pc, #416]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b66      	ldr	r3, [pc, #408]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a65      	ldr	r2, [pc, #404]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fdb6 	bl	8001cb0 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fdb2 	bl	8001cb0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	@ 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e207      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	4b5b      	ldr	r3, [pc, #364]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0xc0>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fda2 	bl	8001cb0 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003170:	f7fe fd9e 	bl	8001cb0 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	@ 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1f3      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	4b51      	ldr	r3, [pc, #324]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0xe8>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d063      	beq.n	8003266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800319e:	4b4a      	ldr	r3, [pc, #296]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031aa:	4b47      	ldr	r3, [pc, #284]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d11c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b44      	ldr	r3, [pc, #272]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x152>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1c7      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b3b      	ldr	r3, [pc, #236]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4937      	ldr	r1, [pc, #220]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	e03a      	b.n	8003266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f8:	4b34      	ldr	r3, [pc, #208]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fe fd57 	bl	8001cb0 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003206:	f7fe fd53 	bl	8001cb0 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1a8      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	4b2b      	ldr	r3, [pc, #172]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b28      	ldr	r3, [pc, #160]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4925      	ldr	r1, [pc, #148]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fd36 	bl	8001cb0 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003248:	f7fe fd32 	bl	8001cb0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e187      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d036      	beq.n	80032e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327a:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <HAL_RCC_OscConfig+0x248>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fe fd16 	bl	8001cb0 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003288:	f7fe fd12 	bl	8001cb0 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e167      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800329c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x200>
 80032a6:	e01b      	b.n	80032e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a8:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <HAL_RCC_OscConfig+0x248>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ae:	f7fe fcff 	bl	8001cb0 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	e00e      	b.n	80032d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b6:	f7fe fcfb 	bl	8001cb0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d907      	bls.n	80032d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e150      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	42470000 	.word	0x42470000
 80032d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b88      	ldr	r3, [pc, #544]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ea      	bne.n	80032b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8097 	beq.w	800341c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f2:	4b81      	ldr	r3, [pc, #516]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	4b7d      	ldr	r3, [pc, #500]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	4a7c      	ldr	r2, [pc, #496]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	@ 0x40
 800330e:	4b7a      	ldr	r3, [pc, #488]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b77      	ldr	r3, [pc, #476]	@ (80034fc <HAL_RCC_OscConfig+0x474>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d118      	bne.n	800335c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332a:	4b74      	ldr	r3, [pc, #464]	@ (80034fc <HAL_RCC_OscConfig+0x474>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a73      	ldr	r2, [pc, #460]	@ (80034fc <HAL_RCC_OscConfig+0x474>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003336:	f7fe fcbb 	bl	8001cb0 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7fe fcb7 	bl	8001cb0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e10c      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b6a      	ldr	r3, [pc, #424]	@ (80034fc <HAL_RCC_OscConfig+0x474>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x2ea>
 8003364:	4b64      	ldr	r3, [pc, #400]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003368:	4a63      	ldr	r2, [pc, #396]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003370:	e01c      	b.n	80033ac <HAL_RCC_OscConfig+0x324>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x30c>
 800337a:	4b5f      	ldr	r3, [pc, #380]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337e:	4a5e      	ldr	r2, [pc, #376]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	@ 0x70
 8003386:	4b5c      	ldr	r3, [pc, #368]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338a:	4a5b      	ldr	r2, [pc, #364]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6713      	str	r3, [r2, #112]	@ 0x70
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0x324>
 8003394:	4b58      	ldr	r3, [pc, #352]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003398:	4a57      	ldr	r2, [pc, #348]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a0:	4b55      	ldr	r3, [pc, #340]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	4a54      	ldr	r2, [pc, #336]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe fc7c 	bl	8001cb0 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fe fc78 	bl	8001cb0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0cb      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	4b49      	ldr	r3, [pc, #292]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0ee      	beq.n	80033bc <HAL_RCC_OscConfig+0x334>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7fe fc66 	bl	8001cb0 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fe fc62 	bl	8001cb0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0b5      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fe:	4b3e      	ldr	r3, [pc, #248]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ee      	bne.n	80033e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b39      	ldr	r3, [pc, #228]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	4a38      	ldr	r2, [pc, #224]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800341a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80a1 	beq.w	8003568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003426:	4b34      	ldr	r3, [pc, #208]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b08      	cmp	r3, #8
 8003430:	d05c      	beq.n	80034ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d141      	bne.n	80034be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b31      	ldr	r3, [pc, #196]	@ (8003500 <HAL_RCC_OscConfig+0x478>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fe fc36 	bl	8001cb0 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe fc32 	bl	8001cb0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e087      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b27      	ldr	r3, [pc, #156]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	491b      	ldr	r1, [pc, #108]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <HAL_RCC_OscConfig+0x478>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fe fc0b 	bl	8001cb0 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7fe fc07 	bl	8001cb0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e05c      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x416>
 80034bc:	e054      	b.n	8003568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <HAL_RCC_OscConfig+0x478>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe fbf4 	bl	8001cb0 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe fbf0 	bl	8001cb0 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e045      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x444>
 80034ea:	e03d      	b.n	8003568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e038      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40007000 	.word	0x40007000
 8003500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003504:	4b1b      	ldr	r3, [pc, #108]	@ (8003574 <HAL_RCC_OscConfig+0x4ec>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d028      	beq.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d121      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d11a      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800353a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800353c:	4293      	cmp	r3, r2
 800353e:	d111      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d107      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0cc      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b68      	ldr	r3, [pc, #416]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d90c      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b65      	ldr	r3, [pc, #404]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b63      	ldr	r3, [pc, #396]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b8      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035cc:	4b59      	ldr	r3, [pc, #356]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a58      	ldr	r2, [pc, #352]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e4:	4b53      	ldr	r3, [pc, #332]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a52      	ldr	r2, [pc, #328]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b50      	ldr	r3, [pc, #320]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	494d      	ldr	r1, [pc, #308]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d044      	beq.n	8003698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b47      	ldr	r3, [pc, #284]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d119      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d003      	beq.n	8003636 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003632:	2b03      	cmp	r3, #3
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003636:	4b3f      	ldr	r3, [pc, #252]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e06f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	4b3b      	ldr	r3, [pc, #236]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e067      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b37      	ldr	r3, [pc, #220]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4934      	ldr	r1, [pc, #208]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7fe fb22 	bl	8001cb0 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e00a      	b.n	8003686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7fe fb1e 	bl	8001cb0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e04f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b2b      	ldr	r3, [pc, #172]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 020c 	and.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1eb      	bne.n	8003670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b25      	ldr	r3, [pc, #148]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d20c      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b22      	ldr	r3, [pc, #136]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b20      	ldr	r3, [pc, #128]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e032      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036cc:	4b19      	ldr	r3, [pc, #100]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4916      	ldr	r1, [pc, #88]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ea:	4b12      	ldr	r3, [pc, #72]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	490e      	ldr	r1, [pc, #56]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036fe:	f000 f821 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8003702:	4602      	mov	r2, r0
 8003704:	4b0b      	ldr	r3, [pc, #44]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	490a      	ldr	r1, [pc, #40]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	5ccb      	ldrb	r3, [r1, r3]
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	4a09      	ldr	r2, [pc, #36]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800371a:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fa82 	bl	8001c28 <HAL_InitTick>

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023c00 	.word	0x40023c00
 8003734:	40023800 	.word	0x40023800
 8003738:	08010d48 	.word	0x08010d48
 800373c:	20000000 	.word	0x20000000
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003748:	b090      	sub	sp, #64	@ 0x40
 800374a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800375c:	4b59      	ldr	r3, [pc, #356]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b08      	cmp	r3, #8
 8003766:	d00d      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x40>
 8003768:	2b08      	cmp	r3, #8
 800376a:	f200 80a1 	bhi.w	80038b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x34>
 8003772:	2b04      	cmp	r3, #4
 8003774:	d003      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0x3a>
 8003776:	e09b      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b53      	ldr	r3, [pc, #332]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800377a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800377c:	e09b      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800377e:	4b53      	ldr	r3, [pc, #332]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003780:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003782:	e098      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003784:	4b4f      	ldr	r3, [pc, #316]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800378c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800378e:	4b4d      	ldr	r3, [pc, #308]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d028      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379a:	4b4a      	ldr	r3, [pc, #296]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	099b      	lsrs	r3, r3, #6
 80037a0:	2200      	movs	r2, #0
 80037a2:	623b      	str	r3, [r7, #32]
 80037a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037ac:	2100      	movs	r1, #0
 80037ae:	4b47      	ldr	r3, [pc, #284]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x188>)
 80037b0:	fb03 f201 	mul.w	r2, r3, r1
 80037b4:	2300      	movs	r3, #0
 80037b6:	fb00 f303 	mul.w	r3, r0, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	4a43      	ldr	r2, [pc, #268]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x188>)
 80037be:	fba0 1202 	umull	r1, r2, r0, r2
 80037c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037c4:	460a      	mov	r2, r1
 80037c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80037c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ca:	4413      	add	r3, r2
 80037cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d0:	2200      	movs	r2, #0
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	61fa      	str	r2, [r7, #28]
 80037d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80037de:	f7fd f985 	bl	8000aec <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4613      	mov	r3, r2
 80037e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037ea:	e053      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ec:	4b35      	ldr	r3, [pc, #212]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	2200      	movs	r2, #0
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	617a      	str	r2, [r7, #20]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037fe:	f04f 0b00 	mov.w	fp, #0
 8003802:	4652      	mov	r2, sl
 8003804:	465b      	mov	r3, fp
 8003806:	f04f 0000 	mov.w	r0, #0
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	0159      	lsls	r1, r3, #5
 8003810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003814:	0150      	lsls	r0, r2, #5
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	ebb2 080a 	subs.w	r8, r2, sl
 800381e:	eb63 090b 	sbc.w	r9, r3, fp
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800382e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003832:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003836:	ebb2 0408 	subs.w	r4, r2, r8
 800383a:	eb63 0509 	sbc.w	r5, r3, r9
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	00eb      	lsls	r3, r5, #3
 8003848:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800384c:	00e2      	lsls	r2, r4, #3
 800384e:	4614      	mov	r4, r2
 8003850:	461d      	mov	r5, r3
 8003852:	eb14 030a 	adds.w	r3, r4, sl
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	eb45 030b 	adc.w	r3, r5, fp
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800386a:	4629      	mov	r1, r5
 800386c:	028b      	lsls	r3, r1, #10
 800386e:	4621      	mov	r1, r4
 8003870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003874:	4621      	mov	r1, r4
 8003876:	028a      	lsls	r2, r1, #10
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387e:	2200      	movs	r2, #0
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	60fa      	str	r2, [r7, #12]
 8003884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003888:	f7fd f930 	bl	8000aec <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4613      	mov	r3, r2
 8003892:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003894:	4b0b      	ldr	r3, [pc, #44]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	3301      	adds	r3, #1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80038a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038ae:	e002      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b0:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80038b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3740      	adds	r7, #64	@ 0x40
 80038bc:	46bd      	mov	sp, r7
 80038be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	00f42400 	.word	0x00f42400
 80038cc:	017d7840 	.word	0x017d7840

080038d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d4:	4b03      	ldr	r3, [pc, #12]	@ (80038e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000000 	.word	0x20000000

080038e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038ec:	f7ff fff0 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	0a9b      	lsrs	r3, r3, #10
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4903      	ldr	r1, [pc, #12]	@ (800390c <HAL_RCC_GetPCLK1Freq+0x24>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40023800 	.word	0x40023800
 800390c:	08010d58 	.word	0x08010d58

08003910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003914:	f7ff ffdc 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0b5b      	lsrs	r3, r3, #13
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	@ (8003934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	08010d58 	.word	0x08010d58

08003938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e07b      	b.n	8003a42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	2b00      	cmp	r3, #0
 8003950:	d108      	bne.n	8003964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800395a:	d009      	beq.n	8003970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	61da      	str	r2, [r3, #28]
 8003962:	e005      	b.n	8003970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fc9e 	bl	80012cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f4:	ea42 0103 	orr.w	r1, r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	0c1b      	lsrs	r3, r3, #16
 8003a0e:	f003 0104 	and.w	r1, r3, #4
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	f003 0210 	and.w	r2, r3, #16
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b088      	sub	sp, #32
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a5a:	f7fe f929 	bl	8001cb0 <HAL_GetTick>
 8003a5e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d001      	beq.n	8003a74 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
 8003a72:	e12a      	b.n	8003cca <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_SPI_Transmit+0x36>
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e122      	b.n	8003cca <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_SPI_Transmit+0x48>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e11b      	b.n	8003cca <HAL_SPI_Transmit+0x280>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	88fa      	ldrh	r2, [r7, #6]
 8003ab2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ae0:	d10f      	bne.n	8003b02 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003af0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0c:	2b40      	cmp	r3, #64	@ 0x40
 8003b0e:	d007      	beq.n	8003b20 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b28:	d152      	bne.n	8003bd0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_SPI_Transmit+0xee>
 8003b32:	8b7b      	ldrh	r3, [r7, #26]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d145      	bne.n	8003bc4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3c:	881a      	ldrh	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b48:	1c9a      	adds	r2, r3, #2
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b5c:	e032      	b.n	8003bc4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d112      	bne.n	8003b92 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b90:	e018      	b.n	8003bc4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b92:	f7fe f88d 	bl	8001cb0 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d803      	bhi.n	8003baa <HAL_SPI_Transmit+0x160>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d102      	bne.n	8003bb0 <HAL_SPI_Transmit+0x166>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e082      	b.n	8003cca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1c7      	bne.n	8003b5e <HAL_SPI_Transmit+0x114>
 8003bce:	e053      	b.n	8003c78 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_SPI_Transmit+0x194>
 8003bd8:	8b7b      	ldrh	r3, [r7, #26]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d147      	bne.n	8003c6e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	7812      	ldrb	r2, [r2, #0]
 8003bea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c04:	e033      	b.n	8003c6e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d113      	bne.n	8003c3c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c3a:	e018      	b.n	8003c6e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c3c:	f7fe f838 	bl	8001cb0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d803      	bhi.n	8003c54 <HAL_SPI_Transmit+0x20a>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d102      	bne.n	8003c5a <HAL_SPI_Transmit+0x210>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e02d      	b.n	8003cca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1c6      	bne.n	8003c06 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	6839      	ldr	r1, [r7, #0]
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fe11 	bl	80048a4 <SPI_EndRxTxTransaction>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d001      	beq.n	8003cf2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e097      	b.n	8003e22 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_SPI_Transmit_DMA+0x2a>
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e08f      	b.n	8003e22 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_SPI_Transmit_DMA+0x3c>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e088      	b.n	8003e22 <HAL_SPI_Transmit_DMA+0x14e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	88fa      	ldrh	r2, [r7, #6]
 8003d30:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	88fa      	ldrh	r2, [r7, #6]
 8003d36:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d5e:	d10f      	bne.n	8003d80 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d84:	4a29      	ldr	r2, [pc, #164]	@ (8003e2c <HAL_SPI_Transmit_DMA+0x158>)
 8003d86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d8c:	4a28      	ldr	r2, [pc, #160]	@ (8003e30 <HAL_SPI_Transmit_DMA+0x15c>)
 8003d8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d94:	4a27      	ldr	r2, [pc, #156]	@ (8003e34 <HAL_SPI_Transmit_DMA+0x160>)
 8003d96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	4619      	mov	r1, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003db6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003db8:	f7fe f984 	bl	80020c4 <HAL_DMA_Start_IT>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc6:	f043 0210 	orr.w	r2, r3, #16
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e023      	b.n	8003e22 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de4:	2b40      	cmp	r3, #64	@ 0x40
 8003de6:	d007      	beq.n	8003df8 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003df6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0220 	orr.w	r2, r2, #32
 8003e0e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0202 	orr.w	r2, r2, #2
 8003e1e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	0800460d 	.word	0x0800460d
 8003e30:	0800442d 	.word	0x0800442d
 8003e34:	08004661 	.word	0x08004661

08003e38 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d001      	beq.n	8003e56 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
 8003e54:	e0a9      	b.n	8003faa <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d110      	bne.n	8003e80 <HAL_SPI_Receive_DMA+0x48>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e66:	d10b      	bne.n	8003e80 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f8a2 	bl	8003fc0 <HAL_SPI_TransmitReceive_DMA>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	e094      	b.n	8003faa <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_SPI_Receive_DMA+0x54>
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e08c      	b.n	8003faa <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_SPI_Receive_DMA+0x66>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e085      	b.n	8003faa <HAL_SPI_Receive_DMA+0x172>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	88fa      	ldrh	r2, [r7, #6]
 8003ebe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee6:	d10f      	bne.n	8003f08 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ef6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0c:	4a29      	ldr	r2, [pc, #164]	@ (8003fb4 <HAL_SPI_Receive_DMA+0x17c>)
 8003f0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f14:	4a28      	ldr	r2, [pc, #160]	@ (8003fb8 <HAL_SPI_Receive_DMA+0x180>)
 8003f16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f1c:	4a27      	ldr	r2, [pc, #156]	@ (8003fbc <HAL_SPI_Receive_DMA+0x184>)
 8003f1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f24:	2200      	movs	r2, #0
 8003f26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	4619      	mov	r1, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f38:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f40:	f7fe f8c0 	bl	80020c4 <HAL_DMA_Start_IT>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4e:	f043 0210 	orr.w	r2, r3, #16
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e023      	b.n	8003faa <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6c:	2b40      	cmp	r3, #64	@ 0x40
 8003f6e:	d007      	beq.n	8003f80 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f7e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0220 	orr.w	r2, r2, #32
 8003f96:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	08004629 	.word	0x08004629
 8003fb8:	080044d5 	.word	0x080044d5
 8003fbc:	08004661 	.word	0x08004661

08003fc0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fd4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d00c      	beq.n	8003ffc <HAL_SPI_TransmitReceive_DMA+0x3c>
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fe8:	d106      	bne.n	8003ff8 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <HAL_SPI_TransmitReceive_DMA+0x38>
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d001      	beq.n	8003ffc <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e0cf      	b.n	800419c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e0c4      	b.n	800419c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_SPI_TransmitReceive_DMA+0x60>
 800401c:	2302      	movs	r3, #2
 800401e:	e0bd      	b.n	800419c <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b04      	cmp	r3, #4
 8004032:	d003      	beq.n	800403c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2205      	movs	r2, #5
 8004038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	887a      	ldrh	r2, [r7, #2]
 800404c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	887a      	ldrh	r2, [r7, #2]
 8004052:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	887a      	ldrh	r2, [r7, #2]
 800405e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	887a      	ldrh	r2, [r7, #2]
 8004064:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b04      	cmp	r3, #4
 800407c:	d108      	bne.n	8004090 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004082:	4a48      	ldr	r2, [pc, #288]	@ (80041a4 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8004084:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800408a:	4a47      	ldr	r2, [pc, #284]	@ (80041a8 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800408c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800408e:	e007      	b.n	80040a0 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004094:	4a45      	ldr	r2, [pc, #276]	@ (80041ac <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409c:	4a44      	ldr	r2, [pc, #272]	@ (80041b0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800409e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a4:	4a43      	ldr	r2, [pc, #268]	@ (80041b4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80040a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ac:	2200      	movs	r2, #0
 80040ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	330c      	adds	r3, #12
 80040ba:	4619      	mov	r1, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80040c8:	f7fd fffc 	bl	80020c4 <HAL_DMA_Start_IT>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d6:	f043 0210 	orr.w	r2, r3, #16
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e058      	b.n	800419c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040fe:	2200      	movs	r2, #0
 8004100:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004106:	2200      	movs	r2, #0
 8004108:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800410e:	2200      	movs	r2, #0
 8004110:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004116:	2200      	movs	r2, #0
 8004118:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	4619      	mov	r1, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004130:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004132:	f7fd ffc7 	bl	80020c4 <HAL_DMA_Start_IT>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00b      	beq.n	8004154 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004140:	f043 0210 	orr.w	r2, r3, #16
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e023      	b.n	800419c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415e:	2b40      	cmp	r3, #64	@ 0x40
 8004160:	d007      	beq.n	8004172 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004170:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0220 	orr.w	r2, r2, #32
 8004188:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0202 	orr.w	r2, r2, #2
 8004198:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	08004629 	.word	0x08004629
 80041a8:	080044d5 	.word	0x080044d5
 80041ac:	08004645 	.word	0x08004645
 80041b0:	0800457d 	.word	0x0800457d
 80041b4:	08004661 	.word	0x08004661

080041b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10e      	bne.n	80041f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d009      	beq.n	80041f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	4798      	blx	r3
    return;
 80041f6:	e0ce      	b.n	8004396 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_SPI_IRQHandler+0x5e>
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
    return;
 8004214:	e0bf      	b.n	8004396 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <HAL_SPI_IRQHandler+0x7e>
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d105      	bne.n	8004236 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80b0 	beq.w	8004396 <HAL_SPI_IRQHandler+0x1de>
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80aa 	beq.w	8004396 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d023      	beq.n	8004294 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b03      	cmp	r3, #3
 8004256:	d011      	beq.n	800427c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425c:	f043 0204 	orr.w	r2, r3, #4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	e00b      	b.n	8004294 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]
        return;
 8004292:	e080      	b.n	8004396 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d014      	beq.n	80042c8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a2:	f043 0201 	orr.w	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00c      	beq.n	80042ec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d6:	f043 0208 	orr.w	r2, r3, #8
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d04f      	beq.n	8004394 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004302:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d104      	bne.n	8004320 <HAL_SPI_IRQHandler+0x168>
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d034      	beq.n	800438a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0203 	bic.w	r2, r2, #3
 800432e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d011      	beq.n	800435c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433c:	4a17      	ldr	r2, [pc, #92]	@ (800439c <HAL_SPI_IRQHandler+0x1e4>)
 800433e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004344:	4618      	mov	r0, r3
 8004346:	f7fd ff85 	bl	8002254 <HAL_DMA_Abort_IT>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004354:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004360:	2b00      	cmp	r3, #0
 8004362:	d016      	beq.n	8004392 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004368:	4a0c      	ldr	r2, [pc, #48]	@ (800439c <HAL_SPI_IRQHandler+0x1e4>)
 800436a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004370:	4618      	mov	r0, r3
 8004372:	f7fd ff6f 	bl	8002254 <HAL_DMA_Abort_IT>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004380:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004388:	e003      	b.n	8004392 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f844 	bl	8004418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004390:	e000      	b.n	8004394 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004392:	bf00      	nop
    return;
 8004394:	bf00      	nop
  }
}
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	080046a1 	.word	0x080046a1

080043a0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800443a:	f7fd fc39 	bl	8001cb0 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800444e:	d03b      	beq.n	80044c8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0220 	bic.w	r2, r2, #32
 800445e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0202 	bic.w	r2, r2, #2
 800446e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	2164      	movs	r1, #100	@ 0x64
 8004474:	6978      	ldr	r0, [r7, #20]
 8004476:	f000 fa15 	bl	80048a4 <SPI_EndRxTxTransaction>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004484:	f043 0220 	orr.w	r2, r3, #32
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80044c0:	6978      	ldr	r0, [r7, #20]
 80044c2:	f7ff ffa9 	bl	8004418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80044c6:	e002      	b.n	80044ce <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80044c8:	6978      	ldr	r0, [r7, #20]
 80044ca:	f7ff ff69 	bl	80043a0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044e2:	f7fd fbe5 	bl	8001cb0 <HAL_GetTick>
 80044e6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f6:	d03b      	beq.n	8004570 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0220 	bic.w	r2, r2, #32
 8004506:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <SPI_DMAReceiveCplt+0x58>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004518:	d108      	bne.n	800452c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0203 	bic.w	r2, r2, #3
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	e007      	b.n	800453c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	2164      	movs	r1, #100	@ 0x64
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f949 	bl	80047d8 <SPI_EndRxTransaction>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7ff ff55 	bl	8004418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800456e:	e002      	b.n	8004576 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff ff1f 	bl	80043b4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004588:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800458a:	f7fd fb91 	bl	8001cb0 <HAL_GetTick>
 800458e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459e:	d02f      	beq.n	8004600 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0220 	bic.w	r2, r2, #32
 80045ae:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	2164      	movs	r1, #100	@ 0x64
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f975 	bl	80048a4 <SPI_EndRxTxTransaction>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0203 	bic.w	r2, r2, #3
 80045da:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff ff0d 	bl	8004418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80045fe:	e002      	b.n	8004606 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff fee1 	bl	80043c8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff fede 	bl	80043dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004634:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7ff feda 	bl	80043f0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004650:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7ff fed6 	bl	8004404 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0203 	bic.w	r2, r2, #3
 800467c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004682:	f043 0210 	orr.w	r2, r3, #16
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff fec0 	bl	8004418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff feac 	bl	8004418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046d8:	f7fd faea 	bl	8001cb0 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046e8:	f7fd fae2 	bl	8001cb0 <HAL_GetTick>
 80046ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ee:	4b39      	ldr	r3, [pc, #228]	@ (80047d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	015b      	lsls	r3, r3, #5
 80046f4:	0d1b      	lsrs	r3, r3, #20
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	fb02 f303 	mul.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046fe:	e054      	b.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d050      	beq.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004708:	f7fd fad2 	bl	8001cb0 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	429a      	cmp	r2, r3
 8004716:	d902      	bls.n	800471e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d13d      	bne.n	800479a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800472c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004736:	d111      	bne.n	800475c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004740:	d004      	beq.n	800474c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474a:	d107      	bne.n	800475c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800475a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004764:	d10f      	bne.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e017      	b.n	80047ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	bf0c      	ite	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	2300      	movne	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d19b      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000000 	.word	0x20000000

080047d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ec:	d111      	bne.n	8004812 <SPI_EndRxTransaction+0x3a>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f6:	d004      	beq.n	8004802 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004800:	d107      	bne.n	8004812 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004810:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800481a:	d12a      	bne.n	8004872 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004824:	d012      	beq.n	800484c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2200      	movs	r2, #0
 800482e:	2180      	movs	r1, #128	@ 0x80
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff ff49 	bl	80046c8 <SPI_WaitFlagStateUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d02d      	beq.n	8004898 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004840:	f043 0220 	orr.w	r2, r3, #32
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e026      	b.n	800489a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2200      	movs	r2, #0
 8004854:	2101      	movs	r1, #1
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7ff ff36 	bl	80046c8 <SPI_WaitFlagStateUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01a      	beq.n	8004898 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004866:	f043 0220 	orr.w	r2, r3, #32
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e013      	b.n	800489a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2200      	movs	r2, #0
 800487a:	2101      	movs	r1, #1
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f7ff ff23 	bl	80046c8 <SPI_WaitFlagStateUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800488c:	f043 0220 	orr.w	r2, r3, #32
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e000      	b.n	800489a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2201      	movs	r2, #1
 80048b8:	2102      	movs	r1, #2
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff ff04 	bl	80046c8 <SPI_WaitFlagStateUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ca:	f043 0220 	orr.w	r2, r3, #32
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e032      	b.n	800493c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004944 <SPI_EndRxTxTransaction+0xa0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1b      	ldr	r2, [pc, #108]	@ (8004948 <SPI_EndRxTxTransaction+0xa4>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	0d5b      	lsrs	r3, r3, #21
 80048e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048f4:	d112      	bne.n	800491c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2200      	movs	r2, #0
 80048fe:	2180      	movs	r1, #128	@ 0x80
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f7ff fee1 	bl	80046c8 <SPI_WaitFlagStateUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d016      	beq.n	800493a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004910:	f043 0220 	orr.w	r2, r3, #32
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e00f      	b.n	800493c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	3b01      	subs	r3, #1
 8004926:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004932:	2b80      	cmp	r3, #128	@ 0x80
 8004934:	d0f2      	beq.n	800491c <SPI_EndRxTxTransaction+0x78>
 8004936:	e000      	b.n	800493a <SPI_EndRxTxTransaction+0x96>
        break;
 8004938:	bf00      	nop
  }

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000000 	.word	0x20000000
 8004948:	165e9f81 	.word	0x165e9f81

0800494c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e041      	b.n	80049e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fc fea6 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f000 f9c0 	bl	8004d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d001      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e04e      	b.n	8004aa2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a23      	ldr	r2, [pc, #140]	@ (8004ab0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d022      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x80>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2e:	d01d      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x80>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d018      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x80>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x80>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1c      	ldr	r2, [pc, #112]	@ (8004abc <HAL_TIM_Base_Start_IT+0xd0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00e      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x80>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x80>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a19      	ldr	r2, [pc, #100]	@ (8004ac4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x80>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a18      	ldr	r2, [pc, #96]	@ (8004ac8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d111      	bne.n	8004a90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d010      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8e:	e007      	b.n	8004aa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40010400 	.word	0x40010400
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40001800 	.word	0x40001800

08004acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d020      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01b      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0202 	mvn.w	r2, #2
 8004b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f8dc 	bl	8004cd4 <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8ce 	bl	8004cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f8df 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d020      	beq.n	8004b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01b      	beq.n	8004b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0204 	mvn.w	r2, #4
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f8b6 	bl	8004cd4 <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f8a8 	bl	8004cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f8b9 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d020      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0208 	mvn.w	r2, #8
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f890 	bl	8004cd4 <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f882 	bl	8004cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f893 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d020      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0210 	mvn.w	r2, #16
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2208      	movs	r2, #8
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f86a 	bl	8004cd4 <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f85c 	bl	8004cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f86d 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00c      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0201 	mvn.w	r2, #1
 8004c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f83a 	bl	8004cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00c      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f910 	bl	8004e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f83e 	bl	8004cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00c      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0220 	mvn.w	r2, #32
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f8e2 	bl	8004e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a46      	ldr	r2, [pc, #280]	@ (8004e3c <TIM_Base_SetConfig+0x12c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d013      	beq.n	8004d50 <TIM_Base_SetConfig+0x40>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d2e:	d00f      	beq.n	8004d50 <TIM_Base_SetConfig+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a43      	ldr	r2, [pc, #268]	@ (8004e40 <TIM_Base_SetConfig+0x130>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00b      	beq.n	8004d50 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a42      	ldr	r2, [pc, #264]	@ (8004e44 <TIM_Base_SetConfig+0x134>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d007      	beq.n	8004d50 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a41      	ldr	r2, [pc, #260]	@ (8004e48 <TIM_Base_SetConfig+0x138>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d003      	beq.n	8004d50 <TIM_Base_SetConfig+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a40      	ldr	r2, [pc, #256]	@ (8004e4c <TIM_Base_SetConfig+0x13c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d108      	bne.n	8004d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a35      	ldr	r2, [pc, #212]	@ (8004e3c <TIM_Base_SetConfig+0x12c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d02b      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d70:	d027      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a32      	ldr	r2, [pc, #200]	@ (8004e40 <TIM_Base_SetConfig+0x130>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d023      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a31      	ldr	r2, [pc, #196]	@ (8004e44 <TIM_Base_SetConfig+0x134>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01f      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a30      	ldr	r2, [pc, #192]	@ (8004e48 <TIM_Base_SetConfig+0x138>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d01b      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2f      	ldr	r2, [pc, #188]	@ (8004e4c <TIM_Base_SetConfig+0x13c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d017      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2e      	ldr	r2, [pc, #184]	@ (8004e50 <TIM_Base_SetConfig+0x140>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d013      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2d      	ldr	r2, [pc, #180]	@ (8004e54 <TIM_Base_SetConfig+0x144>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00f      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e58 <TIM_Base_SetConfig+0x148>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00b      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2b      	ldr	r2, [pc, #172]	@ (8004e5c <TIM_Base_SetConfig+0x14c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d007      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2a      	ldr	r2, [pc, #168]	@ (8004e60 <TIM_Base_SetConfig+0x150>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d003      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a29      	ldr	r2, [pc, #164]	@ (8004e64 <TIM_Base_SetConfig+0x154>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d108      	bne.n	8004dd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a10      	ldr	r2, [pc, #64]	@ (8004e3c <TIM_Base_SetConfig+0x12c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d003      	beq.n	8004e08 <TIM_Base_SetConfig+0xf8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a12      	ldr	r2, [pc, #72]	@ (8004e4c <TIM_Base_SetConfig+0x13c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d103      	bne.n	8004e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d105      	bne.n	8004e2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f023 0201 	bic.w	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	611a      	str	r2, [r3, #16]
  }
}
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40000800 	.word	0x40000800
 8004e48:	40000c00 	.word	0x40000c00
 8004e4c:	40010400 	.word	0x40010400
 8004e50:	40014000 	.word	0x40014000
 8004e54:	40014400 	.word	0x40014400
 8004e58:	40014800 	.word	0x40014800
 8004e5c:	40001800 	.word	0x40001800
 8004e60:	40001c00 	.word	0x40001c00
 8004e64:	40002000 	.word	0x40002000

08004e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e042      	b.n	8004f28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fc fc2c 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2224      	movs	r2, #36	@ 0x24
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 ff59 	bl	8005d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	@ 0x28
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d175      	bne.n	800503c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_UART_Transmit+0x2c>
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e06e      	b.n	800503e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2221      	movs	r2, #33	@ 0x21
 8004f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f6e:	f7fc fe9f 	bl	8001cb0 <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	88fa      	ldrh	r2, [r7, #6]
 8004f78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	88fa      	ldrh	r2, [r7, #6]
 8004f7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f88:	d108      	bne.n	8004f9c <HAL_UART_Transmit+0x6c>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d104      	bne.n	8004f9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	e003      	b.n	8004fa4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fa4:	e02e      	b.n	8005004 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2200      	movs	r2, #0
 8004fae:	2180      	movs	r1, #128	@ 0x80
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 fc31 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e03a      	b.n	800503e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e007      	b.n	8004ff6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1cb      	bne.n	8004fa6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2200      	movs	r2, #0
 8005016:	2140      	movs	r1, #64	@ 0x40
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fbfd 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e006      	b.n	800503e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	e000      	b.n	800503e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800503c:	2302      	movs	r3, #2
  }
}
 800503e:	4618      	mov	r0, r3
 8005040:	3720      	adds	r7, #32
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	4613      	mov	r3, r2
 8005052:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b20      	cmp	r3, #32
 800505e:	d112      	bne.n	8005086 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <HAL_UART_Receive_DMA+0x26>
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e00b      	b.n	8005088 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	461a      	mov	r2, r3
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fc25 	bl	80058cc <UART_Start_Receive_DMA>
 8005082:	4603      	mov	r3, r0
 8005084:	e000      	b.n	8005088 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b0ba      	sub	sp, #232	@ 0xe8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80050bc:	2300      	movs	r3, #0
 80050be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80050ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10f      	bne.n	80050f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <HAL_UART_IRQHandler+0x66>
 80050e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fd8d 	bl	8005c0e <UART_Receive_IT>
      return;
 80050f4:	e25b      	b.n	80055ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80de 	beq.w	80052bc <HAL_UART_IRQHandler+0x22c>
 8005100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800510c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005110:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80d1 	beq.w	80052bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <HAL_UART_IRQHandler+0xae>
 8005126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800512a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	f043 0201 	orr.w	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00b      	beq.n	8005162 <HAL_UART_IRQHandler+0xd2>
 800514a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515a:	f043 0202 	orr.w	r2, r3, #2
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00b      	beq.n	8005186 <HAL_UART_IRQHandler+0xf6>
 800516e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d005      	beq.n	8005186 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517e:	f043 0204 	orr.w	r2, r3, #4
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d011      	beq.n	80051b6 <HAL_UART_IRQHandler+0x126>
 8005192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800519e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ae:	f043 0208 	orr.w	r2, r3, #8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 81f2 	beq.w	80055a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_UART_IRQHandler+0x14e>
 80051cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fd18 	bl	8005c0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b40      	cmp	r3, #64	@ 0x40
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <HAL_UART_IRQHandler+0x17a>
 8005202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d04f      	beq.n	80052aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fc20 	bl	8005a50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521a:	2b40      	cmp	r3, #64	@ 0x40
 800521c:	d141      	bne.n	80052a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3314      	adds	r3, #20
 8005224:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005234:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800523c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3314      	adds	r3, #20
 8005246:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800524a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800524e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005256:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1d9      	bne.n	800521e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d013      	beq.n	800529a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005276:	4a7e      	ldr	r2, [pc, #504]	@ (8005470 <HAL_UART_IRQHandler+0x3e0>)
 8005278:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527e:	4618      	mov	r0, r3
 8005280:	f7fc ffe8 	bl	8002254 <HAL_DMA_Abort_IT>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d016      	beq.n	80052b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005294:	4610      	mov	r0, r2
 8005296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005298:	e00e      	b.n	80052b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f9a8 	bl	80055f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a0:	e00a      	b.n	80052b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f9a4 	bl	80055f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	e006      	b.n	80052b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f9a0 	bl	80055f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80052b6:	e175      	b.n	80055a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	bf00      	nop
    return;
 80052ba:	e173      	b.n	80055a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	f040 814f 	bne.w	8005564 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8148 	beq.w	8005564 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8141 	beq.w	8005564 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052e2:	2300      	movs	r3, #0
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	60bb      	str	r3, [r7, #8]
 80052f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005302:	2b40      	cmp	r3, #64	@ 0x40
 8005304:	f040 80b6 	bne.w	8005474 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005314:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8145 	beq.w	80055a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005326:	429a      	cmp	r2, r3
 8005328:	f080 813e 	bcs.w	80055a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005332:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800533e:	f000 8088 	beq.w	8005452 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005358:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800535c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800536e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005372:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800537a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1d9      	bne.n	8005342 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3314      	adds	r3, #20
 8005394:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800539e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053a0:	f023 0301 	bic.w	r3, r3, #1
 80053a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3314      	adds	r3, #20
 80053ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e1      	bne.n	800538e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80053da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3314      	adds	r3, #20
 80053ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e3      	bne.n	80053ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005420:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005422:	f023 0310 	bic.w	r3, r3, #16
 8005426:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005434:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005436:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800543a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e3      	bne.n	8005410 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544c:	4618      	mov	r0, r3
 800544e:	f7fc fe91 	bl	8002174 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2202      	movs	r2, #2
 8005456:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005460:	b29b      	uxth	r3, r3
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	b29b      	uxth	r3, r3
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f8cb 	bl	8005604 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800546e:	e09b      	b.n	80055a8 <HAL_UART_IRQHandler+0x518>
 8005470:	08005b17 	.word	0x08005b17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800547c:	b29b      	uxth	r3, r3
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 808e 	beq.w	80055ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8089 	beq.w	80055ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80054be:	647a      	str	r2, [r7, #68]	@ 0x44
 80054c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e3      	bne.n	800549a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3314      	adds	r3, #20
 80054d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	623b      	str	r3, [r7, #32]
   return(result);
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3314      	adds	r3, #20
 80054f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80054f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e3      	bne.n	80054d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	330c      	adds	r3, #12
 800551e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	60fb      	str	r3, [r7, #12]
   return(result);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0310 	bic.w	r3, r3, #16
 800552e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	330c      	adds	r3, #12
 8005538:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800553c:	61fa      	str	r2, [r7, #28]
 800553e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	69b9      	ldr	r1, [r7, #24]
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	617b      	str	r3, [r7, #20]
   return(result);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e3      	bne.n	8005518 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005556:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f851 	bl	8005604 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005562:	e023      	b.n	80055ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <HAL_UART_IRQHandler+0x4f4>
 8005570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fade 	bl	8005b3e <UART_Transmit_IT>
    return;
 8005582:	e014      	b.n	80055ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00e      	beq.n	80055ae <HAL_UART_IRQHandler+0x51e>
 8005590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fb1e 	bl	8005bde <UART_EndTransmit_IT>
    return;
 80055a2:	e004      	b.n	80055ae <HAL_UART_IRQHandler+0x51e>
    return;
 80055a4:	bf00      	nop
 80055a6:	e002      	b.n	80055ae <HAL_UART_IRQHandler+0x51e>
      return;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <HAL_UART_IRQHandler+0x51e>
      return;
 80055ac:	bf00      	nop
  }
}
 80055ae:	37e8      	adds	r7, #232	@ 0xe8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b09c      	sub	sp, #112	@ 0x70
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005628:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d172      	bne.n	800571e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800563a:	2200      	movs	r2, #0
 800563c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800563e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330c      	adds	r3, #12
 8005644:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800564e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005654:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800565e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005660:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005664:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800566c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e5      	bne.n	800563e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3314      	adds	r3, #20
 8005678:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	667b      	str	r3, [r7, #100]	@ 0x64
 800568a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3314      	adds	r3, #20
 8005690:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005692:	647a      	str	r2, [r7, #68]	@ 0x44
 8005694:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e5      	bne.n	8005672 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3314      	adds	r3, #20
 80056ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	623b      	str	r3, [r7, #32]
   return(result);
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80056be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3314      	adds	r3, #20
 80056c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80056c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80056c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e5      	bne.n	80056a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d119      	bne.n	800571e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f023 0310 	bic.w	r3, r3, #16
 8005700:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	330c      	adds	r3, #12
 8005708:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800570a:	61fa      	str	r2, [r7, #28]
 800570c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	69b9      	ldr	r1, [r7, #24]
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	617b      	str	r3, [r7, #20]
   return(result);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e5      	bne.n	80056ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800571e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005720:	2200      	movs	r2, #0
 8005722:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005728:	2b01      	cmp	r3, #1
 800572a:	d106      	bne.n	800573a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800572c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800572e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005730:	4619      	mov	r1, r3
 8005732:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005734:	f7ff ff66 	bl	8005604 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005738:	e002      	b.n	8005740 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800573a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800573c:	f7ff ff44 	bl	80055c8 <HAL_UART_RxCpltCallback>
}
 8005740:	bf00      	nop
 8005742:	3770      	adds	r7, #112	@ 0x70
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005754:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005760:	2b01      	cmp	r3, #1
 8005762:	d108      	bne.n	8005776 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005768:	085b      	lsrs	r3, r3, #1
 800576a:	b29b      	uxth	r3, r3
 800576c:	4619      	mov	r1, r3
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff ff48 	bl	8005604 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005774:	e002      	b.n	800577c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff ff30 	bl	80055dc <HAL_UART_RxHalfCpltCallback>
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005794:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a0:	2b80      	cmp	r3, #128	@ 0x80
 80057a2:	bf0c      	ite	eq
 80057a4:	2301      	moveq	r3, #1
 80057a6:	2300      	movne	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b21      	cmp	r3, #33	@ 0x21
 80057b6:	d108      	bne.n	80057ca <UART_DMAError+0x46>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2200      	movs	r2, #0
 80057c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80057c4:	68b8      	ldr	r0, [r7, #8]
 80057c6:	f000 f91b 	bl	8005a00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d4:	2b40      	cmp	r3, #64	@ 0x40
 80057d6:	bf0c      	ite	eq
 80057d8:	2301      	moveq	r3, #1
 80057da:	2300      	movne	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b22      	cmp	r3, #34	@ 0x22
 80057ea:	d108      	bne.n	80057fe <UART_DMAError+0x7a>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2200      	movs	r2, #0
 80057f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80057f8:	68b8      	ldr	r0, [r7, #8]
 80057fa:	f000 f929 	bl	8005a50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005802:	f043 0210 	orr.w	r2, r3, #16
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800580a:	68b8      	ldr	r0, [r7, #8]
 800580c:	f7ff fef0 	bl	80055f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	4613      	mov	r3, r2
 8005826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005828:	e03b      	b.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005830:	d037      	beq.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005832:	f7fc fa3d 	bl	8001cb0 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	6a3a      	ldr	r2, [r7, #32]
 800583e:	429a      	cmp	r2, r3
 8005840:	d302      	bcc.n	8005848 <UART_WaitOnFlagUntilTimeout+0x30>
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e03a      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	d023      	beq.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b80      	cmp	r3, #128	@ 0x80
 800585e:	d020      	beq.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b40      	cmp	r3, #64	@ 0x40
 8005864:	d01d      	beq.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b08      	cmp	r3, #8
 8005872:	d116      	bne.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f8e0 	bl	8005a50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2208      	movs	r2, #8
 8005894:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e00f      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4013      	ands	r3, r2
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	bf0c      	ite	eq
 80058b2:	2301      	moveq	r3, #1
 80058b4:	2300      	movne	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d0b4      	beq.n	800582a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b098      	sub	sp, #96	@ 0x60
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	4613      	mov	r3, r2
 80058d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	88fa      	ldrh	r2, [r7, #6]
 80058e4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2222      	movs	r2, #34	@ 0x22
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f8:	4a3e      	ldr	r2, [pc, #248]	@ (80059f4 <UART_Start_Receive_DMA+0x128>)
 80058fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005900:	4a3d      	ldr	r2, [pc, #244]	@ (80059f8 <UART_Start_Receive_DMA+0x12c>)
 8005902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005908:	4a3c      	ldr	r2, [pc, #240]	@ (80059fc <UART_Start_Receive_DMA+0x130>)
 800590a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005910:	2200      	movs	r2, #0
 8005912:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005914:	f107 0308 	add.w	r3, r7, #8
 8005918:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3304      	adds	r3, #4
 8005924:	4619      	mov	r1, r3
 8005926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	f7fc fbca 	bl	80020c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005930:	2300      	movs	r3, #0
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d019      	beq.n	8005982 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800595e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005964:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	330c      	adds	r3, #12
 800596c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800596e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005970:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005974:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800597c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e5      	bne.n	800594e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3314      	adds	r3, #20
 8005988:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	657b      	str	r3, [r7, #84]	@ 0x54
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3314      	adds	r3, #20
 80059a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80059a2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80059a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80059a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e5      	bne.n	8005982 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3314      	adds	r3, #20
 80059bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	617b      	str	r3, [r7, #20]
   return(result);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80059d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80059d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	6a39      	ldr	r1, [r7, #32]
 80059dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e5      	bne.n	80059b6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3760      	adds	r7, #96	@ 0x60
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	0800561d 	.word	0x0800561d
 80059f8:	08005749 	.word	0x08005749
 80059fc:	08005785 	.word	0x08005785

08005a00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b089      	sub	sp, #36	@ 0x24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	330c      	adds	r3, #12
 8005a0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	61ba      	str	r2, [r7, #24]
 8005a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6979      	ldr	r1, [r7, #20]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	613b      	str	r3, [r7, #16]
   return(result);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e5      	bne.n	8005a08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005a44:	bf00      	nop
 8005a46:	3724      	adds	r7, #36	@ 0x24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b095      	sub	sp, #84	@ 0x54
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a78:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e5      	bne.n	8005a58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3314      	adds	r3, #20
 8005a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f023 0301 	bic.w	r3, r3, #1
 8005aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3314      	adds	r3, #20
 8005aaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e5      	bne.n	8005a8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d119      	bne.n	8005afc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f023 0310 	bic.w	r3, r3, #16
 8005ade:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ae8:	61ba      	str	r2, [r7, #24]
 8005aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6979      	ldr	r1, [r7, #20]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	613b      	str	r3, [r7, #16]
   return(result);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e5      	bne.n	8005ac8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b0a:	bf00      	nop
 8005b0c:	3754      	adds	r7, #84	@ 0x54
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff fd5d 	bl	80055f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b21      	cmp	r3, #33	@ 0x21
 8005b50:	d13e      	bne.n	8005bd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b5a:	d114      	bne.n	8005b86 <UART_Transmit_IT+0x48>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d110      	bne.n	8005b86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	1c9a      	adds	r2, r3, #2
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	621a      	str	r2, [r3, #32]
 8005b84:	e008      	b.n	8005b98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	1c59      	adds	r1, r3, #1
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6211      	str	r1, [r2, #32]
 8005b90:	781a      	ldrb	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10f      	bne.n	8005bcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e000      	b.n	8005bd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bd0:	2302      	movs	r3, #2
  }
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff fcd8 	bl	80055b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b08c      	sub	sp, #48	@ 0x30
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b22      	cmp	r3, #34	@ 0x22
 8005c20:	f040 80ae 	bne.w	8005d80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c2c:	d117      	bne.n	8005c5e <UART_Receive_IT+0x50>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d113      	bne.n	8005c5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	1c9a      	adds	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c5c:	e026      	b.n	8005cac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c70:	d007      	beq.n	8005c82 <UART_Receive_IT+0x74>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <UART_Receive_IT+0x82>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	e008      	b.n	8005ca2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d15d      	bne.n	8005d7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0220 	bic.w	r2, r2, #32
 8005cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d135      	bne.n	8005d72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	330c      	adds	r3, #12
 8005d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f023 0310 	bic.w	r3, r3, #16
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	330c      	adds	r3, #12
 8005d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2c:	623a      	str	r2, [r7, #32]
 8005d2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	69f9      	ldr	r1, [r7, #28]
 8005d32:	6a3a      	ldr	r2, [r7, #32]
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e5      	bne.n	8005d0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b10      	cmp	r3, #16
 8005d4c:	d10a      	bne.n	8005d64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fc4a 	bl	8005604 <HAL_UARTEx_RxEventCallback>
 8005d70:	e002      	b.n	8005d78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff fc28 	bl	80055c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e002      	b.n	8005d82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e000      	b.n	8005d82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d80:	2302      	movs	r3, #2
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3730      	adds	r7, #48	@ 0x30
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d90:	b0c0      	sub	sp, #256	@ 0x100
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da8:	68d9      	ldr	r1, [r3, #12]
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	ea40 0301 	orr.w	r3, r0, r1
 8005db4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005de4:	f021 010c 	bic.w	r1, r1, #12
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005df2:	430b      	orrs	r3, r1
 8005df4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e06:	6999      	ldr	r1, [r3, #24]
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	ea40 0301 	orr.w	r3, r0, r1
 8005e12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b8f      	ldr	r3, [pc, #572]	@ (8006058 <UART_SetConfig+0x2cc>)
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d005      	beq.n	8005e2c <UART_SetConfig+0xa0>
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	4b8d      	ldr	r3, [pc, #564]	@ (800605c <UART_SetConfig+0x2d0>)
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d104      	bne.n	8005e36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e2c:	f7fd fd70 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8005e30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e34:	e003      	b.n	8005e3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e36:	f7fd fd57 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 8005e3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e48:	f040 810c 	bne.w	8006064 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e5e:	4622      	mov	r2, r4
 8005e60:	462b      	mov	r3, r5
 8005e62:	1891      	adds	r1, r2, r2
 8005e64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e66:	415b      	adcs	r3, r3
 8005e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e6e:	4621      	mov	r1, r4
 8005e70:	eb12 0801 	adds.w	r8, r2, r1
 8005e74:	4629      	mov	r1, r5
 8005e76:	eb43 0901 	adc.w	r9, r3, r1
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e8e:	4690      	mov	r8, r2
 8005e90:	4699      	mov	r9, r3
 8005e92:	4623      	mov	r3, r4
 8005e94:	eb18 0303 	adds.w	r3, r8, r3
 8005e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e9c:	462b      	mov	r3, r5
 8005e9e:	eb49 0303 	adc.w	r3, r9, r3
 8005ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005eb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005eb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005eba:	460b      	mov	r3, r1
 8005ebc:	18db      	adds	r3, r3, r3
 8005ebe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	eb42 0303 	adc.w	r3, r2, r3
 8005ec6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ec8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ed0:	f7fa fe0c 	bl	8000aec <__aeabi_uldivmod>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4b61      	ldr	r3, [pc, #388]	@ (8006060 <UART_SetConfig+0x2d4>)
 8005eda:	fba3 2302 	umull	r2, r3, r3, r2
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	011c      	lsls	r4, r3, #4
 8005ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005eec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ef0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ef4:	4642      	mov	r2, r8
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	1891      	adds	r1, r2, r2
 8005efa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005efc:	415b      	adcs	r3, r3
 8005efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f04:	4641      	mov	r1, r8
 8005f06:	eb12 0a01 	adds.w	sl, r2, r1
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f24:	4692      	mov	sl, r2
 8005f26:	469b      	mov	fp, r3
 8005f28:	4643      	mov	r3, r8
 8005f2a:	eb1a 0303 	adds.w	r3, sl, r3
 8005f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f32:	464b      	mov	r3, r9
 8005f34:	eb4b 0303 	adc.w	r3, fp, r3
 8005f38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f50:	460b      	mov	r3, r1
 8005f52:	18db      	adds	r3, r3, r3
 8005f54:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f56:	4613      	mov	r3, r2
 8005f58:	eb42 0303 	adc.w	r3, r2, r3
 8005f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f66:	f7fa fdc1 	bl	8000aec <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4611      	mov	r1, r2
 8005f70:	4b3b      	ldr	r3, [pc, #236]	@ (8006060 <UART_SetConfig+0x2d4>)
 8005f72:	fba3 2301 	umull	r2, r3, r3, r1
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	2264      	movs	r2, #100	@ 0x64
 8005f7a:	fb02 f303 	mul.w	r3, r2, r3
 8005f7e:	1acb      	subs	r3, r1, r3
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f86:	4b36      	ldr	r3, [pc, #216]	@ (8006060 <UART_SetConfig+0x2d4>)
 8005f88:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f94:	441c      	add	r4, r3
 8005f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fa0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005fa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005fa8:	4642      	mov	r2, r8
 8005faa:	464b      	mov	r3, r9
 8005fac:	1891      	adds	r1, r2, r2
 8005fae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fb0:	415b      	adcs	r3, r3
 8005fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fb8:	4641      	mov	r1, r8
 8005fba:	1851      	adds	r1, r2, r1
 8005fbc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	414b      	adcs	r3, r1
 8005fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fd0:	4659      	mov	r1, fp
 8005fd2:	00cb      	lsls	r3, r1, #3
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fda:	4651      	mov	r1, sl
 8005fdc:	00ca      	lsls	r2, r1, #3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	189b      	adds	r3, r3, r2
 8005fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fec:	464b      	mov	r3, r9
 8005fee:	460a      	mov	r2, r1
 8005ff0:	eb42 0303 	adc.w	r3, r2, r3
 8005ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006004:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006008:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800600c:	460b      	mov	r3, r1
 800600e:	18db      	adds	r3, r3, r3
 8006010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006012:	4613      	mov	r3, r2
 8006014:	eb42 0303 	adc.w	r3, r2, r3
 8006018:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800601a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800601e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006022:	f7fa fd63 	bl	8000aec <__aeabi_uldivmod>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4b0d      	ldr	r3, [pc, #52]	@ (8006060 <UART_SetConfig+0x2d4>)
 800602c:	fba3 1302 	umull	r1, r3, r3, r2
 8006030:	095b      	lsrs	r3, r3, #5
 8006032:	2164      	movs	r1, #100	@ 0x64
 8006034:	fb01 f303 	mul.w	r3, r1, r3
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	3332      	adds	r3, #50	@ 0x32
 800603e:	4a08      	ldr	r2, [pc, #32]	@ (8006060 <UART_SetConfig+0x2d4>)
 8006040:	fba2 2303 	umull	r2, r3, r2, r3
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	f003 0207 	and.w	r2, r3, #7
 800604a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4422      	add	r2, r4
 8006052:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006054:	e106      	b.n	8006264 <UART_SetConfig+0x4d8>
 8006056:	bf00      	nop
 8006058:	40011000 	.word	0x40011000
 800605c:	40011400 	.word	0x40011400
 8006060:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006068:	2200      	movs	r2, #0
 800606a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800606e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006072:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006076:	4642      	mov	r2, r8
 8006078:	464b      	mov	r3, r9
 800607a:	1891      	adds	r1, r2, r2
 800607c:	6239      	str	r1, [r7, #32]
 800607e:	415b      	adcs	r3, r3
 8006080:	627b      	str	r3, [r7, #36]	@ 0x24
 8006082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006086:	4641      	mov	r1, r8
 8006088:	1854      	adds	r4, r2, r1
 800608a:	4649      	mov	r1, r9
 800608c:	eb43 0501 	adc.w	r5, r3, r1
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	00eb      	lsls	r3, r5, #3
 800609a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800609e:	00e2      	lsls	r2, r4, #3
 80060a0:	4614      	mov	r4, r2
 80060a2:	461d      	mov	r5, r3
 80060a4:	4643      	mov	r3, r8
 80060a6:	18e3      	adds	r3, r4, r3
 80060a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060ac:	464b      	mov	r3, r9
 80060ae:	eb45 0303 	adc.w	r3, r5, r3
 80060b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060d2:	4629      	mov	r1, r5
 80060d4:	008b      	lsls	r3, r1, #2
 80060d6:	4621      	mov	r1, r4
 80060d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060dc:	4621      	mov	r1, r4
 80060de:	008a      	lsls	r2, r1, #2
 80060e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060e4:	f7fa fd02 	bl	8000aec <__aeabi_uldivmod>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4b60      	ldr	r3, [pc, #384]	@ (8006270 <UART_SetConfig+0x4e4>)
 80060ee:	fba3 2302 	umull	r2, r3, r3, r2
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	011c      	lsls	r4, r3, #4
 80060f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006100:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006104:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006108:	4642      	mov	r2, r8
 800610a:	464b      	mov	r3, r9
 800610c:	1891      	adds	r1, r2, r2
 800610e:	61b9      	str	r1, [r7, #24]
 8006110:	415b      	adcs	r3, r3
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006118:	4641      	mov	r1, r8
 800611a:	1851      	adds	r1, r2, r1
 800611c:	6139      	str	r1, [r7, #16]
 800611e:	4649      	mov	r1, r9
 8006120:	414b      	adcs	r3, r1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	f04f 0300 	mov.w	r3, #0
 800612c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006130:	4659      	mov	r1, fp
 8006132:	00cb      	lsls	r3, r1, #3
 8006134:	4651      	mov	r1, sl
 8006136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800613a:	4651      	mov	r1, sl
 800613c:	00ca      	lsls	r2, r1, #3
 800613e:	4610      	mov	r0, r2
 8006140:	4619      	mov	r1, r3
 8006142:	4603      	mov	r3, r0
 8006144:	4642      	mov	r2, r8
 8006146:	189b      	adds	r3, r3, r2
 8006148:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800614c:	464b      	mov	r3, r9
 800614e:	460a      	mov	r2, r1
 8006150:	eb42 0303 	adc.w	r3, r2, r3
 8006154:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006162:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006170:	4649      	mov	r1, r9
 8006172:	008b      	lsls	r3, r1, #2
 8006174:	4641      	mov	r1, r8
 8006176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800617a:	4641      	mov	r1, r8
 800617c:	008a      	lsls	r2, r1, #2
 800617e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006182:	f7fa fcb3 	bl	8000aec <__aeabi_uldivmod>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4611      	mov	r1, r2
 800618c:	4b38      	ldr	r3, [pc, #224]	@ (8006270 <UART_SetConfig+0x4e4>)
 800618e:	fba3 2301 	umull	r2, r3, r3, r1
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2264      	movs	r2, #100	@ 0x64
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	1acb      	subs	r3, r1, r3
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	3332      	adds	r3, #50	@ 0x32
 80061a0:	4a33      	ldr	r2, [pc, #204]	@ (8006270 <UART_SetConfig+0x4e4>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061ac:	441c      	add	r4, r3
 80061ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b2:	2200      	movs	r2, #0
 80061b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80061b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80061b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061bc:	4642      	mov	r2, r8
 80061be:	464b      	mov	r3, r9
 80061c0:	1891      	adds	r1, r2, r2
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	415b      	adcs	r3, r3
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061cc:	4641      	mov	r1, r8
 80061ce:	1851      	adds	r1, r2, r1
 80061d0:	6039      	str	r1, [r7, #0]
 80061d2:	4649      	mov	r1, r9
 80061d4:	414b      	adcs	r3, r1
 80061d6:	607b      	str	r3, [r7, #4]
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061e4:	4659      	mov	r1, fp
 80061e6:	00cb      	lsls	r3, r1, #3
 80061e8:	4651      	mov	r1, sl
 80061ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ee:	4651      	mov	r1, sl
 80061f0:	00ca      	lsls	r2, r1, #3
 80061f2:	4610      	mov	r0, r2
 80061f4:	4619      	mov	r1, r3
 80061f6:	4603      	mov	r3, r0
 80061f8:	4642      	mov	r2, r8
 80061fa:	189b      	adds	r3, r3, r2
 80061fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061fe:	464b      	mov	r3, r9
 8006200:	460a      	mov	r2, r1
 8006202:	eb42 0303 	adc.w	r3, r2, r3
 8006206:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	663b      	str	r3, [r7, #96]	@ 0x60
 8006212:	667a      	str	r2, [r7, #100]	@ 0x64
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006220:	4649      	mov	r1, r9
 8006222:	008b      	lsls	r3, r1, #2
 8006224:	4641      	mov	r1, r8
 8006226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800622a:	4641      	mov	r1, r8
 800622c:	008a      	lsls	r2, r1, #2
 800622e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006232:	f7fa fc5b 	bl	8000aec <__aeabi_uldivmod>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4b0d      	ldr	r3, [pc, #52]	@ (8006270 <UART_SetConfig+0x4e4>)
 800623c:	fba3 1302 	umull	r1, r3, r3, r2
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	2164      	movs	r1, #100	@ 0x64
 8006244:	fb01 f303 	mul.w	r3, r1, r3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	3332      	adds	r3, #50	@ 0x32
 800624e:	4a08      	ldr	r2, [pc, #32]	@ (8006270 <UART_SetConfig+0x4e4>)
 8006250:	fba2 2303 	umull	r2, r3, r2, r3
 8006254:	095b      	lsrs	r3, r3, #5
 8006256:	f003 020f 	and.w	r2, r3, #15
 800625a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4422      	add	r2, r4
 8006262:	609a      	str	r2, [r3, #8]
}
 8006264:	bf00      	nop
 8006266:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800626a:	46bd      	mov	sp, r7
 800626c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006270:	51eb851f 	.word	0x51eb851f

08006274 <__NVIC_SetPriority>:
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	4603      	mov	r3, r0
 800627c:	6039      	str	r1, [r7, #0]
 800627e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006284:	2b00      	cmp	r3, #0
 8006286:	db0a      	blt.n	800629e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	b2da      	uxtb	r2, r3
 800628c:	490c      	ldr	r1, [pc, #48]	@ (80062c0 <__NVIC_SetPriority+0x4c>)
 800628e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006292:	0112      	lsls	r2, r2, #4
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	440b      	add	r3, r1
 8006298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800629c:	e00a      	b.n	80062b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	4908      	ldr	r1, [pc, #32]	@ (80062c4 <__NVIC_SetPriority+0x50>)
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	3b04      	subs	r3, #4
 80062ac:	0112      	lsls	r2, r2, #4
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	440b      	add	r3, r1
 80062b2:	761a      	strb	r2, [r3, #24]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	e000e100 	.word	0xe000e100
 80062c4:	e000ed00 	.word	0xe000ed00

080062c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80062cc:	2100      	movs	r1, #0
 80062ce:	f06f 0004 	mvn.w	r0, #4
 80062d2:	f7ff ffcf 	bl	8006274 <__NVIC_SetPriority>
#endif
}
 80062d6:	bf00      	nop
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e2:	f3ef 8305 	mrs	r3, IPSR
 80062e6:	603b      	str	r3, [r7, #0]
  return(result);
 80062e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80062ee:	f06f 0305 	mvn.w	r3, #5
 80062f2:	607b      	str	r3, [r7, #4]
 80062f4:	e00c      	b.n	8006310 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80062f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006320 <osKernelInitialize+0x44>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d105      	bne.n	800630a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80062fe:	4b08      	ldr	r3, [pc, #32]	@ (8006320 <osKernelInitialize+0x44>)
 8006300:	2201      	movs	r2, #1
 8006302:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006304:	2300      	movs	r3, #0
 8006306:	607b      	str	r3, [r7, #4]
 8006308:	e002      	b.n	8006310 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800630a:	f04f 33ff 	mov.w	r3, #4294967295
 800630e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006310:	687b      	ldr	r3, [r7, #4]
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20000590 	.word	0x20000590

08006324 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800632a:	f3ef 8305 	mrs	r3, IPSR
 800632e:	603b      	str	r3, [r7, #0]
  return(result);
 8006330:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006336:	f06f 0305 	mvn.w	r3, #5
 800633a:	607b      	str	r3, [r7, #4]
 800633c:	e010      	b.n	8006360 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800633e:	4b0b      	ldr	r3, [pc, #44]	@ (800636c <osKernelStart+0x48>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d109      	bne.n	800635a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006346:	f7ff ffbf 	bl	80062c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800634a:	4b08      	ldr	r3, [pc, #32]	@ (800636c <osKernelStart+0x48>)
 800634c:	2202      	movs	r2, #2
 800634e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006350:	f001 fe38 	bl	8007fc4 <vTaskStartScheduler>
      stat = osOK;
 8006354:	2300      	movs	r3, #0
 8006356:	607b      	str	r3, [r7, #4]
 8006358:	e002      	b.n	8006360 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800635a:	f04f 33ff 	mov.w	r3, #4294967295
 800635e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006360:	687b      	ldr	r3, [r7, #4]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20000590 	.word	0x20000590

08006370 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006370:	b580      	push	{r7, lr}
 8006372:	b08e      	sub	sp, #56	@ 0x38
 8006374:	af04      	add	r7, sp, #16
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800637c:	2300      	movs	r3, #0
 800637e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006380:	f3ef 8305 	mrs	r3, IPSR
 8006384:	617b      	str	r3, [r7, #20]
  return(result);
 8006386:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006388:	2b00      	cmp	r3, #0
 800638a:	d17e      	bne.n	800648a <osThreadNew+0x11a>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d07b      	beq.n	800648a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006392:	2380      	movs	r3, #128	@ 0x80
 8006394:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006396:	2318      	movs	r3, #24
 8006398:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800639e:	f04f 33ff 	mov.w	r3, #4294967295
 80063a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d045      	beq.n	8006436 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <osThreadNew+0x48>
        name = attr->name;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <osThreadNew+0x6e>
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	2b38      	cmp	r3, #56	@ 0x38
 80063d0:	d805      	bhi.n	80063de <osThreadNew+0x6e>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <osThreadNew+0x72>
        return (NULL);
 80063de:	2300      	movs	r3, #0
 80063e0:	e054      	b.n	800648c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	089b      	lsrs	r3, r3, #2
 80063f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00e      	beq.n	8006418 <osThreadNew+0xa8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	2b5b      	cmp	r3, #91	@ 0x5b
 8006400:	d90a      	bls.n	8006418 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006406:	2b00      	cmp	r3, #0
 8006408:	d006      	beq.n	8006418 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <osThreadNew+0xa8>
        mem = 1;
 8006412:	2301      	movs	r3, #1
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	e010      	b.n	800643a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10c      	bne.n	800643a <osThreadNew+0xca>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d108      	bne.n	800643a <osThreadNew+0xca>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <osThreadNew+0xca>
          mem = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	e001      	b.n	800643a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d110      	bne.n	8006462 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006448:	9202      	str	r2, [sp, #8]
 800644a:	9301      	str	r3, [sp, #4]
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f001 fa7c 	bl	8007954 <xTaskCreateStatic>
 800645c:	4603      	mov	r3, r0
 800645e:	613b      	str	r3, [r7, #16]
 8006460:	e013      	b.n	800648a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d110      	bne.n	800648a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	b29a      	uxth	r2, r3
 800646c:	f107 0310 	add.w	r3, r7, #16
 8006470:	9301      	str	r3, [sp, #4]
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f001 faca 	bl	8007a14 <xTaskCreate>
 8006480:	4603      	mov	r3, r0
 8006482:	2b01      	cmp	r3, #1
 8006484:	d001      	beq.n	800648a <osThreadNew+0x11a>
            hTask = NULL;
 8006486:	2300      	movs	r3, #0
 8006488:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800648a:	693b      	ldr	r3, [r7, #16]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3728      	adds	r7, #40	@ 0x28
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064a0:	f3ef 8305 	mrs	r3, IPSR
 80064a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80064a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80064ac:	f06f 0305 	mvn.w	r3, #5
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	e017      	b.n	80064e4 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d103      	bne.n	80064c2 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80064ba:	f06f 0303 	mvn.w	r3, #3
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	e010      	b.n	80064e4 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80064c2:	6938      	ldr	r0, [r7, #16]
 80064c4:	f001 fd16 	bl	8007ef4 <eTaskGetState>
 80064c8:	4603      	mov	r3, r0
 80064ca:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d005      	beq.n	80064de <osThreadTerminate+0x4a>
      stat = osOK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80064d6:	6938      	ldr	r0, [r7, #16]
 80064d8:	f001 fbe2 	bl	8007ca0 <vTaskDelete>
 80064dc:	e002      	b.n	80064e4 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80064de:	f06f 0302 	mvn.w	r3, #2
 80064e2:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80064e4:	697b      	ldr	r3, [r7, #20]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b08a      	sub	sp, #40	@ 0x28
 80064f2:	af02      	add	r7, sp, #8
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064fe:	f3ef 8305 	mrs	r3, IPSR
 8006502:	613b      	str	r3, [r7, #16]
  return(result);
 8006504:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006506:	2b00      	cmp	r3, #0
 8006508:	d175      	bne.n	80065f6 <osSemaphoreNew+0x108>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d072      	beq.n	80065f6 <osSemaphoreNew+0x108>
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	429a      	cmp	r2, r3
 8006516:	d86e      	bhi.n	80065f6 <osSemaphoreNew+0x108>
    mem = -1;
 8006518:	f04f 33ff 	mov.w	r3, #4294967295
 800651c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d015      	beq.n	8006550 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d006      	beq.n	800653a <osSemaphoreNew+0x4c>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b4f      	cmp	r3, #79	@ 0x4f
 8006532:	d902      	bls.n	800653a <osSemaphoreNew+0x4c>
        mem = 1;
 8006534:	2301      	movs	r3, #1
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	e00c      	b.n	8006554 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d108      	bne.n	8006554 <osSemaphoreNew+0x66>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d104      	bne.n	8006554 <osSemaphoreNew+0x66>
          mem = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	e001      	b.n	8006554 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006550:	2300      	movs	r3, #0
 8006552:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655a:	d04c      	beq.n	80065f6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d128      	bne.n	80065b4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d10a      	bne.n	800657e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	2203      	movs	r2, #3
 800656e:	9200      	str	r2, [sp, #0]
 8006570:	2200      	movs	r2, #0
 8006572:	2100      	movs	r1, #0
 8006574:	2001      	movs	r0, #1
 8006576:	f000 fa2b 	bl	80069d0 <xQueueGenericCreateStatic>
 800657a:	61f8      	str	r0, [r7, #28]
 800657c:	e005      	b.n	800658a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800657e:	2203      	movs	r2, #3
 8006580:	2100      	movs	r1, #0
 8006582:	2001      	movs	r0, #1
 8006584:	f000 faa1 	bl	8006aca <xQueueGenericCreate>
 8006588:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d022      	beq.n	80065d6 <osSemaphoreNew+0xe8>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01f      	beq.n	80065d6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006596:	2300      	movs	r3, #0
 8006598:	2200      	movs	r2, #0
 800659a:	2100      	movs	r1, #0
 800659c:	69f8      	ldr	r0, [r7, #28]
 800659e:	f000 fb61 	bl	8006c64 <xQueueGenericSend>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d016      	beq.n	80065d6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80065a8:	69f8      	ldr	r0, [r7, #28]
 80065aa:	f000 ffff 	bl	80075ac <vQueueDelete>
            hSemaphore = NULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	e010      	b.n	80065d6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d108      	bne.n	80065cc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	461a      	mov	r2, r3
 80065c0:	68b9      	ldr	r1, [r7, #8]
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fadf 	bl	8006b86 <xQueueCreateCountingSemaphoreStatic>
 80065c8:	61f8      	str	r0, [r7, #28]
 80065ca:	e004      	b.n	80065d6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 fb12 	bl	8006bf8 <xQueueCreateCountingSemaphore>
 80065d4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00c      	beq.n	80065f6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <osSemaphoreNew+0xfc>
          name = attr->name;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e001      	b.n	80065ee <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80065ee:	6979      	ldr	r1, [r7, #20]
 80065f0:	69f8      	ldr	r0, [r7, #28]
 80065f2:	f001 f927 	bl	8007844 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80065f6:	69fb      	ldr	r3, [r7, #28]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800660e:	2300      	movs	r3, #0
 8006610:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d103      	bne.n	8006620 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006618:	f06f 0303 	mvn.w	r3, #3
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	e039      	b.n	8006694 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006620:	f3ef 8305 	mrs	r3, IPSR
 8006624:	60fb      	str	r3, [r7, #12]
  return(result);
 8006626:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006628:	2b00      	cmp	r3, #0
 800662a:	d022      	beq.n	8006672 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006632:	f06f 0303 	mvn.w	r3, #3
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	e02c      	b.n	8006694 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800663a:	2300      	movs	r3, #0
 800663c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800663e:	f107 0308 	add.w	r3, r7, #8
 8006642:	461a      	mov	r2, r3
 8006644:	2100      	movs	r1, #0
 8006646:	6938      	ldr	r0, [r7, #16]
 8006648:	f000 ff2e 	bl	80074a8 <xQueueReceiveFromISR>
 800664c:	4603      	mov	r3, r0
 800664e:	2b01      	cmp	r3, #1
 8006650:	d003      	beq.n	800665a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006652:	f06f 0302 	mvn.w	r3, #2
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e01c      	b.n	8006694 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d019      	beq.n	8006694 <osSemaphoreAcquire+0x94>
 8006660:	4b0f      	ldr	r3, [pc, #60]	@ (80066a0 <osSemaphoreAcquire+0xa0>)
 8006662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	e010      	b.n	8006694 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6938      	ldr	r0, [r7, #16]
 8006676:	f000 fe07 	bl	8007288 <xQueueSemaphoreTake>
 800667a:	4603      	mov	r3, r0
 800667c:	2b01      	cmp	r3, #1
 800667e:	d009      	beq.n	8006694 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006686:	f06f 0301 	mvn.w	r3, #1
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e002      	b.n	8006694 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800668e:	f06f 0302 	mvn.w	r3, #2
 8006692:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006694:	697b      	ldr	r3, [r7, #20]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	e000ed04 	.word	0xe000ed04

080066a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d103      	bne.n	80066c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80066ba:	f06f 0303 	mvn.w	r3, #3
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	e02c      	b.n	800671c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066c2:	f3ef 8305 	mrs	r3, IPSR
 80066c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80066c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01a      	beq.n	8006704 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80066d2:	f107 0308 	add.w	r3, r7, #8
 80066d6:	4619      	mov	r1, r3
 80066d8:	6938      	ldr	r0, [r7, #16]
 80066da:	f000 fc63 	bl	8006fa4 <xQueueGiveFromISR>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d003      	beq.n	80066ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80066e4:	f06f 0302 	mvn.w	r3, #2
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	e017      	b.n	800671c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d014      	beq.n	800671c <osSemaphoreRelease+0x78>
 80066f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006728 <osSemaphoreRelease+0x84>)
 80066f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	e00b      	b.n	800671c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006704:	2300      	movs	r3, #0
 8006706:	2200      	movs	r2, #0
 8006708:	2100      	movs	r1, #0
 800670a:	6938      	ldr	r0, [r7, #16]
 800670c:	f000 faaa 	bl	8006c64 <xQueueGenericSend>
 8006710:	4603      	mov	r3, r0
 8006712:	2b01      	cmp	r3, #1
 8006714:	d002      	beq.n	800671c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006716:	f06f 0302 	mvn.w	r3, #2
 800671a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800671c:	697b      	ldr	r3, [r7, #20]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4a07      	ldr	r2, [pc, #28]	@ (8006758 <vApplicationGetIdleTaskMemory+0x2c>)
 800673c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	4a06      	ldr	r2, [pc, #24]	@ (800675c <vApplicationGetIdleTaskMemory+0x30>)
 8006742:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2280      	movs	r2, #128	@ 0x80
 8006748:	601a      	str	r2, [r3, #0]
}
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	20000594 	.word	0x20000594
 800675c:	200005f0 	.word	0x200005f0

08006760 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a07      	ldr	r2, [pc, #28]	@ (800678c <vApplicationGetTimerTaskMemory+0x2c>)
 8006770:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4a06      	ldr	r2, [pc, #24]	@ (8006790 <vApplicationGetTimerTaskMemory+0x30>)
 8006776:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800677e:	601a      	str	r2, [r3, #0]
}
 8006780:	bf00      	nop
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	200007f0 	.word	0x200007f0
 8006790:	2000084c 	.word	0x2000084c

08006794 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f103 0208 	add.w	r2, r3, #8
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f04f 32ff 	mov.w	r2, #4294967295
 80067ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f103 0208 	add.w	r2, r3, #8
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f103 0208 	add.w	r2, r3, #8
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006836:	b480      	push	{r7}
 8006838:	b085      	sub	sp, #20
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d103      	bne.n	8006856 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e00c      	b.n	8006870 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3308      	adds	r3, #8
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	e002      	b.n	8006864 <vListInsert+0x2e>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	429a      	cmp	r2, r3
 800686e:	d2f6      	bcs.n	800685e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	601a      	str	r2, [r3, #0]
}
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6892      	ldr	r2, [r2, #8]
 80068be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6852      	ldr	r2, [r2, #4]
 80068c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d103      	bne.n	80068dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	1e5a      	subs	r2, r3, #1
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10b      	bne.n	8006928 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	e7fd      	b.n	8006924 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006928:	f002 fe06 	bl	8009538 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006934:	68f9      	ldr	r1, [r7, #12]
 8006936:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006938:	fb01 f303 	mul.w	r3, r1, r3
 800693c:	441a      	add	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006958:	3b01      	subs	r3, #1
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800695e:	fb01 f303 	mul.w	r3, r1, r3
 8006962:	441a      	add	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	22ff      	movs	r2, #255	@ 0xff
 800696c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	22ff      	movs	r2, #255	@ 0xff
 8006974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d114      	bne.n	80069a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01a      	beq.n	80069bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3310      	adds	r3, #16
 800698a:	4618      	mov	r0, r3
 800698c:	f001 fda8 	bl	80084e0 <xTaskRemoveFromEventList>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d012      	beq.n	80069bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006996:	4b0d      	ldr	r3, [pc, #52]	@ (80069cc <xQueueGenericReset+0xd0>)
 8006998:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	e009      	b.n	80069bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3310      	adds	r3, #16
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fef1 	bl	8006794 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3324      	adds	r3, #36	@ 0x24
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff feec 	bl	8006794 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069bc:	f002 fdee 	bl	800959c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069c0:	2301      	movs	r3, #1
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08e      	sub	sp, #56	@ 0x38
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10b      	bne.n	80069fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	e7fd      	b.n	80069f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop
 8006a18:	e7fd      	b.n	8006a16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <xQueueGenericCreateStatic+0x56>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <xQueueGenericCreateStatic+0x5a>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <xQueueGenericCreateStatic+0x5c>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10b      	bne.n	8006a48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	623b      	str	r3, [r7, #32]
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	e7fd      	b.n	8006a44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <xQueueGenericCreateStatic+0x84>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <xQueueGenericCreateStatic+0x88>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <xQueueGenericCreateStatic+0x8a>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10b      	bne.n	8006a76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	61fb      	str	r3, [r7, #28]
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop
 8006a74:	e7fd      	b.n	8006a72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a76:	2350      	movs	r3, #80	@ 0x50
 8006a78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b50      	cmp	r3, #80	@ 0x50
 8006a7e:	d00b      	beq.n	8006a98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	61bb      	str	r3, [r7, #24]
}
 8006a92:	bf00      	nop
 8006a94:	bf00      	nop
 8006a96:	e7fd      	b.n	8006a94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00d      	beq.n	8006ac0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006aac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 f840 	bl	8006b40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3730      	adds	r7, #48	@ 0x30
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b08a      	sub	sp, #40	@ 0x28
 8006ace:	af02      	add	r7, sp, #8
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10b      	bne.n	8006af6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	613b      	str	r3, [r7, #16]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	fb02 f303 	mul.w	r3, r2, r3
 8006afe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	3350      	adds	r3, #80	@ 0x50
 8006b04:	4618      	mov	r0, r3
 8006b06:	f002 fe39 	bl	800977c <pvPortMalloc>
 8006b0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d011      	beq.n	8006b36 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	3350      	adds	r3, #80	@ 0x50
 8006b1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b24:	79fa      	ldrb	r2, [r7, #7]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f805 	bl	8006b40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b36:	69bb      	ldr	r3, [r7, #24]
	}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3720      	adds	r7, #32
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d103      	bne.n	8006b5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	e002      	b.n	8006b62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b6e:	2101      	movs	r1, #1
 8006b70:	69b8      	ldr	r0, [r7, #24]
 8006b72:	f7ff fec3 	bl	80068fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	78fa      	ldrb	r2, [r7, #3]
 8006b7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b08a      	sub	sp, #40	@ 0x28
 8006b8a:	af02      	add	r7, sp, #8
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10b      	bne.n	8006bb0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	61bb      	str	r3, [r7, #24]
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	e7fd      	b.n	8006bac <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d90b      	bls.n	8006bd0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	617b      	str	r3, [r7, #20]
}
 8006bca:	bf00      	nop
 8006bcc:	bf00      	nop
 8006bce:	e7fd      	b.n	8006bcc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2100      	movs	r1, #0
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7ff fef8 	bl	80069d0 <xQueueGenericCreateStatic>
 8006be0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006bee:	69fb      	ldr	r3, [r7, #28]
	}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3720      	adds	r7, #32
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10b      	bne.n	8006c20 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	613b      	str	r3, [r7, #16]
}
 8006c1a:	bf00      	nop
 8006c1c:	bf00      	nop
 8006c1e:	e7fd      	b.n	8006c1c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d90b      	bls.n	8006c40 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	60fb      	str	r3, [r7, #12]
}
 8006c3a:	bf00      	nop
 8006c3c:	bf00      	nop
 8006c3e:	e7fd      	b.n	8006c3c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006c40:	2202      	movs	r2, #2
 8006c42:	2100      	movs	r1, #0
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff ff40 	bl	8006aca <xQueueGenericCreate>
 8006c4a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006c58:	697b      	ldr	r3, [r7, #20]
	}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08e      	sub	sp, #56	@ 0x38
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c72:	2300      	movs	r3, #0
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10b      	bne.n	8006c98 <xQueueGenericSend+0x34>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c92:	bf00      	nop
 8006c94:	bf00      	nop
 8006c96:	e7fd      	b.n	8006c94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d103      	bne.n	8006ca6 <xQueueGenericSend+0x42>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <xQueueGenericSend+0x46>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <xQueueGenericSend+0x48>
 8006caa:	2300      	movs	r3, #0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10b      	bne.n	8006cc8 <xQueueGenericSend+0x64>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	e7fd      	b.n	8006cc4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d103      	bne.n	8006cd6 <xQueueGenericSend+0x72>
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <xQueueGenericSend+0x76>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <xQueueGenericSend+0x78>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10b      	bne.n	8006cf8 <xQueueGenericSend+0x94>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	623b      	str	r3, [r7, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	e7fd      	b.n	8006cf4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cf8:	f001 fdb2 	bl	8008860 <xTaskGetSchedulerState>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d102      	bne.n	8006d08 <xQueueGenericSend+0xa4>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <xQueueGenericSend+0xa8>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <xQueueGenericSend+0xaa>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10b      	bne.n	8006d2a <xQueueGenericSend+0xc6>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	61fb      	str	r3, [r7, #28]
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d2a:	f002 fc05 	bl	8009538 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d302      	bcc.n	8006d40 <xQueueGenericSend+0xdc>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d129      	bne.n	8006d94 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d46:	f000 fc6d 	bl	8007624 <prvCopyDataToQueue>
 8006d4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	3324      	adds	r3, #36	@ 0x24
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 fbc1 	bl	80084e0 <xTaskRemoveFromEventList>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d013      	beq.n	8006d8c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d64:	4b3f      	ldr	r3, [pc, #252]	@ (8006e64 <xQueueGenericSend+0x200>)
 8006d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	e00a      	b.n	8006d8c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d007      	beq.n	8006d8c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d7c:	4b39      	ldr	r3, [pc, #228]	@ (8006e64 <xQueueGenericSend+0x200>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d8c:	f002 fc06 	bl	800959c <vPortExitCritical>
				return pdPASS;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e063      	b.n	8006e5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d9a:	f002 fbff 	bl	800959c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e05c      	b.n	8006e5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d106      	bne.n	8006db6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006da8:	f107 0314 	add.w	r3, r7, #20
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 fbfb 	bl	80085a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006db2:	2301      	movs	r3, #1
 8006db4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006db6:	f002 fbf1 	bl	800959c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dba:	f001 f96b 	bl	8008094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dbe:	f002 fbbb 	bl	8009538 <vPortEnterCritical>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dc8:	b25b      	sxtb	r3, r3
 8006dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dce:	d103      	bne.n	8006dd8 <xQueueGenericSend+0x174>
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dde:	b25b      	sxtb	r3, r3
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d103      	bne.n	8006dee <xQueueGenericSend+0x18a>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dee:	f002 fbd5 	bl	800959c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006df2:	1d3a      	adds	r2, r7, #4
 8006df4:	f107 0314 	add.w	r3, r7, #20
 8006df8:	4611      	mov	r1, r2
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 fbea 	bl	80085d4 <xTaskCheckForTimeOut>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d124      	bne.n	8006e50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e08:	f000 fd04 	bl	8007814 <prvIsQueueFull>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d018      	beq.n	8006e44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	3310      	adds	r3, #16
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 fb0e 	bl	800843c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e22:	f000 fc8f 	bl	8007744 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e26:	f001 f943 	bl	80080b0 <xTaskResumeAll>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f47f af7c 	bne.w	8006d2a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006e32:	4b0c      	ldr	r3, [pc, #48]	@ (8006e64 <xQueueGenericSend+0x200>)
 8006e34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	e772      	b.n	8006d2a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e46:	f000 fc7d 	bl	8007744 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e4a:	f001 f931 	bl	80080b0 <xTaskResumeAll>
 8006e4e:	e76c      	b.n	8006d2a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e52:	f000 fc77 	bl	8007744 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e56:	f001 f92b 	bl	80080b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3738      	adds	r7, #56	@ 0x38
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	e000ed04 	.word	0xe000ed04

08006e68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b090      	sub	sp, #64	@ 0x40
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10b      	bne.n	8006e98 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e92:	bf00      	nop
 8006e94:	bf00      	nop
 8006e96:	e7fd      	b.n	8006e94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d103      	bne.n	8006ea6 <xQueueGenericSendFromISR+0x3e>
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <xQueueGenericSendFromISR+0x42>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e000      	b.n	8006eac <xQueueGenericSendFromISR+0x44>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10b      	bne.n	8006ec8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d103      	bne.n	8006ed6 <xQueueGenericSendFromISR+0x6e>
 8006ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <xQueueGenericSendFromISR+0x72>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <xQueueGenericSendFromISR+0x74>
 8006eda:	2300      	movs	r3, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10b      	bne.n	8006ef8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	623b      	str	r3, [r7, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	e7fd      	b.n	8006ef4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ef8:	f002 fbfe 	bl	80096f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006efc:	f3ef 8211 	mrs	r2, BASEPRI
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	61fa      	str	r2, [r7, #28]
 8006f12:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f14:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f16:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d302      	bcc.n	8006f2a <xQueueGenericSendFromISR+0xc2>
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d12f      	bne.n	8006f8a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f40:	f000 fb70 	bl	8007624 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f44:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4c:	d112      	bne.n	8006f74 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d016      	beq.n	8006f84 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f58:	3324      	adds	r3, #36	@ 0x24
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 fac0 	bl	80084e0 <xTaskRemoveFromEventList>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00e      	beq.n	8006f84 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	e007      	b.n	8006f84 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006f78:	3301      	adds	r3, #1
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	b25a      	sxtb	r2, r3
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f84:	2301      	movs	r3, #1
 8006f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006f88:	e001      	b.n	8006f8e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f90:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3740      	adds	r7, #64	@ 0x40
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08e      	sub	sp, #56	@ 0x38
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10b      	bne.n	8006fd0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	623b      	str	r3, [r7, #32]
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	e7fd      	b.n	8006fcc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	61fb      	str	r3, [r7, #28]
}
 8006fea:	bf00      	nop
 8006fec:	bf00      	nop
 8006fee:	e7fd      	b.n	8006fec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d103      	bne.n	8007000 <xQueueGiveFromISR+0x5c>
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <xQueueGiveFromISR+0x60>
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <xQueueGiveFromISR+0x62>
 8007004:	2300      	movs	r3, #0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	61bb      	str	r3, [r7, #24]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007022:	f002 fb69 	bl	80096f8 <vPortValidateInterruptPriority>
	__asm volatile
 8007026:	f3ef 8211 	mrs	r2, BASEPRI
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	617a      	str	r2, [r7, #20]
 800703c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800703e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007040:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007046:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800704e:	429a      	cmp	r2, r3
 8007050:	d22b      	bcs.n	80070aa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800705c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007064:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d112      	bne.n	8007094 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007072:	2b00      	cmp	r3, #0
 8007074:	d016      	beq.n	80070a4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007078:	3324      	adds	r3, #36	@ 0x24
 800707a:	4618      	mov	r0, r3
 800707c:	f001 fa30 	bl	80084e0 <xTaskRemoveFromEventList>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00b      	beq.n	80070a4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2201      	movs	r2, #1
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e007      	b.n	80070a4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007098:	3301      	adds	r3, #1
 800709a:	b2db      	uxtb	r3, r3
 800709c:	b25a      	sxtb	r2, r3
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80070a4:	2301      	movs	r3, #1
 80070a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a8:	e001      	b.n	80070ae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f383 8811 	msr	BASEPRI, r3
}
 80070b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3738      	adds	r7, #56	@ 0x38
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08c      	sub	sp, #48	@ 0x30
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10b      	bne.n	80070f6 <xQueueReceive+0x32>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	623b      	str	r3, [r7, #32]
}
 80070f0:	bf00      	nop
 80070f2:	bf00      	nop
 80070f4:	e7fd      	b.n	80070f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d103      	bne.n	8007104 <xQueueReceive+0x40>
 80070fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <xQueueReceive+0x44>
 8007104:	2301      	movs	r3, #1
 8007106:	e000      	b.n	800710a <xQueueReceive+0x46>
 8007108:	2300      	movs	r3, #0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10b      	bne.n	8007126 <xQueueReceive+0x62>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	61fb      	str	r3, [r7, #28]
}
 8007120:	bf00      	nop
 8007122:	bf00      	nop
 8007124:	e7fd      	b.n	8007122 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007126:	f001 fb9b 	bl	8008860 <xTaskGetSchedulerState>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d102      	bne.n	8007136 <xQueueReceive+0x72>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <xQueueReceive+0x76>
 8007136:	2301      	movs	r3, #1
 8007138:	e000      	b.n	800713c <xQueueReceive+0x78>
 800713a:	2300      	movs	r3, #0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10b      	bne.n	8007158 <xQueueReceive+0x94>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	61bb      	str	r3, [r7, #24]
}
 8007152:	bf00      	nop
 8007154:	bf00      	nop
 8007156:	e7fd      	b.n	8007154 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007158:	f002 f9ee 	bl	8009538 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800715c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007160:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007164:	2b00      	cmp	r3, #0
 8007166:	d01f      	beq.n	80071a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800716c:	f000 fac4 	bl	80076f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007172:	1e5a      	subs	r2, r3, #1
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00f      	beq.n	80071a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	3310      	adds	r3, #16
 8007184:	4618      	mov	r0, r3
 8007186:	f001 f9ab 	bl	80084e0 <xTaskRemoveFromEventList>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d007      	beq.n	80071a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007190:	4b3c      	ldr	r3, [pc, #240]	@ (8007284 <xQueueReceive+0x1c0>)
 8007192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071a0:	f002 f9fc 	bl	800959c <vPortExitCritical>
				return pdPASS;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e069      	b.n	800727c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d103      	bne.n	80071b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071ae:	f002 f9f5 	bl	800959c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071b2:	2300      	movs	r3, #0
 80071b4:	e062      	b.n	800727c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d106      	bne.n	80071ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071bc:	f107 0310 	add.w	r3, r7, #16
 80071c0:	4618      	mov	r0, r3
 80071c2:	f001 f9f1 	bl	80085a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071c6:	2301      	movs	r3, #1
 80071c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071ca:	f002 f9e7 	bl	800959c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071ce:	f000 ff61 	bl	8008094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071d2:	f002 f9b1 	bl	8009538 <vPortEnterCritical>
 80071d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071dc:	b25b      	sxtb	r3, r3
 80071de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e2:	d103      	bne.n	80071ec <xQueueReceive+0x128>
 80071e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071f2:	b25b      	sxtb	r3, r3
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d103      	bne.n	8007202 <xQueueReceive+0x13e>
 80071fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007202:	f002 f9cb 	bl	800959c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007206:	1d3a      	adds	r2, r7, #4
 8007208:	f107 0310 	add.w	r3, r7, #16
 800720c:	4611      	mov	r1, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f001 f9e0 	bl	80085d4 <xTaskCheckForTimeOut>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d123      	bne.n	8007262 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800721a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800721c:	f000 fae4 	bl	80077e8 <prvIsQueueEmpty>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d017      	beq.n	8007256 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007228:	3324      	adds	r3, #36	@ 0x24
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f001 f904 	bl	800843c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007236:	f000 fa85 	bl	8007744 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800723a:	f000 ff39 	bl	80080b0 <xTaskResumeAll>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d189      	bne.n	8007158 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007244:	4b0f      	ldr	r3, [pc, #60]	@ (8007284 <xQueueReceive+0x1c0>)
 8007246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	e780      	b.n	8007158 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007258:	f000 fa74 	bl	8007744 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800725c:	f000 ff28 	bl	80080b0 <xTaskResumeAll>
 8007260:	e77a      	b.n	8007158 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007264:	f000 fa6e 	bl	8007744 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007268:	f000 ff22 	bl	80080b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800726c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800726e:	f000 fabb 	bl	80077e8 <prvIsQueueEmpty>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	f43f af6f 	beq.w	8007158 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800727a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800727c:	4618      	mov	r0, r3
 800727e:	3730      	adds	r7, #48	@ 0x30
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	e000ed04 	.word	0xe000ed04

08007288 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08e      	sub	sp, #56	@ 0x38
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007292:	2300      	movs	r3, #0
 8007294:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800729a:	2300      	movs	r3, #0
 800729c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800729e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10b      	bne.n	80072bc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	623b      	str	r3, [r7, #32]
}
 80072b6:	bf00      	nop
 80072b8:	bf00      	nop
 80072ba:	e7fd      	b.n	80072b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	61fb      	str	r3, [r7, #28]
}
 80072d6:	bf00      	nop
 80072d8:	bf00      	nop
 80072da:	e7fd      	b.n	80072d8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072dc:	f001 fac0 	bl	8008860 <xTaskGetSchedulerState>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d102      	bne.n	80072ec <xQueueSemaphoreTake+0x64>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <xQueueSemaphoreTake+0x68>
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <xQueueSemaphoreTake+0x6a>
 80072f0:	2300      	movs	r3, #0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10b      	bne.n	800730e <xQueueSemaphoreTake+0x86>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	61bb      	str	r3, [r7, #24]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800730e:	f002 f913 	bl	8009538 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007316:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731a:	2b00      	cmp	r3, #0
 800731c:	d024      	beq.n	8007368 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800731e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007320:	1e5a      	subs	r2, r3, #1
 8007322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007324:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800732e:	f001 fc11 	bl	8008b54 <pvTaskIncrementMutexHeldCount>
 8007332:	4602      	mov	r2, r0
 8007334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007336:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00f      	beq.n	8007360 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007342:	3310      	adds	r3, #16
 8007344:	4618      	mov	r0, r3
 8007346:	f001 f8cb 	bl	80084e0 <xTaskRemoveFromEventList>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007350:	4b54      	ldr	r3, [pc, #336]	@ (80074a4 <xQueueSemaphoreTake+0x21c>)
 8007352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007360:	f002 f91c 	bl	800959c <vPortExitCritical>
				return pdPASS;
 8007364:	2301      	movs	r3, #1
 8007366:	e098      	b.n	800749a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d112      	bne.n	8007394 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00b      	beq.n	800738c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	617b      	str	r3, [r7, #20]
}
 8007386:	bf00      	nop
 8007388:	bf00      	nop
 800738a:	e7fd      	b.n	8007388 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800738c:	f002 f906 	bl	800959c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007390:	2300      	movs	r3, #0
 8007392:	e082      	b.n	800749a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800739a:	f107 030c 	add.w	r3, r7, #12
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 f902 	bl	80085a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073a8:	f002 f8f8 	bl	800959c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073ac:	f000 fe72 	bl	8008094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073b0:	f002 f8c2 	bl	8009538 <vPortEnterCritical>
 80073b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073ba:	b25b      	sxtb	r3, r3
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c0:	d103      	bne.n	80073ca <xQueueSemaphoreTake+0x142>
 80073c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073d0:	b25b      	sxtb	r3, r3
 80073d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d6:	d103      	bne.n	80073e0 <xQueueSemaphoreTake+0x158>
 80073d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073e0:	f002 f8dc 	bl	800959c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073e4:	463a      	mov	r2, r7
 80073e6:	f107 030c 	add.w	r3, r7, #12
 80073ea:	4611      	mov	r1, r2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f001 f8f1 	bl	80085d4 <xTaskCheckForTimeOut>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d132      	bne.n	800745e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073fa:	f000 f9f5 	bl	80077e8 <prvIsQueueEmpty>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d026      	beq.n	8007452 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d109      	bne.n	8007420 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800740c:	f002 f894 	bl	8009538 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	4618      	mov	r0, r3
 8007416:	f001 fa41 	bl	800889c <xTaskPriorityInherit>
 800741a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800741c:	f002 f8be 	bl	800959c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007422:	3324      	adds	r3, #36	@ 0x24
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	4611      	mov	r1, r2
 8007428:	4618      	mov	r0, r3
 800742a:	f001 f807 	bl	800843c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800742e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007430:	f000 f988 	bl	8007744 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007434:	f000 fe3c 	bl	80080b0 <xTaskResumeAll>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	f47f af67 	bne.w	800730e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007440:	4b18      	ldr	r3, [pc, #96]	@ (80074a4 <xQueueSemaphoreTake+0x21c>)
 8007442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	e75d      	b.n	800730e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007452:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007454:	f000 f976 	bl	8007744 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007458:	f000 fe2a 	bl	80080b0 <xTaskResumeAll>
 800745c:	e757      	b.n	800730e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800745e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007460:	f000 f970 	bl	8007744 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007464:	f000 fe24 	bl	80080b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007468:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800746a:	f000 f9bd 	bl	80077e8 <prvIsQueueEmpty>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	f43f af4c 	beq.w	800730e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00d      	beq.n	8007498 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800747c:	f002 f85c 	bl	8009538 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007480:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007482:	f000 f8b7 	bl	80075f4 <prvGetDisinheritPriorityAfterTimeout>
 8007486:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800748e:	4618      	mov	r0, r3
 8007490:	f001 fadc 	bl	8008a4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007494:	f002 f882 	bl	800959c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007498:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800749a:	4618      	mov	r0, r3
 800749c:	3738      	adds	r7, #56	@ 0x38
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	e000ed04 	.word	0xe000ed04

080074a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08e      	sub	sp, #56	@ 0x38
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10b      	bne.n	80074d6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	623b      	str	r3, [r7, #32]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d103      	bne.n	80074e4 <xQueueReceiveFromISR+0x3c>
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <xQueueReceiveFromISR+0x40>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <xQueueReceiveFromISR+0x42>
 80074e8:	2300      	movs	r3, #0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10b      	bne.n	8007506 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	61fb      	str	r3, [r7, #28]
}
 8007500:	bf00      	nop
 8007502:	bf00      	nop
 8007504:	e7fd      	b.n	8007502 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007506:	f002 f8f7 	bl	80096f8 <vPortValidateInterruptPriority>
	__asm volatile
 800750a:	f3ef 8211 	mrs	r2, BASEPRI
 800750e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	61ba      	str	r2, [r7, #24]
 8007520:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007522:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007524:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800752c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752e:	2b00      	cmp	r3, #0
 8007530:	d02f      	beq.n	8007592 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007540:	f000 f8da 	bl	80076f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007546:	1e5a      	subs	r2, r3, #1
 8007548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800754c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007554:	d112      	bne.n	800757c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d016      	beq.n	800758c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	3310      	adds	r3, #16
 8007562:	4618      	mov	r0, r3
 8007564:	f000 ffbc 	bl	80084e0 <xTaskRemoveFromEventList>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00e      	beq.n	800758c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	e007      	b.n	800758c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800757c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007580:	3301      	adds	r3, #1
 8007582:	b2db      	uxtb	r3, r3
 8007584:	b25a      	sxtb	r2, r3
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800758c:	2301      	movs	r3, #1
 800758e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007590:	e001      	b.n	8007596 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007592:	2300      	movs	r3, #0
 8007594:	637b      	str	r3, [r7, #52]	@ 0x34
 8007596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007598:	613b      	str	r3, [r7, #16]
	__asm volatile
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	f383 8811 	msr	BASEPRI, r3
}
 80075a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3738      	adds	r7, #56	@ 0x38
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10b      	bne.n	80075d6 <vQueueDelete+0x2a>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	60bb      	str	r3, [r7, #8]
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	e7fd      	b.n	80075d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f95e 	bl	8007898 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d102      	bne.n	80075ec <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f002 f996 	bl	8009918 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80075ec:	bf00      	nop
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007600:	2b00      	cmp	r3, #0
 8007602:	d006      	beq.n	8007612 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	e001      	b.n	8007616 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007616:	68fb      	ldr	r3, [r7, #12]
	}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007630:	2300      	movs	r3, #0
 8007632:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007638:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10d      	bne.n	800765e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d14d      	bne.n	80076e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	4618      	mov	r0, r3
 8007650:	f001 f98c 	bl	800896c <xTaskPriorityDisinherit>
 8007654:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	609a      	str	r2, [r3, #8]
 800765c:	e043      	b.n	80076e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d119      	bne.n	8007698 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6858      	ldr	r0, [r3, #4]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766c:	461a      	mov	r2, r3
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	f008 fd9b 	bl	80101aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800767c:	441a      	add	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	429a      	cmp	r2, r3
 800768c:	d32b      	bcc.n	80076e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	605a      	str	r2, [r3, #4]
 8007696:	e026      	b.n	80076e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	68d8      	ldr	r0, [r3, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a0:	461a      	mov	r2, r3
 80076a2:	68b9      	ldr	r1, [r7, #8]
 80076a4:	f008 fd81 	bl	80101aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b0:	425b      	negs	r3, r3
 80076b2:	441a      	add	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d207      	bcs.n	80076d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076cc:	425b      	negs	r3, r3
 80076ce:	441a      	add	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d105      	bne.n	80076e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80076ee:	697b      	ldr	r3, [r7, #20]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007706:	2b00      	cmp	r3, #0
 8007708:	d018      	beq.n	800773c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007712:	441a      	add	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	429a      	cmp	r2, r3
 8007722:	d303      	bcc.n	800772c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68d9      	ldr	r1, [r3, #12]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007734:	461a      	mov	r2, r3
 8007736:	6838      	ldr	r0, [r7, #0]
 8007738:	f008 fd37 	bl	80101aa <memcpy>
	}
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800774c:	f001 fef4 	bl	8009538 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007756:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007758:	e011      	b.n	800777e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775e:	2b00      	cmp	r3, #0
 8007760:	d012      	beq.n	8007788 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3324      	adds	r3, #36	@ 0x24
 8007766:	4618      	mov	r0, r3
 8007768:	f000 feba 	bl	80084e0 <xTaskRemoveFromEventList>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007772:	f000 ff93 	bl	800869c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	3b01      	subs	r3, #1
 800777a:	b2db      	uxtb	r3, r3
 800777c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800777e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007782:	2b00      	cmp	r3, #0
 8007784:	dce9      	bgt.n	800775a <prvUnlockQueue+0x16>
 8007786:	e000      	b.n	800778a <prvUnlockQueue+0x46>
					break;
 8007788:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	22ff      	movs	r2, #255	@ 0xff
 800778e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007792:	f001 ff03 	bl	800959c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007796:	f001 fecf 	bl	8009538 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077a2:	e011      	b.n	80077c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d012      	beq.n	80077d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3310      	adds	r3, #16
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fe95 	bl	80084e0 <xTaskRemoveFromEventList>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077bc:	f000 ff6e 	bl	800869c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dce9      	bgt.n	80077a4 <prvUnlockQueue+0x60>
 80077d0:	e000      	b.n	80077d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	22ff      	movs	r2, #255	@ 0xff
 80077d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80077dc:	f001 fede 	bl	800959c <vPortExitCritical>
}
 80077e0:	bf00      	nop
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077f0:	f001 fea2 	bl	8009538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d102      	bne.n	8007802 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	e001      	b.n	8007806 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007806:	f001 fec9 	bl	800959c <vPortExitCritical>

	return xReturn;
 800780a:	68fb      	ldr	r3, [r7, #12]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800781c:	f001 fe8c 	bl	8009538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007828:	429a      	cmp	r2, r3
 800782a:	d102      	bne.n	8007832 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800782c:	2301      	movs	r3, #1
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	e001      	b.n	8007836 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007836:	f001 feb1 	bl	800959c <vPortExitCritical>

	return xReturn;
 800783a:	68fb      	ldr	r3, [r7, #12]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	e014      	b.n	800787e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007854:	4a0f      	ldr	r2, [pc, #60]	@ (8007894 <vQueueAddToRegistry+0x50>)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10b      	bne.n	8007878 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007860:	490c      	ldr	r1, [pc, #48]	@ (8007894 <vQueueAddToRegistry+0x50>)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800786a:	4a0a      	ldr	r2, [pc, #40]	@ (8007894 <vQueueAddToRegistry+0x50>)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	4413      	add	r3, r2
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007876:	e006      	b.n	8007886 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3301      	adds	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b07      	cmp	r3, #7
 8007882:	d9e7      	bls.n	8007854 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20000c4c 	.word	0x20000c4c

08007898 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	e016      	b.n	80078d4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80078a6:	4a10      	ldr	r2, [pc, #64]	@ (80078e8 <vQueueUnregisterQueue+0x50>)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	4413      	add	r3, r2
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d10b      	bne.n	80078ce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80078b6:	4a0c      	ldr	r2, [pc, #48]	@ (80078e8 <vQueueUnregisterQueue+0x50>)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2100      	movs	r1, #0
 80078bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80078c0:	4a09      	ldr	r2, [pc, #36]	@ (80078e8 <vQueueUnregisterQueue+0x50>)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	4413      	add	r3, r2
 80078c8:	2200      	movs	r2, #0
 80078ca:	605a      	str	r2, [r3, #4]
				break;
 80078cc:	e006      	b.n	80078dc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b07      	cmp	r3, #7
 80078d8:	d9e5      	bls.n	80078a6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80078da:	bf00      	nop
 80078dc:	bf00      	nop
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	20000c4c 	.word	0x20000c4c

080078ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078fc:	f001 fe1c 	bl	8009538 <vPortEnterCritical>
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007906:	b25b      	sxtb	r3, r3
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790c:	d103      	bne.n	8007916 <vQueueWaitForMessageRestricted+0x2a>
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800791c:	b25b      	sxtb	r3, r3
 800791e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007922:	d103      	bne.n	800792c <vQueueWaitForMessageRestricted+0x40>
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800792c:	f001 fe36 	bl	800959c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007934:	2b00      	cmp	r3, #0
 8007936:	d106      	bne.n	8007946 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	3324      	adds	r3, #36	@ 0x24
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	68b9      	ldr	r1, [r7, #8]
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fda1 	bl	8008488 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007946:	6978      	ldr	r0, [r7, #20]
 8007948:	f7ff fefc 	bl	8007744 <prvUnlockQueue>
	}
 800794c:	bf00      	nop
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007954:	b580      	push	{r7, lr}
 8007956:	b08e      	sub	sp, #56	@ 0x38
 8007958:	af04      	add	r7, sp, #16
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10b      	bne.n	8007980 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	623b      	str	r3, [r7, #32]
}
 800797a:	bf00      	nop
 800797c:	bf00      	nop
 800797e:	e7fd      	b.n	800797c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10b      	bne.n	800799e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	61fb      	str	r3, [r7, #28]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800799e:	235c      	movs	r3, #92	@ 0x5c
 80079a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80079a6:	d00b      	beq.n	80079c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	61bb      	str	r3, [r7, #24]
}
 80079ba:	bf00      	nop
 80079bc:	bf00      	nop
 80079be:	e7fd      	b.n	80079bc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01e      	beq.n	8007a06 <xTaskCreateStatic+0xb2>
 80079c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d01b      	beq.n	8007a06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079e0:	2300      	movs	r3, #0
 80079e2:	9303      	str	r3, [sp, #12]
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	9302      	str	r3, [sp, #8]
 80079e8:	f107 0314 	add.w	r3, r7, #20
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 f850 	bl	8007a9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a00:	f000 f8de 	bl	8007bc0 <prvAddNewTaskToReadyList>
 8007a04:	e001      	b.n	8007a0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a0a:	697b      	ldr	r3, [r7, #20]
	}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3728      	adds	r7, #40	@ 0x28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08c      	sub	sp, #48	@ 0x30
 8007a18:	af04      	add	r7, sp, #16
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	4613      	mov	r3, r2
 8007a22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a24:	88fb      	ldrh	r3, [r7, #6]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f001 fea7 	bl	800977c <pvPortMalloc>
 8007a2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00e      	beq.n	8007a54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a36:	205c      	movs	r0, #92	@ 0x5c
 8007a38:	f001 fea0 	bl	800977c <pvPortMalloc>
 8007a3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a4a:	e005      	b.n	8007a58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a4c:	6978      	ldr	r0, [r7, #20]
 8007a4e:	f001 ff63 	bl	8009918 <vPortFree>
 8007a52:	e001      	b.n	8007a58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d017      	beq.n	8007a8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a66:	88fa      	ldrh	r2, [r7, #6]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9303      	str	r3, [sp, #12]
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	9302      	str	r3, [sp, #8]
 8007a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	68b9      	ldr	r1, [r7, #8]
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 f80e 	bl	8007a9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a82:	69f8      	ldr	r0, [r7, #28]
 8007a84:	f000 f89c 	bl	8007bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	61bb      	str	r3, [r7, #24]
 8007a8c:	e002      	b.n	8007a94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a94:	69bb      	ldr	r3, [r7, #24]
	}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3720      	adds	r7, #32
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b088      	sub	sp, #32
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	21a5      	movs	r1, #165	@ 0xa5
 8007ab8:	f008 faeb 	bl	8010092 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	f023 0307 	bic.w	r3, r3, #7
 8007ad4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	f003 0307 	and.w	r3, r3, #7
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	617b      	str	r3, [r7, #20]
}
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	e7fd      	b.n	8007af4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d01f      	beq.n	8007b3e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007afe:	2300      	movs	r3, #0
 8007b00:	61fb      	str	r3, [r7, #28]
 8007b02:	e012      	b.n	8007b2a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	7819      	ldrb	r1, [r3, #0]
 8007b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	4413      	add	r3, r2
 8007b12:	3334      	adds	r3, #52	@ 0x34
 8007b14:	460a      	mov	r2, r1
 8007b16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d006      	beq.n	8007b32 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	3301      	adds	r3, #1
 8007b28:	61fb      	str	r3, [r7, #28]
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	2b0f      	cmp	r3, #15
 8007b2e:	d9e9      	bls.n	8007b04 <prvInitialiseNewTask+0x66>
 8007b30:	e000      	b.n	8007b34 <prvInitialiseNewTask+0x96>
			{
				break;
 8007b32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b3c:	e003      	b.n	8007b46 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b48:	2b37      	cmp	r3, #55	@ 0x37
 8007b4a:	d901      	bls.n	8007b50 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b4c:	2337      	movs	r3, #55	@ 0x37
 8007b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b54:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b5a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	2200      	movs	r2, #0
 8007b60:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b64:	3304      	adds	r3, #4
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe fe34 	bl	80067d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	3318      	adds	r3, #24
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fe fe2f 	bl	80067d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b8a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8e:	2200      	movs	r2, #0
 8007b90:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	68f9      	ldr	r1, [r7, #12]
 8007b9e:	69b8      	ldr	r0, [r7, #24]
 8007ba0:	f001 fb9a 	bl	80092d8 <pxPortInitialiseStack>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	3720      	adds	r7, #32
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007bc8:	f001 fcb6 	bl	8009538 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8007c84 <prvAddNewTaskToReadyList+0xc4>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8007c84 <prvAddNewTaskToReadyList+0xc4>)
 8007bd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8007c88 <prvAddNewTaskToReadyList+0xc8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007bde:	4a2a      	ldr	r2, [pc, #168]	@ (8007c88 <prvAddNewTaskToReadyList+0xc8>)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007be4:	4b27      	ldr	r3, [pc, #156]	@ (8007c84 <prvAddNewTaskToReadyList+0xc4>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d110      	bne.n	8007c0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007bec:	f000 fd7a 	bl	80086e4 <prvInitialiseTaskLists>
 8007bf0:	e00d      	b.n	8007c0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007bf2:	4b26      	ldr	r3, [pc, #152]	@ (8007c8c <prvAddNewTaskToReadyList+0xcc>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bfa:	4b23      	ldr	r3, [pc, #140]	@ (8007c88 <prvAddNewTaskToReadyList+0xc8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d802      	bhi.n	8007c0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c08:	4a1f      	ldr	r2, [pc, #124]	@ (8007c88 <prvAddNewTaskToReadyList+0xc8>)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c0e:	4b20      	ldr	r3, [pc, #128]	@ (8007c90 <prvAddNewTaskToReadyList+0xd0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3301      	adds	r3, #1
 8007c14:	4a1e      	ldr	r2, [pc, #120]	@ (8007c90 <prvAddNewTaskToReadyList+0xd0>)
 8007c16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c18:	4b1d      	ldr	r3, [pc, #116]	@ (8007c90 <prvAddNewTaskToReadyList+0xd0>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c24:	4b1b      	ldr	r3, [pc, #108]	@ (8007c94 <prvAddNewTaskToReadyList+0xd4>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d903      	bls.n	8007c34 <prvAddNewTaskToReadyList+0x74>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c30:	4a18      	ldr	r2, [pc, #96]	@ (8007c94 <prvAddNewTaskToReadyList+0xd4>)
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4a15      	ldr	r2, [pc, #84]	@ (8007c98 <prvAddNewTaskToReadyList+0xd8>)
 8007c42:	441a      	add	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f7fe fdcf 	bl	80067ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c50:	f001 fca4 	bl	800959c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c54:	4b0d      	ldr	r3, [pc, #52]	@ (8007c8c <prvAddNewTaskToReadyList+0xcc>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00e      	beq.n	8007c7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c88 <prvAddNewTaskToReadyList+0xc8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d207      	bcs.n	8007c7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c9c <prvAddNewTaskToReadyList+0xdc>)
 8007c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c7a:	bf00      	nop
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20001160 	.word	0x20001160
 8007c88:	20000c8c 	.word	0x20000c8c
 8007c8c:	2000116c 	.word	0x2000116c
 8007c90:	2000117c 	.word	0x2000117c
 8007c94:	20001168 	.word	0x20001168
 8007c98:	20000c90 	.word	0x20000c90
 8007c9c:	e000ed04 	.word	0xe000ed04

08007ca0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007ca8:	f001 fc46 	bl	8009538 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d102      	bne.n	8007cb8 <vTaskDelete+0x18>
 8007cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8007d68 <vTaskDelete+0xc8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	e000      	b.n	8007cba <vTaskDelete+0x1a>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fdf1 	bl	80068a8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3318      	adds	r3, #24
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fde8 	bl	80068a8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007cd8:	4b24      	ldr	r3, [pc, #144]	@ (8007d6c <vTaskDelete+0xcc>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	4a23      	ldr	r2, [pc, #140]	@ (8007d6c <vTaskDelete+0xcc>)
 8007ce0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007ce2:	4b21      	ldr	r3, [pc, #132]	@ (8007d68 <vTaskDelete+0xc8>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d10b      	bne.n	8007d04 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	481f      	ldr	r0, [pc, #124]	@ (8007d70 <vTaskDelete+0xd0>)
 8007cf4:	f7fe fd7b 	bl	80067ee <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8007d74 <vTaskDelete+0xd4>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8007d74 <vTaskDelete+0xd4>)
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	e009      	b.n	8007d18 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007d04:	4b1c      	ldr	r3, [pc, #112]	@ (8007d78 <vTaskDelete+0xd8>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d78 <vTaskDelete+0xd8>)
 8007d0c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 fd56 	bl	80087c0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007d14:	f000 fd84 	bl	8008820 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007d18:	f001 fc40 	bl	800959c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007d1c:	4b17      	ldr	r3, [pc, #92]	@ (8007d7c <vTaskDelete+0xdc>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d01c      	beq.n	8007d5e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8007d24:	4b10      	ldr	r3, [pc, #64]	@ (8007d68 <vTaskDelete+0xc8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d117      	bne.n	8007d5e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007d2e:	4b14      	ldr	r3, [pc, #80]	@ (8007d80 <vTaskDelete+0xe0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00b      	beq.n	8007d4e <vTaskDelete+0xae>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	60bb      	str	r3, [r7, #8]
}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	e7fd      	b.n	8007d4a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d84 <vTaskDelete+0xe4>)
 8007d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20000c8c 	.word	0x20000c8c
 8007d6c:	2000117c 	.word	0x2000117c
 8007d70:	20001134 	.word	0x20001134
 8007d74:	20001148 	.word	0x20001148
 8007d78:	20001160 	.word	0x20001160
 8007d7c:	2000116c 	.word	0x2000116c
 8007d80:	20001188 	.word	0x20001188
 8007d84:	e000ed04 	.word	0xe000ed04

08007d88 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08a      	sub	sp, #40	@ 0x28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007d92:	2300      	movs	r3, #0
 8007d94:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10b      	bne.n	8007db4 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	617b      	str	r3, [r7, #20]
}
 8007dae:	bf00      	nop
 8007db0:	bf00      	nop
 8007db2:	e7fd      	b.n	8007db0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10b      	bne.n	8007dd2 <vTaskDelayUntil+0x4a>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	613b      	str	r3, [r7, #16]
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	e7fd      	b.n	8007dce <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8007dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8007e7c <vTaskDelayUntil+0xf4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <vTaskDelayUntil+0x6a>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	60fb      	str	r3, [r7, #12]
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	e7fd      	b.n	8007dee <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8007df2:	f000 f94f 	bl	8008094 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007df6:	4b22      	ldr	r3, [pc, #136]	@ (8007e80 <vTaskDelayUntil+0xf8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	4413      	add	r3, r2
 8007e04:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	6a3a      	ldr	r2, [r7, #32]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d20b      	bcs.n	8007e28 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d211      	bcs.n	8007e3e <vTaskDelayUntil+0xb6>
 8007e1a:	69fa      	ldr	r2, [r7, #28]
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d90d      	bls.n	8007e3e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007e22:	2301      	movs	r3, #1
 8007e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e26:	e00a      	b.n	8007e3e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d303      	bcc.n	8007e3a <vTaskDelayUntil+0xb2>
 8007e32:	69fa      	ldr	r2, [r7, #28]
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d901      	bls.n	8007e3e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d006      	beq.n	8007e58 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007e4a:	69fa      	ldr	r2, [r7, #28]
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2100      	movs	r1, #0
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fe92 	bl	8008b7c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007e58:	f000 f92a 	bl	80080b0 <xTaskResumeAll>
 8007e5c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d107      	bne.n	8007e74 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007e64:	4b07      	ldr	r3, [pc, #28]	@ (8007e84 <vTaskDelayUntil+0xfc>)
 8007e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e74:	bf00      	nop
 8007e76:	3728      	adds	r7, #40	@ 0x28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	20001188 	.word	0x20001188
 8007e80:	20001164 	.word	0x20001164
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d018      	beq.n	8007ecc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e9a:	4b14      	ldr	r3, [pc, #80]	@ (8007eec <vTaskDelay+0x64>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00b      	beq.n	8007eba <vTaskDelay+0x32>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	60bb      	str	r3, [r7, #8]
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop
 8007eb8:	e7fd      	b.n	8007eb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007eba:	f000 f8eb 	bl	8008094 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fe5b 	bl	8008b7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ec6:	f000 f8f3 	bl	80080b0 <xTaskResumeAll>
 8007eca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d107      	bne.n	8007ee2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007ed2:	4b07      	ldr	r3, [pc, #28]	@ (8007ef0 <vTaskDelay+0x68>)
 8007ed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ee2:	bf00      	nop
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20001188 	.word	0x20001188
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10b      	bne.n	8007f1e <eTaskGetState+0x2a>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	60bb      	str	r3, [r7, #8]
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	e7fd      	b.n	8007f1a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8007f1e:	4b24      	ldr	r3, [pc, #144]	@ (8007fb0 <eTaskGetState+0xbc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d102      	bne.n	8007f2e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	77fb      	strb	r3, [r7, #31]
 8007f2c:	e03a      	b.n	8007fa4 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8007f2e:	f001 fb03 	bl	8009538 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8007f38:	4b1e      	ldr	r3, [pc, #120]	@ (8007fb4 <eTaskGetState+0xc0>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8007f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fb8 <eTaskGetState+0xc4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8007f44:	f001 fb2a 	bl	800959c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d003      	beq.n	8007f58 <eTaskGetState+0x64>
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d102      	bne.n	8007f5e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	77fb      	strb	r3, [r7, #31]
 8007f5c:	e022      	b.n	8007fa4 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	4a16      	ldr	r2, [pc, #88]	@ (8007fbc <eTaskGetState+0xc8>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d112      	bne.n	8007f8c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10b      	bne.n	8007f86 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d102      	bne.n	8007f80 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	77fb      	strb	r3, [r7, #31]
 8007f7e:	e011      	b.n	8007fa4 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8007f80:	2303      	movs	r3, #3
 8007f82:	77fb      	strb	r3, [r7, #31]
 8007f84:	e00e      	b.n	8007fa4 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8007f86:	2302      	movs	r3, #2
 8007f88:	77fb      	strb	r3, [r7, #31]
 8007f8a:	e00b      	b.n	8007fa4 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8007fc0 <eTaskGetState+0xcc>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d002      	beq.n	8007f9a <eTaskGetState+0xa6>
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d102      	bne.n	8007fa0 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8007f9a:	2304      	movs	r3, #4
 8007f9c:	77fb      	strb	r3, [r7, #31]
 8007f9e:	e001      	b.n	8007fa4 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8007fa4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3720      	adds	r7, #32
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000c8c 	.word	0x20000c8c
 8007fb4:	20001118 	.word	0x20001118
 8007fb8:	2000111c 	.word	0x2000111c
 8007fbc:	2000114c 	.word	0x2000114c
 8007fc0:	20001134 	.word	0x20001134

08007fc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08a      	sub	sp, #40	@ 0x28
 8007fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fd2:	463a      	mov	r2, r7
 8007fd4:	1d39      	adds	r1, r7, #4
 8007fd6:	f107 0308 	add.w	r3, r7, #8
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe fba6 	bl	800672c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	9202      	str	r2, [sp, #8]
 8007fe8:	9301      	str	r3, [sp, #4]
 8007fea:	2300      	movs	r3, #0
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	460a      	mov	r2, r1
 8007ff2:	4922      	ldr	r1, [pc, #136]	@ (800807c <vTaskStartScheduler+0xb8>)
 8007ff4:	4822      	ldr	r0, [pc, #136]	@ (8008080 <vTaskStartScheduler+0xbc>)
 8007ff6:	f7ff fcad 	bl	8007954 <xTaskCreateStatic>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	4a21      	ldr	r2, [pc, #132]	@ (8008084 <vTaskStartScheduler+0xc0>)
 8007ffe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008000:	4b20      	ldr	r3, [pc, #128]	@ (8008084 <vTaskStartScheduler+0xc0>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008008:	2301      	movs	r3, #1
 800800a:	617b      	str	r3, [r7, #20]
 800800c:	e001      	b.n	8008012 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d102      	bne.n	800801e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008018:	f000 fe04 	bl	8008c24 <xTimerCreateTimerTask>
 800801c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d116      	bne.n	8008052 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	613b      	str	r3, [r7, #16]
}
 8008036:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008038:	4b13      	ldr	r3, [pc, #76]	@ (8008088 <vTaskStartScheduler+0xc4>)
 800803a:	f04f 32ff 	mov.w	r2, #4294967295
 800803e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008040:	4b12      	ldr	r3, [pc, #72]	@ (800808c <vTaskStartScheduler+0xc8>)
 8008042:	2201      	movs	r2, #1
 8008044:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008046:	4b12      	ldr	r3, [pc, #72]	@ (8008090 <vTaskStartScheduler+0xcc>)
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800804c:	f001 f9d0 	bl	80093f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008050:	e00f      	b.n	8008072 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008058:	d10b      	bne.n	8008072 <vTaskStartScheduler+0xae>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	60fb      	str	r3, [r7, #12]
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	e7fd      	b.n	800806e <vTaskStartScheduler+0xaa>
}
 8008072:	bf00      	nop
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	08010c90 	.word	0x08010c90
 8008080:	080086b5 	.word	0x080086b5
 8008084:	20001184 	.word	0x20001184
 8008088:	20001180 	.word	0x20001180
 800808c:	2000116c 	.word	0x2000116c
 8008090:	20001164 	.word	0x20001164

08008094 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008098:	4b04      	ldr	r3, [pc, #16]	@ (80080ac <vTaskSuspendAll+0x18>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3301      	adds	r3, #1
 800809e:	4a03      	ldr	r2, [pc, #12]	@ (80080ac <vTaskSuspendAll+0x18>)
 80080a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080a2:	bf00      	nop
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20001188 	.word	0x20001188

080080b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080be:	4b42      	ldr	r3, [pc, #264]	@ (80081c8 <xTaskResumeAll+0x118>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10b      	bne.n	80080de <xTaskResumeAll+0x2e>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	603b      	str	r3, [r7, #0]
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
 80080dc:	e7fd      	b.n	80080da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080de:	f001 fa2b 	bl	8009538 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080e2:	4b39      	ldr	r3, [pc, #228]	@ (80081c8 <xTaskResumeAll+0x118>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	4a37      	ldr	r2, [pc, #220]	@ (80081c8 <xTaskResumeAll+0x118>)
 80080ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ec:	4b36      	ldr	r3, [pc, #216]	@ (80081c8 <xTaskResumeAll+0x118>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d162      	bne.n	80081ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080f4:	4b35      	ldr	r3, [pc, #212]	@ (80081cc <xTaskResumeAll+0x11c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d05e      	beq.n	80081ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080fc:	e02f      	b.n	800815e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080fe:	4b34      	ldr	r3, [pc, #208]	@ (80081d0 <xTaskResumeAll+0x120>)
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3318      	adds	r3, #24
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe fbcc 	bl	80068a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3304      	adds	r3, #4
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe fbc7 	bl	80068a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800811e:	4b2d      	ldr	r3, [pc, #180]	@ (80081d4 <xTaskResumeAll+0x124>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d903      	bls.n	800812e <xTaskResumeAll+0x7e>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812a:	4a2a      	ldr	r2, [pc, #168]	@ (80081d4 <xTaskResumeAll+0x124>)
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4a27      	ldr	r2, [pc, #156]	@ (80081d8 <xTaskResumeAll+0x128>)
 800813c:	441a      	add	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3304      	adds	r3, #4
 8008142:	4619      	mov	r1, r3
 8008144:	4610      	mov	r0, r2
 8008146:	f7fe fb52 	bl	80067ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800814e:	4b23      	ldr	r3, [pc, #140]	@ (80081dc <xTaskResumeAll+0x12c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008154:	429a      	cmp	r2, r3
 8008156:	d302      	bcc.n	800815e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008158:	4b21      	ldr	r3, [pc, #132]	@ (80081e0 <xTaskResumeAll+0x130>)
 800815a:	2201      	movs	r2, #1
 800815c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800815e:	4b1c      	ldr	r3, [pc, #112]	@ (80081d0 <xTaskResumeAll+0x120>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1cb      	bne.n	80080fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800816c:	f000 fb58 	bl	8008820 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008170:	4b1c      	ldr	r3, [pc, #112]	@ (80081e4 <xTaskResumeAll+0x134>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d010      	beq.n	800819e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800817c:	f000 f846 	bl	800820c <xTaskIncrementTick>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d002      	beq.n	800818c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008186:	4b16      	ldr	r3, [pc, #88]	@ (80081e0 <xTaskResumeAll+0x130>)
 8008188:	2201      	movs	r2, #1
 800818a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3b01      	subs	r3, #1
 8008190:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1f1      	bne.n	800817c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008198:	4b12      	ldr	r3, [pc, #72]	@ (80081e4 <xTaskResumeAll+0x134>)
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800819e:	4b10      	ldr	r3, [pc, #64]	@ (80081e0 <xTaskResumeAll+0x130>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d009      	beq.n	80081ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081a6:	2301      	movs	r3, #1
 80081a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081aa:	4b0f      	ldr	r3, [pc, #60]	@ (80081e8 <xTaskResumeAll+0x138>)
 80081ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081ba:	f001 f9ef 	bl	800959c <vPortExitCritical>

	return xAlreadyYielded;
 80081be:	68bb      	ldr	r3, [r7, #8]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20001188 	.word	0x20001188
 80081cc:	20001160 	.word	0x20001160
 80081d0:	20001120 	.word	0x20001120
 80081d4:	20001168 	.word	0x20001168
 80081d8:	20000c90 	.word	0x20000c90
 80081dc:	20000c8c 	.word	0x20000c8c
 80081e0:	20001174 	.word	0x20001174
 80081e4:	20001170 	.word	0x20001170
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80081f2:	4b05      	ldr	r3, [pc, #20]	@ (8008208 <xTaskGetTickCount+0x1c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80081f8:	687b      	ldr	r3, [r7, #4]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20001164 	.word	0x20001164

0800820c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008216:	4b4f      	ldr	r3, [pc, #316]	@ (8008354 <xTaskIncrementTick+0x148>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f040 8090 	bne.w	8008340 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008220:	4b4d      	ldr	r3, [pc, #308]	@ (8008358 <xTaskIncrementTick+0x14c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3301      	adds	r3, #1
 8008226:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008228:	4a4b      	ldr	r2, [pc, #300]	@ (8008358 <xTaskIncrementTick+0x14c>)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d121      	bne.n	8008278 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008234:	4b49      	ldr	r3, [pc, #292]	@ (800835c <xTaskIncrementTick+0x150>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00b      	beq.n	8008256 <xTaskIncrementTick+0x4a>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	603b      	str	r3, [r7, #0]
}
 8008250:	bf00      	nop
 8008252:	bf00      	nop
 8008254:	e7fd      	b.n	8008252 <xTaskIncrementTick+0x46>
 8008256:	4b41      	ldr	r3, [pc, #260]	@ (800835c <xTaskIncrementTick+0x150>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	4b40      	ldr	r3, [pc, #256]	@ (8008360 <xTaskIncrementTick+0x154>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a3e      	ldr	r2, [pc, #248]	@ (800835c <xTaskIncrementTick+0x150>)
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	4a3e      	ldr	r2, [pc, #248]	@ (8008360 <xTaskIncrementTick+0x154>)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	4b3e      	ldr	r3, [pc, #248]	@ (8008364 <xTaskIncrementTick+0x158>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3301      	adds	r3, #1
 8008270:	4a3c      	ldr	r2, [pc, #240]	@ (8008364 <xTaskIncrementTick+0x158>)
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	f000 fad4 	bl	8008820 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008278:	4b3b      	ldr	r3, [pc, #236]	@ (8008368 <xTaskIncrementTick+0x15c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	429a      	cmp	r2, r3
 8008280:	d349      	bcc.n	8008316 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008282:	4b36      	ldr	r3, [pc, #216]	@ (800835c <xTaskIncrementTick+0x150>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800828c:	4b36      	ldr	r3, [pc, #216]	@ (8008368 <xTaskIncrementTick+0x15c>)
 800828e:	f04f 32ff 	mov.w	r2, #4294967295
 8008292:	601a      	str	r2, [r3, #0]
					break;
 8008294:	e03f      	b.n	8008316 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008296:	4b31      	ldr	r3, [pc, #196]	@ (800835c <xTaskIncrementTick+0x150>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d203      	bcs.n	80082b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082ae:	4a2e      	ldr	r2, [pc, #184]	@ (8008368 <xTaskIncrementTick+0x15c>)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082b4:	e02f      	b.n	8008316 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	3304      	adds	r3, #4
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe faf4 	bl	80068a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d004      	beq.n	80082d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	3318      	adds	r3, #24
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fe faeb 	bl	80068a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d6:	4b25      	ldr	r3, [pc, #148]	@ (800836c <xTaskIncrementTick+0x160>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d903      	bls.n	80082e6 <xTaskIncrementTick+0xda>
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e2:	4a22      	ldr	r2, [pc, #136]	@ (800836c <xTaskIncrementTick+0x160>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008370 <xTaskIncrementTick+0x164>)
 80082f4:	441a      	add	r2, r3
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f7fe fa76 	bl	80067ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008306:	4b1b      	ldr	r3, [pc, #108]	@ (8008374 <xTaskIncrementTick+0x168>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830c:	429a      	cmp	r2, r3
 800830e:	d3b8      	bcc.n	8008282 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008310:	2301      	movs	r3, #1
 8008312:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008314:	e7b5      	b.n	8008282 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008316:	4b17      	ldr	r3, [pc, #92]	@ (8008374 <xTaskIncrementTick+0x168>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800831c:	4914      	ldr	r1, [pc, #80]	@ (8008370 <xTaskIncrementTick+0x164>)
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	440b      	add	r3, r1
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d901      	bls.n	8008332 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800832e:	2301      	movs	r3, #1
 8008330:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008332:	4b11      	ldr	r3, [pc, #68]	@ (8008378 <xTaskIncrementTick+0x16c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d007      	beq.n	800834a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800833a:	2301      	movs	r3, #1
 800833c:	617b      	str	r3, [r7, #20]
 800833e:	e004      	b.n	800834a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008340:	4b0e      	ldr	r3, [pc, #56]	@ (800837c <xTaskIncrementTick+0x170>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3301      	adds	r3, #1
 8008346:	4a0d      	ldr	r2, [pc, #52]	@ (800837c <xTaskIncrementTick+0x170>)
 8008348:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800834a:	697b      	ldr	r3, [r7, #20]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3718      	adds	r7, #24
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	20001188 	.word	0x20001188
 8008358:	20001164 	.word	0x20001164
 800835c:	20001118 	.word	0x20001118
 8008360:	2000111c 	.word	0x2000111c
 8008364:	20001178 	.word	0x20001178
 8008368:	20001180 	.word	0x20001180
 800836c:	20001168 	.word	0x20001168
 8008370:	20000c90 	.word	0x20000c90
 8008374:	20000c8c 	.word	0x20000c8c
 8008378:	20001174 	.word	0x20001174
 800837c:	20001170 	.word	0x20001170

08008380 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008386:	4b28      	ldr	r3, [pc, #160]	@ (8008428 <vTaskSwitchContext+0xa8>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800838e:	4b27      	ldr	r3, [pc, #156]	@ (800842c <vTaskSwitchContext+0xac>)
 8008390:	2201      	movs	r2, #1
 8008392:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008394:	e042      	b.n	800841c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008396:	4b25      	ldr	r3, [pc, #148]	@ (800842c <vTaskSwitchContext+0xac>)
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800839c:	4b24      	ldr	r3, [pc, #144]	@ (8008430 <vTaskSwitchContext+0xb0>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	60fb      	str	r3, [r7, #12]
 80083a2:	e011      	b.n	80083c8 <vTaskSwitchContext+0x48>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10b      	bne.n	80083c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	607b      	str	r3, [r7, #4]
}
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	e7fd      	b.n	80083be <vTaskSwitchContext+0x3e>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	491a      	ldr	r1, [pc, #104]	@ (8008434 <vTaskSwitchContext+0xb4>)
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0e3      	beq.n	80083a4 <vTaskSwitchContext+0x24>
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4a13      	ldr	r2, [pc, #76]	@ (8008434 <vTaskSwitchContext+0xb4>)
 80083e8:	4413      	add	r3, r2
 80083ea:	60bb      	str	r3, [r7, #8]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	605a      	str	r2, [r3, #4]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	3308      	adds	r3, #8
 80083fe:	429a      	cmp	r2, r3
 8008400:	d104      	bne.n	800840c <vTaskSwitchContext+0x8c>
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	605a      	str	r2, [r3, #4]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	4a09      	ldr	r2, [pc, #36]	@ (8008438 <vTaskSwitchContext+0xb8>)
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	4a06      	ldr	r2, [pc, #24]	@ (8008430 <vTaskSwitchContext+0xb0>)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6013      	str	r3, [r2, #0]
}
 800841c:	bf00      	nop
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	20001188 	.word	0x20001188
 800842c:	20001174 	.word	0x20001174
 8008430:	20001168 	.word	0x20001168
 8008434:	20000c90 	.word	0x20000c90
 8008438:	20000c8c 	.word	0x20000c8c

0800843c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10b      	bne.n	8008464 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	60fb      	str	r3, [r7, #12]
}
 800845e:	bf00      	nop
 8008460:	bf00      	nop
 8008462:	e7fd      	b.n	8008460 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008464:	4b07      	ldr	r3, [pc, #28]	@ (8008484 <vTaskPlaceOnEventList+0x48>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3318      	adds	r3, #24
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7fe f9e2 	bl	8006836 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008472:	2101      	movs	r1, #1
 8008474:	6838      	ldr	r0, [r7, #0]
 8008476:	f000 fb81 	bl	8008b7c <prvAddCurrentTaskToDelayedList>
}
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20000c8c 	.word	0x20000c8c

08008488 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10b      	bne.n	80084b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	617b      	str	r3, [r7, #20]
}
 80084ac:	bf00      	nop
 80084ae:	bf00      	nop
 80084b0:	e7fd      	b.n	80084ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084b2:	4b0a      	ldr	r3, [pc, #40]	@ (80084dc <vTaskPlaceOnEventListRestricted+0x54>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3318      	adds	r3, #24
 80084b8:	4619      	mov	r1, r3
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f7fe f997 	bl	80067ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80084c6:	f04f 33ff 	mov.w	r3, #4294967295
 80084ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	68b8      	ldr	r0, [r7, #8]
 80084d0:	f000 fb54 	bl	8008b7c <prvAddCurrentTaskToDelayedList>
	}
 80084d4:	bf00      	nop
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20000c8c 	.word	0x20000c8c

080084e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10b      	bne.n	800850e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	60fb      	str	r3, [r7, #12]
}
 8008508:	bf00      	nop
 800850a:	bf00      	nop
 800850c:	e7fd      	b.n	800850a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	3318      	adds	r3, #24
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe f9c8 	bl	80068a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008518:	4b1d      	ldr	r3, [pc, #116]	@ (8008590 <xTaskRemoveFromEventList+0xb0>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d11d      	bne.n	800855c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	3304      	adds	r3, #4
 8008524:	4618      	mov	r0, r3
 8008526:	f7fe f9bf 	bl	80068a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800852e:	4b19      	ldr	r3, [pc, #100]	@ (8008594 <xTaskRemoveFromEventList+0xb4>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d903      	bls.n	800853e <xTaskRemoveFromEventList+0x5e>
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853a:	4a16      	ldr	r2, [pc, #88]	@ (8008594 <xTaskRemoveFromEventList+0xb4>)
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008542:	4613      	mov	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4a13      	ldr	r2, [pc, #76]	@ (8008598 <xTaskRemoveFromEventList+0xb8>)
 800854c:	441a      	add	r2, r3
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	3304      	adds	r3, #4
 8008552:	4619      	mov	r1, r3
 8008554:	4610      	mov	r0, r2
 8008556:	f7fe f94a 	bl	80067ee <vListInsertEnd>
 800855a:	e005      	b.n	8008568 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	3318      	adds	r3, #24
 8008560:	4619      	mov	r1, r3
 8008562:	480e      	ldr	r0, [pc, #56]	@ (800859c <xTaskRemoveFromEventList+0xbc>)
 8008564:	f7fe f943 	bl	80067ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800856c:	4b0c      	ldr	r3, [pc, #48]	@ (80085a0 <xTaskRemoveFromEventList+0xc0>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008572:	429a      	cmp	r2, r3
 8008574:	d905      	bls.n	8008582 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008576:	2301      	movs	r3, #1
 8008578:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800857a:	4b0a      	ldr	r3, [pc, #40]	@ (80085a4 <xTaskRemoveFromEventList+0xc4>)
 800857c:	2201      	movs	r2, #1
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	e001      	b.n	8008586 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008582:	2300      	movs	r3, #0
 8008584:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008586:	697b      	ldr	r3, [r7, #20]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20001188 	.word	0x20001188
 8008594:	20001168 	.word	0x20001168
 8008598:	20000c90 	.word	0x20000c90
 800859c:	20001120 	.word	0x20001120
 80085a0:	20000c8c 	.word	0x20000c8c
 80085a4:	20001174 	.word	0x20001174

080085a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085b0:	4b06      	ldr	r3, [pc, #24]	@ (80085cc <vTaskInternalSetTimeOutState+0x24>)
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085b8:	4b05      	ldr	r3, [pc, #20]	@ (80085d0 <vTaskInternalSetTimeOutState+0x28>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	605a      	str	r2, [r3, #4]
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	20001178 	.word	0x20001178
 80085d0:	20001164 	.word	0x20001164

080085d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10b      	bne.n	80085fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	613b      	str	r3, [r7, #16]
}
 80085f6:	bf00      	nop
 80085f8:	bf00      	nop
 80085fa:	e7fd      	b.n	80085f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10b      	bne.n	800861a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	60fb      	str	r3, [r7, #12]
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	e7fd      	b.n	8008616 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800861a:	f000 ff8d 	bl	8009538 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800861e:	4b1d      	ldr	r3, [pc, #116]	@ (8008694 <xTaskCheckForTimeOut+0xc0>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008636:	d102      	bne.n	800863e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008638:	2300      	movs	r3, #0
 800863a:	61fb      	str	r3, [r7, #28]
 800863c:	e023      	b.n	8008686 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	4b15      	ldr	r3, [pc, #84]	@ (8008698 <xTaskCheckForTimeOut+0xc4>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d007      	beq.n	800865a <xTaskCheckForTimeOut+0x86>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	69ba      	ldr	r2, [r7, #24]
 8008650:	429a      	cmp	r2, r3
 8008652:	d302      	bcc.n	800865a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008654:	2301      	movs	r3, #1
 8008656:	61fb      	str	r3, [r7, #28]
 8008658:	e015      	b.n	8008686 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	429a      	cmp	r2, r3
 8008662:	d20b      	bcs.n	800867c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	1ad2      	subs	r2, r2, r3
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff ff99 	bl	80085a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008676:	2300      	movs	r3, #0
 8008678:	61fb      	str	r3, [r7, #28]
 800867a:	e004      	b.n	8008686 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008682:	2301      	movs	r3, #1
 8008684:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008686:	f000 ff89 	bl	800959c <vPortExitCritical>

	return xReturn;
 800868a:	69fb      	ldr	r3, [r7, #28]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3720      	adds	r7, #32
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20001164 	.word	0x20001164
 8008698:	20001178 	.word	0x20001178

0800869c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086a0:	4b03      	ldr	r3, [pc, #12]	@ (80086b0 <vTaskMissedYield+0x14>)
 80086a2:	2201      	movs	r2, #1
 80086a4:	601a      	str	r2, [r3, #0]
}
 80086a6:	bf00      	nop
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	20001174 	.word	0x20001174

080086b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086bc:	f000 f852 	bl	8008764 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086c0:	4b06      	ldr	r3, [pc, #24]	@ (80086dc <prvIdleTask+0x28>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d9f9      	bls.n	80086bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80086c8:	4b05      	ldr	r3, [pc, #20]	@ (80086e0 <prvIdleTask+0x2c>)
 80086ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086d8:	e7f0      	b.n	80086bc <prvIdleTask+0x8>
 80086da:	bf00      	nop
 80086dc:	20000c90 	.word	0x20000c90
 80086e0:	e000ed04 	.word	0xe000ed04

080086e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086ea:	2300      	movs	r3, #0
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	e00c      	b.n	800870a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4a12      	ldr	r2, [pc, #72]	@ (8008744 <prvInitialiseTaskLists+0x60>)
 80086fc:	4413      	add	r3, r2
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe f848 	bl	8006794 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3301      	adds	r3, #1
 8008708:	607b      	str	r3, [r7, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b37      	cmp	r3, #55	@ 0x37
 800870e:	d9ef      	bls.n	80086f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008710:	480d      	ldr	r0, [pc, #52]	@ (8008748 <prvInitialiseTaskLists+0x64>)
 8008712:	f7fe f83f 	bl	8006794 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008716:	480d      	ldr	r0, [pc, #52]	@ (800874c <prvInitialiseTaskLists+0x68>)
 8008718:	f7fe f83c 	bl	8006794 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800871c:	480c      	ldr	r0, [pc, #48]	@ (8008750 <prvInitialiseTaskLists+0x6c>)
 800871e:	f7fe f839 	bl	8006794 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008722:	480c      	ldr	r0, [pc, #48]	@ (8008754 <prvInitialiseTaskLists+0x70>)
 8008724:	f7fe f836 	bl	8006794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008728:	480b      	ldr	r0, [pc, #44]	@ (8008758 <prvInitialiseTaskLists+0x74>)
 800872a:	f7fe f833 	bl	8006794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800872e:	4b0b      	ldr	r3, [pc, #44]	@ (800875c <prvInitialiseTaskLists+0x78>)
 8008730:	4a05      	ldr	r2, [pc, #20]	@ (8008748 <prvInitialiseTaskLists+0x64>)
 8008732:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008734:	4b0a      	ldr	r3, [pc, #40]	@ (8008760 <prvInitialiseTaskLists+0x7c>)
 8008736:	4a05      	ldr	r2, [pc, #20]	@ (800874c <prvInitialiseTaskLists+0x68>)
 8008738:	601a      	str	r2, [r3, #0]
}
 800873a:	bf00      	nop
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20000c90 	.word	0x20000c90
 8008748:	200010f0 	.word	0x200010f0
 800874c:	20001104 	.word	0x20001104
 8008750:	20001120 	.word	0x20001120
 8008754:	20001134 	.word	0x20001134
 8008758:	2000114c 	.word	0x2000114c
 800875c:	20001118 	.word	0x20001118
 8008760:	2000111c 	.word	0x2000111c

08008764 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800876a:	e019      	b.n	80087a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800876c:	f000 fee4 	bl	8009538 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008770:	4b10      	ldr	r3, [pc, #64]	@ (80087b4 <prvCheckTasksWaitingTermination+0x50>)
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3304      	adds	r3, #4
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe f893 	bl	80068a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008782:	4b0d      	ldr	r3, [pc, #52]	@ (80087b8 <prvCheckTasksWaitingTermination+0x54>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3b01      	subs	r3, #1
 8008788:	4a0b      	ldr	r2, [pc, #44]	@ (80087b8 <prvCheckTasksWaitingTermination+0x54>)
 800878a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800878c:	4b0b      	ldr	r3, [pc, #44]	@ (80087bc <prvCheckTasksWaitingTermination+0x58>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3b01      	subs	r3, #1
 8008792:	4a0a      	ldr	r2, [pc, #40]	@ (80087bc <prvCheckTasksWaitingTermination+0x58>)
 8008794:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008796:	f000 ff01 	bl	800959c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f810 	bl	80087c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087a0:	4b06      	ldr	r3, [pc, #24]	@ (80087bc <prvCheckTasksWaitingTermination+0x58>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e1      	bne.n	800876c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20001134 	.word	0x20001134
 80087b8:	20001160 	.word	0x20001160
 80087bc:	20001148 	.word	0x20001148

080087c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d108      	bne.n	80087e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d6:	4618      	mov	r0, r3
 80087d8:	f001 f89e 	bl	8009918 <vPortFree>
				vPortFree( pxTCB );
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 f89b 	bl	8009918 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087e2:	e019      	b.n	8008818 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d103      	bne.n	80087f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 f892 	bl	8009918 <vPortFree>
	}
 80087f4:	e010      	b.n	8008818 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d00b      	beq.n	8008818 <prvDeleteTCB+0x58>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	60fb      	str	r3, [r7, #12]
}
 8008812:	bf00      	nop
 8008814:	bf00      	nop
 8008816:	e7fd      	b.n	8008814 <prvDeleteTCB+0x54>
	}
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008826:	4b0c      	ldr	r3, [pc, #48]	@ (8008858 <prvResetNextTaskUnblockTime+0x38>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d104      	bne.n	800883a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008830:	4b0a      	ldr	r3, [pc, #40]	@ (800885c <prvResetNextTaskUnblockTime+0x3c>)
 8008832:	f04f 32ff 	mov.w	r2, #4294967295
 8008836:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008838:	e008      	b.n	800884c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800883a:	4b07      	ldr	r3, [pc, #28]	@ (8008858 <prvResetNextTaskUnblockTime+0x38>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	4a04      	ldr	r2, [pc, #16]	@ (800885c <prvResetNextTaskUnblockTime+0x3c>)
 800884a:	6013      	str	r3, [r2, #0]
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	20001118 	.word	0x20001118
 800885c:	20001180 	.word	0x20001180

08008860 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008866:	4b0b      	ldr	r3, [pc, #44]	@ (8008894 <xTaskGetSchedulerState+0x34>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800886e:	2301      	movs	r3, #1
 8008870:	607b      	str	r3, [r7, #4]
 8008872:	e008      	b.n	8008886 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008874:	4b08      	ldr	r3, [pc, #32]	@ (8008898 <xTaskGetSchedulerState+0x38>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d102      	bne.n	8008882 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800887c:	2302      	movs	r3, #2
 800887e:	607b      	str	r3, [r7, #4]
 8008880:	e001      	b.n	8008886 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008882:	2300      	movs	r3, #0
 8008884:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008886:	687b      	ldr	r3, [r7, #4]
	}
 8008888:	4618      	mov	r0, r3
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	2000116c 	.word	0x2000116c
 8008898:	20001188 	.word	0x20001188

0800889c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d051      	beq.n	8008956 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b6:	4b2a      	ldr	r3, [pc, #168]	@ (8008960 <xTaskPriorityInherit+0xc4>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088bc:	429a      	cmp	r2, r3
 80088be:	d241      	bcs.n	8008944 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	db06      	blt.n	80088d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c8:	4b25      	ldr	r3, [pc, #148]	@ (8008960 <xTaskPriorityInherit+0xc4>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	6959      	ldr	r1, [r3, #20]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088de:	4613      	mov	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4a1f      	ldr	r2, [pc, #124]	@ (8008964 <xTaskPriorityInherit+0xc8>)
 80088e8:	4413      	add	r3, r2
 80088ea:	4299      	cmp	r1, r3
 80088ec:	d122      	bne.n	8008934 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	3304      	adds	r3, #4
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fd ffd8 	bl	80068a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088f8:	4b19      	ldr	r3, [pc, #100]	@ (8008960 <xTaskPriorityInherit+0xc4>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008906:	4b18      	ldr	r3, [pc, #96]	@ (8008968 <xTaskPriorityInherit+0xcc>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d903      	bls.n	8008916 <xTaskPriorityInherit+0x7a>
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008912:	4a15      	ldr	r2, [pc, #84]	@ (8008968 <xTaskPriorityInherit+0xcc>)
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4a10      	ldr	r2, [pc, #64]	@ (8008964 <xTaskPriorityInherit+0xc8>)
 8008924:	441a      	add	r2, r3
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	3304      	adds	r3, #4
 800892a:	4619      	mov	r1, r3
 800892c:	4610      	mov	r0, r2
 800892e:	f7fd ff5e 	bl	80067ee <vListInsertEnd>
 8008932:	e004      	b.n	800893e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008934:	4b0a      	ldr	r3, [pc, #40]	@ (8008960 <xTaskPriorityInherit+0xc4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800893e:	2301      	movs	r3, #1
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	e008      	b.n	8008956 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008948:	4b05      	ldr	r3, [pc, #20]	@ (8008960 <xTaskPriorityInherit+0xc4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894e:	429a      	cmp	r2, r3
 8008950:	d201      	bcs.n	8008956 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008952:	2301      	movs	r3, #1
 8008954:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008956:	68fb      	ldr	r3, [r7, #12]
	}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	20000c8c 	.word	0x20000c8c
 8008964:	20000c90 	.word	0x20000c90
 8008968:	20001168 	.word	0x20001168

0800896c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008978:	2300      	movs	r3, #0
 800897a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d058      	beq.n	8008a34 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008982:	4b2f      	ldr	r3, [pc, #188]	@ (8008a40 <xTaskPriorityDisinherit+0xd4>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	429a      	cmp	r2, r3
 800898a:	d00b      	beq.n	80089a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	60fb      	str	r3, [r7, #12]
}
 800899e:	bf00      	nop
 80089a0:	bf00      	nop
 80089a2:	e7fd      	b.n	80089a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10b      	bne.n	80089c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	60bb      	str	r3, [r7, #8]
}
 80089be:	bf00      	nop
 80089c0:	bf00      	nop
 80089c2:	e7fd      	b.n	80089c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089c8:	1e5a      	subs	r2, r3, #1
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d02c      	beq.n	8008a34 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d128      	bne.n	8008a34 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	3304      	adds	r3, #4
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fd ff5e 	bl	80068a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a04:	4b0f      	ldr	r3, [pc, #60]	@ (8008a44 <xTaskPriorityDisinherit+0xd8>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d903      	bls.n	8008a14 <xTaskPriorityDisinherit+0xa8>
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a10:	4a0c      	ldr	r2, [pc, #48]	@ (8008a44 <xTaskPriorityDisinherit+0xd8>)
 8008a12:	6013      	str	r3, [r2, #0]
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a18:	4613      	mov	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4a09      	ldr	r2, [pc, #36]	@ (8008a48 <xTaskPriorityDisinherit+0xdc>)
 8008a22:	441a      	add	r2, r3
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	3304      	adds	r3, #4
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	f7fd fedf 	bl	80067ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a30:	2301      	movs	r3, #1
 8008a32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a34:	697b      	ldr	r3, [r7, #20]
	}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000c8c 	.word	0x20000c8c
 8008a44:	20001168 	.word	0x20001168
 8008a48:	20000c90 	.word	0x20000c90

08008a4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d06c      	beq.n	8008b3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10b      	bne.n	8008a84 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	60fb      	str	r3, [r7, #12]
}
 8008a7e:	bf00      	nop
 8008a80:	bf00      	nop
 8008a82:	e7fd      	b.n	8008a80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d902      	bls.n	8008a94 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	61fb      	str	r3, [r7, #28]
 8008a92:	e002      	b.n	8008a9a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a98:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9e:	69fa      	ldr	r2, [r7, #28]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d04c      	beq.n	8008b3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d147      	bne.n	8008b3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008aae:	4b26      	ldr	r3, [pc, #152]	@ (8008b48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d10b      	bne.n	8008ad0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	60bb      	str	r3, [r7, #8]
}
 8008aca:	bf00      	nop
 8008acc:	bf00      	nop
 8008ace:	e7fd      	b.n	8008acc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	69fa      	ldr	r2, [r7, #28]
 8008ada:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	db04      	blt.n	8008aee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	6959      	ldr	r1, [r3, #20]
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4a13      	ldr	r2, [pc, #76]	@ (8008b4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008afe:	4413      	add	r3, r2
 8008b00:	4299      	cmp	r1, r3
 8008b02:	d11c      	bne.n	8008b3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	3304      	adds	r3, #4
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fd fecd 	bl	80068a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b12:	4b0f      	ldr	r3, [pc, #60]	@ (8008b50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d903      	bls.n	8008b22 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008b20:	6013      	str	r3, [r2, #0]
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4a07      	ldr	r2, [pc, #28]	@ (8008b4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b30:	441a      	add	r2, r3
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	3304      	adds	r3, #4
 8008b36:	4619      	mov	r1, r3
 8008b38:	4610      	mov	r0, r2
 8008b3a:	f7fd fe58 	bl	80067ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b3e:	bf00      	nop
 8008b40:	3720      	adds	r7, #32
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000c8c 	.word	0x20000c8c
 8008b4c:	20000c90 	.word	0x20000c90
 8008b50:	20001168 	.word	0x20001168

08008b54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b58:	4b07      	ldr	r3, [pc, #28]	@ (8008b78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d004      	beq.n	8008b6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b60:	4b05      	ldr	r3, [pc, #20]	@ (8008b78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b66:	3201      	adds	r2, #1
 8008b68:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008b6a:	4b03      	ldr	r3, [pc, #12]	@ (8008b78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
	}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	20000c8c 	.word	0x20000c8c

08008b7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b86:	4b21      	ldr	r3, [pc, #132]	@ (8008c0c <prvAddCurrentTaskToDelayedList+0x90>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b8c:	4b20      	ldr	r3, [pc, #128]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3304      	adds	r3, #4
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fd fe88 	bl	80068a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9e:	d10a      	bne.n	8008bb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d007      	beq.n	8008bb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3304      	adds	r3, #4
 8008bac:	4619      	mov	r1, r3
 8008bae:	4819      	ldr	r0, [pc, #100]	@ (8008c14 <prvAddCurrentTaskToDelayedList+0x98>)
 8008bb0:	f7fd fe1d 	bl	80067ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bb4:	e026      	b.n	8008c04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4413      	add	r3, r2
 8008bbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bbe:	4b14      	ldr	r3, [pc, #80]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d209      	bcs.n	8008be2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bce:	4b12      	ldr	r3, [pc, #72]	@ (8008c18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f7fd fe2b 	bl	8006836 <vListInsert>
}
 8008be0:	e010      	b.n	8008c04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008be2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	4b0a      	ldr	r3, [pc, #40]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3304      	adds	r3, #4
 8008bec:	4619      	mov	r1, r3
 8008bee:	4610      	mov	r0, r2
 8008bf0:	f7fd fe21 	bl	8006836 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d202      	bcs.n	8008c04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bfe:	4a08      	ldr	r2, [pc, #32]	@ (8008c20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	6013      	str	r3, [r2, #0]
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20001164 	.word	0x20001164
 8008c10:	20000c8c 	.word	0x20000c8c
 8008c14:	2000114c 	.word	0x2000114c
 8008c18:	2000111c 	.word	0x2000111c
 8008c1c:	20001118 	.word	0x20001118
 8008c20:	20001180 	.word	0x20001180

08008c24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08a      	sub	sp, #40	@ 0x28
 8008c28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c2e:	f000 fb13 	bl	8009258 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c32:	4b1d      	ldr	r3, [pc, #116]	@ (8008ca8 <xTimerCreateTimerTask+0x84>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d021      	beq.n	8008c7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c42:	1d3a      	adds	r2, r7, #4
 8008c44:	f107 0108 	add.w	r1, r7, #8
 8008c48:	f107 030c 	add.w	r3, r7, #12
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fd fd87 	bl	8006760 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c52:	6879      	ldr	r1, [r7, #4]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	9202      	str	r2, [sp, #8]
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	2300      	movs	r3, #0
 8008c62:	460a      	mov	r2, r1
 8008c64:	4911      	ldr	r1, [pc, #68]	@ (8008cac <xTimerCreateTimerTask+0x88>)
 8008c66:	4812      	ldr	r0, [pc, #72]	@ (8008cb0 <xTimerCreateTimerTask+0x8c>)
 8008c68:	f7fe fe74 	bl	8007954 <xTaskCreateStatic>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	4a11      	ldr	r2, [pc, #68]	@ (8008cb4 <xTimerCreateTimerTask+0x90>)
 8008c70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c72:	4b10      	ldr	r3, [pc, #64]	@ (8008cb4 <xTimerCreateTimerTask+0x90>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10b      	bne.n	8008c9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	613b      	str	r3, [r7, #16]
}
 8008c96:	bf00      	nop
 8008c98:	bf00      	nop
 8008c9a:	e7fd      	b.n	8008c98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c9c:	697b      	ldr	r3, [r7, #20]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3718      	adds	r7, #24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	200011bc 	.word	0x200011bc
 8008cac:	08010c98 	.word	0x08010c98
 8008cb0:	08008df1 	.word	0x08008df1
 8008cb4:	200011c0 	.word	0x200011c0

08008cb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08a      	sub	sp, #40	@ 0x28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10b      	bne.n	8008ce8 <xTimerGenericCommand+0x30>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	623b      	str	r3, [r7, #32]
}
 8008ce2:	bf00      	nop
 8008ce4:	bf00      	nop
 8008ce6:	e7fd      	b.n	8008ce4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ce8:	4b19      	ldr	r3, [pc, #100]	@ (8008d50 <xTimerGenericCommand+0x98>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d02a      	beq.n	8008d46 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b05      	cmp	r3, #5
 8008d00:	dc18      	bgt.n	8008d34 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d02:	f7ff fdad 	bl	8008860 <xTaskGetSchedulerState>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d109      	bne.n	8008d20 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d0c:	4b10      	ldr	r3, [pc, #64]	@ (8008d50 <xTimerGenericCommand+0x98>)
 8008d0e:	6818      	ldr	r0, [r3, #0]
 8008d10:	f107 0110 	add.w	r1, r7, #16
 8008d14:	2300      	movs	r3, #0
 8008d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d18:	f7fd ffa4 	bl	8006c64 <xQueueGenericSend>
 8008d1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d1e:	e012      	b.n	8008d46 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d20:	4b0b      	ldr	r3, [pc, #44]	@ (8008d50 <xTimerGenericCommand+0x98>)
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	f107 0110 	add.w	r1, r7, #16
 8008d28:	2300      	movs	r3, #0
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f7fd ff9a 	bl	8006c64 <xQueueGenericSend>
 8008d30:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d32:	e008      	b.n	8008d46 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d34:	4b06      	ldr	r3, [pc, #24]	@ (8008d50 <xTimerGenericCommand+0x98>)
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	f107 0110 	add.w	r1, r7, #16
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	f7fe f892 	bl	8006e68 <xQueueGenericSendFromISR>
 8008d44:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3728      	adds	r7, #40	@ 0x28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	200011bc 	.word	0x200011bc

08008d54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d5e:	4b23      	ldr	r3, [pc, #140]	@ (8008dec <prvProcessExpiredTimer+0x98>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fd fd9b 	bl	80068a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d023      	beq.n	8008dc8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	699a      	ldr	r2, [r3, #24]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	18d1      	adds	r1, r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	6978      	ldr	r0, [r7, #20]
 8008d8e:	f000 f8d5 	bl	8008f3c <prvInsertTimerInActiveList>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d020      	beq.n	8008dda <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d98:	2300      	movs	r3, #0
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	2100      	movs	r1, #0
 8008da2:	6978      	ldr	r0, [r7, #20]
 8008da4:	f7ff ff88 	bl	8008cb8 <xTimerGenericCommand>
 8008da8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d114      	bne.n	8008dda <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	60fb      	str	r3, [r7, #12]
}
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	e7fd      	b.n	8008dc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dce:	f023 0301 	bic.w	r3, r3, #1
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	6978      	ldr	r0, [r7, #20]
 8008de0:	4798      	blx	r3
}
 8008de2:	bf00      	nop
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	200011b4 	.word	0x200011b4

08008df0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008df8:	f107 0308 	add.w	r3, r7, #8
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 f859 	bl	8008eb4 <prvGetNextExpireTime>
 8008e02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	4619      	mov	r1, r3
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 f805 	bl	8008e18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e0e:	f000 f8d7 	bl	8008fc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e12:	bf00      	nop
 8008e14:	e7f0      	b.n	8008df8 <prvTimerTask+0x8>
	...

08008e18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e22:	f7ff f937 	bl	8008094 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e26:	f107 0308 	add.w	r3, r7, #8
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 f866 	bl	8008efc <prvSampleTimeNow>
 8008e30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d130      	bne.n	8008e9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <prvProcessTimerOrBlockTask+0x3c>
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d806      	bhi.n	8008e54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e46:	f7ff f933 	bl	80080b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e4a:	68f9      	ldr	r1, [r7, #12]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff ff81 	bl	8008d54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e52:	e024      	b.n	8008e9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d008      	beq.n	8008e6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e5a:	4b13      	ldr	r3, [pc, #76]	@ (8008ea8 <prvProcessTimerOrBlockTask+0x90>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <prvProcessTimerOrBlockTask+0x50>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e000      	b.n	8008e6a <prvProcessTimerOrBlockTask+0x52>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8008eac <prvProcessTimerOrBlockTask+0x94>)
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f7fe fd37 	bl	80078ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e7e:	f7ff f917 	bl	80080b0 <xTaskResumeAll>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e88:	4b09      	ldr	r3, [pc, #36]	@ (8008eb0 <prvProcessTimerOrBlockTask+0x98>)
 8008e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	f3bf 8f6f 	isb	sy
}
 8008e98:	e001      	b.n	8008e9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e9a:	f7ff f909 	bl	80080b0 <xTaskResumeAll>
}
 8008e9e:	bf00      	nop
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	200011b8 	.word	0x200011b8
 8008eac:	200011bc 	.word	0x200011bc
 8008eb0:	e000ed04 	.word	0xe000ed04

08008eb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef8 <prvGetNextExpireTime+0x44>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <prvGetNextExpireTime+0x16>
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	e000      	b.n	8008ecc <prvGetNextExpireTime+0x18>
 8008eca:	2200      	movs	r2, #0
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d105      	bne.n	8008ee4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ed8:	4b07      	ldr	r3, [pc, #28]	@ (8008ef8 <prvGetNextExpireTime+0x44>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	e001      	b.n	8008ee8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	200011b4 	.word	0x200011b4

08008efc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f04:	f7ff f972 	bl	80081ec <xTaskGetTickCount>
 8008f08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f38 <prvSampleTimeNow+0x3c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d205      	bcs.n	8008f20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f14:	f000 f93a 	bl	800918c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	e002      	b.n	8008f26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f26:	4a04      	ldr	r2, [pc, #16]	@ (8008f38 <prvSampleTimeNow+0x3c>)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	200011c4 	.word	0x200011c4

08008f3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
 8008f48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d812      	bhi.n	8008f88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	1ad2      	subs	r2, r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d302      	bcc.n	8008f76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f70:	2301      	movs	r3, #1
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	e01b      	b.n	8008fae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f76:	4b10      	ldr	r3, [pc, #64]	@ (8008fb8 <prvInsertTimerInActiveList+0x7c>)
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4610      	mov	r0, r2
 8008f82:	f7fd fc58 	bl	8006836 <vListInsert>
 8008f86:	e012      	b.n	8008fae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d206      	bcs.n	8008f9e <prvInsertTimerInActiveList+0x62>
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d302      	bcc.n	8008f9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	e007      	b.n	8008fae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f9e:	4b07      	ldr	r3, [pc, #28]	@ (8008fbc <prvInsertTimerInActiveList+0x80>)
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4610      	mov	r0, r2
 8008faa:	f7fd fc44 	bl	8006836 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008fae:	697b      	ldr	r3, [r7, #20]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	200011b8 	.word	0x200011b8
 8008fbc:	200011b4 	.word	0x200011b4

08008fc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08e      	sub	sp, #56	@ 0x38
 8008fc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fc6:	e0ce      	b.n	8009166 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	da19      	bge.n	8009002 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008fce:	1d3b      	adds	r3, r7, #4
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10b      	bne.n	8008ff2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	61fb      	str	r3, [r7, #28]
}
 8008fec:	bf00      	nop
 8008fee:	bf00      	nop
 8008ff0:	e7fd      	b.n	8008fee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ff8:	6850      	ldr	r0, [r2, #4]
 8008ffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ffc:	6892      	ldr	r2, [r2, #8]
 8008ffe:	4611      	mov	r1, r2
 8009000:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	f2c0 80ae 	blt.w	8009166 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800900e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d004      	beq.n	8009020 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009018:	3304      	adds	r3, #4
 800901a:	4618      	mov	r0, r3
 800901c:	f7fd fc44 	bl	80068a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009020:	463b      	mov	r3, r7
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff ff6a 	bl	8008efc <prvSampleTimeNow>
 8009028:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b09      	cmp	r3, #9
 800902e:	f200 8097 	bhi.w	8009160 <prvProcessReceivedCommands+0x1a0>
 8009032:	a201      	add	r2, pc, #4	@ (adr r2, 8009038 <prvProcessReceivedCommands+0x78>)
 8009034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009038:	08009061 	.word	0x08009061
 800903c:	08009061 	.word	0x08009061
 8009040:	08009061 	.word	0x08009061
 8009044:	080090d7 	.word	0x080090d7
 8009048:	080090eb 	.word	0x080090eb
 800904c:	08009137 	.word	0x08009137
 8009050:	08009061 	.word	0x08009061
 8009054:	08009061 	.word	0x08009061
 8009058:	080090d7 	.word	0x080090d7
 800905c:	080090eb 	.word	0x080090eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009062:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009066:	f043 0301 	orr.w	r3, r3, #1
 800906a:	b2da      	uxtb	r2, r3
 800906c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	18d1      	adds	r1, r2, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800907e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009080:	f7ff ff5c 	bl	8008f3c <prvInsertTimerInActiveList>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d06c      	beq.n	8009164 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800908a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009090:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009094:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b00      	cmp	r3, #0
 800909e:	d061      	beq.n	8009164 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	441a      	add	r2, r3
 80090a8:	2300      	movs	r3, #0
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	2300      	movs	r3, #0
 80090ae:	2100      	movs	r1, #0
 80090b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090b2:	f7ff fe01 	bl	8008cb8 <xTimerGenericCommand>
 80090b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d152      	bne.n	8009164 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	61bb      	str	r3, [r7, #24]
}
 80090d0:	bf00      	nop
 80090d2:	bf00      	nop
 80090d4:	e7fd      	b.n	80090d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090dc:	f023 0301 	bic.w	r3, r3, #1
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80090e8:	e03d      	b.n	8009166 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090f0:	f043 0301 	orr.w	r3, r3, #1
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009100:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10b      	bne.n	8009122 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	617b      	str	r3, [r7, #20]
}
 800911c:	bf00      	nop
 800911e:	bf00      	nop
 8009120:	e7fd      	b.n	800911e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009124:	699a      	ldr	r2, [r3, #24]
 8009126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009128:	18d1      	adds	r1, r2, r3
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800912e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009130:	f7ff ff04 	bl	8008f3c <prvInsertTimerInActiveList>
					break;
 8009134:	e017      	b.n	8009166 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009138:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b00      	cmp	r3, #0
 8009142:	d103      	bne.n	800914c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009146:	f000 fbe7 	bl	8009918 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800914a:	e00c      	b.n	8009166 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800914c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009152:	f023 0301 	bic.w	r3, r3, #1
 8009156:	b2da      	uxtb	r2, r3
 8009158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800915e:	e002      	b.n	8009166 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009160:	bf00      	nop
 8009162:	e000      	b.n	8009166 <prvProcessReceivedCommands+0x1a6>
					break;
 8009164:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009166:	4b08      	ldr	r3, [pc, #32]	@ (8009188 <prvProcessReceivedCommands+0x1c8>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	1d39      	adds	r1, r7, #4
 800916c:	2200      	movs	r2, #0
 800916e:	4618      	mov	r0, r3
 8009170:	f7fd ffa8 	bl	80070c4 <xQueueReceive>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	f47f af26 	bne.w	8008fc8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800917c:	bf00      	nop
 800917e:	bf00      	nop
 8009180:	3730      	adds	r7, #48	@ 0x30
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	200011bc 	.word	0x200011bc

0800918c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b088      	sub	sp, #32
 8009190:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009192:	e049      	b.n	8009228 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009194:	4b2e      	ldr	r3, [pc, #184]	@ (8009250 <prvSwitchTimerLists+0xc4>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919e:	4b2c      	ldr	r3, [pc, #176]	@ (8009250 <prvSwitchTimerLists+0xc4>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3304      	adds	r3, #4
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fd fb7b 	bl	80068a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d02f      	beq.n	8009228 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	4413      	add	r3, r2
 80091d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d90e      	bls.n	80091f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009250 <prvSwitchTimerLists+0xc4>)
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3304      	adds	r3, #4
 80091ee:	4619      	mov	r1, r3
 80091f0:	4610      	mov	r0, r2
 80091f2:	f7fd fb20 	bl	8006836 <vListInsert>
 80091f6:	e017      	b.n	8009228 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091f8:	2300      	movs	r3, #0
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	2300      	movs	r3, #0
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	2100      	movs	r1, #0
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff fd58 	bl	8008cb8 <xTimerGenericCommand>
 8009208:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10b      	bne.n	8009228 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	603b      	str	r3, [r7, #0]
}
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	e7fd      	b.n	8009224 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009228:	4b09      	ldr	r3, [pc, #36]	@ (8009250 <prvSwitchTimerLists+0xc4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1b0      	bne.n	8009194 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009232:	4b07      	ldr	r3, [pc, #28]	@ (8009250 <prvSwitchTimerLists+0xc4>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009238:	4b06      	ldr	r3, [pc, #24]	@ (8009254 <prvSwitchTimerLists+0xc8>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a04      	ldr	r2, [pc, #16]	@ (8009250 <prvSwitchTimerLists+0xc4>)
 800923e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009240:	4a04      	ldr	r2, [pc, #16]	@ (8009254 <prvSwitchTimerLists+0xc8>)
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	6013      	str	r3, [r2, #0]
}
 8009246:	bf00      	nop
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	200011b4 	.word	0x200011b4
 8009254:	200011b8 	.word	0x200011b8

08009258 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800925e:	f000 f96b 	bl	8009538 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009262:	4b15      	ldr	r3, [pc, #84]	@ (80092b8 <prvCheckForValidListAndQueue+0x60>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d120      	bne.n	80092ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800926a:	4814      	ldr	r0, [pc, #80]	@ (80092bc <prvCheckForValidListAndQueue+0x64>)
 800926c:	f7fd fa92 	bl	8006794 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009270:	4813      	ldr	r0, [pc, #76]	@ (80092c0 <prvCheckForValidListAndQueue+0x68>)
 8009272:	f7fd fa8f 	bl	8006794 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009276:	4b13      	ldr	r3, [pc, #76]	@ (80092c4 <prvCheckForValidListAndQueue+0x6c>)
 8009278:	4a10      	ldr	r2, [pc, #64]	@ (80092bc <prvCheckForValidListAndQueue+0x64>)
 800927a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800927c:	4b12      	ldr	r3, [pc, #72]	@ (80092c8 <prvCheckForValidListAndQueue+0x70>)
 800927e:	4a10      	ldr	r2, [pc, #64]	@ (80092c0 <prvCheckForValidListAndQueue+0x68>)
 8009280:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009282:	2300      	movs	r3, #0
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	4b11      	ldr	r3, [pc, #68]	@ (80092cc <prvCheckForValidListAndQueue+0x74>)
 8009288:	4a11      	ldr	r2, [pc, #68]	@ (80092d0 <prvCheckForValidListAndQueue+0x78>)
 800928a:	2110      	movs	r1, #16
 800928c:	200a      	movs	r0, #10
 800928e:	f7fd fb9f 	bl	80069d0 <xQueueGenericCreateStatic>
 8009292:	4603      	mov	r3, r0
 8009294:	4a08      	ldr	r2, [pc, #32]	@ (80092b8 <prvCheckForValidListAndQueue+0x60>)
 8009296:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009298:	4b07      	ldr	r3, [pc, #28]	@ (80092b8 <prvCheckForValidListAndQueue+0x60>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d005      	beq.n	80092ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80092a0:	4b05      	ldr	r3, [pc, #20]	@ (80092b8 <prvCheckForValidListAndQueue+0x60>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	490b      	ldr	r1, [pc, #44]	@ (80092d4 <prvCheckForValidListAndQueue+0x7c>)
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe facc 	bl	8007844 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092ac:	f000 f976 	bl	800959c <vPortExitCritical>
}
 80092b0:	bf00      	nop
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	200011bc 	.word	0x200011bc
 80092bc:	2000118c 	.word	0x2000118c
 80092c0:	200011a0 	.word	0x200011a0
 80092c4:	200011b4 	.word	0x200011b4
 80092c8:	200011b8 	.word	0x200011b8
 80092cc:	20001268 	.word	0x20001268
 80092d0:	200011c8 	.word	0x200011c8
 80092d4:	08010ca0 	.word	0x08010ca0

080092d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3b04      	subs	r3, #4
 80092e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80092f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3b04      	subs	r3, #4
 80092f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f023 0201 	bic.w	r2, r3, #1
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3b04      	subs	r3, #4
 8009306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009308:	4a0c      	ldr	r2, [pc, #48]	@ (800933c <pxPortInitialiseStack+0x64>)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3b14      	subs	r3, #20
 8009312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3b04      	subs	r3, #4
 800931e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f06f 0202 	mvn.w	r2, #2
 8009326:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3b20      	subs	r3, #32
 800932c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800932e:	68fb      	ldr	r3, [r7, #12]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	08009341 	.word	0x08009341

08009340 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800934a:	4b13      	ldr	r3, [pc, #76]	@ (8009398 <prvTaskExitError+0x58>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009352:	d00b      	beq.n	800936c <prvTaskExitError+0x2c>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	60fb      	str	r3, [r7, #12]
}
 8009366:	bf00      	nop
 8009368:	bf00      	nop
 800936a:	e7fd      	b.n	8009368 <prvTaskExitError+0x28>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	60bb      	str	r3, [r7, #8]
}
 800937e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009380:	bf00      	nop
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d0fc      	beq.n	8009382 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009388:	bf00      	nop
 800938a:	bf00      	nop
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	2000000c 	.word	0x2000000c
 800939c:	00000000 	.word	0x00000000

080093a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093a0:	4b07      	ldr	r3, [pc, #28]	@ (80093c0 <pxCurrentTCBConst2>)
 80093a2:	6819      	ldr	r1, [r3, #0]
 80093a4:	6808      	ldr	r0, [r1, #0]
 80093a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093aa:	f380 8809 	msr	PSP, r0
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f04f 0000 	mov.w	r0, #0
 80093b6:	f380 8811 	msr	BASEPRI, r0
 80093ba:	4770      	bx	lr
 80093bc:	f3af 8000 	nop.w

080093c0 <pxCurrentTCBConst2>:
 80093c0:	20000c8c 	.word	0x20000c8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop

080093c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093c8:	4808      	ldr	r0, [pc, #32]	@ (80093ec <prvPortStartFirstTask+0x24>)
 80093ca:	6800      	ldr	r0, [r0, #0]
 80093cc:	6800      	ldr	r0, [r0, #0]
 80093ce:	f380 8808 	msr	MSP, r0
 80093d2:	f04f 0000 	mov.w	r0, #0
 80093d6:	f380 8814 	msr	CONTROL, r0
 80093da:	b662      	cpsie	i
 80093dc:	b661      	cpsie	f
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	df00      	svc	0
 80093e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093ea:	bf00      	nop
 80093ec:	e000ed08 	.word	0xe000ed08

080093f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093f6:	4b47      	ldr	r3, [pc, #284]	@ (8009514 <xPortStartScheduler+0x124>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a47      	ldr	r2, [pc, #284]	@ (8009518 <xPortStartScheduler+0x128>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d10b      	bne.n	8009418 <xPortStartScheduler+0x28>
	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	613b      	str	r3, [r7, #16]
}
 8009412:	bf00      	nop
 8009414:	bf00      	nop
 8009416:	e7fd      	b.n	8009414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009418:	4b3e      	ldr	r3, [pc, #248]	@ (8009514 <xPortStartScheduler+0x124>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a3f      	ldr	r2, [pc, #252]	@ (800951c <xPortStartScheduler+0x12c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d10b      	bne.n	800943a <xPortStartScheduler+0x4a>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	60fb      	str	r3, [r7, #12]
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	e7fd      	b.n	8009436 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800943a:	4b39      	ldr	r3, [pc, #228]	@ (8009520 <xPortStartScheduler+0x130>)
 800943c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	22ff      	movs	r2, #255	@ 0xff
 800944a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	b2db      	uxtb	r3, r3
 8009452:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800945c:	b2da      	uxtb	r2, r3
 800945e:	4b31      	ldr	r3, [pc, #196]	@ (8009524 <xPortStartScheduler+0x134>)
 8009460:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009462:	4b31      	ldr	r3, [pc, #196]	@ (8009528 <xPortStartScheduler+0x138>)
 8009464:	2207      	movs	r2, #7
 8009466:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009468:	e009      	b.n	800947e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800946a:	4b2f      	ldr	r3, [pc, #188]	@ (8009528 <xPortStartScheduler+0x138>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3b01      	subs	r3, #1
 8009470:	4a2d      	ldr	r2, [pc, #180]	@ (8009528 <xPortStartScheduler+0x138>)
 8009472:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	b2db      	uxtb	r3, r3
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	b2db      	uxtb	r3, r3
 800947c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	b2db      	uxtb	r3, r3
 8009482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009486:	2b80      	cmp	r3, #128	@ 0x80
 8009488:	d0ef      	beq.n	800946a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800948a:	4b27      	ldr	r3, [pc, #156]	@ (8009528 <xPortStartScheduler+0x138>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f1c3 0307 	rsb	r3, r3, #7
 8009492:	2b04      	cmp	r3, #4
 8009494:	d00b      	beq.n	80094ae <xPortStartScheduler+0xbe>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	60bb      	str	r3, [r7, #8]
}
 80094a8:	bf00      	nop
 80094aa:	bf00      	nop
 80094ac:	e7fd      	b.n	80094aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009528 <xPortStartScheduler+0x138>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	021b      	lsls	r3, r3, #8
 80094b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009528 <xPortStartScheduler+0x138>)
 80094b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009528 <xPortStartScheduler+0x138>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80094c0:	4a19      	ldr	r2, [pc, #100]	@ (8009528 <xPortStartScheduler+0x138>)
 80094c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094cc:	4b17      	ldr	r3, [pc, #92]	@ (800952c <xPortStartScheduler+0x13c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a16      	ldr	r2, [pc, #88]	@ (800952c <xPortStartScheduler+0x13c>)
 80094d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80094d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094d8:	4b14      	ldr	r3, [pc, #80]	@ (800952c <xPortStartScheduler+0x13c>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a13      	ldr	r2, [pc, #76]	@ (800952c <xPortStartScheduler+0x13c>)
 80094de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80094e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094e4:	f000 f8da 	bl	800969c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094e8:	4b11      	ldr	r3, [pc, #68]	@ (8009530 <xPortStartScheduler+0x140>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80094ee:	f000 f8f9 	bl	80096e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094f2:	4b10      	ldr	r3, [pc, #64]	@ (8009534 <xPortStartScheduler+0x144>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a0f      	ldr	r2, [pc, #60]	@ (8009534 <xPortStartScheduler+0x144>)
 80094f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80094fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094fe:	f7ff ff63 	bl	80093c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009502:	f7fe ff3d 	bl	8008380 <vTaskSwitchContext>
	prvTaskExitError();
 8009506:	f7ff ff1b 	bl	8009340 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3718      	adds	r7, #24
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	e000ed00 	.word	0xe000ed00
 8009518:	410fc271 	.word	0x410fc271
 800951c:	410fc270 	.word	0x410fc270
 8009520:	e000e400 	.word	0xe000e400
 8009524:	200012b8 	.word	0x200012b8
 8009528:	200012bc 	.word	0x200012bc
 800952c:	e000ed20 	.word	0xe000ed20
 8009530:	2000000c 	.word	0x2000000c
 8009534:	e000ef34 	.word	0xe000ef34

08009538 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	607b      	str	r3, [r7, #4]
}
 8009550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009552:	4b10      	ldr	r3, [pc, #64]	@ (8009594 <vPortEnterCritical+0x5c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3301      	adds	r3, #1
 8009558:	4a0e      	ldr	r2, [pc, #56]	@ (8009594 <vPortEnterCritical+0x5c>)
 800955a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800955c:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <vPortEnterCritical+0x5c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d110      	bne.n	8009586 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009564:	4b0c      	ldr	r3, [pc, #48]	@ (8009598 <vPortEnterCritical+0x60>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00b      	beq.n	8009586 <vPortEnterCritical+0x4e>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	603b      	str	r3, [r7, #0]
}
 8009580:	bf00      	nop
 8009582:	bf00      	nop
 8009584:	e7fd      	b.n	8009582 <vPortEnterCritical+0x4a>
	}
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	2000000c 	.word	0x2000000c
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095a2:	4b12      	ldr	r3, [pc, #72]	@ (80095ec <vPortExitCritical+0x50>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10b      	bne.n	80095c2 <vPortExitCritical+0x26>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	607b      	str	r3, [r7, #4]
}
 80095bc:	bf00      	nop
 80095be:	bf00      	nop
 80095c0:	e7fd      	b.n	80095be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095c2:	4b0a      	ldr	r3, [pc, #40]	@ (80095ec <vPortExitCritical+0x50>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	4a08      	ldr	r2, [pc, #32]	@ (80095ec <vPortExitCritical+0x50>)
 80095ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095cc:	4b07      	ldr	r3, [pc, #28]	@ (80095ec <vPortExitCritical+0x50>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d105      	bne.n	80095e0 <vPortExitCritical+0x44>
 80095d4:	2300      	movs	r3, #0
 80095d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f383 8811 	msr	BASEPRI, r3
}
 80095de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	2000000c 	.word	0x2000000c

080095f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095f0:	f3ef 8009 	mrs	r0, PSP
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	4b15      	ldr	r3, [pc, #84]	@ (8009650 <pxCurrentTCBConst>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	f01e 0f10 	tst.w	lr, #16
 8009600:	bf08      	it	eq
 8009602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960a:	6010      	str	r0, [r2, #0]
 800960c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009610:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009614:	f380 8811 	msr	BASEPRI, r0
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f7fe feae 	bl	8008380 <vTaskSwitchContext>
 8009624:	f04f 0000 	mov.w	r0, #0
 8009628:	f380 8811 	msr	BASEPRI, r0
 800962c:	bc09      	pop	{r0, r3}
 800962e:	6819      	ldr	r1, [r3, #0]
 8009630:	6808      	ldr	r0, [r1, #0]
 8009632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009636:	f01e 0f10 	tst.w	lr, #16
 800963a:	bf08      	it	eq
 800963c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009640:	f380 8809 	msr	PSP, r0
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	f3af 8000 	nop.w

08009650 <pxCurrentTCBConst>:
 8009650:	20000c8c 	.word	0x20000c8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop

08009658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	607b      	str	r3, [r7, #4]
}
 8009670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009672:	f7fe fdcb 	bl	800820c <xTaskIncrementTick>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800967c:	4b06      	ldr	r3, [pc, #24]	@ (8009698 <xPortSysTickHandler+0x40>)
 800967e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	2300      	movs	r3, #0
 8009686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	f383 8811 	msr	BASEPRI, r3
}
 800968e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009690:	bf00      	nop
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096a0:	4b0b      	ldr	r3, [pc, #44]	@ (80096d0 <vPortSetupTimerInterrupt+0x34>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096a6:	4b0b      	ldr	r3, [pc, #44]	@ (80096d4 <vPortSetupTimerInterrupt+0x38>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096ac:	4b0a      	ldr	r3, [pc, #40]	@ (80096d8 <vPortSetupTimerInterrupt+0x3c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a0a      	ldr	r2, [pc, #40]	@ (80096dc <vPortSetupTimerInterrupt+0x40>)
 80096b2:	fba2 2303 	umull	r2, r3, r2, r3
 80096b6:	099b      	lsrs	r3, r3, #6
 80096b8:	4a09      	ldr	r2, [pc, #36]	@ (80096e0 <vPortSetupTimerInterrupt+0x44>)
 80096ba:	3b01      	subs	r3, #1
 80096bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096be:	4b04      	ldr	r3, [pc, #16]	@ (80096d0 <vPortSetupTimerInterrupt+0x34>)
 80096c0:	2207      	movs	r2, #7
 80096c2:	601a      	str	r2, [r3, #0]
}
 80096c4:	bf00      	nop
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	e000e010 	.word	0xe000e010
 80096d4:	e000e018 	.word	0xe000e018
 80096d8:	20000000 	.word	0x20000000
 80096dc:	10624dd3 	.word	0x10624dd3
 80096e0:	e000e014 	.word	0xe000e014

080096e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80096f4 <vPortEnableVFP+0x10>
 80096e8:	6801      	ldr	r1, [r0, #0]
 80096ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80096ee:	6001      	str	r1, [r0, #0]
 80096f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096f2:	bf00      	nop
 80096f4:	e000ed88 	.word	0xe000ed88

080096f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096fe:	f3ef 8305 	mrs	r3, IPSR
 8009702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b0f      	cmp	r3, #15
 8009708:	d915      	bls.n	8009736 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800970a:	4a18      	ldr	r2, [pc, #96]	@ (800976c <vPortValidateInterruptPriority+0x74>)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4413      	add	r3, r2
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009714:	4b16      	ldr	r3, [pc, #88]	@ (8009770 <vPortValidateInterruptPriority+0x78>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	7afa      	ldrb	r2, [r7, #11]
 800971a:	429a      	cmp	r2, r3
 800971c:	d20b      	bcs.n	8009736 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	607b      	str	r3, [r7, #4]
}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	e7fd      	b.n	8009732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009736:	4b0f      	ldr	r3, [pc, #60]	@ (8009774 <vPortValidateInterruptPriority+0x7c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800973e:	4b0e      	ldr	r3, [pc, #56]	@ (8009778 <vPortValidateInterruptPriority+0x80>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d90b      	bls.n	800975e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	603b      	str	r3, [r7, #0]
}
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	e7fd      	b.n	800975a <vPortValidateInterruptPriority+0x62>
	}
 800975e:	bf00      	nop
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	e000e3f0 	.word	0xe000e3f0
 8009770:	200012b8 	.word	0x200012b8
 8009774:	e000ed0c 	.word	0xe000ed0c
 8009778:	200012bc 	.word	0x200012bc

0800977c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08a      	sub	sp, #40	@ 0x28
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009784:	2300      	movs	r3, #0
 8009786:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009788:	f7fe fc84 	bl	8008094 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800978c:	4b5c      	ldr	r3, [pc, #368]	@ (8009900 <pvPortMalloc+0x184>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009794:	f000 f924 	bl	80099e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009798:	4b5a      	ldr	r3, [pc, #360]	@ (8009904 <pvPortMalloc+0x188>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4013      	ands	r3, r2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f040 8095 	bne.w	80098d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d01e      	beq.n	80097ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80097ac:	2208      	movs	r2, #8
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4413      	add	r3, r2
 80097b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d015      	beq.n	80097ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f023 0307 	bic.w	r3, r3, #7
 80097c4:	3308      	adds	r3, #8
 80097c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f003 0307 	and.w	r3, r3, #7
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00b      	beq.n	80097ea <pvPortMalloc+0x6e>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	617b      	str	r3, [r7, #20]
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop
 80097e8:	e7fd      	b.n	80097e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d06f      	beq.n	80098d0 <pvPortMalloc+0x154>
 80097f0:	4b45      	ldr	r3, [pc, #276]	@ (8009908 <pvPortMalloc+0x18c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d86a      	bhi.n	80098d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097fa:	4b44      	ldr	r3, [pc, #272]	@ (800990c <pvPortMalloc+0x190>)
 80097fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097fe:	4b43      	ldr	r3, [pc, #268]	@ (800990c <pvPortMalloc+0x190>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009804:	e004      	b.n	8009810 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009808:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800980a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	429a      	cmp	r2, r3
 8009818:	d903      	bls.n	8009822 <pvPortMalloc+0xa6>
 800981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1f1      	bne.n	8009806 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009822:	4b37      	ldr	r3, [pc, #220]	@ (8009900 <pvPortMalloc+0x184>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009828:	429a      	cmp	r2, r3
 800982a:	d051      	beq.n	80098d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2208      	movs	r2, #8
 8009832:	4413      	add	r3, r2
 8009834:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800983e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	1ad2      	subs	r2, r2, r3
 8009846:	2308      	movs	r3, #8
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	429a      	cmp	r2, r3
 800984c:	d920      	bls.n	8009890 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800984e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4413      	add	r3, r2
 8009854:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <pvPortMalloc+0xfc>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	613b      	str	r3, [r7, #16]
}
 8009872:	bf00      	nop
 8009874:	bf00      	nop
 8009876:	e7fd      	b.n	8009874 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	1ad2      	subs	r2, r2, r3
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800988a:	69b8      	ldr	r0, [r7, #24]
 800988c:	f000 f90a 	bl	8009aa4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009890:	4b1d      	ldr	r3, [pc, #116]	@ (8009908 <pvPortMalloc+0x18c>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	4a1b      	ldr	r2, [pc, #108]	@ (8009908 <pvPortMalloc+0x18c>)
 800989c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800989e:	4b1a      	ldr	r3, [pc, #104]	@ (8009908 <pvPortMalloc+0x18c>)
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009910 <pvPortMalloc+0x194>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d203      	bcs.n	80098b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098aa:	4b17      	ldr	r3, [pc, #92]	@ (8009908 <pvPortMalloc+0x18c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a18      	ldr	r2, [pc, #96]	@ (8009910 <pvPortMalloc+0x194>)
 80098b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	4b13      	ldr	r3, [pc, #76]	@ (8009904 <pvPortMalloc+0x188>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	431a      	orrs	r2, r3
 80098bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098c6:	4b13      	ldr	r3, [pc, #76]	@ (8009914 <pvPortMalloc+0x198>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3301      	adds	r3, #1
 80098cc:	4a11      	ldr	r2, [pc, #68]	@ (8009914 <pvPortMalloc+0x198>)
 80098ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098d0:	f7fe fbee 	bl	80080b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00b      	beq.n	80098f6 <pvPortMalloc+0x17a>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	60fb      	str	r3, [r7, #12]
}
 80098f0:	bf00      	nop
 80098f2:	bf00      	nop
 80098f4:	e7fd      	b.n	80098f2 <pvPortMalloc+0x176>
	return pvReturn;
 80098f6:	69fb      	ldr	r3, [r7, #28]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3728      	adds	r7, #40	@ 0x28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20004ec8 	.word	0x20004ec8
 8009904:	20004edc 	.word	0x20004edc
 8009908:	20004ecc 	.word	0x20004ecc
 800990c:	20004ec0 	.word	0x20004ec0
 8009910:	20004ed0 	.word	0x20004ed0
 8009914:	20004ed4 	.word	0x20004ed4

08009918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d04f      	beq.n	80099ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800992a:	2308      	movs	r3, #8
 800992c:	425b      	negs	r3, r3
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	4413      	add	r3, r2
 8009932:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	4b25      	ldr	r3, [pc, #148]	@ (80099d4 <vPortFree+0xbc>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4013      	ands	r3, r2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10b      	bne.n	800995e <vPortFree+0x46>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	60fb      	str	r3, [r7, #12]
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	e7fd      	b.n	800995a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00b      	beq.n	800997e <vPortFree+0x66>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	60bb      	str	r3, [r7, #8]
}
 8009978:	bf00      	nop
 800997a:	bf00      	nop
 800997c:	e7fd      	b.n	800997a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	4b14      	ldr	r3, [pc, #80]	@ (80099d4 <vPortFree+0xbc>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4013      	ands	r3, r2
 8009988:	2b00      	cmp	r3, #0
 800998a:	d01e      	beq.n	80099ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d11a      	bne.n	80099ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	4b0e      	ldr	r3, [pc, #56]	@ (80099d4 <vPortFree+0xbc>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	43db      	mvns	r3, r3
 800999e:	401a      	ands	r2, r3
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099a4:	f7fe fb76 	bl	8008094 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	4b0a      	ldr	r3, [pc, #40]	@ (80099d8 <vPortFree+0xc0>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4413      	add	r3, r2
 80099b2:	4a09      	ldr	r2, [pc, #36]	@ (80099d8 <vPortFree+0xc0>)
 80099b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099b6:	6938      	ldr	r0, [r7, #16]
 80099b8:	f000 f874 	bl	8009aa4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099bc:	4b07      	ldr	r3, [pc, #28]	@ (80099dc <vPortFree+0xc4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3301      	adds	r3, #1
 80099c2:	4a06      	ldr	r2, [pc, #24]	@ (80099dc <vPortFree+0xc4>)
 80099c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099c6:	f7fe fb73 	bl	80080b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099ca:	bf00      	nop
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20004edc 	.word	0x20004edc
 80099d8:	20004ecc 	.word	0x20004ecc
 80099dc:	20004ed8 	.word	0x20004ed8

080099e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80099ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099ec:	4b27      	ldr	r3, [pc, #156]	@ (8009a8c <prvHeapInit+0xac>)
 80099ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00c      	beq.n	8009a14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3307      	adds	r3, #7
 80099fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f023 0307 	bic.w	r3, r3, #7
 8009a06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8009a8c <prvHeapInit+0xac>)
 8009a10:	4413      	add	r3, r2
 8009a12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a18:	4a1d      	ldr	r2, [pc, #116]	@ (8009a90 <prvHeapInit+0xb0>)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8009a90 <prvHeapInit+0xb0>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	4413      	add	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a2c:	2208      	movs	r2, #8
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	1a9b      	subs	r3, r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0307 	bic.w	r3, r3, #7
 8009a3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4a15      	ldr	r2, [pc, #84]	@ (8009a94 <prvHeapInit+0xb4>)
 8009a40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a42:	4b14      	ldr	r3, [pc, #80]	@ (8009a94 <prvHeapInit+0xb4>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2200      	movs	r2, #0
 8009a48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a4a:	4b12      	ldr	r3, [pc, #72]	@ (8009a94 <prvHeapInit+0xb4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	1ad2      	subs	r2, r2, r3
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a60:	4b0c      	ldr	r3, [pc, #48]	@ (8009a94 <prvHeapInit+0xb4>)
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8009a98 <prvHeapInit+0xb8>)
 8009a6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	4a09      	ldr	r2, [pc, #36]	@ (8009a9c <prvHeapInit+0xbc>)
 8009a76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a78:	4b09      	ldr	r3, [pc, #36]	@ (8009aa0 <prvHeapInit+0xc0>)
 8009a7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009a7e:	601a      	str	r2, [r3, #0]
}
 8009a80:	bf00      	nop
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	200012c0 	.word	0x200012c0
 8009a90:	20004ec0 	.word	0x20004ec0
 8009a94:	20004ec8 	.word	0x20004ec8
 8009a98:	20004ed0 	.word	0x20004ed0
 8009a9c:	20004ecc 	.word	0x20004ecc
 8009aa0:	20004edc 	.word	0x20004edc

08009aa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009aac:	4b28      	ldr	r3, [pc, #160]	@ (8009b50 <prvInsertBlockIntoFreeList+0xac>)
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e002      	b.n	8009ab8 <prvInsertBlockIntoFreeList+0x14>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d8f7      	bhi.n	8009ab2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	4413      	add	r3, r2
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d108      	bne.n	8009ae6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	441a      	add	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	441a      	add	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d118      	bne.n	8009b2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	4b15      	ldr	r3, [pc, #84]	@ (8009b54 <prvInsertBlockIntoFreeList+0xb0>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d00d      	beq.n	8009b22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	441a      	add	r2, r3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	e008      	b.n	8009b34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b22:	4b0c      	ldr	r3, [pc, #48]	@ (8009b54 <prvInsertBlockIntoFreeList+0xb0>)
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	e003      	b.n	8009b34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d002      	beq.n	8009b42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b42:	bf00      	nop
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	20004ec0 	.word	0x20004ec0
 8009b54:	20004ec8 	.word	0x20004ec8

08009b58 <_ZN13CommunicationC1Ev>:
 *      Author: OrioN
 */

#include "../Inc/GeneralHeaders.h"

Communication::Communication() {
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	4a08      	ldr	r2, [pc, #32]	@ (8009b84 <_ZN13CommunicationC1Ev+0x2c>)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3304      	adds	r3, #4
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f001 fd0e 	bl	800b58c <_ZN12FlashManagerC1Ev>
	// TODO Auto-generated constructor stub
	FMI.BackupData();
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3304      	adds	r3, #4
 8009b74:	4618      	mov	r0, r3
 8009b76:	f001 fd79 	bl	800b66c <_ZN12FlashManager10BackupDataEv>

}
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	08010d70 	.word	0x08010d70

08009b88 <_ZN13CommunicationD1Ev>:

Communication::~Communication() {
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	4a06      	ldr	r2, [pc, #24]	@ (8009bac <_ZN13CommunicationD1Ev+0x24>)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f001 fd46 	bl	800b62c <_ZN12FlashManagerD1Ev>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	08010d70 	.word	0x08010d70

08009bb0 <_ZN13CommunicationD0Ev>:
Communication::~Communication() {
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
}
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff ffe5 	bl	8009b88 <_ZN13CommunicationD1Ev>
 8009bbe:	2120      	movs	r1, #32
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f005 ffdb 	bl	800fb7c <_ZdlPvj>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <_ZN13Communication14ProcessCommandEPh>:

void Communication::ProcessCommand(uint8_t *command){
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]

	switch(command[0]){
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d010      	beq.n	8009c04 <_ZN13Communication14ProcessCommandEPh+0x34>
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	dc13      	bgt.n	8009c0e <_ZN13Communication14ProcessCommandEPh+0x3e>
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d002      	beq.n	8009bf0 <_ZN13Communication14ProcessCommandEPh+0x20>
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d005      	beq.n	8009bfa <_ZN13Communication14ProcessCommandEPh+0x2a>
 8009bee:	e00e      	b.n	8009c0e <_ZN13Communication14ProcessCommandEPh+0x3e>
	case RequestType::R_System:
		System(command);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f814 	bl	8009c20 <_ZN13Communication6SystemEPh>
		break;
 8009bf8:	e00e      	b.n	8009c18 <_ZN13Communication14ProcessCommandEPh+0x48>
	case RequestType::R_Command:
		Command(command);
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f8c5 	bl	8009d8c <_ZN13Communication7CommandEPh>
		break;
 8009c02:	e009      	b.n	8009c18 <_ZN13Communication14ProcessCommandEPh+0x48>
	case RequestType::R_Configuration:
		Configuration(command);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fb4e 	bl	800a2a8 <_ZN13Communication13ConfigurationEPh>
		break;
 8009c0c:	e004      	b.n	8009c18 <_ZN13Communication14ProcessCommandEPh+0x48>
	default:
		ErrorResult(OperationCodes::ReadData, Errors::UndefinedProcessType);
 8009c0e:	2108      	movs	r1, #8
 8009c10:	2000      	movs	r0, #0
 8009c12:	f004 fabe 	bl	800e192 <ErrorResult>
		break;
 8009c16:	bf00      	nop

	}
}
 8009c18:	bf00      	nop
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <_ZN13Communication6SystemEPh>:
void Communication::System(uint8_t *command){
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]

	if(command[0]!=RequestType::R_System) return;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	f040 80a4 	bne.w	8009d7c <_ZN13Communication6SystemEPh+0x15c>
	uint16_t calibrationWeight = 500;
 8009c34:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8009c38:	82fb      	strh	r3, [r7, #22]
	uint16_t calibrationFlow = 12;
 8009c3a:	230c      	movs	r3, #12
 8009c3c:	82bb      	strh	r3, [r7, #20]
   	uint8_t data[11];
	switch (command[1])   										      //Check Function
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	3301      	adds	r3, #1
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	2b05      	cmp	r3, #5
 8009c48:	f200 8093 	bhi.w	8009d72 <_ZN13Communication6SystemEPh+0x152>
 8009c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c54 <_ZN13Communication6SystemEPh+0x34>)
 8009c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c52:	bf00      	nop
 8009c54:	08009c6d 	.word	0x08009c6d
 8009c58:	08009d0b 	.word	0x08009d0b
 8009c5c:	08009d15 	.word	0x08009d15
 8009c60:	08009d1f 	.word	0x08009d1f
 8009c64:	08009d2b 	.word	0x08009d2b
 8009c68:	08009d4f 	.word	0x08009d4f
	{
	   case SystemRequestType::SYSR_Status:
		   	data[0]=Statuses.FirstEmg;
 8009c6c:	4b45      	ldr	r3, [pc, #276]	@ (8009d84 <_ZN13Communication6SystemEPh+0x164>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	723b      	strb	r3, [r7, #8]
		   	data[1]=Statuses.SecondEmg;
 8009c72:	4b44      	ldr	r3, [pc, #272]	@ (8009d84 <_ZN13Communication6SystemEPh+0x164>)
 8009c74:	785b      	ldrb	r3, [r3, #1]
 8009c76:	727b      	strb	r3, [r7, #9]
		   	data[2]=Statuses.Volume;
 8009c78:	4b42      	ldr	r3, [pc, #264]	@ (8009d84 <_ZN13Communication6SystemEPh+0x164>)
 8009c7a:	789b      	ldrb	r3, [r3, #2]
 8009c7c:	72bb      	strb	r3, [r7, #10]
		   	data[3]=Statuses.Flow;
 8009c7e:	4b41      	ldr	r3, [pc, #260]	@ (8009d84 <_ZN13Communication6SystemEPh+0x164>)
 8009c80:	78db      	ldrb	r3, [r3, #3]
 8009c82:	72fb      	strb	r3, [r7, #11]
		   	data[4]=Statuses.Pump;
 8009c84:	4b3f      	ldr	r3, [pc, #252]	@ (8009d84 <_ZN13Communication6SystemEPh+0x164>)
 8009c86:	791b      	ldrb	r3, [r3, #4]
 8009c88:	733b      	strb	r3, [r7, #12]
		   	data[5]=Statuses.Valve;
 8009c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8009d84 <_ZN13Communication6SystemEPh+0x164>)
 8009c8c:	795b      	ldrb	r3, [r3, #5]
 8009c8e:	737b      	strb	r3, [r7, #13]
		   	data[6]=ThreadStorage.LoadcellAverageThreadId!=NULL&&ThreadStorage.FirstEmgThreadId!=0x00;
 8009c90:	4b3d      	ldr	r3, [pc, #244]	@ (8009d88 <_ZN13Communication6SystemEPh+0x168>)
 8009c92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d005      	beq.n	8009ca4 <_ZN13Communication6SystemEPh+0x84>
 8009c98:	4b3b      	ldr	r3, [pc, #236]	@ (8009d88 <_ZN13Communication6SystemEPh+0x168>)
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <_ZN13Communication6SystemEPh+0x84>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e000      	b.n	8009ca6 <_ZN13Communication6SystemEPh+0x86>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73bb      	strb	r3, [r7, #14]
		   	data[7]=ThreadStorage.CalibrationVolumeThreadId!=NULL&&ThreadStorage.FirstEmgThreadId!=0x00;
 8009ca8:	4b37      	ldr	r3, [pc, #220]	@ (8009d88 <_ZN13Communication6SystemEPh+0x168>)
 8009caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d005      	beq.n	8009cbc <_ZN13Communication6SystemEPh+0x9c>
 8009cb0:	4b35      	ldr	r3, [pc, #212]	@ (8009d88 <_ZN13Communication6SystemEPh+0x168>)
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <_ZN13Communication6SystemEPh+0x9c>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e000      	b.n	8009cbe <_ZN13Communication6SystemEPh+0x9e>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73fb      	strb	r3, [r7, #15]
		   	data[8]=ThreadStorage.CalibrationFlowThreadId!=NULL&&ThreadStorage.FirstEmgThreadId!=0x00;
 8009cc0:	4b31      	ldr	r3, [pc, #196]	@ (8009d88 <_ZN13Communication6SystemEPh+0x168>)
 8009cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d005      	beq.n	8009cd6 <_ZN13Communication6SystemEPh+0xb6>
 8009cca:	4b2f      	ldr	r3, [pc, #188]	@ (8009d88 <_ZN13Communication6SystemEPh+0x168>)
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <_ZN13Communication6SystemEPh+0xb6>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e000      	b.n	8009cd8 <_ZN13Communication6SystemEPh+0xb8>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	743b      	strb	r3, [r7, #16]
		   	data[9]=ThreadStorage.CleanThreadId!=NULL&&ThreadStorage.FirstEmgThreadId!=0x00;
 8009cda:	4b2b      	ldr	r3, [pc, #172]	@ (8009d88 <_ZN13Communication6SystemEPh+0x168>)
 8009cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d005      	beq.n	8009cf0 <_ZN13Communication6SystemEPh+0xd0>
 8009ce4:	4b28      	ldr	r3, [pc, #160]	@ (8009d88 <_ZN13Communication6SystemEPh+0x168>)
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <_ZN13Communication6SystemEPh+0xd0>
 8009cec:	2301      	movs	r3, #1
 8009cee:	e000      	b.n	8009cf2 <_ZN13Communication6SystemEPh+0xd2>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	747b      	strb	r3, [r7, #17]
		   	data[10]=Statuses.SafeMode;
 8009cf4:	4b23      	ldr	r3, [pc, #140]	@ (8009d84 <_ZN13Communication6SystemEPh+0x164>)
 8009cf6:	799b      	ldrb	r3, [r3, #6]
 8009cf8:	74bb      	strb	r3, [r7, #18]
		   	SuccessDataResult(100,SuccessDataType::SD_Status,data,11);
 8009cfa:	f107 0208 	add.w	r2, r7, #8
 8009cfe:	230b      	movs	r3, #11
 8009d00:	2102      	movs	r1, #2
 8009d02:	2064      	movs	r0, #100	@ 0x64
 8009d04:	f004 f9ca 	bl	800e09c <SuccessDataResult>
			break;
 8009d08:	e039      	b.n	8009d7e <_ZN13Communication6SystemEPh+0x15e>
	   case SystemRequestType::SYSR_Restart:
		   	SuccessResult();
 8009d0a:	f004 f9b9 	bl	800e080 <SuccessResult>
		    HAL_NVIC_SystemReset();
 8009d0e:	f7f8 f91a 	bl	8001f46 <HAL_NVIC_SystemReset>
	        break;
 8009d12:	e034      	b.n	8009d7e <_ZN13Communication6SystemEPh+0x15e>
	   case SystemRequestType::SYSR_FactoryReset:
		   	SuccessResult();
 8009d14:	f004 f9b4 	bl	800e080 <SuccessResult>
		   HardReset();
 8009d18:	f004 f8b0 	bl	800de7c <HardReset>
		   break;
 8009d1c:	e02f      	b.n	8009d7e <_ZN13Communication6SystemEPh+0x15e>
	   case SystemRequestType::SYSR_MeasurementAverage:
		   	 ClearLoadcellParams();
 8009d1e:	f005 fe57 	bl	800f9d0 <ClearLoadcellParams>
		   	 LoadcellAverage();
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fef8 	bl	800ab18 <_ZN13Communication15LoadcellAverageEv>
		   	 break;
 8009d28:	e029      	b.n	8009d7e <_ZN13Communication6SystemEPh+0x15e>
	   case SystemRequestType::SYSR_CalibrationVolume:
		   	 ClearLoadcellParams();
 8009d2a:	f005 fe51 	bl	800f9d0 <ClearLoadcellParams>
			calibrationWeight=(command[2]<<8)+command[3];
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	3302      	adds	r3, #2
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	021b      	lsls	r3, r3, #8
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	3203      	adds	r2, #3
 8009d3c:	7812      	ldrb	r2, [r2, #0]
 8009d3e:	4413      	add	r3, r2
 8009d40:	82fb      	strh	r3, [r7, #22]
		   	 LoadcellVolumeCalibration(calibrationWeight);
 8009d42:	8afb      	ldrh	r3, [r7, #22]
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 ff0c 	bl	800ab64 <_ZN13Communication25LoadcellVolumeCalibrationEt>
		   	 break;
 8009d4c:	e017      	b.n	8009d7e <_ZN13Communication6SystemEPh+0x15e>
	   case SystemRequestType::SYSR_CalibrationFlow:
		   	 ClearLoadcellParams();
 8009d4e:	f005 fe3f 	bl	800f9d0 <ClearLoadcellParams>
			calibrationFlow=(command[2]<<8)+command[3];
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	3302      	adds	r3, #2
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	021b      	lsls	r3, r3, #8
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	3203      	adds	r2, #3
 8009d60:	7812      	ldrb	r2, [r2, #0]
 8009d62:	4413      	add	r3, r2
 8009d64:	82bb      	strh	r3, [r7, #20]
		   	 LoadcellFlowCalibration(calibrationFlow);
 8009d66:	8abb      	ldrh	r3, [r7, #20]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 ff2e 	bl	800abcc <_ZN13Communication23LoadcellFlowCalibrationEt>
		   	 break;
 8009d70:	e005      	b.n	8009d7e <_ZN13Communication6SystemEPh+0x15e>
		default:
			ErrorResult(OperationCodes::ReadData, Errors::UndefinedSystemType);
 8009d72:	2109      	movs	r1, #9
 8009d74:	2000      	movs	r0, #0
 8009d76:	f004 fa0c 	bl	800e192 <ErrorResult>
			break;
 8009d7a:	e000      	b.n	8009d7e <_ZN13Communication6SystemEPh+0x15e>
	if(command[0]!=RequestType::R_System) return;
 8009d7c:	bf00      	nop
	 }


}
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	200092a0 	.word	0x200092a0
 8009d88:	200090b8 	.word	0x200090b8

08009d8c <_ZN13Communication7CommandEPh>:

void Communication::Command(uint8_t *command){
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]

	uint16_t cleanTime=0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	81fb      	strh	r3, [r7, #14]
	if(command[0]!=RequestType::R_Command) return;
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	f040 827b 	bne.w	800a29a <_ZN13Communication7CommandEPh+0x50e>
	switch (command[1])   												//Check Function
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	3301      	adds	r3, #1
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2bff      	cmp	r3, #255	@ 0xff
 8009dac:	f000 8217 	beq.w	800a1de <_ZN13Communication7CommandEPh+0x452>
 8009db0:	2bff      	cmp	r3, #255	@ 0xff
 8009db2:	f300 826d 	bgt.w	800a290 <_ZN13Communication7CommandEPh+0x504>
 8009db6:	2b0c      	cmp	r3, #12
 8009db8:	dc22      	bgt.n	8009e00 <_ZN13Communication7CommandEPh+0x74>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f340 8268 	ble.w	800a290 <_ZN13Communication7CommandEPh+0x504>
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	2b0b      	cmp	r3, #11
 8009dc4:	f200 8264 	bhi.w	800a290 <_ZN13Communication7CommandEPh+0x504>
 8009dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd0 <_ZN13Communication7CommandEPh+0x44>)
 8009dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dce:	bf00      	nop
 8009dd0:	08009e09 	.word	0x08009e09
 8009dd4:	08009e4f 	.word	0x08009e4f
 8009dd8:	08009e95 	.word	0x08009e95
 8009ddc:	08009f27 	.word	0x08009f27
 8009de0:	08009f6d 	.word	0x08009f6d
 8009de4:	08009fb3 	.word	0x08009fb3
 8009de8:	0800a005 	.word	0x0800a005
 8009dec:	0800a037 	.word	0x0800a037
 8009df0:	0800a065 	.word	0x0800a065
 8009df4:	0800a0c7 	.word	0x0800a0c7
 8009df8:	0800a13b 	.word	0x0800a13b
 8009dfc:	0800a17d 	.word	0x0800a17d
 8009e00:	2bfd      	cmp	r3, #253	@ 0xfd
 8009e02:	f000 81dc 	beq.w	800a1be <_ZN13Communication7CommandEPh+0x432>
 8009e06:	e243      	b.n	800a290 <_ZN13Communication7CommandEPh+0x504>
	{
		case CommandRequestType::CMDR_FirstEmg:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 8009e08:	4ba7      	ldr	r3, [pc, #668]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009e0a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00e      	beq.n	8009e30 <_ZN13Communication7CommandEPh+0xa4>
 8009e12:	4ba5      	ldr	r3, [pc, #660]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009e14:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d009      	beq.n	8009e30 <_ZN13Communication7CommandEPh+0xa4>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 8009e1c:	4ba2      	ldr	r3, [pc, #648]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009e1e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e22:	2b05      	cmp	r3, #5
 8009e24:	d004      	beq.n	8009e30 <_ZN13Communication7CommandEPh+0xa4>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 8009e26:	2102      	movs	r1, #2
 8009e28:	2000      	movs	r0, #0
 8009e2a:	f004 f9b2 	bl	800e192 <ErrorResult>
				return;
 8009e2e:	e235      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			 ToggleFirstEmg(command[2]==1);  	     //Check SubFunction
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	3302      	adds	r3, #2
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	bf0c      	ite	eq
 8009e3a:	2301      	moveq	r3, #1
 8009e3c:	2300      	movne	r3, #0
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fb50 	bl	800a4e8 <_ZN13Communication14ToggleFirstEmgEb>
			 SuccessResult();
 8009e48:	f004 f91a 	bl	800e080 <SuccessResult>
			 break;
 8009e4c:	e226      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_SecondEmg:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 8009e4e:	4b96      	ldr	r3, [pc, #600]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009e50:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00e      	beq.n	8009e76 <_ZN13Communication7CommandEPh+0xea>
 8009e58:	4b93      	ldr	r3, [pc, #588]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009e5a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d009      	beq.n	8009e76 <_ZN13Communication7CommandEPh+0xea>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 8009e62:	4b91      	ldr	r3, [pc, #580]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009e64:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e68:	2b05      	cmp	r3, #5
 8009e6a:	d004      	beq.n	8009e76 <_ZN13Communication7CommandEPh+0xea>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 8009e6c:	2102      	movs	r1, #2
 8009e6e:	2000      	movs	r0, #0
 8009e70:	f004 f98f 	bl	800e192 <ErrorResult>
				return;
 8009e74:	e212      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			ToggleSecondEmg(command[2]==1);    	 //Check SubFunction
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	3302      	adds	r3, #2
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	bf0c      	ite	eq
 8009e80:	2301      	moveq	r3, #1
 8009e82:	2300      	movne	r3, #0
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fb5b 	bl	800a544 <_ZN13Communication15ToggleSecondEmgEb>
			 SuccessResult();
 8009e8e:	f004 f8f7 	bl	800e080 <SuccessResult>
			 break;
 8009e92:	e203      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_LoadcellMeasure:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 8009e94:	4b84      	ldr	r3, [pc, #528]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009e96:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00e      	beq.n	8009ebc <_ZN13Communication7CommandEPh+0x130>
 8009e9e:	4b82      	ldr	r3, [pc, #520]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009ea0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d009      	beq.n	8009ebc <_ZN13Communication7CommandEPh+0x130>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 8009ea8:	4b7f      	ldr	r3, [pc, #508]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009eaa:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009eae:	2b05      	cmp	r3, #5
 8009eb0:	d004      	beq.n	8009ebc <_ZN13Communication7CommandEPh+0x130>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 8009eb2:	2102      	movs	r1, #2
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	f004 f96c 	bl	800e192 <ErrorResult>
				return;
 8009eba:	e1ef      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			if(SystemConfig.VolumeAverage==0 || SystemConfig.FlowAverage==0){
 8009ebc:	4b7a      	ldr	r3, [pc, #488]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d003      	beq.n	8009ecc <_ZN13Communication7CommandEPh+0x140>
 8009ec4:	4b78      	ldr	r3, [pc, #480]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d104      	bne.n	8009ed6 <_ZN13Communication7CommandEPh+0x14a>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotAverage);
 8009ecc:	2105      	movs	r1, #5
 8009ece:	2000      	movs	r0, #0
 8009ed0:	f004 f95f 	bl	800e192 <ErrorResult>
				return;
 8009ed4:	e1e2      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			if(SystemConfig.FlowRate<2 || SystemConfig.VolumeRate<2){
 8009ed6:	4b74      	ldr	r3, [pc, #464]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009ed8:	edd3 7a08 	vldr	s15, [r3, #32]
 8009edc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8009ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee8:	d409      	bmi.n	8009efe <_ZN13Communication7CommandEPh+0x172>
 8009eea:	4b6f      	ldr	r3, [pc, #444]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009eec:	edd3 7a07 	vldr	s15, [r3, #28]
 8009ef0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8009ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009efc:	d504      	bpl.n	8009f08 <_ZN13Communication7CommandEPh+0x17c>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotCalibration);
 8009efe:	2104      	movs	r1, #4
 8009f00:	2000      	movs	r0, #0
 8009f02:	f004 f946 	bl	800e192 <ErrorResult>
				return;
 8009f06:	e1c9      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			 ToggleLoadCell(command[2]==1);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	3302      	adds	r3, #2
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	bf0c      	ite	eq
 8009f12:	2301      	moveq	r3, #1
 8009f14:	2300      	movne	r3, #0
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fb40 	bl	800a5a0 <_ZN13Communication14ToggleLoadCellEb>
			 SuccessResult();
 8009f20:	f004 f8ae 	bl	800e080 <SuccessResult>
			 break;
 8009f24:	e1ba      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_Pump:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 8009f26:	4b60      	ldr	r3, [pc, #384]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009f28:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00e      	beq.n	8009f4e <_ZN13Communication7CommandEPh+0x1c2>
 8009f30:	4b5d      	ldr	r3, [pc, #372]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009f32:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d009      	beq.n	8009f4e <_ZN13Communication7CommandEPh+0x1c2>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 8009f3a:	4b5b      	ldr	r3, [pc, #364]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009f3c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009f40:	2b05      	cmp	r3, #5
 8009f42:	d004      	beq.n	8009f4e <_ZN13Communication7CommandEPh+0x1c2>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 8009f44:	2102      	movs	r1, #2
 8009f46:	2000      	movs	r0, #0
 8009f48:	f004 f923 	bl	800e192 <ErrorResult>
				return;
 8009f4c:	e1a6      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			TogglePump(command[2]==1); 	 	 //Check SubFunction
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	3302      	adds	r3, #2
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	bf0c      	ite	eq
 8009f58:	2301      	moveq	r3, #1
 8009f5a:	2300      	movne	r3, #0
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fc57 	bl	800a814 <_ZN13Communication10TogglePumpEb>
			 SuccessResult();
 8009f66:	f004 f88b 	bl	800e080 <SuccessResult>
			 break;
 8009f6a:	e197      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_Valve:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 8009f6c:	4b4e      	ldr	r3, [pc, #312]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009f6e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00e      	beq.n	8009f94 <_ZN13Communication7CommandEPh+0x208>
 8009f76:	4b4c      	ldr	r3, [pc, #304]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009f78:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d009      	beq.n	8009f94 <_ZN13Communication7CommandEPh+0x208>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 8009f80:	4b49      	ldr	r3, [pc, #292]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009f82:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009f86:	2b05      	cmp	r3, #5
 8009f88:	d004      	beq.n	8009f94 <_ZN13Communication7CommandEPh+0x208>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 8009f8a:	2102      	movs	r1, #2
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	f004 f900 	bl	800e192 <ErrorResult>
				return;
 8009f92:	e183      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			ToggleValve(command[2]==1);   	 //Check SubFunction
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	3302      	adds	r3, #2
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	bf0c      	ite	eq
 8009f9e:	2301      	moveq	r3, #1
 8009fa0:	2300      	movne	r3, #0
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fc6e 	bl	800a888 <_ZN13Communication11ToggleValveEb>
			 SuccessResult();
 8009fac:	f004 f868 	bl	800e080 <SuccessResult>
			 break;
 8009fb0:	e174      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_Clean: //Check SubFunction
			if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 8009fb2:	4b3d      	ldr	r3, [pc, #244]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 8009fb4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d004      	beq.n	8009fc6 <_ZN13Communication7CommandEPh+0x23a>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 8009fbc:	2102      	movs	r1, #2
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	f004 f8e7 	bl	800e192 <ErrorResult>
				return;
 8009fc4:	e16a      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			 cleanTime=(command[2]<<8)+command[3];
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	3302      	adds	r3, #2
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	021b      	lsls	r3, r3, #8
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	3203      	adds	r2, #3
 8009fd4:	7812      	ldrb	r2, [r2, #0]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	81fb      	strh	r3, [r7, #14]
			if(cleanTime<1){
 8009fda:	89fb      	ldrh	r3, [r7, #14]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d104      	bne.n	8009fea <_ZN13Communication7CommandEPh+0x25e>
				ErrorResult(OperationCodes::ReadData, Errors::ValueShouldNotBeZero);
 8009fe0:	2106      	movs	r1, #6
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	f004 f8d5 	bl	800e192 <ErrorResult>
				return;
 8009fe8:	e158      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			 StartClean(cleanTime*1000);
 8009fea:	89fb      	ldrh	r3, [r7, #14]
 8009fec:	461a      	mov	r2, r3
 8009fee:	0152      	lsls	r2, r2, #5
 8009ff0:	1ad2      	subs	r2, r2, r3
 8009ff2:	0092      	lsls	r2, r2, #2
 8009ff4:	4413      	add	r3, r2
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fd0d 	bl	800aa1c <_ZN13Communication10StartCleanEt>
			 break;
 800a002:	e14b      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_Safe: //Check SubFunction
				if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800a004:	4b28      	ldr	r3, [pc, #160]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 800a006:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d004      	beq.n	800a018 <_ZN13Communication7CommandEPh+0x28c>
					ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a00e:	2102      	movs	r1, #2
 800a010:	2000      	movs	r0, #0
 800a012:	f004 f8be 	bl	800e192 <ErrorResult>
					return;
 800a016:	e141      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
				}
				ToggleSafeMode(command[2]==1);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	3302      	adds	r3, #2
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	bf0c      	ite	eq
 800a022:	2301      	moveq	r3, #1
 800a024:	2300      	movne	r3, #0
 800a026:	b2db      	uxtb	r3, r3
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fd28 	bl	800aa80 <_ZN13Communication14ToggleSafeModeEb>
				 SuccessResult();
 800a030:	f004 f826 	bl	800e080 <SuccessResult>
			 break;
 800a034:	e132      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_DataStream:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800a036:	4b1c      	ldr	r3, [pc, #112]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 800a038:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d004      	beq.n	800a04a <_ZN13Communication7CommandEPh+0x2be>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a040:	2102      	movs	r1, #2
 800a042:	2000      	movs	r0, #0
 800a044:	f004 f8a5 	bl	800e192 <ErrorResult>
				return;
 800a048:	e128      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			ToggleDataStream(command[2]==1);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	3302      	adds	r3, #2
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	2b01      	cmp	r3, #1
 800a052:	bf0c      	ite	eq
 800a054:	2301      	moveq	r3, #1
 800a056:	2300      	movne	r3, #0
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fc4d 	bl	800a8fc <_ZN13Communication16ToggleDataStreamEb>
			 break;
 800a062:	e11b      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_ReadVolume:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a064:	4b10      	ldr	r3, [pc, #64]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 800a066:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00e      	beq.n	800a08c <_ZN13Communication7CommandEPh+0x300>
 800a06e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 800a070:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a074:	2b01      	cmp	r3, #1
 800a076:	d009      	beq.n	800a08c <_ZN13Communication7CommandEPh+0x300>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a078:	4b0b      	ldr	r3, [pc, #44]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 800a07a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a07e:	2b05      	cmp	r3, #5
 800a080:	d004      	beq.n	800a08c <_ZN13Communication7CommandEPh+0x300>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a082:	2102      	movs	r1, #2
 800a084:	2000      	movs	r0, #0
 800a086:	f004 f884 	bl	800e192 <ErrorResult>
				return;
 800a08a:	e107      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			if(SystemConfig.VolumeAverage==0 || SystemConfig.FlowAverage==0){
 800a08c:	4b06      	ldr	r3, [pc, #24]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <_ZN13Communication7CommandEPh+0x310>
 800a094:	4b04      	ldr	r3, [pc, #16]	@ (800a0a8 <_ZN13Communication7CommandEPh+0x31c>)
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d107      	bne.n	800a0ac <_ZN13Communication7CommandEPh+0x320>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotAverage);
 800a09c:	2105      	movs	r1, #5
 800a09e:	2000      	movs	r0, #0
 800a0a0:	f004 f877 	bl	800e192 <ErrorResult>
				return;
 800a0a4:	e0fa      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
 800a0a6:	bf00      	nop
 800a0a8:	200092a8 	.word	0x200092a8
			}
			 ToggleReadVolume(command[2]==1);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	3302      	adds	r3, #2
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	bf0c      	ite	eq
 800a0b6:	2301      	moveq	r3, #1
 800a0b8:	2300      	movne	r3, #0
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fac8 	bl	800a654 <_ZN13Communication16ToggleReadVolumeEb>
			 break;
 800a0c4:	e0ea      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_ReadFlow:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a0c6:	4b77      	ldr	r3, [pc, #476]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a0c8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00e      	beq.n	800a0ee <_ZN13Communication7CommandEPh+0x362>
 800a0d0:	4b74      	ldr	r3, [pc, #464]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a0d2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d009      	beq.n	800a0ee <_ZN13Communication7CommandEPh+0x362>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a0da:	4b72      	ldr	r3, [pc, #456]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a0dc:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a0e0:	2b05      	cmp	r3, #5
 800a0e2:	d004      	beq.n	800a0ee <_ZN13Communication7CommandEPh+0x362>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a0e4:	2102      	movs	r1, #2
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	f004 f853 	bl	800e192 <ErrorResult>
				return;
 800a0ec:	e0d6      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			if(SystemConfig.FlowRate<2 || SystemConfig.VolumeRate<2){
 800a0ee:	4b6d      	ldr	r3, [pc, #436]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a0f0:	edd3 7a08 	vldr	s15, [r3, #32]
 800a0f4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a0f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a100:	d409      	bmi.n	800a116 <_ZN13Communication7CommandEPh+0x38a>
 800a102:	4b68      	ldr	r3, [pc, #416]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a104:	edd3 7a07 	vldr	s15, [r3, #28]
 800a108:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a10c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a114:	d504      	bpl.n	800a120 <_ZN13Communication7CommandEPh+0x394>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotCalibration);
 800a116:	2104      	movs	r1, #4
 800a118:	2000      	movs	r0, #0
 800a11a:	f004 f83a 	bl	800e192 <ErrorResult>
				return;
 800a11e:	e0bd      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			 ToggleReadFlow(command[2]==1);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	3302      	adds	r3, #2
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	2b01      	cmp	r3, #1
 800a128:	bf0c      	ite	eq
 800a12a:	2301      	moveq	r3, #1
 800a12c:	2300      	movne	r3, #0
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fac8 	bl	800a6c8 <_ZN13Communication14ToggleReadFlowEb>
			 break;
 800a138:	e0b0      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_ReadFirstEmg:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a13a:	4b5a      	ldr	r3, [pc, #360]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a13c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00e      	beq.n	800a162 <_ZN13Communication7CommandEPh+0x3d6>
 800a144:	4b57      	ldr	r3, [pc, #348]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a146:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d009      	beq.n	800a162 <_ZN13Communication7CommandEPh+0x3d6>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a14e:	4b55      	ldr	r3, [pc, #340]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a150:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a154:	2b05      	cmp	r3, #5
 800a156:	d004      	beq.n	800a162 <_ZN13Communication7CommandEPh+0x3d6>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a158:	2102      	movs	r1, #2
 800a15a:	2000      	movs	r0, #0
 800a15c:	f004 f819 	bl	800e192 <ErrorResult>
				return;
 800a160:	e09c      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			 ToggleReadFirstEmg(command[2]==1);
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	3302      	adds	r3, #2
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	bf0c      	ite	eq
 800a16c:	2301      	moveq	r3, #1
 800a16e:	2300      	movne	r3, #0
 800a170:	b2db      	uxtb	r3, r3
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fae1 	bl	800a73c <_ZN13Communication18ToggleReadFirstEmgEb>
			 break;
 800a17a:	e08f      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_ReadSecondEmg:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a17c:	4b49      	ldr	r3, [pc, #292]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a17e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00e      	beq.n	800a1a4 <_ZN13Communication7CommandEPh+0x418>
 800a186:	4b47      	ldr	r3, [pc, #284]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a188:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d009      	beq.n	800a1a4 <_ZN13Communication7CommandEPh+0x418>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a190:	4b44      	ldr	r3, [pc, #272]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a192:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a196:	2b05      	cmp	r3, #5
 800a198:	d004      	beq.n	800a1a4 <_ZN13Communication7CommandEPh+0x418>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a19a:	2102      	movs	r1, #2
 800a19c:	2000      	movs	r0, #0
 800a19e:	f003 fff8 	bl	800e192 <ErrorResult>
				return;
 800a1a2:	e07b      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			 ToggleReadSecondEmg(command[2]==1);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	3302      	adds	r3, #2
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	bf0c      	ite	eq
 800a1ae:	2301      	moveq	r3, #1
 800a1b0:	2300      	movne	r3, #0
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 faf6 	bl	800a7a8 <_ZN13Communication19ToggleReadSecondEmgEb>
			 break;
 800a1bc:	e06e      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_StopTest:
			 cleanTime=(command[2]<<8)+command[3];
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	3302      	adds	r3, #2
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	021b      	lsls	r3, r3, #8
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	3203      	adds	r2, #3
 800a1cc:	7812      	ldrb	r2, [r2, #0]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	81fb      	strh	r3, [r7, #14]
			StopTest(cleanTime);
 800a1d2:	89fb      	ldrh	r3, [r7, #14]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fbf4 	bl	800a9c4 <_ZN13Communication8StopTestEt>
			 break;
 800a1dc:	e05e      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		case CommandRequestType::CMDR_StartTest:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800a1de:	4b31      	ldr	r3, [pc, #196]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a1e0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d004      	beq.n	800a1f2 <_ZN13Communication7CommandEPh+0x466>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a1e8:	2102      	movs	r1, #2
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	f003 ffd1 	bl	800e192 <ErrorResult>
				return;
 800a1f0:	e054      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			if(SystemConfig.VolumeAverage==0 || SystemConfig.FlowAverage==0){
 800a1f2:	4b2c      	ldr	r3, [pc, #176]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d003      	beq.n	800a202 <_ZN13Communication7CommandEPh+0x476>
 800a1fa:	4b2a      	ldr	r3, [pc, #168]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d104      	bne.n	800a20c <_ZN13Communication7CommandEPh+0x480>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotAverage);
 800a202:	2105      	movs	r1, #5
 800a204:	2000      	movs	r0, #0
 800a206:	f003 ffc4 	bl	800e192 <ErrorResult>
				return;
 800a20a:	e047      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			if(SystemConfig.FlowRate<2 || SystemConfig.VolumeRate<2){
 800a20c:	4b25      	ldr	r3, [pc, #148]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a20e:	edd3 7a08 	vldr	s15, [r3, #32]
 800a212:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21e:	d409      	bmi.n	800a234 <_ZN13Communication7CommandEPh+0x4a8>
 800a220:	4b20      	ldr	r3, [pc, #128]	@ (800a2a4 <_ZN13Communication7CommandEPh+0x518>)
 800a222:	edd3 7a07 	vldr	s15, [r3, #28]
 800a226:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a22a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a232:	d504      	bpl.n	800a23e <_ZN13Communication7CommandEPh+0x4b2>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotCalibration);
 800a234:	2104      	movs	r1, #4
 800a236:	2000      	movs	r0, #0
 800a238:	f003 ffab 	bl	800e192 <ErrorResult>
				return;
 800a23c:	e02e      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
			}
			 cleanTime=(command[5]<<8)+command[6];
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	3305      	adds	r3, #5
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	021b      	lsls	r3, r3, #8
 800a246:	b29b      	uxth	r3, r3
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	3206      	adds	r2, #6
 800a24c:	7812      	ldrb	r2, [r2, #0]
 800a24e:	4413      	add	r3, r2
 800a250:	81fb      	strh	r3, [r7, #14]
			StartTest(command[2]==1, command[3]==1, command[4]==1,cleanTime);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	3302      	adds	r3, #2
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	bf0c      	ite	eq
 800a25c:	2301      	moveq	r3, #1
 800a25e:	2300      	movne	r3, #0
 800a260:	b2d9      	uxtb	r1, r3
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	3303      	adds	r3, #3
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	bf0c      	ite	eq
 800a26c:	2301      	moveq	r3, #1
 800a26e:	2300      	movne	r3, #0
 800a270:	b2da      	uxtb	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	3304      	adds	r3, #4
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	bf0c      	ite	eq
 800a27c:	2301      	moveq	r3, #1
 800a27e:	2300      	movne	r3, #0
 800a280:	b2d8      	uxtb	r0, r3
 800a282:	89fb      	ldrh	r3, [r7, #14]
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	4603      	mov	r3, r0
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fb67 	bl	800a95c <_ZN13Communication9StartTestEbbbt>
			 break;
 800a28e:	e005      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
		default:
			ErrorResult(OperationCodes::ReadData, Errors::UndefinedCommandType);
 800a290:	210a      	movs	r1, #10
 800a292:	2000      	movs	r0, #0
 800a294:	f003 ff7d 	bl	800e192 <ErrorResult>
			 break;
 800a298:	e000      	b.n	800a29c <_ZN13Communication7CommandEPh+0x510>
	if(command[0]!=RequestType::R_Command) return;
 800a29a:	bf00      	nop
	}
}
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	200092a8 	.word	0x200092a8

0800a2a8 <_ZN13Communication13ConfigurationEPh>:

void Communication::Configuration(uint8_t *command){
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
	if(command[0]!=RequestType::R_Configuration) return;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	f040 810d 	bne.w	800a4d6 <_ZN13Communication13ConfigurationEPh+0x22e>
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800a2bc:	4b88      	ldr	r3, [pc, #544]	@ (800a4e0 <_ZN13Communication13ConfigurationEPh+0x238>)
 800a2be:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d004      	beq.n	800a2d0 <_ZN13Communication13ConfigurationEPh+0x28>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a2c6:	2102      	movs	r1, #2
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	f003 ff62 	bl	800e192 <ErrorResult>
		return;
 800a2ce:	e103      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
	}
	uint16_t maxTrim = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	81fb      	strh	r3, [r7, #14]
	uint16_t zeroPointMaxTrim = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	81bb      	strh	r3, [r7, #12]
	uint16_t zeroPointMinTrim = 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	817b      	strh	r3, [r7, #10]
	switch (command[1])   												//Check Function
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	2b0a      	cmp	r3, #10
 800a2e6:	f200 80f1 	bhi.w	800a4cc <_ZN13Communication13ConfigurationEPh+0x224>
 800a2ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f0 <_ZN13Communication13ConfigurationEPh+0x48>)
 800a2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f0:	0800a31d 	.word	0x0800a31d
 800a2f4:	0800a32d 	.word	0x0800a32d
 800a2f8:	0800a345 	.word	0x0800a345
 800a2fc:	0800a35d 	.word	0x0800a35d
 800a300:	0800a375 	.word	0x0800a375
 800a304:	0800a38d 	.word	0x0800a38d
 800a308:	0800a3a5 	.word	0x0800a3a5
 800a30c:	0800a3bd 	.word	0x0800a3bd
 800a310:	0800a3d5 	.word	0x0800a3d5
 800a314:	0800a447 	.word	0x0800a447
 800a318:	0800a4b9 	.word	0x0800a4b9
	{
	case ConfigurationRequestType::CFGR_ReadConfiguration:
		 SuccessDataResult(100,SuccessDataType::SD_Configuration, SystemConfig.Backup,SystemConfig.BackupLen);
 800a31c:	4b70      	ldr	r3, [pc, #448]	@ (800a4e0 <_ZN13Communication13ConfigurationEPh+0x238>)
 800a31e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a320:	4a70      	ldr	r2, [pc, #448]	@ (800a4e4 <_ZN13Communication13ConfigurationEPh+0x23c>)
 800a322:	2101      	movs	r1, #1
 800a324:	2064      	movs	r0, #100	@ 0x64
 800a326:	f003 feb9 	bl	800e09c <SuccessDataResult>
		 break;
 800a32a:	e0d5      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
	case ConfigurationRequestType::CFGR_SetSendPerSecond:
		FMI.WriteSendPerSecond(command[2]);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	1d1a      	adds	r2, r3, #4
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	3302      	adds	r3, #2
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	4619      	mov	r1, r3
 800a338:	4610      	mov	r0, r2
 800a33a:	f001 fb1b 	bl	800b974 <_ZN12FlashManager18WriteSendPerSecondEh>
		 SuccessResult();
 800a33e:	f003 fe9f 	bl	800e080 <SuccessResult>
		 break;
 800a342:	e0c9      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
		case ConfigurationRequestType::CFGR_SetFirstEmgPerSecond:
			FMI.WriteFirstEmgPerSecond(command[2]);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	1d1a      	adds	r2, r3, #4
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	3302      	adds	r3, #2
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	4619      	mov	r1, r3
 800a350:	4610      	mov	r0, r2
 800a352:	f001 fbab 	bl	800baac <_ZN12FlashManager22WriteFirstEmgPerSecondEh>
			 SuccessResult();
 800a356:	f003 fe93 	bl	800e080 <SuccessResult>
			 break;
 800a35a:	e0bd      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
		case ConfigurationRequestType::CFGR_SetSecondEmgPerSecond:
			FMI.WriteSecondEmgPerSecond(command[2]);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	1d1a      	adds	r2, r3, #4
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	3302      	adds	r3, #2
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	4619      	mov	r1, r3
 800a368:	4610      	mov	r0, r2
 800a36a:	f001 fc3b 	bl	800bbe4 <_ZN12FlashManager23WriteSecondEmgPerSecondEh>
			 SuccessResult();
 800a36e:	f003 fe87 	bl	800e080 <SuccessResult>
			 break;
 800a372:	e0b1      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
		case ConfigurationRequestType::CFGR_SetVolumePerSecond:
			FMI.WriteVolumePerSecond(command[2]);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	1d1a      	adds	r2, r3, #4
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	3302      	adds	r3, #2
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f001 fccb 	bl	800bd1c <_ZN12FlashManager20WriteVolumePerSecondEh>
			 SuccessResult();
 800a386:	f003 fe7b 	bl	800e080 <SuccessResult>
			 break;
 800a38a:	e0a5      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
		case ConfigurationRequestType::CFGR_SetFlowPerSecond:
			FMI.WriteFlowPerSecond(command[2]);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	1d1a      	adds	r2, r3, #4
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	3302      	adds	r3, #2
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	4619      	mov	r1, r3
 800a398:	4610      	mov	r0, r2
 800a39a:	f001 fd5b 	bl	800be54 <_ZN12FlashManager18WriteFlowPerSecondEh>
			 SuccessResult();
 800a39e:	f003 fe6f 	bl	800e080 <SuccessResult>
			 break;
 800a3a2:	e099      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
		case ConfigurationRequestType::CFGR_SetPumpMaxRunTime:
			FMI.WritePumpMaxRunTime(command[2]);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	1d1a      	adds	r2, r3, #4
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	3302      	adds	r3, #2
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	4610      	mov	r0, r2
 800a3b2:	f001 fdeb 	bl	800bf8c <_ZN12FlashManager19WritePumpMaxRunTimeEh>
			 SuccessResult();
 800a3b6:	f003 fe63 	bl	800e080 <SuccessResult>
			 break;
 800a3ba:	e08d      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
		case ConfigurationRequestType::CFGR_SetValveMaxRunTime:
			FMI.WriteValveMaxRunTime(command[2]);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	1d1a      	adds	r2, r3, #4
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	3302      	adds	r3, #2
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	f001 fe7b 	bl	800c0c4 <_ZN12FlashManager20WriteValveMaxRunTimeEh>
			 SuccessResult();
 800a3ce:	f003 fe57 	bl	800e080 <SuccessResult>
			 break;
 800a3d2:	e081      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
		 case ConfigurationRequestType::CFGR_SetCalibrationFirstEmg:
				maxTrim=(command[2]<<8)+command[3];
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	3302      	adds	r3, #2
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	021b      	lsls	r3, r3, #8
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	3203      	adds	r2, #3
 800a3e2:	7812      	ldrb	r2, [r2, #0]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	81fb      	strh	r3, [r7, #14]
				zeroPointMaxTrim=(command[4]<<8)+command[5];
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	021b      	lsls	r3, r3, #8
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	3205      	adds	r2, #5
 800a3f6:	7812      	ldrb	r2, [r2, #0]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	81bb      	strh	r3, [r7, #12]
				zeroPointMinTrim=(command[6]<<8)+command[7];
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	3306      	adds	r3, #6
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	b29b      	uxth	r3, r3
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	3207      	adds	r2, #7
 800a40a:	7812      	ldrb	r2, [r2, #0]
 800a40c:	4413      	add	r3, r2
 800a40e:	817b      	strh	r3, [r7, #10]
				if(maxTrim<1){
 800a410:	89fb      	ldrh	r3, [r7, #14]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d104      	bne.n	800a420 <_ZN13Communication13ConfigurationEPh+0x178>
					ErrorResult(OperationCodes::ReadData, Errors::ValueShouldNotBeZero);
 800a416:	2106      	movs	r1, #6
 800a418:	2000      	movs	r0, #0
 800a41a:	f003 feba 	bl	800e192 <ErrorResult>
					return;
 800a41e:	e05b      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
				}
				if(zeroPointMinTrim>=zeroPointMaxTrim){
 800a420:	897a      	ldrh	r2, [r7, #10]
 800a422:	89bb      	ldrh	r3, [r7, #12]
 800a424:	429a      	cmp	r2, r3
 800a426:	d304      	bcc.n	800a432 <_ZN13Communication13ConfigurationEPh+0x18a>
					ErrorResult(OperationCodes::ReadData, Errors::MinValueCanNotBeGreaterThanMaxValue);
 800a428:	2107      	movs	r1, #7
 800a42a:	2000      	movs	r0, #0
 800a42c:	f003 feb1 	bl	800e192 <ErrorResult>
					return;
 800a430:	e052      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
				}
				FMI.WriteFirstEmgData(maxTrim, zeroPointMaxTrim, zeroPointMinTrim);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	1d18      	adds	r0, r3, #4
 800a436:	897b      	ldrh	r3, [r7, #10]
 800a438:	89ba      	ldrh	r2, [r7, #12]
 800a43a:	89f9      	ldrh	r1, [r7, #14]
 800a43c:	f002 f938 	bl	800c6b0 <_ZN12FlashManager17WriteFirstEmgDataEttt>
			 SuccessResult();
 800a440:	f003 fe1e 	bl	800e080 <SuccessResult>
			 break;
 800a444:	e048      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
		case ConfigurationRequestType::CFGR_SetCalibrationSecondEmg:
			maxTrim=(command[2]<<8)+command[3];
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	3302      	adds	r3, #2
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	021b      	lsls	r3, r3, #8
 800a44e:	b29b      	uxth	r3, r3
 800a450:	683a      	ldr	r2, [r7, #0]
 800a452:	3203      	adds	r2, #3
 800a454:	7812      	ldrb	r2, [r2, #0]
 800a456:	4413      	add	r3, r2
 800a458:	81fb      	strh	r3, [r7, #14]
			zeroPointMaxTrim=(command[4]<<8)+command[5];
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	3304      	adds	r3, #4
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	b29b      	uxth	r3, r3
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	3205      	adds	r2, #5
 800a468:	7812      	ldrb	r2, [r2, #0]
 800a46a:	4413      	add	r3, r2
 800a46c:	81bb      	strh	r3, [r7, #12]
			zeroPointMinTrim=(command[6]<<8)+command[7];
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	3306      	adds	r3, #6
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	021b      	lsls	r3, r3, #8
 800a476:	b29b      	uxth	r3, r3
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	3207      	adds	r2, #7
 800a47c:	7812      	ldrb	r2, [r2, #0]
 800a47e:	4413      	add	r3, r2
 800a480:	817b      	strh	r3, [r7, #10]
			if(maxTrim<1){
 800a482:	89fb      	ldrh	r3, [r7, #14]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d104      	bne.n	800a492 <_ZN13Communication13ConfigurationEPh+0x1ea>
				ErrorResult(OperationCodes::ReadData, Errors::ValueShouldNotBeZero);
 800a488:	2106      	movs	r1, #6
 800a48a:	2000      	movs	r0, #0
 800a48c:	f003 fe81 	bl	800e192 <ErrorResult>
				return;
 800a490:	e022      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
			}
			if(zeroPointMinTrim>=zeroPointMaxTrim){
 800a492:	897a      	ldrh	r2, [r7, #10]
 800a494:	89bb      	ldrh	r3, [r7, #12]
 800a496:	429a      	cmp	r2, r3
 800a498:	d304      	bcc.n	800a4a4 <_ZN13Communication13ConfigurationEPh+0x1fc>
				ErrorResult(OperationCodes::ReadData, Errors::MinValueCanNotBeGreaterThanMaxValue);
 800a49a:	2107      	movs	r1, #7
 800a49c:	2000      	movs	r0, #0
 800a49e:	f003 fe78 	bl	800e192 <ErrorResult>
				return;
 800a4a2:	e019      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
			}
			FMI.WriteSecondEmgData(maxTrim, zeroPointMaxTrim, zeroPointMinTrim);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	1d18      	adds	r0, r3, #4
 800a4a8:	897b      	ldrh	r3, [r7, #10]
 800a4aa:	89ba      	ldrh	r2, [r7, #12]
 800a4ac:	89f9      	ldrh	r1, [r7, #14]
 800a4ae:	f002 faba 	bl	800ca26 <_ZN12FlashManager18WriteSecondEmgDataEttt>
			 SuccessResult();
 800a4b2:	f003 fde5 	bl	800e080 <SuccessResult>
			 break;
 800a4b6:	e00f      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
		case ConfigurationRequestType::CFGR_SaveFlash:
			FMI.Update();
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f001 f93d 	bl	800b73c <_ZN12FlashManager6UpdateEv>
			FlashInitialize();
 800a4c2:	f003 fce7 	bl	800de94 <FlashInitialize>
			 SuccessResult();
 800a4c6:	f003 fddb 	bl	800e080 <SuccessResult>
			break;
 800a4ca:	e005      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
		default:
			ErrorResult(OperationCodes::ReadData, Errors::UndefinedConfigurationType);
 800a4cc:	210b      	movs	r1, #11
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	f003 fe5f 	bl	800e192 <ErrorResult>
			 break;
 800a4d4:	e000      	b.n	800a4d8 <_ZN13Communication13ConfigurationEPh+0x230>
	if(command[0]!=RequestType::R_Configuration) return;
 800a4d6:	bf00      	nop
	}
}
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	200092a8 	.word	0x200092a8
 800a4e4:	200092dd 	.word	0x200092dd

0800a4e8 <_ZN13Communication14ToggleFirstEmgEb>:

void Communication::ToggleFirstEmg(bool isStart){
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	70fb      	strb	r3, [r7, #3]
	Statuses.FirstEmg=isStart;
 800a4f4:	4a0f      	ldr	r2, [pc, #60]	@ (800a534 <_ZN13Communication14ToggleFirstEmgEb+0x4c>)
 800a4f6:	78fb      	ldrb	r3, [r7, #3]
 800a4f8:	7013      	strb	r3, [r2, #0]
	if(isStart){
 800a4fa:	78fb      	ldrb	r3, [r7, #3]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00c      	beq.n	800a51a <_ZN13Communication14ToggleFirstEmgEb+0x32>
		if(ThreadStorage.FirstEmgThreadId!=NULL) return;
 800a500:	4b0d      	ldr	r3, [pc, #52]	@ (800a538 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d111      	bne.n	800a52c <_ZN13Communication14ToggleFirstEmgEb+0x44>
		ThreadStorage.FirstEmgThreadId = osThreadNew(StartFirstEmgTask, NULL, &ThreadStorage.FirstEmgThreadAttr);
 800a508:	4a0c      	ldr	r2, [pc, #48]	@ (800a53c <_ZN13Communication14ToggleFirstEmgEb+0x54>)
 800a50a:	2100      	movs	r1, #0
 800a50c:	480c      	ldr	r0, [pc, #48]	@ (800a540 <_ZN13Communication14ToggleFirstEmgEb+0x58>)
 800a50e:	f7fb ff2f 	bl	8006370 <osThreadNew>
 800a512:	4603      	mov	r3, r0
 800a514:	4a08      	ldr	r2, [pc, #32]	@ (800a538 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800a516:	6093      	str	r3, [r2, #8]
		return;
 800a518:	e009      	b.n	800a52e <_ZN13Communication14ToggleFirstEmgEb+0x46>
	}
	osThreadTerminate(ThreadStorage.FirstEmgThreadId);
 800a51a:	4b07      	ldr	r3, [pc, #28]	@ (800a538 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fb ffb8 	bl	8006494 <osThreadTerminate>
	ThreadStorage.FirstEmgThreadId=NULL;
 800a524:	4b04      	ldr	r3, [pc, #16]	@ (800a538 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800a526:	2200      	movs	r2, #0
 800a528:	609a      	str	r2, [r3, #8]
 800a52a:	e000      	b.n	800a52e <_ZN13Communication14ToggleFirstEmgEb+0x46>
		if(ThreadStorage.FirstEmgThreadId!=NULL) return;
 800a52c:	bf00      	nop
}
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	200092a0 	.word	0x200092a0
 800a538:	200090b8 	.word	0x200090b8
 800a53c:	200090c8 	.word	0x200090c8
 800a540:	0800eb85 	.word	0x0800eb85

0800a544 <_ZN13Communication15ToggleSecondEmgEb>:
void Communication::ToggleSecondEmg(bool isStart){
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
	Statuses.SecondEmg=isStart;
 800a550:	4a0f      	ldr	r2, [pc, #60]	@ (800a590 <_ZN13Communication15ToggleSecondEmgEb+0x4c>)
 800a552:	78fb      	ldrb	r3, [r7, #3]
 800a554:	7053      	strb	r3, [r2, #1]
	if(isStart){
 800a556:	78fb      	ldrb	r3, [r7, #3]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00c      	beq.n	800a576 <_ZN13Communication15ToggleSecondEmgEb+0x32>
		if(ThreadStorage.SecondEmgThreadId!=NULL) return;
 800a55c:	4b0d      	ldr	r3, [pc, #52]	@ (800a594 <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d111      	bne.n	800a588 <_ZN13Communication15ToggleSecondEmgEb+0x44>
		ThreadStorage.SecondEmgThreadId = osThreadNew(StartSecondEmgTask, NULL, &ThreadStorage.SecondEmgThreadAttr);
 800a564:	4a0c      	ldr	r2, [pc, #48]	@ (800a598 <_ZN13Communication15ToggleSecondEmgEb+0x54>)
 800a566:	2100      	movs	r1, #0
 800a568:	480c      	ldr	r0, [pc, #48]	@ (800a59c <_ZN13Communication15ToggleSecondEmgEb+0x58>)
 800a56a:	f7fb ff01 	bl	8006370 <osThreadNew>
 800a56e:	4603      	mov	r3, r0
 800a570:	4a08      	ldr	r2, [pc, #32]	@ (800a594 <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800a572:	60d3      	str	r3, [r2, #12]
		return;
 800a574:	e009      	b.n	800a58a <_ZN13Communication15ToggleSecondEmgEb+0x46>
	}
	osThreadTerminate(ThreadStorage.SecondEmgThreadId);
 800a576:	4b07      	ldr	r3, [pc, #28]	@ (800a594 <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fb ff8a 	bl	8006494 <osThreadTerminate>
	ThreadStorage.SecondEmgThreadId=NULL;
 800a580:	4b04      	ldr	r3, [pc, #16]	@ (800a594 <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800a582:	2200      	movs	r2, #0
 800a584:	60da      	str	r2, [r3, #12]
 800a586:	e000      	b.n	800a58a <_ZN13Communication15ToggleSecondEmgEb+0x46>
		if(ThreadStorage.SecondEmgThreadId!=NULL) return;
 800a588:	bf00      	nop
}
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	200092a0 	.word	0x200092a0
 800a594:	200090b8 	.word	0x200090b8
 800a598:	200090ec 	.word	0x200090ec
 800a59c:	0800eced 	.word	0x0800eced

0800a5a0 <_ZN13Communication14ToggleLoadCellEb>:
void Communication::ToggleLoadCell(bool isStart){
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	70fb      	strb	r3, [r7, #3]
	Statuses.Volume=isStart;
 800a5ac:	4a22      	ldr	r2, [pc, #136]	@ (800a638 <_ZN13Communication14ToggleLoadCellEb+0x98>)
 800a5ae:	78fb      	ldrb	r3, [r7, #3]
 800a5b0:	7093      	strb	r3, [r2, #2]
	Statuses.Flow=isStart;
 800a5b2:	4a21      	ldr	r2, [pc, #132]	@ (800a638 <_ZN13Communication14ToggleLoadCellEb+0x98>)
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	70d3      	strb	r3, [r2, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800a5b8:	4b20      	ldr	r3, [pc, #128]	@ (800a63c <_ZN13Communication14ToggleLoadCellEb+0x9c>)
 800a5ba:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a5be:	2b04      	cmp	r3, #4
 800a5c0:	d104      	bne.n	800a5cc <_ZN13Communication14ToggleLoadCellEb+0x2c>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a5c2:	2102      	movs	r1, #2
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	f003 fde4 	bl	800e192 <ErrorResult>
		return;
 800a5ca:	e031      	b.n	800a630 <_ZN13Communication14ToggleLoadCellEb+0x90>
	}
	if(isStart){
 800a5cc:	78fb      	ldrb	r3, [r7, #3]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d01a      	beq.n	800a608 <_ZN13Communication14ToggleLoadCellEb+0x68>
		if(ThreadStorage.FlowThreadId!=NULL) return;
 800a5d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a640 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a5d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d127      	bne.n	800a62a <_ZN13Communication14ToggleLoadCellEb+0x8a>
		if(ThreadStorage.VolumeThreadId!=NULL) return;
 800a5da:	4b19      	ldr	r3, [pc, #100]	@ (800a640 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a5dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d125      	bne.n	800a62e <_ZN13Communication14ToggleLoadCellEb+0x8e>
		ClearLoadcellParams();
 800a5e2:	f005 f9f5 	bl	800f9d0 <ClearLoadcellParams>
		ThreadStorage.VolumeThreadId = osThreadNew(StartVolumeTask, NULL, &ThreadStorage.VolumeThreadAttr);
 800a5e6:	4a17      	ldr	r2, [pc, #92]	@ (800a644 <_ZN13Communication14ToggleLoadCellEb+0xa4>)
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	4817      	ldr	r0, [pc, #92]	@ (800a648 <_ZN13Communication14ToggleLoadCellEb+0xa8>)
 800a5ec:	f7fb fec0 	bl	8006370 <osThreadNew>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	4a13      	ldr	r2, [pc, #76]	@ (800a640 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a5f4:	6593      	str	r3, [r2, #88]	@ 0x58
		ThreadStorage.FlowThreadId = osThreadNew(StartFlowTask, NULL, &ThreadStorage.FlowThreadAttr);
 800a5f6:	4a15      	ldr	r2, [pc, #84]	@ (800a64c <_ZN13Communication14ToggleLoadCellEb+0xac>)
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	4815      	ldr	r0, [pc, #84]	@ (800a650 <_ZN13Communication14ToggleLoadCellEb+0xb0>)
 800a5fc:	f7fb feb8 	bl	8006370 <osThreadNew>
 800a600:	4603      	mov	r3, r0
 800a602:	4a0f      	ldr	r2, [pc, #60]	@ (800a640 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a604:	65d3      	str	r3, [r2, #92]	@ 0x5c
		return;
 800a606:	e013      	b.n	800a630 <_ZN13Communication14ToggleLoadCellEb+0x90>
	}
	osThreadTerminate(ThreadStorage.VolumeThreadId);
 800a608:	4b0d      	ldr	r3, [pc, #52]	@ (800a640 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a60a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fb ff41 	bl	8006494 <osThreadTerminate>
	osThreadTerminate(ThreadStorage.FlowThreadId);
 800a612:	4b0b      	ldr	r3, [pc, #44]	@ (800a640 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a616:	4618      	mov	r0, r3
 800a618:	f7fb ff3c 	bl	8006494 <osThreadTerminate>
	ThreadStorage.VolumeThreadId=NULL;
 800a61c:	4b08      	ldr	r3, [pc, #32]	@ (800a640 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a61e:	2200      	movs	r2, #0
 800a620:	659a      	str	r2, [r3, #88]	@ 0x58
	ThreadStorage.FlowThreadId=NULL;
 800a622:	4b07      	ldr	r3, [pc, #28]	@ (800a640 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800a624:	2200      	movs	r2, #0
 800a626:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a628:	e002      	b.n	800a630 <_ZN13Communication14ToggleLoadCellEb+0x90>
		if(ThreadStorage.FlowThreadId!=NULL) return;
 800a62a:	bf00      	nop
 800a62c:	e000      	b.n	800a630 <_ZN13Communication14ToggleLoadCellEb+0x90>
		if(ThreadStorage.VolumeThreadId!=NULL) return;
 800a62e:	bf00      	nop
}
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	200092a0 	.word	0x200092a0
 800a63c:	200092a8 	.word	0x200092a8
 800a640:	200090b8 	.word	0x200090b8
 800a644:	20009144 	.word	0x20009144
 800a648:	0800efcd 	.word	0x0800efcd
 800a64c:	20009168 	.word	0x20009168
 800a650:	0800ee55 	.word	0x0800ee55

0800a654 <_ZN13Communication16ToggleReadVolumeEb>:
void Communication::ToggleReadVolume(bool isStart){
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800a660:	4b15      	ldr	r3, [pc, #84]	@ (800a6b8 <_ZN13Communication16ToggleReadVolumeEb+0x64>)
 800a662:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a666:	2b04      	cmp	r3, #4
 800a668:	d104      	bne.n	800a674 <_ZN13Communication16ToggleReadVolumeEb+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a66a:	2102      	movs	r1, #2
 800a66c:	2000      	movs	r0, #0
 800a66e:	f003 fd90 	bl	800e192 <ErrorResult>
		return;
 800a672:	e01d      	b.n	800a6b0 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
	}
	if(isStart){
 800a674:	78fb      	ldrb	r3, [r7, #3]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00e      	beq.n	800a698 <_ZN13Communication16ToggleReadVolumeEb+0x44>
		if(ThreadStorage.ReadVolumeThreadId!=NULL) return;
 800a67a:	4b10      	ldr	r3, [pc, #64]	@ (800a6bc <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800a67c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d115      	bne.n	800a6ae <_ZN13Communication16ToggleReadVolumeEb+0x5a>
		ClearLoadcellParams();
 800a682:	f005 f9a5 	bl	800f9d0 <ClearLoadcellParams>
		ThreadStorage.ReadVolumeThreadId = osThreadNew(StartReadVolumeTask, NULL, &ThreadStorage.VolumeThreadAttr);
 800a686:	4a0e      	ldr	r2, [pc, #56]	@ (800a6c0 <_ZN13Communication16ToggleReadVolumeEb+0x6c>)
 800a688:	2100      	movs	r1, #0
 800a68a:	480e      	ldr	r0, [pc, #56]	@ (800a6c4 <_ZN13Communication16ToggleReadVolumeEb+0x70>)
 800a68c:	f7fb fe70 	bl	8006370 <osThreadNew>
 800a690:	4603      	mov	r3, r0
 800a692:	4a0a      	ldr	r2, [pc, #40]	@ (800a6bc <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800a694:	6613      	str	r3, [r2, #96]	@ 0x60
		return;
 800a696:	e00b      	b.n	800a6b0 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
	}
	osThreadTerminate(ThreadStorage.ReadVolumeThreadId);
 800a698:	4b08      	ldr	r3, [pc, #32]	@ (800a6bc <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800a69a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fb fef9 	bl	8006494 <osThreadTerminate>
	ThreadStorage.ReadVolumeThreadId=NULL;
 800a6a2:	4b06      	ldr	r3, [pc, #24]	@ (800a6bc <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	661a      	str	r2, [r3, #96]	@ 0x60
	ClearLoadcellParams();
 800a6a8:	f005 f992 	bl	800f9d0 <ClearLoadcellParams>
 800a6ac:	e000      	b.n	800a6b0 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
		if(ThreadStorage.ReadVolumeThreadId!=NULL) return;
 800a6ae:	bf00      	nop
}
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	200092a8 	.word	0x200092a8
 800a6bc:	200090b8 	.word	0x200090b8
 800a6c0:	20009144 	.word	0x20009144
 800a6c4:	0800f051 	.word	0x0800f051

0800a6c8 <_ZN13Communication14ToggleReadFlowEb>:

void Communication::ToggleReadFlow(bool isStart){
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800a6d4:	4b15      	ldr	r3, [pc, #84]	@ (800a72c <_ZN13Communication14ToggleReadFlowEb+0x64>)
 800a6d6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a6da:	2b04      	cmp	r3, #4
 800a6dc:	d104      	bne.n	800a6e8 <_ZN13Communication14ToggleReadFlowEb+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a6de:	2102      	movs	r1, #2
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	f003 fd56 	bl	800e192 <ErrorResult>
		return;
 800a6e6:	e01d      	b.n	800a724 <_ZN13Communication14ToggleReadFlowEb+0x5c>
	}
	if(isStart){
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00e      	beq.n	800a70c <_ZN13Communication14ToggleReadFlowEb+0x44>
		if(ThreadStorage.ReadFlowThreadId!=NULL) return;
 800a6ee:	4b10      	ldr	r3, [pc, #64]	@ (800a730 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800a6f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d115      	bne.n	800a722 <_ZN13Communication14ToggleReadFlowEb+0x5a>
		ClearLoadcellParams();
 800a6f6:	f005 f96b 	bl	800f9d0 <ClearLoadcellParams>
		ThreadStorage.ReadFlowThreadId = osThreadNew(StartReadFlowTask, NULL, &ThreadStorage.FlowThreadAttr);
 800a6fa:	4a0e      	ldr	r2, [pc, #56]	@ (800a734 <_ZN13Communication14ToggleReadFlowEb+0x6c>)
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	480e      	ldr	r0, [pc, #56]	@ (800a738 <_ZN13Communication14ToggleReadFlowEb+0x70>)
 800a700:	f7fb fe36 	bl	8006370 <osThreadNew>
 800a704:	4603      	mov	r3, r0
 800a706:	4a0a      	ldr	r2, [pc, #40]	@ (800a730 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800a708:	6653      	str	r3, [r2, #100]	@ 0x64
		return;
 800a70a:	e00b      	b.n	800a724 <_ZN13Communication14ToggleReadFlowEb+0x5c>
	}
	osThreadTerminate(ThreadStorage.ReadFlowThreadId);
 800a70c:	4b08      	ldr	r3, [pc, #32]	@ (800a730 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800a70e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a710:	4618      	mov	r0, r3
 800a712:	f7fb febf 	bl	8006494 <osThreadTerminate>
	ThreadStorage.ReadFlowThreadId=NULL;
 800a716:	4b06      	ldr	r3, [pc, #24]	@ (800a730 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800a718:	2200      	movs	r2, #0
 800a71a:	665a      	str	r2, [r3, #100]	@ 0x64
	ClearLoadcellParams();
 800a71c:	f005 f958 	bl	800f9d0 <ClearLoadcellParams>
 800a720:	e000      	b.n	800a724 <_ZN13Communication14ToggleReadFlowEb+0x5c>
		if(ThreadStorage.ReadFlowThreadId!=NULL) return;
 800a722:	bf00      	nop
}
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	200092a8 	.word	0x200092a8
 800a730:	200090b8 	.word	0x200090b8
 800a734:	20009168 	.word	0x20009168
 800a738:	0800eed1 	.word	0x0800eed1

0800a73c <_ZN13Communication18ToggleReadFirstEmgEb>:

void Communication::ToggleReadFirstEmg(bool isStart){
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800a748:	4b13      	ldr	r3, [pc, #76]	@ (800a798 <_ZN13Communication18ToggleReadFirstEmgEb+0x5c>)
 800a74a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a74e:	2b04      	cmp	r3, #4
 800a750:	d104      	bne.n	800a75c <_ZN13Communication18ToggleReadFirstEmgEb+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a752:	2102      	movs	r1, #2
 800a754:	2000      	movs	r0, #0
 800a756:	f003 fd1c 	bl	800e192 <ErrorResult>
		return;
 800a75a:	e019      	b.n	800a790 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
	}
	if(isStart){
 800a75c:	78fb      	ldrb	r3, [r7, #3]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00c      	beq.n	800a77c <_ZN13Communication18ToggleReadFirstEmgEb+0x40>
		if(ThreadStorage.ReadFirstEmgThreadId!=NULL) return;
 800a762:	4b0e      	ldr	r3, [pc, #56]	@ (800a79c <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800a764:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a766:	2b00      	cmp	r3, #0
 800a768:	d111      	bne.n	800a78e <_ZN13Communication18ToggleReadFirstEmgEb+0x52>
		ThreadStorage.ReadFirstEmgThreadId = osThreadNew(StartReadFirstEmgTask, NULL, &ThreadStorage.FlowThreadAttr);
 800a76a:	4a0d      	ldr	r2, [pc, #52]	@ (800a7a0 <_ZN13Communication18ToggleReadFirstEmgEb+0x64>)
 800a76c:	2100      	movs	r1, #0
 800a76e:	480d      	ldr	r0, [pc, #52]	@ (800a7a4 <_ZN13Communication18ToggleReadFirstEmgEb+0x68>)
 800a770:	f7fb fdfe 	bl	8006370 <osThreadNew>
 800a774:	4603      	mov	r3, r0
 800a776:	4a09      	ldr	r2, [pc, #36]	@ (800a79c <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800a778:	6693      	str	r3, [r2, #104]	@ 0x68
		return;
 800a77a:	e009      	b.n	800a790 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
	}
	osThreadTerminate(ThreadStorage.ReadFirstEmgThreadId);
 800a77c:	4b07      	ldr	r3, [pc, #28]	@ (800a79c <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800a77e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a780:	4618      	mov	r0, r3
 800a782:	f7fb fe87 	bl	8006494 <osThreadTerminate>
	ThreadStorage.ReadFirstEmgThreadId=NULL;
 800a786:	4b05      	ldr	r3, [pc, #20]	@ (800a79c <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800a788:	2200      	movs	r2, #0
 800a78a:	669a      	str	r2, [r3, #104]	@ 0x68
 800a78c:	e000      	b.n	800a790 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
		if(ThreadStorage.ReadFirstEmgThreadId!=NULL) return;
 800a78e:	bf00      	nop
}
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	200092a8 	.word	0x200092a8
 800a79c:	200090b8 	.word	0x200090b8
 800a7a0:	20009168 	.word	0x20009168
 800a7a4:	0800ec01 	.word	0x0800ec01

0800a7a8 <_ZN13Communication19ToggleReadSecondEmgEb>:

void Communication::ToggleReadSecondEmg(bool isStart){
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800a7b4:	4b13      	ldr	r3, [pc, #76]	@ (800a804 <_ZN13Communication19ToggleReadSecondEmgEb+0x5c>)
 800a7b6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a7ba:	2b04      	cmp	r3, #4
 800a7bc:	d104      	bne.n	800a7c8 <_ZN13Communication19ToggleReadSecondEmgEb+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a7be:	2102      	movs	r1, #2
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	f003 fce6 	bl	800e192 <ErrorResult>
		return;
 800a7c6:	e019      	b.n	800a7fc <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
	}
	if(isStart){
 800a7c8:	78fb      	ldrb	r3, [r7, #3]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00c      	beq.n	800a7e8 <_ZN13Communication19ToggleReadSecondEmgEb+0x40>
		if(ThreadStorage.ReadSecondEmgThreadId!=NULL) return;
 800a7ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a808 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800a7d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d111      	bne.n	800a7fa <_ZN13Communication19ToggleReadSecondEmgEb+0x52>
		ThreadStorage.ReadSecondEmgThreadId = osThreadNew(StartReadSecondEmgTask, NULL, &ThreadStorage.FlowThreadAttr);
 800a7d6:	4a0d      	ldr	r2, [pc, #52]	@ (800a80c <_ZN13Communication19ToggleReadSecondEmgEb+0x64>)
 800a7d8:	2100      	movs	r1, #0
 800a7da:	480d      	ldr	r0, [pc, #52]	@ (800a810 <_ZN13Communication19ToggleReadSecondEmgEb+0x68>)
 800a7dc:	f7fb fdc8 	bl	8006370 <osThreadNew>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	4a09      	ldr	r2, [pc, #36]	@ (800a808 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800a7e4:	66d3      	str	r3, [r2, #108]	@ 0x6c
		return;
 800a7e6:	e009      	b.n	800a7fc <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
	}
	osThreadTerminate(ThreadStorage.ReadSecondEmgThreadId);
 800a7e8:	4b07      	ldr	r3, [pc, #28]	@ (800a808 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800a7ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7fb fe51 	bl	8006494 <osThreadTerminate>
	ThreadStorage.ReadSecondEmgThreadId=NULL;
 800a7f2:	4b05      	ldr	r3, [pc, #20]	@ (800a808 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a7f8:	e000      	b.n	800a7fc <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
		if(ThreadStorage.ReadSecondEmgThreadId!=NULL) return;
 800a7fa:	bf00      	nop
}
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	200092a8 	.word	0x200092a8
 800a808:	200090b8 	.word	0x200090b8
 800a80c:	20009168 	.word	0x20009168
 800a810:	0800ed69 	.word	0x0800ed69

0800a814 <_ZN13Communication10TogglePumpEb>:

void Communication::TogglePump(bool isStart){
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	460b      	mov	r3, r1
 800a81e:	70fb      	strb	r3, [r7, #3]
	Statuses.Pump=isStart;
 800a820:	4a14      	ldr	r2, [pc, #80]	@ (800a874 <_ZN13Communication10TogglePumpEb+0x60>)
 800a822:	78fb      	ldrb	r3, [r7, #3]
 800a824:	7113      	strb	r3, [r2, #4]
	if(isStart){
 800a826:	78fb      	ldrb	r3, [r7, #3]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d011      	beq.n	800a850 <_ZN13Communication10TogglePumpEb+0x3c>
		if(ThreadStorage.PumpMaxRunThreadId!=NULL) return;
 800a82c:	4b12      	ldr	r3, [pc, #72]	@ (800a878 <_ZN13Communication10TogglePumpEb+0x64>)
 800a82e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a830:	2b00      	cmp	r3, #0
 800a832:	d11b      	bne.n	800a86c <_ZN13Communication10TogglePumpEb+0x58>
		HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_SET);
 800a834:	2201      	movs	r2, #1
 800a836:	2101      	movs	r1, #1
 800a838:	4810      	ldr	r0, [pc, #64]	@ (800a87c <_ZN13Communication10TogglePumpEb+0x68>)
 800a83a:	f7f8 fc0b 	bl	8003054 <HAL_GPIO_WritePin>
		ThreadStorage.PumpMaxRunThreadId = osThreadNew(StartAutoClosePumpTask, NULL, &ThreadStorage.PumpMaxRunThreadAttr);
 800a83e:	4a10      	ldr	r2, [pc, #64]	@ (800a880 <_ZN13Communication10TogglePumpEb+0x6c>)
 800a840:	2100      	movs	r1, #0
 800a842:	4810      	ldr	r0, [pc, #64]	@ (800a884 <_ZN13Communication10TogglePumpEb+0x70>)
 800a844:	f7fb fd94 	bl	8006370 <osThreadNew>
 800a848:	4603      	mov	r3, r0
 800a84a:	4a0b      	ldr	r2, [pc, #44]	@ (800a878 <_ZN13Communication10TogglePumpEb+0x64>)
 800a84c:	6713      	str	r3, [r2, #112]	@ 0x70
		return;
 800a84e:	e00e      	b.n	800a86e <_ZN13Communication10TogglePumpEb+0x5a>
	}
	HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_RESET);
 800a850:	2200      	movs	r2, #0
 800a852:	2101      	movs	r1, #1
 800a854:	4809      	ldr	r0, [pc, #36]	@ (800a87c <_ZN13Communication10TogglePumpEb+0x68>)
 800a856:	f7f8 fbfd 	bl	8003054 <HAL_GPIO_WritePin>
	osThreadTerminate(ThreadStorage.PumpMaxRunThreadId);
 800a85a:	4b07      	ldr	r3, [pc, #28]	@ (800a878 <_ZN13Communication10TogglePumpEb+0x64>)
 800a85c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fb fe18 	bl	8006494 <osThreadTerminate>
	ThreadStorage.PumpMaxRunThreadId=NULL;
 800a864:	4b04      	ldr	r3, [pc, #16]	@ (800a878 <_ZN13Communication10TogglePumpEb+0x64>)
 800a866:	2200      	movs	r2, #0
 800a868:	671a      	str	r2, [r3, #112]	@ 0x70
 800a86a:	e000      	b.n	800a86e <_ZN13Communication10TogglePumpEb+0x5a>
		if(ThreadStorage.PumpMaxRunThreadId!=NULL) return;
 800a86c:	bf00      	nop

}
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	200092a0 	.word	0x200092a0
 800a878:	200090b8 	.word	0x200090b8
 800a87c:	40020400 	.word	0x40020400
 800a880:	2000918c 	.word	0x2000918c
 800a884:	0800f14d 	.word	0x0800f14d

0800a888 <_ZN13Communication11ToggleValveEb>:

void Communication::ToggleValve(bool isStart){
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	70fb      	strb	r3, [r7, #3]
	Statuses.Valve=isStart;
 800a894:	4a14      	ldr	r2, [pc, #80]	@ (800a8e8 <_ZN13Communication11ToggleValveEb+0x60>)
 800a896:	78fb      	ldrb	r3, [r7, #3]
 800a898:	7153      	strb	r3, [r2, #5]
	if(isStart){
 800a89a:	78fb      	ldrb	r3, [r7, #3]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d011      	beq.n	800a8c4 <_ZN13Communication11ToggleValveEb+0x3c>
		if(ThreadStorage.ValveMaxRunThreadId!=NULL) return;
 800a8a0:	4b12      	ldr	r3, [pc, #72]	@ (800a8ec <_ZN13Communication11ToggleValveEb+0x64>)
 800a8a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d11b      	bne.n	800a8e0 <_ZN13Communication11ToggleValveEb+0x58>
		HAL_GPIO_WritePin(VALVE_GPIO_Port, VALVE_Pin, GPIO_PIN_SET);
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	2102      	movs	r1, #2
 800a8ac:	4810      	ldr	r0, [pc, #64]	@ (800a8f0 <_ZN13Communication11ToggleValveEb+0x68>)
 800a8ae:	f7f8 fbd1 	bl	8003054 <HAL_GPIO_WritePin>
		ThreadStorage.ValveMaxRunThreadId = osThreadNew(StartAutoCloseValveTask, NULL, &ThreadStorage.ValveMaxRunThreadAttr);
 800a8b2:	4a10      	ldr	r2, [pc, #64]	@ (800a8f4 <_ZN13Communication11ToggleValveEb+0x6c>)
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4810      	ldr	r0, [pc, #64]	@ (800a8f8 <_ZN13Communication11ToggleValveEb+0x70>)
 800a8b8:	f7fb fd5a 	bl	8006370 <osThreadNew>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	4a0b      	ldr	r2, [pc, #44]	@ (800a8ec <_ZN13Communication11ToggleValveEb+0x64>)
 800a8c0:	6753      	str	r3, [r2, #116]	@ 0x74
		return;
 800a8c2:	e00e      	b.n	800a8e2 <_ZN13Communication11ToggleValveEb+0x5a>
	}
	HAL_GPIO_WritePin(VALVE_GPIO_Port, VALVE_Pin, GPIO_PIN_RESET);
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2102      	movs	r1, #2
 800a8c8:	4809      	ldr	r0, [pc, #36]	@ (800a8f0 <_ZN13Communication11ToggleValveEb+0x68>)
 800a8ca:	f7f8 fbc3 	bl	8003054 <HAL_GPIO_WritePin>
	osThreadTerminate(ThreadStorage.ValveMaxRunThreadId);
 800a8ce:	4b07      	ldr	r3, [pc, #28]	@ (800a8ec <_ZN13Communication11ToggleValveEb+0x64>)
 800a8d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fb fdde 	bl	8006494 <osThreadTerminate>
	ThreadStorage.ValveMaxRunThreadId=NULL;
 800a8d8:	4b04      	ldr	r3, [pc, #16]	@ (800a8ec <_ZN13Communication11ToggleValveEb+0x64>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	675a      	str	r2, [r3, #116]	@ 0x74
 800a8de:	e000      	b.n	800a8e2 <_ZN13Communication11ToggleValveEb+0x5a>
		if(ThreadStorage.ValveMaxRunThreadId!=NULL) return;
 800a8e0:	bf00      	nop
}
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	200092a0 	.word	0x200092a0
 800a8ec:	200090b8 	.word	0x200090b8
 800a8f0:	40020400 	.word	0x40020400
 800a8f4:	200091b0 	.word	0x200091b0
 800a8f8:	0800f181 	.word	0x0800f181

0800a8fc <_ZN13Communication16ToggleDataStreamEb>:
void Communication::ToggleDataStream(bool isStart){
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode && SystemConfig.systemMode!=SystemModes::TestMode){
 800a908:	4b12      	ldr	r3, [pc, #72]	@ (800a954 <_ZN13Communication16ToggleDataStreamEb+0x58>)
 800a90a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d009      	beq.n	800a926 <_ZN13Communication16ToggleDataStreamEb+0x2a>
 800a912:	4b10      	ldr	r3, [pc, #64]	@ (800a954 <_ZN13Communication16ToggleDataStreamEb+0x58>)
 800a914:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d004      	beq.n	800a926 <_ZN13Communication16ToggleDataStreamEb+0x2a>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a91c:	2102      	movs	r1, #2
 800a91e:	2000      	movs	r0, #0
 800a920:	f003 fc37 	bl	800e192 <ErrorResult>
		return;
 800a924:	e013      	b.n	800a94e <_ZN13Communication16ToggleDataStreamEb+0x52>
	}
	SystemConfig.IsStartTest=isStart;
 800a926:	4a0b      	ldr	r2, [pc, #44]	@ (800a954 <_ZN13Communication16ToggleDataStreamEb+0x58>)
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
	if(isStart){
 800a92e:	78fb      	ldrb	r3, [r7, #3]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d008      	beq.n	800a946 <_ZN13Communication16ToggleDataStreamEb+0x4a>
		SystemConfig.StartTestTime=StartTimerTicks;
 800a934:	4b08      	ldr	r3, [pc, #32]	@ (800a958 <_ZN13Communication16ToggleDataStreamEb+0x5c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a06      	ldr	r2, [pc, #24]	@ (800a954 <_ZN13Communication16ToggleDataStreamEb+0x58>)
 800a93a:	6313      	str	r3, [r2, #48]	@ 0x30
		SystemConfig.systemMode=SystemModes::TestMode;
 800a93c:	4b05      	ldr	r3, [pc, #20]	@ (800a954 <_ZN13Communication16ToggleDataStreamEb+0x58>)
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
		return;
 800a944:	e003      	b.n	800a94e <_ZN13Communication16ToggleDataStreamEb+0x52>
	}
	SystemConfig.systemMode=SystemModes::EmptyMode;
 800a946:	4b03      	ldr	r3, [pc, #12]	@ (800a954 <_ZN13Communication16ToggleDataStreamEb+0x58>)
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
}
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	200092a8 	.word	0x200092a8
 800a958:	200000cc 	.word	0x200000cc

0800a95c <_ZN13Communication9StartTestEbbbt>:
void Communication::StartTest(bool isStartFirstEmg,bool isStartSecondEmg,bool isStartLoadcell,uint16_t cleanTime){
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	4608      	mov	r0, r1
 800a966:	4611      	mov	r1, r2
 800a968:	461a      	mov	r2, r3
 800a96a:	4603      	mov	r3, r0
 800a96c:	70fb      	strb	r3, [r7, #3]
 800a96e:	460b      	mov	r3, r1
 800a970:	70bb      	strb	r3, [r7, #2]
 800a972:	4613      	mov	r3, r2
 800a974:	707b      	strb	r3, [r7, #1]

	SystemConfig.CleanTime=cleanTime;
 800a976:	4a12      	ldr	r2, [pc, #72]	@ (800a9c0 <_ZN13Communication9StartTestEbbbt+0x64>)
 800a978:	8a3b      	ldrh	r3, [r7, #16]
 800a97a:	8593      	strh	r3, [r2, #44]	@ 0x2c
	StartCleanTask(NULL);
 800a97c:	2000      	movs	r0, #0
 800a97e:	f004 fe8f 	bl	800f6a0 <StartCleanTask>
	ToggleFirstEmg(isStartFirstEmg);
 800a982:	78fb      	ldrb	r3, [r7, #3]
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff fdae 	bl	800a4e8 <_ZN13Communication14ToggleFirstEmgEb>
	ToggleSecondEmg(isStartSecondEmg);
 800a98c:	78bb      	ldrb	r3, [r7, #2]
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff fdd7 	bl	800a544 <_ZN13Communication15ToggleSecondEmgEb>
	ToggleLoadCell(isStartLoadcell);
 800a996:	787b      	ldrb	r3, [r7, #1]
 800a998:	4619      	mov	r1, r3
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f7ff fe00 	bl	800a5a0 <_ZN13Communication14ToggleLoadCellEb>
	ToggleDataStream(true);
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff ffaa 	bl	800a8fc <_ZN13Communication16ToggleDataStreamEb>
	SystemConfig.PocketIndex=0;
 800a9a8:	4b05      	ldr	r3, [pc, #20]	@ (800a9c0 <_ZN13Communication9StartTestEbbbt+0x64>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	66da      	str	r2, [r3, #108]	@ 0x6c
	SystemConfig.systemMode=SystemModes::TestMode;
 800a9ae:	4b04      	ldr	r3, [pc, #16]	@ (800a9c0 <_ZN13Communication9StartTestEbbbt+0x64>)
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
}
 800a9b6:	bf00      	nop
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	200092a8 	.word	0x200092a8

0800a9c4 <_ZN13Communication8StopTestEt>:
void Communication::StopTest(uint16_t cleanTime){
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	807b      	strh	r3, [r7, #2]
	SystemConfig.CleanTime=cleanTime;
 800a9d0:	4a11      	ldr	r2, [pc, #68]	@ (800aa18 <_ZN13Communication8StopTestEt+0x54>)
 800a9d2:	887b      	ldrh	r3, [r7, #2]
 800a9d4:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ToggleDataStream(false);
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f7ff ff8f 	bl	800a8fc <_ZN13Communication16ToggleDataStreamEb>
	ToggleFirstEmg(false);
 800a9de:	2100      	movs	r1, #0
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7ff fd81 	bl	800a4e8 <_ZN13Communication14ToggleFirstEmgEb>
	ToggleSecondEmg(false);
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7ff fdab 	bl	800a544 <_ZN13Communication15ToggleSecondEmgEb>
	StartCleanTask(NULL);
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	f004 fe56 	bl	800f6a0 <StartCleanTask>
	ToggleLoadCell(false);
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff fdd2 	bl	800a5a0 <_ZN13Communication14ToggleLoadCellEb>
	SystemConfig.PocketIndex=0;
 800a9fc:	4b06      	ldr	r3, [pc, #24]	@ (800aa18 <_ZN13Communication8StopTestEt+0x54>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	66da      	str	r2, [r3, #108]	@ 0x6c
	SystemConfig.systemMode=SystemModes::EmptyMode;
 800aa02:	4b05      	ldr	r3, [pc, #20]	@ (800aa18 <_ZN13Communication8StopTestEt+0x54>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
    HAL_NVIC_SystemReset();
 800aa0a:	f7f7 fa9c 	bl	8001f46 <HAL_NVIC_SystemReset>
}
 800aa0e:	bf00      	nop
 800aa10:	3708      	adds	r7, #8
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	200092a8 	.word	0x200092a8

0800aa1c <_ZN13Communication10StartCleanEt>:

void Communication::StartClean(uint16_t cleanTime){
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	460b      	mov	r3, r1
 800aa26:	807b      	strh	r3, [r7, #2]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800aa28:	4b11      	ldr	r3, [pc, #68]	@ (800aa70 <_ZN13Communication10StartCleanEt+0x54>)
 800aa2a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d004      	beq.n	800aa3c <_ZN13Communication10StartCleanEt+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800aa32:	2102      	movs	r1, #2
 800aa34:	2000      	movs	r0, #0
 800aa36:	f003 fbac 	bl	800e192 <ErrorResult>
		return;
 800aa3a:	e015      	b.n	800aa68 <_ZN13Communication10StartCleanEt+0x4c>
	}
	SystemConfig.systemMode=SystemModes::CleanMode;
 800aa3c:	4b0c      	ldr	r3, [pc, #48]	@ (800aa70 <_ZN13Communication10StartCleanEt+0x54>)
 800aa3e:	2203      	movs	r2, #3
 800aa40:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	if(ThreadStorage.CleanThreadId==NULL){
 800aa44:	4b0b      	ldr	r3, [pc, #44]	@ (800aa74 <_ZN13Communication10StartCleanEt+0x58>)
 800aa46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10c      	bne.n	800aa68 <_ZN13Communication10StartCleanEt+0x4c>
		SystemConfig.CleanTime=cleanTime;
 800aa4e:	4a08      	ldr	r2, [pc, #32]	@ (800aa70 <_ZN13Communication10StartCleanEt+0x54>)
 800aa50:	887b      	ldrh	r3, [r7, #2]
 800aa52:	8593      	strh	r3, [r2, #44]	@ 0x2c
		ThreadStorage.CleanThreadId = osThreadNew(StartCleanTask, NULL, &ThreadStorage.CleanThreadAttr);
 800aa54:	4a08      	ldr	r2, [pc, #32]	@ (800aa78 <_ZN13Communication10StartCleanEt+0x5c>)
 800aa56:	2100      	movs	r1, #0
 800aa58:	4808      	ldr	r0, [pc, #32]	@ (800aa7c <_ZN13Communication10StartCleanEt+0x60>)
 800aa5a:	f7fb fc89 	bl	8006370 <osThreadNew>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	4a04      	ldr	r2, [pc, #16]	@ (800aa74 <_ZN13Communication10StartCleanEt+0x58>)
 800aa62:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
		return;
 800aa66:	bf00      	nop
	}
}
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	200092a8 	.word	0x200092a8
 800aa74:	200090b8 	.word	0x200090b8
 800aa78:	20009240 	.word	0x20009240
 800aa7c:	0800f6a1 	.word	0x0800f6a1

0800aa80 <_ZN13Communication14ToggleSafeModeEb>:

void Communication::ToggleSafeMode(bool isStart){
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	70fb      	strb	r3, [r7, #3]

	Statuses.SafeMode=isStart;
 800aa8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ab04 <_ZN13Communication14ToggleSafeModeEb+0x84>)
 800aa8e:	78fb      	ldrb	r3, [r7, #3]
 800aa90:	7193      	strb	r3, [r2, #6]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode && SystemConfig.systemMode!=SystemModes::SafeMode){
 800aa92:	4b1d      	ldr	r3, [pc, #116]	@ (800ab08 <_ZN13Communication14ToggleSafeModeEb+0x88>)
 800aa94:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d009      	beq.n	800aab0 <_ZN13Communication14ToggleSafeModeEb+0x30>
 800aa9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ab08 <_ZN13Communication14ToggleSafeModeEb+0x88>)
 800aa9e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800aaa2:	2b04      	cmp	r3, #4
 800aaa4:	d004      	beq.n	800aab0 <_ZN13Communication14ToggleSafeModeEb+0x30>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800aaa6:	2102      	movs	r1, #2
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	f003 fb72 	bl	800e192 <ErrorResult>
		return;
 800aaae:	e025      	b.n	800aafc <_ZN13Communication14ToggleSafeModeEb+0x7c>
	}
	if(isStart){
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d012      	beq.n	800aadc <_ZN13Communication14ToggleSafeModeEb+0x5c>
		if(ThreadStorage.SafeModeThreadId!=NULL)return;
 800aab6:	4b15      	ldr	r3, [pc, #84]	@ (800ab0c <_ZN13Communication14ToggleSafeModeEb+0x8c>)
 800aab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d11c      	bne.n	800aafa <_ZN13Communication14ToggleSafeModeEb+0x7a>
		SystemConfig.systemMode=SystemModes::SafeMode;
 800aac0:	4b11      	ldr	r3, [pc, #68]	@ (800ab08 <_ZN13Communication14ToggleSafeModeEb+0x88>)
 800aac2:	2204      	movs	r2, #4
 800aac4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
		ThreadStorage.SafeModeThreadId = osThreadNew(StartSafeModeTask, NULL, &ThreadStorage.SafeModeThreadAttr);
 800aac8:	4a11      	ldr	r2, [pc, #68]	@ (800ab10 <_ZN13Communication14ToggleSafeModeEb+0x90>)
 800aaca:	2100      	movs	r1, #0
 800aacc:	4811      	ldr	r0, [pc, #68]	@ (800ab14 <_ZN13Communication14ToggleSafeModeEb+0x94>)
 800aace:	f7fb fc4f 	bl	8006370 <osThreadNew>
 800aad2:	4603      	mov	r3, r0
 800aad4:	4a0d      	ldr	r2, [pc, #52]	@ (800ab0c <_ZN13Communication14ToggleSafeModeEb+0x8c>)
 800aad6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
		return;
 800aada:	e00f      	b.n	800aafc <_ZN13Communication14ToggleSafeModeEb+0x7c>
	}
	SystemConfig.systemMode=SystemModes::EmptyMode;
 800aadc:	4b0a      	ldr	r3, [pc, #40]	@ (800ab08 <_ZN13Communication14ToggleSafeModeEb+0x88>)
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	osThreadTerminate(ThreadStorage.SafeModeThreadId);
 800aae4:	4b09      	ldr	r3, [pc, #36]	@ (800ab0c <_ZN13Communication14ToggleSafeModeEb+0x8c>)
 800aae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fb fcd2 	bl	8006494 <osThreadTerminate>
	ThreadStorage.SafeModeThreadId=NULL;
 800aaf0:	4b06      	ldr	r3, [pc, #24]	@ (800ab0c <_ZN13Communication14ToggleSafeModeEb+0x8c>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800aaf8:	e000      	b.n	800aafc <_ZN13Communication14ToggleSafeModeEb+0x7c>
		if(ThreadStorage.SafeModeThreadId!=NULL)return;
 800aafa:	bf00      	nop
}
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	200092a0 	.word	0x200092a0
 800ab08:	200092a8 	.word	0x200092a8
 800ab0c:	200090b8 	.word	0x200090b8
 800ab10:	20009264 	.word	0x20009264
 800ab14:	0800f8c9 	.word	0x0800f8c9

0800ab18 <_ZN13Communication15LoadcellAverageEv>:

void Communication::LoadcellAverage(){
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800ab20:	4b0c      	ldr	r3, [pc, #48]	@ (800ab54 <_ZN13Communication15LoadcellAverageEv+0x3c>)
 800ab22:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d004      	beq.n	800ab34 <_ZN13Communication15LoadcellAverageEv+0x1c>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800ab2a:	2102      	movs	r1, #2
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	f003 fb30 	bl	800e192 <ErrorResult>
		return;
 800ab32:	e00b      	b.n	800ab4c <_ZN13Communication15LoadcellAverageEv+0x34>
	}
	SystemConfig.systemMode=SystemModes::CalibrationMode;
 800ab34:	4b07      	ldr	r3, [pc, #28]	@ (800ab54 <_ZN13Communication15LoadcellAverageEv+0x3c>)
 800ab36:	2202      	movs	r2, #2
 800ab38:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	ThreadStorage.LoadcellAverageThreadId = osThreadNew(StartLoadcellAverageTask, NULL, &ThreadStorage.LoadcellAverageThreadAttr);
 800ab3c:	4a06      	ldr	r2, [pc, #24]	@ (800ab58 <_ZN13Communication15LoadcellAverageEv+0x40>)
 800ab3e:	2100      	movs	r1, #0
 800ab40:	4806      	ldr	r0, [pc, #24]	@ (800ab5c <_ZN13Communication15LoadcellAverageEv+0x44>)
 800ab42:	f7fb fc15 	bl	8006370 <osThreadNew>
 800ab46:	4603      	mov	r3, r0
 800ab48:	4a05      	ldr	r2, [pc, #20]	@ (800ab60 <_ZN13Communication15LoadcellAverageEv+0x48>)
 800ab4a:	6793      	str	r3, [r2, #120]	@ 0x78
}
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	200092a8 	.word	0x200092a8
 800ab58:	200091d4 	.word	0x200091d4
 800ab5c:	0800f1c9 	.word	0x0800f1c9
 800ab60:	200090b8 	.word	0x200090b8

0800ab64 <_ZN13Communication25LoadcellVolumeCalibrationEt>:

void Communication::LoadcellVolumeCalibration(uint16_t weight){
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	807b      	strh	r3, [r7, #2]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800ab70:	4b12      	ldr	r3, [pc, #72]	@ (800abbc <_ZN13Communication25LoadcellVolumeCalibrationEt+0x58>)
 800ab72:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d004      	beq.n	800ab84 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800ab7a:	2102      	movs	r1, #2
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	f003 fb08 	bl	800e192 <ErrorResult>
		return;
 800ab82:	e017      	b.n	800abb4 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x50>
	}
	SystemConfig.systemMode=SystemModes::CalibrationMode;
 800ab84:	4b0d      	ldr	r3, [pc, #52]	@ (800abbc <_ZN13Communication25LoadcellVolumeCalibrationEt+0x58>)
 800ab86:	2202      	movs	r2, #2
 800ab88:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	SystemConfig.VolumeRate=1;
 800ab8c:	4b0b      	ldr	r3, [pc, #44]	@ (800abbc <_ZN13Communication25LoadcellVolumeCalibrationEt+0x58>)
 800ab8e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ab92:	61da      	str	r2, [r3, #28]
	SystemConfig.CalibrationWeight=weight;
 800ab94:	887b      	ldrh	r3, [r7, #2]
 800ab96:	ee07 3a90 	vmov	s15, r3
 800ab9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9e:	4b07      	ldr	r3, [pc, #28]	@ (800abbc <_ZN13Communication25LoadcellVolumeCalibrationEt+0x58>)
 800aba0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	ThreadStorage.CalibrationVolumeThreadId = osThreadNew(StartCalibrationVolumeTask, NULL, &ThreadStorage.CalibrationVolumeThreadAttr);
 800aba4:	4a06      	ldr	r2, [pc, #24]	@ (800abc0 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x5c>)
 800aba6:	2100      	movs	r1, #0
 800aba8:	4806      	ldr	r0, [pc, #24]	@ (800abc4 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800abaa:	f7fb fbe1 	bl	8006370 <osThreadNew>
 800abae:	4603      	mov	r3, r0
 800abb0:	4a05      	ldr	r2, [pc, #20]	@ (800abc8 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x64>)
 800abb2:	67d3      	str	r3, [r2, #124]	@ 0x7c
}
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	200092a8 	.word	0x200092a8
 800abc0:	200091f8 	.word	0x200091f8
 800abc4:	0800f35d 	.word	0x0800f35d
 800abc8:	200090b8 	.word	0x200090b8

0800abcc <_ZN13Communication23LoadcellFlowCalibrationEt>:

void Communication::LoadcellFlowCalibration(uint16_t flow){
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	807b      	strh	r3, [r7, #2]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800abd8:	4b12      	ldr	r3, [pc, #72]	@ (800ac24 <_ZN13Communication23LoadcellFlowCalibrationEt+0x58>)
 800abda:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d004      	beq.n	800abec <_ZN13Communication23LoadcellFlowCalibrationEt+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800abe2:	2102      	movs	r1, #2
 800abe4:	2000      	movs	r0, #0
 800abe6:	f003 fad4 	bl	800e192 <ErrorResult>
		return;
 800abea:	e018      	b.n	800ac1e <_ZN13Communication23LoadcellFlowCalibrationEt+0x52>
	}
	SystemConfig.systemMode=SystemModes::CalibrationMode;
 800abec:	4b0d      	ldr	r3, [pc, #52]	@ (800ac24 <_ZN13Communication23LoadcellFlowCalibrationEt+0x58>)
 800abee:	2202      	movs	r2, #2
 800abf0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	SystemConfig.FlowRate=1;
 800abf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ac24 <_ZN13Communication23LoadcellFlowCalibrationEt+0x58>)
 800abf6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800abfa:	621a      	str	r2, [r3, #32]
	SystemConfig.CalibrationFlow=flow;
 800abfc:	887b      	ldrh	r3, [r7, #2]
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac06:	4b07      	ldr	r3, [pc, #28]	@ (800ac24 <_ZN13Communication23LoadcellFlowCalibrationEt+0x58>)
 800ac08:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	ThreadStorage.CalibrationFlowThreadId = osThreadNew(StartCalibrationFlowTask, NULL, &ThreadStorage.CalibrationFlowThreadAttr);
 800ac0c:	4a06      	ldr	r2, [pc, #24]	@ (800ac28 <_ZN13Communication23LoadcellFlowCalibrationEt+0x5c>)
 800ac0e:	2100      	movs	r1, #0
 800ac10:	4806      	ldr	r0, [pc, #24]	@ (800ac2c <_ZN13Communication23LoadcellFlowCalibrationEt+0x60>)
 800ac12:	f7fb fbad 	bl	8006370 <osThreadNew>
 800ac16:	4603      	mov	r3, r0
 800ac18:	4a05      	ldr	r2, [pc, #20]	@ (800ac30 <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800ac1a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	200092a8 	.word	0x200092a8
 800ac28:	2000921c 	.word	0x2000921c
 800ac2c:	0800f505 	.word	0x0800f505
 800ac30:	200090b8 	.word	0x200090b8

0800ac34 <_ZN12FlashManageraSERKS_>:
enum FlashStatus {
	Success,
	Error,
	NotBackup
};
class FlashManager {
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	605a      	str	r2, [r3, #4]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	689a      	ldr	r2, [r3, #8]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	609a      	str	r2, [r3, #8]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	7b1a      	ldrb	r2, [r3, #12]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	731a      	strb	r2, [r3, #12]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	7b5a      	ldrb	r2, [r3, #13]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	735a      	strb	r2, [r3, #13]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	7b9a      	ldrb	r2, [r3, #14]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	739a      	strb	r2, [r3, #14]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	7bda      	ldrb	r2, [r3, #15]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	73da      	strb	r2, [r3, #15]
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	7c1a      	ldrb	r2, [r3, #16]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	741a      	strb	r2, [r3, #16]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	7c5a      	ldrb	r2, [r3, #17]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	745a      	strb	r2, [r3, #17]
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	7c9a      	ldrb	r2, [r3, #18]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	749a      	strb	r2, [r3, #18]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	7cda      	ldrb	r2, [r3, #19]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	74da      	strb	r2, [r3, #19]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	7d1a      	ldrb	r2, [r3, #20]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	751a      	strb	r2, [r3, #20]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	7d5a      	ldrb	r2, [r3, #21]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	755a      	strb	r2, [r3, #21]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	7d9a      	ldrb	r2, [r3, #22]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	759a      	strb	r2, [r3, #22]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	7dda      	ldrb	r2, [r3, #23]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	75da      	strb	r2, [r3, #23]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	7e1a      	ldrb	r2, [r3, #24]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	761a      	strb	r2, [r3, #24]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	7e5a      	ldrb	r2, [r3, #25]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	765a      	strb	r2, [r3, #25]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4618      	mov	r0, r3
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <_ZN13Communication15SetFlashManagerE12FlashManager>:

void Communication::SetFlashManager(FlashManager flashManager){
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
	FMI=flashManager;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	3304      	adds	r3, #4
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff ffa9 	bl	800ac34 <_ZN12FlashManageraSERKS_>
}
 800ace2:	bf00      	nop
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <_ZN3EmgC1Ev>:
int firstEmgDataLen=0;
int secondEmgDataLen=0;



Emg::Emg() {
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	4a0e      	ldr	r2, [pc, #56]	@ (800ad30 <_ZN3EmgC1Ev+0x44>)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ad00:	461a      	mov	r2, r3
 800ad02:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800ad06:	6393      	str	r3, [r2, #56]	@ 0x38
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ad0e:	461a      	mov	r2, r3
 800ad10:	2300      	movs	r3, #0
 800ad12:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	6413      	str	r3, [r2, #64]	@ 0x40
	// TODO Auto-generated constructor stub

}
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4618      	mov	r0, r3
 800ad24:	370c      	adds	r7, #12
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	08010d80 	.word	0x08010d80

0800ad34 <_ZN3EmgD1Ev>:

Emg::~Emg() {
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	4a04      	ldr	r2, [pc, #16]	@ (800ad50 <_ZN3EmgD1Ev+0x1c>)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4618      	mov	r0, r3
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	08010d80 	.word	0x08010d80

0800ad54 <_ZN3EmgD0Ev>:
Emg::~Emg() {
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
}
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff ffe9 	bl	800ad34 <_ZN3EmgD1Ev>
 800ad62:	f242 0144 	movw	r1, #8260	@ 0x2044
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f004 ff08 	bl	800fb7c <_ZdlPvj>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3708      	adds	r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
	...

0800ad78 <_ZN3Emg12FirstEmgReadEb>:
void Emg::FirstEmgRead(bool useBuffer){
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	70fb      	strb	r3, [r7, #3]

	FirstEmgReadFromSPI(DATA_CH0_0);
 800ad84:	2101      	movs	r1, #1
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f988 	bl	800b09c <_ZN3Emg19FirstEmgReadFromSPIEh>
	ReadFirstEmgValueArray[0] = FirstEmgReadSPIValue[0];
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	7f1b      	ldrb	r3, [r3, #28]
 800ad90:	461a      	mov	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	605a      	str	r2, [r3, #4]

	FirstEmgReadFromSPI(DATA_CH0_1);
 800ad96:	2103      	movs	r1, #3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f97f 	bl	800b09c <_ZN3Emg19FirstEmgReadFromSPIEh>
	ReadFirstEmgValueArray[1] = FirstEmgReadSPIValue[0];
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	7f1b      	ldrb	r3, [r3, #28]
 800ada2:	461a      	mov	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	609a      	str	r2, [r3, #8]

	FirstEmgReadFromSPI(DATA_CH0_2);
 800ada8:	2105      	movs	r1, #5
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f976 	bl	800b09c <_ZN3Emg19FirstEmgReadFromSPIEh>
	ReadFirstEmgValueArray[2] = FirstEmgReadSPIValue[0];
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	7f1b      	ldrb	r3, [r3, #28]
 800adb4:	461a      	mov	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	60da      	str	r2, [r3, #12]

	FirstEmgValue = (ReadFirstEmgValueArray[1] + (ReadFirstEmgValueArray[0] << 8));
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	689a      	ldr	r2, [r3, #8]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	021b      	lsls	r3, r3, #8
 800adc4:	441a      	add	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	625a      	str	r2, [r3, #36]	@ 0x24
	NonFilterFirstEmg=FirstEmgValue;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	621a      	str	r2, [r3, #32]
	uint32_t filteredValue = FirstEmgMovingAverageFilter(FirstEmgValue);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add6:	4619      	mov	r1, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f9c5 	bl	800b168 <_ZN3Emg27FirstEmgMovingAverageFilterEm>
 800adde:	60f8      	str	r0, [r7, #12]
	Debugger.FirstEmg=filteredValue;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	4b1f      	ldr	r3, [pc, #124]	@ (800ae64 <_ZN3Emg12FirstEmgReadEb+0xec>)
 800ade6:	851a      	strh	r2, [r3, #40]	@ 0x28
	FirstEmgValue=filteredValue;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	625a      	str	r2, [r3, #36]	@ 0x24
	if(useBuffer){
 800adee:	78fb      	ldrb	r3, [r7, #3]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d033      	beq.n	800ae5c <_ZN3Emg12FirstEmgReadEb+0xe4>
		FirstEmgBufferLen%=1024;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800adfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adfc:	425a      	negs	r2, r3
 800adfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae02:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ae06:	bf58      	it	pl
 800ae08:	4253      	negpl	r3, r2
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800ae10:	6313      	str	r3, [r2, #48]	@ 0x30
	    FirstEmgBuffer[FirstEmgBufferLen]=(filteredValue >> 8) & 0xFF;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	0a19      	lsrs	r1, r3, #8
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ae1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae1e:	b2c9      	uxtb	r1, r1
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	320c      	adds	r2, #12
 800ae24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    FirstEmgBuffer[FirstEmgBufferLen+1]=(filteredValue) & 0xFF;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ae2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae30:	1c5a      	adds	r2, r3, #1
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	b2d9      	uxtb	r1, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	320c      	adds	r2, #12
 800ae3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    FirstEmgBufferLen+=2;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ae44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae46:	3302      	adds	r3, #2
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800ae4e:	6313      	str	r3, [r2, #48]	@ 0x30
	    Debugger.FirstEmgBufferLen=FirstEmgBufferLen;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ae56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae58:	4a02      	ldr	r2, [pc, #8]	@ (800ae64 <_ZN3Emg12FirstEmgReadEb+0xec>)
 800ae5a:	6093      	str	r3, [r2, #8]
	}
}
 800ae5c:	bf00      	nop
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	20009320 	.word	0x20009320

0800ae68 <_ZN3Emg13SecondEmgReadEb>:

void Emg::SecondEmgRead(bool useBuffer){
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	70fb      	strb	r3, [r7, #3]
	SecondEmgReadFromSPI(DATA_CH0_0);
 800ae74:	2101      	movs	r1, #1
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f942 	bl	800b100 <_ZN3Emg20SecondEmgReadFromSPIEh>
	ReadSecondEmgValueArray[0] = SecondEmgReadSPIValue[0];
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	7f5b      	ldrb	r3, [r3, #29]
 800ae80:	461a      	mov	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	611a      	str	r2, [r3, #16]

	SecondEmgReadFromSPI(DATA_CH0_1);
 800ae86:	2103      	movs	r1, #3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 f939 	bl	800b100 <_ZN3Emg20SecondEmgReadFromSPIEh>
	ReadSecondEmgValueArray[1] = SecondEmgReadSPIValue[0];
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	7f5b      	ldrb	r3, [r3, #29]
 800ae92:	461a      	mov	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	615a      	str	r2, [r3, #20]

	SecondEmgReadFromSPI(DATA_CH0_2);
 800ae98:	2105      	movs	r1, #5
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f930 	bl	800b100 <_ZN3Emg20SecondEmgReadFromSPIEh>
	ReadSecondEmgValueArray[2] = SecondEmgReadSPIValue[0];
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	7f5b      	ldrb	r3, [r3, #29]
 800aea4:	461a      	mov	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	619a      	str	r2, [r3, #24]

	SecondEmgValue = (ReadSecondEmgValueArray[1] + (ReadSecondEmgValueArray[0] << 8));
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	695a      	ldr	r2, [r3, #20]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	021b      	lsls	r3, r3, #8
 800aeb4:	441a      	add	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	62da      	str	r2, [r3, #44]	@ 0x2c
	NonFilterSecondEmg=SecondEmgValue;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	629a      	str	r2, [r3, #40]	@ 0x28
	uint32_t filteredValue = SecondEmgMovingAverageFilter(SecondEmgValue);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f9fd 	bl	800b2c8 <_ZN3Emg28SecondEmgMovingAverageFilterEm>
 800aece:	60f8      	str	r0, [r7, #12]
	Debugger.SecondEmg=filteredValue;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	4b20      	ldr	r3, [pc, #128]	@ (800af58 <_ZN3Emg13SecondEmgReadEb+0xf0>)
 800aed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
	SecondEmgValue=filteredValue;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	62da      	str	r2, [r3, #44]	@ 0x2c
	if(useBuffer){
 800aede:	78fb      	ldrb	r3, [r7, #3]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d035      	beq.n	800af50 <_ZN3Emg13SecondEmgReadEb+0xe8>
		SecondEmgBufferLen%=1024;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800aeea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeec:	425a      	negs	r2, r3
 800aeee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aef2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800aef6:	bf58      	it	pl
 800aef8:	4253      	negpl	r3, r2
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800af00:	6353      	str	r3, [r2, #52]	@ 0x34
		SecondEmgBuffer[SecondEmgBufferLen]=(filteredValue >> 8) & 0xFF;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	0a19      	lsrs	r1, r3, #8
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800af0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af0e:	b2c9      	uxtb	r1, r1
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 800af16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    SecondEmgBuffer[SecondEmgBufferLen+1]=(filteredValue) & 0xFF;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800af20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	b2d9      	uxtb	r1, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 800af2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    SecondEmgBufferLen+=2;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800af38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af3a:	3302      	adds	r3, #2
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800af42:	6353      	str	r3, [r2, #52]	@ 0x34
	    Debugger.SecondEmgBufferLen=SecondEmgBufferLen;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800af4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af4c:	4a02      	ldr	r2, [pc, #8]	@ (800af58 <_ZN3Emg13SecondEmgReadEb+0xf0>)
 800af4e:	60d3      	str	r3, [r2, #12]
	}
}
 800af50:	bf00      	nop
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	20009320 	.word	0x20009320

0800af5c <_ZN3Emg13FirstEmgSetupEv>:

void Emg::FirstEmgSetup(void){
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
	FirstEmgWriteToSPI(EMG_PHASE_ADDRESS, EMG_PHASE_VALUE);
 800af64:	2200      	movs	r2, #0
 800af66:	210e      	movs	r1, #14
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 f839 	bl	800afe0 <_ZN3Emg18FirstEmgWriteToSPIEtt>
	FirstEmgWriteToSPI(EMG_GAIN_ADDRESS, EMG_GAIN_VALUE);
 800af6e:	2200      	movs	r2, #0
 800af70:	2110      	movs	r1, #16
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f834 	bl	800afe0 <_ZN3Emg18FirstEmgWriteToSPIEtt>
	FirstEmgWriteToSPI(EMG_STATUS_COM_ADDRESS, EMG_STATUS_COM_VALUE);
 800af78:	2203      	movs	r2, #3
 800af7a:	2112      	movs	r1, #18
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f82f 	bl	800afe0 <_ZN3Emg18FirstEmgWriteToSPIEtt>
	FirstEmgWriteToSPI(EMG_CONFIG_1_ADDRESS, EMG_CONFIG_1_VALUE);
 800af82:	2210      	movs	r2, #16
 800af84:	2114      	movs	r1, #20
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f82a 	bl	800afe0 <_ZN3Emg18FirstEmgWriteToSPIEtt>
	FirstEmgWriteToSPI(EMG_CONFIG_2_ADDRESS, EMG_CONFIG_2_VALUE);
 800af8c:	220c      	movs	r2, #12
 800af8e:	2116      	movs	r1, #22
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f825 	bl	800afe0 <_ZN3Emg18FirstEmgWriteToSPIEtt>
}
 800af96:	bf00      	nop
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <_ZN3Emg14SecondEmgSetupEv>:

void Emg::SecondEmgSetup(void){
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b082      	sub	sp, #8
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]

	SecondEmgWriteToSPI(EMG_PHASE_ADDRESS, EMG_PHASE_VALUE);
 800afa6:	2200      	movs	r2, #0
 800afa8:	210e      	movs	r1, #14
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f846 	bl	800b03c <_ZN3Emg19SecondEmgWriteToSPIEtt>
	SecondEmgWriteToSPI(EMG_GAIN_ADDRESS, EMG_GAIN_VALUE);
 800afb0:	2200      	movs	r2, #0
 800afb2:	2110      	movs	r1, #16
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f841 	bl	800b03c <_ZN3Emg19SecondEmgWriteToSPIEtt>
	SecondEmgWriteToSPI(EMG_STATUS_COM_ADDRESS, EMG_STATUS_COM_VALUE);
 800afba:	2203      	movs	r2, #3
 800afbc:	2112      	movs	r1, #18
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f83c 	bl	800b03c <_ZN3Emg19SecondEmgWriteToSPIEtt>
	SecondEmgWriteToSPI(EMG_CONFIG_1_ADDRESS, EMG_CONFIG_1_VALUE);
 800afc4:	2210      	movs	r2, #16
 800afc6:	2114      	movs	r1, #20
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f837 	bl	800b03c <_ZN3Emg19SecondEmgWriteToSPIEtt>
	SecondEmgWriteToSPI(EMG_CONFIG_2_ADDRESS, EMG_CONFIG_2_VALUE);
 800afce:	220c      	movs	r2, #12
 800afd0:	2116      	movs	r1, #22
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f832 	bl	800b03c <_ZN3Emg19SecondEmgWriteToSPIEtt>
}
 800afd8:	bf00      	nop
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <_ZN3Emg18FirstEmgWriteToSPIEtt>:

void Emg::FirstEmgWriteToSPI(uint16_t emgSPIAddress, uint16_t emgValue){
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	460b      	mov	r3, r1
 800afea:	807b      	strh	r3, [r7, #2]
 800afec:	4613      	mov	r3, r2
 800afee:	803b      	strh	r3, [r7, #0]
	uint8_t EmgWriteArray[2];
	EmgWriteArray[0] = emgSPIAddress;
 800aff0:	887b      	ldrh	r3, [r7, #2]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	733b      	strb	r3, [r7, #12]
	EmgWriteArray[1] = emgValue;
 800aff6:	883b      	ldrh	r3, [r7, #0]
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800affc:	2200      	movs	r2, #0
 800affe:	2110      	movs	r1, #16
 800b000:	480b      	ldr	r0, [pc, #44]	@ (800b030 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x50>)
 800b002:	f7f8 f827 	bl	8003054 <HAL_GPIO_WritePin>
	Debugger.FirstEmgWriteStatus=HAL_SPI_Transmit(EMG_SPI_CHANNEL, EmgWriteArray, 2, 100);
 800b006:	f107 010c 	add.w	r1, r7, #12
 800b00a:	2364      	movs	r3, #100	@ 0x64
 800b00c:	2202      	movs	r2, #2
 800b00e:	4809      	ldr	r0, [pc, #36]	@ (800b034 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x54>)
 800b010:	f7f8 fd1b 	bl	8003a4a <HAL_SPI_Transmit>
 800b014:	4603      	mov	r3, r0
 800b016:	461a      	mov	r2, r3
 800b018:	4b07      	ldr	r3, [pc, #28]	@ (800b038 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x58>)
 800b01a:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800b01e:	2201      	movs	r2, #1
 800b020:	2110      	movs	r1, #16
 800b022:	4803      	ldr	r0, [pc, #12]	@ (800b030 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x50>)
 800b024:	f7f8 f816 	bl	8003054 <HAL_GPIO_WritePin>
}
 800b028:	bf00      	nop
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	40020000 	.word	0x40020000
 800b034:	200000d0 	.word	0x200000d0
 800b038:	20009320 	.word	0x20009320

0800b03c <_ZN3Emg19SecondEmgWriteToSPIEtt>:

void Emg::SecondEmgWriteToSPI(uint16_t emgSPIAddress, uint16_t emgValue){
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	807b      	strh	r3, [r7, #2]
 800b048:	4613      	mov	r3, r2
 800b04a:	803b      	strh	r3, [r7, #0]
	uint8_t EmgWriteArray[2];
	EmgWriteArray[0] = emgSPIAddress;
 800b04c:	887b      	ldrh	r3, [r7, #2]
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	733b      	strb	r3, [r7, #12]
	EmgWriteArray[1] = emgValue;
 800b052:	883b      	ldrh	r3, [r7, #0]
 800b054:	b2db      	uxtb	r3, r3
 800b056:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800b058:	2200      	movs	r2, #0
 800b05a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b05e:	480c      	ldr	r0, [pc, #48]	@ (800b090 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x54>)
 800b060:	f7f7 fff8 	bl	8003054 <HAL_GPIO_WritePin>
	Debugger.SecondEmgWriteStatus=HAL_SPI_Transmit(EMG2_SPI_CHANNEL, EmgWriteArray, 2, 100);
 800b064:	f107 010c 	add.w	r1, r7, #12
 800b068:	2364      	movs	r3, #100	@ 0x64
 800b06a:	2202      	movs	r2, #2
 800b06c:	4809      	ldr	r0, [pc, #36]	@ (800b094 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x58>)
 800b06e:	f7f8 fcec 	bl	8003a4a <HAL_SPI_Transmit>
 800b072:	4603      	mov	r3, r0
 800b074:	461a      	mov	r2, r3
 800b076:	4b08      	ldr	r3, [pc, #32]	@ (800b098 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x5c>)
 800b078:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800b07c:	2201      	movs	r2, #1
 800b07e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b082:	4803      	ldr	r0, [pc, #12]	@ (800b090 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x54>)
 800b084:	f7f7 ffe6 	bl	8003054 <HAL_GPIO_WritePin>
}
 800b088:	bf00      	nop
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	40020400 	.word	0x40020400
 800b094:	20000128 	.word	0x20000128
 800b098:	20009320 	.word	0x20009320

0800b09c <_ZN3Emg19FirstEmgReadFromSPIEh>:

void Emg::FirstEmgReadFromSPI(uint8_t emgValue){
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	2110      	movs	r1, #16
 800b0ac:	4811      	ldr	r0, [pc, #68]	@ (800b0f4 <_ZN3Emg19FirstEmgReadFromSPIEh+0x58>)
 800b0ae:	f7f7 ffd1 	bl	8003054 <HAL_GPIO_WritePin>
	Debugger.FirstEmgWriteStatus=HAL_SPI_Transmit_DMA(EMG_SPI_CHANNEL, &emgValue, 1);
 800b0b2:	1cfb      	adds	r3, r7, #3
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	480f      	ldr	r0, [pc, #60]	@ (800b0f8 <_ZN3Emg19FirstEmgReadFromSPIEh+0x5c>)
 800b0ba:	f7f8 fe0b 	bl	8003cd4 <HAL_SPI_Transmit_DMA>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b0fc <_ZN3Emg19FirstEmgReadFromSPIEh+0x60>)
 800b0c4:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	Debugger.FirstEmgReadStatus=HAL_SPI_Receive_DMA(EMG_SPI_CHANNEL, FirstEmgReadSPIValue, 1);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	331c      	adds	r3, #28
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	4809      	ldr	r0, [pc, #36]	@ (800b0f8 <_ZN3Emg19FirstEmgReadFromSPIEh+0x5c>)
 800b0d2:	f7f8 feb1 	bl	8003e38 <HAL_SPI_Receive_DMA>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	461a      	mov	r2, r3
 800b0da:	4b08      	ldr	r3, [pc, #32]	@ (800b0fc <_ZN3Emg19FirstEmgReadFromSPIEh+0x60>)
 800b0dc:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	2110      	movs	r1, #16
 800b0e4:	4803      	ldr	r0, [pc, #12]	@ (800b0f4 <_ZN3Emg19FirstEmgReadFromSPIEh+0x58>)
 800b0e6:	f7f7 ffb5 	bl	8003054 <HAL_GPIO_WritePin>
}
 800b0ea:	bf00      	nop
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	40020000 	.word	0x40020000
 800b0f8:	200000d0 	.word	0x200000d0
 800b0fc:	20009320 	.word	0x20009320

0800b100 <_ZN3Emg20SecondEmgReadFromSPIEh>:

void Emg::SecondEmgReadFromSPI(uint8_t emgValue){
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800b10c:	2200      	movs	r2, #0
 800b10e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b112:	4812      	ldr	r0, [pc, #72]	@ (800b15c <_ZN3Emg20SecondEmgReadFromSPIEh+0x5c>)
 800b114:	f7f7 ff9e 	bl	8003054 <HAL_GPIO_WritePin>
	Debugger.SecondEmgWriteStatus=HAL_SPI_Transmit_DMA(EMG2_SPI_CHANNEL, &emgValue, 1);
 800b118:	1cfb      	adds	r3, r7, #3
 800b11a:	2201      	movs	r2, #1
 800b11c:	4619      	mov	r1, r3
 800b11e:	4810      	ldr	r0, [pc, #64]	@ (800b160 <_ZN3Emg20SecondEmgReadFromSPIEh+0x60>)
 800b120:	f7f8 fdd8 	bl	8003cd4 <HAL_SPI_Transmit_DMA>
 800b124:	4603      	mov	r3, r0
 800b126:	461a      	mov	r2, r3
 800b128:	4b0e      	ldr	r3, [pc, #56]	@ (800b164 <_ZN3Emg20SecondEmgReadFromSPIEh+0x64>)
 800b12a:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	Debugger.SecondEmgReadStatus=HAL_SPI_Receive_DMA(EMG2_SPI_CHANNEL, SecondEmgReadSPIValue, 1);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	331d      	adds	r3, #29
 800b132:	2201      	movs	r2, #1
 800b134:	4619      	mov	r1, r3
 800b136:	480a      	ldr	r0, [pc, #40]	@ (800b160 <_ZN3Emg20SecondEmgReadFromSPIEh+0x60>)
 800b138:	f7f8 fe7e 	bl	8003e38 <HAL_SPI_Receive_DMA>
 800b13c:	4603      	mov	r3, r0
 800b13e:	461a      	mov	r2, r3
 800b140:	4b08      	ldr	r3, [pc, #32]	@ (800b164 <_ZN3Emg20SecondEmgReadFromSPIEh+0x64>)
 800b142:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800b146:	2201      	movs	r2, #1
 800b148:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b14c:	4803      	ldr	r0, [pc, #12]	@ (800b15c <_ZN3Emg20SecondEmgReadFromSPIEh+0x5c>)
 800b14e:	f7f7 ff81 	bl	8003054 <HAL_GPIO_WritePin>
}
 800b152:	bf00      	nop
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	40020400 	.word	0x40020400
 800b160:	20000128 	.word	0x20000128
 800b164:	20009320 	.word	0x20009320

0800b168 <_ZN3Emg27FirstEmgMovingAverageFilterEm>:

uint32_t Emg::FirstEmgMovingAverageFilter(uint32_t newSample){
 800b168:	b5b0      	push	{r4, r5, r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
	if(SystemConfig.FirstEmgZeroMaxTrim==0) return newSample;
 800b172:	4b4f      	ldr	r3, [pc, #316]	@ (800b2b0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800b174:	895b      	ldrh	r3, [r3, #10]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x16>
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	e08f      	b.n	800b29e <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x136>

	newVal=(newSample-65536)*-1;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800b184:	4a4b      	ldr	r2, [pc, #300]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b186:	6013      	str	r3, [r2, #0]
	Debugger.FirstEmgNewVal=newVal;
 800b188:	4b4a      	ldr	r3, [pc, #296]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	4b4a      	ldr	r3, [pc, #296]	@ (800b2b8 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x150>)
 800b190:	859a      	strh	r2, [r3, #44]	@ 0x2c
	uint16_t avgTrim=(SystemConfig.FirstEmgZeroMaxTrim+SystemConfig.FirstEmgZeroMinTrim)/2;
 800b192:	4b47      	ldr	r3, [pc, #284]	@ (800b2b0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800b194:	895b      	ldrh	r3, [r3, #10]
 800b196:	461a      	mov	r2, r3
 800b198:	4b45      	ldr	r3, [pc, #276]	@ (800b2b0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800b19a:	899b      	ldrh	r3, [r3, #12]
 800b19c:	4413      	add	r3, r2
 800b19e:	0fda      	lsrs	r2, r3, #31
 800b1a0:	4413      	add	r3, r2
 800b1a2:	105b      	asrs	r3, r3, #1
 800b1a4:	81fb      	strh	r3, [r7, #14]
	if(newVal<SystemConfig.FirstEmgZeroMaxTrim && newVal>SystemConfig.FirstEmgZeroMinTrim){
 800b1a6:	4b42      	ldr	r3, [pc, #264]	@ (800b2b0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800b1a8:	895b      	ldrh	r3, [r3, #10]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	4b41      	ldr	r3, [pc, #260]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d909      	bls.n	800b1c8 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x60>
 800b1b4:	4b3e      	ldr	r3, [pc, #248]	@ (800b2b0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800b1b6:	899b      	ldrh	r3, [r3, #12]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	4b3e      	ldr	r3, [pc, #248]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d202      	bcs.n	800b1c8 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x60>
		newVal=avgTrim;
 800b1c2:	89fb      	ldrh	r3, [r7, #14]
 800b1c4:	4a3b      	ldr	r2, [pc, #236]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1c6:	6013      	str	r3, [r2, #0]
	}
	if(newVal<avgTrim){
 800b1c8:	89fa      	ldrh	r2, [r7, #14]
 800b1ca:	4b3a      	ldr	r3, [pc, #232]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d907      	bls.n	800b1e2 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x7a>
		newVal=avgTrim+(avgTrim-newVal);
 800b1d2:	89fa      	ldrh	r2, [r7, #14]
 800b1d4:	89f9      	ldrh	r1, [r7, #14]
 800b1d6:	4b37      	ldr	r3, [pc, #220]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	1acb      	subs	r3, r1, r3
 800b1dc:	4413      	add	r3, r2
 800b1de:	4a35      	ldr	r2, [pc, #212]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1e0:	6013      	str	r3, [r2, #0]
	}
	newVal-=avgTrim;
 800b1e2:	4b34      	ldr	r3, [pc, #208]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	89fb      	ldrh	r3, [r7, #14]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	4a32      	ldr	r2, [pc, #200]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1ec:	6013      	str	r3, [r2, #0]
	Debugger.FirstEmgNewValAfter=newVal;
 800b1ee:	4b31      	ldr	r3, [pc, #196]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	4b30      	ldr	r3, [pc, #192]	@ (800b2b8 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x150>)
 800b1f6:	861a      	strh	r2, [r3, #48]	@ 0x30
	if(newVal>SystemConfig.FirstEmgMaxTrim){
 800b1f8:	4b2d      	ldr	r3, [pc, #180]	@ (800b2b0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800b1fa:	891b      	ldrh	r3, [r3, #8]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	4b2d      	ldr	r3, [pc, #180]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	429a      	cmp	r2, r3
 800b204:	d204      	bcs.n	800b210 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0xa8>
		return LastFirstEmg;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b20c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b20e:	e046      	b.n	800b29e <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x136>
	}
	newVal=(LastFirstEmg*99.5+newVal*0.5)/100;  //newVal=(LastFirstEmg*990+newVal*10)/1000;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b218:	4618      	mov	r0, r3
 800b21a:	f7f5 f96b 	bl	80004f4 <__aeabi_ui2d>
 800b21e:	a322      	add	r3, pc, #136	@ (adr r3, 800b2a8 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x140>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f5 f9e0 	bl	80005e8 <__aeabi_dmul>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	4614      	mov	r4, r2
 800b22e:	461d      	mov	r5, r3
 800b230:	4b20      	ldr	r3, [pc, #128]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4618      	mov	r0, r3
 800b236:	f7f5 f95d 	bl	80004f4 <__aeabi_ui2d>
 800b23a:	f04f 0200 	mov.w	r2, #0
 800b23e:	4b1f      	ldr	r3, [pc, #124]	@ (800b2bc <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x154>)
 800b240:	f7f5 f9d2 	bl	80005e8 <__aeabi_dmul>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	4620      	mov	r0, r4
 800b24a:	4629      	mov	r1, r5
 800b24c:	f7f5 f816 	bl	800027c <__adddf3>
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	4610      	mov	r0, r2
 800b256:	4619      	mov	r1, r3
 800b258:	f04f 0200 	mov.w	r2, #0
 800b25c:	4b18      	ldr	r3, [pc, #96]	@ (800b2c0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x158>)
 800b25e:	f7f5 faed 	bl	800083c <__aeabi_ddiv>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	4610      	mov	r0, r2
 800b268:	4619      	mov	r1, r3
 800b26a:	f7f5 fbcf 	bl	8000a0c <__aeabi_d2uiz>
 800b26e:	4603      	mov	r3, r0
 800b270:	4a10      	ldr	r2, [pc, #64]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b272:	6013      	str	r3, [r2, #0]
	LastFirstEmg=newVal;
 800b274:	4b0f      	ldr	r3, [pc, #60]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b27e:	63d3      	str	r3, [r2, #60]	@ 0x3c
	newVal=newVal-50; //250
 800b280:	4b0c      	ldr	r3, [pc, #48]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3b32      	subs	r3, #50	@ 0x32
 800b286:	4a0b      	ldr	r2, [pc, #44]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b288:	6013      	str	r3, [r2, #0]
	if(newVal>=66000) newVal=0;
 800b28a:	4b0a      	ldr	r3, [pc, #40]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a0d      	ldr	r2, [pc, #52]	@ (800b2c4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x15c>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d902      	bls.n	800b29a <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x132>
 800b294:	4b07      	ldr	r3, [pc, #28]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b296:	2200      	movs	r2, #0
 800b298:	601a      	str	r2, [r3, #0]
	return newVal;
 800b29a:	4b06      	ldr	r3, [pc, #24]	@ (800b2b4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800b29c:	681b      	ldr	r3, [r3, #0]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bdb0      	pop	{r4, r5, r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	00000000 	.word	0x00000000
 800b2ac:	4058e000 	.word	0x4058e000
 800b2b0:	200092a8 	.word	0x200092a8
 800b2b4:	20004ee0 	.word	0x20004ee0
 800b2b8:	20009320 	.word	0x20009320
 800b2bc:	3fe00000 	.word	0x3fe00000
 800b2c0:	40590000 	.word	0x40590000
 800b2c4:	000101cf 	.word	0x000101cf

0800b2c8 <_ZN3Emg28SecondEmgMovingAverageFilterEm>:
uint32_t Emg::SecondEmgMovingAverageFilter(uint32_t newSample){
 800b2c8:	b5b0      	push	{r4, r5, r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
	if(SystemConfig.SecondEmgZeroMaxTrim==0) return newSample;
 800b2d2:	4b45      	ldr	r3, [pc, #276]	@ (800b3e8 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800b2d4:	8a1b      	ldrh	r3, [r3, #16]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d101      	bne.n	800b2de <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x16>
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	e07b      	b.n	800b3d6 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x10e>
	uint32_t newVal=(newSample-65536)*-1;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800b2e4:	60fb      	str	r3, [r7, #12]
	Debugger.SecondEmgNewVal=newVal;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	4b40      	ldr	r3, [pc, #256]	@ (800b3ec <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x124>)
 800b2ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
	uint16_t avgTrim=(SystemConfig.SecondEmgZeroMaxTrim+SystemConfig.SecondEmgZeroMinTrim)/2;
 800b2ee:	4b3e      	ldr	r3, [pc, #248]	@ (800b3e8 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800b2f0:	8a1b      	ldrh	r3, [r3, #16]
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	4b3c      	ldr	r3, [pc, #240]	@ (800b3e8 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800b2f6:	8a5b      	ldrh	r3, [r3, #18]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	0fda      	lsrs	r2, r3, #31
 800b2fc:	4413      	add	r3, r2
 800b2fe:	105b      	asrs	r3, r3, #1
 800b300:	817b      	strh	r3, [r7, #10]
	if(newVal<SystemConfig.SecondEmgZeroMaxTrim && newVal>SystemConfig.SecondEmgZeroMinTrim){
 800b302:	4b39      	ldr	r3, [pc, #228]	@ (800b3e8 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800b304:	8a1b      	ldrh	r3, [r3, #16]
 800b306:	461a      	mov	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d207      	bcs.n	800b31e <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x56>
 800b30e:	4b36      	ldr	r3, [pc, #216]	@ (800b3e8 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800b310:	8a5b      	ldrh	r3, [r3, #18]
 800b312:	461a      	mov	r2, r3
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	4293      	cmp	r3, r2
 800b318:	d901      	bls.n	800b31e <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x56>
		newVal=avgTrim;
 800b31a:	897b      	ldrh	r3, [r7, #10]
 800b31c:	60fb      	str	r3, [r7, #12]
	}
	if(newVal<avgTrim){
 800b31e:	897b      	ldrh	r3, [r7, #10]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	429a      	cmp	r2, r3
 800b324:	d205      	bcs.n	800b332 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x6a>
		newVal=avgTrim+(avgTrim-newVal);
 800b326:	897a      	ldrh	r2, [r7, #10]
 800b328:	8979      	ldrh	r1, [r7, #10]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	1acb      	subs	r3, r1, r3
 800b32e:	4413      	add	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]
	}
	newVal-=avgTrim;
 800b332:	897b      	ldrh	r3, [r7, #10]
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	1ad3      	subs	r3, r2, r3
 800b338:	60fb      	str	r3, [r7, #12]
	Debugger.SecondEmgNewValAfter=newVal;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	4b2b      	ldr	r3, [pc, #172]	@ (800b3ec <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x124>)
 800b340:	865a      	strh	r2, [r3, #50]	@ 0x32
	if(newVal>SystemConfig.SecondEmgMaxTrim){
 800b342:	4b29      	ldr	r3, [pc, #164]	@ (800b3e8 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800b344:	89db      	ldrh	r3, [r3, #14]
 800b346:	461a      	mov	r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d904      	bls.n	800b358 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x90>
		return LastSecondEmg;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b356:	e03e      	b.n	800b3d6 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x10e>
	}
	newVal=(LastSecondEmg*99.5+newVal*0.5)/100;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b35e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b360:	4618      	mov	r0, r3
 800b362:	f7f5 f8c7 	bl	80004f4 <__aeabi_ui2d>
 800b366:	a31e      	add	r3, pc, #120	@ (adr r3, 800b3e0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x118>)
 800b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36c:	f7f5 f93c 	bl	80005e8 <__aeabi_dmul>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4614      	mov	r4, r2
 800b376:	461d      	mov	r5, r3
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f7f5 f8bb 	bl	80004f4 <__aeabi_ui2d>
 800b37e:	f04f 0200 	mov.w	r2, #0
 800b382:	4b1b      	ldr	r3, [pc, #108]	@ (800b3f0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x128>)
 800b384:	f7f5 f930 	bl	80005e8 <__aeabi_dmul>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4620      	mov	r0, r4
 800b38e:	4629      	mov	r1, r5
 800b390:	f7f4 ff74 	bl	800027c <__adddf3>
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	4610      	mov	r0, r2
 800b39a:	4619      	mov	r1, r3
 800b39c:	f04f 0200 	mov.w	r2, #0
 800b3a0:	4b14      	ldr	r3, [pc, #80]	@ (800b3f4 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x12c>)
 800b3a2:	f7f5 fa4b 	bl	800083c <__aeabi_ddiv>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	f7f5 fb2d 	bl	8000a0c <__aeabi_d2uiz>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	60fb      	str	r3, [r7, #12]
	LastSecondEmg=newVal;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b3bc:	461a      	mov	r2, r3
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6413      	str	r3, [r2, #64]	@ 0x40
	newVal=newVal-50; //250
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	3b32      	subs	r3, #50	@ 0x32
 800b3c6:	60fb      	str	r3, [r7, #12]
	if(newVal>=66000) newVal=0;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	4a0b      	ldr	r2, [pc, #44]	@ (800b3f8 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x130>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d901      	bls.n	800b3d4 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x10c>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	60fb      	str	r3, [r7, #12]
	return newVal;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bdb0      	pop	{r4, r5, r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	00000000 	.word	0x00000000
 800b3e4:	4058e000 	.word	0x4058e000
 800b3e8:	200092a8 	.word	0x200092a8
 800b3ec:	20009320 	.word	0x20009320
 800b3f0:	3fe00000 	.word	0x3fe00000
 800b3f4:	40590000 	.word	0x40590000
 800b3f8:	000101cf 	.word	0x000101cf

0800b3fc <_ZN6FilterC1Ev>:
 *      Author: OrioN
 */

#include "../Inc/GeneralHeaders.h"

Filter::Filter() {
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	4a04      	ldr	r2, [pc, #16]	@ (800b418 <_ZN6FilterC1Ev+0x1c>)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4618      	mov	r0, r3
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	08010d90 	.word	0x08010d90

0800b41c <_ZN6FilterD1Ev>:

Filter::~Filter() {
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	4a04      	ldr	r2, [pc, #16]	@ (800b438 <_ZN6FilterD1Ev+0x1c>)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	08010d90 	.word	0x08010d90

0800b43c <_ZN6FilterD0Ev>:
Filter::~Filter() {
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
}
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7ff ffe9 	bl	800b41c <_ZN6FilterD1Ev>
 800b44a:	2104      	movs	r1, #4
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f004 fb95 	bl	800fb7c <_ZdlPvj>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4618      	mov	r0, r3
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <_ZN6Filter14MoovingAverageEPfS0_mmf>:
	previousFilteredValue = filteredValue;

	return (filteredValue < 0) ? 0 : filteredValue;
}

float32_t Filter::MoovingAverage(float32_t *dataArray, float32_t *sumData, uint32_t index, uint32_t len, float32_t nextValue){
 800b45c:	b480      	push	{r7}
 800b45e:	b089      	sub	sp, #36	@ 0x24
 800b460:	af00      	add	r7, sp, #0
 800b462:	6178      	str	r0, [r7, #20]
 800b464:	6139      	str	r1, [r7, #16]
 800b466:	60fa      	str	r2, [r7, #12]
 800b468:	60bb      	str	r3, [r7, #8]
 800b46a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (index >= len) {
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b472:	429a      	cmp	r2, r3
 800b474:	d302      	bcc.n	800b47c <_ZN6Filter14MoovingAverageEPfS0_mmf+0x20>
			return 0.0f;
 800b476:	f04f 0300 	mov.w	r3, #0
 800b47a:	e03b      	b.n	800b4f4 <_ZN6Filter14MoovingAverageEPfS0_mmf+0x98>
		}
		*sumData = *sumData - dataArray[index] + nextValue;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	ed93 7a00 	vldr	s14, [r3]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	4413      	add	r3, r2
 800b48a:	edd3 7a00 	vldr	s15, [r3]
 800b48e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b492:	edd7 7a01 	vldr	s15, [r7, #4]
 800b496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	edc3 7a00 	vstr	s15, [r3]
		*sumData = (*sumData < 1) ? 0 : *sumData;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	edd3 7a00 	vldr	s15, [r3]
 800b4a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b2:	d502      	bpl.n	800b4ba <_ZN6Filter14MoovingAverageEPfS0_mmf+0x5e>
 800b4b4:	f04f 0300 	mov.w	r3, #0
 800b4b8:	e001      	b.n	800b4be <_ZN6Filter14MoovingAverageEPfS0_mmf+0x62>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	6013      	str	r3, [r2, #0]
		dataArray[index] = nextValue;
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	601a      	str	r2, [r3, #0]
		float32_t average = (len != 0) ? *sumData / len : 0.0f;
 800b4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00a      	beq.n	800b4ea <_ZN6Filter14MoovingAverageEPfS0_mmf+0x8e>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	edd3 6a00 	vldr	s13, [r3]
 800b4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4dc:	ee07 3a90 	vmov	s15, r3
 800b4e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b4e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4e8:	e001      	b.n	800b4ee <_ZN6Filter14MoovingAverageEPfS0_mmf+0x92>
 800b4ea:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800b508 <_ZN6Filter14MoovingAverageEPfS0_mmf+0xac>
 800b4ee:	edc7 7a07 	vstr	s15, [r7, #28]

		return average;
 800b4f2:	69fb      	ldr	r3, [r7, #28]
}
 800b4f4:	ee07 3a90 	vmov	s15, r3
 800b4f8:	eeb0 0a67 	vmov.f32	s0, s15
 800b4fc:	3724      	adds	r7, #36	@ 0x24
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	00000000 	.word	0x00000000

0800b50c <_ZN12FlashManager8ReadDataEPhhib>:
	uint16_t ReadSecondEmgZeroPointMinTrim(void);
	uint16_t ReadSecondEmgZeroPointMaxTrim(void);
	FlashStatus Update(void);
	FlashStatus WriteData(uint8_t appendAddress,int len, uint8_t *data);
private:
	void ReadData(uint8_t *retVal, uint8_t appendAddress,int len, bool isReverse=false){
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b086      	sub	sp, #24
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	603b      	str	r3, [r7, #0]
 800b518:	4613      	mov	r3, r2
 800b51a:	71fb      	strb	r3, [r7, #7]
		if(HAL_FLASH_Unlock()==HAL_OK){
 800b51c:	f7f7 f97a 	bl	8002814 <HAL_FLASH_Unlock>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	bf0c      	ite	eq
 800b526:	2301      	moveq	r3, #1
 800b528:	2300      	movne	r3, #0
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d028      	beq.n	800b582 <_ZN12FlashManager8ReadDataEPhhib+0x76>
			for (int i = 0; i < len; ++i) {
 800b530:	2300      	movs	r3, #0
 800b532:	617b      	str	r3, [r7, #20]
 800b534:	e01f      	b.n	800b576 <_ZN12FlashManager8ReadDataEPhhib+0x6a>
				uint32_t address=FlashMemAddress+appendAddress+i;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	689a      	ldr	r2, [r3, #8]
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	441a      	add	r2, r3
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	4413      	add	r3, r2
 800b542:	613b      	str	r3, [r7, #16]
				if(isReverse){
 800b544:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00a      	beq.n	800b562 <_ZN12FlashManager8ReadDataEPhhib+0x56>
					retVal[len-i-1]=*(__IO uint8_t*) address;
 800b54c:	693a      	ldr	r2, [r7, #16]
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	1acb      	subs	r3, r1, r3
 800b554:	3b01      	subs	r3, #1
 800b556:	68b9      	ldr	r1, [r7, #8]
 800b558:	440b      	add	r3, r1
 800b55a:	7812      	ldrb	r2, [r2, #0]
 800b55c:	b2d2      	uxtb	r2, r2
 800b55e:	701a      	strb	r2, [r3, #0]
 800b560:	e006      	b.n	800b570 <_ZN12FlashManager8ReadDataEPhhib+0x64>
				}
				else{
					retVal[i]=*(__IO uint8_t*) address;
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	68b9      	ldr	r1, [r7, #8]
 800b568:	440b      	add	r3, r1
 800b56a:	7812      	ldrb	r2, [r2, #0]
 800b56c:	b2d2      	uxtb	r2, r2
 800b56e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < len; ++i) {
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	3301      	adds	r3, #1
 800b574:	617b      	str	r3, [r7, #20]
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	dbdb      	blt.n	800b536 <_ZN12FlashManager8ReadDataEPhhib+0x2a>
				}
			}
			HAL_FLASH_Lock();
 800b57e:	f7f7 f96b 	bl	8002858 <HAL_FLASH_Lock>
		}
	}
 800b582:	bf00      	nop
 800b584:	3718      	adds	r7, #24
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <_ZN12FlashManagerC1Ev>:
 *      Author: OrioN
 */

#include "../Inc/GeneralHeaders.h"

FlashManager::FlashManager() {
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	4a22      	ldr	r2, [pc, #136]	@ (800b620 <_ZN12FlashManagerC1Ev+0x94>)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	601a      	str	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a21      	ldr	r2, [pc, #132]	@ (800b624 <_ZN12FlashManagerC1Ev+0x98>)
 800b59e:	609a      	str	r2, [r3, #8]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	731a      	strb	r2, [r3, #12]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2208      	movs	r2, #8
 800b5aa:	735a      	strb	r2, [r3, #13]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2210      	movs	r2, #16
 800b5b0:	739a      	strb	r2, [r3, #14]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2214      	movs	r2, #20
 800b5b6:	73da      	strb	r2, [r3, #15]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2218      	movs	r2, #24
 800b5bc:	741a      	strb	r2, [r3, #16]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	221e      	movs	r2, #30
 800b5c2:	745a      	strb	r2, [r3, #17]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2224      	movs	r2, #36	@ 0x24
 800b5c8:	749a      	strb	r2, [r3, #18]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2225      	movs	r2, #37	@ 0x25
 800b5ce:	74da      	strb	r2, [r3, #19]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2226      	movs	r2, #38	@ 0x26
 800b5d4:	751a      	strb	r2, [r3, #20]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2227      	movs	r2, #39	@ 0x27
 800b5da:	755a      	strb	r2, [r3, #21]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2228      	movs	r2, #40	@ 0x28
 800b5e0:	759a      	strb	r2, [r3, #22]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2229      	movs	r2, #41	@ 0x29
 800b5e6:	75da      	strb	r2, [r3, #23]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	222a      	movs	r2, #42	@ 0x2a
 800b5ec:	761a      	strb	r2, [r3, #24]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	222b      	movs	r2, #43	@ 0x2b
 800b5f2:	765a      	strb	r2, [r3, #25]
	// TODO Auto-generated constructor stub
	serialN = rand() % 1000;
 800b5f4:	f004 fc0a 	bl	800fe0c <rand>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800b628 <_ZN12FlashManagerC1Ev+0x9c>)
 800b5fc:	fb83 1302 	smull	r1, r3, r3, r2
 800b600:	1199      	asrs	r1, r3, #6
 800b602:	17d3      	asrs	r3, r2, #31
 800b604:	1acb      	subs	r3, r1, r3
 800b606:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b60a:	fb01 f303 	mul.w	r3, r1, r3
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	6053      	str	r3, [r2, #4]

}
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4618      	mov	r0, r3
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	08010da0 	.word	0x08010da0
 800b624:	08020000 	.word	0x08020000
 800b628:	10624dd3 	.word	0x10624dd3

0800b62c <_ZN12FlashManagerD1Ev>:

FlashManager::~FlashManager() {
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	4a04      	ldr	r2, [pc, #16]	@ (800b648 <_ZN12FlashManagerD1Ev+0x1c>)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4618      	mov	r0, r3
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr
 800b648:	08010da0 	.word	0x08010da0

0800b64c <_ZN12FlashManagerD0Ev>:
FlashManager::~FlashManager() {
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
}
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff ffe9 	bl	800b62c <_ZN12FlashManagerD1Ev>
 800b65a:	211c      	movs	r1, #28
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f004 fa8d 	bl	800fb7c <_ZdlPvj>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4618      	mov	r0, r3
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <_ZN12FlashManager10BackupDataEv>:
void FlashManager::BackupData(void){
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af02      	add	r7, sp, #8
 800b672:	6078      	str	r0, [r7, #4]
	ReadData(SystemConfig.Backup,FlashMemAddress,SystemConfig.BackupLen);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	b2da      	uxtb	r2, r3
 800b67a:	4b08      	ldr	r3, [pc, #32]	@ (800b69c <_ZN12FlashManager10BackupDataEv+0x30>)
 800b67c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b67e:	2100      	movs	r1, #0
 800b680:	9100      	str	r1, [sp, #0]
 800b682:	4907      	ldr	r1, [pc, #28]	@ (800b6a0 <_ZN12FlashManager10BackupDataEv+0x34>)
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff ff41 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
	SystemConfig.isBackup=true;
 800b68a:	4b04      	ldr	r3, [pc, #16]	@ (800b69c <_ZN12FlashManager10BackupDataEv+0x30>)
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 800b692:	bf00      	nop
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	200092a8 	.word	0x200092a8
 800b6a0:	200092dd 	.word	0x200092dd

0800b6a4 <_ZN12FlashManager9HardResetEb>:
FlashStatus FlashManager::HardReset(bool useUnlock){
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08e      	sub	sp, #56	@ 0x38
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	70fb      	strb	r3, [r7, #3]

	if(!useUnlock){
 800b6b0:	78fb      	ldrb	r3, [r7, #3]
 800b6b2:	f083 0301 	eor.w	r3, r3, #1
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d015      	beq.n	800b6e8 <_ZN12FlashManager9HardResetEb+0x44>
		FLASH_EraseInitTypeDef	 FlashErase;
		uint32_t status = 0;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	623b      	str	r3, [r7, #32]
		FlashErase.Sector = FLASH_SECTOR_5;
 800b6c0:	2305      	movs	r3, #5
 800b6c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		FlashErase.Banks=FLASH_BANK_1;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	62bb      	str	r3, [r7, #40]	@ 0x28
		FlashErase.NbSectors = 1;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	633b      	str	r3, [r7, #48]	@ 0x30
		FlashErase.TypeErase    = FLASH_TYPEERASE_SECTORS;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	627b      	str	r3, [r7, #36]	@ 0x24
		FlashErase.VoltageRange = VOLTAGE_RANGE_3;
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_FLASHEx_Erase(&FlashErase, &status);
 800b6d4:	f107 0220 	add.w	r2, r7, #32
 800b6d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6dc:	4611      	mov	r1, r2
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7f7 f9fa 	bl	8002ad8 <HAL_FLASHEx_Erase>
		return FlashStatus::Success;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	e025      	b.n	800b734 <_ZN12FlashManager9HardResetEb+0x90>
	}
	if(useUnlock&&HAL_FLASH_Unlock()==HAL_OK){
 800b6e8:	78fb      	ldrb	r3, [r7, #3]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d006      	beq.n	800b6fc <_ZN12FlashManager9HardResetEb+0x58>
 800b6ee:	f7f7 f891 	bl	8002814 <HAL_FLASH_Unlock>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d101      	bne.n	800b6fc <_ZN12FlashManager9HardResetEb+0x58>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e000      	b.n	800b6fe <_ZN12FlashManager9HardResetEb+0x5a>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d017      	beq.n	800b732 <_ZN12FlashManager9HardResetEb+0x8e>

		FLASH_EraseInitTypeDef	 FlashErase;
		uint32_t status = 0;
 800b702:	2300      	movs	r3, #0
 800b704:	60bb      	str	r3, [r7, #8]
		FlashErase.Sector = FLASH_SECTOR_5;
 800b706:	2305      	movs	r3, #5
 800b708:	617b      	str	r3, [r7, #20]
		FlashErase.Banks=FLASH_BANK_1;
 800b70a:	2301      	movs	r3, #1
 800b70c:	613b      	str	r3, [r7, #16]
		FlashErase.NbSectors = 1;
 800b70e:	2301      	movs	r3, #1
 800b710:	61bb      	str	r3, [r7, #24]
		FlashErase.TypeErase    = FLASH_TYPEERASE_SECTORS;
 800b712:	2300      	movs	r3, #0
 800b714:	60fb      	str	r3, [r7, #12]
		FlashErase.VoltageRange = VOLTAGE_RANGE_3;
 800b716:	2302      	movs	r3, #2
 800b718:	61fb      	str	r3, [r7, #28]
		HAL_FLASHEx_Erase(&FlashErase, &status);
 800b71a:	f107 0208 	add.w	r2, r7, #8
 800b71e:	f107 030c 	add.w	r3, r7, #12
 800b722:	4611      	mov	r1, r2
 800b724:	4618      	mov	r0, r3
 800b726:	f7f7 f9d7 	bl	8002ad8 <HAL_FLASHEx_Erase>
		HAL_FLASH_Lock();
 800b72a:	f7f7 f895 	bl	8002858 <HAL_FLASH_Lock>
		return FlashStatus::Success;
 800b72e:	2300      	movs	r3, #0
 800b730:	e000      	b.n	800b734 <_ZN12FlashManager9HardResetEb+0x90>
	}
	return FlashStatus::Error;
 800b732:	2301      	movs	r3, #1

}
 800b734:	4618      	mov	r0, r3
 800b736:	3738      	adds	r7, #56	@ 0x38
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <_ZN12FlashManager6UpdateEv>:
FlashStatus FlashManager::Update(void){
 800b73c:	b5b0      	push	{r4, r5, r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
	if(!SystemConfig.isBackup){
 800b744:	4b1f      	ldr	r3, [pc, #124]	@ (800b7c4 <_ZN12FlashManager6UpdateEv+0x88>)
 800b746:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800b74a:	f083 0301 	eor.w	r3, r3, #1
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	2b00      	cmp	r3, #0
 800b752:	d001      	beq.n	800b758 <_ZN12FlashManager6UpdateEv+0x1c>
		return FlashStatus::NotBackup;
 800b754:	2302      	movs	r3, #2
 800b756:	e031      	b.n	800b7bc <_ZN12FlashManager6UpdateEv+0x80>
	}
	if(HAL_FLASH_Unlock()==HAL_OK){
 800b758:	f7f7 f85c 	bl	8002814 <HAL_FLASH_Unlock>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	bf0c      	ite	eq
 800b762:	2301      	moveq	r3, #1
 800b764:	2300      	movne	r3, #0
 800b766:	b2db      	uxtb	r3, r3
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d026      	beq.n	800b7ba <_ZN12FlashManager6UpdateEv+0x7e>
		HardReset(false);
 800b76c:	2100      	movs	r1, #0
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f7ff ff98 	bl	800b6a4 <_ZN12FlashManager9HardResetEb>
		for (int i = 0; i < SystemConfig.BackupLen; ++i) {
 800b774:	2300      	movs	r3, #0
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	e016      	b.n	800b7a8 <_ZN12FlashManager6UpdateEv+0x6c>
			uint32_t address=FlashMemAddress+i;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	689a      	ldr	r2, [r3, #8]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	4413      	add	r3, r2
 800b782:	60bb      	str	r3, [r7, #8]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address,SystemConfig.Backup[i] );
 800b784:	4a0f      	ldr	r2, [pc, #60]	@ (800b7c4 <_ZN12FlashManager6UpdateEv+0x88>)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	4413      	add	r3, r2
 800b78a:	3335      	adds	r3, #53	@ 0x35
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2200      	movs	r2, #0
 800b792:	461c      	mov	r4, r3
 800b794:	4615      	mov	r5, r2
 800b796:	4622      	mov	r2, r4
 800b798:	462b      	mov	r3, r5
 800b79a:	68b9      	ldr	r1, [r7, #8]
 800b79c:	2000      	movs	r0, #0
 800b79e:	f7f6 ffe5 	bl	800276c <HAL_FLASH_Program>
		for (int i = 0; i < SystemConfig.BackupLen; ++i) {
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	4b06      	ldr	r3, [pc, #24]	@ (800b7c4 <_ZN12FlashManager6UpdateEv+0x88>)
 800b7aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	dbe3      	blt.n	800b77a <_ZN12FlashManager6UpdateEv+0x3e>
		}
		HAL_FLASH_Lock();
 800b7b2:	f7f7 f851 	bl	8002858 <HAL_FLASH_Lock>
		return FlashStatus::Success;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	e000      	b.n	800b7bc <_ZN12FlashManager6UpdateEv+0x80>
	}
	return FlashStatus::Error;
 800b7ba:	2301      	movs	r3, #1
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bdb0      	pop	{r4, r5, r7, pc}
 800b7c4:	200092a8 	.word	0x200092a8

0800b7c8 <_ZN12FlashManager9WriteDataEhiPh>:

FlashStatus FlashManager::WriteData(uint8_t appendAddress,int len, uint8_t *data){
 800b7c8:	b480      	push	{r7}
 800b7ca:	b087      	sub	sp, #28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	607a      	str	r2, [r7, #4]
 800b7d2:	603b      	str	r3, [r7, #0]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	72fb      	strb	r3, [r7, #11]
	if(!SystemConfig.isBackup){
 800b7d8:	4b14      	ldr	r3, [pc, #80]	@ (800b82c <_ZN12FlashManager9WriteDataEhiPh+0x64>)
 800b7da:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800b7de:	f083 0301 	eor.w	r3, r3, #1
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <_ZN12FlashManager9WriteDataEhiPh+0x24>
		return FlashStatus::NotBackup;
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	e018      	b.n	800b81e <_ZN12FlashManager9WriteDataEhiPh+0x56>
	}
	for (int i = 0; i < len; ++i) {
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	617b      	str	r3, [r7, #20]
 800b7f0:	e010      	b.n	800b814 <_ZN12FlashManager9WriteDataEhiPh+0x4c>
		uint32_t address=appendAddress+i;
 800b7f2:	7afa      	ldrb	r2, [r7, #11]
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	613b      	str	r3, [r7, #16]
		SystemConfig.Backup[address]=data[i];
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	4413      	add	r3, r2
 800b800:	7819      	ldrb	r1, [r3, #0]
 800b802:	4a0a      	ldr	r2, [pc, #40]	@ (800b82c <_ZN12FlashManager9WriteDataEhiPh+0x64>)
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	4413      	add	r3, r2
 800b808:	3335      	adds	r3, #53	@ 0x35
 800b80a:	460a      	mov	r2, r1
 800b80c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; ++i) {
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	3301      	adds	r3, #1
 800b812:	617b      	str	r3, [r7, #20]
 800b814:	697a      	ldr	r2, [r7, #20]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	429a      	cmp	r2, r3
 800b81a:	dbea      	blt.n	800b7f2 <_ZN12FlashManager9WriteDataEhiPh+0x2a>
	}
	return FlashStatus::Success;
 800b81c:	2300      	movs	r3, #0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	371c      	adds	r7, #28
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	200092a8 	.word	0x200092a8

0800b830 <_ZN12FlashManager5SetupEv>:
void FlashManager::Setup(){
 800b830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b834:	b087      	sub	sp, #28
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
	size_t size=1;
    uint8_t data[size]={0};
	WriteData(SetupAppendAddress,size, data);
}
 800b83a:	466b      	mov	r3, sp
 800b83c:	461e      	mov	r6, r3
	size_t size=1;
 800b83e:	2301      	movs	r3, #1
 800b840:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={0};
 800b842:	6979      	ldr	r1, [r7, #20]
 800b844:	460b      	mov	r3, r1
 800b846:	3b01      	subs	r3, #1
 800b848:	613b      	str	r3, [r7, #16]
 800b84a:	2300      	movs	r3, #0
 800b84c:	4688      	mov	r8, r1
 800b84e:	4699      	mov	r9, r3
 800b850:	f04f 0200 	mov.w	r2, #0
 800b854:	f04f 0300 	mov.w	r3, #0
 800b858:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b85c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b860:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b864:	2300      	movs	r3, #0
 800b866:	460c      	mov	r4, r1
 800b868:	461d      	mov	r5, r3
 800b86a:	f04f 0200 	mov.w	r2, #0
 800b86e:	f04f 0300 	mov.w	r3, #0
 800b872:	00eb      	lsls	r3, r5, #3
 800b874:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b878:	00e2      	lsls	r2, r4, #3
 800b87a:	1dcb      	adds	r3, r1, #7
 800b87c:	08db      	lsrs	r3, r3, #3
 800b87e:	00db      	lsls	r3, r3, #3
 800b880:	ebad 0d03 	sub.w	sp, sp, r3
 800b884:	466b      	mov	r3, sp
 800b886:	3300      	adds	r3, #0
 800b888:	60fb      	str	r3, [r7, #12]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	460a      	mov	r2, r1
 800b88e:	1e51      	subs	r1, r2, #1
 800b890:	2200      	movs	r2, #0
 800b892:	701a      	strb	r2, [r3, #0]
 800b894:	1c5a      	adds	r2, r3, #1
 800b896:	1e4b      	subs	r3, r1, #1
 800b898:	e003      	b.n	800b8a2 <_ZN12FlashManager5SetupEv+0x72>
 800b89a:	2100      	movs	r1, #0
 800b89c:	7011      	strb	r1, [r2, #0]
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	3201      	adds	r2, #1
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	daf9      	bge.n	800b89a <_ZN12FlashManager5SetupEv+0x6a>
	WriteData(SetupAppendAddress,size, data);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	7c99      	ldrb	r1, [r3, #18]
 800b8aa:	697a      	ldr	r2, [r7, #20]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7ff ff8a 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800b8b4:	46b5      	mov	sp, r6
}
 800b8b6:	bf00      	nop
 800b8b8:	371c      	adds	r7, #28
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b8c0 <_ZN12FlashManager7IsSetupEv>:
bool FlashManager::IsSetup(){
 800b8c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8c4:	b089      	sub	sp, #36	@ 0x24
 800b8c6:	af02      	add	r7, sp, #8
 800b8c8:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,SetupAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return (value==0x00);
}
 800b8ca:	466b      	mov	r3, sp
 800b8cc:	461e      	mov	r6, r3
	BackupData();
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff fecc 	bl	800b66c <_ZN12FlashManager10BackupDataEv>
	size_t size=1;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800b8d8:	6979      	ldr	r1, [r7, #20]
 800b8da:	460b      	mov	r3, r1
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	613b      	str	r3, [r7, #16]
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4688      	mov	r8, r1
 800b8e4:	4699      	mov	r9, r3
 800b8e6:	f04f 0200 	mov.w	r2, #0
 800b8ea:	f04f 0300 	mov.w	r3, #0
 800b8ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b8f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	461d      	mov	r5, r3
 800b900:	f04f 0200 	mov.w	r2, #0
 800b904:	f04f 0300 	mov.w	r3, #0
 800b908:	00eb      	lsls	r3, r5, #3
 800b90a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b90e:	00e2      	lsls	r2, r4, #3
 800b910:	1dcb      	adds	r3, r1, #7
 800b912:	08db      	lsrs	r3, r3, #3
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	ebad 0d03 	sub.w	sp, sp, r3
 800b91a:	ab02      	add	r3, sp, #8
 800b91c:	3300      	adds	r3, #0
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	460a      	mov	r2, r1
 800b924:	1e51      	subs	r1, r2, #1
 800b926:	22ff      	movs	r2, #255	@ 0xff
 800b928:	701a      	strb	r2, [r3, #0]
 800b92a:	1c5a      	adds	r2, r3, #1
 800b92c:	1e4b      	subs	r3, r1, #1
 800b92e:	e003      	b.n	800b938 <_ZN12FlashManager7IsSetupEv+0x78>
 800b930:	2100      	movs	r1, #0
 800b932:	7011      	strb	r1, [r2, #0]
 800b934:	3b01      	subs	r3, #1
 800b936:	3201      	adds	r2, #1
 800b938:	2b00      	cmp	r3, #0
 800b93a:	daf9      	bge.n	800b930 <_ZN12FlashManager7IsSetupEv+0x70>
	ReadData(data,SetupAppendAddress,size, false);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	7c9a      	ldrb	r2, [r3, #18]
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	2100      	movs	r1, #0
 800b944:	9100      	str	r1, [sp, #0]
 800b946:	68f9      	ldr	r1, [r7, #12]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7ff fddf 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800b94e:	f107 030b 	add.w	r3, r7, #11
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	68f9      	ldr	r1, [r7, #12]
 800b956:	4618      	mov	r0, r3
 800b958:	f004 fc27 	bl	80101aa <memcpy>
    return (value==0x00);
 800b95c:	7afb      	ldrb	r3, [r7, #11]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	bf0c      	ite	eq
 800b962:	2301      	moveq	r3, #1
 800b964:	2300      	movne	r3, #0
 800b966:	b2db      	uxtb	r3, r3
 800b968:	46b5      	mov	sp, r6
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	371c      	adds	r7, #28
 800b96e:	46bd      	mov	sp, r7
 800b970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b974 <_ZN12FlashManager18WriteSendPerSecondEh>:
void FlashManager::WriteSendPerSecond(uint8_t count){
 800b974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b978:	b087      	sub	sp, #28
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	460b      	mov	r3, r1
 800b980:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(SendPerSecondAppendAddress,size, data);
}
 800b982:	466b      	mov	r3, sp
 800b984:	461e      	mov	r6, r3
	size_t size=1;
 800b986:	2301      	movs	r3, #1
 800b988:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800b98a:	6979      	ldr	r1, [r7, #20]
 800b98c:	460b      	mov	r3, r1
 800b98e:	3b01      	subs	r3, #1
 800b990:	613b      	str	r3, [r7, #16]
 800b992:	2300      	movs	r3, #0
 800b994:	4688      	mov	r8, r1
 800b996:	4699      	mov	r9, r3
 800b998:	f04f 0200 	mov.w	r2, #0
 800b99c:	f04f 0300 	mov.w	r3, #0
 800b9a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b9a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b9a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	461d      	mov	r5, r3
 800b9b2:	f04f 0200 	mov.w	r2, #0
 800b9b6:	f04f 0300 	mov.w	r3, #0
 800b9ba:	00eb      	lsls	r3, r5, #3
 800b9bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b9c0:	00e2      	lsls	r2, r4, #3
 800b9c2:	1dcb      	adds	r3, r1, #7
 800b9c4:	08db      	lsrs	r3, r3, #3
 800b9c6:	00db      	lsls	r3, r3, #3
 800b9c8:	ebad 0d03 	sub.w	sp, sp, r3
 800b9cc:	466b      	mov	r3, sp
 800b9ce:	3300      	adds	r3, #0
 800b9d0:	60fb      	str	r3, [r7, #12]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	460a      	mov	r2, r1
 800b9d6:	1e51      	subs	r1, r2, #1
 800b9d8:	78fa      	ldrb	r2, [r7, #3]
 800b9da:	701a      	strb	r2, [r3, #0]
 800b9dc:	1c5a      	adds	r2, r3, #1
 800b9de:	1e4b      	subs	r3, r1, #1
 800b9e0:	e003      	b.n	800b9ea <_ZN12FlashManager18WriteSendPerSecondEh+0x76>
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	7011      	strb	r1, [r2, #0]
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	3201      	adds	r2, #1
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	daf9      	bge.n	800b9e2 <_ZN12FlashManager18WriteSendPerSecondEh+0x6e>
	WriteData(SendPerSecondAppendAddress,size, data);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	7cd9      	ldrb	r1, [r3, #19]
 800b9f2:	697a      	ldr	r2, [r7, #20]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff fee6 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800b9fc:	46b5      	mov	sp, r6
}
 800b9fe:	bf00      	nop
 800ba00:	371c      	adds	r7, #28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ba08 <_ZN12FlashManager17ReadSendPerSecondEv>:
uint8_t FlashManager::ReadSendPerSecond(){
 800ba08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba0c:	b089      	sub	sp, #36	@ 0x24
 800ba0e:	af02      	add	r7, sp, #8
 800ba10:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0XFF};
	ReadData(data,SendPerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800ba12:	466b      	mov	r3, sp
 800ba14:	461e      	mov	r6, r3
	size_t size=1;
 800ba16:	2301      	movs	r3, #1
 800ba18:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0XFF};
 800ba1a:	6979      	ldr	r1, [r7, #20]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	613b      	str	r3, [r7, #16]
 800ba22:	2300      	movs	r3, #0
 800ba24:	4688      	mov	r8, r1
 800ba26:	4699      	mov	r9, r3
 800ba28:	f04f 0200 	mov.w	r2, #0
 800ba2c:	f04f 0300 	mov.w	r3, #0
 800ba30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ba34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ba38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	460c      	mov	r4, r1
 800ba40:	461d      	mov	r5, r3
 800ba42:	f04f 0200 	mov.w	r2, #0
 800ba46:	f04f 0300 	mov.w	r3, #0
 800ba4a:	00eb      	lsls	r3, r5, #3
 800ba4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ba50:	00e2      	lsls	r2, r4, #3
 800ba52:	1dcb      	adds	r3, r1, #7
 800ba54:	08db      	lsrs	r3, r3, #3
 800ba56:	00db      	lsls	r3, r3, #3
 800ba58:	ebad 0d03 	sub.w	sp, sp, r3
 800ba5c:	ab02      	add	r3, sp, #8
 800ba5e:	3300      	adds	r3, #0
 800ba60:	60fb      	str	r3, [r7, #12]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	460a      	mov	r2, r1
 800ba66:	1e51      	subs	r1, r2, #1
 800ba68:	22ff      	movs	r2, #255	@ 0xff
 800ba6a:	701a      	strb	r2, [r3, #0]
 800ba6c:	1c5a      	adds	r2, r3, #1
 800ba6e:	1e4b      	subs	r3, r1, #1
 800ba70:	e003      	b.n	800ba7a <_ZN12FlashManager17ReadSendPerSecondEv+0x72>
 800ba72:	2100      	movs	r1, #0
 800ba74:	7011      	strb	r1, [r2, #0]
 800ba76:	3b01      	subs	r3, #1
 800ba78:	3201      	adds	r2, #1
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	daf9      	bge.n	800ba72 <_ZN12FlashManager17ReadSendPerSecondEv+0x6a>
	ReadData(data,SendPerSecondAppendAddress,size, false);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	7cda      	ldrb	r2, [r3, #19]
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	2100      	movs	r1, #0
 800ba86:	9100      	str	r1, [sp, #0]
 800ba88:	68f9      	ldr	r1, [r7, #12]
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7ff fd3e 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800ba90:	f107 030b 	add.w	r3, r7, #11
 800ba94:	697a      	ldr	r2, [r7, #20]
 800ba96:	68f9      	ldr	r1, [r7, #12]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f004 fb86 	bl	80101aa <memcpy>
    return value;
 800ba9e:	7afb      	ldrb	r3, [r7, #11]
 800baa0:	46b5      	mov	sp, r6
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	371c      	adds	r7, #28
 800baa6:	46bd      	mov	sp, r7
 800baa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800baac <_ZN12FlashManager22WriteFirstEmgPerSecondEh>:
void FlashManager::WriteFirstEmgPerSecond(uint8_t count){
 800baac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bab0:	b087      	sub	sp, #28
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	460b      	mov	r3, r1
 800bab8:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(FirstEmgPerSecondAppendAddress,size, data);
}
 800baba:	466b      	mov	r3, sp
 800babc:	461e      	mov	r6, r3
	size_t size=1;
 800babe:	2301      	movs	r3, #1
 800bac0:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800bac2:	6979      	ldr	r1, [r7, #20]
 800bac4:	460b      	mov	r3, r1
 800bac6:	3b01      	subs	r3, #1
 800bac8:	613b      	str	r3, [r7, #16]
 800baca:	2300      	movs	r3, #0
 800bacc:	4688      	mov	r8, r1
 800bace:	4699      	mov	r9, r3
 800bad0:	f04f 0200 	mov.w	r2, #0
 800bad4:	f04f 0300 	mov.w	r3, #0
 800bad8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800badc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bae0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bae4:	2300      	movs	r3, #0
 800bae6:	460c      	mov	r4, r1
 800bae8:	461d      	mov	r5, r3
 800baea:	f04f 0200 	mov.w	r2, #0
 800baee:	f04f 0300 	mov.w	r3, #0
 800baf2:	00eb      	lsls	r3, r5, #3
 800baf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800baf8:	00e2      	lsls	r2, r4, #3
 800bafa:	1dcb      	adds	r3, r1, #7
 800bafc:	08db      	lsrs	r3, r3, #3
 800bafe:	00db      	lsls	r3, r3, #3
 800bb00:	ebad 0d03 	sub.w	sp, sp, r3
 800bb04:	466b      	mov	r3, sp
 800bb06:	3300      	adds	r3, #0
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	460a      	mov	r2, r1
 800bb0e:	1e51      	subs	r1, r2, #1
 800bb10:	78fa      	ldrb	r2, [r7, #3]
 800bb12:	701a      	strb	r2, [r3, #0]
 800bb14:	1c5a      	adds	r2, r3, #1
 800bb16:	1e4b      	subs	r3, r1, #1
 800bb18:	e003      	b.n	800bb22 <_ZN12FlashManager22WriteFirstEmgPerSecondEh+0x76>
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	7011      	strb	r1, [r2, #0]
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	3201      	adds	r2, #1
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	daf9      	bge.n	800bb1a <_ZN12FlashManager22WriteFirstEmgPerSecondEh+0x6e>
	WriteData(FirstEmgPerSecondAppendAddress,size, data);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	7d19      	ldrb	r1, [r3, #20]
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7ff fe4a 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800bb34:	46b5      	mov	sp, r6
}
 800bb36:	bf00      	nop
 800bb38:	371c      	adds	r7, #28
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bb40 <_ZN12FlashManager21ReadFirstEmgPerSecondEv>:
uint8_t FlashManager::ReadFirstEmgPerSecond(){
 800bb40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb44:	b089      	sub	sp, #36	@ 0x24
 800bb46:	af02      	add	r7, sp, #8
 800bb48:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,FirstEmgPerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800bb4a:	466b      	mov	r3, sp
 800bb4c:	461e      	mov	r6, r3
	size_t size=1;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800bb52:	6979      	ldr	r1, [r7, #20]
 800bb54:	460b      	mov	r3, r1
 800bb56:	3b01      	subs	r3, #1
 800bb58:	613b      	str	r3, [r7, #16]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	4688      	mov	r8, r1
 800bb5e:	4699      	mov	r9, r3
 800bb60:	f04f 0200 	mov.w	r2, #0
 800bb64:	f04f 0300 	mov.w	r3, #0
 800bb68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bb6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bb70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bb74:	2300      	movs	r3, #0
 800bb76:	460c      	mov	r4, r1
 800bb78:	461d      	mov	r5, r3
 800bb7a:	f04f 0200 	mov.w	r2, #0
 800bb7e:	f04f 0300 	mov.w	r3, #0
 800bb82:	00eb      	lsls	r3, r5, #3
 800bb84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb88:	00e2      	lsls	r2, r4, #3
 800bb8a:	1dcb      	adds	r3, r1, #7
 800bb8c:	08db      	lsrs	r3, r3, #3
 800bb8e:	00db      	lsls	r3, r3, #3
 800bb90:	ebad 0d03 	sub.w	sp, sp, r3
 800bb94:	ab02      	add	r3, sp, #8
 800bb96:	3300      	adds	r3, #0
 800bb98:	60fb      	str	r3, [r7, #12]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	460a      	mov	r2, r1
 800bb9e:	1e51      	subs	r1, r2, #1
 800bba0:	22ff      	movs	r2, #255	@ 0xff
 800bba2:	701a      	strb	r2, [r3, #0]
 800bba4:	1c5a      	adds	r2, r3, #1
 800bba6:	1e4b      	subs	r3, r1, #1
 800bba8:	e003      	b.n	800bbb2 <_ZN12FlashManager21ReadFirstEmgPerSecondEv+0x72>
 800bbaa:	2100      	movs	r1, #0
 800bbac:	7011      	strb	r1, [r2, #0]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	3201      	adds	r2, #1
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	daf9      	bge.n	800bbaa <_ZN12FlashManager21ReadFirstEmgPerSecondEv+0x6a>
	ReadData(data,FirstEmgPerSecondAppendAddress,size, false);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	7d1a      	ldrb	r2, [r3, #20]
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	9100      	str	r1, [sp, #0]
 800bbc0:	68f9      	ldr	r1, [r7, #12]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7ff fca2 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800bbc8:	f107 030b 	add.w	r3, r7, #11
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	68f9      	ldr	r1, [r7, #12]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f004 faea 	bl	80101aa <memcpy>
    return value;
 800bbd6:	7afb      	ldrb	r3, [r7, #11]
 800bbd8:	46b5      	mov	sp, r6
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	371c      	adds	r7, #28
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bbe4 <_ZN12FlashManager23WriteSecondEmgPerSecondEh>:
void FlashManager::WriteSecondEmgPerSecond(uint8_t count){
 800bbe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbe8:	b087      	sub	sp, #28
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	460b      	mov	r3, r1
 800bbf0:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(SecondEmgPerSecondAppendAddress,size, data);
}
 800bbf2:	466b      	mov	r3, sp
 800bbf4:	461e      	mov	r6, r3
	size_t size=1;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800bbfa:	6979      	ldr	r1, [r7, #20]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	613b      	str	r3, [r7, #16]
 800bc02:	2300      	movs	r3, #0
 800bc04:	4688      	mov	r8, r1
 800bc06:	4699      	mov	r9, r3
 800bc08:	f04f 0200 	mov.w	r2, #0
 800bc0c:	f04f 0300 	mov.w	r3, #0
 800bc10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bc14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bc18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	460c      	mov	r4, r1
 800bc20:	461d      	mov	r5, r3
 800bc22:	f04f 0200 	mov.w	r2, #0
 800bc26:	f04f 0300 	mov.w	r3, #0
 800bc2a:	00eb      	lsls	r3, r5, #3
 800bc2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc30:	00e2      	lsls	r2, r4, #3
 800bc32:	1dcb      	adds	r3, r1, #7
 800bc34:	08db      	lsrs	r3, r3, #3
 800bc36:	00db      	lsls	r3, r3, #3
 800bc38:	ebad 0d03 	sub.w	sp, sp, r3
 800bc3c:	466b      	mov	r3, sp
 800bc3e:	3300      	adds	r3, #0
 800bc40:	60fb      	str	r3, [r7, #12]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	460a      	mov	r2, r1
 800bc46:	1e51      	subs	r1, r2, #1
 800bc48:	78fa      	ldrb	r2, [r7, #3]
 800bc4a:	701a      	strb	r2, [r3, #0]
 800bc4c:	1c5a      	adds	r2, r3, #1
 800bc4e:	1e4b      	subs	r3, r1, #1
 800bc50:	e003      	b.n	800bc5a <_ZN12FlashManager23WriteSecondEmgPerSecondEh+0x76>
 800bc52:	2100      	movs	r1, #0
 800bc54:	7011      	strb	r1, [r2, #0]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	3201      	adds	r2, #1
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	daf9      	bge.n	800bc52 <_ZN12FlashManager23WriteSecondEmgPerSecondEh+0x6e>
	WriteData(SecondEmgPerSecondAppendAddress,size, data);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	7d59      	ldrb	r1, [r3, #21]
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f7ff fdae 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800bc6c:	46b5      	mov	sp, r6
}
 800bc6e:	bf00      	nop
 800bc70:	371c      	adds	r7, #28
 800bc72:	46bd      	mov	sp, r7
 800bc74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bc78 <_ZN12FlashManager22ReadSecondEmgPerSecondEv>:
uint8_t FlashManager::ReadSecondEmgPerSecond(){
 800bc78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc7c:	b089      	sub	sp, #36	@ 0x24
 800bc7e:	af02      	add	r7, sp, #8
 800bc80:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,SecondEmgPerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800bc82:	466b      	mov	r3, sp
 800bc84:	461e      	mov	r6, r3
	size_t size=1;
 800bc86:	2301      	movs	r3, #1
 800bc88:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800bc8a:	6979      	ldr	r1, [r7, #20]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	613b      	str	r3, [r7, #16]
 800bc92:	2300      	movs	r3, #0
 800bc94:	4688      	mov	r8, r1
 800bc96:	4699      	mov	r9, r3
 800bc98:	f04f 0200 	mov.w	r2, #0
 800bc9c:	f04f 0300 	mov.w	r3, #0
 800bca0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bca4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bca8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bcac:	2300      	movs	r3, #0
 800bcae:	460c      	mov	r4, r1
 800bcb0:	461d      	mov	r5, r3
 800bcb2:	f04f 0200 	mov.w	r2, #0
 800bcb6:	f04f 0300 	mov.w	r3, #0
 800bcba:	00eb      	lsls	r3, r5, #3
 800bcbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bcc0:	00e2      	lsls	r2, r4, #3
 800bcc2:	1dcb      	adds	r3, r1, #7
 800bcc4:	08db      	lsrs	r3, r3, #3
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	ebad 0d03 	sub.w	sp, sp, r3
 800bccc:	ab02      	add	r3, sp, #8
 800bcce:	3300      	adds	r3, #0
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	460a      	mov	r2, r1
 800bcd6:	1e51      	subs	r1, r2, #1
 800bcd8:	22ff      	movs	r2, #255	@ 0xff
 800bcda:	701a      	strb	r2, [r3, #0]
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	1e4b      	subs	r3, r1, #1
 800bce0:	e003      	b.n	800bcea <_ZN12FlashManager22ReadSecondEmgPerSecondEv+0x72>
 800bce2:	2100      	movs	r1, #0
 800bce4:	7011      	strb	r1, [r2, #0]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	3201      	adds	r2, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	daf9      	bge.n	800bce2 <_ZN12FlashManager22ReadSecondEmgPerSecondEv+0x6a>
	ReadData(data,SecondEmgPerSecondAppendAddress,size, false);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	7d5a      	ldrb	r2, [r3, #21]
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	9100      	str	r1, [sp, #0]
 800bcf8:	68f9      	ldr	r1, [r7, #12]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7ff fc06 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800bd00:	f107 030b 	add.w	r3, r7, #11
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	68f9      	ldr	r1, [r7, #12]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f004 fa4e 	bl	80101aa <memcpy>
    return value;
 800bd0e:	7afb      	ldrb	r3, [r7, #11]
 800bd10:	46b5      	mov	sp, r6
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	371c      	adds	r7, #28
 800bd16:	46bd      	mov	sp, r7
 800bd18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bd1c <_ZN12FlashManager20WriteVolumePerSecondEh>:
void FlashManager::WriteVolumePerSecond(uint8_t count){
 800bd1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd20:	b087      	sub	sp, #28
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	460b      	mov	r3, r1
 800bd28:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(VolumePerSecondAppendAddress,size, data);
}
 800bd2a:	466b      	mov	r3, sp
 800bd2c:	461e      	mov	r6, r3
	size_t size=1;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800bd32:	6979      	ldr	r1, [r7, #20]
 800bd34:	460b      	mov	r3, r1
 800bd36:	3b01      	subs	r3, #1
 800bd38:	613b      	str	r3, [r7, #16]
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	4688      	mov	r8, r1
 800bd3e:	4699      	mov	r9, r3
 800bd40:	f04f 0200 	mov.w	r2, #0
 800bd44:	f04f 0300 	mov.w	r3, #0
 800bd48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bd4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bd50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bd54:	2300      	movs	r3, #0
 800bd56:	460c      	mov	r4, r1
 800bd58:	461d      	mov	r5, r3
 800bd5a:	f04f 0200 	mov.w	r2, #0
 800bd5e:	f04f 0300 	mov.w	r3, #0
 800bd62:	00eb      	lsls	r3, r5, #3
 800bd64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bd68:	00e2      	lsls	r2, r4, #3
 800bd6a:	1dcb      	adds	r3, r1, #7
 800bd6c:	08db      	lsrs	r3, r3, #3
 800bd6e:	00db      	lsls	r3, r3, #3
 800bd70:	ebad 0d03 	sub.w	sp, sp, r3
 800bd74:	466b      	mov	r3, sp
 800bd76:	3300      	adds	r3, #0
 800bd78:	60fb      	str	r3, [r7, #12]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	460a      	mov	r2, r1
 800bd7e:	1e51      	subs	r1, r2, #1
 800bd80:	78fa      	ldrb	r2, [r7, #3]
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	1c5a      	adds	r2, r3, #1
 800bd86:	1e4b      	subs	r3, r1, #1
 800bd88:	e003      	b.n	800bd92 <_ZN12FlashManager20WriteVolumePerSecondEh+0x76>
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	7011      	strb	r1, [r2, #0]
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	3201      	adds	r2, #1
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	daf9      	bge.n	800bd8a <_ZN12FlashManager20WriteVolumePerSecondEh+0x6e>
	WriteData(VolumePerSecondAppendAddress,size, data);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	7d99      	ldrb	r1, [r3, #22]
 800bd9a:	697a      	ldr	r2, [r7, #20]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f7ff fd12 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800bda4:	46b5      	mov	sp, r6
}
 800bda6:	bf00      	nop
 800bda8:	371c      	adds	r7, #28
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bdb0 <_ZN12FlashManager19ReadVolumePerSecondEv>:
uint8_t FlashManager::ReadVolumePerSecond(){
 800bdb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdb4:	b089      	sub	sp, #36	@ 0x24
 800bdb6:	af02      	add	r7, sp, #8
 800bdb8:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,VolumePerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800bdba:	466b      	mov	r3, sp
 800bdbc:	461e      	mov	r6, r3
	size_t size=1;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800bdc2:	6979      	ldr	r1, [r7, #20]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	3b01      	subs	r3, #1
 800bdc8:	613b      	str	r3, [r7, #16]
 800bdca:	2300      	movs	r3, #0
 800bdcc:	4688      	mov	r8, r1
 800bdce:	4699      	mov	r9, r3
 800bdd0:	f04f 0200 	mov.w	r2, #0
 800bdd4:	f04f 0300 	mov.w	r3, #0
 800bdd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bddc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bde0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bde4:	2300      	movs	r3, #0
 800bde6:	460c      	mov	r4, r1
 800bde8:	461d      	mov	r5, r3
 800bdea:	f04f 0200 	mov.w	r2, #0
 800bdee:	f04f 0300 	mov.w	r3, #0
 800bdf2:	00eb      	lsls	r3, r5, #3
 800bdf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bdf8:	00e2      	lsls	r2, r4, #3
 800bdfa:	1dcb      	adds	r3, r1, #7
 800bdfc:	08db      	lsrs	r3, r3, #3
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	ebad 0d03 	sub.w	sp, sp, r3
 800be04:	ab02      	add	r3, sp, #8
 800be06:	3300      	adds	r3, #0
 800be08:	60fb      	str	r3, [r7, #12]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	460a      	mov	r2, r1
 800be0e:	1e51      	subs	r1, r2, #1
 800be10:	22ff      	movs	r2, #255	@ 0xff
 800be12:	701a      	strb	r2, [r3, #0]
 800be14:	1c5a      	adds	r2, r3, #1
 800be16:	1e4b      	subs	r3, r1, #1
 800be18:	e003      	b.n	800be22 <_ZN12FlashManager19ReadVolumePerSecondEv+0x72>
 800be1a:	2100      	movs	r1, #0
 800be1c:	7011      	strb	r1, [r2, #0]
 800be1e:	3b01      	subs	r3, #1
 800be20:	3201      	adds	r2, #1
 800be22:	2b00      	cmp	r3, #0
 800be24:	daf9      	bge.n	800be1a <_ZN12FlashManager19ReadVolumePerSecondEv+0x6a>
	ReadData(data,VolumePerSecondAppendAddress,size, false);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	7d9a      	ldrb	r2, [r3, #22]
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2100      	movs	r1, #0
 800be2e:	9100      	str	r1, [sp, #0]
 800be30:	68f9      	ldr	r1, [r7, #12]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fb6a 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800be38:	f107 030b 	add.w	r3, r7, #11
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	68f9      	ldr	r1, [r7, #12]
 800be40:	4618      	mov	r0, r3
 800be42:	f004 f9b2 	bl	80101aa <memcpy>
    return value;
 800be46:	7afb      	ldrb	r3, [r7, #11]
 800be48:	46b5      	mov	sp, r6
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	371c      	adds	r7, #28
 800be4e:	46bd      	mov	sp, r7
 800be50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800be54 <_ZN12FlashManager18WriteFlowPerSecondEh>:
void FlashManager::WriteFlowPerSecond(uint8_t count){
 800be54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be58:	b087      	sub	sp, #28
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	460b      	mov	r3, r1
 800be60:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(FlowPerSecondAppendAddress,size, data);
}
 800be62:	466b      	mov	r3, sp
 800be64:	461e      	mov	r6, r3
	size_t size=1;
 800be66:	2301      	movs	r3, #1
 800be68:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800be6a:	6979      	ldr	r1, [r7, #20]
 800be6c:	460b      	mov	r3, r1
 800be6e:	3b01      	subs	r3, #1
 800be70:	613b      	str	r3, [r7, #16]
 800be72:	2300      	movs	r3, #0
 800be74:	4688      	mov	r8, r1
 800be76:	4699      	mov	r9, r3
 800be78:	f04f 0200 	mov.w	r2, #0
 800be7c:	f04f 0300 	mov.w	r3, #0
 800be80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800be84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800be88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800be8c:	2300      	movs	r3, #0
 800be8e:	460c      	mov	r4, r1
 800be90:	461d      	mov	r5, r3
 800be92:	f04f 0200 	mov.w	r2, #0
 800be96:	f04f 0300 	mov.w	r3, #0
 800be9a:	00eb      	lsls	r3, r5, #3
 800be9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bea0:	00e2      	lsls	r2, r4, #3
 800bea2:	1dcb      	adds	r3, r1, #7
 800bea4:	08db      	lsrs	r3, r3, #3
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	ebad 0d03 	sub.w	sp, sp, r3
 800beac:	466b      	mov	r3, sp
 800beae:	3300      	adds	r3, #0
 800beb0:	60fb      	str	r3, [r7, #12]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	460a      	mov	r2, r1
 800beb6:	1e51      	subs	r1, r2, #1
 800beb8:	78fa      	ldrb	r2, [r7, #3]
 800beba:	701a      	strb	r2, [r3, #0]
 800bebc:	1c5a      	adds	r2, r3, #1
 800bebe:	1e4b      	subs	r3, r1, #1
 800bec0:	e003      	b.n	800beca <_ZN12FlashManager18WriteFlowPerSecondEh+0x76>
 800bec2:	2100      	movs	r1, #0
 800bec4:	7011      	strb	r1, [r2, #0]
 800bec6:	3b01      	subs	r3, #1
 800bec8:	3201      	adds	r2, #1
 800beca:	2b00      	cmp	r3, #0
 800becc:	daf9      	bge.n	800bec2 <_ZN12FlashManager18WriteFlowPerSecondEh+0x6e>
	WriteData(FlowPerSecondAppendAddress,size, data);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	7dd9      	ldrb	r1, [r3, #23]
 800bed2:	697a      	ldr	r2, [r7, #20]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7ff fc76 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800bedc:	46b5      	mov	sp, r6
}
 800bede:	bf00      	nop
 800bee0:	371c      	adds	r7, #28
 800bee2:	46bd      	mov	sp, r7
 800bee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bee8 <_ZN12FlashManager17ReadFlowPerSecondEv>:
uint8_t FlashManager::ReadFlowPerSecond(){
 800bee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800beec:	b089      	sub	sp, #36	@ 0x24
 800beee:	af02      	add	r7, sp, #8
 800bef0:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,FlowPerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800bef2:	466b      	mov	r3, sp
 800bef4:	461e      	mov	r6, r3
	size_t size=1;
 800bef6:	2301      	movs	r3, #1
 800bef8:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800befa:	6979      	ldr	r1, [r7, #20]
 800befc:	460b      	mov	r3, r1
 800befe:	3b01      	subs	r3, #1
 800bf00:	613b      	str	r3, [r7, #16]
 800bf02:	2300      	movs	r3, #0
 800bf04:	4688      	mov	r8, r1
 800bf06:	4699      	mov	r9, r3
 800bf08:	f04f 0200 	mov.w	r2, #0
 800bf0c:	f04f 0300 	mov.w	r3, #0
 800bf10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bf14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bf18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	460c      	mov	r4, r1
 800bf20:	461d      	mov	r5, r3
 800bf22:	f04f 0200 	mov.w	r2, #0
 800bf26:	f04f 0300 	mov.w	r3, #0
 800bf2a:	00eb      	lsls	r3, r5, #3
 800bf2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf30:	00e2      	lsls	r2, r4, #3
 800bf32:	1dcb      	adds	r3, r1, #7
 800bf34:	08db      	lsrs	r3, r3, #3
 800bf36:	00db      	lsls	r3, r3, #3
 800bf38:	ebad 0d03 	sub.w	sp, sp, r3
 800bf3c:	ab02      	add	r3, sp, #8
 800bf3e:	3300      	adds	r3, #0
 800bf40:	60fb      	str	r3, [r7, #12]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	460a      	mov	r2, r1
 800bf46:	1e51      	subs	r1, r2, #1
 800bf48:	22ff      	movs	r2, #255	@ 0xff
 800bf4a:	701a      	strb	r2, [r3, #0]
 800bf4c:	1c5a      	adds	r2, r3, #1
 800bf4e:	1e4b      	subs	r3, r1, #1
 800bf50:	e003      	b.n	800bf5a <_ZN12FlashManager17ReadFlowPerSecondEv+0x72>
 800bf52:	2100      	movs	r1, #0
 800bf54:	7011      	strb	r1, [r2, #0]
 800bf56:	3b01      	subs	r3, #1
 800bf58:	3201      	adds	r2, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	daf9      	bge.n	800bf52 <_ZN12FlashManager17ReadFlowPerSecondEv+0x6a>
	ReadData(data,FlowPerSecondAppendAddress,size, false);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	7dda      	ldrb	r2, [r3, #23]
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	2100      	movs	r1, #0
 800bf66:	9100      	str	r1, [sp, #0]
 800bf68:	68f9      	ldr	r1, [r7, #12]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7ff face 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800bf70:	f107 030b 	add.w	r3, r7, #11
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	68f9      	ldr	r1, [r7, #12]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f004 f916 	bl	80101aa <memcpy>
    return value;
 800bf7e:	7afb      	ldrb	r3, [r7, #11]
 800bf80:	46b5      	mov	sp, r6
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	371c      	adds	r7, #28
 800bf86:	46bd      	mov	sp, r7
 800bf88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bf8c <_ZN12FlashManager19WritePumpMaxRunTimeEh>:
void FlashManager::WritePumpMaxRunTime(uint8_t second){
 800bf8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf90:	b087      	sub	sp, #28
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
 800bf96:	460b      	mov	r3, r1
 800bf98:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={second};
	WriteData(PumpMaxRunTimeAppendAddress,size, data);
}
 800bf9a:	466b      	mov	r3, sp
 800bf9c:	461e      	mov	r6, r3
	size_t size=1;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={second};
 800bfa2:	6979      	ldr	r1, [r7, #20]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	613b      	str	r3, [r7, #16]
 800bfaa:	2300      	movs	r3, #0
 800bfac:	4688      	mov	r8, r1
 800bfae:	4699      	mov	r9, r3
 800bfb0:	f04f 0200 	mov.w	r2, #0
 800bfb4:	f04f 0300 	mov.w	r3, #0
 800bfb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bfbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bfc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	461d      	mov	r5, r3
 800bfca:	f04f 0200 	mov.w	r2, #0
 800bfce:	f04f 0300 	mov.w	r3, #0
 800bfd2:	00eb      	lsls	r3, r5, #3
 800bfd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bfd8:	00e2      	lsls	r2, r4, #3
 800bfda:	1dcb      	adds	r3, r1, #7
 800bfdc:	08db      	lsrs	r3, r3, #3
 800bfde:	00db      	lsls	r3, r3, #3
 800bfe0:	ebad 0d03 	sub.w	sp, sp, r3
 800bfe4:	466b      	mov	r3, sp
 800bfe6:	3300      	adds	r3, #0
 800bfe8:	60fb      	str	r3, [r7, #12]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	460a      	mov	r2, r1
 800bfee:	1e51      	subs	r1, r2, #1
 800bff0:	78fa      	ldrb	r2, [r7, #3]
 800bff2:	701a      	strb	r2, [r3, #0]
 800bff4:	1c5a      	adds	r2, r3, #1
 800bff6:	1e4b      	subs	r3, r1, #1
 800bff8:	e003      	b.n	800c002 <_ZN12FlashManager19WritePumpMaxRunTimeEh+0x76>
 800bffa:	2100      	movs	r1, #0
 800bffc:	7011      	strb	r1, [r2, #0]
 800bffe:	3b01      	subs	r3, #1
 800c000:	3201      	adds	r2, #1
 800c002:	2b00      	cmp	r3, #0
 800c004:	daf9      	bge.n	800bffa <_ZN12FlashManager19WritePumpMaxRunTimeEh+0x6e>
	WriteData(PumpMaxRunTimeAppendAddress,size, data);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	7e19      	ldrb	r1, [r3, #24]
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff fbda 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800c014:	46b5      	mov	sp, r6
}
 800c016:	bf00      	nop
 800c018:	371c      	adds	r7, #28
 800c01a:	46bd      	mov	sp, r7
 800c01c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c020 <_ZN12FlashManager18ReadPumpMaxRunTimeEv>:
uint8_t FlashManager::ReadPumpMaxRunTime(){
 800c020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c024:	b089      	sub	sp, #36	@ 0x24
 800c026:	af02      	add	r7, sp, #8
 800c028:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,PumpMaxRunTimeAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800c02a:	466b      	mov	r3, sp
 800c02c:	461e      	mov	r6, r3
	size_t size=1;
 800c02e:	2301      	movs	r3, #1
 800c030:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800c032:	6979      	ldr	r1, [r7, #20]
 800c034:	460b      	mov	r3, r1
 800c036:	3b01      	subs	r3, #1
 800c038:	613b      	str	r3, [r7, #16]
 800c03a:	2300      	movs	r3, #0
 800c03c:	4688      	mov	r8, r1
 800c03e:	4699      	mov	r9, r3
 800c040:	f04f 0200 	mov.w	r2, #0
 800c044:	f04f 0300 	mov.w	r3, #0
 800c048:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c04c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c050:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c054:	2300      	movs	r3, #0
 800c056:	460c      	mov	r4, r1
 800c058:	461d      	mov	r5, r3
 800c05a:	f04f 0200 	mov.w	r2, #0
 800c05e:	f04f 0300 	mov.w	r3, #0
 800c062:	00eb      	lsls	r3, r5, #3
 800c064:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c068:	00e2      	lsls	r2, r4, #3
 800c06a:	1dcb      	adds	r3, r1, #7
 800c06c:	08db      	lsrs	r3, r3, #3
 800c06e:	00db      	lsls	r3, r3, #3
 800c070:	ebad 0d03 	sub.w	sp, sp, r3
 800c074:	ab02      	add	r3, sp, #8
 800c076:	3300      	adds	r3, #0
 800c078:	60fb      	str	r3, [r7, #12]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	460a      	mov	r2, r1
 800c07e:	1e51      	subs	r1, r2, #1
 800c080:	22ff      	movs	r2, #255	@ 0xff
 800c082:	701a      	strb	r2, [r3, #0]
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	1e4b      	subs	r3, r1, #1
 800c088:	e003      	b.n	800c092 <_ZN12FlashManager18ReadPumpMaxRunTimeEv+0x72>
 800c08a:	2100      	movs	r1, #0
 800c08c:	7011      	strb	r1, [r2, #0]
 800c08e:	3b01      	subs	r3, #1
 800c090:	3201      	adds	r2, #1
 800c092:	2b00      	cmp	r3, #0
 800c094:	daf9      	bge.n	800c08a <_ZN12FlashManager18ReadPumpMaxRunTimeEv+0x6a>
	ReadData(data,PumpMaxRunTimeAppendAddress,size, false);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	7e1a      	ldrb	r2, [r3, #24]
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	2100      	movs	r1, #0
 800c09e:	9100      	str	r1, [sp, #0]
 800c0a0:	68f9      	ldr	r1, [r7, #12]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7ff fa32 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c0a8:	f107 030b 	add.w	r3, r7, #11
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	68f9      	ldr	r1, [r7, #12]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f004 f87a 	bl	80101aa <memcpy>
    return value;
 800c0b6:	7afb      	ldrb	r3, [r7, #11]
 800c0b8:	46b5      	mov	sp, r6
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	371c      	adds	r7, #28
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c0c4 <_ZN12FlashManager20WriteValveMaxRunTimeEh>:
void FlashManager::WriteValveMaxRunTime(uint8_t second){
 800c0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0c8:	b087      	sub	sp, #28
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={second};
	WriteData(ValveMaxRunTimeAppendAddress,size, data);
}
 800c0d2:	466b      	mov	r3, sp
 800c0d4:	461e      	mov	r6, r3
	size_t size=1;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={second};
 800c0da:	6979      	ldr	r1, [r7, #20]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	613b      	str	r3, [r7, #16]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	4688      	mov	r8, r1
 800c0e6:	4699      	mov	r9, r3
 800c0e8:	f04f 0200 	mov.w	r2, #0
 800c0ec:	f04f 0300 	mov.w	r3, #0
 800c0f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c0f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c0f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	460c      	mov	r4, r1
 800c100:	461d      	mov	r5, r3
 800c102:	f04f 0200 	mov.w	r2, #0
 800c106:	f04f 0300 	mov.w	r3, #0
 800c10a:	00eb      	lsls	r3, r5, #3
 800c10c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c110:	00e2      	lsls	r2, r4, #3
 800c112:	1dcb      	adds	r3, r1, #7
 800c114:	08db      	lsrs	r3, r3, #3
 800c116:	00db      	lsls	r3, r3, #3
 800c118:	ebad 0d03 	sub.w	sp, sp, r3
 800c11c:	466b      	mov	r3, sp
 800c11e:	3300      	adds	r3, #0
 800c120:	60fb      	str	r3, [r7, #12]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	460a      	mov	r2, r1
 800c126:	1e51      	subs	r1, r2, #1
 800c128:	78fa      	ldrb	r2, [r7, #3]
 800c12a:	701a      	strb	r2, [r3, #0]
 800c12c:	1c5a      	adds	r2, r3, #1
 800c12e:	1e4b      	subs	r3, r1, #1
 800c130:	e003      	b.n	800c13a <_ZN12FlashManager20WriteValveMaxRunTimeEh+0x76>
 800c132:	2100      	movs	r1, #0
 800c134:	7011      	strb	r1, [r2, #0]
 800c136:	3b01      	subs	r3, #1
 800c138:	3201      	adds	r2, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	daf9      	bge.n	800c132 <_ZN12FlashManager20WriteValveMaxRunTimeEh+0x6e>
	WriteData(ValveMaxRunTimeAppendAddress,size, data);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	7e59      	ldrb	r1, [r3, #25]
 800c142:	697a      	ldr	r2, [r7, #20]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7ff fb3e 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800c14c:	46b5      	mov	sp, r6
}
 800c14e:	bf00      	nop
 800c150:	371c      	adds	r7, #28
 800c152:	46bd      	mov	sp, r7
 800c154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c158 <_ZN12FlashManager19ReadValveMaxRunTimeEv>:
uint8_t FlashManager::ReadValveMaxRunTime(){
 800c158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c15c:	b089      	sub	sp, #36	@ 0x24
 800c15e:	af02      	add	r7, sp, #8
 800c160:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,ValveMaxRunTimeAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800c162:	466b      	mov	r3, sp
 800c164:	461e      	mov	r6, r3
	size_t size=1;
 800c166:	2301      	movs	r3, #1
 800c168:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800c16a:	6979      	ldr	r1, [r7, #20]
 800c16c:	460b      	mov	r3, r1
 800c16e:	3b01      	subs	r3, #1
 800c170:	613b      	str	r3, [r7, #16]
 800c172:	2300      	movs	r3, #0
 800c174:	4688      	mov	r8, r1
 800c176:	4699      	mov	r9, r3
 800c178:	f04f 0200 	mov.w	r2, #0
 800c17c:	f04f 0300 	mov.w	r3, #0
 800c180:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c184:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c188:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c18c:	2300      	movs	r3, #0
 800c18e:	460c      	mov	r4, r1
 800c190:	461d      	mov	r5, r3
 800c192:	f04f 0200 	mov.w	r2, #0
 800c196:	f04f 0300 	mov.w	r3, #0
 800c19a:	00eb      	lsls	r3, r5, #3
 800c19c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c1a0:	00e2      	lsls	r2, r4, #3
 800c1a2:	1dcb      	adds	r3, r1, #7
 800c1a4:	08db      	lsrs	r3, r3, #3
 800c1a6:	00db      	lsls	r3, r3, #3
 800c1a8:	ebad 0d03 	sub.w	sp, sp, r3
 800c1ac:	ab02      	add	r3, sp, #8
 800c1ae:	3300      	adds	r3, #0
 800c1b0:	60fb      	str	r3, [r7, #12]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	460a      	mov	r2, r1
 800c1b6:	1e51      	subs	r1, r2, #1
 800c1b8:	22ff      	movs	r2, #255	@ 0xff
 800c1ba:	701a      	strb	r2, [r3, #0]
 800c1bc:	1c5a      	adds	r2, r3, #1
 800c1be:	1e4b      	subs	r3, r1, #1
 800c1c0:	e003      	b.n	800c1ca <_ZN12FlashManager19ReadValveMaxRunTimeEv+0x72>
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	7011      	strb	r1, [r2, #0]
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	3201      	adds	r2, #1
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	daf9      	bge.n	800c1c2 <_ZN12FlashManager19ReadValveMaxRunTimeEv+0x6a>
	ReadData(data,ValveMaxRunTimeAppendAddress,size, false);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	7e5a      	ldrb	r2, [r3, #25]
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	9100      	str	r1, [sp, #0]
 800c1d8:	68f9      	ldr	r1, [r7, #12]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff f996 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c1e0:	f107 030b 	add.w	r3, r7, #11
 800c1e4:	697a      	ldr	r2, [r7, #20]
 800c1e6:	68f9      	ldr	r1, [r7, #12]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f003 ffde 	bl	80101aa <memcpy>
    return value;
 800c1ee:	7afb      	ldrb	r3, [r7, #11]
 800c1f0:	46b5      	mov	sp, r6
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	371c      	adds	r7, #28
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c1fc <_ZN12FlashManager13WriteFlowRateEd>:
void FlashManager::WriteFlowRate(double_t rate){
 800c1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c200:	b089      	sub	sp, #36	@ 0x24
 800c202:	af00      	add	r7, sp, #0
 800c204:	60f8      	str	r0, [r7, #12]
 800c206:	ed87 0b00 	vstr	d0, [r7]
	size_t size=8;
    uint8_t data[size];
    memcpy(data, &rate, size);
	WriteData(FlowRateAppendAddress,size, data);
}
 800c20a:	466b      	mov	r3, sp
 800c20c:	461e      	mov	r6, r3
	size_t size=8;
 800c20e:	2308      	movs	r3, #8
 800c210:	61fb      	str	r3, [r7, #28]
    uint8_t data[size];
 800c212:	69f9      	ldr	r1, [r7, #28]
 800c214:	460b      	mov	r3, r1
 800c216:	3b01      	subs	r3, #1
 800c218:	61bb      	str	r3, [r7, #24]
 800c21a:	2300      	movs	r3, #0
 800c21c:	4688      	mov	r8, r1
 800c21e:	4699      	mov	r9, r3
 800c220:	f04f 0200 	mov.w	r2, #0
 800c224:	f04f 0300 	mov.w	r3, #0
 800c228:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c22c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c230:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c234:	2300      	movs	r3, #0
 800c236:	460c      	mov	r4, r1
 800c238:	461d      	mov	r5, r3
 800c23a:	f04f 0200 	mov.w	r2, #0
 800c23e:	f04f 0300 	mov.w	r3, #0
 800c242:	00eb      	lsls	r3, r5, #3
 800c244:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c248:	00e2      	lsls	r2, r4, #3
 800c24a:	1dcb      	adds	r3, r1, #7
 800c24c:	08db      	lsrs	r3, r3, #3
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	ebad 0d03 	sub.w	sp, sp, r3
 800c254:	466b      	mov	r3, sp
 800c256:	3300      	adds	r3, #0
 800c258:	617b      	str	r3, [r7, #20]
    memcpy(data, &rate, size);
 800c25a:	463b      	mov	r3, r7
 800c25c:	69fa      	ldr	r2, [r7, #28]
 800c25e:	4619      	mov	r1, r3
 800c260:	6978      	ldr	r0, [r7, #20]
 800c262:	f003 ffa2 	bl	80101aa <memcpy>
	WriteData(FlowRateAppendAddress,size, data);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	7b19      	ldrb	r1, [r3, #12]
 800c26a:	69fa      	ldr	r2, [r7, #28]
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f7ff faaa 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800c274:	46b5      	mov	sp, r6
}
 800c276:	bf00      	nop
 800c278:	3724      	adds	r7, #36	@ 0x24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c280 <_ZN12FlashManager12ReadFlowRateEv>:
double_t FlashManager::ReadFlowRate(){
 800c280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c284:	b08b      	sub	sp, #44	@ 0x2c
 800c286:	af02      	add	r7, sp, #8
 800c288:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FlowRateAppendAddress,size, false);
    double_t value;
    memcpy(&value, data, size);
    return value;
}
 800c28a:	466b      	mov	r3, sp
 800c28c:	461e      	mov	r6, r3
	size_t size=8;
 800c28e:	2308      	movs	r3, #8
 800c290:	61fb      	str	r3, [r7, #28]
	uint8_t data[size]={0};
 800c292:	69f9      	ldr	r1, [r7, #28]
 800c294:	460b      	mov	r3, r1
 800c296:	3b01      	subs	r3, #1
 800c298:	61bb      	str	r3, [r7, #24]
 800c29a:	2300      	movs	r3, #0
 800c29c:	4688      	mov	r8, r1
 800c29e:	4699      	mov	r9, r3
 800c2a0:	f04f 0200 	mov.w	r2, #0
 800c2a4:	f04f 0300 	mov.w	r3, #0
 800c2a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c2ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c2b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	461d      	mov	r5, r3
 800c2ba:	f04f 0200 	mov.w	r2, #0
 800c2be:	f04f 0300 	mov.w	r3, #0
 800c2c2:	00eb      	lsls	r3, r5, #3
 800c2c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c2c8:	00e2      	lsls	r2, r4, #3
 800c2ca:	1dcb      	adds	r3, r1, #7
 800c2cc:	08db      	lsrs	r3, r3, #3
 800c2ce:	00db      	lsls	r3, r3, #3
 800c2d0:	ebad 0d03 	sub.w	sp, sp, r3
 800c2d4:	ab02      	add	r3, sp, #8
 800c2d6:	3300      	adds	r3, #0
 800c2d8:	617b      	str	r3, [r7, #20]
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	460a      	mov	r2, r1
 800c2de:	1e51      	subs	r1, r2, #1
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	701a      	strb	r2, [r3, #0]
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	1e4b      	subs	r3, r1, #1
 800c2e8:	e003      	b.n	800c2f2 <_ZN12FlashManager12ReadFlowRateEv+0x72>
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	7011      	strb	r1, [r2, #0]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	3201      	adds	r2, #1
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	daf9      	bge.n	800c2ea <_ZN12FlashManager12ReadFlowRateEv+0x6a>
	ReadData(data,FlowRateAppendAddress,size, false);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	7b1a      	ldrb	r2, [r3, #12]
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	9100      	str	r1, [sp, #0]
 800c300:	6979      	ldr	r1, [r7, #20]
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7ff f902 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c308:	f107 0308 	add.w	r3, r7, #8
 800c30c:	69fa      	ldr	r2, [r7, #28]
 800c30e:	6979      	ldr	r1, [r7, #20]
 800c310:	4618      	mov	r0, r3
 800c312:	f003 ff4a 	bl	80101aa <memcpy>
    return value;
 800c316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c31a:	46b5      	mov	sp, r6
 800c31c:	ec43 2b17 	vmov	d7, r2, r3
}
 800c320:	eeb0 0a47 	vmov.f32	s0, s14
 800c324:	eef0 0a67 	vmov.f32	s1, s15
 800c328:	3724      	adds	r7, #36	@ 0x24
 800c32a:	46bd      	mov	sp, r7
 800c32c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c330 <_ZN12FlashManager15WriteVolumeRateEd>:

void FlashManager::WriteVolumeRate(double_t rate){
 800c330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c334:	b089      	sub	sp, #36	@ 0x24
 800c336:	af00      	add	r7, sp, #0
 800c338:	60f8      	str	r0, [r7, #12]
 800c33a:	ed87 0b00 	vstr	d0, [r7]
	size_t size=8;
    uint8_t data[size];
    memcpy(data, &rate, size);
	WriteData(VolumeRateAppendAddress, size, data);
}
 800c33e:	466b      	mov	r3, sp
 800c340:	461e      	mov	r6, r3
	size_t size=8;
 800c342:	2308      	movs	r3, #8
 800c344:	61fb      	str	r3, [r7, #28]
    uint8_t data[size];
 800c346:	69f9      	ldr	r1, [r7, #28]
 800c348:	460b      	mov	r3, r1
 800c34a:	3b01      	subs	r3, #1
 800c34c:	61bb      	str	r3, [r7, #24]
 800c34e:	2300      	movs	r3, #0
 800c350:	4688      	mov	r8, r1
 800c352:	4699      	mov	r9, r3
 800c354:	f04f 0200 	mov.w	r2, #0
 800c358:	f04f 0300 	mov.w	r3, #0
 800c35c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c360:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c364:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c368:	2300      	movs	r3, #0
 800c36a:	460c      	mov	r4, r1
 800c36c:	461d      	mov	r5, r3
 800c36e:	f04f 0200 	mov.w	r2, #0
 800c372:	f04f 0300 	mov.w	r3, #0
 800c376:	00eb      	lsls	r3, r5, #3
 800c378:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c37c:	00e2      	lsls	r2, r4, #3
 800c37e:	1dcb      	adds	r3, r1, #7
 800c380:	08db      	lsrs	r3, r3, #3
 800c382:	00db      	lsls	r3, r3, #3
 800c384:	ebad 0d03 	sub.w	sp, sp, r3
 800c388:	466b      	mov	r3, sp
 800c38a:	3300      	adds	r3, #0
 800c38c:	617b      	str	r3, [r7, #20]
    memcpy(data, &rate, size);
 800c38e:	463b      	mov	r3, r7
 800c390:	69fa      	ldr	r2, [r7, #28]
 800c392:	4619      	mov	r1, r3
 800c394:	6978      	ldr	r0, [r7, #20]
 800c396:	f003 ff08 	bl	80101aa <memcpy>
	WriteData(VolumeRateAppendAddress, size, data);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	7b59      	ldrb	r1, [r3, #13]
 800c39e:	69fa      	ldr	r2, [r7, #28]
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f7ff fa10 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800c3a8:	46b5      	mov	sp, r6
}
 800c3aa:	bf00      	nop
 800c3ac:	3724      	adds	r7, #36	@ 0x24
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c3b4 <_ZN12FlashManager14ReadVolumeRateEv>:
double_t FlashManager::ReadVolumeRate(){
 800c3b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3b8:	b08b      	sub	sp, #44	@ 0x2c
 800c3ba:	af02      	add	r7, sp, #8
 800c3bc:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,VolumeRateAppendAddress, size, false);
    double_t value;
    memcpy(&value, data, size);
    return value;
}
 800c3be:	466b      	mov	r3, sp
 800c3c0:	461e      	mov	r6, r3
	size_t size=8;
 800c3c2:	2308      	movs	r3, #8
 800c3c4:	61fb      	str	r3, [r7, #28]
	uint8_t data[size]={0};
 800c3c6:	69f9      	ldr	r1, [r7, #28]
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	61bb      	str	r3, [r7, #24]
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	4688      	mov	r8, r1
 800c3d2:	4699      	mov	r9, r3
 800c3d4:	f04f 0200 	mov.w	r2, #0
 800c3d8:	f04f 0300 	mov.w	r3, #0
 800c3dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c3e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c3e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	461d      	mov	r5, r3
 800c3ee:	f04f 0200 	mov.w	r2, #0
 800c3f2:	f04f 0300 	mov.w	r3, #0
 800c3f6:	00eb      	lsls	r3, r5, #3
 800c3f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c3fc:	00e2      	lsls	r2, r4, #3
 800c3fe:	1dcb      	adds	r3, r1, #7
 800c400:	08db      	lsrs	r3, r3, #3
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	ebad 0d03 	sub.w	sp, sp, r3
 800c408:	ab02      	add	r3, sp, #8
 800c40a:	3300      	adds	r3, #0
 800c40c:	617b      	str	r3, [r7, #20]
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	460a      	mov	r2, r1
 800c412:	1e51      	subs	r1, r2, #1
 800c414:	2200      	movs	r2, #0
 800c416:	701a      	strb	r2, [r3, #0]
 800c418:	1c5a      	adds	r2, r3, #1
 800c41a:	1e4b      	subs	r3, r1, #1
 800c41c:	e003      	b.n	800c426 <_ZN12FlashManager14ReadVolumeRateEv+0x72>
 800c41e:	2100      	movs	r1, #0
 800c420:	7011      	strb	r1, [r2, #0]
 800c422:	3b01      	subs	r3, #1
 800c424:	3201      	adds	r2, #1
 800c426:	2b00      	cmp	r3, #0
 800c428:	daf9      	bge.n	800c41e <_ZN12FlashManager14ReadVolumeRateEv+0x6a>
	ReadData(data,VolumeRateAppendAddress, size, false);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	7b5a      	ldrb	r2, [r3, #13]
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	2100      	movs	r1, #0
 800c432:	9100      	str	r1, [sp, #0]
 800c434:	6979      	ldr	r1, [r7, #20]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7ff f868 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c43c:	f107 0308 	add.w	r3, r7, #8
 800c440:	69fa      	ldr	r2, [r7, #28]
 800c442:	6979      	ldr	r1, [r7, #20]
 800c444:	4618      	mov	r0, r3
 800c446:	f003 feb0 	bl	80101aa <memcpy>
    return value;
 800c44a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c44e:	46b5      	mov	sp, r6
 800c450:	ec43 2b17 	vmov	d7, r2, r3
}
 800c454:	eeb0 0a47 	vmov.f32	s0, s14
 800c458:	eef0 0a67 	vmov.f32	s1, s15
 800c45c:	3724      	adds	r7, #36	@ 0x24
 800c45e:	46bd      	mov	sp, r7
 800c460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c464 <_ZN12FlashManager18WriteVolumeAverageEm>:

void FlashManager::WriteVolumeAverage(uint32_t avg){
 800c464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c468:	b087      	sub	sp, #28
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
 800c46e:	6039      	str	r1, [r7, #0]
	size_t size=4;
    uint8_t data[size];
    memcpy(data, &avg, size);
	WriteData(VolumeAverageAppendAddress, size, data);
}
 800c470:	466b      	mov	r3, sp
 800c472:	461e      	mov	r6, r3
	size_t size=4;
 800c474:	2304      	movs	r3, #4
 800c476:	617b      	str	r3, [r7, #20]
    uint8_t data[size];
 800c478:	6979      	ldr	r1, [r7, #20]
 800c47a:	460b      	mov	r3, r1
 800c47c:	3b01      	subs	r3, #1
 800c47e:	613b      	str	r3, [r7, #16]
 800c480:	2300      	movs	r3, #0
 800c482:	4688      	mov	r8, r1
 800c484:	4699      	mov	r9, r3
 800c486:	f04f 0200 	mov.w	r2, #0
 800c48a:	f04f 0300 	mov.w	r3, #0
 800c48e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c49a:	2300      	movs	r3, #0
 800c49c:	460c      	mov	r4, r1
 800c49e:	461d      	mov	r5, r3
 800c4a0:	f04f 0200 	mov.w	r2, #0
 800c4a4:	f04f 0300 	mov.w	r3, #0
 800c4a8:	00eb      	lsls	r3, r5, #3
 800c4aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c4ae:	00e2      	lsls	r2, r4, #3
 800c4b0:	1dcb      	adds	r3, r1, #7
 800c4b2:	08db      	lsrs	r3, r3, #3
 800c4b4:	00db      	lsls	r3, r3, #3
 800c4b6:	ebad 0d03 	sub.w	sp, sp, r3
 800c4ba:	466b      	mov	r3, sp
 800c4bc:	3300      	adds	r3, #0
 800c4be:	60fb      	str	r3, [r7, #12]
    memcpy(data, &avg, size);
 800c4c0:	463b      	mov	r3, r7
 800c4c2:	697a      	ldr	r2, [r7, #20]
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f003 fe6f 	bl	80101aa <memcpy>
	WriteData(VolumeAverageAppendAddress, size, data);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	7bd9      	ldrb	r1, [r3, #15]
 800c4d0:	697a      	ldr	r2, [r7, #20]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7ff f977 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800c4da:	46b5      	mov	sp, r6
}
 800c4dc:	bf00      	nop
 800c4de:	371c      	adds	r7, #28
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c4e6 <_ZN12FlashManager17ReadVolumeAverageEv>:
uint32_t FlashManager::ReadVolumeAverage(){
 800c4e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4ea:	b089      	sub	sp, #36	@ 0x24
 800c4ec:	af02      	add	r7, sp, #8
 800c4ee:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,VolumeAverageAppendAddress,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800c4f0:	466b      	mov	r3, sp
 800c4f2:	461e      	mov	r6, r3
	size_t size=4;
 800c4f4:	2304      	movs	r3, #4
 800c4f6:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800c4f8:	6979      	ldr	r1, [r7, #20]
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	613b      	str	r3, [r7, #16]
 800c500:	2300      	movs	r3, #0
 800c502:	4688      	mov	r8, r1
 800c504:	4699      	mov	r9, r3
 800c506:	f04f 0200 	mov.w	r2, #0
 800c50a:	f04f 0300 	mov.w	r3, #0
 800c50e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c51a:	2300      	movs	r3, #0
 800c51c:	460c      	mov	r4, r1
 800c51e:	461d      	mov	r5, r3
 800c520:	f04f 0200 	mov.w	r2, #0
 800c524:	f04f 0300 	mov.w	r3, #0
 800c528:	00eb      	lsls	r3, r5, #3
 800c52a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c52e:	00e2      	lsls	r2, r4, #3
 800c530:	1dcb      	adds	r3, r1, #7
 800c532:	08db      	lsrs	r3, r3, #3
 800c534:	00db      	lsls	r3, r3, #3
 800c536:	ebad 0d03 	sub.w	sp, sp, r3
 800c53a:	ab02      	add	r3, sp, #8
 800c53c:	3300      	adds	r3, #0
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	460a      	mov	r2, r1
 800c544:	1e51      	subs	r1, r2, #1
 800c546:	2200      	movs	r2, #0
 800c548:	701a      	strb	r2, [r3, #0]
 800c54a:	1c5a      	adds	r2, r3, #1
 800c54c:	1e4b      	subs	r3, r1, #1
 800c54e:	e003      	b.n	800c558 <_ZN12FlashManager17ReadVolumeAverageEv+0x72>
 800c550:	2100      	movs	r1, #0
 800c552:	7011      	strb	r1, [r2, #0]
 800c554:	3b01      	subs	r3, #1
 800c556:	3201      	adds	r2, #1
 800c558:	2b00      	cmp	r3, #0
 800c55a:	daf9      	bge.n	800c550 <_ZN12FlashManager17ReadVolumeAverageEv+0x6a>
	ReadData(data,VolumeAverageAppendAddress,size, false);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	7bda      	ldrb	r2, [r3, #15]
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	2100      	movs	r1, #0
 800c564:	9100      	str	r1, [sp, #0]
 800c566:	68f9      	ldr	r1, [r7, #12]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7fe ffcf 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c56e:	f107 0308 	add.w	r3, r7, #8
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	68f9      	ldr	r1, [r7, #12]
 800c576:	4618      	mov	r0, r3
 800c578:	f003 fe17 	bl	80101aa <memcpy>
    return value;
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	46b5      	mov	sp, r6
}
 800c580:	4618      	mov	r0, r3
 800c582:	371c      	adds	r7, #28
 800c584:	46bd      	mov	sp, r7
 800c586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c58a <_ZN12FlashManager16WriteFlowAverageEm>:
void FlashManager::WriteFlowAverage(uint32_t avg){
 800c58a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c58e:	b087      	sub	sp, #28
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
	size_t size=4;
    uint8_t data[size];
    memcpy(data, &avg, size);
	WriteData(FlowAverageAppendAddress, size, data);
}
 800c596:	466b      	mov	r3, sp
 800c598:	461e      	mov	r6, r3
	size_t size=4;
 800c59a:	2304      	movs	r3, #4
 800c59c:	617b      	str	r3, [r7, #20]
    uint8_t data[size];
 800c59e:	6979      	ldr	r1, [r7, #20]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	613b      	str	r3, [r7, #16]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	4688      	mov	r8, r1
 800c5aa:	4699      	mov	r9, r3
 800c5ac:	f04f 0200 	mov.w	r2, #0
 800c5b0:	f04f 0300 	mov.w	r3, #0
 800c5b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c5b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c5bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	461d      	mov	r5, r3
 800c5c6:	f04f 0200 	mov.w	r2, #0
 800c5ca:	f04f 0300 	mov.w	r3, #0
 800c5ce:	00eb      	lsls	r3, r5, #3
 800c5d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c5d4:	00e2      	lsls	r2, r4, #3
 800c5d6:	1dcb      	adds	r3, r1, #7
 800c5d8:	08db      	lsrs	r3, r3, #3
 800c5da:	00db      	lsls	r3, r3, #3
 800c5dc:	ebad 0d03 	sub.w	sp, sp, r3
 800c5e0:	466b      	mov	r3, sp
 800c5e2:	3300      	adds	r3, #0
 800c5e4:	60fb      	str	r3, [r7, #12]
    memcpy(data, &avg, size);
 800c5e6:	463b      	mov	r3, r7
 800c5e8:	697a      	ldr	r2, [r7, #20]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f003 fddc 	bl	80101aa <memcpy>
	WriteData(FlowAverageAppendAddress, size, data);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	7b99      	ldrb	r1, [r3, #14]
 800c5f6:	697a      	ldr	r2, [r7, #20]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7ff f8e4 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800c600:	46b5      	mov	sp, r6
}
 800c602:	bf00      	nop
 800c604:	371c      	adds	r7, #28
 800c606:	46bd      	mov	sp, r7
 800c608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c60c <_ZN12FlashManager15ReadFlowAverageEv>:
uint32_t FlashManager::ReadFlowAverage(){
 800c60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c610:	b089      	sub	sp, #36	@ 0x24
 800c612:	af02      	add	r7, sp, #8
 800c614:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FlowAverageAppendAddress,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800c616:	466b      	mov	r3, sp
 800c618:	461e      	mov	r6, r3
	size_t size=4;
 800c61a:	2304      	movs	r3, #4
 800c61c:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800c61e:	6979      	ldr	r1, [r7, #20]
 800c620:	460b      	mov	r3, r1
 800c622:	3b01      	subs	r3, #1
 800c624:	613b      	str	r3, [r7, #16]
 800c626:	2300      	movs	r3, #0
 800c628:	4688      	mov	r8, r1
 800c62a:	4699      	mov	r9, r3
 800c62c:	f04f 0200 	mov.w	r2, #0
 800c630:	f04f 0300 	mov.w	r3, #0
 800c634:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c638:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c63c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c640:	2300      	movs	r3, #0
 800c642:	460c      	mov	r4, r1
 800c644:	461d      	mov	r5, r3
 800c646:	f04f 0200 	mov.w	r2, #0
 800c64a:	f04f 0300 	mov.w	r3, #0
 800c64e:	00eb      	lsls	r3, r5, #3
 800c650:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c654:	00e2      	lsls	r2, r4, #3
 800c656:	1dcb      	adds	r3, r1, #7
 800c658:	08db      	lsrs	r3, r3, #3
 800c65a:	00db      	lsls	r3, r3, #3
 800c65c:	ebad 0d03 	sub.w	sp, sp, r3
 800c660:	ab02      	add	r3, sp, #8
 800c662:	3300      	adds	r3, #0
 800c664:	60fb      	str	r3, [r7, #12]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	460a      	mov	r2, r1
 800c66a:	1e51      	subs	r1, r2, #1
 800c66c:	2200      	movs	r2, #0
 800c66e:	701a      	strb	r2, [r3, #0]
 800c670:	1c5a      	adds	r2, r3, #1
 800c672:	1e4b      	subs	r3, r1, #1
 800c674:	e003      	b.n	800c67e <_ZN12FlashManager15ReadFlowAverageEv+0x72>
 800c676:	2100      	movs	r1, #0
 800c678:	7011      	strb	r1, [r2, #0]
 800c67a:	3b01      	subs	r3, #1
 800c67c:	3201      	adds	r2, #1
 800c67e:	2b00      	cmp	r3, #0
 800c680:	daf9      	bge.n	800c676 <_ZN12FlashManager15ReadFlowAverageEv+0x6a>
	ReadData(data,FlowAverageAppendAddress,size, false);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	7b9a      	ldrb	r2, [r3, #14]
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	2100      	movs	r1, #0
 800c68a:	9100      	str	r1, [sp, #0]
 800c68c:	68f9      	ldr	r1, [r7, #12]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7fe ff3c 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c694:	f107 0308 	add.w	r3, r7, #8
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	68f9      	ldr	r1, [r7, #12]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f003 fd84 	bl	80101aa <memcpy>
    return value;
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	46b5      	mov	sp, r6
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	371c      	adds	r7, #28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c6b0 <_ZN12FlashManager17WriteFirstEmgDataEttt>:
void FlashManager::WriteFirstEmgData(uint16_t maxTrim, uint16_t zeroPointMaxTrim, uint16_t zeroPointMinTrim){
 800c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	b093      	sub	sp, #76	@ 0x4c
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800c6ba:	4610      	mov	r0, r2
 800c6bc:	461a      	mov	r2, r3
 800c6be:	460b      	mov	r3, r1
 800c6c0:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	843b      	strh	r3, [r7, #32]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	83fb      	strh	r3, [r7, #30]
    memcpy(zeroPointMaxTrimData, &zeroPointMaxTrim, size);
    memcpy(zeroPointMinTrimData, &zeroPointMinTrim, size);
	WriteData(FirstEmgAppendAddress, size, maxTrimData);
	WriteData(FirstEmgAppendAddress+2, size, zeroPointMaxTrimData);
	WriteData(FirstEmgAppendAddress+4, size, zeroPointMinTrimData);
}
 800c6ca:	466b      	mov	r3, sp
 800c6cc:	461e      	mov	r6, r3
	size_t size=2;
 800c6ce:	2302      	movs	r3, #2
 800c6d0:	647b      	str	r3, [r7, #68]	@ 0x44
    uint8_t maxTrimData[size];
 800c6d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6da:	2300      	movs	r3, #0
 800c6dc:	460c      	mov	r4, r1
 800c6de:	461d      	mov	r5, r3
 800c6e0:	f04f 0200 	mov.w	r2, #0
 800c6e4:	f04f 0300 	mov.w	r3, #0
 800c6e8:	00eb      	lsls	r3, r5, #3
 800c6ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c6ee:	00e2      	lsls	r2, r4, #3
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	6139      	str	r1, [r7, #16]
 800c6f4:	617b      	str	r3, [r7, #20]
 800c6f6:	f04f 0200 	mov.w	r2, #0
 800c6fa:	f04f 0300 	mov.w	r3, #0
 800c6fe:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c702:	4628      	mov	r0, r5
 800c704:	00c3      	lsls	r3, r0, #3
 800c706:	4620      	mov	r0, r4
 800c708:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c70c:	4620      	mov	r0, r4
 800c70e:	00c2      	lsls	r2, r0, #3
 800c710:	1dcb      	adds	r3, r1, #7
 800c712:	08db      	lsrs	r3, r3, #3
 800c714:	00db      	lsls	r3, r3, #3
 800c716:	ebad 0d03 	sub.w	sp, sp, r3
 800c71a:	466b      	mov	r3, sp
 800c71c:	3300      	adds	r3, #0
 800c71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint8_t zeroPointMaxTrimData[size];
 800c720:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c722:	460b      	mov	r3, r1
 800c724:	3b01      	subs	r3, #1
 800c726:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c728:	2300      	movs	r3, #0
 800c72a:	60b9      	str	r1, [r7, #8]
 800c72c:	60fb      	str	r3, [r7, #12]
 800c72e:	f04f 0200 	mov.w	r2, #0
 800c732:	f04f 0300 	mov.w	r3, #0
 800c736:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c73a:	4628      	mov	r0, r5
 800c73c:	00c3      	lsls	r3, r0, #3
 800c73e:	4620      	mov	r0, r4
 800c740:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c744:	4620      	mov	r0, r4
 800c746:	00c2      	lsls	r2, r0, #3
 800c748:	2300      	movs	r3, #0
 800c74a:	6039      	str	r1, [r7, #0]
 800c74c:	607b      	str	r3, [r7, #4]
 800c74e:	f04f 0200 	mov.w	r2, #0
 800c752:	f04f 0300 	mov.w	r3, #0
 800c756:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c75a:	4628      	mov	r0, r5
 800c75c:	00c3      	lsls	r3, r0, #3
 800c75e:	4620      	mov	r0, r4
 800c760:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c764:	4620      	mov	r0, r4
 800c766:	00c2      	lsls	r2, r0, #3
 800c768:	1dcb      	adds	r3, r1, #7
 800c76a:	08db      	lsrs	r3, r3, #3
 800c76c:	00db      	lsls	r3, r3, #3
 800c76e:	ebad 0d03 	sub.w	sp, sp, r3
 800c772:	466b      	mov	r3, sp
 800c774:	3300      	adds	r3, #0
 800c776:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t zeroPointMinTrimData[size];
 800c778:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c77a:	460b      	mov	r3, r1
 800c77c:	3b01      	subs	r3, #1
 800c77e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c780:	2300      	movs	r3, #0
 800c782:	468a      	mov	sl, r1
 800c784:	469b      	mov	fp, r3
 800c786:	f04f 0200 	mov.w	r2, #0
 800c78a:	f04f 0300 	mov.w	r3, #0
 800c78e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c792:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c796:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c79a:	2300      	movs	r3, #0
 800c79c:	4688      	mov	r8, r1
 800c79e:	4699      	mov	r9, r3
 800c7a0:	f04f 0200 	mov.w	r2, #0
 800c7a4:	f04f 0300 	mov.w	r3, #0
 800c7a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c7ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c7b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c7b4:	1dcb      	adds	r3, r1, #7
 800c7b6:	08db      	lsrs	r3, r3, #3
 800c7b8:	00db      	lsls	r3, r3, #3
 800c7ba:	ebad 0d03 	sub.w	sp, sp, r3
 800c7be:	466b      	mov	r3, sp
 800c7c0:	3300      	adds	r3, #0
 800c7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(maxTrimData, &maxTrim, size);
 800c7c4:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 800c7c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c7ce:	f003 fcec 	bl	80101aa <memcpy>
    memcpy(zeroPointMaxTrimData, &zeroPointMaxTrim, size);
 800c7d2:	f107 0320 	add.w	r3, r7, #32
 800c7d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c7dc:	f003 fce5 	bl	80101aa <memcpy>
    memcpy(zeroPointMinTrimData, &zeroPointMinTrim, size);
 800c7e0:	f107 031e 	add.w	r3, r7, #30
 800c7e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7ea:	f003 fcde 	bl	80101aa <memcpy>
	WriteData(FirstEmgAppendAddress, size, maxTrimData);
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f0:	7c19      	ldrb	r1, [r3, #16]
 800c7f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7f8:	f7fe ffe6 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
	WriteData(FirstEmgAppendAddress+2, size, zeroPointMaxTrimData);
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fe:	7c1b      	ldrb	r3, [r3, #16]
 800c800:	3302      	adds	r3, #2
 800c802:	b2d9      	uxtb	r1, r3
 800c804:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c808:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c80a:	f7fe ffdd 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
	WriteData(FirstEmgAppendAddress+4, size, zeroPointMinTrimData);
 800c80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c810:	7c1b      	ldrb	r3, [r3, #16]
 800c812:	3304      	adds	r3, #4
 800c814:	b2d9      	uxtb	r1, r3
 800c816:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c81c:	f7fe ffd4 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800c820:	46b5      	mov	sp, r6
}
 800c822:	bf00      	nop
 800c824:	374c      	adds	r7, #76	@ 0x4c
 800c826:	46bd      	mov	sp, r7
 800c828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c82c <_ZN12FlashManager19ReadFirstEmgMaxTrimEv>:
uint16_t FlashManager::ReadFirstEmgMaxTrim(){
 800c82c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c830:	b089      	sub	sp, #36	@ 0x24
 800c832:	af02      	add	r7, sp, #8
 800c834:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FirstEmgAppendAddress,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800c836:	466b      	mov	r3, sp
 800c838:	461e      	mov	r6, r3
	size_t size=2;
 800c83a:	2302      	movs	r3, #2
 800c83c:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800c83e:	6979      	ldr	r1, [r7, #20]
 800c840:	460b      	mov	r3, r1
 800c842:	3b01      	subs	r3, #1
 800c844:	613b      	str	r3, [r7, #16]
 800c846:	2300      	movs	r3, #0
 800c848:	4688      	mov	r8, r1
 800c84a:	4699      	mov	r9, r3
 800c84c:	f04f 0200 	mov.w	r2, #0
 800c850:	f04f 0300 	mov.w	r3, #0
 800c854:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c858:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c85c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c860:	2300      	movs	r3, #0
 800c862:	460c      	mov	r4, r1
 800c864:	461d      	mov	r5, r3
 800c866:	f04f 0200 	mov.w	r2, #0
 800c86a:	f04f 0300 	mov.w	r3, #0
 800c86e:	00eb      	lsls	r3, r5, #3
 800c870:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c874:	00e2      	lsls	r2, r4, #3
 800c876:	1dcb      	adds	r3, r1, #7
 800c878:	08db      	lsrs	r3, r3, #3
 800c87a:	00db      	lsls	r3, r3, #3
 800c87c:	ebad 0d03 	sub.w	sp, sp, r3
 800c880:	ab02      	add	r3, sp, #8
 800c882:	3300      	adds	r3, #0
 800c884:	60fb      	str	r3, [r7, #12]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	460a      	mov	r2, r1
 800c88a:	1e51      	subs	r1, r2, #1
 800c88c:	2200      	movs	r2, #0
 800c88e:	701a      	strb	r2, [r3, #0]
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	1e4b      	subs	r3, r1, #1
 800c894:	e003      	b.n	800c89e <_ZN12FlashManager19ReadFirstEmgMaxTrimEv+0x72>
 800c896:	2100      	movs	r1, #0
 800c898:	7011      	strb	r1, [r2, #0]
 800c89a:	3b01      	subs	r3, #1
 800c89c:	3201      	adds	r2, #1
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	daf9      	bge.n	800c896 <_ZN12FlashManager19ReadFirstEmgMaxTrimEv+0x6a>
	ReadData(data,FirstEmgAppendAddress,size, false);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	7c1a      	ldrb	r2, [r3, #16]
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2100      	movs	r1, #0
 800c8aa:	9100      	str	r1, [sp, #0]
 800c8ac:	68f9      	ldr	r1, [r7, #12]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7fe fe2c 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c8b4:	f107 0308 	add.w	r3, r7, #8
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	68f9      	ldr	r1, [r7, #12]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f003 fc74 	bl	80101aa <memcpy>
    return value;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	46b5      	mov	sp, r6
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	371c      	adds	r7, #28
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c8d2 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv>:
uint16_t FlashManager::ReadFirstEmgZeroPointMaxTrim(){
 800c8d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8d6:	b089      	sub	sp, #36	@ 0x24
 800c8d8:	af02      	add	r7, sp, #8
 800c8da:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FirstEmgAppendAddress+2,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800c8dc:	466b      	mov	r3, sp
 800c8de:	461e      	mov	r6, r3
	size_t size=2;
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800c8e4:	6979      	ldr	r1, [r7, #20]
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	613b      	str	r3, [r7, #16]
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	4688      	mov	r8, r1
 800c8f0:	4699      	mov	r9, r3
 800c8f2:	f04f 0200 	mov.w	r2, #0
 800c8f6:	f04f 0300 	mov.w	r3, #0
 800c8fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c8fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c906:	2300      	movs	r3, #0
 800c908:	460c      	mov	r4, r1
 800c90a:	461d      	mov	r5, r3
 800c90c:	f04f 0200 	mov.w	r2, #0
 800c910:	f04f 0300 	mov.w	r3, #0
 800c914:	00eb      	lsls	r3, r5, #3
 800c916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c91a:	00e2      	lsls	r2, r4, #3
 800c91c:	1dcb      	adds	r3, r1, #7
 800c91e:	08db      	lsrs	r3, r3, #3
 800c920:	00db      	lsls	r3, r3, #3
 800c922:	ebad 0d03 	sub.w	sp, sp, r3
 800c926:	ab02      	add	r3, sp, #8
 800c928:	3300      	adds	r3, #0
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	460a      	mov	r2, r1
 800c930:	1e51      	subs	r1, r2, #1
 800c932:	2200      	movs	r2, #0
 800c934:	701a      	strb	r2, [r3, #0]
 800c936:	1c5a      	adds	r2, r3, #1
 800c938:	1e4b      	subs	r3, r1, #1
 800c93a:	e003      	b.n	800c944 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv+0x72>
 800c93c:	2100      	movs	r1, #0
 800c93e:	7011      	strb	r1, [r2, #0]
 800c940:	3b01      	subs	r3, #1
 800c942:	3201      	adds	r2, #1
 800c944:	2b00      	cmp	r3, #0
 800c946:	daf9      	bge.n	800c93c <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv+0x6a>
	ReadData(data,FirstEmgAppendAddress+2,size, false);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	7c1b      	ldrb	r3, [r3, #16]
 800c94c:	3302      	adds	r3, #2
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	2100      	movs	r1, #0
 800c954:	9100      	str	r1, [sp, #0]
 800c956:	68f9      	ldr	r1, [r7, #12]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7fe fdd7 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c95e:	f107 0308 	add.w	r3, r7, #8
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	68f9      	ldr	r1, [r7, #12]
 800c966:	4618      	mov	r0, r3
 800c968:	f003 fc1f 	bl	80101aa <memcpy>
    return value;
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	b29b      	uxth	r3, r3
 800c970:	46b5      	mov	sp, r6
}
 800c972:	4618      	mov	r0, r3
 800c974:	371c      	adds	r7, #28
 800c976:	46bd      	mov	sp, r7
 800c978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c97c <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv>:
uint16_t FlashManager::ReadFirstEmgZeroPointMinTrim(){
 800c97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c980:	b089      	sub	sp, #36	@ 0x24
 800c982:	af02      	add	r7, sp, #8
 800c984:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FirstEmgAppendAddress+4,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800c986:	466b      	mov	r3, sp
 800c988:	461e      	mov	r6, r3
	size_t size=2;
 800c98a:	2302      	movs	r3, #2
 800c98c:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800c98e:	6979      	ldr	r1, [r7, #20]
 800c990:	460b      	mov	r3, r1
 800c992:	3b01      	subs	r3, #1
 800c994:	613b      	str	r3, [r7, #16]
 800c996:	2300      	movs	r3, #0
 800c998:	4688      	mov	r8, r1
 800c99a:	4699      	mov	r9, r3
 800c99c:	f04f 0200 	mov.w	r2, #0
 800c9a0:	f04f 0300 	mov.w	r3, #0
 800c9a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c9a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c9ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	461d      	mov	r5, r3
 800c9b6:	f04f 0200 	mov.w	r2, #0
 800c9ba:	f04f 0300 	mov.w	r3, #0
 800c9be:	00eb      	lsls	r3, r5, #3
 800c9c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c9c4:	00e2      	lsls	r2, r4, #3
 800c9c6:	1dcb      	adds	r3, r1, #7
 800c9c8:	08db      	lsrs	r3, r3, #3
 800c9ca:	00db      	lsls	r3, r3, #3
 800c9cc:	ebad 0d03 	sub.w	sp, sp, r3
 800c9d0:	ab02      	add	r3, sp, #8
 800c9d2:	3300      	adds	r3, #0
 800c9d4:	60fb      	str	r3, [r7, #12]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	460a      	mov	r2, r1
 800c9da:	1e51      	subs	r1, r2, #1
 800c9dc:	2200      	movs	r2, #0
 800c9de:	701a      	strb	r2, [r3, #0]
 800c9e0:	1c5a      	adds	r2, r3, #1
 800c9e2:	1e4b      	subs	r3, r1, #1
 800c9e4:	e003      	b.n	800c9ee <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv+0x72>
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	7011      	strb	r1, [r2, #0]
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	3201      	adds	r2, #1
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	daf9      	bge.n	800c9e6 <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv+0x6a>
	ReadData(data,FirstEmgAppendAddress+4,size, false);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	7c1b      	ldrb	r3, [r3, #16]
 800c9f6:	3304      	adds	r3, #4
 800c9f8:	b2da      	uxtb	r2, r3
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	9100      	str	r1, [sp, #0]
 800ca00:	68f9      	ldr	r1, [r7, #12]
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7fe fd82 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800ca08:	f107 0308 	add.w	r3, r7, #8
 800ca0c:	697a      	ldr	r2, [r7, #20]
 800ca0e:	68f9      	ldr	r1, [r7, #12]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f003 fbca 	bl	80101aa <memcpy>
    return value;
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	46b5      	mov	sp, r6
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	371c      	adds	r7, #28
 800ca20:	46bd      	mov	sp, r7
 800ca22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ca26 <_ZN12FlashManager18WriteSecondEmgDataEttt>:

void FlashManager::WriteSecondEmgData(uint16_t maxTrim, uint16_t zeroPointMaxTrim, uint16_t zeroPointMinTrim){
 800ca26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2a:	b093      	sub	sp, #76	@ 0x4c
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca30:	4610      	mov	r0, r2
 800ca32:	461a      	mov	r2, r3
 800ca34:	460b      	mov	r3, r1
 800ca36:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ca38:	4603      	mov	r3, r0
 800ca3a:	843b      	strh	r3, [r7, #32]
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	83fb      	strh	r3, [r7, #30]
    memcpy(zeroPointMaxTrimData, &zeroPointMaxTrim, size);
    memcpy(zeroPointMinTrimData, &zeroPointMinTrim, size);
	WriteData(SecondEmgAppendAddress, size, maxTrimData);
	WriteData(SecondEmgAppendAddress+2, size, zeroPointMaxTrimData);
	WriteData(SecondEmgAppendAddress+4, size, zeroPointMinTrimData);
}
 800ca40:	466b      	mov	r3, sp
 800ca42:	461e      	mov	r6, r3
	size_t size=2;
 800ca44:	2302      	movs	r3, #2
 800ca46:	647b      	str	r3, [r7, #68]	@ 0x44
    uint8_t maxTrimData[size];
 800ca48:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca50:	2300      	movs	r3, #0
 800ca52:	460c      	mov	r4, r1
 800ca54:	461d      	mov	r5, r3
 800ca56:	f04f 0200 	mov.w	r2, #0
 800ca5a:	f04f 0300 	mov.w	r3, #0
 800ca5e:	00eb      	lsls	r3, r5, #3
 800ca60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca64:	00e2      	lsls	r2, r4, #3
 800ca66:	2300      	movs	r3, #0
 800ca68:	6139      	str	r1, [r7, #16]
 800ca6a:	617b      	str	r3, [r7, #20]
 800ca6c:	f04f 0200 	mov.w	r2, #0
 800ca70:	f04f 0300 	mov.w	r3, #0
 800ca74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ca78:	4628      	mov	r0, r5
 800ca7a:	00c3      	lsls	r3, r0, #3
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800ca82:	4620      	mov	r0, r4
 800ca84:	00c2      	lsls	r2, r0, #3
 800ca86:	1dcb      	adds	r3, r1, #7
 800ca88:	08db      	lsrs	r3, r3, #3
 800ca8a:	00db      	lsls	r3, r3, #3
 800ca8c:	ebad 0d03 	sub.w	sp, sp, r3
 800ca90:	466b      	mov	r3, sp
 800ca92:	3300      	adds	r3, #0
 800ca94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint8_t zeroPointMaxTrimData[size];
 800ca96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca98:	460b      	mov	r3, r1
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca9e:	2300      	movs	r3, #0
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	f04f 0200 	mov.w	r2, #0
 800caa8:	f04f 0300 	mov.w	r3, #0
 800caac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cab0:	4628      	mov	r0, r5
 800cab2:	00c3      	lsls	r3, r0, #3
 800cab4:	4620      	mov	r0, r4
 800cab6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800caba:	4620      	mov	r0, r4
 800cabc:	00c2      	lsls	r2, r0, #3
 800cabe:	2300      	movs	r3, #0
 800cac0:	6039      	str	r1, [r7, #0]
 800cac2:	607b      	str	r3, [r7, #4]
 800cac4:	f04f 0200 	mov.w	r2, #0
 800cac8:	f04f 0300 	mov.w	r3, #0
 800cacc:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cad0:	4628      	mov	r0, r5
 800cad2:	00c3      	lsls	r3, r0, #3
 800cad4:	4620      	mov	r0, r4
 800cad6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800cada:	4620      	mov	r0, r4
 800cadc:	00c2      	lsls	r2, r0, #3
 800cade:	1dcb      	adds	r3, r1, #7
 800cae0:	08db      	lsrs	r3, r3, #3
 800cae2:	00db      	lsls	r3, r3, #3
 800cae4:	ebad 0d03 	sub.w	sp, sp, r3
 800cae8:	466b      	mov	r3, sp
 800caea:	3300      	adds	r3, #0
 800caec:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t zeroPointMinTrimData[size];
 800caee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800caf0:	460b      	mov	r3, r1
 800caf2:	3b01      	subs	r3, #1
 800caf4:	633b      	str	r3, [r7, #48]	@ 0x30
 800caf6:	2300      	movs	r3, #0
 800caf8:	468a      	mov	sl, r1
 800cafa:	469b      	mov	fp, r3
 800cafc:	f04f 0200 	mov.w	r2, #0
 800cb00:	f04f 0300 	mov.w	r3, #0
 800cb04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cb08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cb0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb10:	2300      	movs	r3, #0
 800cb12:	4688      	mov	r8, r1
 800cb14:	4699      	mov	r9, r3
 800cb16:	f04f 0200 	mov.w	r2, #0
 800cb1a:	f04f 0300 	mov.w	r3, #0
 800cb1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb2a:	1dcb      	adds	r3, r1, #7
 800cb2c:	08db      	lsrs	r3, r3, #3
 800cb2e:	00db      	lsls	r3, r3, #3
 800cb30:	ebad 0d03 	sub.w	sp, sp, r3
 800cb34:	466b      	mov	r3, sp
 800cb36:	3300      	adds	r3, #0
 800cb38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(maxTrimData, &maxTrim, size);
 800cb3a:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 800cb3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb40:	4619      	mov	r1, r3
 800cb42:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cb44:	f003 fb31 	bl	80101aa <memcpy>
    memcpy(zeroPointMaxTrimData, &zeroPointMaxTrim, size);
 800cb48:	f107 0320 	add.w	r3, r7, #32
 800cb4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cb52:	f003 fb2a 	bl	80101aa <memcpy>
    memcpy(zeroPointMinTrimData, &zeroPointMinTrim, size);
 800cb56:	f107 031e 	add.w	r3, r7, #30
 800cb5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb60:	f003 fb23 	bl	80101aa <memcpy>
	WriteData(SecondEmgAppendAddress, size, maxTrimData);
 800cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb66:	7c59      	ldrb	r1, [r3, #17]
 800cb68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb6e:	f7fe fe2b 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
	WriteData(SecondEmgAppendAddress+2, size, zeroPointMaxTrimData);
 800cb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb74:	7c5b      	ldrb	r3, [r3, #17]
 800cb76:	3302      	adds	r3, #2
 800cb78:	b2d9      	uxtb	r1, r3
 800cb7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb80:	f7fe fe22 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
	WriteData(SecondEmgAppendAddress+4, size, zeroPointMinTrimData);
 800cb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb86:	7c5b      	ldrb	r3, [r3, #17]
 800cb88:	3304      	adds	r3, #4
 800cb8a:	b2d9      	uxtb	r1, r3
 800cb8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb92:	f7fe fe19 	bl	800b7c8 <_ZN12FlashManager9WriteDataEhiPh>
 800cb96:	46b5      	mov	sp, r6
}
 800cb98:	bf00      	nop
 800cb9a:	374c      	adds	r7, #76	@ 0x4c
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cba2 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv>:
uint16_t FlashManager::ReadSecondEmgMaxTrim(){
 800cba2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cba6:	b089      	sub	sp, #36	@ 0x24
 800cba8:	af02      	add	r7, sp, #8
 800cbaa:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,SecondEmgAppendAddress,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800cbac:	466b      	mov	r3, sp
 800cbae:	461e      	mov	r6, r3
	size_t size=2;
 800cbb0:	2302      	movs	r3, #2
 800cbb2:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800cbb4:	6979      	ldr	r1, [r7, #20]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	613b      	str	r3, [r7, #16]
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	4688      	mov	r8, r1
 800cbc0:	4699      	mov	r9, r3
 800cbc2:	f04f 0200 	mov.w	r2, #0
 800cbc6:	f04f 0300 	mov.w	r3, #0
 800cbca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cbce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cbd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	460c      	mov	r4, r1
 800cbda:	461d      	mov	r5, r3
 800cbdc:	f04f 0200 	mov.w	r2, #0
 800cbe0:	f04f 0300 	mov.w	r3, #0
 800cbe4:	00eb      	lsls	r3, r5, #3
 800cbe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cbea:	00e2      	lsls	r2, r4, #3
 800cbec:	1dcb      	adds	r3, r1, #7
 800cbee:	08db      	lsrs	r3, r3, #3
 800cbf0:	00db      	lsls	r3, r3, #3
 800cbf2:	ebad 0d03 	sub.w	sp, sp, r3
 800cbf6:	ab02      	add	r3, sp, #8
 800cbf8:	3300      	adds	r3, #0
 800cbfa:	60fb      	str	r3, [r7, #12]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	460a      	mov	r2, r1
 800cc00:	1e51      	subs	r1, r2, #1
 800cc02:	2200      	movs	r2, #0
 800cc04:	701a      	strb	r2, [r3, #0]
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	1e4b      	subs	r3, r1, #1
 800cc0a:	e003      	b.n	800cc14 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv+0x72>
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	7011      	strb	r1, [r2, #0]
 800cc10:	3b01      	subs	r3, #1
 800cc12:	3201      	adds	r2, #1
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	daf9      	bge.n	800cc0c <_ZN12FlashManager20ReadSecondEmgMaxTrimEv+0x6a>
	ReadData(data,SecondEmgAppendAddress,size, false);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	7c5a      	ldrb	r2, [r3, #17]
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	2100      	movs	r1, #0
 800cc20:	9100      	str	r1, [sp, #0]
 800cc22:	68f9      	ldr	r1, [r7, #12]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7fe fc71 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800cc2a:	f107 0308 	add.w	r3, r7, #8
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	68f9      	ldr	r1, [r7, #12]
 800cc32:	4618      	mov	r0, r3
 800cc34:	f003 fab9 	bl	80101aa <memcpy>
    return value;
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	46b5      	mov	sp, r6
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	371c      	adds	r7, #28
 800cc42:	46bd      	mov	sp, r7
 800cc44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cc48 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv>:
uint16_t FlashManager::ReadSecondEmgZeroPointMaxTrim(){
 800cc48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc4c:	b089      	sub	sp, #36	@ 0x24
 800cc4e:	af02      	add	r7, sp, #8
 800cc50:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,SecondEmgAppendAddress+2,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800cc52:	466b      	mov	r3, sp
 800cc54:	461e      	mov	r6, r3
	size_t size=2;
 800cc56:	2302      	movs	r3, #2
 800cc58:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800cc5a:	6979      	ldr	r1, [r7, #20]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	613b      	str	r3, [r7, #16]
 800cc62:	2300      	movs	r3, #0
 800cc64:	4688      	mov	r8, r1
 800cc66:	4699      	mov	r9, r3
 800cc68:	f04f 0200 	mov.w	r2, #0
 800cc6c:	f04f 0300 	mov.w	r3, #0
 800cc70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cc74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cc78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	460c      	mov	r4, r1
 800cc80:	461d      	mov	r5, r3
 800cc82:	f04f 0200 	mov.w	r2, #0
 800cc86:	f04f 0300 	mov.w	r3, #0
 800cc8a:	00eb      	lsls	r3, r5, #3
 800cc8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc90:	00e2      	lsls	r2, r4, #3
 800cc92:	1dcb      	adds	r3, r1, #7
 800cc94:	08db      	lsrs	r3, r3, #3
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	ebad 0d03 	sub.w	sp, sp, r3
 800cc9c:	ab02      	add	r3, sp, #8
 800cc9e:	3300      	adds	r3, #0
 800cca0:	60fb      	str	r3, [r7, #12]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	460a      	mov	r2, r1
 800cca6:	1e51      	subs	r1, r2, #1
 800cca8:	2200      	movs	r2, #0
 800ccaa:	701a      	strb	r2, [r3, #0]
 800ccac:	1c5a      	adds	r2, r3, #1
 800ccae:	1e4b      	subs	r3, r1, #1
 800ccb0:	e003      	b.n	800ccba <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv+0x72>
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	7011      	strb	r1, [r2, #0]
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	3201      	adds	r2, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	daf9      	bge.n	800ccb2 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv+0x6a>
	ReadData(data,SecondEmgAppendAddress+2,size, false);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	7c5b      	ldrb	r3, [r3, #17]
 800ccc2:	3302      	adds	r3, #2
 800ccc4:	b2da      	uxtb	r2, r3
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	2100      	movs	r1, #0
 800ccca:	9100      	str	r1, [sp, #0]
 800cccc:	68f9      	ldr	r1, [r7, #12]
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7fe fc1c 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800ccd4:	f107 0308 	add.w	r3, r7, #8
 800ccd8:	697a      	ldr	r2, [r7, #20]
 800ccda:	68f9      	ldr	r1, [r7, #12]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f003 fa64 	bl	80101aa <memcpy>
    return value;
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	46b5      	mov	sp, r6
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	371c      	adds	r7, #28
 800ccec:	46bd      	mov	sp, r7
 800ccee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ccf2 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv>:
uint16_t FlashManager::ReadSecondEmgZeroPointMinTrim(){
 800ccf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccf6:	b089      	sub	sp, #36	@ 0x24
 800ccf8:	af02      	add	r7, sp, #8
 800ccfa:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,SecondEmgAppendAddress+4,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800ccfc:	466b      	mov	r3, sp
 800ccfe:	461e      	mov	r6, r3
	size_t size=2;
 800cd00:	2302      	movs	r3, #2
 800cd02:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800cd04:	6979      	ldr	r1, [r7, #20]
 800cd06:	460b      	mov	r3, r1
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	613b      	str	r3, [r7, #16]
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	4688      	mov	r8, r1
 800cd10:	4699      	mov	r9, r3
 800cd12:	f04f 0200 	mov.w	r2, #0
 800cd16:	f04f 0300 	mov.w	r3, #0
 800cd1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cd1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cd22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cd26:	2300      	movs	r3, #0
 800cd28:	460c      	mov	r4, r1
 800cd2a:	461d      	mov	r5, r3
 800cd2c:	f04f 0200 	mov.w	r2, #0
 800cd30:	f04f 0300 	mov.w	r3, #0
 800cd34:	00eb      	lsls	r3, r5, #3
 800cd36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd3a:	00e2      	lsls	r2, r4, #3
 800cd3c:	1dcb      	adds	r3, r1, #7
 800cd3e:	08db      	lsrs	r3, r3, #3
 800cd40:	00db      	lsls	r3, r3, #3
 800cd42:	ebad 0d03 	sub.w	sp, sp, r3
 800cd46:	ab02      	add	r3, sp, #8
 800cd48:	3300      	adds	r3, #0
 800cd4a:	60fb      	str	r3, [r7, #12]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	460a      	mov	r2, r1
 800cd50:	1e51      	subs	r1, r2, #1
 800cd52:	2200      	movs	r2, #0
 800cd54:	701a      	strb	r2, [r3, #0]
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	1e4b      	subs	r3, r1, #1
 800cd5a:	e003      	b.n	800cd64 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv+0x72>
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	7011      	strb	r1, [r2, #0]
 800cd60:	3b01      	subs	r3, #1
 800cd62:	3201      	adds	r2, #1
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	daf9      	bge.n	800cd5c <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv+0x6a>
	ReadData(data,SecondEmgAppendAddress+4,size, false);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	7c5b      	ldrb	r3, [r3, #17]
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	b2da      	uxtb	r2, r3
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	2100      	movs	r1, #0
 800cd74:	9100      	str	r1, [sp, #0]
 800cd76:	68f9      	ldr	r1, [r7, #12]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7fe fbc7 	bl	800b50c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800cd7e:	f107 0308 	add.w	r3, r7, #8
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	68f9      	ldr	r1, [r7, #12]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f003 fa0f 	bl	80101aa <memcpy>
    return value;
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	46b5      	mov	sp, r6
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	371c      	adds	r7, #28
 800cd96:	46bd      	mov	sp, r7
 800cd98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cd9c <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	ed87 0a01 	vstr	s0, [r7, #4]
 800cda6:	ed97 0a01 	vldr	s0, [r7, #4]
 800cdaa:	f002 feeb 	bl	800fb84 <ceilf>
 800cdae:	eef0 7a40 	vmov.f32	s15, s0
 800cdb2:	eeb0 0a67 	vmov.f32	s0, s15
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	ed87 0a01 	vstr	s0, [r7, #4]
 800cdc6:	ed97 0a01 	vldr	s0, [r7, #4]
 800cdca:	f002 ff1d 	bl	800fc08 <floorf>
 800cdce:	eef0 7a40 	vmov.f32	s15, s0
 800cdd2:	eeb0 0a67 	vmov.f32	s0, s15
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <_ZN18VolumeFilterStructC1Ev>:
	float32_t FirstVolumeMAFArray[20];
	uint16_t FirstVolumeMAFLength;
	uint16_t Len=20;
	float PreviousHPFilteredValue;

} VolumeFilterStruct;
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2214      	movs	r2, #20
 800cde8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <_ZN16FlowFilterStructC1Ev>:
	float32_t SumFirstFlowMAFValue;
	float32_t FirstFlowMAFArray[40];
	uint16_t Len=40;
	uint8_t FirstFlowMAFLength;

} FlowFilterStruct;
 800cdfa:	b480      	push	{r7}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2228      	movs	r2, #40	@ 0x28
 800ce06:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <_ZN8LoadCellC1Ev>:
FlowFilterStruct FlowFilter;




LoadCell::LoadCell() {
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	4a04      	ldr	r2, [pc, #16]	@ (800ce34 <_ZN8LoadCellC1Ev+0x1c>)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr
 800ce34:	08010db0 	.word	0x08010db0

0800ce38 <_ZN8LoadCellD1Ev>:

LoadCell::~LoadCell() {
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	4a04      	ldr	r2, [pc, #16]	@ (800ce54 <_ZN8LoadCellD1Ev+0x1c>)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	08010db0 	.word	0x08010db0

0800ce58 <_ZN8LoadCellD0Ev>:
LoadCell::~LoadCell() {
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
}
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff ffe9 	bl	800ce38 <_ZN8LoadCellD1Ev>
 800ce66:	f242 0130 	movw	r1, #8240	@ 0x2030
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f002 fe86 	bl	800fb7c <_ZdlPvj>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4618      	mov	r0, r3
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <_ZN8LoadCell5SetupEv>:

void LoadCell::Setup(void){
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b082      	sub	sp, #8
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
	WriteToSPI(PHASE_ADDRESS, PHASE_VALUE);
 800ce82:	2200      	movs	r2, #0
 800ce84:	210e      	movs	r1, #14
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 fd30 	bl	800d8ec <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(GAIN_ADDRESS, GAIN_VALUE);
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	2110      	movs	r1, #16
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 fd2b 	bl	800d8ec <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(STATUS_COM_ADDRESS, STATUS_COM_VALUE);
 800ce96:	22a3      	movs	r2, #163	@ 0xa3
 800ce98:	2112      	movs	r1, #18
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 fd26 	bl	800d8ec <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(CONFIG_1_ADDRESS, CONFIG_1_VALUE);
 800cea0:	22f0      	movs	r2, #240	@ 0xf0
 800cea2:	2114      	movs	r1, #20
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 fd21 	bl	800d8ec <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(CONFIG_2_ADDRESS, CONFIG_2_VALUE);
 800ceaa:	220c      	movs	r2, #12
 800ceac:	2116      	movs	r1, #22
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 fd1c 	bl	800d8ec <_ZN8LoadCell10WriteToSPIEtt>
}
 800ceb4:	bf00      	nop
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <_ZN8LoadCell17ReadVolumeAndFlowEv>:
void LoadCell::ReadVolumeAndFlow(void){
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b08c      	sub	sp, #48	@ 0x30
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
	VolumeValue=0;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ceca:	461a      	mov	r2, r3
 800cecc:	f04f 0300 	mov.w	r3, #0
 800ced0:	6113      	str	r3, [r2, #16]
	uint32_t readLoadCellValue[6];

	ReadFromSPI(DATA_CH0_0,LOAD_CELL_ALL);
 800ced2:	2201      	movs	r2, #1
 800ced4:	2101      	movs	r1, #1
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 fc58 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[0] = VolumeAndFlowReadSPIValue;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cee2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cee6:	60fb      	str	r3, [r7, #12]
	Debugger.LoadcellSPI.Channel1=VolumeAndFlowReadSPIValue;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ceee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cef2:	461a      	mov	r2, r3
 800cef4:	4b74      	ldr	r3, [pc, #464]	@ (800d0c8 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800cef6:	67da      	str	r2, [r3, #124]	@ 0x7c
	ReadFromSPI(DATA_CH0_1,LOAD_CELL_ALL);
 800cef8:	2201      	movs	r2, #1
 800cefa:	2103      	movs	r1, #3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 fc45 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[1] = VolumeAndFlowReadSPIValue;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf08:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf0c:	613b      	str	r3, [r7, #16]
	Debugger.LoadcellSPI.Channel2=VolumeAndFlowReadSPIValue;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf14:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf18:	461a      	mov	r2, r3
 800cf1a:	4b6b      	ldr	r3, [pc, #428]	@ (800d0c8 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800cf1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	ReadFromSPI(DATA_CH0_2,LOAD_CELL_ALL);
 800cf20:	2201      	movs	r2, #1
 800cf22:	2105      	movs	r1, #5
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 fc31 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[2] = VolumeAndFlowReadSPIValue;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf30:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf34:	617b      	str	r3, [r7, #20]
	Debugger.LoadcellSPI.Channel3=VolumeAndFlowReadSPIValue;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf3c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf40:	461a      	mov	r2, r3
 800cf42:	4b61      	ldr	r3, [pc, #388]	@ (800d0c8 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800cf44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	ReadFromSPI(DATA_CH1_0,LOAD_CELL_ALL);
 800cf48:	2201      	movs	r2, #1
 800cf4a:	2107      	movs	r1, #7
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 fc1d 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[3] = VolumeAndFlowReadSPIValue;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf58:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf5c:	61bb      	str	r3, [r7, #24]
	Debugger.LoadcellSPI.Channel4=VolumeAndFlowReadSPIValue;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf64:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf68:	461a      	mov	r2, r3
 800cf6a:	4b57      	ldr	r3, [pc, #348]	@ (800d0c8 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800cf6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	ReadFromSPI(DATA_CH1_1,LOAD_CELL_ALL);
 800cf70:	2201      	movs	r2, #1
 800cf72:	2109      	movs	r1, #9
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 fc09 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[4] = VolumeAndFlowReadSPIValue;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf80:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf84:	61fb      	str	r3, [r7, #28]
	Debugger.LoadcellSPI.Channel5=VolumeAndFlowReadSPIValue;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cf8c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf90:	461a      	mov	r2, r3
 800cf92:	4b4d      	ldr	r3, [pc, #308]	@ (800d0c8 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800cf94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

	ReadFromSPI(DATA_CH1_2,LOAD_CELL_ALL);
 800cf98:	2201      	movs	r2, #1
 800cf9a:	210b      	movs	r1, #11
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 fbf5 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[5] = VolumeAndFlowReadSPIValue;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cfa8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cfac:	623b      	str	r3, [r7, #32]
	Debugger.LoadcellSPI.Channel6=VolumeAndFlowReadSPIValue;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cfb4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cfb8:	461a      	mov	r2, r3
 800cfba:	4b43      	ldr	r3, [pc, #268]	@ (800d0c8 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800cfbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cfc4:	e036      	b.n	800d034 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x178>
		VolumeValue = VolumeValue
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cfcc:	ed93 7a04 	vldr	s14, [r3, #16]
				+ readLoadCellValue[4] + (readLoadCellValue[3] << 8);
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	ee07 3a90 	vmov	s15, r3
 800cfd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfda:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	021b      	lsls	r3, r3, #8
 800cfe2:	ee07 3a90 	vmov	s15, r3
 800cfe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfea:	ee77 7a27 	vadd.f32	s15, s14, s15
		VolumeValue = VolumeValue
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cff4:	edc3 7a04 	vstr	s15, [r3, #16]
		FlowValue = readLoadCellValue[1]
 800cff8:	693a      	ldr	r2, [r7, #16]
				+ (readLoadCellValue[0] << 8);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	021b      	lsls	r3, r3, #8
 800cffe:	4413      	add	r3, r2
		FlowValue = readLoadCellValue[1]
 800d000:	ee07 3a90 	vmov	s15, r3
 800d004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d00e:	edc3 7a03 	vstr	s15, [r3, #12]
		FlowValue=(65536-FlowValue);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d018:	edd3 7a03 	vldr	s15, [r3, #12]
 800d01c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800d0cc <_ZN8LoadCell17ReadVolumeAndFlowEv+0x210>
 800d020:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d02a:	edc3 7a03 	vstr	s15, [r3, #12]
	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800d02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d030:	3301      	adds	r3, #1
 800d032:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d036:	2b27      	cmp	r3, #39	@ 0x27
 800d038:	ddc5      	ble.n	800cfc6 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x10a>
	}
	Debugger.ReadedVolume=VolumeValue;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	4a21      	ldr	r2, [pc, #132]	@ (800d0c8 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800d044:	6113      	str	r3, [r2, #16]
	float32_t readedVolume=ExponantialSmoothingFilter(0.5, VolumeValue, LastReadVolumeValue);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d04c:	edd3 7a04 	vldr	s15, [r3, #16]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d056:	ed93 7a08 	vldr	s14, [r3, #32]
 800d05a:	eeb0 1a47 	vmov.f32	s2, s14
 800d05e:	eef0 0a67 	vmov.f32	s1, s15
 800d062:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f000 fc6a 	bl	800d940 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800d06c:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	LastReadVolumeValue=readedVolume;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d076:	461a      	mov	r2, r3
 800d078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07a:	6213      	str	r3, [r2, #32]

	Debugger.ReadedFlow=FlowValue;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	4a10      	ldr	r2, [pc, #64]	@ (800d0c8 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800d086:	6153      	str	r3, [r2, #20]
	float32_t readedFlow=ExponantialSmoothingFilter(0.5, FlowValue, LastReadFlowValue);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d08e:	edd3 7a03 	vldr	s15, [r3, #12]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d098:	ed93 7a07 	vldr	s14, [r3, #28]
 800d09c:	eeb0 1a47 	vmov.f32	s2, s14
 800d0a0:	eef0 0a67 	vmov.f32	s1, s15
 800d0a4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 fc49 	bl	800d940 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800d0ae:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	LastReadFlowValue=readedFlow;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0bc:	61d3      	str	r3, [r2, #28]

}
 800d0be:	bf00      	nop
 800d0c0:	3730      	adds	r7, #48	@ 0x30
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	20009320 	.word	0x20009320
 800d0cc:	47800000 	.word	0x47800000

0800d0d0 <_ZN8LoadCell10ReadVolumeEb>:
void LoadCell::ReadVolume(bool useBuffer){
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b088      	sub	sp, #32
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	460b      	mov	r3, r1
 800d0da:	70fb      	strb	r3, [r7, #3]
	VolumeValue=0;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	f04f 0300 	mov.w	r3, #0
 800d0e8:	6113      	str	r3, [r2, #16]
	uint32_t readLoadCellValue[3];

	ReadFromSPI(DATA_CH1_0,LOAD_CELL_VOLUME);
 800d0ea:	2202      	movs	r2, #2
 800d0ec:	2107      	movs	r1, #7
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 fb4c 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[0] = VolumeReadSPIValue;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d0fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0fe:	60fb      	str	r3, [r7, #12]

	ReadFromSPI(DATA_CH1_1,LOAD_CELL_VOLUME);
 800d100:	2202      	movs	r2, #2
 800d102:	2109      	movs	r1, #9
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 fb41 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[1] = VolumeReadSPIValue;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d110:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d114:	613b      	str	r3, [r7, #16]

	ReadFromSPI(DATA_CH1_2,LOAD_CELL_VOLUME);
 800d116:	2202      	movs	r2, #2
 800d118:	210b      	movs	r1, #11
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 fb36 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[2] = VolumeReadSPIValue;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d126:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d12a:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800d12c:	2300      	movs	r3, #0
 800d12e:	61fb      	str	r3, [r7, #28]
 800d130:	e01b      	b.n	800d16a <_ZN8LoadCell10ReadVolumeEb+0x9a>
		VolumeValue = VolumeValue
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d138:	ed93 7a04 	vldr	s14, [r3, #16]
				+ readLoadCellValue[1] + (readLoadCellValue[0] << 8);
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	ee07 3a90 	vmov	s15, r3
 800d142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	021b      	lsls	r3, r3, #8
 800d14e:	ee07 3a90 	vmov	s15, r3
 800d152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d156:	ee77 7a27 	vadd.f32	s15, s14, s15
		VolumeValue = VolumeValue
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d160:	edc3 7a04 	vstr	s15, [r3, #16]
	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	3301      	adds	r3, #1
 800d168:	61fb      	str	r3, [r7, #28]
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	2b27      	cmp	r3, #39	@ 0x27
 800d16e:	dde0      	ble.n	800d132 <_ZN8LoadCell10ReadVolumeEb+0x62>
	}
	float32_t newVal=CalculateRealVolumeData(VolumeValue);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d176:	edd3 7a04 	vldr	s15, [r3, #16]
 800d17a:	eeb0 0a67 	vmov.f32	s0, s15
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 f894 	bl	800d2ac <_ZN8LoadCell23CalculateRealVolumeDataEf>
 800d184:	eef0 7a40 	vmov.f32	s15, s0
 800d188:	edc7 7a02 	vstr	s15, [r7, #8]
	if(newVal<MaxVolumeValue){
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d192:	ed93 7a05 	vldr	s14, [r3, #20]
 800d196:	edd7 7a02 	vldr	s15, [r7, #8]
 800d19a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a2:	bfcc      	ite	gt
 800d1a4:	2301      	movgt	r3, #1
 800d1a6:	2300      	movle	r3, #0
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d004      	beq.n	800d1b8 <_ZN8LoadCell10ReadVolumeEb+0xe8>
		newVal=MaxVolumeValue;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d1b4:	695b      	ldr	r3, [r3, #20]
 800d1b6:	60bb      	str	r3, [r7, #8]
	}
	MaxVolumeValue=newVal;
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800d1c0:	6153      	str	r3, [r2, #20]
	Debugger.Volume=newVal;
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	4a38      	ldr	r2, [pc, #224]	@ (800d2a8 <_ZN8LoadCell10ReadVolumeEb+0x1d8>)
 800d1c6:	6213      	str	r3, [r2, #32]
	if(useBuffer==false) return;
 800d1c8:	78fb      	ldrb	r3, [r7, #3]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d067      	beq.n	800d29e <_ZN8LoadCell10ReadVolumeEb+0x1ce>
	VolumeBufferLen%=1024;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	425a      	negs	r2, r3
 800d1d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d1e0:	bf58      	it	pl
 800d1e2:	4253      	negpl	r3, r2
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d1ea:	6053      	str	r3, [r2, #4]
	uint8_t *array;
	array = (uint8_t*)(&newVal);
 800d1ec:	f107 0308 	add.w	r3, r7, #8
 800d1f0:	61bb      	str	r3, [r7, #24]
	VolumeBuffer[VolumeBufferLen]=array[0];
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	781a      	ldrb	r2, [r3, #0]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	ee07 2a90 	vmov	s15, r2
 800d202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	4413      	add	r3, r2
 800d20c:	3304      	adds	r3, #4
 800d20e:	edc3 7a00 	vstr	s15, [r3]
	VolumeBuffer[VolumeBufferLen+1]=array[1];
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	3301      	adds	r3, #1
 800d216:	781a      	ldrb	r2, [r3, #0]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	3301      	adds	r3, #1
 800d222:	ee07 2a90 	vmov	s15, r2
 800d226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	4413      	add	r3, r2
 800d230:	3304      	adds	r3, #4
 800d232:	edc3 7a00 	vstr	s15, [r3]
	VolumeBuffer[VolumeBufferLen+2]=array[2];
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	3302      	adds	r3, #2
 800d23a:	781a      	ldrb	r2, [r3, #0]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	3302      	adds	r3, #2
 800d246:	ee07 2a90 	vmov	s15, r2
 800d24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	4413      	add	r3, r2
 800d254:	3304      	adds	r3, #4
 800d256:	edc3 7a00 	vstr	s15, [r3]
	VolumeBuffer[VolumeBufferLen+3]=array[3];
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	3303      	adds	r3, #3
 800d25e:	781a      	ldrb	r2, [r3, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	3303      	adds	r3, #3
 800d26a:	ee07 2a90 	vmov	s15, r2
 800d26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	3304      	adds	r3, #4
 800d27a:	edc3 7a00 	vstr	s15, [r3]
	VolumeBufferLen+=4;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	3304      	adds	r3, #4
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d28e:	6053      	str	r3, [r2, #4]
	Debugger.VolumeBufferLen=VolumeBufferLen;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	4a03      	ldr	r2, [pc, #12]	@ (800d2a8 <_ZN8LoadCell10ReadVolumeEb+0x1d8>)
 800d29a:	6013      	str	r3, [r2, #0]
 800d29c:	e000      	b.n	800d2a0 <_ZN8LoadCell10ReadVolumeEb+0x1d0>
	if(useBuffer==false) return;
 800d29e:	bf00      	nop
}
 800d2a0:	3720      	adds	r7, #32
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	20009320 	.word	0x20009320

0800d2ac <_ZN8LoadCell23CalculateRealVolumeDataEf>:
float32_t LoadCell::CalculateRealVolumeData(float32_t volume){
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b08a      	sub	sp, #40	@ 0x28
 800d2b0:	af02      	add	r7, sp, #8
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	ed87 0a00 	vstr	s0, [r7]
	float32_t newVolume = 0;
 800d2b8:	f04f 0300 	mov.w	r3, #0
 800d2bc:	61fb      	str	r3, [r7, #28]
	float32_t movingVolumeData = 0;
 800d2be:	f04f 0300 	mov.w	r3, #0
 800d2c2:	617b      	str	r3, [r7, #20]
	Debugger.ReadedVolume=volume;
 800d2c4:	4a5a      	ldr	r2, [pc, #360]	@ (800d430 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	6113      	str	r3, [r2, #16]
	float32_t readedVolume=ExponantialSmoothingFilter(0.5, volume, LastReadVolumeValue);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d2d0:	edd3 7a08 	vldr	s15, [r3, #32]
 800d2d4:	eeb0 1a67 	vmov.f32	s2, s15
 800d2d8:	edd7 0a00 	vldr	s1, [r7]
 800d2dc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 fb2d 	bl	800d940 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800d2e6:	ed87 0a04 	vstr	s0, [r7, #16]
	LastReadVolumeValue=readedVolume;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	6213      	str	r3, [r2, #32]

	VolumeFilter.FirstVolumeMAFLength++;
 800d2f6:	4b4f      	ldr	r3, [pc, #316]	@ (800d434 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d2f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	4b4c      	ldr	r3, [pc, #304]	@ (800d434 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d302:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	if (VolumeFilter.FirstVolumeMAFLength
 800d306:	4b4b      	ldr	r3, [pc, #300]	@ (800d434 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d308:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
			>= VolumeFilter.Len) {
 800d30c:	4b49      	ldr	r3, [pc, #292]	@ (800d434 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d30e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
	if (VolumeFilter.FirstVolumeMAFLength
 800d312:	429a      	cmp	r2, r3
 800d314:	d303      	bcc.n	800d31e <_ZN8LoadCell23CalculateRealVolumeDataEf+0x72>
		VolumeFilter.FirstVolumeMAFLength = 0;
 800d316:	4b47      	ldr	r3, [pc, #284]	@ (800d434 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d318:	2200      	movs	r2, #0
 800d31a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	}
	float32_t diff=readedVolume-SystemConfig.VolumeAverage;
 800d31e:	4b46      	ldr	r3, [pc, #280]	@ (800d438 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800d320:	699b      	ldr	r3, [r3, #24]
 800d322:	ee07 3a90 	vmov	s15, r3
 800d326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d32a:	ed97 7a04 	vldr	s14, [r7, #16]
 800d32e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d332:	edc7 7a06 	vstr	s15, [r7, #24]
	if(diff<0){
 800d336:	edd7 7a06 	vldr	s15, [r7, #24]
 800d33a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d342:	d502      	bpl.n	800d34a <_ZN8LoadCell23CalculateRealVolumeDataEf+0x9e>
		diff=0;
 800d344:	f04f 0300 	mov.w	r3, #0
 800d348:	61bb      	str	r3, [r7, #24]
	}
	Debugger.DiffAverageVolumeValue=diff;
 800d34a:	4a39      	ldr	r2, [pc, #228]	@ (800d430 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	6593      	str	r3, [r2, #88]	@ 0x58

	movingVolumeData = FilterInstance.MoovingAverage(
			VolumeFilter.FirstVolumeMAFArray,
			&VolumeFilter.SumFirstVolumeMAFValue,
			VolumeFilter.FirstVolumeMAFLength,VolumeFilter.Len , diff);
 800d350:	4b38      	ldr	r3, [pc, #224]	@ (800d434 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d352:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
	movingVolumeData = FilterInstance.MoovingAverage(
 800d356:	461a      	mov	r2, r3
			VolumeFilter.FirstVolumeMAFLength,VolumeFilter.Len , diff);
 800d358:	4b36      	ldr	r3, [pc, #216]	@ (800d434 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d35a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
	movingVolumeData = FilterInstance.MoovingAverage(
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	ed97 0a06 	vldr	s0, [r7, #24]
 800d364:	4613      	mov	r3, r2
 800d366:	4a33      	ldr	r2, [pc, #204]	@ (800d434 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800d368:	4934      	ldr	r1, [pc, #208]	@ (800d43c <_ZN8LoadCell23CalculateRealVolumeDataEf+0x190>)
 800d36a:	4835      	ldr	r0, [pc, #212]	@ (800d440 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x194>)
 800d36c:	f7fe f876 	bl	800b45c <_ZN6Filter14MoovingAverageEPfS0_mmf>
 800d370:	ed87 0a05 	vstr	s0, [r7, #20]
	Debugger.MovingAverageVolumeValue=movingVolumeData;
 800d374:	4a2e      	ldr	r2, [pc, #184]	@ (800d430 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	6513      	str	r3, [r2, #80]	@ 0x50
	float32_t newValue=movingVolumeData/SystemConfig.VolumeRate;
 800d37a:	4b2f      	ldr	r3, [pc, #188]	@ (800d438 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800d37c:	ed93 7a07 	vldr	s14, [r3, #28]
 800d380:	edd7 6a05 	vldr	s13, [r7, #20]
 800d384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d388:	edc7 7a03 	vstr	s15, [r7, #12]
	newVolume=ExponantialSmoothingFilter((newValue>10?0.5:0.85), newValue,LastVolumeValue);
 800d38c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d390:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800d394:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d39c:	dd02      	ble.n	800d3a4 <_ZN8LoadCell23CalculateRealVolumeDataEf+0xf8>
 800d39e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d3a2:	e001      	b.n	800d3a8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0xfc>
 800d3a4:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800d444 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x198>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d3ae:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800d3b2:	eeb0 1a47 	vmov.f32	s2, s14
 800d3b6:	edd7 0a03 	vldr	s1, [r7, #12]
 800d3ba:	eeb0 0a67 	vmov.f32	s0, s15
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 fabe 	bl	800d940 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800d3c4:	ed87 0a07 	vstr	s0, [r7, #28]
	if(newValue>5){
 800d3c8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d3cc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d3d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d8:	dd06      	ble.n	800d3e8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x13c>
		newVolume=ceil(newVolume);
 800d3da:	ed97 0a07 	vldr	s0, [r7, #28]
 800d3de:	f7ff fcdd 	bl	800cd9c <_ZSt4ceilf>
 800d3e2:	ed87 0a07 	vstr	s0, [r7, #28]
 800d3e6:	e005      	b.n	800d3f4 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x148>
	}
	else{
		newVolume=floor(newVolume);
 800d3e8:	ed97 0a07 	vldr	s0, [r7, #28]
 800d3ec:	f7ff fce6 	bl	800cdbc <_ZSt5floorf>
 800d3f0:	ed87 0a07 	vstr	s0, [r7, #28]
	}
	if(newVolume<0){
 800d3f4:	edd7 7a07 	vldr	s15, [r7, #28]
 800d3f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d400:	d502      	bpl.n	800d408 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x15c>
		newVolume=0;
 800d402:	f04f 0300 	mov.w	r3, #0
 800d406:	61fb      	str	r3, [r7, #28]
	}
	LastVolumeValue=newVolume;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d40e:	461a      	mov	r2, r3
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	6293      	str	r3, [r2, #40]	@ 0x28
	Debugger.LastVolume=LastVolumeValue;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d41c:	4a04      	ldr	r2, [pc, #16]	@ (800d430 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800d41e:	6193      	str	r3, [r2, #24]
	return newVolume;
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	ee07 3a90 	vmov	s15, r3
}
 800d426:	eeb0 0a67 	vmov.f32	s0, s15
 800d42a:	3720      	adds	r7, #32
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	20009320 	.word	0x20009320
 800d434:	20004eec 	.word	0x20004eec
 800d438:	200092a8 	.word	0x200092a8
 800d43c:	20004ef0 	.word	0x20004ef0
 800d440:	20004ee8 	.word	0x20004ee8
 800d444:	3f59999a 	.word	0x3f59999a

0800d448 <_ZN8LoadCell8ReadFlowEb>:
void LoadCell::ReadFlow(bool useBuffer){
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08a      	sub	sp, #40	@ 0x28
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	460b      	mov	r3, r1
 800d452:	70fb      	strb	r3, [r7, #3]
	uint32_t readLoadCellValue[6];

	ReadFromSPI(DATA_CH0_0,LOAD_CELL_FLOW);
 800d454:	2203      	movs	r2, #3
 800d456:	2101      	movs	r1, #1
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f997 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[0] = FlowReadSPIValue;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d464:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d468:	60fb      	str	r3, [r7, #12]

	ReadFromSPI(DATA_CH0_1,LOAD_CELL_FLOW);
 800d46a:	2203      	movs	r2, #3
 800d46c:	2103      	movs	r1, #3
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f98c 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[1] = FlowReadSPIValue;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d47a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d47e:	613b      	str	r3, [r7, #16]

	ReadFromSPI(DATA_CH0_2,LOAD_CELL_FLOW);
 800d480:	2203      	movs	r2, #3
 800d482:	2105      	movs	r1, #5
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 f981 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[2] = FlowReadSPIValue;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d490:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d494:	617b      	str	r3, [r7, #20]

	ReadFromSPI(DATA_CH1_0,LOAD_CELL_FLOW);
 800d496:	2203      	movs	r2, #3
 800d498:	2107      	movs	r1, #7
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f976 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[3] = FlowReadSPIValue;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d4a6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d4aa:	61bb      	str	r3, [r7, #24]

	ReadFromSPI(DATA_CH1_1,LOAD_CELL_FLOW);
 800d4ac:	2203      	movs	r2, #3
 800d4ae:	2109      	movs	r1, #9
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 f96b 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[4] = FlowReadSPIValue;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d4bc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d4c0:	61fb      	str	r3, [r7, #28]

	ReadFromSPI(DATA_CH1_2,LOAD_CELL_FLOW);
 800d4c2:	2203      	movs	r2, #3
 800d4c4:	210b      	movs	r1, #11
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f960 	bl	800d78c <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[5] = FlowReadSPIValue;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d4d2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d4d6:	623b      	str	r3, [r7, #32]
	FlowValue = readLoadCellValue[1]
 800d4d8:	693a      	ldr	r2, [r7, #16]
			+ (readLoadCellValue[0] << 8);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	021b      	lsls	r3, r3, #8
 800d4de:	4413      	add	r3, r2
	FlowValue = readLoadCellValue[1]
 800d4e0:	ee07 3a90 	vmov	s15, r3
 800d4e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d4ee:	edc3 7a03 	vstr	s15, [r3, #12]
	FlowValue=(65536-FlowValue);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d4f8:	edd3 7a03 	vldr	s15, [r3, #12]
 800d4fc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800d618 <_ZN8LoadCell8ReadFlowEb+0x1d0>
 800d500:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d50a:	edc3 7a03 	vstr	s15, [r3, #12]
	float32_t newVal=CalculateRealFlowData(FlowValue);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d514:	edd3 7a03 	vldr	s15, [r3, #12]
 800d518:	eeb0 0a67 	vmov.f32	s0, s15
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 f87f 	bl	800d620 <_ZN8LoadCell21CalculateRealFlowDataEf>
 800d522:	eef0 7a40 	vmov.f32	s15, s0
 800d526:	edc7 7a02 	vstr	s15, [r7, #8]
	Debugger.Flow=newVal;
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	4a3b      	ldr	r2, [pc, #236]	@ (800d61c <_ZN8LoadCell8ReadFlowEb+0x1d4>)
 800d52e:	6253      	str	r3, [r2, #36]	@ 0x24
	if(useBuffer==false) return;
 800d530:	78fb      	ldrb	r3, [r7, #3]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d06b      	beq.n	800d60e <_ZN8LoadCell8ReadFlowEb+0x1c6>
	FlowBufferLen%=1024;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	425a      	negs	r2, r3
 800d540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d544:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d548:	bf58      	it	pl
 800d54a:	4253      	negpl	r3, r2
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800d552:	6093      	str	r3, [r2, #8]
	uint8_t *array;
	array = (uint8_t*)(&newVal);
 800d554:	f107 0308 	add.w	r3, r7, #8
 800d558:	627b      	str	r3, [r7, #36]	@ 0x24
	FlowBuffer[FlowBufferLen]=array[0];
 800d55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55c:	781a      	ldrb	r2, [r3, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	ee07 2a90 	vmov	s15, r2
 800d56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	4413      	add	r3, r2
 800d578:	edc3 7a00 	vstr	s15, [r3]
	FlowBuffer[FlowBufferLen+1]=array[1];
 800d57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57e:	3301      	adds	r3, #1
 800d580:	781a      	ldrb	r2, [r3, #0]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	3301      	adds	r3, #1
 800d58c:	ee07 2a90 	vmov	s15, r2
 800d590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	4413      	add	r3, r2
 800d59e:	edc3 7a00 	vstr	s15, [r3]
	FlowBuffer[FlowBufferLen+2]=array[2];
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a4:	3302      	adds	r3, #2
 800d5a6:	781a      	ldrb	r2, [r3, #0]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	3302      	adds	r3, #2
 800d5b2:	ee07 2a90 	vmov	s15, r2
 800d5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4413      	add	r3, r2
 800d5c4:	edc3 7a00 	vstr	s15, [r3]
	FlowBuffer[FlowBufferLen+3]=array[3];
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ca:	3303      	adds	r3, #3
 800d5cc:	781a      	ldrb	r2, [r3, #0]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	3303      	adds	r3, #3
 800d5d8:	ee07 2a90 	vmov	s15, r2
 800d5dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	4413      	add	r3, r2
 800d5ea:	edc3 7a00 	vstr	s15, [r3]
	FlowBufferLen+=4;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	3304      	adds	r3, #4
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800d5fe:	6093      	str	r3, [r2, #8]
	Debugger.FlowBufferLen=FlowBufferLen;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	4a04      	ldr	r2, [pc, #16]	@ (800d61c <_ZN8LoadCell8ReadFlowEb+0x1d4>)
 800d60a:	6053      	str	r3, [r2, #4]
 800d60c:	e000      	b.n	800d610 <_ZN8LoadCell8ReadFlowEb+0x1c8>
	if(useBuffer==false) return;
 800d60e:	bf00      	nop
}
 800d610:	3728      	adds	r7, #40	@ 0x28
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	47800000 	.word	0x47800000
 800d61c:	20009320 	.word	0x20009320

0800d620 <_ZN8LoadCell21CalculateRealFlowDataEf>:
float32_t LoadCell::CalculateRealFlowData(float32_t flow){
 800d620:	b580      	push	{r7, lr}
 800d622:	b08a      	sub	sp, #40	@ 0x28
 800d624:	af02      	add	r7, sp, #8
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	ed87 0a00 	vstr	s0, [r7]
	float32_t newFlow = 0;
 800d62c:	f04f 0300 	mov.w	r3, #0
 800d630:	61fb      	str	r3, [r7, #28]
	float32_t movingFlowData = 0;
 800d632:	f04f 0300 	mov.w	r3, #0
 800d636:	617b      	str	r3, [r7, #20]

	Debugger.ReadedFlow=flow;
 800d638:	4a4e      	ldr	r2, [pc, #312]	@ (800d774 <_ZN8LoadCell21CalculateRealFlowDataEf+0x154>)
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	6153      	str	r3, [r2, #20]
	float32_t readedFlow=ExponantialSmoothingFilter(0.5, flow, LastReadFlowValue);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d644:	edd3 7a07 	vldr	s15, [r3, #28]
 800d648:	eeb0 1a67 	vmov.f32	s2, s15
 800d64c:	edd7 0a00 	vldr	s1, [r7]
 800d650:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 f973 	bl	800d940 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800d65a:	ed87 0a04 	vstr	s0, [r7, #16]
	LastReadFlowValue=readedFlow;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d664:	461a      	mov	r2, r3
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	61d3      	str	r3, [r2, #28]
	FlowFilter.FirstFlowMAFLength++;
 800d66a:	4b43      	ldr	r3, [pc, #268]	@ (800d778 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d66c:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800d670:	3301      	adds	r3, #1
 800d672:	b2da      	uxtb	r2, r3
 800d674:	4b40      	ldr	r3, [pc, #256]	@ (800d778 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d676:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	float32_t diffFlow=readedFlow-SystemConfig.FlowAverage;
 800d67a:	4b40      	ldr	r3, [pc, #256]	@ (800d77c <_ZN8LoadCell21CalculateRealFlowDataEf+0x15c>)
 800d67c:	695b      	ldr	r3, [r3, #20]
 800d67e:	ee07 3a90 	vmov	s15, r3
 800d682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d686:	ed97 7a04 	vldr	s14, [r7, #16]
 800d68a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d68e:	edc7 7a06 	vstr	s15, [r7, #24]
	if(diffFlow<0){
 800d692:	edd7 7a06 	vldr	s15, [r7, #24]
 800d696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d69e:	d502      	bpl.n	800d6a6 <_ZN8LoadCell21CalculateRealFlowDataEf+0x86>
		diffFlow=0;
 800d6a0:	f04f 0300 	mov.w	r3, #0
 800d6a4:	61bb      	str	r3, [r7, #24]
	}
	if (FlowFilter.FirstFlowMAFLength >= FlowFilter.Len) {
 800d6a6:	4b34      	ldr	r3, [pc, #208]	@ (800d778 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d6a8:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	4b32      	ldr	r3, [pc, #200]	@ (800d778 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d6b0:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	db03      	blt.n	800d6c0 <_ZN8LoadCell21CalculateRealFlowDataEf+0xa0>
		FlowFilter.FirstFlowMAFLength = 0;
 800d6b8:	4b2f      	ldr	r3, [pc, #188]	@ (800d778 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	}

	movingFlowData = FilterInstance.MoovingAverage(
			FlowFilter.FirstFlowMAFArray,
			&FlowFilter.SumFirstFlowMAFValue,
			FlowFilter.FirstFlowMAFLength,
 800d6c0:	4b2d      	ldr	r3, [pc, #180]	@ (800d778 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d6c2:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
	movingFlowData = FilterInstance.MoovingAverage(
 800d6c6:	461a      	mov	r2, r3
			FlowFilter.Len,
 800d6c8:	4b2b      	ldr	r3, [pc, #172]	@ (800d778 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d6ca:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
	movingFlowData = FilterInstance.MoovingAverage(
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	ed97 0a06 	vldr	s0, [r7, #24]
 800d6d4:	4613      	mov	r3, r2
 800d6d6:	4a28      	ldr	r2, [pc, #160]	@ (800d778 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800d6d8:	4929      	ldr	r1, [pc, #164]	@ (800d780 <_ZN8LoadCell21CalculateRealFlowDataEf+0x160>)
 800d6da:	482a      	ldr	r0, [pc, #168]	@ (800d784 <_ZN8LoadCell21CalculateRealFlowDataEf+0x164>)
 800d6dc:	f7fd febe 	bl	800b45c <_ZN6Filter14MoovingAverageEPfS0_mmf>
 800d6e0:	ed87 0a05 	vstr	s0, [r7, #20]
			diffFlow);
	float32_t newValue=movingFlowData/SystemConfig.FlowRate;
 800d6e4:	4b25      	ldr	r3, [pc, #148]	@ (800d77c <_ZN8LoadCell21CalculateRealFlowDataEf+0x15c>)
 800d6e6:	ed93 7a08 	vldr	s14, [r3, #32]
 800d6ea:	edd7 6a05 	vldr	s13, [r7, #20]
 800d6ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6f2:	edc7 7a03 	vstr	s15, [r7, #12]
	newFlow=ExponantialSmoothingFilter((newValue>4?0.5:0.85), newValue,LastFlowValue);
 800d6f6:	edd7 7a03 	vldr	s15, [r7, #12]
 800d6fa:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800d6fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d706:	dd02      	ble.n	800d70e <_ZN8LoadCell21CalculateRealFlowDataEf+0xee>
 800d708:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d70c:	e001      	b.n	800d712 <_ZN8LoadCell21CalculateRealFlowDataEf+0xf2>
 800d70e:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d788 <_ZN8LoadCell21CalculateRealFlowDataEf+0x168>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d718:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800d71c:	eeb0 1a47 	vmov.f32	s2, s14
 800d720:	edd7 0a03 	vldr	s1, [r7, #12]
 800d724:	eeb0 0a67 	vmov.f32	s0, s15
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 f909 	bl	800d940 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800d72e:	ed87 0a07 	vstr	s0, [r7, #28]
	if(newFlow<1.5){
 800d732:	edd7 7a07 	vldr	s15, [r7, #28]
 800d736:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d73a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d742:	d502      	bpl.n	800d74a <_ZN8LoadCell21CalculateRealFlowDataEf+0x12a>
		newFlow=0;
 800d744:	f04f 0300 	mov.w	r3, #0
 800d748:	61fb      	str	r3, [r7, #28]
	}
	LastFlowValue=newFlow;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d750:	461a      	mov	r2, r3
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	6253      	str	r3, [r2, #36]	@ 0x24
	Debugger.LastFlow=LastFlowValue;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d75e:	4a05      	ldr	r2, [pc, #20]	@ (800d774 <_ZN8LoadCell21CalculateRealFlowDataEf+0x154>)
 800d760:	61d3      	str	r3, [r2, #28]
	return newFlow;
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	ee07 3a90 	vmov	s15, r3
}
 800d768:	eeb0 0a67 	vmov.f32	s0, s15
 800d76c:	3720      	adds	r7, #32
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	20009320 	.word	0x20009320
 800d778:	20004f48 	.word	0x20004f48
 800d77c:	200092a8 	.word	0x200092a8
 800d780:	20004f4c 	.word	0x20004f4c
 800d784:	20004ee8 	.word	0x20004ee8
 800d788:	3f59999a 	.word	0x3f59999a

0800d78c <_ZN8LoadCell11ReadFromSPIEhi>:
void LoadCell::ReadFromSPI(uint8_t value, int type){
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	460b      	mov	r3, r1
 800d796:	607a      	str	r2, [r7, #4]
 800d798:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800d79a:	2200      	movs	r2, #0
 800d79c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d7a0:	481f      	ldr	r0, [pc, #124]	@ (800d820 <_ZN8LoadCell11ReadFromSPIEhi+0x94>)
 800d7a2:	f7f5 fc57 	bl	8003054 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(LOAD_CELL_SPI_CHANNEL, &value, 1);  //, 100
 800d7a6:	f107 030b 	add.w	r3, r7, #11
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	481d      	ldr	r0, [pc, #116]	@ (800d824 <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800d7b0:	f7f6 fa90 	bl	8003cd4 <HAL_SPI_Transmit_DMA>
	switch(type){
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b03      	cmp	r3, #3
 800d7b8:	d01d      	beq.n	800d7f6 <_ZN8LoadCell11ReadFromSPIEhi+0x6a>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2b03      	cmp	r3, #3
 800d7be:	dc24      	bgt.n	800d80a <_ZN8LoadCell11ReadFromSPIEhi+0x7e>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d003      	beq.n	800d7ce <_ZN8LoadCell11ReadFromSPIEhi+0x42>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2b02      	cmp	r3, #2
 800d7ca:	d00a      	beq.n	800d7e2 <_ZN8LoadCell11ReadFromSPIEhi+0x56>
		break;
		case LOAD_CELL_FLOW:
			HAL_SPI_Receive_DMA(LOAD_CELL_SPI_CHANNEL, &FlowReadSPIValue,1);  //, 100
		break;
		default:
			break;
 800d7cc:	e01d      	b.n	800d80a <_ZN8LoadCell11ReadFromSPIEhi+0x7e>
			HAL_SPI_Receive_DMA(LOAD_CELL_SPI_CHANNEL, &VolumeAndFlowReadSPIValue,1);  //, 100
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d7d4:	332c      	adds	r3, #44	@ 0x2c
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	4619      	mov	r1, r3
 800d7da:	4812      	ldr	r0, [pc, #72]	@ (800d824 <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800d7dc:	f7f6 fb2c 	bl	8003e38 <HAL_SPI_Receive_DMA>
		break;
 800d7e0:	e014      	b.n	800d80c <_ZN8LoadCell11ReadFromSPIEhi+0x80>
			HAL_SPI_Receive_DMA(LOAD_CELL_SPI_CHANNEL, &VolumeReadSPIValue,1);  //, 100
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d7e8:	332d      	adds	r3, #45	@ 0x2d
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	480d      	ldr	r0, [pc, #52]	@ (800d824 <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800d7f0:	f7f6 fb22 	bl	8003e38 <HAL_SPI_Receive_DMA>
		break;
 800d7f4:	e00a      	b.n	800d80c <_ZN8LoadCell11ReadFromSPIEhi+0x80>
			HAL_SPI_Receive_DMA(LOAD_CELL_SPI_CHANNEL, &FlowReadSPIValue,1);  //, 100
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d7fc:	332e      	adds	r3, #46	@ 0x2e
 800d7fe:	2201      	movs	r2, #1
 800d800:	4619      	mov	r1, r3
 800d802:	4808      	ldr	r0, [pc, #32]	@ (800d824 <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800d804:	f7f6 fb18 	bl	8003e38 <HAL_SPI_Receive_DMA>
		break;
 800d808:	e000      	b.n	800d80c <_ZN8LoadCell11ReadFromSPIEhi+0x80>
			break;
 800d80a:	bf00      	nop
	}
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 800d80c:	2201      	movs	r2, #1
 800d80e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d812:	4803      	ldr	r0, [pc, #12]	@ (800d820 <_ZN8LoadCell11ReadFromSPIEhi+0x94>)
 800d814:	f7f5 fc1e 	bl	8003054 <HAL_GPIO_WritePin>
}
 800d818:	bf00      	nop
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	40020000 	.word	0x40020000
 800d824:	20000180 	.word	0x20000180

0800d828 <_ZN8LoadCell11ClearParamsEv>:
void LoadCell::ClearParams(void){
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
	VolumeValue=0;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d836:	461a      	mov	r2, r3
 800d838:	f04f 0300 	mov.w	r3, #0
 800d83c:	6113      	str	r3, [r2, #16]
	FlowValue=0;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d844:	461a      	mov	r2, r3
 800d846:	f04f 0300 	mov.w	r3, #0
 800d84a:	60d3      	str	r3, [r2, #12]
	LastVolumeValue=0;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d852:	461a      	mov	r2, r3
 800d854:	f04f 0300 	mov.w	r3, #0
 800d858:	6293      	str	r3, [r2, #40]	@ 0x28
	LastFlowValue=0;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d860:	461a      	mov	r2, r3
 800d862:	f04f 0300 	mov.w	r3, #0
 800d866:	6253      	str	r3, [r2, #36]	@ 0x24
	LastReadVolumeValue=0;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d86e:	461a      	mov	r2, r3
 800d870:	f04f 0300 	mov.w	r3, #0
 800d874:	6213      	str	r3, [r2, #32]
	LastReadFlowValue=0;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d87c:	461a      	mov	r2, r3
 800d87e:	f04f 0300 	mov.w	r3, #0
 800d882:	61d3      	str	r3, [r2, #28]
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800d884:	2300      	movs	r3, #0
 800d886:	60fb      	str	r3, [r7, #12]
 800d888:	e009      	b.n	800d89e <_ZN8LoadCell11ClearParamsEv+0x76>
		VolumeSamples[i]=0;
 800d88a:	4a14      	ldr	r2, [pc, #80]	@ (800d8dc <_ZN8LoadCell11ClearParamsEv+0xb4>)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	4413      	add	r3, r2
 800d892:	f04f 0200 	mov.w	r2, #0
 800d896:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	3301      	adds	r3, #1
 800d89c:	60fb      	str	r3, [r7, #12]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2b0a      	cmp	r3, #10
 800d8a2:	ddf2      	ble.n	800d88a <_ZN8LoadCell11ClearParamsEv+0x62>
	}
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	60bb      	str	r3, [r7, #8]
 800d8a8:	e009      	b.n	800d8be <_ZN8LoadCell11ClearParamsEv+0x96>
		FlowSamples[i]=0;
 800d8aa:	4a0d      	ldr	r2, [pc, #52]	@ (800d8e0 <_ZN8LoadCell11ClearParamsEv+0xb8>)
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	4413      	add	r3, r2
 800d8b2:	f04f 0200 	mov.w	r2, #0
 800d8b6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	60bb      	str	r3, [r7, #8]
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	2b04      	cmp	r3, #4
 800d8c2:	ddf2      	ble.n	800d8aa <_ZN8LoadCell11ClearParamsEv+0x82>
	}
	FlowIndex=0;
 800d8c4:	4b07      	ldr	r3, [pc, #28]	@ (800d8e4 <_ZN8LoadCell11ClearParamsEv+0xbc>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	701a      	strb	r2, [r3, #0]
	VolumeIndex=0;
 800d8ca:	4b07      	ldr	r3, [pc, #28]	@ (800d8e8 <_ZN8LoadCell11ClearParamsEv+0xc0>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	701a      	strb	r2, [r3, #0]
}
 800d8d0:	bf00      	nop
 800d8d2:	3714      	adds	r7, #20
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr
 800d8dc:	20000010 	.word	0x20000010
 800d8e0:	2000003c 	.word	0x2000003c
 800d8e4:	20004ee4 	.word	0x20004ee4
 800d8e8:	20004ee5 	.word	0x20004ee5

0800d8ec <_ZN8LoadCell10WriteToSPIEtt>:

void LoadCell::WriteToSPI(uint16_t SPIAddress, uint16_t value){
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	807b      	strh	r3, [r7, #2]
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	803b      	strh	r3, [r7, #0]

	uint8_t data[2];
	data[0] = SPIAddress;
 800d8fc:	887b      	ldrh	r3, [r7, #2]
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 800d902:	883b      	ldrh	r3, [r7, #0]
 800d904:	b2db      	uxtb	r3, r3
 800d906:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800d908:	2200      	movs	r2, #0
 800d90a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d90e:	480a      	ldr	r0, [pc, #40]	@ (800d938 <_ZN8LoadCell10WriteToSPIEtt+0x4c>)
 800d910:	f7f5 fba0 	bl	8003054 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(LOAD_CELL_SPI_CHANNEL, data, 2, 100);
 800d914:	f107 010c 	add.w	r1, r7, #12
 800d918:	2364      	movs	r3, #100	@ 0x64
 800d91a:	2202      	movs	r2, #2
 800d91c:	4807      	ldr	r0, [pc, #28]	@ (800d93c <_ZN8LoadCell10WriteToSPIEtt+0x50>)
 800d91e:	f7f6 f894 	bl	8003a4a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 800d922:	2201      	movs	r2, #1
 800d924:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d928:	4803      	ldr	r0, [pc, #12]	@ (800d938 <_ZN8LoadCell10WriteToSPIEtt+0x4c>)
 800d92a:	f7f5 fb93 	bl	8003054 <HAL_GPIO_WritePin>
}
 800d92e:	bf00      	nop
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	40020000 	.word	0x40020000
 800d93c:	20000180 	.word	0x20000180

0800d940 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>:
		}
	}
    return (sum==0)?0:sum / cnt;
}

float32_t LoadCell::ExponantialSmoothingFilter(float32_t alpha,float32_t value,float32_t lastValue){
 800d940:	b480      	push	{r7}
 800d942:	b087      	sub	sp, #28
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	ed87 0a02 	vstr	s0, [r7, #8]
 800d94c:	edc7 0a01 	vstr	s1, [r7, #4]
 800d950:	ed87 1a00 	vstr	s2, [r7]
    float forecast = alpha * value + (1 - alpha) * lastValue;
 800d954:	ed97 7a02 	vldr	s14, [r7, #8]
 800d958:	edd7 7a01 	vldr	s15, [r7, #4]
 800d95c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d960:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d964:	edd7 7a02 	vldr	s15, [r7, #8]
 800d968:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d96c:	edd7 7a00 	vldr	s15, [r7]
 800d970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d974:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d978:	edc7 7a05 	vstr	s15, [r7, #20]
    return forecast;
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	ee07 3a90 	vmov	s15, r3
}
 800d982:	eeb0 0a67 	vmov.f32	s0, s15
 800d986:	371c      	adds	r7, #28
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <_ZN8LoadCell12ClearSamplesEv>:
void LoadCell::ClearSamples(){
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800d998:	2300      	movs	r3, #0
 800d99a:	60fb      	str	r3, [r7, #12]
 800d99c:	e008      	b.n	800d9b0 <_ZN8LoadCell12ClearSamplesEv+0x20>
		FlowSamples[i]=-1;
 800d99e:	4a13      	ldr	r2, [pc, #76]	@ (800d9ec <_ZN8LoadCell12ClearSamplesEv+0x5c>)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	4413      	add	r3, r2
 800d9a6:	4a12      	ldr	r2, [pc, #72]	@ (800d9f0 <_ZN8LoadCell12ClearSamplesEv+0x60>)
 800d9a8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2b04      	cmp	r3, #4
 800d9b4:	ddf3      	ble.n	800d99e <_ZN8LoadCell12ClearSamplesEv+0xe>
	}
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	60bb      	str	r3, [r7, #8]
 800d9ba:	e008      	b.n	800d9ce <_ZN8LoadCell12ClearSamplesEv+0x3e>
		VolumeSamples[i]=-1;
 800d9bc:	4a0d      	ldr	r2, [pc, #52]	@ (800d9f4 <_ZN8LoadCell12ClearSamplesEv+0x64>)
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	4413      	add	r3, r2
 800d9c4:	4a0a      	ldr	r2, [pc, #40]	@ (800d9f0 <_ZN8LoadCell12ClearSamplesEv+0x60>)
 800d9c6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	60bb      	str	r3, [r7, #8]
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	2b0a      	cmp	r3, #10
 800d9d2:	ddf3      	ble.n	800d9bc <_ZN8LoadCell12ClearSamplesEv+0x2c>
	}
	VolumeIndex=0;
 800d9d4:	4b08      	ldr	r3, [pc, #32]	@ (800d9f8 <_ZN8LoadCell12ClearSamplesEv+0x68>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	701a      	strb	r2, [r3, #0]
	FlowIndex=0;
 800d9da:	4b08      	ldr	r3, [pc, #32]	@ (800d9fc <_ZN8LoadCell12ClearSamplesEv+0x6c>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	701a      	strb	r2, [r3, #0]

}
 800d9e0:	bf00      	nop
 800d9e2:	3714      	adds	r7, #20
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr
 800d9ec:	2000003c 	.word	0x2000003c
 800d9f0:	bf800000 	.word	0xbf800000
 800d9f4:	20000010 	.word	0x20000010
 800d9f8:	20004ee5 	.word	0x20004ee5
 800d9fc:	20004ee4 	.word	0x20004ee4

0800da00 <_Z41__static_initialization_and_destruction_0ii>:
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d10d      	bne.n	800da2c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da16:	4293      	cmp	r3, r2
 800da18:	d108      	bne.n	800da2c <_Z41__static_initialization_and_destruction_0ii+0x2c>
Filter FilterInstance;
 800da1a:	480c      	ldr	r0, [pc, #48]	@ (800da4c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800da1c:	f7fd fcee 	bl	800b3fc <_ZN6FilterC1Ev>
VolumeFilterStruct VolumeFilter;
 800da20:	480b      	ldr	r0, [pc, #44]	@ (800da50 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800da22:	f7ff f9db 	bl	800cddc <_ZN18VolumeFilterStructC1Ev>
FlowFilterStruct FlowFilter;
 800da26:	480b      	ldr	r0, [pc, #44]	@ (800da54 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800da28:	f7ff f9e7 	bl	800cdfa <_ZN16FlowFilterStructC1Ev>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d107      	bne.n	800da42 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da38:	4293      	cmp	r3, r2
 800da3a:	d102      	bne.n	800da42 <_Z41__static_initialization_and_destruction_0ii+0x42>
Filter FilterInstance;
 800da3c:	4803      	ldr	r0, [pc, #12]	@ (800da4c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800da3e:	f7fd fced 	bl	800b41c <_ZN6FilterD1Ev>
}
 800da42:	bf00      	nop
 800da44:	3708      	adds	r7, #8
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	20004ee8 	.word	0x20004ee8
 800da50:	20004eec 	.word	0x20004eec
 800da54:	20004f48 	.word	0x20004f48

0800da58 <_GLOBAL__sub_I_VolumeSamples>:
 800da58:	b580      	push	{r7, lr}
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800da60:	2001      	movs	r0, #1
 800da62:	f7ff ffcd 	bl	800da00 <_Z41__static_initialization_and_destruction_0ii>
 800da66:	bd80      	pop	{r7, pc}

0800da68 <_GLOBAL__sub_D_VolumeSamples>:
 800da68:	b580      	push	{r7, lr}
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800da70:	2000      	movs	r0, #0
 800da72:	f7ff ffc5 	bl	800da00 <_Z41__static_initialization_and_destruction_0ii>
 800da76:	bd80      	pop	{r7, pc}

0800da78 <_ZN18SystemConfigStructC1Ev>:
	SystemModes systemMode=SystemModes::EmptyMode;

	uint8_t AverageSampleCount=100;
	uint8_t VolumeCalibrationSampleCount=100;
	uint8_t FlowCalibrationSampleCount=100;
} SystemConfigStruct;
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2214      	movs	r2, #20
 800da84:	701a      	strb	r2, [r3, #0]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2228      	movs	r2, #40	@ 0x28
 800da8a:	705a      	strb	r2, [r3, #1]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2228      	movs	r2, #40	@ 0x28
 800da90:	709a      	strb	r2, [r3, #2]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	220a      	movs	r2, #10
 800da96:	70da      	strb	r2, [r3, #3]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2228      	movs	r2, #40	@ 0x28
 800da9c:	711a      	strb	r2, [r3, #4]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	221e      	movs	r2, #30
 800daa2:	715a      	strb	r2, [r3, #5]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	221e      	movs	r2, #30
 800daa8:	719a      	strb	r2, [r3, #6]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800dab0:	811a      	strh	r2, [r3, #8]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800dab8:	815a      	strh	r2, [r3, #10]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800dac0:	819a      	strh	r2, [r3, #12]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800dac8:	81da      	strh	r2, [r3, #14]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800dad0:	821a      	strh	r2, [r3, #16]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800dad8:	825a      	strh	r2, [r3, #18]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	615a      	str	r2, [r3, #20]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	619a      	str	r2, [r3, #24]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800daec:	61da      	str	r2, [r3, #28]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800daf4:	621a      	str	r2, [r3, #32]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800dafc:	625a      	str	r2, [r3, #36]	@ 0x24
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800db04:	629a      	str	r2, [r3, #40]	@ 0x28
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	220a      	movs	r2, #10
 800db0a:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2200      	movs	r2, #0
 800db10:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	631a      	str	r2, [r3, #48]	@ 0x30
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	222c      	movs	r2, #44	@ 0x2c
 800db26:	665a      	str	r2, [r3, #100]	@ 0x64
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	66da      	str	r2, [r3, #108]	@ 0x6c
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2264      	movs	r2, #100	@ 0x64
 800db42:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2264      	movs	r2, #100	@ 0x64
 800db4a:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2264      	movs	r2, #100	@ 0x64
 800db52:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	4618      	mov	r0, r3
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <_ZN12FlashManagerC1ERKS_>:
class FlashManager {
 800db64:	b480      	push	{r7}
 800db66:	b083      	sub	sp, #12
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
 800db6e:	4a25      	ldr	r2, [pc, #148]	@ (800dc04 <_ZN12FlashManagerC1ERKS_+0xa0>)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	601a      	str	r2, [r3, #0]
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	685a      	ldr	r2, [r3, #4]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	605a      	str	r2, [r3, #4]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	689a      	ldr	r2, [r3, #8]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	609a      	str	r2, [r3, #8]
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	7b1a      	ldrb	r2, [r3, #12]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	731a      	strb	r2, [r3, #12]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	7b5a      	ldrb	r2, [r3, #13]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	735a      	strb	r2, [r3, #13]
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	7b9a      	ldrb	r2, [r3, #14]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	739a      	strb	r2, [r3, #14]
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	7bda      	ldrb	r2, [r3, #15]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	73da      	strb	r2, [r3, #15]
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	7c1a      	ldrb	r2, [r3, #16]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	741a      	strb	r2, [r3, #16]
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	7c5a      	ldrb	r2, [r3, #17]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	745a      	strb	r2, [r3, #17]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	7c9a      	ldrb	r2, [r3, #18]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	749a      	strb	r2, [r3, #18]
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	7cda      	ldrb	r2, [r3, #19]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	74da      	strb	r2, [r3, #19]
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	7d1a      	ldrb	r2, [r3, #20]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	751a      	strb	r2, [r3, #20]
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	7d5a      	ldrb	r2, [r3, #21]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	755a      	strb	r2, [r3, #21]
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	7d9a      	ldrb	r2, [r3, #22]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	759a      	strb	r2, [r3, #22]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	7dda      	ldrb	r2, [r3, #23]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	75da      	strb	r2, [r3, #23]
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	7e1a      	ldrb	r2, [r3, #24]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	761a      	strb	r2, [r3, #24]
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	7e5a      	ldrb	r2, [r3, #25]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	765a      	strb	r2, [r3, #25]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	370c      	adds	r7, #12
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	08010da0 	.word	0x08010da0

0800dc08 <SetupOS>:
};
/* Definitions for CommunicationSemaphoreHandle */
const osSemaphoreAttr_t communicationSemaphore_attributes = {
  .name = "CommunicationSemaphoreHandle"
};
void SetupOS(void){
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b088      	sub	sp, #32
 800dc0c:	af00      	add	r7, sp, #0
	EmgInstance.FirstEmgSetup();
 800dc0e:	480f      	ldr	r0, [pc, #60]	@ (800dc4c <SetupOS+0x44>)
 800dc10:	f7fd f9a4 	bl	800af5c <_ZN3Emg13FirstEmgSetupEv>
	EmgInstance.SecondEmgSetup();
 800dc14:	480d      	ldr	r0, [pc, #52]	@ (800dc4c <SetupOS+0x44>)
 800dc16:	f7fd f9c2 	bl	800af9e <_ZN3Emg14SecondEmgSetupEv>
	LoadCellInstance.Setup();
 800dc1a:	480d      	ldr	r0, [pc, #52]	@ (800dc50 <SetupOS+0x48>)
 800dc1c:	f7ff f92d 	bl	800ce7a <_ZN8LoadCell5SetupEv>
	FlashInitialize();
 800dc20:	f000 f938 	bl	800de94 <FlashInitialize>
	CommunicationInstance.SetFlashManager(FlashManagerInstance);
 800dc24:	1d3b      	adds	r3, r7, #4
 800dc26:	490b      	ldr	r1, [pc, #44]	@ (800dc54 <SetupOS+0x4c>)
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7ff ff9b 	bl	800db64 <_ZN12FlashManagerC1ERKS_>
 800dc2e:	1d3b      	adds	r3, r7, #4
 800dc30:	4619      	mov	r1, r3
 800dc32:	4809      	ldr	r0, [pc, #36]	@ (800dc58 <SetupOS+0x50>)
 800dc34:	f7fd f84a 	bl	800accc <_ZN13Communication15SetFlashManagerE12FlashManager>
 800dc38:	1d3b      	adds	r3, r7, #4
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fd fcf6 	bl	800b62c <_ZN12FlashManagerD1Ev>

	osKernelInitialize();
 800dc40:	f7f8 fb4c 	bl	80062dc <osKernelInitialize>
}
 800dc44:	bf00      	nop
 800dc46:	3720      	adds	r7, #32
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	20005008 	.word	0x20005008
 800dc50:	2000704c 	.word	0x2000704c
 800dc54:	2000909c 	.word	0x2000909c
 800dc58:	2000907c 	.word	0x2000907c

0800dc5c <_Z14UpdatePriorityv>:
void UpdatePriority(void){
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 800dc60:	4865      	ldr	r0, [pc, #404]	@ (800ddf8 <_Z14UpdatePriorityv+0x19c>)
 800dc62:	f7f6 fec3 	bl	80049ec <HAL_TIM_Base_Start_IT>
	ThreadStorage.FirstEmgThreadAttr=normalPriority;
 800dc66:	4b65      	ldr	r3, [pc, #404]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dc68:	3310      	adds	r3, #16
 800dc6a:	2224      	movs	r2, #36	@ 0x24
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f002 fa0f 	bl	8010092 <memset>
 800dc74:	4b61      	ldr	r3, [pc, #388]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dc76:	4a62      	ldr	r2, [pc, #392]	@ (800de00 <_Z14UpdatePriorityv+0x1a4>)
 800dc78:	611a      	str	r2, [r3, #16]
 800dc7a:	4b60      	ldr	r3, [pc, #384]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dc7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc80:	625a      	str	r2, [r3, #36]	@ 0x24
 800dc82:	4b5e      	ldr	r3, [pc, #376]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dc84:	2218      	movs	r2, #24
 800dc86:	629a      	str	r2, [r3, #40]	@ 0x28
	ThreadStorage.SecondEmgThreadAttr=normalPriority;
 800dc88:	4b5c      	ldr	r3, [pc, #368]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dc8a:	3334      	adds	r3, #52	@ 0x34
 800dc8c:	2224      	movs	r2, #36	@ 0x24
 800dc8e:	2100      	movs	r1, #0
 800dc90:	4618      	mov	r0, r3
 800dc92:	f002 f9fe 	bl	8010092 <memset>
 800dc96:	4b59      	ldr	r3, [pc, #356]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dc98:	4a59      	ldr	r2, [pc, #356]	@ (800de00 <_Z14UpdatePriorityv+0x1a4>)
 800dc9a:	635a      	str	r2, [r3, #52]	@ 0x34
 800dc9c:	4b57      	ldr	r3, [pc, #348]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dc9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dca2:	649a      	str	r2, [r3, #72]	@ 0x48
 800dca4:	4b55      	ldr	r3, [pc, #340]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dca6:	2218      	movs	r2, #24
 800dca8:	64da      	str	r2, [r3, #76]	@ 0x4c
	ThreadStorage.FlowThreadAttr=normalPriority;
 800dcaa:	4b54      	ldr	r3, [pc, #336]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dcac:	33b0      	adds	r3, #176	@ 0xb0
 800dcae:	2224      	movs	r2, #36	@ 0x24
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f002 f9ed 	bl	8010092 <memset>
 800dcb8:	4b50      	ldr	r3, [pc, #320]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dcba:	4a51      	ldr	r2, [pc, #324]	@ (800de00 <_Z14UpdatePriorityv+0x1a4>)
 800dcbc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800dcc0:	4b4e      	ldr	r3, [pc, #312]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dcc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dcc6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 800dcca:	4b4c      	ldr	r3, [pc, #304]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dccc:	2218      	movs	r2, #24
 800dcce:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	ThreadStorage.VolumeThreadAttr=normalPriority;
 800dcd2:	4b4a      	ldr	r3, [pc, #296]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dcd4:	338c      	adds	r3, #140	@ 0x8c
 800dcd6:	2224      	movs	r2, #36	@ 0x24
 800dcd8:	2100      	movs	r1, #0
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f002 f9d9 	bl	8010092 <memset>
 800dce0:	4b46      	ldr	r3, [pc, #280]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dce2:	4a47      	ldr	r2, [pc, #284]	@ (800de00 <_Z14UpdatePriorityv+0x1a4>)
 800dce4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800dce8:	4b44      	ldr	r3, [pc, #272]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dcea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dcee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800dcf2:	4b42      	ldr	r3, [pc, #264]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dcf4:	2218      	movs	r2, #24
 800dcf6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	ThreadStorage.PumpMaxRunThreadAttr=normalPriority;
 800dcfa:	4b40      	ldr	r3, [pc, #256]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dcfc:	33d4      	adds	r3, #212	@ 0xd4
 800dcfe:	2224      	movs	r2, #36	@ 0x24
 800dd00:	2100      	movs	r1, #0
 800dd02:	4618      	mov	r0, r3
 800dd04:	f002 f9c5 	bl	8010092 <memset>
 800dd08:	4b3c      	ldr	r3, [pc, #240]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd0a:	4a3d      	ldr	r2, [pc, #244]	@ (800de00 <_Z14UpdatePriorityv+0x1a4>)
 800dd0c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800dd10:	4b3a      	ldr	r3, [pc, #232]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd16:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800dd1a:	4b38      	ldr	r3, [pc, #224]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd1c:	2218      	movs	r2, #24
 800dd1e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	ThreadStorage.ValveMaxRunThreadAttr=normalPriority;
 800dd22:	4b36      	ldr	r3, [pc, #216]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd24:	33f8      	adds	r3, #248	@ 0xf8
 800dd26:	2224      	movs	r2, #36	@ 0x24
 800dd28:	2100      	movs	r1, #0
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f002 f9b1 	bl	8010092 <memset>
 800dd30:	4b32      	ldr	r3, [pc, #200]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd32:	4a33      	ldr	r2, [pc, #204]	@ (800de00 <_Z14UpdatePriorityv+0x1a4>)
 800dd34:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 800dd38:	4b30      	ldr	r3, [pc, #192]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd3e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800dd42:	4b2e      	ldr	r3, [pc, #184]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd44:	2218      	movs	r2, #24
 800dd46:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	ThreadStorage.CalibrationFlowThreadAttr=normalPriority;
 800dd4a:	4b2c      	ldr	r3, [pc, #176]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dd50:	2224      	movs	r2, #36	@ 0x24
 800dd52:	2100      	movs	r1, #0
 800dd54:	4618      	mov	r0, r3
 800dd56:	f002 f99c 	bl	8010092 <memset>
 800dd5a:	4b28      	ldr	r3, [pc, #160]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd5c:	4a28      	ldr	r2, [pc, #160]	@ (800de00 <_Z14UpdatePriorityv+0x1a4>)
 800dd5e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 800dd62:	4b26      	ldr	r3, [pc, #152]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd68:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 800dd6c:	4b23      	ldr	r3, [pc, #140]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd6e:	2218      	movs	r2, #24
 800dd70:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
	ThreadStorage.CalibrationVolumeThreadAttr=normalPriority;
 800dd74:	4b21      	ldr	r3, [pc, #132]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd76:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800dd7a:	2224      	movs	r2, #36	@ 0x24
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f002 f987 	bl	8010092 <memset>
 800dd84:	4b1d      	ldr	r3, [pc, #116]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd86:	4a1e      	ldr	r2, [pc, #120]	@ (800de00 <_Z14UpdatePriorityv+0x1a4>)
 800dd88:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800dd8c:	4b1b      	ldr	r3, [pc, #108]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd92:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 800dd96:	4b19      	ldr	r3, [pc, #100]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dd98:	2218      	movs	r2, #24
 800dd9a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	ThreadStorage.CleanThreadAttr=normalPriority;
 800dd9e:	4b17      	ldr	r3, [pc, #92]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dda0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800dda4:	2224      	movs	r2, #36	@ 0x24
 800dda6:	2100      	movs	r1, #0
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f002 f972 	bl	8010092 <memset>
 800ddae:	4b13      	ldr	r3, [pc, #76]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800ddb0:	4a13      	ldr	r2, [pc, #76]	@ (800de00 <_Z14UpdatePriorityv+0x1a4>)
 800ddb2:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 800ddb6:	4b11      	ldr	r3, [pc, #68]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800ddb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddbc:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 800ddc0:	4b0e      	ldr	r3, [pc, #56]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800ddc2:	2218      	movs	r2, #24
 800ddc4:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
	ThreadStorage.SafeModeThreadAttr=normalPriority;
 800ddc8:	4b0c      	ldr	r3, [pc, #48]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800ddca:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800ddce:	2224      	movs	r2, #36	@ 0x24
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f002 f95d 	bl	8010092 <memset>
 800ddd8:	4b08      	ldr	r3, [pc, #32]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800ddda:	4a09      	ldr	r2, [pc, #36]	@ (800de00 <_Z14UpdatePriorityv+0x1a4>)
 800dddc:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 800dde0:	4b06      	ldr	r3, [pc, #24]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800dde2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dde6:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
 800ddea:	4b04      	ldr	r3, [pc, #16]	@ (800ddfc <_Z14UpdatePriorityv+0x1a0>)
 800ddec:	2218      	movs	r2, #24
 800ddee:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
}
 800ddf2:	bf00      	nop
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	20000418 	.word	0x20000418
 800ddfc:	200090b8 	.word	0x200090b8
 800de00:	08010ca8 	.word	0x08010ca8

0800de04 <StartOS>:
void StartOS(void){
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
	UpdatePriority();
 800de0a:	f7ff ff27 	bl	800dc5c <_Z14UpdatePriorityv>
		EmgInstance.SecondEmgRead();
		LoadCellInstance.ReadVolume(false);
		LoadCellInstance.ReadFlow(false);
	}
	*/
	HAL_Delay( 1000 );
 800de0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800de12:	f7f3 ff59 	bl	8001cc8 <HAL_Delay>
   	uint8_t data[4];
   	data[0]=HasCalibration();//HasCalibration
 800de16:	f001 fdf3 	bl	800fa00 <HasCalibration>
 800de1a:	4603      	mov	r3, r0
 800de1c:	713b      	strb	r3, [r7, #4]
   	data[1]=HasLoadcell();//HasLoadcell
 800de1e:	f001 fe0f 	bl	800fa40 <HasLoadcell>
 800de22:	4603      	mov	r3, r0
 800de24:	717b      	strb	r3, [r7, #5]
   	data[2]=HasFirstEmg();//HasFirstEmg
 800de26:	f001 fe2b 	bl	800fa80 <HasFirstEmg>
 800de2a:	4603      	mov	r3, r0
 800de2c:	71bb      	strb	r3, [r7, #6]
   	data[3]=HasSecondEmg();//HasSecondEmg
 800de2e:	f001 fe3f 	bl	800fab0 <HasSecondEmg>
 800de32:	4603      	mov	r3, r0
 800de34:	71fb      	strb	r3, [r7, #7]
	SuccessDataResult(0, SuccessDataType::SD_Start, data, 4);
 800de36:	1d3a      	adds	r2, r7, #4
 800de38:	2304      	movs	r3, #4
 800de3a:	21ff      	movs	r1, #255	@ 0xff
 800de3c:	2000      	movs	r0, #0
 800de3e:	f000 f92d 	bl	800e09c <SuccessDataResult>

	ThreadStorage.ReadUARTThreadId=osThreadNew(StartReadUARTTask, NULL, &normalPriority);
 800de42:	4a0b      	ldr	r2, [pc, #44]	@ (800de70 <StartOS+0x6c>)
 800de44:	2100      	movs	r1, #0
 800de46:	480b      	ldr	r0, [pc, #44]	@ (800de74 <StartOS+0x70>)
 800de48:	f7f8 fa92 	bl	8006370 <osThreadNew>
 800de4c:	4603      	mov	r3, r0
 800de4e:	4a0a      	ldr	r2, [pc, #40]	@ (800de78 <StartOS+0x74>)
 800de50:	6053      	str	r3, [r2, #4]
	osKernelStart();
 800de52:	f7f8 fa67 	bl	8006324 <osKernelStart>
	SuccessDataResult(0, SuccessDataType::SD_Stop, {}, 0);
 800de56:	2300      	movs	r3, #0
 800de58:	2200      	movs	r2, #0
 800de5a:	21fe      	movs	r1, #254	@ 0xfe
 800de5c:	2000      	movs	r0, #0
 800de5e:	f000 f91d 	bl	800e09c <SuccessDataResult>
    HAL_NVIC_SystemReset();
 800de62:	f7f4 f870 	bl	8001f46 <HAL_NVIC_SystemReset>
}
 800de66:	bf00      	nop
 800de68:	3708      	adds	r7, #8
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	08010db8 	.word	0x08010db8
 800de74:	0800e1d1 	.word	0x0800e1d1
 800de78:	200090b8 	.word	0x200090b8

0800de7c <HardReset>:

void HardReset(void){
 800de7c:	b580      	push	{r7, lr}
 800de7e:	af00      	add	r7, sp, #0
	FlashManagerInstance.HardReset(true);
 800de80:	2101      	movs	r1, #1
 800de82:	4803      	ldr	r0, [pc, #12]	@ (800de90 <HardReset+0x14>)
 800de84:	f7fd fc0e 	bl	800b6a4 <_ZN12FlashManager9HardResetEb>
    HAL_NVIC_SystemReset();
 800de88:	f7f4 f85d 	bl	8001f46 <HAL_NVIC_SystemReset>
}
 800de8c:	bf00      	nop
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	2000909c 	.word	0x2000909c

0800de94 <FlashInitialize>:
void FlashInitialize(void){
 800de94:	b580      	push	{r7, lr}
 800de96:	af00      	add	r7, sp, #0
	if(!FlashManagerInstance.IsSetup()){
 800de98:	4877      	ldr	r0, [pc, #476]	@ (800e078 <FlashInitialize+0x1e4>)
 800de9a:	f7fd fd11 	bl	800b8c0 <_ZN12FlashManager7IsSetupEv>
 800de9e:	4603      	mov	r3, r0
 800dea0:	f083 0301 	eor.w	r3, r3, #1
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d065      	beq.n	800df76 <FlashInitialize+0xe2>
		FlashManagerInstance.WriteSendPerSecond(SystemConfig.SendPerSecond);
 800deaa:	4b74      	ldr	r3, [pc, #464]	@ (800e07c <FlashInitialize+0x1e8>)
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	4619      	mov	r1, r3
 800deb0:	4871      	ldr	r0, [pc, #452]	@ (800e078 <FlashInitialize+0x1e4>)
 800deb2:	f7fd fd5f 	bl	800b974 <_ZN12FlashManager18WriteSendPerSecondEh>
		FlashManagerInstance.WriteFirstEmgPerSecond(SystemConfig.FirstEmgPerSecond);
 800deb6:	4b71      	ldr	r3, [pc, #452]	@ (800e07c <FlashInitialize+0x1e8>)
 800deb8:	785b      	ldrb	r3, [r3, #1]
 800deba:	4619      	mov	r1, r3
 800debc:	486e      	ldr	r0, [pc, #440]	@ (800e078 <FlashInitialize+0x1e4>)
 800debe:	f7fd fdf5 	bl	800baac <_ZN12FlashManager22WriteFirstEmgPerSecondEh>
		FlashManagerInstance.WriteSecondEmgPerSecond(SystemConfig.SecondEmgPerSecond);
 800dec2:	4b6e      	ldr	r3, [pc, #440]	@ (800e07c <FlashInitialize+0x1e8>)
 800dec4:	789b      	ldrb	r3, [r3, #2]
 800dec6:	4619      	mov	r1, r3
 800dec8:	486b      	ldr	r0, [pc, #428]	@ (800e078 <FlashInitialize+0x1e4>)
 800deca:	f7fd fe8b 	bl	800bbe4 <_ZN12FlashManager23WriteSecondEmgPerSecondEh>
		FlashManagerInstance.WriteVolumePerSecond(SystemConfig.VolumePerSecond);
 800dece:	4b6b      	ldr	r3, [pc, #428]	@ (800e07c <FlashInitialize+0x1e8>)
 800ded0:	78db      	ldrb	r3, [r3, #3]
 800ded2:	4619      	mov	r1, r3
 800ded4:	4868      	ldr	r0, [pc, #416]	@ (800e078 <FlashInitialize+0x1e4>)
 800ded6:	f7fd ff21 	bl	800bd1c <_ZN12FlashManager20WriteVolumePerSecondEh>
		FlashManagerInstance.WriteFlowPerSecond(SystemConfig.FlowPerSecond);
 800deda:	4b68      	ldr	r3, [pc, #416]	@ (800e07c <FlashInitialize+0x1e8>)
 800dedc:	791b      	ldrb	r3, [r3, #4]
 800dede:	4619      	mov	r1, r3
 800dee0:	4865      	ldr	r0, [pc, #404]	@ (800e078 <FlashInitialize+0x1e4>)
 800dee2:	f7fd ffb7 	bl	800be54 <_ZN12FlashManager18WriteFlowPerSecondEh>
		FlashManagerInstance.WritePumpMaxRunTime(SystemConfig.PumpMaxRunSecond);
 800dee6:	4b65      	ldr	r3, [pc, #404]	@ (800e07c <FlashInitialize+0x1e8>)
 800dee8:	795b      	ldrb	r3, [r3, #5]
 800deea:	4619      	mov	r1, r3
 800deec:	4862      	ldr	r0, [pc, #392]	@ (800e078 <FlashInitialize+0x1e4>)
 800deee:	f7fe f84d 	bl	800bf8c <_ZN12FlashManager19WritePumpMaxRunTimeEh>
		FlashManagerInstance.WriteValveMaxRunTime(SystemConfig.ValveMaxRunSecond);
 800def2:	4b62      	ldr	r3, [pc, #392]	@ (800e07c <FlashInitialize+0x1e8>)
 800def4:	799b      	ldrb	r3, [r3, #6]
 800def6:	4619      	mov	r1, r3
 800def8:	485f      	ldr	r0, [pc, #380]	@ (800e078 <FlashInitialize+0x1e4>)
 800defa:	f7fe f8e3 	bl	800c0c4 <_ZN12FlashManager20WriteValveMaxRunTimeEh>
		FlashManagerInstance.WriteFlowRate(SystemConfig.FlowRate);
 800defe:	4b5f      	ldr	r3, [pc, #380]	@ (800e07c <FlashInitialize+0x1e8>)
 800df00:	6a1b      	ldr	r3, [r3, #32]
 800df02:	4618      	mov	r0, r3
 800df04:	f7f2 fb18 	bl	8000538 <__aeabi_f2d>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	ec43 2b10 	vmov	d0, r2, r3
 800df10:	4859      	ldr	r0, [pc, #356]	@ (800e078 <FlashInitialize+0x1e4>)
 800df12:	f7fe f973 	bl	800c1fc <_ZN12FlashManager13WriteFlowRateEd>
		FlashManagerInstance.WriteVolumeRate(SystemConfig.VolumeRate);
 800df16:	4b59      	ldr	r3, [pc, #356]	@ (800e07c <FlashInitialize+0x1e8>)
 800df18:	69db      	ldr	r3, [r3, #28]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7f2 fb0c 	bl	8000538 <__aeabi_f2d>
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	ec43 2b10 	vmov	d0, r2, r3
 800df28:	4853      	ldr	r0, [pc, #332]	@ (800e078 <FlashInitialize+0x1e4>)
 800df2a:	f7fe fa01 	bl	800c330 <_ZN12FlashManager15WriteVolumeRateEd>
		FlashManagerInstance.WriteFlowAverage(SystemConfig.FlowAverage);
 800df2e:	4b53      	ldr	r3, [pc, #332]	@ (800e07c <FlashInitialize+0x1e8>)
 800df30:	695b      	ldr	r3, [r3, #20]
 800df32:	4619      	mov	r1, r3
 800df34:	4850      	ldr	r0, [pc, #320]	@ (800e078 <FlashInitialize+0x1e4>)
 800df36:	f7fe fb28 	bl	800c58a <_ZN12FlashManager16WriteFlowAverageEm>
		FlashManagerInstance.WriteVolumeAverage(SystemConfig.VolumeAverage);
 800df3a:	4b50      	ldr	r3, [pc, #320]	@ (800e07c <FlashInitialize+0x1e8>)
 800df3c:	699b      	ldr	r3, [r3, #24]
 800df3e:	4619      	mov	r1, r3
 800df40:	484d      	ldr	r0, [pc, #308]	@ (800e078 <FlashInitialize+0x1e4>)
 800df42:	f7fe fa8f 	bl	800c464 <_ZN12FlashManager18WriteVolumeAverageEm>
		FlashManagerInstance.WriteFirstEmgData(
 800df46:	4b4d      	ldr	r3, [pc, #308]	@ (800e07c <FlashInitialize+0x1e8>)
 800df48:	8919      	ldrh	r1, [r3, #8]
 800df4a:	4b4c      	ldr	r3, [pc, #304]	@ (800e07c <FlashInitialize+0x1e8>)
 800df4c:	895a      	ldrh	r2, [r3, #10]
 800df4e:	4b4b      	ldr	r3, [pc, #300]	@ (800e07c <FlashInitialize+0x1e8>)
 800df50:	899b      	ldrh	r3, [r3, #12]
 800df52:	4849      	ldr	r0, [pc, #292]	@ (800e078 <FlashInitialize+0x1e4>)
 800df54:	f7fe fbac 	bl	800c6b0 <_ZN12FlashManager17WriteFirstEmgDataEttt>
				SystemConfig.FirstEmgMaxTrim,
				SystemConfig.FirstEmgZeroMaxTrim,
				SystemConfig.FirstEmgZeroMinTrim);
		FlashManagerInstance.WriteSecondEmgData(
 800df58:	4b48      	ldr	r3, [pc, #288]	@ (800e07c <FlashInitialize+0x1e8>)
 800df5a:	89d9      	ldrh	r1, [r3, #14]
 800df5c:	4b47      	ldr	r3, [pc, #284]	@ (800e07c <FlashInitialize+0x1e8>)
 800df5e:	8a1a      	ldrh	r2, [r3, #16]
 800df60:	4b46      	ldr	r3, [pc, #280]	@ (800e07c <FlashInitialize+0x1e8>)
 800df62:	8a5b      	ldrh	r3, [r3, #18]
 800df64:	4844      	ldr	r0, [pc, #272]	@ (800e078 <FlashInitialize+0x1e4>)
 800df66:	f7fe fd5e 	bl	800ca26 <_ZN12FlashManager18WriteSecondEmgDataEttt>
				SystemConfig.SecondEmgMaxTrim,
				SystemConfig.SecondEmgZeroMaxTrim,
				SystemConfig.SecondEmgZeroMinTrim);
		FlashManagerInstance.Setup();
 800df6a:	4843      	ldr	r0, [pc, #268]	@ (800e078 <FlashInitialize+0x1e4>)
 800df6c:	f7fd fc60 	bl	800b830 <_ZN12FlashManager5SetupEv>
		FlashManagerInstance.Update();
 800df70:	4841      	ldr	r0, [pc, #260]	@ (800e078 <FlashInitialize+0x1e4>)
 800df72:	f7fd fbe3 	bl	800b73c <_ZN12FlashManager6UpdateEv>
	}
	//FlashManagerInstance.WriteFirstEmgData(0,0,0);
	//FlashManagerInstance.WriteSecondEmgData(0,0,0);
	//FlashManagerInstance.Update();
	SystemConfig.SendPerSecond=FlashManagerInstance.ReadSendPerSecond();
 800df76:	4840      	ldr	r0, [pc, #256]	@ (800e078 <FlashInitialize+0x1e4>)
 800df78:	f7fd fd46 	bl	800ba08 <_ZN12FlashManager17ReadSendPerSecondEv>
 800df7c:	4603      	mov	r3, r0
 800df7e:	461a      	mov	r2, r3
 800df80:	4b3e      	ldr	r3, [pc, #248]	@ (800e07c <FlashInitialize+0x1e8>)
 800df82:	701a      	strb	r2, [r3, #0]
	SystemConfig.FirstEmgPerSecond=FlashManagerInstance.ReadFirstEmgPerSecond();
 800df84:	483c      	ldr	r0, [pc, #240]	@ (800e078 <FlashInitialize+0x1e4>)
 800df86:	f7fd fddb 	bl	800bb40 <_ZN12FlashManager21ReadFirstEmgPerSecondEv>
 800df8a:	4603      	mov	r3, r0
 800df8c:	461a      	mov	r2, r3
 800df8e:	4b3b      	ldr	r3, [pc, #236]	@ (800e07c <FlashInitialize+0x1e8>)
 800df90:	705a      	strb	r2, [r3, #1]
	SystemConfig.SecondEmgPerSecond=FlashManagerInstance.ReadSecondEmgPerSecond();
 800df92:	4839      	ldr	r0, [pc, #228]	@ (800e078 <FlashInitialize+0x1e4>)
 800df94:	f7fd fe70 	bl	800bc78 <_ZN12FlashManager22ReadSecondEmgPerSecondEv>
 800df98:	4603      	mov	r3, r0
 800df9a:	461a      	mov	r2, r3
 800df9c:	4b37      	ldr	r3, [pc, #220]	@ (800e07c <FlashInitialize+0x1e8>)
 800df9e:	709a      	strb	r2, [r3, #2]
	SystemConfig.VolumePerSecond=FlashManagerInstance.ReadVolumePerSecond();
 800dfa0:	4835      	ldr	r0, [pc, #212]	@ (800e078 <FlashInitialize+0x1e4>)
 800dfa2:	f7fd ff05 	bl	800bdb0 <_ZN12FlashManager19ReadVolumePerSecondEv>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	4b34      	ldr	r3, [pc, #208]	@ (800e07c <FlashInitialize+0x1e8>)
 800dfac:	70da      	strb	r2, [r3, #3]
	SystemConfig.FlowPerSecond=FlashManagerInstance.ReadFlowPerSecond();
 800dfae:	4832      	ldr	r0, [pc, #200]	@ (800e078 <FlashInitialize+0x1e4>)
 800dfb0:	f7fd ff9a 	bl	800bee8 <_ZN12FlashManager17ReadFlowPerSecondEv>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	4b30      	ldr	r3, [pc, #192]	@ (800e07c <FlashInitialize+0x1e8>)
 800dfba:	711a      	strb	r2, [r3, #4]
	SystemConfig.PumpMaxRunSecond=FlashManagerInstance.ReadPumpMaxRunTime();
 800dfbc:	482e      	ldr	r0, [pc, #184]	@ (800e078 <FlashInitialize+0x1e4>)
 800dfbe:	f7fe f82f 	bl	800c020 <_ZN12FlashManager18ReadPumpMaxRunTimeEv>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	4b2d      	ldr	r3, [pc, #180]	@ (800e07c <FlashInitialize+0x1e8>)
 800dfc8:	715a      	strb	r2, [r3, #5]
	SystemConfig.ValveMaxRunSecond=FlashManagerInstance.ReadValveMaxRunTime();
 800dfca:	482b      	ldr	r0, [pc, #172]	@ (800e078 <FlashInitialize+0x1e4>)
 800dfcc:	f7fe f8c4 	bl	800c158 <_ZN12FlashManager19ReadValveMaxRunTimeEv>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	4b29      	ldr	r3, [pc, #164]	@ (800e07c <FlashInitialize+0x1e8>)
 800dfd6:	719a      	strb	r2, [r3, #6]
	SystemConfig.FlowRate=FlashManagerInstance.ReadFlowRate();
 800dfd8:	4827      	ldr	r0, [pc, #156]	@ (800e078 <FlashInitialize+0x1e4>)
 800dfda:	f7fe f951 	bl	800c280 <_ZN12FlashManager12ReadFlowRateEv>
 800dfde:	ec53 2b10 	vmov	r2, r3, d0
 800dfe2:	4610      	mov	r0, r2
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	f7f2 fd31 	bl	8000a4c <__aeabi_d2f>
 800dfea:	4603      	mov	r3, r0
 800dfec:	4a23      	ldr	r2, [pc, #140]	@ (800e07c <FlashInitialize+0x1e8>)
 800dfee:	6213      	str	r3, [r2, #32]
	SystemConfig.VolumeRate=FlashManagerInstance.ReadVolumeRate();
 800dff0:	4821      	ldr	r0, [pc, #132]	@ (800e078 <FlashInitialize+0x1e4>)
 800dff2:	f7fe f9df 	bl	800c3b4 <_ZN12FlashManager14ReadVolumeRateEv>
 800dff6:	ec53 2b10 	vmov	r2, r3, d0
 800dffa:	4610      	mov	r0, r2
 800dffc:	4619      	mov	r1, r3
 800dffe:	f7f2 fd25 	bl	8000a4c <__aeabi_d2f>
 800e002:	4603      	mov	r3, r0
 800e004:	4a1d      	ldr	r2, [pc, #116]	@ (800e07c <FlashInitialize+0x1e8>)
 800e006:	61d3      	str	r3, [r2, #28]
	SystemConfig.FlowAverage=FlashManagerInstance.ReadFlowAverage();
 800e008:	481b      	ldr	r0, [pc, #108]	@ (800e078 <FlashInitialize+0x1e4>)
 800e00a:	f7fe faff 	bl	800c60c <_ZN12FlashManager15ReadFlowAverageEv>
 800e00e:	4603      	mov	r3, r0
 800e010:	4a1a      	ldr	r2, [pc, #104]	@ (800e07c <FlashInitialize+0x1e8>)
 800e012:	6153      	str	r3, [r2, #20]
	SystemConfig.VolumeAverage=FlashManagerInstance.ReadVolumeAverage();
 800e014:	4818      	ldr	r0, [pc, #96]	@ (800e078 <FlashInitialize+0x1e4>)
 800e016:	f7fe fa66 	bl	800c4e6 <_ZN12FlashManager17ReadVolumeAverageEv>
 800e01a:	4603      	mov	r3, r0
 800e01c:	4a17      	ldr	r2, [pc, #92]	@ (800e07c <FlashInitialize+0x1e8>)
 800e01e:	6193      	str	r3, [r2, #24]
	SystemConfig.FirstEmgMaxTrim=FlashManagerInstance.ReadFirstEmgMaxTrim();
 800e020:	4815      	ldr	r0, [pc, #84]	@ (800e078 <FlashInitialize+0x1e4>)
 800e022:	f7fe fc03 	bl	800c82c <_ZN12FlashManager19ReadFirstEmgMaxTrimEv>
 800e026:	4603      	mov	r3, r0
 800e028:	461a      	mov	r2, r3
 800e02a:	4b14      	ldr	r3, [pc, #80]	@ (800e07c <FlashInitialize+0x1e8>)
 800e02c:	811a      	strh	r2, [r3, #8]
	SystemConfig.FirstEmgZeroMaxTrim=FlashManagerInstance.ReadFirstEmgZeroPointMaxTrim();
 800e02e:	4812      	ldr	r0, [pc, #72]	@ (800e078 <FlashInitialize+0x1e4>)
 800e030:	f7fe fc4f 	bl	800c8d2 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv>
 800e034:	4603      	mov	r3, r0
 800e036:	461a      	mov	r2, r3
 800e038:	4b10      	ldr	r3, [pc, #64]	@ (800e07c <FlashInitialize+0x1e8>)
 800e03a:	815a      	strh	r2, [r3, #10]
	SystemConfig.FirstEmgZeroMinTrim=FlashManagerInstance.ReadFirstEmgZeroPointMinTrim();
 800e03c:	480e      	ldr	r0, [pc, #56]	@ (800e078 <FlashInitialize+0x1e4>)
 800e03e:	f7fe fc9d 	bl	800c97c <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv>
 800e042:	4603      	mov	r3, r0
 800e044:	461a      	mov	r2, r3
 800e046:	4b0d      	ldr	r3, [pc, #52]	@ (800e07c <FlashInitialize+0x1e8>)
 800e048:	819a      	strh	r2, [r3, #12]
	SystemConfig.SecondEmgMaxTrim=FlashManagerInstance.ReadSecondEmgMaxTrim();
 800e04a:	480b      	ldr	r0, [pc, #44]	@ (800e078 <FlashInitialize+0x1e4>)
 800e04c:	f7fe fda9 	bl	800cba2 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv>
 800e050:	4603      	mov	r3, r0
 800e052:	461a      	mov	r2, r3
 800e054:	4b09      	ldr	r3, [pc, #36]	@ (800e07c <FlashInitialize+0x1e8>)
 800e056:	81da      	strh	r2, [r3, #14]
	SystemConfig.SecondEmgZeroMaxTrim=FlashManagerInstance.ReadSecondEmgZeroPointMaxTrim();
 800e058:	4807      	ldr	r0, [pc, #28]	@ (800e078 <FlashInitialize+0x1e4>)
 800e05a:	f7fe fdf5 	bl	800cc48 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv>
 800e05e:	4603      	mov	r3, r0
 800e060:	461a      	mov	r2, r3
 800e062:	4b06      	ldr	r3, [pc, #24]	@ (800e07c <FlashInitialize+0x1e8>)
 800e064:	821a      	strh	r2, [r3, #16]
	SystemConfig.SecondEmgZeroMinTrim=FlashManagerInstance.ReadSecondEmgZeroPointMinTrim();
 800e066:	4804      	ldr	r0, [pc, #16]	@ (800e078 <FlashInitialize+0x1e4>)
 800e068:	f7fe fe43 	bl	800ccf2 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv>
 800e06c:	4603      	mov	r3, r0
 800e06e:	461a      	mov	r2, r3
 800e070:	4b02      	ldr	r3, [pc, #8]	@ (800e07c <FlashInitialize+0x1e8>)
 800e072:	825a      	strh	r2, [r3, #18]
}
 800e074:	bf00      	nop
 800e076:	bd80      	pop	{r7, pc}
 800e078:	2000909c 	.word	0x2000909c
 800e07c:	200092a8 	.word	0x200092a8

0800e080 <SuccessResult>:

void SuccessResult(void){
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
	uint8_t data[1]={0x01};
 800e086:	2301      	movs	r3, #1
 800e088:	713b      	strb	r3, [r7, #4]
	WriteUart(data, 1);
 800e08a:	1d3b      	adds	r3, r7, #4
 800e08c:	2101      	movs	r1, #1
 800e08e:	4618      	mov	r0, r3
 800e090:	f000 f912 	bl	800e2b8 <WriteUart>
}
 800e094:	bf00      	nop
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <SuccessDataResult>:
void SuccessDataResult(uint8_t percent,uint8_t dataType,uint8_t *data,int len){
 800e09c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0a0:	b089      	sub	sp, #36	@ 0x24
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	60ba      	str	r2, [r7, #8]
 800e0a6:	607b      	str	r3, [r7, #4]
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	73fb      	strb	r3, [r7, #15]
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	73bb      	strb	r3, [r7, #14]
	uartData[5]=dataType;
	for (int i = 6; i < len+6; ++i) {
		uartData[i]=data[i-6];
	}
	WriteUart(uartData, len+6);
}
 800e0b0:	466b      	mov	r3, sp
 800e0b2:	461e      	mov	r6, r3
	uint8_t uartData[len+6]={0};
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	1d99      	adds	r1, r3, #6
 800e0b8:	1e4b      	subs	r3, r1, #1
 800e0ba:	61bb      	str	r3, [r7, #24]
 800e0bc:	460a      	mov	r2, r1
 800e0be:	2300      	movs	r3, #0
 800e0c0:	4690      	mov	r8, r2
 800e0c2:	4699      	mov	r9, r3
 800e0c4:	f04f 0200 	mov.w	r2, #0
 800e0c8:	f04f 0300 	mov.w	r3, #0
 800e0cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e0d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e0d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e0d8:	460a      	mov	r2, r1
 800e0da:	2300      	movs	r3, #0
 800e0dc:	4614      	mov	r4, r2
 800e0de:	461d      	mov	r5, r3
 800e0e0:	f04f 0200 	mov.w	r2, #0
 800e0e4:	f04f 0300 	mov.w	r3, #0
 800e0e8:	00eb      	lsls	r3, r5, #3
 800e0ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e0ee:	00e2      	lsls	r2, r4, #3
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	3307      	adds	r3, #7
 800e0f4:	08db      	lsrs	r3, r3, #3
 800e0f6:	00db      	lsls	r3, r3, #3
 800e0f8:	ebad 0d03 	sub.w	sp, sp, r3
 800e0fc:	466b      	mov	r3, sp
 800e0fe:	3300      	adds	r3, #0
 800e100:	617b      	str	r3, [r7, #20]
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	3901      	subs	r1, #1
 800e106:	2200      	movs	r2, #0
 800e108:	701a      	strb	r2, [r3, #0]
 800e10a:	1c5a      	adds	r2, r3, #1
 800e10c:	1e4b      	subs	r3, r1, #1
 800e10e:	e003      	b.n	800e118 <SuccessDataResult+0x7c>
 800e110:	2100      	movs	r1, #0
 800e112:	7011      	strb	r1, [r2, #0]
 800e114:	3b01      	subs	r3, #1
 800e116:	3201      	adds	r2, #1
 800e118:	2b00      	cmp	r3, #0
 800e11a:	daf9      	bge.n	800e110 <SuccessDataResult+0x74>
	uint16_t xLen=len+3;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	b29b      	uxth	r3, r3
 800e120:	3303      	adds	r3, #3
 800e122:	827b      	strh	r3, [r7, #18]
	uartData[0]=0x02;
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	2202      	movs	r2, #2
 800e128:	701a      	strb	r2, [r3, #0]
	uartData[1]=(xLen & 0xFF00)>>8;
 800e12a:	8a7b      	ldrh	r3, [r7, #18]
 800e12c:	0a1b      	lsrs	r3, r3, #8
 800e12e:	b29b      	uxth	r3, r3
 800e130:	b2da      	uxtb	r2, r3
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	705a      	strb	r2, [r3, #1]
	uartData[2]=(xLen & 0x00FF);
 800e136:	8a7b      	ldrh	r3, [r7, #18]
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	709a      	strb	r2, [r3, #2]
	uartData[3]=1;
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	2201      	movs	r2, #1
 800e142:	70da      	strb	r2, [r3, #3]
	uartData[4]=percent;
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	7bfa      	ldrb	r2, [r7, #15]
 800e148:	711a      	strb	r2, [r3, #4]
	uartData[5]=dataType;
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	7bba      	ldrb	r2, [r7, #14]
 800e14e:	715a      	strb	r2, [r3, #5]
	for (int i = 6; i < len+6; ++i) {
 800e150:	2306      	movs	r3, #6
 800e152:	61fb      	str	r3, [r7, #28]
 800e154:	e00c      	b.n	800e170 <SuccessDataResult+0xd4>
		uartData[i]=data[i-6];
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	3b06      	subs	r3, #6
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	4413      	add	r3, r2
 800e15e:	7819      	ldrb	r1, [r3, #0]
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	4413      	add	r3, r2
 800e166:	460a      	mov	r2, r1
 800e168:	701a      	strb	r2, [r3, #0]
	for (int i = 6; i < len+6; ++i) {
 800e16a:	69fb      	ldr	r3, [r7, #28]
 800e16c:	3301      	adds	r3, #1
 800e16e:	61fb      	str	r3, [r7, #28]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	3305      	adds	r3, #5
 800e174:	69fa      	ldr	r2, [r7, #28]
 800e176:	429a      	cmp	r2, r3
 800e178:	dded      	ble.n	800e156 <SuccessDataResult+0xba>
	WriteUart(uartData, len+6);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	3306      	adds	r3, #6
 800e17e:	4619      	mov	r1, r3
 800e180:	6978      	ldr	r0, [r7, #20]
 800e182:	f000 f899 	bl	800e2b8 <WriteUart>
 800e186:	46b5      	mov	sp, r6
}
 800e188:	bf00      	nop
 800e18a:	3724      	adds	r7, #36	@ 0x24
 800e18c:	46bd      	mov	sp, r7
 800e18e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e192 <ErrorResult>:
	uartData[5]=opCode;
	uartData[6]=(errorCode>>8) & 0xFF;
	uartData[7]=errorCode & 0xFF;
	WriteUart(uartData, 8);
}
void ErrorResult(uint8_t opCode,uint16_t errorCode){
 800e192:	b580      	push	{r7, lr}
 800e194:	b084      	sub	sp, #16
 800e196:	af00      	add	r7, sp, #0
 800e198:	4603      	mov	r3, r0
 800e19a:	460a      	mov	r2, r1
 800e19c:	71fb      	strb	r3, [r7, #7]
 800e19e:	4613      	mov	r3, r2
 800e1a0:	80bb      	strh	r3, [r7, #4]
	uint8_t data[4];
	data[0]=0x00;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	733b      	strb	r3, [r7, #12]
	data[1]=opCode;
 800e1a6:	79fb      	ldrb	r3, [r7, #7]
 800e1a8:	737b      	strb	r3, [r7, #13]
	data[2]=(errorCode>>8) & 0xFF;
 800e1aa:	88bb      	ldrh	r3, [r7, #4]
 800e1ac:	0a1b      	lsrs	r3, r3, #8
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	73bb      	strb	r3, [r7, #14]
	data[3]=errorCode & 0xFF;
 800e1b4:	88bb      	ldrh	r3, [r7, #4]
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	73fb      	strb	r3, [r7, #15]
	WriteUart(data, 4);
 800e1ba:	f107 030c 	add.w	r3, r7, #12
 800e1be:	2104      	movs	r1, #4
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f000 f879 	bl	800e2b8 <WriteUart>
}
 800e1c6:	bf00      	nop
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
	...

0800e1d0 <StartReadUARTTask>:

void StartReadUARTTask(void *argument){
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b088      	sub	sp, #32
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 800e1d8:	2364      	movs	r3, #100	@ 0x64
 800e1da:	617b      	str	r3, [r7, #20]
	osStatus_t communicationSemaphoreVal;
	ThreadStorage.CommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &communicationSemaphore_attributes);
 800e1dc:	4a2f      	ldr	r2, [pc, #188]	@ (800e29c <StartReadUARTTask+0xcc>)
 800e1de:	2101      	movs	r1, #1
 800e1e0:	2001      	movs	r0, #1
 800e1e2:	f7f8 f984 	bl	80064ee <osSemaphoreNew>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	4a2d      	ldr	r2, [pc, #180]	@ (800e2a0 <StartReadUARTTask+0xd0>)
 800e1ea:	f8c2 31e0 	str.w	r3, [r2, #480]	@ 0x1e0
	ThreadStorage.SendUARTThreadId=osThreadNew(StartSendUARTTask, NULL, &normalPriority);
 800e1ee:	4a2d      	ldr	r2, [pc, #180]	@ (800e2a4 <StartReadUARTTask+0xd4>)
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	482d      	ldr	r0, [pc, #180]	@ (800e2a8 <StartReadUARTTask+0xd8>)
 800e1f4:	f7f8 f8bc 	bl	8006370 <osThreadNew>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	4a29      	ldr	r2, [pc, #164]	@ (800e2a0 <StartReadUARTTask+0xd0>)
 800e1fc:	6013      	str	r3, [r2, #0]
	bool retryStatus=false;
 800e1fe:	2300      	movs	r3, #0
 800e200:	77fb      	strb	r3, [r7, #31]
	for(;;){
		if (retryStatus||HAL_UART_Receive_DMA(&huart1, CommandUart, 8) == HAL_OK)   //100
 800e202:	7ffb      	ldrb	r3, [r7, #31]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d107      	bne.n	800e218 <StartReadUARTTask+0x48>
 800e208:	2208      	movs	r2, #8
 800e20a:	4928      	ldr	r1, [pc, #160]	@ (800e2ac <StartReadUARTTask+0xdc>)
 800e20c:	4828      	ldr	r0, [pc, #160]	@ (800e2b0 <StartReadUARTTask+0xe0>)
 800e20e:	f7f6 ff1a 	bl	8005046 <HAL_UART_Receive_DMA>
 800e212:	4603      	mov	r3, r0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d101      	bne.n	800e21c <StartReadUARTTask+0x4c>
 800e218:	2301      	movs	r3, #1
 800e21a:	e000      	b.n	800e21e <StartReadUARTTask+0x4e>
 800e21c:	2300      	movs	r3, #0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d038      	beq.n	800e294 <StartReadUARTTask+0xc4>
		{
			retryStatus=false;
 800e222:	2300      	movs	r3, #0
 800e224:	77fb      	strb	r3, [r7, #31]
			if(CommandUart[0]!=0){
 800e226:	4b21      	ldr	r3, [pc, #132]	@ (800e2ac <StartReadUARTTask+0xdc>)
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d032      	beq.n	800e294 <StartReadUARTTask+0xc4>
				communicationSemaphoreVal = osSemaphoreAcquire(ThreadStorage.CommunicationSemaphoreHandle, 1000);
 800e22e:	4b1c      	ldr	r3, [pc, #112]	@ (800e2a0 <StartReadUARTTask+0xd0>)
 800e230:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800e234:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e238:	4618      	mov	r0, r3
 800e23a:	f7f8 f9e1 	bl	8006600 <osSemaphoreAcquire>
 800e23e:	6138      	str	r0, [r7, #16]
				if(communicationSemaphoreVal==osOK){
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d124      	bne.n	800e290 <StartReadUARTTask+0xc0>
					uint8_t data[8];
					for (int i = 0; i < 8; ++i) {
 800e246:	2300      	movs	r3, #0
 800e248:	61bb      	str	r3, [r7, #24]
 800e24a:	e011      	b.n	800e270 <StartReadUARTTask+0xa0>
						data[i]=CommandUart[i];
 800e24c:	4a17      	ldr	r2, [pc, #92]	@ (800e2ac <StartReadUARTTask+0xdc>)
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	4413      	add	r3, r2
 800e252:	7819      	ldrb	r1, [r3, #0]
 800e254:	f107 0208 	add.w	r2, r7, #8
 800e258:	69bb      	ldr	r3, [r7, #24]
 800e25a:	4413      	add	r3, r2
 800e25c:	460a      	mov	r2, r1
 800e25e:	701a      	strb	r2, [r3, #0]
						CommandUart[i]=0;
 800e260:	4a12      	ldr	r2, [pc, #72]	@ (800e2ac <StartReadUARTTask+0xdc>)
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	4413      	add	r3, r2
 800e266:	2200      	movs	r2, #0
 800e268:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 8; ++i) {
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	3301      	adds	r3, #1
 800e26e:	61bb      	str	r3, [r7, #24]
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	2b07      	cmp	r3, #7
 800e274:	ddea      	ble.n	800e24c <StartReadUARTTask+0x7c>
					}
					CommunicationInstance.ProcessCommand(data);
 800e276:	f107 0308 	add.w	r3, r7, #8
 800e27a:	4619      	mov	r1, r3
 800e27c:	480d      	ldr	r0, [pc, #52]	@ (800e2b4 <StartReadUARTTask+0xe4>)
 800e27e:	f7fb fca7 	bl	8009bd0 <_ZN13Communication14ProcessCommandEPh>
					osSemaphoreRelease(ThreadStorage.CommunicationSemaphoreHandle);
 800e282:	4b07      	ldr	r3, [pc, #28]	@ (800e2a0 <StartReadUARTTask+0xd0>)
 800e284:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800e288:	4618      	mov	r0, r3
 800e28a:	f7f8 fa0b 	bl	80066a4 <osSemaphoreRelease>
 800e28e:	e001      	b.n	800e294 <StartReadUARTTask+0xc4>
					//osThreadTerminate(ThreadStorage.SendUARTThreadId);
					//ThreadStorage.SendUARTThreadId=NULL;
				}else{
					retryStatus=true;
 800e290:	2301      	movs	r3, #1
 800e292:	77fb      	strb	r3, [r7, #31]
				}

			}
		}
		vTaskDelay(xDelay);
 800e294:	2064      	movs	r0, #100	@ 0x64
 800e296:	f7f9 fdf7 	bl	8007e88 <vTaskDelay>
	}
 800e29a:	e7b2      	b.n	800e202 <StartReadUARTTask+0x32>
 800e29c:	08010e1c 	.word	0x08010e1c
 800e2a0:	200090b8 	.word	0x200090b8
 800e2a4:	08010db8 	.word	0x08010db8
 800e2a8:	0800e30d 	.word	0x0800e30d
 800e2ac:	20005000 	.word	0x20005000
 800e2b0:	20000460 	.word	0x20000460
 800e2b4:	2000907c 	.word	0x2000907c

0800e2b8 <WriteUart>:
}
void WriteUart(uint8_t *data,int len){
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
	  uint8_t count=0;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	73fb      	strb	r3, [r7, #15]
	  HAL_StatusTypeDef status=HAL_UART_Transmit(&huart1, data,len ,HAL_MAX_DELAY);
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	b29a      	uxth	r2, r3
 800e2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ce:	6879      	ldr	r1, [r7, #4]
 800e2d0:	480d      	ldr	r0, [pc, #52]	@ (800e308 <WriteUart+0x50>)
 800e2d2:	f7f6 fe2d 	bl	8004f30 <HAL_UART_Transmit>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	73bb      	strb	r3, [r7, #14]
	  if(status!=HAL_OK && count<5)
 800e2da:	7bbb      	ldrb	r3, [r7, #14]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d00f      	beq.n	800e300 <WriteUart+0x48>
 800e2e0:	7bfb      	ldrb	r3, [r7, #15]
 800e2e2:	2b04      	cmp	r3, #4
 800e2e4:	d80c      	bhi.n	800e300 <WriteUart+0x48>
	  {
		  status=HAL_UART_Transmit(&huart1, data,len ,HAL_MAX_DELAY);
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ee:	6879      	ldr	r1, [r7, #4]
 800e2f0:	4805      	ldr	r0, [pc, #20]	@ (800e308 <WriteUart+0x50>)
 800e2f2:	f7f6 fe1d 	bl	8004f30 <HAL_UART_Transmit>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	73bb      	strb	r3, [r7, #14]
		  count++;
 800e2fa:	7bfb      	ldrb	r3, [r7, #15]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	73fb      	strb	r3, [r7, #15]
	  }
	  /*if(status==HAL_OK){
		  uint8_t nl = 0x0A;
		  HAL_UART_Transmit(&huart1, &nl, 1, HAL_MAX_DELAY);
	  }*/
}
 800e300:	bf00      	nop
 800e302:	3710      	adds	r7, #16
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	20000460 	.word	0x20000460

0800e30c <StartSendUARTTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSendUARTTask */
void StartSendUARTTask(void *argument)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e31a:	f843 0c4c 	str.w	r0, [r3, #-76]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  // uint8_t data[] = "SendTask\r\n";
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800e31e:	f7f9 ff65 	bl	80081ec <xTaskGetTickCount>
 800e322:	4603      	mov	r3, r0
 800e324:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800e328:	f102 0208 	add.w	r2, r2, #8
 800e32c:	6013      	str	r3, [r2, #0]
	const TickType_t xFrequency = (1000/SystemConfig.SendPerSecond);
 800e32e:	4bb1      	ldr	r3, [pc, #708]	@ (800e5f4 <StartSendUARTTask+0x2e8>)
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	461a      	mov	r2, r3
 800e334:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e338:	fb93 f3f2 	sdiv	r3, r3, r2
 800e33c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e340:	f102 0218 	add.w	r2, r2, #24
 800e344:	6013      	str	r3, [r2, #0]
	osStatus_t volumeSemaphoreVal;
	osStatus_t flowSemaphoreVal;
	osStatus_t communicationSemaphoreVal;
  for(;;)
  {
	  uint16_t totalLen=11;
 800e346:	230b      	movs	r3, #11
 800e348:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e34c:	f102 020e 	add.w	r2, r2, #14
 800e350:	8013      	strh	r3, [r2, #0]
	  uint8_t allData[4096];
	  firstEmgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FirstEmgSemaphoreHandle,xFrequency/10);
 800e352:	4ba9      	ldr	r3, [pc, #676]	@ (800e5f8 <StartSendUARTTask+0x2ec>)
 800e354:	f8d3 21d0 	ldr.w	r2, [r3, #464]	@ 0x1d0
 800e358:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e35c:	f103 0318 	add.w	r3, r3, #24
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	49a6      	ldr	r1, [pc, #664]	@ (800e5fc <StartSendUARTTask+0x2f0>)
 800e364:	fba1 1303 	umull	r1, r3, r1, r3
 800e368:	08db      	lsrs	r3, r3, #3
 800e36a:	4619      	mov	r1, r3
 800e36c:	4610      	mov	r0, r2
 800e36e:	f7f8 f947 	bl	8006600 <osSemaphoreAcquire>
 800e372:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e376:	f103 0314 	add.w	r3, r3, #20
 800e37a:	6018      	str	r0, [r3, #0]
	  if(firstEmgSemaphoreVal==osOK){
 800e37c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e380:	f103 0314 	add.w	r3, r3, #20
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	f040 80b1 	bne.w	800e4ee <StartSendUARTTask+0x1e2>
		  int xLen=EmgInstance.FirstEmgBufferLen;
 800e38c:	4b9c      	ldr	r3, [pc, #624]	@ (800e600 <StartSendUARTTask+0x2f4>)
 800e38e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e394:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e398:	f102 0210 	add.w	r2, r2, #16
 800e39c:	6013      	str	r3, [r2, #0]
		  if(xLen>0){
 800e39e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e3a2:	f103 0310 	add.w	r3, r3, #16
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f340 809a 	ble.w	800e4e2 <StartSendUARTTask+0x1d6>
			  allData[totalLen]=1;
 800e3ae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e3b2:	f103 030e 	add.w	r3, r3, #14
 800e3b6:	881b      	ldrh	r3, [r3, #0]
 800e3b8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e3bc:	4413      	add	r3, r2
 800e3be:	2201      	movs	r2, #1
 800e3c0:	f803 2c48 	strb.w	r2, [r3, #-72]
			  totalLen++;
 800e3c4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e3c8:	f103 030e 	add.w	r3, r3, #14
 800e3cc:	881b      	ldrh	r3, [r3, #0]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e3d4:	f102 020e 	add.w	r2, r2, #14
 800e3d8:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=(xLen & 0xFF00)>>8;
 800e3da:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e3de:	f103 0310 	add.w	r3, r3, #16
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	121a      	asrs	r2, r3, #8
 800e3e6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e3ea:	f103 030e 	add.w	r3, r3, #14
 800e3ee:	881b      	ldrh	r3, [r3, #0]
 800e3f0:	b2d2      	uxtb	r2, r2
 800e3f2:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e3f6:	440b      	add	r3, r1
 800e3f8:	f803 2c48 	strb.w	r2, [r3, #-72]
			  totalLen++;
 800e3fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e400:	f103 030e 	add.w	r3, r3, #14
 800e404:	881b      	ldrh	r3, [r3, #0]
 800e406:	3301      	adds	r3, #1
 800e408:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e40c:	f102 020e 	add.w	r2, r2, #14
 800e410:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=xLen & 0xFF;
 800e412:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e416:	f103 030e 	add.w	r3, r3, #14
 800e41a:	881b      	ldrh	r3, [r3, #0]
 800e41c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e420:	f102 0210 	add.w	r2, r2, #16
 800e424:	6812      	ldr	r2, [r2, #0]
 800e426:	b2d2      	uxtb	r2, r2
 800e428:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e42c:	440b      	add	r3, r1
 800e42e:	f803 2c48 	strb.w	r2, [r3, #-72]
			  totalLen++;
 800e432:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e436:	f103 030e 	add.w	r3, r3, #14
 800e43a:	881b      	ldrh	r3, [r3, #0]
 800e43c:	3301      	adds	r3, #1
 800e43e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e442:	f102 020e 	add.w	r2, r2, #14
 800e446:	8013      	strh	r3, [r2, #0]
			   for (int i=0;i < xLen; ++i) {
 800e448:	2300      	movs	r3, #0
 800e44a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e44e:	f102 0208 	add.w	r2, r2, #8
 800e452:	6013      	str	r3, [r2, #0]
 800e454:	e033      	b.n	800e4be <StartSendUARTTask+0x1b2>
				   allData[totalLen]=EmgInstance.FirstEmgBuffer[i];
 800e456:	4a6a      	ldr	r2, [pc, #424]	@ (800e600 <StartSendUARTTask+0x2f4>)
 800e458:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e45c:	f103 0308 	add.w	r3, r3, #8
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	330c      	adds	r3, #12
 800e464:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e468:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e46c:	f103 030e 	add.w	r3, r3, #14
 800e470:	881b      	ldrh	r3, [r3, #0]
 800e472:	b2d2      	uxtb	r2, r2
 800e474:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e478:	440b      	add	r3, r1
 800e47a:	f803 2c48 	strb.w	r2, [r3, #-72]
				   totalLen++;
 800e47e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e482:	f103 030e 	add.w	r3, r3, #14
 800e486:	881b      	ldrh	r3, [r3, #0]
 800e488:	3301      	adds	r3, #1
 800e48a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e48e:	f102 020e 	add.w	r2, r2, #14
 800e492:	8013      	strh	r3, [r2, #0]
				   EmgInstance.FirstEmgBuffer[i]=0;
 800e494:	4a5a      	ldr	r2, [pc, #360]	@ (800e600 <StartSendUARTTask+0x2f4>)
 800e496:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e49a:	f103 0308 	add.w	r3, r3, #8
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	330c      	adds	r3, #12
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			   for (int i=0;i < xLen; ++i) {
 800e4a8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e4ac:	f103 0308 	add.w	r3, r3, #8
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e4b8:	f102 0208 	add.w	r2, r2, #8
 800e4bc:	6013      	str	r3, [r2, #0]
 800e4be:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e4c2:	f103 0308 	add.w	r3, r3, #8
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e4cc:	f103 0310 	add.w	r3, r3, #16
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	dbbf      	blt.n	800e456 <StartSendUARTTask+0x14a>
			   }
			   EmgInstance.FirstEmgBufferLen=0;
 800e4d6:	4b4a      	ldr	r3, [pc, #296]	@ (800e600 <StartSendUARTTask+0x2f4>)
 800e4d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4dc:	461a      	mov	r2, r3
 800e4de:	2300      	movs	r3, #0
 800e4e0:	6313      	str	r3, [r2, #48]	@ 0x30
		  }
		  osSemaphoreRelease(ThreadStorage.FirstEmgSemaphoreHandle);
 800e4e2:	4b45      	ldr	r3, [pc, #276]	@ (800e5f8 <StartSendUARTTask+0x2ec>)
 800e4e4:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7f8 f8db 	bl	80066a4 <osSemaphoreRelease>
	  }
	  secondEmgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.SecondEmgSemaphoreHandle, xFrequency/10);
 800e4ee:	4b42      	ldr	r3, [pc, #264]	@ (800e5f8 <StartSendUARTTask+0x2ec>)
 800e4f0:	f8d3 21d4 	ldr.w	r2, [r3, #468]	@ 0x1d4
 800e4f4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e4f8:	f103 0318 	add.w	r3, r3, #24
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	493f      	ldr	r1, [pc, #252]	@ (800e5fc <StartSendUARTTask+0x2f0>)
 800e500:	fba1 1303 	umull	r1, r3, r1, r3
 800e504:	08db      	lsrs	r3, r3, #3
 800e506:	4619      	mov	r1, r3
 800e508:	4610      	mov	r0, r2
 800e50a:	f7f8 f879 	bl	8006600 <osSemaphoreAcquire>
 800e50e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e512:	f103 030c 	add.w	r3, r3, #12
 800e516:	6018      	str	r0, [r3, #0]
	  if(secondEmgSemaphoreVal==osOK){
 800e518:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e51c:	f103 030c 	add.w	r3, r3, #12
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	f040 80bc 	bne.w	800e6a0 <StartSendUARTTask+0x394>
		  int xLen=EmgInstance.SecondEmgBufferLen;
 800e528:	4b35      	ldr	r3, [pc, #212]	@ (800e600 <StartSendUARTTask+0x2f4>)
 800e52a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e52e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e530:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e534:	f102 0208 	add.w	r2, r2, #8
 800e538:	6013      	str	r3, [r2, #0]
		  if(xLen>0){
 800e53a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e53e:	f103 0308 	add.w	r3, r3, #8
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	f340 80a5 	ble.w	800e694 <StartSendUARTTask+0x388>
			  allData[totalLen]=2;
 800e54a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e54e:	f103 030e 	add.w	r3, r3, #14
 800e552:	881b      	ldrh	r3, [r3, #0]
 800e554:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e558:	4413      	add	r3, r2
 800e55a:	2202      	movs	r2, #2
 800e55c:	f803 2c48 	strb.w	r2, [r3, #-72]
			  totalLen++;
 800e560:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e564:	f103 030e 	add.w	r3, r3, #14
 800e568:	881b      	ldrh	r3, [r3, #0]
 800e56a:	3301      	adds	r3, #1
 800e56c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e570:	f102 020e 	add.w	r2, r2, #14
 800e574:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=(xLen & 0xFF00)>>8;
 800e576:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e57a:	f103 0308 	add.w	r3, r3, #8
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	121a      	asrs	r2, r3, #8
 800e582:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e586:	f103 030e 	add.w	r3, r3, #14
 800e58a:	881b      	ldrh	r3, [r3, #0]
 800e58c:	b2d2      	uxtb	r2, r2
 800e58e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e592:	440b      	add	r3, r1
 800e594:	f803 2c48 	strb.w	r2, [r3, #-72]
			  totalLen++;
 800e598:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e59c:	f103 030e 	add.w	r3, r3, #14
 800e5a0:	881b      	ldrh	r3, [r3, #0]
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e5a8:	f102 020e 	add.w	r2, r2, #14
 800e5ac:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=xLen & 0xFF;
 800e5ae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e5b2:	f103 030e 	add.w	r3, r3, #14
 800e5b6:	881b      	ldrh	r3, [r3, #0]
 800e5b8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e5bc:	f102 0208 	add.w	r2, r2, #8
 800e5c0:	6812      	ldr	r2, [r2, #0]
 800e5c2:	b2d2      	uxtb	r2, r2
 800e5c4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e5c8:	440b      	add	r3, r1
 800e5ca:	f803 2c48 	strb.w	r2, [r3, #-72]
			  totalLen++;
 800e5ce:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e5d2:	f103 030e 	add.w	r3, r3, #14
 800e5d6:	881b      	ldrh	r3, [r3, #0]
 800e5d8:	3301      	adds	r3, #1
 800e5da:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e5de:	f102 020e 	add.w	r2, r2, #14
 800e5e2:	8013      	strh	r3, [r2, #0]
			   for (int i=0;i < xLen; ++i) {
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e5ea:	f102 0204 	add.w	r2, r2, #4
 800e5ee:	6013      	str	r3, [r2, #0]
 800e5f0:	e03e      	b.n	800e670 <StartSendUARTTask+0x364>
 800e5f2:	bf00      	nop
 800e5f4:	200092a8 	.word	0x200092a8
 800e5f8:	200090b8 	.word	0x200090b8
 800e5fc:	cccccccd 	.word	0xcccccccd
 800e600:	20005008 	.word	0x20005008
				   allData[totalLen]=EmgInstance.SecondEmgBuffer[i];
 800e604:	4ac8      	ldr	r2, [pc, #800]	@ (800e928 <StartSendUARTTask+0x61c>)
 800e606:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e60a:	f103 0304 	add.w	r3, r3, #4
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800e614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e618:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e61c:	f103 030e 	add.w	r3, r3, #14
 800e620:	881b      	ldrh	r3, [r3, #0]
 800e622:	b2d2      	uxtb	r2, r2
 800e624:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e628:	440b      	add	r3, r1
 800e62a:	f803 2c48 	strb.w	r2, [r3, #-72]
				   totalLen++;
 800e62e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e632:	f103 030e 	add.w	r3, r3, #14
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	3301      	adds	r3, #1
 800e63a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e63e:	f102 020e 	add.w	r2, r2, #14
 800e642:	8013      	strh	r3, [r2, #0]
				   EmgInstance.SecondEmgBuffer[i]=0;
 800e644:	4ab8      	ldr	r2, [pc, #736]	@ (800e928 <StartSendUARTTask+0x61c>)
 800e646:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e64a:	f103 0304 	add.w	r3, r3, #4
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800e654:	2100      	movs	r1, #0
 800e656:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			   for (int i=0;i < xLen; ++i) {
 800e65a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e65e:	f103 0304 	add.w	r3, r3, #4
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	3301      	adds	r3, #1
 800e666:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e66a:	f102 0204 	add.w	r2, r2, #4
 800e66e:	6013      	str	r3, [r2, #0]
 800e670:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e674:	f103 0304 	add.w	r3, r3, #4
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e67e:	f103 0308 	add.w	r3, r3, #8
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	429a      	cmp	r2, r3
 800e686:	dbbd      	blt.n	800e604 <StartSendUARTTask+0x2f8>
			   }
			   EmgInstance.SecondEmgBufferLen=0;
 800e688:	4ba7      	ldr	r3, [pc, #668]	@ (800e928 <StartSendUARTTask+0x61c>)
 800e68a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e68e:	461a      	mov	r2, r3
 800e690:	2300      	movs	r3, #0
 800e692:	6353      	str	r3, [r2, #52]	@ 0x34
		  }
		  osSemaphoreRelease(ThreadStorage.SecondEmgSemaphoreHandle);
 800e694:	4ba5      	ldr	r3, [pc, #660]	@ (800e92c <StartSendUARTTask+0x620>)
 800e696:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7f8 f802 	bl	80066a4 <osSemaphoreRelease>
	  }
	  volumeSemaphoreVal = osSemaphoreAcquire(ThreadStorage.VolumeSemaphoreHandle, xFrequency/10);
 800e6a0:	4ba2      	ldr	r3, [pc, #648]	@ (800e92c <StartSendUARTTask+0x620>)
 800e6a2:	f8d3 21dc 	ldr.w	r2, [r3, #476]	@ 0x1dc
 800e6a6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e6aa:	f103 0318 	add.w	r3, r3, #24
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	499f      	ldr	r1, [pc, #636]	@ (800e930 <StartSendUARTTask+0x624>)
 800e6b2:	fba1 1303 	umull	r1, r3, r1, r3
 800e6b6:	08db      	lsrs	r3, r3, #3
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	4610      	mov	r0, r2
 800e6bc:	f7f7 ffa0 	bl	8006600 <osSemaphoreAcquire>
 800e6c0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e6c4:	f103 0304 	add.w	r3, r3, #4
 800e6c8:	6018      	str	r0, [r3, #0]
	  if(volumeSemaphoreVal==osOK){
 800e6ca:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e6ce:	f103 0304 	add.w	r3, r3, #4
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f040 80a4 	bne.w	800e822 <StartSendUARTTask+0x516>
		  int xLen=LoadCellInstance.VolumeBufferLen;
 800e6da:	4b96      	ldr	r3, [pc, #600]	@ (800e934 <StartSendUARTTask+0x628>)
 800e6dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e6e6:	6013      	str	r3, [r2, #0]
		  if(xLen>0){
 800e6e8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	f340 8091 	ble.w	800e816 <StartSendUARTTask+0x50a>
			  allData[totalLen]=3;
 800e6f4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e6f8:	f103 030e 	add.w	r3, r3, #14
 800e6fc:	881b      	ldrh	r3, [r3, #0]
 800e6fe:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e702:	4413      	add	r3, r2
 800e704:	2203      	movs	r2, #3
 800e706:	f803 2c48 	strb.w	r2, [r3, #-72]
			  totalLen++;
 800e70a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e70e:	f103 030e 	add.w	r3, r3, #14
 800e712:	881b      	ldrh	r3, [r3, #0]
 800e714:	3301      	adds	r3, #1
 800e716:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e71a:	f102 020e 	add.w	r2, r2, #14
 800e71e:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=(xLen & 0xFF00)>>8;
 800e720:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	121a      	asrs	r2, r3, #8
 800e728:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e72c:	f103 030e 	add.w	r3, r3, #14
 800e730:	881b      	ldrh	r3, [r3, #0]
 800e732:	b2d2      	uxtb	r2, r2
 800e734:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e738:	440b      	add	r3, r1
 800e73a:	f803 2c48 	strb.w	r2, [r3, #-72]
			  totalLen++;
 800e73e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e742:	f103 030e 	add.w	r3, r3, #14
 800e746:	881b      	ldrh	r3, [r3, #0]
 800e748:	3301      	adds	r3, #1
 800e74a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e74e:	f102 020e 	add.w	r2, r2, #14
 800e752:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=xLen & 0xFF;
 800e754:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e758:	f103 030e 	add.w	r3, r3, #14
 800e75c:	881b      	ldrh	r3, [r3, #0]
 800e75e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e762:	6812      	ldr	r2, [r2, #0]
 800e764:	b2d2      	uxtb	r2, r2
 800e766:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e76a:	440b      	add	r3, r1
 800e76c:	f803 2c48 	strb.w	r2, [r3, #-72]
			  totalLen++;
 800e770:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e774:	f103 030e 	add.w	r3, r3, #14
 800e778:	881b      	ldrh	r3, [r3, #0]
 800e77a:	3301      	adds	r3, #1
 800e77c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e780:	f102 020e 	add.w	r2, r2, #14
 800e784:	8013      	strh	r3, [r2, #0]
			   for (int i=0;i < xLen; ++i) {
 800e786:	2300      	movs	r3, #0
 800e788:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e78c:	6013      	str	r3, [r2, #0]
 800e78e:	e034      	b.n	800e7fa <StartSendUARTTask+0x4ee>
				   allData[totalLen]=LoadCellInstance.VolumeBuffer[i];
 800e790:	4a68      	ldr	r2, [pc, #416]	@ (800e934 <StartSendUARTTask+0x628>)
 800e792:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	4413      	add	r3, r2
 800e79c:	3304      	adds	r3, #4
 800e79e:	edd3 7a00 	vldr	s15, [r3]
 800e7a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e7a6:	f103 030e 	add.w	r3, r3, #14
 800e7aa:	881b      	ldrh	r3, [r3, #0]
 800e7ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7b0:	edc7 7a00 	vstr	s15, [r7]
 800e7b4:	783a      	ldrb	r2, [r7, #0]
 800e7b6:	b2d2      	uxtb	r2, r2
 800e7b8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e7bc:	440b      	add	r3, r1
 800e7be:	f803 2c48 	strb.w	r2, [r3, #-72]
				   totalLen++;
 800e7c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e7c6:	f103 030e 	add.w	r3, r3, #14
 800e7ca:	881b      	ldrh	r3, [r3, #0]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e7d2:	f102 020e 	add.w	r2, r2, #14
 800e7d6:	8013      	strh	r3, [r2, #0]
				   LoadCellInstance.VolumeBuffer[i]=0;
 800e7d8:	4a56      	ldr	r2, [pc, #344]	@ (800e934 <StartSendUARTTask+0x628>)
 800e7da:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4413      	add	r3, r2
 800e7e4:	3304      	adds	r3, #4
 800e7e6:	f04f 0200 	mov.w	r2, #0
 800e7ea:	601a      	str	r2, [r3, #0]
			   for (int i=0;i < xLen; ++i) {
 800e7ec:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e7f8:	6013      	str	r3, [r2, #0]
 800e7fa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	429a      	cmp	r2, r3
 800e808:	dbc2      	blt.n	800e790 <StartSendUARTTask+0x484>
			   }
			   LoadCellInstance.VolumeBufferLen=0;
 800e80a:	4b4a      	ldr	r3, [pc, #296]	@ (800e934 <StartSendUARTTask+0x628>)
 800e80c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e810:	461a      	mov	r2, r3
 800e812:	2300      	movs	r3, #0
 800e814:	6053      	str	r3, [r2, #4]
		  }
		  osSemaphoreRelease(ThreadStorage.VolumeSemaphoreHandle);
 800e816:	4b45      	ldr	r3, [pc, #276]	@ (800e92c <StartSendUARTTask+0x620>)
 800e818:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7f7 ff41 	bl	80066a4 <osSemaphoreRelease>
	  }
	  flowSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FlowSemaphoreHandle, xFrequency/10);
 800e822:	4b42      	ldr	r3, [pc, #264]	@ (800e92c <StartSendUARTTask+0x620>)
 800e824:	f8d3 21d8 	ldr.w	r2, [r3, #472]	@ 0x1d8
 800e828:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e82c:	f103 0318 	add.w	r3, r3, #24
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	493f      	ldr	r1, [pc, #252]	@ (800e930 <StartSendUARTTask+0x624>)
 800e834:	fba1 1303 	umull	r1, r3, r1, r3
 800e838:	08db      	lsrs	r3, r3, #3
 800e83a:	4619      	mov	r1, r3
 800e83c:	4610      	mov	r0, r2
 800e83e:	f7f7 fedf 	bl	8006600 <osSemaphoreAcquire>
 800e842:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800e846:	f103 031c 	add.w	r3, r3, #28
 800e84a:	6018      	str	r0, [r3, #0]
	  if(flowSemaphoreVal==osOK){
 800e84c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800e850:	f103 031c 	add.w	r3, r3, #28
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	f040 80c5 	bne.w	800e9e6 <StartSendUARTTask+0x6da>
		  int xLen=LoadCellInstance.FlowBufferLen;
 800e85c:	4b35      	ldr	r3, [pc, #212]	@ (800e934 <StartSendUARTTask+0x628>)
 800e85e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e862:	689b      	ldr	r3, [r3, #8]
 800e864:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800e868:	f102 0218 	add.w	r2, r2, #24
 800e86c:	6013      	str	r3, [r2, #0]
		  if(xLen>0){
 800e86e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800e872:	f103 0318 	add.w	r3, r3, #24
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f340 80ae 	ble.w	800e9da <StartSendUARTTask+0x6ce>
			  allData[totalLen]=4;
 800e87e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e882:	f103 030e 	add.w	r3, r3, #14
 800e886:	881b      	ldrh	r3, [r3, #0]
 800e888:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e88c:	4413      	add	r3, r2
 800e88e:	2204      	movs	r2, #4
 800e890:	f803 2c48 	strb.w	r2, [r3, #-72]
			  totalLen++;
 800e894:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e898:	f103 030e 	add.w	r3, r3, #14
 800e89c:	881b      	ldrh	r3, [r3, #0]
 800e89e:	3301      	adds	r3, #1
 800e8a0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e8a4:	f102 020e 	add.w	r2, r2, #14
 800e8a8:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=(xLen & 0xFF00)>>8;
 800e8aa:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800e8ae:	f103 0318 	add.w	r3, r3, #24
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	121a      	asrs	r2, r3, #8
 800e8b6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e8ba:	f103 030e 	add.w	r3, r3, #14
 800e8be:	881b      	ldrh	r3, [r3, #0]
 800e8c0:	b2d2      	uxtb	r2, r2
 800e8c2:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e8c6:	440b      	add	r3, r1
 800e8c8:	f803 2c48 	strb.w	r2, [r3, #-72]
			  totalLen++;
 800e8cc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e8d0:	f103 030e 	add.w	r3, r3, #14
 800e8d4:	881b      	ldrh	r3, [r3, #0]
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e8dc:	f102 020e 	add.w	r2, r2, #14
 800e8e0:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=xLen & 0xFF;
 800e8e2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e8e6:	f103 030e 	add.w	r3, r3, #14
 800e8ea:	881b      	ldrh	r3, [r3, #0]
 800e8ec:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800e8f0:	f102 0218 	add.w	r2, r2, #24
 800e8f4:	6812      	ldr	r2, [r2, #0]
 800e8f6:	b2d2      	uxtb	r2, r2
 800e8f8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e8fc:	440b      	add	r3, r1
 800e8fe:	f803 2c48 	strb.w	r2, [r3, #-72]
			  totalLen++;
 800e902:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e906:	f103 030e 	add.w	r3, r3, #14
 800e90a:	881b      	ldrh	r3, [r3, #0]
 800e90c:	3301      	adds	r3, #1
 800e90e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e912:	f102 020e 	add.w	r2, r2, #14
 800e916:	8013      	strh	r3, [r2, #0]
			   for (int i=0;i < xLen; ++i) {
 800e918:	2300      	movs	r3, #0
 800e91a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e91e:	f102 021c 	add.w	r2, r2, #28
 800e922:	6013      	str	r3, [r2, #0]
 800e924:	e047      	b.n	800e9b6 <StartSendUARTTask+0x6aa>
 800e926:	bf00      	nop
 800e928:	20005008 	.word	0x20005008
 800e92c:	200090b8 	.word	0x200090b8
 800e930:	cccccccd 	.word	0xcccccccd
 800e934:	2000704c 	.word	0x2000704c
				   allData[totalLen]=LoadCellInstance.FlowBuffer[i];
 800e938:	4a8d      	ldr	r2, [pc, #564]	@ (800eb70 <StartSendUARTTask+0x864>)
 800e93a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e93e:	f103 031c 	add.w	r3, r3, #28
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	edd3 7a00 	vldr	s15, [r3]
 800e950:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e954:	f103 030e 	add.w	r3, r3, #14
 800e958:	881b      	ldrh	r3, [r3, #0]
 800e95a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e95e:	edc7 7a00 	vstr	s15, [r7]
 800e962:	783a      	ldrb	r2, [r7, #0]
 800e964:	b2d2      	uxtb	r2, r2
 800e966:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e96a:	440b      	add	r3, r1
 800e96c:	f803 2c48 	strb.w	r2, [r3, #-72]
				   totalLen++;
 800e970:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e974:	f103 030e 	add.w	r3, r3, #14
 800e978:	881b      	ldrh	r3, [r3, #0]
 800e97a:	3301      	adds	r3, #1
 800e97c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800e980:	f102 020e 	add.w	r2, r2, #14
 800e984:	8013      	strh	r3, [r2, #0]
				   LoadCellInstance.FlowBuffer[i]=0;
 800e986:	4a7a      	ldr	r2, [pc, #488]	@ (800eb70 <StartSendUARTTask+0x864>)
 800e988:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e98c:	f103 031c 	add.w	r3, r3, #28
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	4413      	add	r3, r2
 800e99a:	f04f 0200 	mov.w	r2, #0
 800e99e:	601a      	str	r2, [r3, #0]
			   for (int i=0;i < xLen; ++i) {
 800e9a0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e9a4:	f103 031c 	add.w	r3, r3, #28
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800e9b0:	f102 021c 	add.w	r2, r2, #28
 800e9b4:	6013      	str	r3, [r2, #0]
 800e9b6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800e9ba:	f103 031c 	add.w	r3, r3, #28
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800e9c4:	f103 0318 	add.w	r3, r3, #24
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	dbb4      	blt.n	800e938 <StartSendUARTTask+0x62c>
			   }
			   LoadCellInstance.FlowBufferLen=0;
 800e9ce:	4b68      	ldr	r3, [pc, #416]	@ (800eb70 <StartSendUARTTask+0x864>)
 800e9d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	6093      	str	r3, [r2, #8]
		  }
		  osSemaphoreRelease(ThreadStorage.FlowSemaphoreHandle);
 800e9da:	4b66      	ldr	r3, [pc, #408]	@ (800eb74 <StartSendUARTTask+0x868>)
 800e9dc:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7f7 fe5f 	bl	80066a4 <osSemaphoreRelease>
	  }
	  	  if(totalLen>11){
 800e9e6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e9ea:	f103 030e 	add.w	r3, r3, #14
 800e9ee:	881b      	ldrh	r3, [r3, #0]
 800e9f0:	2b0b      	cmp	r3, #11
 800e9f2:	f240 80ae 	bls.w	800eb52 <StartSendUARTTask+0x846>
	  		  uint16_t len=totalLen-3;
 800e9f6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800e9fa:	f103 030e 	add.w	r3, r3, #14
 800e9fe:	881b      	ldrh	r3, [r3, #0]
 800ea00:	3b03      	subs	r3, #3
 800ea02:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800ea06:	f102 0216 	add.w	r2, r2, #22
 800ea0a:	8013      	strh	r3, [r2, #0]
			  allData[0]=3;
 800ea0c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea10:	2203      	movs	r2, #3
 800ea12:	f803 2c48 	strb.w	r2, [r3, #-72]
			  allData[1]=(len & 0xFF00)>>8;
 800ea16:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800ea1a:	f103 0316 	add.w	r3, r3, #22
 800ea1e:	881b      	ldrh	r3, [r3, #0]
 800ea20:	0a1b      	lsrs	r3, r3, #8
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea2a:	f803 2c47 	strb.w	r2, [r3, #-71]
			  allData[2]=len & 0xFF;
 800ea2e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800ea32:	f103 0316 	add.w	r3, r3, #22
 800ea36:	881b      	ldrh	r3, [r3, #0]
 800ea38:	b2da      	uxtb	r2, r3
 800ea3a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea3e:	f803 2c46 	strb.w	r2, [r3, #-70]
			  allData[3]=(SystemConfig.PocketIndex & 0xFF000000) >> 24;
 800ea42:	4b4d      	ldr	r3, [pc, #308]	@ (800eb78 <StartSendUARTTask+0x86c>)
 800ea44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea46:	0e1b      	lsrs	r3, r3, #24
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea4e:	f803 2c45 	strb.w	r2, [r3, #-69]
			  allData[4]=(SystemConfig.PocketIndex & 0x00FF0000) >> 16;
 800ea52:	4b49      	ldr	r3, [pc, #292]	@ (800eb78 <StartSendUARTTask+0x86c>)
 800ea54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea56:	141b      	asrs	r3, r3, #16
 800ea58:	b2da      	uxtb	r2, r3
 800ea5a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea5e:	f803 2c44 	strb.w	r2, [r3, #-68]
			  allData[5]=(SystemConfig.PocketIndex & 0x0000FF00) >> 8;
 800ea62:	4b45      	ldr	r3, [pc, #276]	@ (800eb78 <StartSendUARTTask+0x86c>)
 800ea64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea66:	121b      	asrs	r3, r3, #8
 800ea68:	b2da      	uxtb	r2, r3
 800ea6a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea6e:	f803 2c43 	strb.w	r2, [r3, #-67]
			  allData[6]=(SystemConfig.PocketIndex & 0x000000FF);
 800ea72:	4b41      	ldr	r3, [pc, #260]	@ (800eb78 <StartSendUARTTask+0x86c>)
 800ea74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ea7c:	f803 2c42 	strb.w	r2, [r3, #-66]
			  uint32_t time=(StartTimerTicks-SystemConfig.StartTestTime)/10;
 800ea80:	4b3e      	ldr	r3, [pc, #248]	@ (800eb7c <StartSendUARTTask+0x870>)
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	4b3c      	ldr	r3, [pc, #240]	@ (800eb78 <StartSendUARTTask+0x86c>)
 800ea86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	4a3d      	ldr	r2, [pc, #244]	@ (800eb80 <StartSendUARTTask+0x874>)
 800ea8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ea90:	08db      	lsrs	r3, r3, #3
 800ea92:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800ea96:	f102 0210 	add.w	r2, r2, #16
 800ea9a:	6013      	str	r3, [r2, #0]
			  allData[7]=(time & 0xFF000000) >> 24;
 800ea9c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800eaa0:	f103 0310 	add.w	r3, r3, #16
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	0e1b      	lsrs	r3, r3, #24
 800eaa8:	b2da      	uxtb	r2, r3
 800eaaa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800eaae:	f803 2c41 	strb.w	r2, [r3, #-65]
			  allData[8]=(time & 0x00FF0000) >> 16;
 800eab2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800eab6:	f103 0310 	add.w	r3, r3, #16
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	0c1b      	lsrs	r3, r3, #16
 800eabe:	b2da      	uxtb	r2, r3
 800eac0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800eac4:	f803 2c40 	strb.w	r2, [r3, #-64]
			  allData[9]=(time & 0x0000FF00) >> 8;
 800eac8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800eacc:	f103 0310 	add.w	r3, r3, #16
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	0a1b      	lsrs	r3, r3, #8
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800eada:	f803 2c3f 	strb.w	r2, [r3, #-63]
			  allData[10]=(time & 0x000000FF);
 800eade:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800eae2:	f103 0310 	add.w	r3, r3, #16
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	b2da      	uxtb	r2, r3
 800eaea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800eaee:	f803 2c3e 	strb.w	r2, [r3, #-62]
	  		  if(SystemConfig.IsStartTest){
 800eaf2:	4b21      	ldr	r3, [pc, #132]	@ (800eb78 <StartSendUARTTask+0x86c>)
 800eaf4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d025      	beq.n	800eb48 <StartSendUARTTask+0x83c>
	  			  communicationSemaphoreVal = osSemaphoreAcquire(ThreadStorage.CommunicationSemaphoreHandle, 1000);
 800eafc:	4b1d      	ldr	r3, [pc, #116]	@ (800eb74 <StartSendUARTTask+0x868>)
 800eafe:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800eb02:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7f7 fd7a 	bl	8006600 <osSemaphoreAcquire>
 800eb0c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800eb10:	f103 030c 	add.w	r3, r3, #12
 800eb14:	6018      	str	r0, [r3, #0]
	  			  if(communicationSemaphoreVal==osOK){
 800eb16:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800eb1a:	f103 030c 	add.w	r3, r3, #12
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d111      	bne.n	800eb48 <StartSendUARTTask+0x83c>
	  	  			WriteUart(allData,totalLen);
 800eb24:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800eb28:	f103 030e 	add.w	r3, r3, #14
 800eb2c:	881a      	ldrh	r2, [r3, #0]
 800eb2e:	f107 0310 	add.w	r3, r7, #16
 800eb32:	3b08      	subs	r3, #8
 800eb34:	4611      	mov	r1, r2
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7ff fbbe 	bl	800e2b8 <WriteUart>
	  				  osSemaphoreRelease(ThreadStorage.CommunicationSemaphoreHandle);
 800eb3c:	4b0d      	ldr	r3, [pc, #52]	@ (800eb74 <StartSendUARTTask+0x868>)
 800eb3e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7f7 fdae 	bl	80066a4 <osSemaphoreRelease>
	  			  }
	  		  }
	  		SystemConfig.PocketIndex++;
 800eb48:	4b0b      	ldr	r3, [pc, #44]	@ (800eb78 <StartSendUARTTask+0x86c>)
 800eb4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	4a0a      	ldr	r2, [pc, #40]	@ (800eb78 <StartSendUARTTask+0x86c>)
 800eb50:	66d3      	str	r3, [r2, #108]	@ 0x6c
	  	  }
  		  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800eb52:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800eb56:	f103 0308 	add.w	r3, r3, #8
 800eb5a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800eb5e:	f102 0218 	add.w	r2, r2, #24
 800eb62:	6811      	ldr	r1, [r2, #0]
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7f9 f90f 	bl	8007d88 <vTaskDelayUntil>
  }
 800eb6a:	f7ff bbec 	b.w	800e346 <StartSendUARTTask+0x3a>
 800eb6e:	bf00      	nop
 800eb70:	2000704c 	.word	0x2000704c
 800eb74:	200090b8 	.word	0x200090b8
 800eb78:	200092a8 	.word	0x200092a8
 800eb7c:	200000cc 	.word	0x200000cc
 800eb80:	cccccccd 	.word	0xcccccccd

0800eb84 <StartFirstEmgTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFirstEmgTask */
void StartFirstEmgTask(void *argument)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.FirstEmgPerSecond) / portTICK_PERIOD_MS;
 800eb8c:	4b17      	ldr	r3, [pc, #92]	@ (800ebec <StartFirstEmgTask+0x68>)
 800eb8e:	785b      	ldrb	r3, [r3, #1]
 800eb90:	461a      	mov	r2, r3
 800eb92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eb96:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb9a:	60fb      	str	r3, [r7, #12]
	ThreadStorage.FirstEmgSemaphoreHandle = osSemaphoreNew(1, 1, &firstEmgSemaphore_attributes);
 800eb9c:	4a14      	ldr	r2, [pc, #80]	@ (800ebf0 <StartFirstEmgTask+0x6c>)
 800eb9e:	2101      	movs	r1, #1
 800eba0:	2001      	movs	r0, #1
 800eba2:	f7f7 fca4 	bl	80064ee <osSemaphoreNew>
 800eba6:	4603      	mov	r3, r0
 800eba8:	4a12      	ldr	r2, [pc, #72]	@ (800ebf4 <StartFirstEmgTask+0x70>)
 800ebaa:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
	osStatus_t emgSemaphoreVal;
	for(;;)
	{
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FirstEmgSemaphoreHandle, 1000);
 800ebae:	4b11      	ldr	r3, [pc, #68]	@ (800ebf4 <StartFirstEmgTask+0x70>)
 800ebb0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800ebb4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7f7 fd21 	bl	8006600 <osSemaphoreAcquire>
 800ebbe:	60b8      	str	r0, [r7, #8]
		if(emgSemaphoreVal==osOK){
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d1f3      	bne.n	800ebae <StartFirstEmgTask+0x2a>
			firstEmgCounter++;
 800ebc6:	4b0c      	ldr	r3, [pc, #48]	@ (800ebf8 <StartFirstEmgTask+0x74>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	4a0a      	ldr	r2, [pc, #40]	@ (800ebf8 <StartFirstEmgTask+0x74>)
 800ebce:	6013      	str	r3, [r2, #0]
			EmgInstance.FirstEmgRead(true);
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	480a      	ldr	r0, [pc, #40]	@ (800ebfc <StartFirstEmgTask+0x78>)
 800ebd4:	f7fc f8d0 	bl	800ad78 <_ZN3Emg12FirstEmgReadEb>
			osSemaphoreRelease(ThreadStorage.FirstEmgSemaphoreHandle);
 800ebd8:	4b06      	ldr	r3, [pc, #24]	@ (800ebf4 <StartFirstEmgTask+0x70>)
 800ebda:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7f7 fd60 	bl	80066a4 <osSemaphoreRelease>
			vTaskDelay( xDelay );
 800ebe4:	68f8      	ldr	r0, [r7, #12]
 800ebe6:	f7f9 f94f 	bl	8007e88 <vTaskDelay>
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FirstEmgSemaphoreHandle, 1000);
 800ebea:	e7e0      	b.n	800ebae <StartFirstEmgTask+0x2a>
 800ebec:	200092a8 	.word	0x200092a8
 800ebf0:	08010ddc 	.word	0x08010ddc
 800ebf4:	200090b8 	.word	0x200090b8
 800ebf8:	20004ff0 	.word	0x20004ff0
 800ebfc:	20005008 	.word	0x20005008

0800ec00 <StartReadFirstEmgTask>:
	}
  /* USER CODE END 5 */
}

void StartReadFirstEmgTask(void *argument)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b08a      	sub	sp, #40	@ 0x28
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.FirstEmgPerSecond) / portTICK_PERIOD_MS;
 800ec08:	4b32      	ldr	r3, [pc, #200]	@ (800ecd4 <StartReadFirstEmgTask+0xd4>)
 800ec0a:	785b      	ldrb	r3, [r3, #1]
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ec12:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec16:	627b      	str	r3, [r7, #36]	@ 0x24
	ThreadStorage.FirstEmgSemaphoreHandle = osSemaphoreNew(1, 1, &firstEmgSemaphore_attributes);
 800ec18:	4a2f      	ldr	r2, [pc, #188]	@ (800ecd8 <StartReadFirstEmgTask+0xd8>)
 800ec1a:	2101      	movs	r1, #1
 800ec1c:	2001      	movs	r0, #1
 800ec1e:	f7f7 fc66 	bl	80064ee <osSemaphoreNew>
 800ec22:	4603      	mov	r3, r0
 800ec24:	4a2d      	ldr	r2, [pc, #180]	@ (800ecdc <StartReadFirstEmgTask+0xdc>)
 800ec26:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
	osStatus_t emgSemaphoreVal;
	uint8_t data[8];
	SystemConfig.StartTestTime=StartTimerTicks;
 800ec2a:	4b2d      	ldr	r3, [pc, #180]	@ (800ece0 <StartReadFirstEmgTask+0xe0>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4a29      	ldr	r2, [pc, #164]	@ (800ecd4 <StartReadFirstEmgTask+0xd4>)
 800ec30:	6313      	str	r3, [r2, #48]	@ 0x30
	for(;;)
	{
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FirstEmgSemaphoreHandle, 1000);
 800ec32:	4b2a      	ldr	r3, [pc, #168]	@ (800ecdc <StartReadFirstEmgTask+0xdc>)
 800ec34:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800ec38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7f7 fcdf 	bl	8006600 <osSemaphoreAcquire>
 800ec42:	6238      	str	r0, [r7, #32]
		if(emgSemaphoreVal==osOK){
 800ec44:	6a3b      	ldr	r3, [r7, #32]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d140      	bne.n	800eccc <StartReadFirstEmgTask+0xcc>
			EmgInstance.FirstEmgRead(false);
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	4825      	ldr	r0, [pc, #148]	@ (800ece4 <StartReadFirstEmgTask+0xe4>)
 800ec4e:	f7fc f893 	bl	800ad78 <_ZN3Emg12FirstEmgReadEb>
			float32_t emgValue=EmgInstance.FirstEmgValue;
 800ec52:	4b24      	ldr	r3, [pc, #144]	@ (800ece4 <StartReadFirstEmgTask+0xe4>)
 800ec54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec56:	ee07 3a90 	vmov	s15, r3
 800ec5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec5e:	edc7 7a03 	vstr	s15, [r7, #12]
			uint8_t *emgArray;
			emgArray = (uint8_t*)(&emgValue );
 800ec62:	f107 030c 	add.w	r3, r7, #12
 800ec66:	61fb      	str	r3, [r7, #28]
			uint32_t time=(StartTimerTicks-SystemConfig.StartTestTime)/10;
 800ec68:	4b1d      	ldr	r3, [pc, #116]	@ (800ece0 <StartReadFirstEmgTask+0xe0>)
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	4b19      	ldr	r3, [pc, #100]	@ (800ecd4 <StartReadFirstEmgTask+0xd4>)
 800ec6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	4a1d      	ldr	r2, [pc, #116]	@ (800ece8 <StartReadFirstEmgTask+0xe8>)
 800ec74:	fba2 2303 	umull	r2, r3, r2, r3
 800ec78:	08db      	lsrs	r3, r3, #3
 800ec7a:	61bb      	str	r3, [r7, #24]
			data[0]=(time & 0xFF000000) >> 24;
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	0e1b      	lsrs	r3, r3, #24
 800ec80:	b2db      	uxtb	r3, r3
 800ec82:	743b      	strb	r3, [r7, #16]
			data[1]=(time & 0x00FF0000) >> 16;
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	0c1b      	lsrs	r3, r3, #16
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	747b      	strb	r3, [r7, #17]
			data[2]=(time & 0x0000FF00) >> 8;
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	0a1b      	lsrs	r3, r3, #8
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	74bb      	strb	r3, [r7, #18]
			data[3]=(time & 0x000000FF);
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	74fb      	strb	r3, [r7, #19]
			data[4]=emgArray[0];
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	753b      	strb	r3, [r7, #20]
			data[5]=emgArray[1];
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	785b      	ldrb	r3, [r3, #1]
 800eca4:	757b      	strb	r3, [r7, #21]
			data[6]=emgArray[2];
 800eca6:	69fb      	ldr	r3, [r7, #28]
 800eca8:	789b      	ldrb	r3, [r3, #2]
 800ecaa:	75bb      	strb	r3, [r7, #22]
			data[7]=emgArray[3];
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	78db      	ldrb	r3, [r3, #3]
 800ecb0:	75fb      	strb	r3, [r7, #23]
			SuccessDataResult(0, SuccessDataType::SD_FirstEmg, data, 8);
 800ecb2:	f107 0210 	add.w	r2, r7, #16
 800ecb6:	2308      	movs	r3, #8
 800ecb8:	210a      	movs	r1, #10
 800ecba:	2000      	movs	r0, #0
 800ecbc:	f7ff f9ee 	bl	800e09c <SuccessDataResult>
			osSemaphoreRelease(ThreadStorage.FirstEmgSemaphoreHandle);
 800ecc0:	4b06      	ldr	r3, [pc, #24]	@ (800ecdc <StartReadFirstEmgTask+0xdc>)
 800ecc2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7f7 fcec 	bl	80066a4 <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800eccc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecce:	f7f9 f8db 	bl	8007e88 <vTaskDelay>
	}
 800ecd2:	e7ae      	b.n	800ec32 <StartReadFirstEmgTask+0x32>
 800ecd4:	200092a8 	.word	0x200092a8
 800ecd8:	08010ddc 	.word	0x08010ddc
 800ecdc:	200090b8 	.word	0x200090b8
 800ece0:	200000cc 	.word	0x200000cc
 800ece4:	20005008 	.word	0x20005008
 800ece8:	cccccccd 	.word	0xcccccccd

0800ecec <StartSecondEmgTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSecondEmgTask */
void StartSecondEmgTask(void *argument)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.SecondEmgPerSecond) / portTICK_PERIOD_MS;
 800ecf4:	4b17      	ldr	r3, [pc, #92]	@ (800ed54 <StartSecondEmgTask+0x68>)
 800ecf6:	789b      	ldrb	r3, [r3, #2]
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ecfe:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed02:	60fb      	str	r3, [r7, #12]
	ThreadStorage.SecondEmgSemaphoreHandle = osSemaphoreNew(1, 1, &secondEmgSemaphore_attributes);
 800ed04:	4a14      	ldr	r2, [pc, #80]	@ (800ed58 <StartSecondEmgTask+0x6c>)
 800ed06:	2101      	movs	r1, #1
 800ed08:	2001      	movs	r0, #1
 800ed0a:	f7f7 fbf0 	bl	80064ee <osSemaphoreNew>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	4a12      	ldr	r2, [pc, #72]	@ (800ed5c <StartSecondEmgTask+0x70>)
 800ed12:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
	osStatus_t emgSemaphoreVal;
	for(;;)
	{
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.SecondEmgSemaphoreHandle, 1000);
 800ed16:	4b11      	ldr	r3, [pc, #68]	@ (800ed5c <StartSecondEmgTask+0x70>)
 800ed18:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800ed1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7f7 fc6d 	bl	8006600 <osSemaphoreAcquire>
 800ed26:	60b8      	str	r0, [r7, #8]
		if(emgSemaphoreVal==osOK){
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d10e      	bne.n	800ed4c <StartSecondEmgTask+0x60>
			secondEmgCounter++;
 800ed2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ed60 <StartSecondEmgTask+0x74>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	3301      	adds	r3, #1
 800ed34:	4a0a      	ldr	r2, [pc, #40]	@ (800ed60 <StartSecondEmgTask+0x74>)
 800ed36:	6013      	str	r3, [r2, #0]
			EmgInstance.SecondEmgRead(true);
 800ed38:	2101      	movs	r1, #1
 800ed3a:	480a      	ldr	r0, [pc, #40]	@ (800ed64 <StartSecondEmgTask+0x78>)
 800ed3c:	f7fc f894 	bl	800ae68 <_ZN3Emg13SecondEmgReadEb>
			osSemaphoreRelease(ThreadStorage.SecondEmgSemaphoreHandle);
 800ed40:	4b06      	ldr	r3, [pc, #24]	@ (800ed5c <StartSecondEmgTask+0x70>)
 800ed42:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7f7 fcac 	bl	80066a4 <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f7f9 f89b 	bl	8007e88 <vTaskDelay>
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.SecondEmgSemaphoreHandle, 1000);
 800ed52:	e7e0      	b.n	800ed16 <StartSecondEmgTask+0x2a>
 800ed54:	200092a8 	.word	0x200092a8
 800ed58:	08010dec 	.word	0x08010dec
 800ed5c:	200090b8 	.word	0x200090b8
 800ed60:	20004ff4 	.word	0x20004ff4
 800ed64:	20005008 	.word	0x20005008

0800ed68 <StartReadSecondEmgTask>:
	}
  /* USER CODE END 5 */
}

void StartReadSecondEmgTask(void *argument)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b08a      	sub	sp, #40	@ 0x28
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.SecondEmgPerSecond) / portTICK_PERIOD_MS;
 800ed70:	4b32      	ldr	r3, [pc, #200]	@ (800ee3c <StartReadSecondEmgTask+0xd4>)
 800ed72:	789b      	ldrb	r3, [r3, #2]
 800ed74:	461a      	mov	r2, r3
 800ed76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ed7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed7e:	627b      	str	r3, [r7, #36]	@ 0x24
	ThreadStorage.SecondEmgSemaphoreHandle = osSemaphoreNew(1, 1, &secondEmgSemaphore_attributes);
 800ed80:	4a2f      	ldr	r2, [pc, #188]	@ (800ee40 <StartReadSecondEmgTask+0xd8>)
 800ed82:	2101      	movs	r1, #1
 800ed84:	2001      	movs	r0, #1
 800ed86:	f7f7 fbb2 	bl	80064ee <osSemaphoreNew>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	4a2d      	ldr	r2, [pc, #180]	@ (800ee44 <StartReadSecondEmgTask+0xdc>)
 800ed8e:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
	osStatus_t emgSemaphoreVal;
	uint8_t data[8];
	SystemConfig.StartTestTime=StartTimerTicks;
 800ed92:	4b2d      	ldr	r3, [pc, #180]	@ (800ee48 <StartReadSecondEmgTask+0xe0>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	4a29      	ldr	r2, [pc, #164]	@ (800ee3c <StartReadSecondEmgTask+0xd4>)
 800ed98:	6313      	str	r3, [r2, #48]	@ 0x30
	for(;;)
	{
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.SecondEmgSemaphoreHandle, 1000);
 800ed9a:	4b2a      	ldr	r3, [pc, #168]	@ (800ee44 <StartReadSecondEmgTask+0xdc>)
 800ed9c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800eda0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7f7 fc2b 	bl	8006600 <osSemaphoreAcquire>
 800edaa:	6238      	str	r0, [r7, #32]
		if(emgSemaphoreVal==osOK){
 800edac:	6a3b      	ldr	r3, [r7, #32]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d140      	bne.n	800ee34 <StartReadSecondEmgTask+0xcc>
			EmgInstance.SecondEmgRead(false);
 800edb2:	2100      	movs	r1, #0
 800edb4:	4825      	ldr	r0, [pc, #148]	@ (800ee4c <StartReadSecondEmgTask+0xe4>)
 800edb6:	f7fc f857 	bl	800ae68 <_ZN3Emg13SecondEmgReadEb>
			float32_t emgValue=EmgInstance.SecondEmgValue;
 800edba:	4b24      	ldr	r3, [pc, #144]	@ (800ee4c <StartReadSecondEmgTask+0xe4>)
 800edbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edbe:	ee07 3a90 	vmov	s15, r3
 800edc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edc6:	edc7 7a03 	vstr	s15, [r7, #12]
			uint8_t *emgArray;
			emgArray = (uint8_t*)(&emgValue );
 800edca:	f107 030c 	add.w	r3, r7, #12
 800edce:	61fb      	str	r3, [r7, #28]
			uint32_t time=(StartTimerTicks-SystemConfig.StartTestTime)/10;
 800edd0:	4b1d      	ldr	r3, [pc, #116]	@ (800ee48 <StartReadSecondEmgTask+0xe0>)
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	4b19      	ldr	r3, [pc, #100]	@ (800ee3c <StartReadSecondEmgTask+0xd4>)
 800edd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edd8:	1ad3      	subs	r3, r2, r3
 800edda:	4a1d      	ldr	r2, [pc, #116]	@ (800ee50 <StartReadSecondEmgTask+0xe8>)
 800eddc:	fba2 2303 	umull	r2, r3, r2, r3
 800ede0:	08db      	lsrs	r3, r3, #3
 800ede2:	61bb      	str	r3, [r7, #24]
			data[0]=(time & 0xFF000000) >> 24;
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	0e1b      	lsrs	r3, r3, #24
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	743b      	strb	r3, [r7, #16]
			data[1]=(time & 0x00FF0000) >> 16;
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	0c1b      	lsrs	r3, r3, #16
 800edf0:	b2db      	uxtb	r3, r3
 800edf2:	747b      	strb	r3, [r7, #17]
			data[2]=(time & 0x0000FF00) >> 8;
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	0a1b      	lsrs	r3, r3, #8
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	74bb      	strb	r3, [r7, #18]
			data[3]=(time & 0x000000FF);
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	74fb      	strb	r3, [r7, #19]
			data[4]=emgArray[0];
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	753b      	strb	r3, [r7, #20]
			data[5]=emgArray[1];
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	785b      	ldrb	r3, [r3, #1]
 800ee0c:	757b      	strb	r3, [r7, #21]
			data[6]=emgArray[2];
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	789b      	ldrb	r3, [r3, #2]
 800ee12:	75bb      	strb	r3, [r7, #22]
			data[7]=emgArray[3];
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	78db      	ldrb	r3, [r3, #3]
 800ee18:	75fb      	strb	r3, [r7, #23]
			SuccessDataResult(0, SuccessDataType::SD_SecondEmg, data, 8);
 800ee1a:	f107 0210 	add.w	r2, r7, #16
 800ee1e:	2308      	movs	r3, #8
 800ee20:	210b      	movs	r1, #11
 800ee22:	2000      	movs	r0, #0
 800ee24:	f7ff f93a 	bl	800e09c <SuccessDataResult>
			osSemaphoreRelease(ThreadStorage.SecondEmgSemaphoreHandle);
 800ee28:	4b06      	ldr	r3, [pc, #24]	@ (800ee44 <StartReadSecondEmgTask+0xdc>)
 800ee2a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7f7 fc38 	bl	80066a4 <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800ee34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee36:	f7f9 f827 	bl	8007e88 <vTaskDelay>
	}
 800ee3a:	e7ae      	b.n	800ed9a <StartReadSecondEmgTask+0x32>
 800ee3c:	200092a8 	.word	0x200092a8
 800ee40:	08010dec 	.word	0x08010dec
 800ee44:	200090b8 	.word	0x200090b8
 800ee48:	200000cc 	.word	0x200000cc
 800ee4c:	20005008 	.word	0x20005008
 800ee50:	cccccccd 	.word	0xcccccccd

0800ee54 <StartFlowTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.FlowPerSecond) / portTICK_PERIOD_MS;
 800ee5c:	4b17      	ldr	r3, [pc, #92]	@ (800eebc <StartFlowTask+0x68>)
 800ee5e:	791b      	ldrb	r3, [r3, #4]
 800ee60:	461a      	mov	r2, r3
 800ee62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ee66:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee6a:	60fb      	str	r3, [r7, #12]
	ThreadStorage.FlowSemaphoreHandle = osSemaphoreNew(1, 1, &flowSemaphore_attributes);
 800ee6c:	4a14      	ldr	r2, [pc, #80]	@ (800eec0 <StartFlowTask+0x6c>)
 800ee6e:	2101      	movs	r1, #1
 800ee70:	2001      	movs	r0, #1
 800ee72:	f7f7 fb3c 	bl	80064ee <osSemaphoreNew>
 800ee76:	4603      	mov	r3, r0
 800ee78:	4a12      	ldr	r2, [pc, #72]	@ (800eec4 <StartFlowTask+0x70>)
 800ee7a:	f8c2 31d8 	str.w	r3, [r2, #472]	@ 0x1d8
	osStatus_t flowSemaphoreVal;
	for(;;)
	{
		flowSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FlowSemaphoreHandle, 1000);
 800ee7e:	4b11      	ldr	r3, [pc, #68]	@ (800eec4 <StartFlowTask+0x70>)
 800ee80:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800ee84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7f7 fbb9 	bl	8006600 <osSemaphoreAcquire>
 800ee8e:	60b8      	str	r0, [r7, #8]
		if(flowSemaphoreVal==osOK){
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d10e      	bne.n	800eeb4 <StartFlowTask+0x60>
			flowCounter++;
 800ee96:	4b0c      	ldr	r3, [pc, #48]	@ (800eec8 <StartFlowTask+0x74>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	4a0a      	ldr	r2, [pc, #40]	@ (800eec8 <StartFlowTask+0x74>)
 800ee9e:	6013      	str	r3, [r2, #0]
			LoadCellInstance.ReadFlow(true);
 800eea0:	2101      	movs	r1, #1
 800eea2:	480a      	ldr	r0, [pc, #40]	@ (800eecc <StartFlowTask+0x78>)
 800eea4:	f7fe fad0 	bl	800d448 <_ZN8LoadCell8ReadFlowEb>
			osSemaphoreRelease(ThreadStorage.FlowSemaphoreHandle);
 800eea8:	4b06      	ldr	r3, [pc, #24]	@ (800eec4 <StartFlowTask+0x70>)
 800eeaa:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7f7 fbf8 	bl	80066a4 <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800eeb4:	68f8      	ldr	r0, [r7, #12]
 800eeb6:	f7f8 ffe7 	bl	8007e88 <vTaskDelay>
		flowSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FlowSemaphoreHandle, 1000);
 800eeba:	e7e0      	b.n	800ee7e <StartFlowTask+0x2a>
 800eebc:	200092a8 	.word	0x200092a8
 800eec0:	08010dfc 	.word	0x08010dfc
 800eec4:	200090b8 	.word	0x200090b8
 800eec8:	20004ff8 	.word	0x20004ff8
 800eecc:	2000704c 	.word	0x2000704c

0800eed0 <StartReadFlowTask>:
	}
  /* USER CODE END 5 */
}
void StartReadFlowTask(void *argument)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b08e      	sub	sp, #56	@ 0x38
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	LoadCellInstance.ClearSamples();
 800eed8:	4838      	ldr	r0, [pc, #224]	@ (800efbc <StartReadFlowTask+0xec>)
 800eeda:	f7fe fd59 	bl	800d990 <_ZN8LoadCell12ClearSamplesEv>
	const TickType_t xDelay = (1000/SystemConfig.FlowPerSecond) / portTICK_PERIOD_MS;
 800eede:	4b38      	ldr	r3, [pc, #224]	@ (800efc0 <StartReadFlowTask+0xf0>)
 800eee0:	791b      	ldrb	r3, [r3, #4]
 800eee2:	461a      	mov	r2, r3
 800eee4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eee8:	fb93 f3f2 	sdiv	r3, r3, r2
 800eeec:	637b      	str	r3, [r7, #52]	@ 0x34
	ThreadStorage.FlowSemaphoreHandle = osSemaphoreNew(1, 1, &flowSemaphore_attributes);
 800eeee:	4a35      	ldr	r2, [pc, #212]	@ (800efc4 <StartReadFlowTask+0xf4>)
 800eef0:	2101      	movs	r1, #1
 800eef2:	2001      	movs	r0, #1
 800eef4:	f7f7 fafb 	bl	80064ee <osSemaphoreNew>
 800eef8:	4603      	mov	r3, r0
 800eefa:	4a33      	ldr	r2, [pc, #204]	@ (800efc8 <StartReadFlowTask+0xf8>)
 800eefc:	f8c2 31d8 	str.w	r3, [r2, #472]	@ 0x1d8
	osStatus_t flowSemaphoreVal;
	float32_t avg=SystemConfig.FlowAverage;
 800ef00:	4b2f      	ldr	r3, [pc, #188]	@ (800efc0 <StartReadFlowTask+0xf0>)
 800ef02:	695b      	ldr	r3, [r3, #20]
 800ef04:	ee07 3a90 	vmov	s15, r3
 800ef08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef0c:	edc7 7a08 	vstr	s15, [r7, #32]
	uint8_t *avgArray;
	avgArray = (uint8_t*)(&avg );
 800ef10:	f107 0320 	add.w	r3, r7, #32
 800ef14:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t data[12];
	data[0]=avgArray[0];
 800ef16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	753b      	strb	r3, [r7, #20]
	data[1]=avgArray[1];
 800ef1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef1e:	785b      	ldrb	r3, [r3, #1]
 800ef20:	757b      	strb	r3, [r7, #21]
	data[2]=avgArray[2];
 800ef22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef24:	789b      	ldrb	r3, [r3, #2]
 800ef26:	75bb      	strb	r3, [r7, #22]
	data[3]=avgArray[3];
 800ef28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef2a:	78db      	ldrb	r3, [r3, #3]
 800ef2c:	75fb      	strb	r3, [r7, #23]
	for(;;)
	{
		flowSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FlowSemaphoreHandle, 1000);
 800ef2e:	4b26      	ldr	r3, [pc, #152]	@ (800efc8 <StartReadFlowTask+0xf8>)
 800ef30:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800ef34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7f7 fb61 	bl	8006600 <osSemaphoreAcquire>
 800ef3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(flowSemaphoreVal==osOK){
 800ef40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d136      	bne.n	800efb4 <StartReadFlowTask+0xe4>
			LoadCellInstance.ReadFlow(false);
 800ef46:	2100      	movs	r1, #0
 800ef48:	481c      	ldr	r0, [pc, #112]	@ (800efbc <StartReadFlowTask+0xec>)
 800ef4a:	f7fe fa7d 	bl	800d448 <_ZN8LoadCell8ReadFlowEb>
			float32_t rate=SystemConfig.FlowRate;
 800ef4e:	4b1c      	ldr	r3, [pc, #112]	@ (800efc0 <StartReadFlowTask+0xf0>)
 800ef50:	6a1b      	ldr	r3, [r3, #32]
 800ef52:	613b      	str	r3, [r7, #16]
			uint8_t *rateArray;
			rateArray = (uint8_t*)(&rate );
 800ef54:	f107 0310 	add.w	r3, r7, #16
 800ef58:	62bb      	str	r3, [r7, #40]	@ 0x28
			float32_t flow=LoadCellInstance.LastReadFlowValue;
 800ef5a:	4b18      	ldr	r3, [pc, #96]	@ (800efbc <StartReadFlowTask+0xec>)
 800ef5c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ef60:	69db      	ldr	r3, [r3, #28]
 800ef62:	60fb      	str	r3, [r7, #12]
			uint8_t *flowArray;
			flowArray = (uint8_t*)(&flow );
 800ef64:	f107 030c 	add.w	r3, r7, #12
 800ef68:	627b      	str	r3, [r7, #36]	@ 0x24
			data[4]=rateArray[0];
 800ef6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	763b      	strb	r3, [r7, #24]
			data[5]=rateArray[1];
 800ef70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef72:	785b      	ldrb	r3, [r3, #1]
 800ef74:	767b      	strb	r3, [r7, #25]
			data[6]=rateArray[2];
 800ef76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef78:	789b      	ldrb	r3, [r3, #2]
 800ef7a:	76bb      	strb	r3, [r7, #26]
			data[7]=rateArray[3];
 800ef7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef7e:	78db      	ldrb	r3, [r3, #3]
 800ef80:	76fb      	strb	r3, [r7, #27]
			data[8]=flowArray[0];
 800ef82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	773b      	strb	r3, [r7, #28]
			data[9]=flowArray[1];
 800ef88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef8a:	785b      	ldrb	r3, [r3, #1]
 800ef8c:	777b      	strb	r3, [r7, #29]
			data[10]=flowArray[2];
 800ef8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef90:	789b      	ldrb	r3, [r3, #2]
 800ef92:	77bb      	strb	r3, [r7, #30]
			data[11]=flowArray[3];
 800ef94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef96:	78db      	ldrb	r3, [r3, #3]
 800ef98:	77fb      	strb	r3, [r7, #31]
			SuccessDataResult(0, SuccessDataType::SD_Flow, data, 12);
 800ef9a:	f107 0214 	add.w	r2, r7, #20
 800ef9e:	230c      	movs	r3, #12
 800efa0:	2105      	movs	r1, #5
 800efa2:	2000      	movs	r0, #0
 800efa4:	f7ff f87a 	bl	800e09c <SuccessDataResult>
			osSemaphoreRelease(ThreadStorage.FlowSemaphoreHandle);
 800efa8:	4b07      	ldr	r3, [pc, #28]	@ (800efc8 <StartReadFlowTask+0xf8>)
 800efaa:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800efae:	4618      	mov	r0, r3
 800efb0:	f7f7 fb78 	bl	80066a4 <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800efb4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800efb6:	f7f8 ff67 	bl	8007e88 <vTaskDelay>
	}
 800efba:	e7b8      	b.n	800ef2e <StartReadFlowTask+0x5e>
 800efbc:	2000704c 	.word	0x2000704c
 800efc0:	200092a8 	.word	0x200092a8
 800efc4:	08010dfc 	.word	0x08010dfc
 800efc8:	200090b8 	.word	0x200090b8

0800efcc <StartVolumeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartVolumeTask */
void StartVolumeTask(void *argument)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	LoadCellInstance.ClearSamples();
 800efd4:	4819      	ldr	r0, [pc, #100]	@ (800f03c <StartVolumeTask+0x70>)
 800efd6:	f7fe fcdb 	bl	800d990 <_ZN8LoadCell12ClearSamplesEv>
	const TickType_t xDelay = (1000/SystemConfig.VolumePerSecond) / portTICK_PERIOD_MS;
 800efda:	4b19      	ldr	r3, [pc, #100]	@ (800f040 <StartVolumeTask+0x74>)
 800efdc:	78db      	ldrb	r3, [r3, #3]
 800efde:	461a      	mov	r2, r3
 800efe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800efe4:	fb93 f3f2 	sdiv	r3, r3, r2
 800efe8:	60fb      	str	r3, [r7, #12]
	ThreadStorage.VolumeSemaphoreHandle = osSemaphoreNew(1, 1, &volumeSemaphore_attributes);
 800efea:	4a16      	ldr	r2, [pc, #88]	@ (800f044 <StartVolumeTask+0x78>)
 800efec:	2101      	movs	r1, #1
 800efee:	2001      	movs	r0, #1
 800eff0:	f7f7 fa7d 	bl	80064ee <osSemaphoreNew>
 800eff4:	4603      	mov	r3, r0
 800eff6:	4a14      	ldr	r2, [pc, #80]	@ (800f048 <StartVolumeTask+0x7c>)
 800eff8:	f8c2 31dc 	str.w	r3, [r2, #476]	@ 0x1dc
	osStatus_t volumeSemaphoreVal;
	for(;;)
	{
		volumeSemaphoreVal = osSemaphoreAcquire(ThreadStorage.VolumeSemaphoreHandle, 1000);
 800effc:	4b12      	ldr	r3, [pc, #72]	@ (800f048 <StartVolumeTask+0x7c>)
 800effe:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800f002:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f006:	4618      	mov	r0, r3
 800f008:	f7f7 fafa 	bl	8006600 <osSemaphoreAcquire>
 800f00c:	60b8      	str	r0, [r7, #8]
		if(volumeSemaphoreVal==osOK){
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d1f3      	bne.n	800effc <StartVolumeTask+0x30>
			volumeCounter++;
 800f014:	4b0d      	ldr	r3, [pc, #52]	@ (800f04c <StartVolumeTask+0x80>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	3301      	adds	r3, #1
 800f01a:	4a0c      	ldr	r2, [pc, #48]	@ (800f04c <StartVolumeTask+0x80>)
 800f01c:	6013      	str	r3, [r2, #0]
			LoadCellInstance.ReadVolume(true);
 800f01e:	2101      	movs	r1, #1
 800f020:	4806      	ldr	r0, [pc, #24]	@ (800f03c <StartVolumeTask+0x70>)
 800f022:	f7fe f855 	bl	800d0d0 <_ZN8LoadCell10ReadVolumeEb>
			osSemaphoreRelease(ThreadStorage.VolumeSemaphoreHandle);
 800f026:	4b08      	ldr	r3, [pc, #32]	@ (800f048 <StartVolumeTask+0x7c>)
 800f028:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7f7 fb39 	bl	80066a4 <osSemaphoreRelease>
			vTaskDelay( xDelay );
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f7f8 ff28 	bl	8007e88 <vTaskDelay>
		volumeSemaphoreVal = osSemaphoreAcquire(ThreadStorage.VolumeSemaphoreHandle, 1000);
 800f038:	e7e0      	b.n	800effc <StartVolumeTask+0x30>
 800f03a:	bf00      	nop
 800f03c:	2000704c 	.word	0x2000704c
 800f040:	200092a8 	.word	0x200092a8
 800f044:	08010e0c 	.word	0x08010e0c
 800f048:	200090b8 	.word	0x200090b8
 800f04c:	20004ffc 	.word	0x20004ffc

0800f050 <StartReadVolumeTask>:
	}
  /* USER CODE END 5 */
}

void StartReadVolumeTask(void *argument)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b08e      	sub	sp, #56	@ 0x38
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	LoadCellInstance.ClearSamples();
 800f058:	4838      	ldr	r0, [pc, #224]	@ (800f13c <StartReadVolumeTask+0xec>)
 800f05a:	f7fe fc99 	bl	800d990 <_ZN8LoadCell12ClearSamplesEv>
	const TickType_t xDelay = (1000/SystemConfig.VolumePerSecond) / portTICK_PERIOD_MS;
 800f05e:	4b38      	ldr	r3, [pc, #224]	@ (800f140 <StartReadVolumeTask+0xf0>)
 800f060:	78db      	ldrb	r3, [r3, #3]
 800f062:	461a      	mov	r2, r3
 800f064:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f068:	fb93 f3f2 	sdiv	r3, r3, r2
 800f06c:	637b      	str	r3, [r7, #52]	@ 0x34
	ThreadStorage.VolumeSemaphoreHandle = osSemaphoreNew(1, 1, &volumeSemaphore_attributes);
 800f06e:	4a35      	ldr	r2, [pc, #212]	@ (800f144 <StartReadVolumeTask+0xf4>)
 800f070:	2101      	movs	r1, #1
 800f072:	2001      	movs	r0, #1
 800f074:	f7f7 fa3b 	bl	80064ee <osSemaphoreNew>
 800f078:	4603      	mov	r3, r0
 800f07a:	4a33      	ldr	r2, [pc, #204]	@ (800f148 <StartReadVolumeTask+0xf8>)
 800f07c:	f8c2 31dc 	str.w	r3, [r2, #476]	@ 0x1dc
	osStatus_t volumeSemaphoreVal;
	float32_t avg=SystemConfig.VolumeAverage;
 800f080:	4b2f      	ldr	r3, [pc, #188]	@ (800f140 <StartReadVolumeTask+0xf0>)
 800f082:	699b      	ldr	r3, [r3, #24]
 800f084:	ee07 3a90 	vmov	s15, r3
 800f088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f08c:	edc7 7a08 	vstr	s15, [r7, #32]
	uint8_t *avgArray;
	avgArray = (uint8_t*)(&avg );
 800f090:	f107 0320 	add.w	r3, r7, #32
 800f094:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t data[12];
	data[0]=avgArray[0];
 800f096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	753b      	strb	r3, [r7, #20]
	data[1]=avgArray[1];
 800f09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f09e:	785b      	ldrb	r3, [r3, #1]
 800f0a0:	757b      	strb	r3, [r7, #21]
	data[2]=avgArray[2];
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a4:	789b      	ldrb	r3, [r3, #2]
 800f0a6:	75bb      	strb	r3, [r7, #22]
	data[3]=avgArray[3];
 800f0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0aa:	78db      	ldrb	r3, [r3, #3]
 800f0ac:	75fb      	strb	r3, [r7, #23]
	for(;;)
	{
		volumeSemaphoreVal = osSemaphoreAcquire(ThreadStorage.VolumeSemaphoreHandle, 1000);
 800f0ae:	4b26      	ldr	r3, [pc, #152]	@ (800f148 <StartReadVolumeTask+0xf8>)
 800f0b0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800f0b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7f7 faa1 	bl	8006600 <osSemaphoreAcquire>
 800f0be:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(volumeSemaphoreVal==osOK){
 800f0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d136      	bne.n	800f134 <StartReadVolumeTask+0xe4>
			LoadCellInstance.ReadVolume(false);
 800f0c6:	2100      	movs	r1, #0
 800f0c8:	481c      	ldr	r0, [pc, #112]	@ (800f13c <StartReadVolumeTask+0xec>)
 800f0ca:	f7fe f801 	bl	800d0d0 <_ZN8LoadCell10ReadVolumeEb>
			float32_t rate=SystemConfig.VolumeRate;
 800f0ce:	4b1c      	ldr	r3, [pc, #112]	@ (800f140 <StartReadVolumeTask+0xf0>)
 800f0d0:	69db      	ldr	r3, [r3, #28]
 800f0d2:	613b      	str	r3, [r7, #16]
			uint8_t *rateArray;
			rateArray = (uint8_t*)(&rate );
 800f0d4:	f107 0310 	add.w	r3, r7, #16
 800f0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
			float32_t volume=LoadCellInstance.LastReadVolumeValue;
 800f0da:	4b18      	ldr	r3, [pc, #96]	@ (800f13c <StartReadVolumeTask+0xec>)
 800f0dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f0e0:	6a1b      	ldr	r3, [r3, #32]
 800f0e2:	60fb      	str	r3, [r7, #12]
			uint8_t *volumeArray;
			volumeArray = (uint8_t*)(&volume );
 800f0e4:	f107 030c 	add.w	r3, r7, #12
 800f0e8:	627b      	str	r3, [r7, #36]	@ 0x24
			data[4]=rateArray[0];
 800f0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	763b      	strb	r3, [r7, #24]
			data[5]=rateArray[1];
 800f0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f2:	785b      	ldrb	r3, [r3, #1]
 800f0f4:	767b      	strb	r3, [r7, #25]
			data[6]=rateArray[2];
 800f0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f8:	789b      	ldrb	r3, [r3, #2]
 800f0fa:	76bb      	strb	r3, [r7, #26]
			data[7]=rateArray[3];
 800f0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0fe:	78db      	ldrb	r3, [r3, #3]
 800f100:	76fb      	strb	r3, [r7, #27]
			data[8]=volumeArray[0];
 800f102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	773b      	strb	r3, [r7, #28]
			data[9]=volumeArray[1];
 800f108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10a:	785b      	ldrb	r3, [r3, #1]
 800f10c:	777b      	strb	r3, [r7, #29]
			data[10]=volumeArray[2];
 800f10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f110:	789b      	ldrb	r3, [r3, #2]
 800f112:	77bb      	strb	r3, [r7, #30]
			data[11]=volumeArray[3];
 800f114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f116:	78db      	ldrb	r3, [r3, #3]
 800f118:	77fb      	strb	r3, [r7, #31]
			SuccessDataResult(0, SuccessDataType::SD_Volume, data, 12);
 800f11a:	f107 0214 	add.w	r2, r7, #20
 800f11e:	230c      	movs	r3, #12
 800f120:	2104      	movs	r1, #4
 800f122:	2000      	movs	r0, #0
 800f124:	f7fe ffba 	bl	800e09c <SuccessDataResult>
			osSemaphoreRelease(ThreadStorage.VolumeSemaphoreHandle);
 800f128:	4b07      	ldr	r3, [pc, #28]	@ (800f148 <StartReadVolumeTask+0xf8>)
 800f12a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800f12e:	4618      	mov	r0, r3
 800f130:	f7f7 fab8 	bl	80066a4 <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800f134:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f136:	f7f8 fea7 	bl	8007e88 <vTaskDelay>
	}
 800f13a:	e7b8      	b.n	800f0ae <StartReadVolumeTask+0x5e>
 800f13c:	2000704c 	.word	0x2000704c
 800f140:	200092a8 	.word	0x200092a8
 800f144:	08010e0c 	.word	0x08010e0c
 800f148:	200090b8 	.word	0x200090b8

0800f14c <StartAutoClosePumpTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAutoClosePumpTask */
void StartAutoClosePumpTask(void *argument)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000*SystemConfig.PumpMaxRunSecond) / portTICK_PERIOD_MS;
 800f154:	4b08      	ldr	r3, [pc, #32]	@ (800f178 <StartAutoClosePumpTask+0x2c>)
 800f156:	795b      	ldrb	r3, [r3, #5]
 800f158:	461a      	mov	r2, r3
 800f15a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f15e:	fb02 f303 	mul.w	r3, r2, r3
 800f162:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		vTaskDelay( xDelay );
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f7f8 fe8f 	bl	8007e88 <vTaskDelay>
		CommunicationInstance.TogglePump(false);
 800f16a:	2100      	movs	r1, #0
 800f16c:	4803      	ldr	r0, [pc, #12]	@ (800f17c <StartAutoClosePumpTask+0x30>)
 800f16e:	f7fb fb51 	bl	800a814 <_ZN13Communication10TogglePumpEb>
		vTaskDelay( xDelay );
 800f172:	bf00      	nop
 800f174:	e7f6      	b.n	800f164 <StartAutoClosePumpTask+0x18>
 800f176:	bf00      	nop
 800f178:	200092a8 	.word	0x200092a8
 800f17c:	2000907c 	.word	0x2000907c

0800f180 <StartAutoCloseValveTask>:
	}
  /* USER CODE END 5 */
}
void StartAutoCloseValveTask(void *argument)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000*SystemConfig.ValveMaxRunSecond) / portTICK_PERIOD_MS;
 800f188:	4b0c      	ldr	r3, [pc, #48]	@ (800f1bc <StartAutoCloseValveTask+0x3c>)
 800f18a:	799b      	ldrb	r3, [r3, #6]
 800f18c:	461a      	mov	r2, r3
 800f18e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f192:	fb02 f303 	mul.w	r3, r2, r3
 800f196:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		vTaskDelay( xDelay );
 800f198:	68f8      	ldr	r0, [r7, #12]
 800f19a:	f7f8 fe75 	bl	8007e88 <vTaskDelay>
		CommunicationInstance.ToggleValve(false);
 800f19e:	2100      	movs	r1, #0
 800f1a0:	4807      	ldr	r0, [pc, #28]	@ (800f1c0 <StartAutoCloseValveTask+0x40>)
 800f1a2:	f7fb fb71 	bl	800a888 <_ZN13Communication11ToggleValveEb>
		osThreadTerminate(ThreadStorage.ValveMaxRunThreadId);
 800f1a6:	4b07      	ldr	r3, [pc, #28]	@ (800f1c4 <StartAutoCloseValveTask+0x44>)
 800f1a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7f7 f972 	bl	8006494 <osThreadTerminate>
		ThreadStorage.ValveMaxRunThreadId=NULL;
 800f1b0:	4b04      	ldr	r3, [pc, #16]	@ (800f1c4 <StartAutoCloseValveTask+0x44>)
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	675a      	str	r2, [r3, #116]	@ 0x74
		vTaskDelay( xDelay );
 800f1b6:	bf00      	nop
 800f1b8:	e7ee      	b.n	800f198 <StartAutoCloseValveTask+0x18>
 800f1ba:	bf00      	nop
 800f1bc:	200092a8 	.word	0x200092a8
 800f1c0:	2000907c 	.word	0x2000907c
 800f1c4:	200090b8 	.word	0x200090b8

0800f1c8 <StartLoadcellAverageTask>:
	}
  /* USER CODE END 5 */
}
void StartLoadcellAverageTask(void *argument){
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b08c      	sub	sp, #48	@ 0x30
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 25 / portTICK_PERIOD_MS;
 800f1d0:	2319      	movs	r3, #25
 800f1d2:	623b      	str	r3, [r7, #32]
	float32_t sumFlow = 0;
 800f1d4:	f04f 0300 	mov.w	r3, #0
 800f1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float32_t sumVolume = 0;
 800f1da:	f04f 0300 	mov.w	r3, #0
 800f1de:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t instanceCount=0;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t jumpCount=50;
 800f1e4:	2332      	movs	r3, #50	@ 0x32
 800f1e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t percent=0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	77fb      	strb	r3, [r7, #31]
	uint8_t data[8];
	LoadCellInstance.ClearSamples();
 800f1ee:	4854      	ldr	r0, [pc, #336]	@ (800f340 <StartLoadcellAverageTask+0x178>)
 800f1f0:	f7fe fbce 	bl	800d990 <_ZN8LoadCell12ClearSamplesEv>
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 800f1f4:	4852      	ldr	r0, [pc, #328]	@ (800f340 <StartLoadcellAverageTask+0x178>)
 800f1f6:	f7fd fe61 	bl	800cebc <_ZN8LoadCell17ReadVolumeAndFlowEv>
		if(jumpCount>0){
 800f1fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d008      	beq.n	800f214 <StartLoadcellAverageTask+0x4c>
			jumpCount--;
 800f202:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f206:	3b01      	subs	r3, #1
 800f208:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			vTaskDelay( xDelay );
 800f20c:	2019      	movs	r0, #25
 800f20e:	f7f8 fe3b 	bl	8007e88 <vTaskDelay>
			continue;
 800f212:	e093      	b.n	800f33c <StartLoadcellAverageTask+0x174>
		}
		sumFlow+=LoadCellInstance.FlowValue;
 800f214:	4b4a      	ldr	r3, [pc, #296]	@ (800f340 <StartLoadcellAverageTask+0x178>)
 800f216:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f21a:	edd3 7a03 	vldr	s15, [r3, #12]
 800f21e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800f222:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f226:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		sumVolume+=LoadCellInstance.VolumeValue;
 800f22a:	4b45      	ldr	r3, [pc, #276]	@ (800f340 <StartLoadcellAverageTask+0x178>)
 800f22c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f230:	edd3 7a04 	vldr	s15, [r3, #16]
 800f234:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800f238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f23c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		uint8_t *volumeArray;
		volumeArray = (uint8_t*)(&LoadCellInstance.VolumeValue );
 800f240:	4b40      	ldr	r3, [pc, #256]	@ (800f344 <StartLoadcellAverageTask+0x17c>)
 800f242:	61bb      	str	r3, [r7, #24]
		uint8_t *flowArray;
		flowArray = (uint8_t*)(&LoadCellInstance.FlowValue );
 800f244:	4b40      	ldr	r3, [pc, #256]	@ (800f348 <StartLoadcellAverageTask+0x180>)
 800f246:	617b      	str	r3, [r7, #20]
		data[0]=volumeArray[0];
 800f248:	69bb      	ldr	r3, [r7, #24]
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	733b      	strb	r3, [r7, #12]
		data[1]=volumeArray[1];
 800f24e:	69bb      	ldr	r3, [r7, #24]
 800f250:	785b      	ldrb	r3, [r3, #1]
 800f252:	737b      	strb	r3, [r7, #13]
		data[2]=volumeArray[2];
 800f254:	69bb      	ldr	r3, [r7, #24]
 800f256:	789b      	ldrb	r3, [r3, #2]
 800f258:	73bb      	strb	r3, [r7, #14]
		data[3]=volumeArray[3];
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	78db      	ldrb	r3, [r3, #3]
 800f25e:	73fb      	strb	r3, [r7, #15]
		data[4]=flowArray[0];
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	743b      	strb	r3, [r7, #16]
		data[5]=flowArray[1];
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	785b      	ldrb	r3, [r3, #1]
 800f26a:	747b      	strb	r3, [r7, #17]
		data[6]=flowArray[2];
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	789b      	ldrb	r3, [r3, #2]
 800f270:	74bb      	strb	r3, [r7, #18]
		data[7]=flowArray[3];
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	78db      	ldrb	r3, [r3, #3]
 800f276:	74fb      	strb	r3, [r7, #19]
		instanceCount++;
 800f278:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f27a:	3301      	adds	r3, #1
 800f27c:	84fb      	strh	r3, [r7, #38]	@ 0x26
		percent=((instanceCount*100)/SystemConfig.AverageSampleCount)-1;
 800f27e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f280:	2264      	movs	r2, #100	@ 0x64
 800f282:	fb02 f303 	mul.w	r3, r2, r3
 800f286:	4a31      	ldr	r2, [pc, #196]	@ (800f34c <StartLoadcellAverageTask+0x184>)
 800f288:	f892 2071 	ldrb.w	r2, [r2, #113]	@ 0x71
 800f28c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f290:	b2db      	uxtb	r3, r3
 800f292:	3b01      	subs	r3, #1
 800f294:	77fb      	strb	r3, [r7, #31]
		Debugger.AveragePercent=percent;
 800f296:	4a2e      	ldr	r2, [pc, #184]	@ (800f350 <StartLoadcellAverageTask+0x188>)
 800f298:	7ffb      	ldrb	r3, [r7, #31]
 800f29a:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
		SuccessDataResult(percent, SuccessDataType::SD_MeasurementAverage, data, 8);
 800f29e:	f107 020c 	add.w	r2, r7, #12
 800f2a2:	7ff8      	ldrb	r0, [r7, #31]
 800f2a4:	2308      	movs	r3, #8
 800f2a6:	2106      	movs	r1, #6
 800f2a8:	f7fe fef8 	bl	800e09c <SuccessDataResult>
		if(instanceCount>=SystemConfig.AverageSampleCount){
 800f2ac:	4b27      	ldr	r3, [pc, #156]	@ (800f34c <StartLoadcellAverageTask+0x184>)
 800f2ae:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d33d      	bcc.n	800f336 <StartLoadcellAverageTask+0x16e>
			SystemConfig.VolumeAverage=sumVolume/instanceCount;
 800f2ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f2bc:	ee07 3a90 	vmov	s15, r3
 800f2c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f2c4:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800f2c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2d0:	ee17 2a90 	vmov	r2, s15
 800f2d4:	4b1d      	ldr	r3, [pc, #116]	@ (800f34c <StartLoadcellAverageTask+0x184>)
 800f2d6:	619a      	str	r2, [r3, #24]
			SystemConfig.FlowAverage=sumFlow/(instanceCount-1);
 800f2d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f2da:	3b01      	subs	r3, #1
 800f2dc:	ee07 3a90 	vmov	s15, r3
 800f2e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f2e4:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800f2e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2f0:	ee17 2a90 	vmov	r2, s15
 800f2f4:	4b15      	ldr	r3, [pc, #84]	@ (800f34c <StartLoadcellAverageTask+0x184>)
 800f2f6:	615a      	str	r2, [r3, #20]
			FlashManagerInstance.WriteVolumeAverage(SystemConfig.VolumeAverage);
 800f2f8:	4b14      	ldr	r3, [pc, #80]	@ (800f34c <StartLoadcellAverageTask+0x184>)
 800f2fa:	699b      	ldr	r3, [r3, #24]
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	4815      	ldr	r0, [pc, #84]	@ (800f354 <StartLoadcellAverageTask+0x18c>)
 800f300:	f7fd f8b0 	bl	800c464 <_ZN12FlashManager18WriteVolumeAverageEm>
			FlashManagerInstance.WriteFlowAverage(SystemConfig.FlowAverage);
 800f304:	4b11      	ldr	r3, [pc, #68]	@ (800f34c <StartLoadcellAverageTask+0x184>)
 800f306:	695b      	ldr	r3, [r3, #20]
 800f308:	4619      	mov	r1, r3
 800f30a:	4812      	ldr	r0, [pc, #72]	@ (800f354 <StartLoadcellAverageTask+0x18c>)
 800f30c:	f7fd f93d 	bl	800c58a <_ZN12FlashManager16WriteFlowAverageEm>
			SuccessDataResult(100, SuccessDataType::SD_MeasurementAverage, data, 8);
 800f310:	f107 020c 	add.w	r2, r7, #12
 800f314:	2308      	movs	r3, #8
 800f316:	2106      	movs	r1, #6
 800f318:	2064      	movs	r0, #100	@ 0x64
 800f31a:	f7fe febf 	bl	800e09c <SuccessDataResult>
			SystemConfig.systemMode=SystemModes::EmptyMode;
 800f31e:	4b0b      	ldr	r3, [pc, #44]	@ (800f34c <StartLoadcellAverageTask+0x184>)
 800f320:	2200      	movs	r2, #0
 800f322:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			osThreadTerminate(ThreadStorage.LoadcellAverageThreadId);
 800f326:	4b0c      	ldr	r3, [pc, #48]	@ (800f358 <StartLoadcellAverageTask+0x190>)
 800f328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7f7 f8b2 	bl	8006494 <osThreadTerminate>
			ThreadStorage.LoadcellAverageThreadId=NULL;
 800f330:	4b09      	ldr	r3, [pc, #36]	@ (800f358 <StartLoadcellAverageTask+0x190>)
 800f332:	2200      	movs	r2, #0
 800f334:	679a      	str	r2, [r3, #120]	@ 0x78
		}
		vTaskDelay( xDelay );
 800f336:	2019      	movs	r0, #25
 800f338:	f7f8 fda6 	bl	8007e88 <vTaskDelay>
	}
 800f33c:	e75a      	b.n	800f1f4 <StartLoadcellAverageTask+0x2c>
 800f33e:	bf00      	nop
 800f340:	2000704c 	.word	0x2000704c
 800f344:	2000905c 	.word	0x2000905c
 800f348:	20009058 	.word	0x20009058
 800f34c:	200092a8 	.word	0x200092a8
 800f350:	20009320 	.word	0x20009320
 800f354:	2000909c 	.word	0x2000909c
 800f358:	200090b8 	.word	0x200090b8

0800f35c <StartCalibrationVolumeTask>:
}
void StartCalibrationVolumeTask(void *argument){
 800f35c:	b5b0      	push	{r4, r5, r7, lr}
 800f35e:	b08a      	sub	sp, #40	@ 0x28
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 800f364:	2364      	movs	r3, #100	@ 0x64
 800f366:	61fb      	str	r3, [r7, #28]
	float32_t sumVolume = 0;
 800f368:	f04f 0300 	mov.w	r3, #0
 800f36c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t instanceCount=0;
 800f36e:	2300      	movs	r3, #0
 800f370:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint8_t jumpCount=50;
 800f372:	2332      	movs	r3, #50	@ 0x32
 800f374:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t percent=0;
 800f378:	2300      	movs	r3, #0
 800f37a:	76fb      	strb	r3, [r7, #27]
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 800f37c:	485c      	ldr	r0, [pc, #368]	@ (800f4f0 <StartCalibrationVolumeTask+0x194>)
 800f37e:	f7fd fd9d 	bl	800cebc <_ZN8LoadCell17ReadVolumeAndFlowEv>
		if(jumpCount>0){
 800f382:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f386:	2b00      	cmp	r3, #0
 800f388:	d008      	beq.n	800f39c <StartCalibrationVolumeTask+0x40>
			jumpCount--;
 800f38a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f38e:	3b01      	subs	r3, #1
 800f390:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			vTaskDelay( xDelay );
 800f394:	2064      	movs	r0, #100	@ 0x64
 800f396:	f7f8 fd77 	bl	8007e88 <vTaskDelay>
			continue;
 800f39a:	e0a7      	b.n	800f4ec <StartCalibrationVolumeTask+0x190>
		}
		float32_t diff =LoadCellInstance.VolumeValue-SystemConfig.VolumeAverage;
 800f39c:	4b54      	ldr	r3, [pc, #336]	@ (800f4f0 <StartCalibrationVolumeTask+0x194>)
 800f39e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f3a2:	ed93 7a04 	vldr	s14, [r3, #16]
 800f3a6:	4b53      	ldr	r3, [pc, #332]	@ (800f4f4 <StartCalibrationVolumeTask+0x198>)
 800f3a8:	699b      	ldr	r3, [r3, #24]
 800f3aa:	ee07 3a90 	vmov	s15, r3
 800f3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3b6:	edc7 7a05 	vstr	s15, [r7, #20]
		if(diff<1){
 800f3ba:	edd7 7a05 	vldr	s15, [r7, #20]
 800f3be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f3c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ca:	d503      	bpl.n	800f3d4 <StartCalibrationVolumeTask+0x78>
			vTaskDelay( xDelay );
 800f3cc:	2064      	movs	r0, #100	@ 0x64
 800f3ce:	f7f8 fd5b 	bl	8007e88 <vTaskDelay>
			continue;
 800f3d2:	e08b      	b.n	800f4ec <StartCalibrationVolumeTask+0x190>
		}
		sumVolume+=diff;
 800f3d4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800f3d8:	edd7 7a05 	vldr	s15, [r7, #20]
 800f3dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3e0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float32_t rate=(sumVolume/instanceCount)/SystemConfig.CalibrationWeight;
 800f3e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f3e6:	ee07 3a90 	vmov	s15, r3
 800f3ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3ee:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800f3f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f3f6:	4b3f      	ldr	r3, [pc, #252]	@ (800f4f4 <StartCalibrationVolumeTask+0x198>)
 800f3f8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800f3fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f400:	edc7 7a03 	vstr	s15, [r7, #12]
		Debugger.VolumeRate=rate;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	4618      	mov	r0, r3
 800f408:	f7f1 f896 	bl	8000538 <__aeabi_f2d>
 800f40c:	4602      	mov	r2, r0
 800f40e:	460b      	mov	r3, r1
 800f410:	4939      	ldr	r1, [pc, #228]	@ (800f4f8 <StartCalibrationVolumeTask+0x19c>)
 800f412:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uint8_t *rateArray;
		rateArray = (uint8_t*)(&rate );
 800f416:	f107 030c 	add.w	r3, r7, #12
 800f41a:	613b      	str	r3, [r7, #16]
		instanceCount++;
 800f41c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f41e:	3301      	adds	r3, #1
 800f420:	847b      	strh	r3, [r7, #34]	@ 0x22
		percent=((instanceCount*100)/SystemConfig.VolumeCalibrationSampleCount)-1;
 800f422:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f424:	2264      	movs	r2, #100	@ 0x64
 800f426:	fb02 f303 	mul.w	r3, r2, r3
 800f42a:	4a32      	ldr	r2, [pc, #200]	@ (800f4f4 <StartCalibrationVolumeTask+0x198>)
 800f42c:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 800f430:	fb93 f3f2 	sdiv	r3, r3, r2
 800f434:	b2db      	uxtb	r3, r3
 800f436:	3b01      	subs	r3, #1
 800f438:	76fb      	strb	r3, [r7, #27]
		Debugger.AveragePercent=percent;
 800f43a:	4a2f      	ldr	r2, [pc, #188]	@ (800f4f8 <StartCalibrationVolumeTask+0x19c>)
 800f43c:	7efb      	ldrb	r3, [r7, #27]
 800f43e:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
		SuccessDataResult(percent, SuccessDataType::SD_VolumeCalibration, rateArray, 4);
 800f442:	7ef8      	ldrb	r0, [r7, #27]
 800f444:	2304      	movs	r3, #4
 800f446:	693a      	ldr	r2, [r7, #16]
 800f448:	2108      	movs	r1, #8
 800f44a:	f7fe fe27 	bl	800e09c <SuccessDataResult>
		if(instanceCount>=SystemConfig.VolumeCalibrationSampleCount){
 800f44e:	4b29      	ldr	r3, [pc, #164]	@ (800f4f4 <StartCalibrationVolumeTask+0x198>)
 800f450:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800f454:	461a      	mov	r2, r3
 800f456:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f458:	4293      	cmp	r3, r2
 800f45a:	d344      	bcc.n	800f4e6 <StartCalibrationVolumeTask+0x18a>
			SystemConfig.VolumeRate=((double_t)sumVolume/(double_t)instanceCount)/SystemConfig.CalibrationWeight;
 800f45c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f45e:	f7f1 f86b 	bl	8000538 <__aeabi_f2d>
 800f462:	4604      	mov	r4, r0
 800f464:	460d      	mov	r5, r1
 800f466:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f468:	4618      	mov	r0, r3
 800f46a:	f7f1 f843 	bl	80004f4 <__aeabi_ui2d>
 800f46e:	4602      	mov	r2, r0
 800f470:	460b      	mov	r3, r1
 800f472:	4620      	mov	r0, r4
 800f474:	4629      	mov	r1, r5
 800f476:	f7f1 f9e1 	bl	800083c <__aeabi_ddiv>
 800f47a:	4602      	mov	r2, r0
 800f47c:	460b      	mov	r3, r1
 800f47e:	4614      	mov	r4, r2
 800f480:	461d      	mov	r5, r3
 800f482:	4b1c      	ldr	r3, [pc, #112]	@ (800f4f4 <StartCalibrationVolumeTask+0x198>)
 800f484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f486:	4618      	mov	r0, r3
 800f488:	f7f1 f856 	bl	8000538 <__aeabi_f2d>
 800f48c:	4602      	mov	r2, r0
 800f48e:	460b      	mov	r3, r1
 800f490:	4620      	mov	r0, r4
 800f492:	4629      	mov	r1, r5
 800f494:	f7f1 f9d2 	bl	800083c <__aeabi_ddiv>
 800f498:	4602      	mov	r2, r0
 800f49a:	460b      	mov	r3, r1
 800f49c:	4610      	mov	r0, r2
 800f49e:	4619      	mov	r1, r3
 800f4a0:	f7f1 fad4 	bl	8000a4c <__aeabi_d2f>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	4a13      	ldr	r2, [pc, #76]	@ (800f4f4 <StartCalibrationVolumeTask+0x198>)
 800f4a8:	61d3      	str	r3, [r2, #28]
			FlashManagerInstance.WriteVolumeRate(SystemConfig.VolumeRate);
 800f4aa:	4b12      	ldr	r3, [pc, #72]	@ (800f4f4 <StartCalibrationVolumeTask+0x198>)
 800f4ac:	69db      	ldr	r3, [r3, #28]
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7f1 f842 	bl	8000538 <__aeabi_f2d>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	ec43 2b10 	vmov	d0, r2, r3
 800f4bc:	480f      	ldr	r0, [pc, #60]	@ (800f4fc <StartCalibrationVolumeTask+0x1a0>)
 800f4be:	f7fc ff37 	bl	800c330 <_ZN12FlashManager15WriteVolumeRateEd>
			SuccessDataResult(100, SuccessDataType::SD_VolumeCalibration, rateArray, 4);
 800f4c2:	2304      	movs	r3, #4
 800f4c4:	693a      	ldr	r2, [r7, #16]
 800f4c6:	2108      	movs	r1, #8
 800f4c8:	2064      	movs	r0, #100	@ 0x64
 800f4ca:	f7fe fde7 	bl	800e09c <SuccessDataResult>
			SystemConfig.systemMode=SystemModes::EmptyMode;
 800f4ce:	4b09      	ldr	r3, [pc, #36]	@ (800f4f4 <StartCalibrationVolumeTask+0x198>)
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			osThreadTerminate(ThreadStorage.CalibrationVolumeThreadId);
 800f4d6:	4b0a      	ldr	r3, [pc, #40]	@ (800f500 <StartCalibrationVolumeTask+0x1a4>)
 800f4d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7f6 ffda 	bl	8006494 <osThreadTerminate>
			ThreadStorage.CalibrationVolumeThreadId=NULL;
 800f4e0:	4b07      	ldr	r3, [pc, #28]	@ (800f500 <StartCalibrationVolumeTask+0x1a4>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	67da      	str	r2, [r3, #124]	@ 0x7c
		}
		vTaskDelay( xDelay );
 800f4e6:	2064      	movs	r0, #100	@ 0x64
 800f4e8:	f7f8 fcce 	bl	8007e88 <vTaskDelay>
	}
 800f4ec:	e746      	b.n	800f37c <StartCalibrationVolumeTask+0x20>
 800f4ee:	bf00      	nop
 800f4f0:	2000704c 	.word	0x2000704c
 800f4f4:	200092a8 	.word	0x200092a8
 800f4f8:	20009320 	.word	0x20009320
 800f4fc:	2000909c 	.word	0x2000909c
 800f500:	200090b8 	.word	0x200090b8

0800f504 <StartCalibrationFlowTask>:
}
void StartCalibrationFlowTask(void *argument){
 800f504:	b580      	push	{r7, lr}
 800f506:	b08a      	sub	sp, #40	@ 0x28
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 800f50c:	2364      	movs	r3, #100	@ 0x64
 800f50e:	61fb      	str	r3, [r7, #28]
	float32_t maxFlow=1;
 800f510:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800f514:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t instanceCount=0;
 800f516:	2300      	movs	r3, #0
 800f518:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint8_t jumpCount=50;
 800f51a:	2332      	movs	r3, #50	@ 0x32
 800f51c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t percent=0;
 800f520:	2300      	movs	r3, #0
 800f522:	76fb      	strb	r3, [r7, #27]
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 800f524:	4859      	ldr	r0, [pc, #356]	@ (800f68c <StartCalibrationFlowTask+0x188>)
 800f526:	f7fd fcc9 	bl	800cebc <_ZN8LoadCell17ReadVolumeAndFlowEv>
		if(jumpCount>0){
 800f52a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d008      	beq.n	800f544 <StartCalibrationFlowTask+0x40>
			jumpCount--;
 800f532:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f536:	3b01      	subs	r3, #1
 800f538:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			vTaskDelay( xDelay );
 800f53c:	2064      	movs	r0, #100	@ 0x64
 800f53e:	f7f8 fca3 	bl	8007e88 <vTaskDelay>
 800f542:	e7ef      	b.n	800f524 <StartCalibrationFlowTask+0x20>
			continue;
		}
		if(SystemConfig.FlowAverage>LoadCellInstance.FlowValue){
 800f544:	4b52      	ldr	r3, [pc, #328]	@ (800f690 <StartCalibrationFlowTask+0x18c>)
 800f546:	695b      	ldr	r3, [r3, #20]
 800f548:	ee07 3a90 	vmov	s15, r3
 800f54c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f550:	4b4e      	ldr	r3, [pc, #312]	@ (800f68c <StartCalibrationFlowTask+0x188>)
 800f552:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f556:	edd3 7a03 	vldr	s15, [r3, #12]
 800f55a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f55e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f562:	bfcc      	ite	gt
 800f564:	2301      	movgt	r3, #1
 800f566:	2300      	movle	r3, #0
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00a      	beq.n	800f584 <StartCalibrationFlowTask+0x80>
			LoadCellInstance.FlowValue=SystemConfig.FlowAverage;
 800f56e:	4b48      	ldr	r3, [pc, #288]	@ (800f690 <StartCalibrationFlowTask+0x18c>)
 800f570:	695b      	ldr	r3, [r3, #20]
 800f572:	ee07 3a90 	vmov	s15, r3
 800f576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f57a:	4b44      	ldr	r3, [pc, #272]	@ (800f68c <StartCalibrationFlowTask+0x188>)
 800f57c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f580:	edc3 7a03 	vstr	s15, [r3, #12]
		}
		uint32_t flow=LoadCellInstance.FlowValue-SystemConfig.FlowAverage;
 800f584:	4b41      	ldr	r3, [pc, #260]	@ (800f68c <StartCalibrationFlowTask+0x188>)
 800f586:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f58a:	ed93 7a03 	vldr	s14, [r3, #12]
 800f58e:	4b40      	ldr	r3, [pc, #256]	@ (800f690 <StartCalibrationFlowTask+0x18c>)
 800f590:	695b      	ldr	r3, [r3, #20]
 800f592:	ee07 3a90 	vmov	s15, r3
 800f596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f59a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f59e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5a2:	ee17 3a90 	vmov	r3, s15
 800f5a6:	617b      	str	r3, [r7, #20]
		if(flow>maxFlow){
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	ee07 3a90 	vmov	s15, r3
 800f5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5b2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800f5b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5be:	d506      	bpl.n	800f5ce <StartCalibrationFlowTask+0xca>
			maxFlow=flow;
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	ee07 3a90 	vmov	s15, r3
 800f5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		}
		float32_t rate=maxFlow/SystemConfig.CalibrationFlow;
 800f5ce:	4b30      	ldr	r3, [pc, #192]	@ (800f690 <StartCalibrationFlowTask+0x18c>)
 800f5d0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800f5d4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f5d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5dc:	edc7 7a03 	vstr	s15, [r7, #12]
		Debugger.FlowRate=rate;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7f0 ffa8 	bl	8000538 <__aeabi_f2d>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	4929      	ldr	r1, [pc, #164]	@ (800f694 <StartCalibrationFlowTask+0x190>)
 800f5ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		instanceCount++;
 800f5f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	847b      	strh	r3, [r7, #34]	@ 0x22
		uint8_t *rateArray;
		rateArray = (uint8_t*)(&rate );
 800f5f8:	f107 030c 	add.w	r3, r7, #12
 800f5fc:	613b      	str	r3, [r7, #16]
		percent=((instanceCount*100)/SystemConfig.FlowCalibrationSampleCount)-1;
 800f5fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f600:	2264      	movs	r2, #100	@ 0x64
 800f602:	fb02 f303 	mul.w	r3, r2, r3
 800f606:	4a22      	ldr	r2, [pc, #136]	@ (800f690 <StartCalibrationFlowTask+0x18c>)
 800f608:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 800f60c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f610:	b2db      	uxtb	r3, r3
 800f612:	3b01      	subs	r3, #1
 800f614:	76fb      	strb	r3, [r7, #27]
		SuccessDataResult(percent, SuccessDataType::SD_FlowCalibration, rateArray, 4);
 800f616:	7ef8      	ldrb	r0, [r7, #27]
 800f618:	2304      	movs	r3, #4
 800f61a:	693a      	ldr	r2, [r7, #16]
 800f61c:	2109      	movs	r1, #9
 800f61e:	f7fe fd3d 	bl	800e09c <SuccessDataResult>
		if(instanceCount>SystemConfig.FlowCalibrationSampleCount){
 800f622:	4b1b      	ldr	r3, [pc, #108]	@ (800f690 <StartCalibrationFlowTask+0x18c>)
 800f624:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 800f628:	461a      	mov	r2, r3
 800f62a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d929      	bls.n	800f684 <StartCalibrationFlowTask+0x180>
			SystemConfig.FlowRate=(double_t)maxFlow/SystemConfig.CalibrationFlow;
 800f630:	4b17      	ldr	r3, [pc, #92]	@ (800f690 <StartCalibrationFlowTask+0x18c>)
 800f632:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800f636:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f63a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f63e:	4b14      	ldr	r3, [pc, #80]	@ (800f690 <StartCalibrationFlowTask+0x18c>)
 800f640:	edc3 7a08 	vstr	s15, [r3, #32]
			FlashManagerInstance.WriteFlowRate(SystemConfig.FlowRate);
 800f644:	4b12      	ldr	r3, [pc, #72]	@ (800f690 <StartCalibrationFlowTask+0x18c>)
 800f646:	6a1b      	ldr	r3, [r3, #32]
 800f648:	4618      	mov	r0, r3
 800f64a:	f7f0 ff75 	bl	8000538 <__aeabi_f2d>
 800f64e:	4602      	mov	r2, r0
 800f650:	460b      	mov	r3, r1
 800f652:	ec43 2b10 	vmov	d0, r2, r3
 800f656:	4810      	ldr	r0, [pc, #64]	@ (800f698 <StartCalibrationFlowTask+0x194>)
 800f658:	f7fc fdd0 	bl	800c1fc <_ZN12FlashManager13WriteFlowRateEd>
			SystemConfig.systemMode=SystemModes::EmptyMode;
 800f65c:	4b0c      	ldr	r3, [pc, #48]	@ (800f690 <StartCalibrationFlowTask+0x18c>)
 800f65e:	2200      	movs	r2, #0
 800f660:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			SuccessDataResult(100, SuccessDataType::SD_FlowCalibration, rateArray, 4);
 800f664:	2304      	movs	r3, #4
 800f666:	693a      	ldr	r2, [r7, #16]
 800f668:	2109      	movs	r1, #9
 800f66a:	2064      	movs	r0, #100	@ 0x64
 800f66c:	f7fe fd16 	bl	800e09c <SuccessDataResult>
			osThreadTerminate(ThreadStorage.CalibrationFlowThreadId);
 800f670:	4b0a      	ldr	r3, [pc, #40]	@ (800f69c <StartCalibrationFlowTask+0x198>)
 800f672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f676:	4618      	mov	r0, r3
 800f678:	f7f6 ff0c 	bl	8006494 <osThreadTerminate>
			ThreadStorage.CalibrationFlowThreadId=NULL;
 800f67c:	4b07      	ldr	r3, [pc, #28]	@ (800f69c <StartCalibrationFlowTask+0x198>)
 800f67e:	2200      	movs	r2, #0
 800f680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		}
		vTaskDelay( xDelay );
 800f684:	2064      	movs	r0, #100	@ 0x64
 800f686:	f7f8 fbff 	bl	8007e88 <vTaskDelay>
	}
 800f68a:	e74b      	b.n	800f524 <StartCalibrationFlowTask+0x20>
 800f68c:	2000704c 	.word	0x2000704c
 800f690:	200092a8 	.word	0x200092a8
 800f694:	20009320 	.word	0x20009320
 800f698:	2000909c 	.word	0x2000909c
 800f69c:	200090b8 	.word	0x200090b8

0800f6a0 <StartCleanTask>:
}
void StartCleanTask(void *argument){
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b086      	sub	sp, #24
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 800f6a8:	2364      	movs	r3, #100	@ 0x64
 800f6aa:	613b      	str	r3, [r7, #16]
	uint16_t clearedCount=0;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	82fb      	strh	r3, [r7, #22]
	volatile uint8_t type=0;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	73fb      	strb	r3, [r7, #15]
	LoadCellInstance.ClearSamples();
 800f6b4:	487f      	ldr	r0, [pc, #508]	@ (800f8b4 <StartCleanTask+0x214>)
 800f6b6:	f7fe f96b 	bl	800d990 <_ZN8LoadCell12ClearSamplesEv>
	CommunicationInstance.TogglePump(true);
 800f6ba:	2101      	movs	r1, #1
 800f6bc:	487e      	ldr	r0, [pc, #504]	@ (800f8b8 <StartCleanTask+0x218>)
 800f6be:	f7fb f8a9 	bl	800a814 <_ZN13Communication10TogglePumpEb>
	osThreadTerminate(ThreadStorage.PumpMaxRunThreadId);
 800f6c2:	4b7e      	ldr	r3, [pc, #504]	@ (800f8bc <StartCleanTask+0x21c>)
 800f6c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7f6 fee4 	bl	8006494 <osThreadTerminate>
	ThreadStorage.PumpMaxRunThreadId=NULL;
 800f6cc:	4b7b      	ldr	r3, [pc, #492]	@ (800f8bc <StartCleanTask+0x21c>)
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	671a      	str	r2, [r3, #112]	@ 0x70
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 800f6d2:	4878      	ldr	r0, [pc, #480]	@ (800f8b4 <StartCleanTask+0x214>)
 800f6d4:	f7fd fbf2 	bl	800cebc <_ZN8LoadCell17ReadVolumeAndFlowEv>
		Debugger.ReadedVolume=LoadCellInstance.VolumeValue;
 800f6d8:	4b76      	ldr	r3, [pc, #472]	@ (800f8b4 <StartCleanTask+0x214>)
 800f6da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f6de:	691b      	ldr	r3, [r3, #16]
 800f6e0:	4a77      	ldr	r2, [pc, #476]	@ (800f8c0 <StartCleanTask+0x220>)
 800f6e2:	6113      	str	r3, [r2, #16]
		if(LoadCellInstance.VolumeValue>LoadCellInstance.VolumeValue){
 800f6e4:	4b73      	ldr	r3, [pc, #460]	@ (800f8b4 <StartCleanTask+0x214>)
 800f6e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f6ea:	ed93 7a04 	vldr	s14, [r3, #16]
 800f6ee:	4b71      	ldr	r3, [pc, #452]	@ (800f8b4 <StartCleanTask+0x214>)
 800f6f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f6f4:	edd3 7a04 	vldr	s15, [r3, #16]
 800f6f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f700:	bfcc      	ite	gt
 800f702:	2301      	movgt	r3, #1
 800f704:	2300      	movle	r3, #0
 800f706:	b2db      	uxtb	r3, r3
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d012      	beq.n	800f732 <StartCleanTask+0x92>
			Debugger.DiffVolumeValue=LoadCellInstance.VolumeValue-(SystemConfig.VolumeAverage+500);
 800f70c:	4b69      	ldr	r3, [pc, #420]	@ (800f8b4 <StartCleanTask+0x214>)
 800f70e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f712:	ed93 7a04 	vldr	s14, [r3, #16]
 800f716:	4b6b      	ldr	r3, [pc, #428]	@ (800f8c4 <StartCleanTask+0x224>)
 800f718:	699b      	ldr	r3, [r3, #24]
 800f71a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800f71e:	ee07 3a90 	vmov	s15, r3
 800f722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f72a:	4b65      	ldr	r3, [pc, #404]	@ (800f8c0 <StartCleanTask+0x220>)
 800f72c:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
 800f730:	e012      	b.n	800f758 <StartCleanTask+0xb8>
		}else{
			Debugger.DiffVolumeValue=(SystemConfig.VolumeAverage+10000)-LoadCellInstance.VolumeValue;
 800f732:	4b64      	ldr	r3, [pc, #400]	@ (800f8c4 <StartCleanTask+0x224>)
 800f734:	699b      	ldr	r3, [r3, #24]
 800f736:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800f73a:	3310      	adds	r3, #16
 800f73c:	ee07 3a90 	vmov	s15, r3
 800f740:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f744:	4b5b      	ldr	r3, [pc, #364]	@ (800f8b4 <StartCleanTask+0x214>)
 800f746:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f74a:	edd3 7a04 	vldr	s15, [r3, #16]
 800f74e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f752:	4b5b      	ldr	r3, [pc, #364]	@ (800f8c0 <StartCleanTask+0x220>)
 800f754:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
		}
		Debugger.DiffVolumeValue=LoadCellInstance.VolumeValue-(SystemConfig.VolumeAverage+10000);
 800f758:	4b56      	ldr	r3, [pc, #344]	@ (800f8b4 <StartCleanTask+0x214>)
 800f75a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f75e:	ed93 7a04 	vldr	s14, [r3, #16]
 800f762:	4b58      	ldr	r3, [pc, #352]	@ (800f8c4 <StartCleanTask+0x224>)
 800f764:	699b      	ldr	r3, [r3, #24]
 800f766:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800f76a:	3310      	adds	r3, #16
 800f76c:	ee07 3a90 	vmov	s15, r3
 800f770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f774:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f778:	4b51      	ldr	r3, [pc, #324]	@ (800f8c0 <StartCleanTask+0x220>)
 800f77a:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
		Debugger.CleanType=type;
 800f77e:	7bfb      	ldrb	r3, [r7, #15]
 800f780:	b2da      	uxtb	r2, r3
 800f782:	4b4f      	ldr	r3, [pc, #316]	@ (800f8c0 <StartCleanTask+0x220>)
 800f784:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
		if(type==0||type==2){
 800f788:	7bfb      	ldrb	r3, [r7, #15]
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d003      	beq.n	800f798 <StartCleanTask+0xf8>
 800f790:	7bfb      	ldrb	r3, [r7, #15]
 800f792:	b2db      	uxtb	r3, r3
 800f794:	2b02      	cmp	r3, #2
 800f796:	d101      	bne.n	800f79c <StartCleanTask+0xfc>
 800f798:	2301      	movs	r3, #1
 800f79a:	e000      	b.n	800f79e <StartCleanTask+0xfe>
 800f79c:	2300      	movs	r3, #0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d03c      	beq.n	800f81c <StartCleanTask+0x17c>
			if(SystemConfig.VolumeAverage+10000>LoadCellInstance.VolumeValue){
 800f7a2:	4b48      	ldr	r3, [pc, #288]	@ (800f8c4 <StartCleanTask+0x224>)
 800f7a4:	699b      	ldr	r3, [r3, #24]
 800f7a6:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800f7aa:	3310      	adds	r3, #16
 800f7ac:	ee07 3a90 	vmov	s15, r3
 800f7b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f7b4:	4b3f      	ldr	r3, [pc, #252]	@ (800f8b4 <StartCleanTask+0x214>)
 800f7b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f7ba:	edd3 7a04 	vldr	s15, [r3, #16]
 800f7be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c6:	bfcc      	ite	gt
 800f7c8:	2301      	movgt	r3, #1
 800f7ca:	2300      	movle	r3, #0
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d002      	beq.n	800f7d8 <StartCleanTask+0x138>
				clearedCount++;
 800f7d2:	8afb      	ldrh	r3, [r7, #22]
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	82fb      	strh	r3, [r7, #22]
			}
			if(clearedCount>30){
 800f7d8:	8afb      	ldrh	r3, [r7, #22]
 800f7da:	2b1e      	cmp	r3, #30
 800f7dc:	d961      	bls.n	800f8a2 <StartCleanTask+0x202>
				if(type==0){
 800f7de:	7bfb      	ldrb	r3, [r7, #15]
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	bf0c      	ite	eq
 800f7e6:	2301      	moveq	r3, #1
 800f7e8:	2300      	movne	r3, #0
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d009      	beq.n	800f804 <StartCleanTask+0x164>
					CommunicationInstance.ToggleValve(true);
 800f7f0:	2101      	movs	r1, #1
 800f7f2:	4831      	ldr	r0, [pc, #196]	@ (800f8b8 <StartCleanTask+0x218>)
 800f7f4:	f7fb f848 	bl	800a888 <_ZN13Communication11ToggleValveEb>
					vTaskDelay( SystemConfig.CleanTime );
 800f7f8:	4b32      	ldr	r3, [pc, #200]	@ (800f8c4 <StartCleanTask+0x224>)
 800f7fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7f8 fb43 	bl	8007e88 <vTaskDelay>
 800f802:	e003      	b.n	800f80c <StartCleanTask+0x16c>
				}else{
					CommunicationInstance.TogglePump(false);
 800f804:	2100      	movs	r1, #0
 800f806:	482c      	ldr	r0, [pc, #176]	@ (800f8b8 <StartCleanTask+0x218>)
 800f808:	f7fb f804 	bl	800a814 <_ZN13Communication10TogglePumpEb>
				}
				type++;
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	3301      	adds	r3, #1
 800f812:	b2db      	uxtb	r3, r3
 800f814:	73fb      	strb	r3, [r7, #15]
				clearedCount=0;
 800f816:	2300      	movs	r3, #0
 800f818:	82fb      	strh	r3, [r7, #22]
 800f81a:	e042      	b.n	800f8a2 <StartCleanTask+0x202>
			}
		}
		else if(type==1){
 800f81c:	7bfb      	ldrb	r3, [r7, #15]
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	2b01      	cmp	r3, #1
 800f822:	bf0c      	ite	eq
 800f824:	2301      	moveq	r3, #1
 800f826:	2300      	movne	r3, #0
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d015      	beq.n	800f85a <StartCleanTask+0x1ba>
			CommunicationInstance.ToggleValve(false);
 800f82e:	2100      	movs	r1, #0
 800f830:	4821      	ldr	r0, [pc, #132]	@ (800f8b8 <StartCleanTask+0x218>)
 800f832:	f7fb f829 	bl	800a888 <_ZN13Communication11ToggleValveEb>
			CommunicationInstance.TogglePump(true);
 800f836:	2101      	movs	r1, #1
 800f838:	481f      	ldr	r0, [pc, #124]	@ (800f8b8 <StartCleanTask+0x218>)
 800f83a:	f7fa ffeb 	bl	800a814 <_ZN13Communication10TogglePumpEb>
			osThreadTerminate(ThreadStorage.PumpMaxRunThreadId);
 800f83e:	4b1f      	ldr	r3, [pc, #124]	@ (800f8bc <StartCleanTask+0x21c>)
 800f840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f842:	4618      	mov	r0, r3
 800f844:	f7f6 fe26 	bl	8006494 <osThreadTerminate>
			ThreadStorage.PumpMaxRunThreadId=NULL;
 800f848:	4b1c      	ldr	r3, [pc, #112]	@ (800f8bc <StartCleanTask+0x21c>)
 800f84a:	2200      	movs	r2, #0
 800f84c:	671a      	str	r2, [r3, #112]	@ 0x70
			type++;
 800f84e:	7bfb      	ldrb	r3, [r7, #15]
 800f850:	b2db      	uxtb	r3, r3
 800f852:	3301      	adds	r3, #1
 800f854:	b2db      	uxtb	r3, r3
 800f856:	73fb      	strb	r3, [r7, #15]
 800f858:	e023      	b.n	800f8a2 <StartCleanTask+0x202>
		}
		else if(type==3){
 800f85a:	7bfb      	ldrb	r3, [r7, #15]
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	2b03      	cmp	r3, #3
 800f860:	bf0c      	ite	eq
 800f862:	2301      	moveq	r3, #1
 800f864:	2300      	movne	r3, #0
 800f866:	b2db      	uxtb	r3, r3
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d01a      	beq.n	800f8a2 <StartCleanTask+0x202>
			SuccessResult();
 800f86c:	f7fe fc08 	bl	800e080 <SuccessResult>
			SystemConfig.systemMode=SystemModes::EmptyMode;
 800f870:	4b14      	ldr	r3, [pc, #80]	@ (800f8c4 <StartCleanTask+0x224>)
 800f872:	2200      	movs	r2, #0
 800f874:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			if(ThreadStorage.CleanThreadId!=0x00&&ThreadStorage.CleanThreadId!=NULL){
 800f878:	4b10      	ldr	r3, [pc, #64]	@ (800f8bc <StartCleanTask+0x21c>)
 800f87a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d013      	beq.n	800f8aa <StartCleanTask+0x20a>
 800f882:	4b0e      	ldr	r3, [pc, #56]	@ (800f8bc <StartCleanTask+0x21c>)
 800f884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d00e      	beq.n	800f8aa <StartCleanTask+0x20a>
				osThreadTerminate(ThreadStorage.CleanThreadId);
 800f88c:	4b0b      	ldr	r3, [pc, #44]	@ (800f8bc <StartCleanTask+0x21c>)
 800f88e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f892:	4618      	mov	r0, r3
 800f894:	f7f6 fdfe 	bl	8006494 <osThreadTerminate>
				ThreadStorage.CleanThreadId=NULL;
 800f898:	4b08      	ldr	r3, [pc, #32]	@ (800f8bc <StartCleanTask+0x21c>)
 800f89a:	2200      	movs	r2, #0
 800f89c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			}
			break;
 800f8a0:	e003      	b.n	800f8aa <StartCleanTask+0x20a>
		}
		vTaskDelay( xDelay );
 800f8a2:	2064      	movs	r0, #100	@ 0x64
 800f8a4:	f7f8 faf0 	bl	8007e88 <vTaskDelay>
		LoadCellInstance.ReadVolumeAndFlow();
 800f8a8:	e713      	b.n	800f6d2 <StartCleanTask+0x32>
			break;
 800f8aa:	bf00      	nop
	}
}
 800f8ac:	bf00      	nop
 800f8ae:	3718      	adds	r7, #24
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	2000704c 	.word	0x2000704c
 800f8b8:	2000907c 	.word	0x2000907c
 800f8bc:	200090b8 	.word	0x200090b8
 800f8c0:	20009320 	.word	0x20009320
 800f8c4:	200092a8 	.word	0x200092a8

0800f8c8 <StartSafeModeTask>:
void StartSafeModeTask(void *argument){
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b086      	sub	sp, #24
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 1000 / portTICK_PERIOD_MS;
 800f8d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f8d4:	613b      	str	r3, [r7, #16]
	const TickType_t xDelay2 = 100 / portTICK_PERIOD_MS;
 800f8d6:	2364      	movs	r3, #100	@ 0x64
 800f8d8:	60fb      	str	r3, [r7, #12]
	uint8_t type=0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	75fb      	strb	r3, [r7, #23]
	uint8_t clearedCount=0;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	75bb      	strb	r3, [r7, #22]
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 800f8e2:	4837      	ldr	r0, [pc, #220]	@ (800f9c0 <StartSafeModeTask+0xf8>)
 800f8e4:	f7fd faea 	bl	800cebc <_ZN8LoadCell17ReadVolumeAndFlowEv>
		if(type==0){
 800f8e8:	7dfb      	ldrb	r3, [r7, #23]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d12b      	bne.n	800f946 <StartSafeModeTask+0x7e>
			if(SystemConfig.VolumeAverage+5000<LoadCellInstance.VolumeValue){
 800f8ee:	4b35      	ldr	r3, [pc, #212]	@ (800f9c4 <StartSafeModeTask+0xfc>)
 800f8f0:	699b      	ldr	r3, [r3, #24]
 800f8f2:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800f8f6:	3308      	adds	r3, #8
 800f8f8:	ee07 3a90 	vmov	s15, r3
 800f8fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f900:	4b2f      	ldr	r3, [pc, #188]	@ (800f9c0 <StartSafeModeTask+0xf8>)
 800f902:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f906:	edd3 7a04 	vldr	s15, [r3, #16]
 800f90a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f912:	bf4c      	ite	mi
 800f914:	2301      	movmi	r3, #1
 800f916:	2300      	movpl	r3, #0
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00e      	beq.n	800f93c <StartSafeModeTask+0x74>
				CommunicationInstance.TogglePump(true);
 800f91e:	2101      	movs	r1, #1
 800f920:	4829      	ldr	r0, [pc, #164]	@ (800f9c8 <StartSafeModeTask+0x100>)
 800f922:	f7fa ff77 	bl	800a814 <_ZN13Communication10TogglePumpEb>
				osThreadTerminate(ThreadStorage.PumpMaxRunThreadId);
 800f926:	4b29      	ldr	r3, [pc, #164]	@ (800f9cc <StartSafeModeTask+0x104>)
 800f928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7f6 fdb2 	bl	8006494 <osThreadTerminate>
				ThreadStorage.PumpMaxRunThreadId=NULL;
 800f930:	4b26      	ldr	r3, [pc, #152]	@ (800f9cc <StartSafeModeTask+0x104>)
 800f932:	2200      	movs	r2, #0
 800f934:	671a      	str	r2, [r3, #112]	@ 0x70
				type++;
 800f936:	7dfb      	ldrb	r3, [r7, #23]
 800f938:	3301      	adds	r3, #1
 800f93a:	75fb      	strb	r3, [r7, #23]
			}
			vTaskDelay( xDelay );
 800f93c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800f940:	f7f8 faa2 	bl	8007e88 <vTaskDelay>
 800f944:	e7cd      	b.n	800f8e2 <StartSafeModeTask+0x1a>
		}
		else if(type==1){
 800f946:	7dfb      	ldrb	r3, [r7, #23]
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d1ca      	bne.n	800f8e2 <StartSafeModeTask+0x1a>
			if(SystemConfig.VolumeAverage>LoadCellInstance.VolumeValue|| SystemConfig.VolumeAverage+5000>=LoadCellInstance.VolumeValue){
 800f94c:	4b1d      	ldr	r3, [pc, #116]	@ (800f9c4 <StartSafeModeTask+0xfc>)
 800f94e:	699b      	ldr	r3, [r3, #24]
 800f950:	ee07 3a90 	vmov	s15, r3
 800f954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f958:	4b19      	ldr	r3, [pc, #100]	@ (800f9c0 <StartSafeModeTask+0xf8>)
 800f95a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f95e:	edd3 7a04 	vldr	s15, [r3, #16]
 800f962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f96a:	dc12      	bgt.n	800f992 <StartSafeModeTask+0xca>
 800f96c:	4b15      	ldr	r3, [pc, #84]	@ (800f9c4 <StartSafeModeTask+0xfc>)
 800f96e:	699b      	ldr	r3, [r3, #24]
 800f970:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800f974:	3308      	adds	r3, #8
 800f976:	ee07 3a90 	vmov	s15, r3
 800f97a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f97e:	4b10      	ldr	r3, [pc, #64]	@ (800f9c0 <StartSafeModeTask+0xf8>)
 800f980:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f984:	edd3 7a04 	vldr	s15, [r3, #16]
 800f988:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f990:	db01      	blt.n	800f996 <StartSafeModeTask+0xce>
 800f992:	2301      	movs	r3, #1
 800f994:	e000      	b.n	800f998 <StartSafeModeTask+0xd0>
 800f996:	2300      	movs	r3, #0
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d002      	beq.n	800f9a2 <StartSafeModeTask+0xda>
				clearedCount++;
 800f99c:	7dbb      	ldrb	r3, [r7, #22]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	75bb      	strb	r3, [r7, #22]
			}
			if(clearedCount>3){
 800f9a2:	7dbb      	ldrb	r3, [r7, #22]
 800f9a4:	2b03      	cmp	r3, #3
 800f9a6:	d907      	bls.n	800f9b8 <StartSafeModeTask+0xf0>
				CommunicationInstance.TogglePump(false);
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	4807      	ldr	r0, [pc, #28]	@ (800f9c8 <StartSafeModeTask+0x100>)
 800f9ac:	f7fa ff32 	bl	800a814 <_ZN13Communication10TogglePumpEb>
				type=0;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	75fb      	strb	r3, [r7, #23]
				clearedCount=0;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	75bb      	strb	r3, [r7, #22]
			}
			vTaskDelay( xDelay2 );
 800f9b8:	2064      	movs	r0, #100	@ 0x64
 800f9ba:	f7f8 fa65 	bl	8007e88 <vTaskDelay>
		LoadCellInstance.ReadVolumeAndFlow();
 800f9be:	e790      	b.n	800f8e2 <StartSafeModeTask+0x1a>
 800f9c0:	2000704c 	.word	0x2000704c
 800f9c4:	200092a8 	.word	0x200092a8
 800f9c8:	2000907c 	.word	0x2000907c
 800f9cc:	200090b8 	.word	0x200090b8

0800f9d0 <ClearLoadcellParams>:
		}
	}
}
void ClearLoadcellParams(){
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	af00      	add	r7, sp, #0
	LoadCellInstance.LastFlowValue=0;
 800f9d4:	4b09      	ldr	r3, [pc, #36]	@ (800f9fc <ClearLoadcellParams+0x2c>)
 800f9d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f9da:	461a      	mov	r2, r3
 800f9dc:	f04f 0300 	mov.w	r3, #0
 800f9e0:	6253      	str	r3, [r2, #36]	@ 0x24
	LoadCellInstance.LastVolumeValue=0;
 800f9e2:	4b06      	ldr	r3, [pc, #24]	@ (800f9fc <ClearLoadcellParams+0x2c>)
 800f9e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	f04f 0300 	mov.w	r3, #0
 800f9ee:	6293      	str	r3, [r2, #40]	@ 0x28
	LoadCellInstance.ClearParams();
 800f9f0:	4802      	ldr	r0, [pc, #8]	@ (800f9fc <ClearLoadcellParams+0x2c>)
 800f9f2:	f7fd ff19 	bl	800d828 <_ZN8LoadCell11ClearParamsEv>
}
 800f9f6:	bf00      	nop
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	2000704c 	.word	0x2000704c

0800fa00 <HasCalibration>:
FlashManager GetFlashManager(){
	return FlashManagerInstance;
}
uint8_t HasCalibration(void){
 800fa00:	b480      	push	{r7}
 800fa02:	af00      	add	r7, sp, #0

	if(SystemConfig.FlowRate<2 || SystemConfig.VolumeRate<2){
 800fa04:	4b0d      	ldr	r3, [pc, #52]	@ (800fa3c <HasCalibration+0x3c>)
 800fa06:	edd3 7a08 	vldr	s15, [r3, #32]
 800fa0a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800fa0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fa12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa16:	d409      	bmi.n	800fa2c <HasCalibration+0x2c>
 800fa18:	4b08      	ldr	r3, [pc, #32]	@ (800fa3c <HasCalibration+0x3c>)
 800fa1a:	edd3 7a07 	vldr	s15, [r3, #28]
 800fa1e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800fa22:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fa26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa2a:	d501      	bpl.n	800fa30 <HasCalibration+0x30>
		return 0;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	e000      	b.n	800fa32 <HasCalibration+0x32>
	}
	return 1;
 800fa30:	2301      	movs	r3, #1
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr
 800fa3c:	200092a8 	.word	0x200092a8

0800fa40 <HasLoadcell>:
uint8_t HasLoadcell(void){
 800fa40:	b580      	push	{r7, lr}
 800fa42:	af00      	add	r7, sp, #0

	LoadCellInstance.ReadVolumeAndFlow();
 800fa44:	480c      	ldr	r0, [pc, #48]	@ (800fa78 <HasLoadcell+0x38>)
 800fa46:	f7fd fa39 	bl	800cebc <_ZN8LoadCell17ReadVolumeAndFlowEv>
	if(LoadCellInstance.VolumeValue==1310680){
 800fa4a:	4b0b      	ldr	r3, [pc, #44]	@ (800fa78 <HasLoadcell+0x38>)
 800fa4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fa50:	edd3 7a04 	vldr	s15, [r3, #16]
 800fa54:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800fa7c <HasLoadcell+0x3c>
 800fa58:	eef4 7a47 	vcmp.f32	s15, s14
 800fa5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa60:	bf0c      	ite	eq
 800fa62:	2301      	moveq	r3, #1
 800fa64:	2300      	movne	r3, #0
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d001      	beq.n	800fa70 <HasLoadcell+0x30>
		return 0;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	e000      	b.n	800fa72 <HasLoadcell+0x32>
	}
	return 1;
 800fa70:	2301      	movs	r3, #1
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	2000704c 	.word	0x2000704c
 800fa7c:	499ffec0 	.word	0x499ffec0

0800fa80 <HasFirstEmg>:
uint8_t HasFirstEmg(void){
 800fa80:	b580      	push	{r7, lr}
 800fa82:	af00      	add	r7, sp, #0

	EmgInstance.FirstEmgRead(false);
 800fa84:	2100      	movs	r1, #0
 800fa86:	4809      	ldr	r0, [pc, #36]	@ (800faac <HasFirstEmg+0x2c>)
 800fa88:	f7fb f976 	bl	800ad78 <_ZN3Emg12FirstEmgReadEb>
	if(EmgInstance.NonFilterFirstEmg==65535||EmgInstance.NonFilterFirstEmg==0){
 800fa8c:	4b07      	ldr	r3, [pc, #28]	@ (800faac <HasFirstEmg+0x2c>)
 800fa8e:	6a1b      	ldr	r3, [r3, #32]
 800fa90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa94:	4293      	cmp	r3, r2
 800fa96:	d003      	beq.n	800faa0 <HasFirstEmg+0x20>
 800fa98:	4b04      	ldr	r3, [pc, #16]	@ (800faac <HasFirstEmg+0x2c>)
 800fa9a:	6a1b      	ldr	r3, [r3, #32]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d101      	bne.n	800faa4 <HasFirstEmg+0x24>
		return 0;
 800faa0:	2300      	movs	r3, #0
 800faa2:	e000      	b.n	800faa6 <HasFirstEmg+0x26>
	}
	return 1;
 800faa4:	2301      	movs	r3, #1
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	20005008 	.word	0x20005008

0800fab0 <HasSecondEmg>:
uint8_t HasSecondEmg(void){
 800fab0:	b580      	push	{r7, lr}
 800fab2:	af00      	add	r7, sp, #0

	EmgInstance.SecondEmgRead(false);
 800fab4:	2100      	movs	r1, #0
 800fab6:	4809      	ldr	r0, [pc, #36]	@ (800fadc <HasSecondEmg+0x2c>)
 800fab8:	f7fb f9d6 	bl	800ae68 <_ZN3Emg13SecondEmgReadEb>
	if(EmgInstance.NonFilterSecondEmg==65535||EmgInstance.NonFilterSecondEmg==0){
 800fabc:	4b07      	ldr	r3, [pc, #28]	@ (800fadc <HasSecondEmg+0x2c>)
 800fabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fac0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d003      	beq.n	800fad0 <HasSecondEmg+0x20>
 800fac8:	4b04      	ldr	r3, [pc, #16]	@ (800fadc <HasSecondEmg+0x2c>)
 800faca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800facc:	2b00      	cmp	r3, #0
 800face:	d101      	bne.n	800fad4 <HasSecondEmg+0x24>
		return 0;
 800fad0:	2300      	movs	r3, #0
 800fad2:	e000      	b.n	800fad6 <HasSecondEmg+0x26>
	}
	return 1;
 800fad4:	2301      	movs	r3, #1
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	20005008 	.word	0x20005008

0800fae0 <_Z41__static_initialization_and_destruction_0ii>:
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2b01      	cmp	r3, #1
 800faee:	d113      	bne.n	800fb18 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d10e      	bne.n	800fb18 <_Z41__static_initialization_and_destruction_0ii+0x38>
Emg EmgInstance;
 800fafa:	4813      	ldr	r0, [pc, #76]	@ (800fb48 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800fafc:	f7fb f8f6 	bl	800acec <_ZN3EmgC1Ev>
LoadCell LoadCellInstance;
 800fb00:	4812      	ldr	r0, [pc, #72]	@ (800fb4c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800fb02:	f7fd f989 	bl	800ce18 <_ZN8LoadCellC1Ev>
Communication CommunicationInstance;
 800fb06:	4812      	ldr	r0, [pc, #72]	@ (800fb50 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800fb08:	f7fa f826 	bl	8009b58 <_ZN13CommunicationC1Ev>
FlashManager FlashManagerInstance;
 800fb0c:	4811      	ldr	r0, [pc, #68]	@ (800fb54 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800fb0e:	f7fb fd3d 	bl	800b58c <_ZN12FlashManagerC1Ev>
SystemConfigStruct SystemConfig;
 800fb12:	4811      	ldr	r0, [pc, #68]	@ (800fb58 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800fb14:	f7fd ffb0 	bl	800da78 <_ZN18SystemConfigStructC1Ev>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d110      	bne.n	800fb40 <_Z41__static_initialization_and_destruction_0ii+0x60>
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d10b      	bne.n	800fb40 <_Z41__static_initialization_and_destruction_0ii+0x60>
FlashManager FlashManagerInstance;
 800fb28:	480a      	ldr	r0, [pc, #40]	@ (800fb54 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800fb2a:	f7fb fd7f 	bl	800b62c <_ZN12FlashManagerD1Ev>
Communication CommunicationInstance;
 800fb2e:	4808      	ldr	r0, [pc, #32]	@ (800fb50 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800fb30:	f7fa f82a 	bl	8009b88 <_ZN13CommunicationD1Ev>
LoadCell LoadCellInstance;
 800fb34:	4805      	ldr	r0, [pc, #20]	@ (800fb4c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800fb36:	f7fd f97f 	bl	800ce38 <_ZN8LoadCellD1Ev>
Emg EmgInstance;
 800fb3a:	4803      	ldr	r0, [pc, #12]	@ (800fb48 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800fb3c:	f7fb f8fa 	bl	800ad34 <_ZN3EmgD1Ev>
}
 800fb40:	bf00      	nop
 800fb42:	3708      	adds	r7, #8
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}
 800fb48:	20005008 	.word	0x20005008
 800fb4c:	2000704c 	.word	0x2000704c
 800fb50:	2000907c 	.word	0x2000907c
 800fb54:	2000909c 	.word	0x2000909c
 800fb58:	200092a8 	.word	0x200092a8

0800fb5c <_GLOBAL__sub_I_sendCounter>:
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fb64:	2001      	movs	r0, #1
 800fb66:	f7ff ffbb 	bl	800fae0 <_Z41__static_initialization_and_destruction_0ii>
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <_GLOBAL__sub_D_sendCounter>:
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fb74:	2000      	movs	r0, #0
 800fb76:	f7ff ffb3 	bl	800fae0 <_Z41__static_initialization_and_destruction_0ii>
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <_ZdlPvj>:
 800fb7c:	f000 b800 	b.w	800fb80 <_ZdlPv>

0800fb80 <_ZdlPv>:
 800fb80:	f000 b88e 	b.w	800fca0 <free>

0800fb84 <ceilf>:
 800fb84:	ee10 3a10 	vmov	r3, s0
 800fb88:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fb8c:	3a7f      	subs	r2, #127	@ 0x7f
 800fb8e:	2a16      	cmp	r2, #22
 800fb90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fb94:	dc2a      	bgt.n	800fbec <ceilf+0x68>
 800fb96:	2a00      	cmp	r2, #0
 800fb98:	da11      	bge.n	800fbbe <ceilf+0x3a>
 800fb9a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fc00 <ceilf+0x7c>
 800fb9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fba2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbaa:	dd05      	ble.n	800fbb8 <ceilf+0x34>
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	db23      	blt.n	800fbf8 <ceilf+0x74>
 800fbb0:	2900      	cmp	r1, #0
 800fbb2:	bf18      	it	ne
 800fbb4:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 800fbb8:	ee00 3a10 	vmov	s0, r3
 800fbbc:	4770      	bx	lr
 800fbbe:	4911      	ldr	r1, [pc, #68]	@ (800fc04 <ceilf+0x80>)
 800fbc0:	4111      	asrs	r1, r2
 800fbc2:	420b      	tst	r3, r1
 800fbc4:	d0fa      	beq.n	800fbbc <ceilf+0x38>
 800fbc6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fc00 <ceilf+0x7c>
 800fbca:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fbce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd6:	ddef      	ble.n	800fbb8 <ceilf+0x34>
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	bfc2      	ittt	gt
 800fbdc:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 800fbe0:	fa40 f202 	asrgt.w	r2, r0, r2
 800fbe4:	189b      	addgt	r3, r3, r2
 800fbe6:	ea23 0301 	bic.w	r3, r3, r1
 800fbea:	e7e5      	b.n	800fbb8 <ceilf+0x34>
 800fbec:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fbf0:	d3e4      	bcc.n	800fbbc <ceilf+0x38>
 800fbf2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fbf6:	4770      	bx	lr
 800fbf8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fbfc:	e7dc      	b.n	800fbb8 <ceilf+0x34>
 800fbfe:	bf00      	nop
 800fc00:	7149f2ca 	.word	0x7149f2ca
 800fc04:	007fffff 	.word	0x007fffff

0800fc08 <floorf>:
 800fc08:	ee10 3a10 	vmov	r3, s0
 800fc0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fc10:	3a7f      	subs	r2, #127	@ 0x7f
 800fc12:	2a16      	cmp	r2, #22
 800fc14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fc18:	dc2b      	bgt.n	800fc72 <floorf+0x6a>
 800fc1a:	2a00      	cmp	r2, #0
 800fc1c:	da12      	bge.n	800fc44 <floorf+0x3c>
 800fc1e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fc84 <floorf+0x7c>
 800fc22:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fc26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2e:	dd06      	ble.n	800fc3e <floorf+0x36>
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	da24      	bge.n	800fc7e <floorf+0x76>
 800fc34:	2900      	cmp	r1, #0
 800fc36:	4b14      	ldr	r3, [pc, #80]	@ (800fc88 <floorf+0x80>)
 800fc38:	bf08      	it	eq
 800fc3a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800fc3e:	ee00 3a10 	vmov	s0, r3
 800fc42:	4770      	bx	lr
 800fc44:	4911      	ldr	r1, [pc, #68]	@ (800fc8c <floorf+0x84>)
 800fc46:	4111      	asrs	r1, r2
 800fc48:	420b      	tst	r3, r1
 800fc4a:	d0fa      	beq.n	800fc42 <floorf+0x3a>
 800fc4c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800fc84 <floorf+0x7c>
 800fc50:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fc54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5c:	ddef      	ble.n	800fc3e <floorf+0x36>
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	bfbe      	ittt	lt
 800fc62:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800fc66:	fa40 f202 	asrlt.w	r2, r0, r2
 800fc6a:	189b      	addlt	r3, r3, r2
 800fc6c:	ea23 0301 	bic.w	r3, r3, r1
 800fc70:	e7e5      	b.n	800fc3e <floorf+0x36>
 800fc72:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fc76:	d3e4      	bcc.n	800fc42 <floorf+0x3a>
 800fc78:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc7c:	4770      	bx	lr
 800fc7e:	2300      	movs	r3, #0
 800fc80:	e7dd      	b.n	800fc3e <floorf+0x36>
 800fc82:	bf00      	nop
 800fc84:	7149f2ca 	.word	0x7149f2ca
 800fc88:	bf800000 	.word	0xbf800000
 800fc8c:	007fffff 	.word	0x007fffff

0800fc90 <malloc>:
 800fc90:	4b02      	ldr	r3, [pc, #8]	@ (800fc9c <malloc+0xc>)
 800fc92:	4601      	mov	r1, r0
 800fc94:	6818      	ldr	r0, [r3, #0]
 800fc96:	f000 b82d 	b.w	800fcf4 <_malloc_r>
 800fc9a:	bf00      	nop
 800fc9c:	2000005c 	.word	0x2000005c

0800fca0 <free>:
 800fca0:	4b02      	ldr	r3, [pc, #8]	@ (800fcac <free+0xc>)
 800fca2:	4601      	mov	r1, r0
 800fca4:	6818      	ldr	r0, [r3, #0]
 800fca6:	f000 baad 	b.w	8010204 <_free_r>
 800fcaa:	bf00      	nop
 800fcac:	2000005c 	.word	0x2000005c

0800fcb0 <sbrk_aligned>:
 800fcb0:	b570      	push	{r4, r5, r6, lr}
 800fcb2:	4e0f      	ldr	r6, [pc, #60]	@ (800fcf0 <sbrk_aligned+0x40>)
 800fcb4:	460c      	mov	r4, r1
 800fcb6:	6831      	ldr	r1, [r6, #0]
 800fcb8:	4605      	mov	r5, r0
 800fcba:	b911      	cbnz	r1, 800fcc2 <sbrk_aligned+0x12>
 800fcbc:	f000 fa26 	bl	801010c <_sbrk_r>
 800fcc0:	6030      	str	r0, [r6, #0]
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	f000 fa21 	bl	801010c <_sbrk_r>
 800fcca:	1c43      	adds	r3, r0, #1
 800fccc:	d103      	bne.n	800fcd6 <sbrk_aligned+0x26>
 800fcce:	f04f 34ff 	mov.w	r4, #4294967295
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	bd70      	pop	{r4, r5, r6, pc}
 800fcd6:	1cc4      	adds	r4, r0, #3
 800fcd8:	f024 0403 	bic.w	r4, r4, #3
 800fcdc:	42a0      	cmp	r0, r4
 800fcde:	d0f8      	beq.n	800fcd2 <sbrk_aligned+0x22>
 800fce0:	1a21      	subs	r1, r4, r0
 800fce2:	4628      	mov	r0, r5
 800fce4:	f000 fa12 	bl	801010c <_sbrk_r>
 800fce8:	3001      	adds	r0, #1
 800fcea:	d1f2      	bne.n	800fcd2 <sbrk_aligned+0x22>
 800fcec:	e7ef      	b.n	800fcce <sbrk_aligned+0x1e>
 800fcee:	bf00      	nop
 800fcf0:	200093b8 	.word	0x200093b8

0800fcf4 <_malloc_r>:
 800fcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcf8:	1ccd      	adds	r5, r1, #3
 800fcfa:	f025 0503 	bic.w	r5, r5, #3
 800fcfe:	3508      	adds	r5, #8
 800fd00:	2d0c      	cmp	r5, #12
 800fd02:	bf38      	it	cc
 800fd04:	250c      	movcc	r5, #12
 800fd06:	2d00      	cmp	r5, #0
 800fd08:	4606      	mov	r6, r0
 800fd0a:	db01      	blt.n	800fd10 <_malloc_r+0x1c>
 800fd0c:	42a9      	cmp	r1, r5
 800fd0e:	d904      	bls.n	800fd1a <_malloc_r+0x26>
 800fd10:	230c      	movs	r3, #12
 800fd12:	6033      	str	r3, [r6, #0]
 800fd14:	2000      	movs	r0, #0
 800fd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fdf0 <_malloc_r+0xfc>
 800fd1e:	f000 f869 	bl	800fdf4 <__malloc_lock>
 800fd22:	f8d8 3000 	ldr.w	r3, [r8]
 800fd26:	461c      	mov	r4, r3
 800fd28:	bb44      	cbnz	r4, 800fd7c <_malloc_r+0x88>
 800fd2a:	4629      	mov	r1, r5
 800fd2c:	4630      	mov	r0, r6
 800fd2e:	f7ff ffbf 	bl	800fcb0 <sbrk_aligned>
 800fd32:	1c43      	adds	r3, r0, #1
 800fd34:	4604      	mov	r4, r0
 800fd36:	d158      	bne.n	800fdea <_malloc_r+0xf6>
 800fd38:	f8d8 4000 	ldr.w	r4, [r8]
 800fd3c:	4627      	mov	r7, r4
 800fd3e:	2f00      	cmp	r7, #0
 800fd40:	d143      	bne.n	800fdca <_malloc_r+0xd6>
 800fd42:	2c00      	cmp	r4, #0
 800fd44:	d04b      	beq.n	800fdde <_malloc_r+0xea>
 800fd46:	6823      	ldr	r3, [r4, #0]
 800fd48:	4639      	mov	r1, r7
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	eb04 0903 	add.w	r9, r4, r3
 800fd50:	f000 f9dc 	bl	801010c <_sbrk_r>
 800fd54:	4581      	cmp	r9, r0
 800fd56:	d142      	bne.n	800fdde <_malloc_r+0xea>
 800fd58:	6821      	ldr	r1, [r4, #0]
 800fd5a:	1a6d      	subs	r5, r5, r1
 800fd5c:	4629      	mov	r1, r5
 800fd5e:	4630      	mov	r0, r6
 800fd60:	f7ff ffa6 	bl	800fcb0 <sbrk_aligned>
 800fd64:	3001      	adds	r0, #1
 800fd66:	d03a      	beq.n	800fdde <_malloc_r+0xea>
 800fd68:	6823      	ldr	r3, [r4, #0]
 800fd6a:	442b      	add	r3, r5
 800fd6c:	6023      	str	r3, [r4, #0]
 800fd6e:	f8d8 3000 	ldr.w	r3, [r8]
 800fd72:	685a      	ldr	r2, [r3, #4]
 800fd74:	bb62      	cbnz	r2, 800fdd0 <_malloc_r+0xdc>
 800fd76:	f8c8 7000 	str.w	r7, [r8]
 800fd7a:	e00f      	b.n	800fd9c <_malloc_r+0xa8>
 800fd7c:	6822      	ldr	r2, [r4, #0]
 800fd7e:	1b52      	subs	r2, r2, r5
 800fd80:	d420      	bmi.n	800fdc4 <_malloc_r+0xd0>
 800fd82:	2a0b      	cmp	r2, #11
 800fd84:	d917      	bls.n	800fdb6 <_malloc_r+0xc2>
 800fd86:	1961      	adds	r1, r4, r5
 800fd88:	42a3      	cmp	r3, r4
 800fd8a:	6025      	str	r5, [r4, #0]
 800fd8c:	bf18      	it	ne
 800fd8e:	6059      	strne	r1, [r3, #4]
 800fd90:	6863      	ldr	r3, [r4, #4]
 800fd92:	bf08      	it	eq
 800fd94:	f8c8 1000 	streq.w	r1, [r8]
 800fd98:	5162      	str	r2, [r4, r5]
 800fd9a:	604b      	str	r3, [r1, #4]
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	f000 f82f 	bl	800fe00 <__malloc_unlock>
 800fda2:	f104 000b 	add.w	r0, r4, #11
 800fda6:	1d23      	adds	r3, r4, #4
 800fda8:	f020 0007 	bic.w	r0, r0, #7
 800fdac:	1ac2      	subs	r2, r0, r3
 800fdae:	bf1c      	itt	ne
 800fdb0:	1a1b      	subne	r3, r3, r0
 800fdb2:	50a3      	strne	r3, [r4, r2]
 800fdb4:	e7af      	b.n	800fd16 <_malloc_r+0x22>
 800fdb6:	6862      	ldr	r2, [r4, #4]
 800fdb8:	42a3      	cmp	r3, r4
 800fdba:	bf0c      	ite	eq
 800fdbc:	f8c8 2000 	streq.w	r2, [r8]
 800fdc0:	605a      	strne	r2, [r3, #4]
 800fdc2:	e7eb      	b.n	800fd9c <_malloc_r+0xa8>
 800fdc4:	4623      	mov	r3, r4
 800fdc6:	6864      	ldr	r4, [r4, #4]
 800fdc8:	e7ae      	b.n	800fd28 <_malloc_r+0x34>
 800fdca:	463c      	mov	r4, r7
 800fdcc:	687f      	ldr	r7, [r7, #4]
 800fdce:	e7b6      	b.n	800fd3e <_malloc_r+0x4a>
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	42a3      	cmp	r3, r4
 800fdd6:	d1fb      	bne.n	800fdd0 <_malloc_r+0xdc>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	6053      	str	r3, [r2, #4]
 800fddc:	e7de      	b.n	800fd9c <_malloc_r+0xa8>
 800fdde:	230c      	movs	r3, #12
 800fde0:	6033      	str	r3, [r6, #0]
 800fde2:	4630      	mov	r0, r6
 800fde4:	f000 f80c 	bl	800fe00 <__malloc_unlock>
 800fde8:	e794      	b.n	800fd14 <_malloc_r+0x20>
 800fdea:	6005      	str	r5, [r0, #0]
 800fdec:	e7d6      	b.n	800fd9c <_malloc_r+0xa8>
 800fdee:	bf00      	nop
 800fdf0:	200093bc 	.word	0x200093bc

0800fdf4 <__malloc_lock>:
 800fdf4:	4801      	ldr	r0, [pc, #4]	@ (800fdfc <__malloc_lock+0x8>)
 800fdf6:	f000 b9d6 	b.w	80101a6 <__retarget_lock_acquire_recursive>
 800fdfa:	bf00      	nop
 800fdfc:	20009500 	.word	0x20009500

0800fe00 <__malloc_unlock>:
 800fe00:	4801      	ldr	r0, [pc, #4]	@ (800fe08 <__malloc_unlock+0x8>)
 800fe02:	f000 b9d1 	b.w	80101a8 <__retarget_lock_release_recursive>
 800fe06:	bf00      	nop
 800fe08:	20009500 	.word	0x20009500

0800fe0c <rand>:
 800fe0c:	4b16      	ldr	r3, [pc, #88]	@ (800fe68 <rand+0x5c>)
 800fe0e:	b510      	push	{r4, lr}
 800fe10:	681c      	ldr	r4, [r3, #0]
 800fe12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fe14:	b9b3      	cbnz	r3, 800fe44 <rand+0x38>
 800fe16:	2018      	movs	r0, #24
 800fe18:	f7ff ff3a 	bl	800fc90 <malloc>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	6320      	str	r0, [r4, #48]	@ 0x30
 800fe20:	b920      	cbnz	r0, 800fe2c <rand+0x20>
 800fe22:	4b12      	ldr	r3, [pc, #72]	@ (800fe6c <rand+0x60>)
 800fe24:	4812      	ldr	r0, [pc, #72]	@ (800fe70 <rand+0x64>)
 800fe26:	2152      	movs	r1, #82	@ 0x52
 800fe28:	f000 f9ce 	bl	80101c8 <__assert_func>
 800fe2c:	4911      	ldr	r1, [pc, #68]	@ (800fe74 <rand+0x68>)
 800fe2e:	4b12      	ldr	r3, [pc, #72]	@ (800fe78 <rand+0x6c>)
 800fe30:	e9c0 1300 	strd	r1, r3, [r0]
 800fe34:	4b11      	ldr	r3, [pc, #68]	@ (800fe7c <rand+0x70>)
 800fe36:	6083      	str	r3, [r0, #8]
 800fe38:	230b      	movs	r3, #11
 800fe3a:	8183      	strh	r3, [r0, #12]
 800fe3c:	2100      	movs	r1, #0
 800fe3e:	2001      	movs	r0, #1
 800fe40:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fe44:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fe46:	480e      	ldr	r0, [pc, #56]	@ (800fe80 <rand+0x74>)
 800fe48:	690b      	ldr	r3, [r1, #16]
 800fe4a:	694c      	ldr	r4, [r1, #20]
 800fe4c:	4a0d      	ldr	r2, [pc, #52]	@ (800fe84 <rand+0x78>)
 800fe4e:	4358      	muls	r0, r3
 800fe50:	fb02 0004 	mla	r0, r2, r4, r0
 800fe54:	fba3 3202 	umull	r3, r2, r3, r2
 800fe58:	3301      	adds	r3, #1
 800fe5a:	eb40 0002 	adc.w	r0, r0, r2
 800fe5e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800fe62:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800fe66:	bd10      	pop	{r4, pc}
 800fe68:	2000005c 	.word	0x2000005c
 800fe6c:	08010e2c 	.word	0x08010e2c
 800fe70:	08010e43 	.word	0x08010e43
 800fe74:	abcd330e 	.word	0xabcd330e
 800fe78:	e66d1234 	.word	0xe66d1234
 800fe7c:	0005deec 	.word	0x0005deec
 800fe80:	5851f42d 	.word	0x5851f42d
 800fe84:	4c957f2d 	.word	0x4c957f2d

0800fe88 <std>:
 800fe88:	2300      	movs	r3, #0
 800fe8a:	b510      	push	{r4, lr}
 800fe8c:	4604      	mov	r4, r0
 800fe8e:	e9c0 3300 	strd	r3, r3, [r0]
 800fe92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe96:	6083      	str	r3, [r0, #8]
 800fe98:	8181      	strh	r1, [r0, #12]
 800fe9a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fe9c:	81c2      	strh	r2, [r0, #14]
 800fe9e:	6183      	str	r3, [r0, #24]
 800fea0:	4619      	mov	r1, r3
 800fea2:	2208      	movs	r2, #8
 800fea4:	305c      	adds	r0, #92	@ 0x5c
 800fea6:	f000 f8f4 	bl	8010092 <memset>
 800feaa:	4b0d      	ldr	r3, [pc, #52]	@ (800fee0 <std+0x58>)
 800feac:	6263      	str	r3, [r4, #36]	@ 0x24
 800feae:	4b0d      	ldr	r3, [pc, #52]	@ (800fee4 <std+0x5c>)
 800feb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800feb2:	4b0d      	ldr	r3, [pc, #52]	@ (800fee8 <std+0x60>)
 800feb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800feb6:	4b0d      	ldr	r3, [pc, #52]	@ (800feec <std+0x64>)
 800feb8:	6323      	str	r3, [r4, #48]	@ 0x30
 800feba:	4b0d      	ldr	r3, [pc, #52]	@ (800fef0 <std+0x68>)
 800febc:	6224      	str	r4, [r4, #32]
 800febe:	429c      	cmp	r4, r3
 800fec0:	d006      	beq.n	800fed0 <std+0x48>
 800fec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fec6:	4294      	cmp	r4, r2
 800fec8:	d002      	beq.n	800fed0 <std+0x48>
 800feca:	33d0      	adds	r3, #208	@ 0xd0
 800fecc:	429c      	cmp	r4, r3
 800fece:	d105      	bne.n	800fedc <std+0x54>
 800fed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fed8:	f000 b964 	b.w	80101a4 <__retarget_lock_init_recursive>
 800fedc:	bd10      	pop	{r4, pc}
 800fede:	bf00      	nop
 800fee0:	0801000d 	.word	0x0801000d
 800fee4:	0801002f 	.word	0x0801002f
 800fee8:	08010067 	.word	0x08010067
 800feec:	0801008b 	.word	0x0801008b
 800fef0:	200093c0 	.word	0x200093c0

0800fef4 <stdio_exit_handler>:
 800fef4:	4a02      	ldr	r2, [pc, #8]	@ (800ff00 <stdio_exit_handler+0xc>)
 800fef6:	4903      	ldr	r1, [pc, #12]	@ (800ff04 <stdio_exit_handler+0x10>)
 800fef8:	4803      	ldr	r0, [pc, #12]	@ (800ff08 <stdio_exit_handler+0x14>)
 800fefa:	f000 b869 	b.w	800ffd0 <_fwalk_sglue>
 800fefe:	bf00      	nop
 800ff00:	20000050 	.word	0x20000050
 800ff04:	080103a1 	.word	0x080103a1
 800ff08:	20000060 	.word	0x20000060

0800ff0c <cleanup_stdio>:
 800ff0c:	6841      	ldr	r1, [r0, #4]
 800ff0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ff40 <cleanup_stdio+0x34>)
 800ff10:	4299      	cmp	r1, r3
 800ff12:	b510      	push	{r4, lr}
 800ff14:	4604      	mov	r4, r0
 800ff16:	d001      	beq.n	800ff1c <cleanup_stdio+0x10>
 800ff18:	f000 fa42 	bl	80103a0 <_fflush_r>
 800ff1c:	68a1      	ldr	r1, [r4, #8]
 800ff1e:	4b09      	ldr	r3, [pc, #36]	@ (800ff44 <cleanup_stdio+0x38>)
 800ff20:	4299      	cmp	r1, r3
 800ff22:	d002      	beq.n	800ff2a <cleanup_stdio+0x1e>
 800ff24:	4620      	mov	r0, r4
 800ff26:	f000 fa3b 	bl	80103a0 <_fflush_r>
 800ff2a:	68e1      	ldr	r1, [r4, #12]
 800ff2c:	4b06      	ldr	r3, [pc, #24]	@ (800ff48 <cleanup_stdio+0x3c>)
 800ff2e:	4299      	cmp	r1, r3
 800ff30:	d004      	beq.n	800ff3c <cleanup_stdio+0x30>
 800ff32:	4620      	mov	r0, r4
 800ff34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff38:	f000 ba32 	b.w	80103a0 <_fflush_r>
 800ff3c:	bd10      	pop	{r4, pc}
 800ff3e:	bf00      	nop
 800ff40:	200093c0 	.word	0x200093c0
 800ff44:	20009428 	.word	0x20009428
 800ff48:	20009490 	.word	0x20009490

0800ff4c <global_stdio_init.part.0>:
 800ff4c:	b510      	push	{r4, lr}
 800ff4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ff7c <global_stdio_init.part.0+0x30>)
 800ff50:	4c0b      	ldr	r4, [pc, #44]	@ (800ff80 <global_stdio_init.part.0+0x34>)
 800ff52:	4a0c      	ldr	r2, [pc, #48]	@ (800ff84 <global_stdio_init.part.0+0x38>)
 800ff54:	601a      	str	r2, [r3, #0]
 800ff56:	4620      	mov	r0, r4
 800ff58:	2200      	movs	r2, #0
 800ff5a:	2104      	movs	r1, #4
 800ff5c:	f7ff ff94 	bl	800fe88 <std>
 800ff60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ff64:	2201      	movs	r2, #1
 800ff66:	2109      	movs	r1, #9
 800ff68:	f7ff ff8e 	bl	800fe88 <std>
 800ff6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ff70:	2202      	movs	r2, #2
 800ff72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff76:	2112      	movs	r1, #18
 800ff78:	f7ff bf86 	b.w	800fe88 <std>
 800ff7c:	200094f8 	.word	0x200094f8
 800ff80:	200093c0 	.word	0x200093c0
 800ff84:	0800fef5 	.word	0x0800fef5

0800ff88 <__sfp_lock_acquire>:
 800ff88:	4801      	ldr	r0, [pc, #4]	@ (800ff90 <__sfp_lock_acquire+0x8>)
 800ff8a:	f000 b90c 	b.w	80101a6 <__retarget_lock_acquire_recursive>
 800ff8e:	bf00      	nop
 800ff90:	20009501 	.word	0x20009501

0800ff94 <__sfp_lock_release>:
 800ff94:	4801      	ldr	r0, [pc, #4]	@ (800ff9c <__sfp_lock_release+0x8>)
 800ff96:	f000 b907 	b.w	80101a8 <__retarget_lock_release_recursive>
 800ff9a:	bf00      	nop
 800ff9c:	20009501 	.word	0x20009501

0800ffa0 <__sinit>:
 800ffa0:	b510      	push	{r4, lr}
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	f7ff fff0 	bl	800ff88 <__sfp_lock_acquire>
 800ffa8:	6a23      	ldr	r3, [r4, #32]
 800ffaa:	b11b      	cbz	r3, 800ffb4 <__sinit+0x14>
 800ffac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffb0:	f7ff bff0 	b.w	800ff94 <__sfp_lock_release>
 800ffb4:	4b04      	ldr	r3, [pc, #16]	@ (800ffc8 <__sinit+0x28>)
 800ffb6:	6223      	str	r3, [r4, #32]
 800ffb8:	4b04      	ldr	r3, [pc, #16]	@ (800ffcc <__sinit+0x2c>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1f5      	bne.n	800ffac <__sinit+0xc>
 800ffc0:	f7ff ffc4 	bl	800ff4c <global_stdio_init.part.0>
 800ffc4:	e7f2      	b.n	800ffac <__sinit+0xc>
 800ffc6:	bf00      	nop
 800ffc8:	0800ff0d 	.word	0x0800ff0d
 800ffcc:	200094f8 	.word	0x200094f8

0800ffd0 <_fwalk_sglue>:
 800ffd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffd4:	4607      	mov	r7, r0
 800ffd6:	4688      	mov	r8, r1
 800ffd8:	4614      	mov	r4, r2
 800ffda:	2600      	movs	r6, #0
 800ffdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ffe0:	f1b9 0901 	subs.w	r9, r9, #1
 800ffe4:	d505      	bpl.n	800fff2 <_fwalk_sglue+0x22>
 800ffe6:	6824      	ldr	r4, [r4, #0]
 800ffe8:	2c00      	cmp	r4, #0
 800ffea:	d1f7      	bne.n	800ffdc <_fwalk_sglue+0xc>
 800ffec:	4630      	mov	r0, r6
 800ffee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fff2:	89ab      	ldrh	r3, [r5, #12]
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d907      	bls.n	8010008 <_fwalk_sglue+0x38>
 800fff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fffc:	3301      	adds	r3, #1
 800fffe:	d003      	beq.n	8010008 <_fwalk_sglue+0x38>
 8010000:	4629      	mov	r1, r5
 8010002:	4638      	mov	r0, r7
 8010004:	47c0      	blx	r8
 8010006:	4306      	orrs	r6, r0
 8010008:	3568      	adds	r5, #104	@ 0x68
 801000a:	e7e9      	b.n	800ffe0 <_fwalk_sglue+0x10>

0801000c <__sread>:
 801000c:	b510      	push	{r4, lr}
 801000e:	460c      	mov	r4, r1
 8010010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010014:	f000 f868 	bl	80100e8 <_read_r>
 8010018:	2800      	cmp	r0, #0
 801001a:	bfab      	itete	ge
 801001c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801001e:	89a3      	ldrhlt	r3, [r4, #12]
 8010020:	181b      	addge	r3, r3, r0
 8010022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010026:	bfac      	ite	ge
 8010028:	6563      	strge	r3, [r4, #84]	@ 0x54
 801002a:	81a3      	strhlt	r3, [r4, #12]
 801002c:	bd10      	pop	{r4, pc}

0801002e <__swrite>:
 801002e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010032:	461f      	mov	r7, r3
 8010034:	898b      	ldrh	r3, [r1, #12]
 8010036:	05db      	lsls	r3, r3, #23
 8010038:	4605      	mov	r5, r0
 801003a:	460c      	mov	r4, r1
 801003c:	4616      	mov	r6, r2
 801003e:	d505      	bpl.n	801004c <__swrite+0x1e>
 8010040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010044:	2302      	movs	r3, #2
 8010046:	2200      	movs	r2, #0
 8010048:	f000 f83c 	bl	80100c4 <_lseek_r>
 801004c:	89a3      	ldrh	r3, [r4, #12]
 801004e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010056:	81a3      	strh	r3, [r4, #12]
 8010058:	4632      	mov	r2, r6
 801005a:	463b      	mov	r3, r7
 801005c:	4628      	mov	r0, r5
 801005e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010062:	f000 b863 	b.w	801012c <_write_r>

08010066 <__sseek>:
 8010066:	b510      	push	{r4, lr}
 8010068:	460c      	mov	r4, r1
 801006a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801006e:	f000 f829 	bl	80100c4 <_lseek_r>
 8010072:	1c43      	adds	r3, r0, #1
 8010074:	89a3      	ldrh	r3, [r4, #12]
 8010076:	bf15      	itete	ne
 8010078:	6560      	strne	r0, [r4, #84]	@ 0x54
 801007a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801007e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010082:	81a3      	strheq	r3, [r4, #12]
 8010084:	bf18      	it	ne
 8010086:	81a3      	strhne	r3, [r4, #12]
 8010088:	bd10      	pop	{r4, pc}

0801008a <__sclose>:
 801008a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801008e:	f000 b809 	b.w	80100a4 <_close_r>

08010092 <memset>:
 8010092:	4402      	add	r2, r0
 8010094:	4603      	mov	r3, r0
 8010096:	4293      	cmp	r3, r2
 8010098:	d100      	bne.n	801009c <memset+0xa>
 801009a:	4770      	bx	lr
 801009c:	f803 1b01 	strb.w	r1, [r3], #1
 80100a0:	e7f9      	b.n	8010096 <memset+0x4>
	...

080100a4 <_close_r>:
 80100a4:	b538      	push	{r3, r4, r5, lr}
 80100a6:	4d06      	ldr	r5, [pc, #24]	@ (80100c0 <_close_r+0x1c>)
 80100a8:	2300      	movs	r3, #0
 80100aa:	4604      	mov	r4, r0
 80100ac:	4608      	mov	r0, r1
 80100ae:	602b      	str	r3, [r5, #0]
 80100b0:	f7f1 fcf2 	bl	8001a98 <_close>
 80100b4:	1c43      	adds	r3, r0, #1
 80100b6:	d102      	bne.n	80100be <_close_r+0x1a>
 80100b8:	682b      	ldr	r3, [r5, #0]
 80100ba:	b103      	cbz	r3, 80100be <_close_r+0x1a>
 80100bc:	6023      	str	r3, [r4, #0]
 80100be:	bd38      	pop	{r3, r4, r5, pc}
 80100c0:	200094fc 	.word	0x200094fc

080100c4 <_lseek_r>:
 80100c4:	b538      	push	{r3, r4, r5, lr}
 80100c6:	4d07      	ldr	r5, [pc, #28]	@ (80100e4 <_lseek_r+0x20>)
 80100c8:	4604      	mov	r4, r0
 80100ca:	4608      	mov	r0, r1
 80100cc:	4611      	mov	r1, r2
 80100ce:	2200      	movs	r2, #0
 80100d0:	602a      	str	r2, [r5, #0]
 80100d2:	461a      	mov	r2, r3
 80100d4:	f7f1 fd07 	bl	8001ae6 <_lseek>
 80100d8:	1c43      	adds	r3, r0, #1
 80100da:	d102      	bne.n	80100e2 <_lseek_r+0x1e>
 80100dc:	682b      	ldr	r3, [r5, #0]
 80100de:	b103      	cbz	r3, 80100e2 <_lseek_r+0x1e>
 80100e0:	6023      	str	r3, [r4, #0]
 80100e2:	bd38      	pop	{r3, r4, r5, pc}
 80100e4:	200094fc 	.word	0x200094fc

080100e8 <_read_r>:
 80100e8:	b538      	push	{r3, r4, r5, lr}
 80100ea:	4d07      	ldr	r5, [pc, #28]	@ (8010108 <_read_r+0x20>)
 80100ec:	4604      	mov	r4, r0
 80100ee:	4608      	mov	r0, r1
 80100f0:	4611      	mov	r1, r2
 80100f2:	2200      	movs	r2, #0
 80100f4:	602a      	str	r2, [r5, #0]
 80100f6:	461a      	mov	r2, r3
 80100f8:	f7f1 fc95 	bl	8001a26 <_read>
 80100fc:	1c43      	adds	r3, r0, #1
 80100fe:	d102      	bne.n	8010106 <_read_r+0x1e>
 8010100:	682b      	ldr	r3, [r5, #0]
 8010102:	b103      	cbz	r3, 8010106 <_read_r+0x1e>
 8010104:	6023      	str	r3, [r4, #0]
 8010106:	bd38      	pop	{r3, r4, r5, pc}
 8010108:	200094fc 	.word	0x200094fc

0801010c <_sbrk_r>:
 801010c:	b538      	push	{r3, r4, r5, lr}
 801010e:	4d06      	ldr	r5, [pc, #24]	@ (8010128 <_sbrk_r+0x1c>)
 8010110:	2300      	movs	r3, #0
 8010112:	4604      	mov	r4, r0
 8010114:	4608      	mov	r0, r1
 8010116:	602b      	str	r3, [r5, #0]
 8010118:	f7f1 fcf2 	bl	8001b00 <_sbrk>
 801011c:	1c43      	adds	r3, r0, #1
 801011e:	d102      	bne.n	8010126 <_sbrk_r+0x1a>
 8010120:	682b      	ldr	r3, [r5, #0]
 8010122:	b103      	cbz	r3, 8010126 <_sbrk_r+0x1a>
 8010124:	6023      	str	r3, [r4, #0]
 8010126:	bd38      	pop	{r3, r4, r5, pc}
 8010128:	200094fc 	.word	0x200094fc

0801012c <_write_r>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4d07      	ldr	r5, [pc, #28]	@ (801014c <_write_r+0x20>)
 8010130:	4604      	mov	r4, r0
 8010132:	4608      	mov	r0, r1
 8010134:	4611      	mov	r1, r2
 8010136:	2200      	movs	r2, #0
 8010138:	602a      	str	r2, [r5, #0]
 801013a:	461a      	mov	r2, r3
 801013c:	f7f1 fc90 	bl	8001a60 <_write>
 8010140:	1c43      	adds	r3, r0, #1
 8010142:	d102      	bne.n	801014a <_write_r+0x1e>
 8010144:	682b      	ldr	r3, [r5, #0]
 8010146:	b103      	cbz	r3, 801014a <_write_r+0x1e>
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	bd38      	pop	{r3, r4, r5, pc}
 801014c:	200094fc 	.word	0x200094fc

08010150 <__errno>:
 8010150:	4b01      	ldr	r3, [pc, #4]	@ (8010158 <__errno+0x8>)
 8010152:	6818      	ldr	r0, [r3, #0]
 8010154:	4770      	bx	lr
 8010156:	bf00      	nop
 8010158:	2000005c 	.word	0x2000005c

0801015c <__libc_init_array>:
 801015c:	b570      	push	{r4, r5, r6, lr}
 801015e:	4d0d      	ldr	r5, [pc, #52]	@ (8010194 <__libc_init_array+0x38>)
 8010160:	4c0d      	ldr	r4, [pc, #52]	@ (8010198 <__libc_init_array+0x3c>)
 8010162:	1b64      	subs	r4, r4, r5
 8010164:	10a4      	asrs	r4, r4, #2
 8010166:	2600      	movs	r6, #0
 8010168:	42a6      	cmp	r6, r4
 801016a:	d109      	bne.n	8010180 <__libc_init_array+0x24>
 801016c:	4d0b      	ldr	r5, [pc, #44]	@ (801019c <__libc_init_array+0x40>)
 801016e:	4c0c      	ldr	r4, [pc, #48]	@ (80101a0 <__libc_init_array+0x44>)
 8010170:	f000 fd82 	bl	8010c78 <_init>
 8010174:	1b64      	subs	r4, r4, r5
 8010176:	10a4      	asrs	r4, r4, #2
 8010178:	2600      	movs	r6, #0
 801017a:	42a6      	cmp	r6, r4
 801017c:	d105      	bne.n	801018a <__libc_init_array+0x2e>
 801017e:	bd70      	pop	{r4, r5, r6, pc}
 8010180:	f855 3b04 	ldr.w	r3, [r5], #4
 8010184:	4798      	blx	r3
 8010186:	3601      	adds	r6, #1
 8010188:	e7ee      	b.n	8010168 <__libc_init_array+0xc>
 801018a:	f855 3b04 	ldr.w	r3, [r5], #4
 801018e:	4798      	blx	r3
 8010190:	3601      	adds	r6, #1
 8010192:	e7f2      	b.n	801017a <__libc_init_array+0x1e>
 8010194:	08010f14 	.word	0x08010f14
 8010198:	08010f14 	.word	0x08010f14
 801019c:	08010f14 	.word	0x08010f14
 80101a0:	08010f20 	.word	0x08010f20

080101a4 <__retarget_lock_init_recursive>:
 80101a4:	4770      	bx	lr

080101a6 <__retarget_lock_acquire_recursive>:
 80101a6:	4770      	bx	lr

080101a8 <__retarget_lock_release_recursive>:
 80101a8:	4770      	bx	lr

080101aa <memcpy>:
 80101aa:	440a      	add	r2, r1
 80101ac:	4291      	cmp	r1, r2
 80101ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80101b2:	d100      	bne.n	80101b6 <memcpy+0xc>
 80101b4:	4770      	bx	lr
 80101b6:	b510      	push	{r4, lr}
 80101b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101c0:	4291      	cmp	r1, r2
 80101c2:	d1f9      	bne.n	80101b8 <memcpy+0xe>
 80101c4:	bd10      	pop	{r4, pc}
	...

080101c8 <__assert_func>:
 80101c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101ca:	4614      	mov	r4, r2
 80101cc:	461a      	mov	r2, r3
 80101ce:	4b09      	ldr	r3, [pc, #36]	@ (80101f4 <__assert_func+0x2c>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	4605      	mov	r5, r0
 80101d4:	68d8      	ldr	r0, [r3, #12]
 80101d6:	b954      	cbnz	r4, 80101ee <__assert_func+0x26>
 80101d8:	4b07      	ldr	r3, [pc, #28]	@ (80101f8 <__assert_func+0x30>)
 80101da:	461c      	mov	r4, r3
 80101dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101e0:	9100      	str	r1, [sp, #0]
 80101e2:	462b      	mov	r3, r5
 80101e4:	4905      	ldr	r1, [pc, #20]	@ (80101fc <__assert_func+0x34>)
 80101e6:	f000 f903 	bl	80103f0 <fiprintf>
 80101ea:	f000 f913 	bl	8010414 <abort>
 80101ee:	4b04      	ldr	r3, [pc, #16]	@ (8010200 <__assert_func+0x38>)
 80101f0:	e7f4      	b.n	80101dc <__assert_func+0x14>
 80101f2:	bf00      	nop
 80101f4:	2000005c 	.word	0x2000005c
 80101f8:	08010ed6 	.word	0x08010ed6
 80101fc:	08010ea8 	.word	0x08010ea8
 8010200:	08010e9b 	.word	0x08010e9b

08010204 <_free_r>:
 8010204:	b538      	push	{r3, r4, r5, lr}
 8010206:	4605      	mov	r5, r0
 8010208:	2900      	cmp	r1, #0
 801020a:	d041      	beq.n	8010290 <_free_r+0x8c>
 801020c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010210:	1f0c      	subs	r4, r1, #4
 8010212:	2b00      	cmp	r3, #0
 8010214:	bfb8      	it	lt
 8010216:	18e4      	addlt	r4, r4, r3
 8010218:	f7ff fdec 	bl	800fdf4 <__malloc_lock>
 801021c:	4a1d      	ldr	r2, [pc, #116]	@ (8010294 <_free_r+0x90>)
 801021e:	6813      	ldr	r3, [r2, #0]
 8010220:	b933      	cbnz	r3, 8010230 <_free_r+0x2c>
 8010222:	6063      	str	r3, [r4, #4]
 8010224:	6014      	str	r4, [r2, #0]
 8010226:	4628      	mov	r0, r5
 8010228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801022c:	f7ff bde8 	b.w	800fe00 <__malloc_unlock>
 8010230:	42a3      	cmp	r3, r4
 8010232:	d908      	bls.n	8010246 <_free_r+0x42>
 8010234:	6820      	ldr	r0, [r4, #0]
 8010236:	1821      	adds	r1, r4, r0
 8010238:	428b      	cmp	r3, r1
 801023a:	bf01      	itttt	eq
 801023c:	6819      	ldreq	r1, [r3, #0]
 801023e:	685b      	ldreq	r3, [r3, #4]
 8010240:	1809      	addeq	r1, r1, r0
 8010242:	6021      	streq	r1, [r4, #0]
 8010244:	e7ed      	b.n	8010222 <_free_r+0x1e>
 8010246:	461a      	mov	r2, r3
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	b10b      	cbz	r3, 8010250 <_free_r+0x4c>
 801024c:	42a3      	cmp	r3, r4
 801024e:	d9fa      	bls.n	8010246 <_free_r+0x42>
 8010250:	6811      	ldr	r1, [r2, #0]
 8010252:	1850      	adds	r0, r2, r1
 8010254:	42a0      	cmp	r0, r4
 8010256:	d10b      	bne.n	8010270 <_free_r+0x6c>
 8010258:	6820      	ldr	r0, [r4, #0]
 801025a:	4401      	add	r1, r0
 801025c:	1850      	adds	r0, r2, r1
 801025e:	4283      	cmp	r3, r0
 8010260:	6011      	str	r1, [r2, #0]
 8010262:	d1e0      	bne.n	8010226 <_free_r+0x22>
 8010264:	6818      	ldr	r0, [r3, #0]
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	6053      	str	r3, [r2, #4]
 801026a:	4408      	add	r0, r1
 801026c:	6010      	str	r0, [r2, #0]
 801026e:	e7da      	b.n	8010226 <_free_r+0x22>
 8010270:	d902      	bls.n	8010278 <_free_r+0x74>
 8010272:	230c      	movs	r3, #12
 8010274:	602b      	str	r3, [r5, #0]
 8010276:	e7d6      	b.n	8010226 <_free_r+0x22>
 8010278:	6820      	ldr	r0, [r4, #0]
 801027a:	1821      	adds	r1, r4, r0
 801027c:	428b      	cmp	r3, r1
 801027e:	bf04      	itt	eq
 8010280:	6819      	ldreq	r1, [r3, #0]
 8010282:	685b      	ldreq	r3, [r3, #4]
 8010284:	6063      	str	r3, [r4, #4]
 8010286:	bf04      	itt	eq
 8010288:	1809      	addeq	r1, r1, r0
 801028a:	6021      	streq	r1, [r4, #0]
 801028c:	6054      	str	r4, [r2, #4]
 801028e:	e7ca      	b.n	8010226 <_free_r+0x22>
 8010290:	bd38      	pop	{r3, r4, r5, pc}
 8010292:	bf00      	nop
 8010294:	200093bc 	.word	0x200093bc

08010298 <__sflush_r>:
 8010298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801029c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102a0:	0716      	lsls	r6, r2, #28
 80102a2:	4605      	mov	r5, r0
 80102a4:	460c      	mov	r4, r1
 80102a6:	d454      	bmi.n	8010352 <__sflush_r+0xba>
 80102a8:	684b      	ldr	r3, [r1, #4]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	dc02      	bgt.n	80102b4 <__sflush_r+0x1c>
 80102ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	dd48      	ble.n	8010346 <__sflush_r+0xae>
 80102b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80102b6:	2e00      	cmp	r6, #0
 80102b8:	d045      	beq.n	8010346 <__sflush_r+0xae>
 80102ba:	2300      	movs	r3, #0
 80102bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80102c0:	682f      	ldr	r7, [r5, #0]
 80102c2:	6a21      	ldr	r1, [r4, #32]
 80102c4:	602b      	str	r3, [r5, #0]
 80102c6:	d030      	beq.n	801032a <__sflush_r+0x92>
 80102c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80102ca:	89a3      	ldrh	r3, [r4, #12]
 80102cc:	0759      	lsls	r1, r3, #29
 80102ce:	d505      	bpl.n	80102dc <__sflush_r+0x44>
 80102d0:	6863      	ldr	r3, [r4, #4]
 80102d2:	1ad2      	subs	r2, r2, r3
 80102d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80102d6:	b10b      	cbz	r3, 80102dc <__sflush_r+0x44>
 80102d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80102da:	1ad2      	subs	r2, r2, r3
 80102dc:	2300      	movs	r3, #0
 80102de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80102e0:	6a21      	ldr	r1, [r4, #32]
 80102e2:	4628      	mov	r0, r5
 80102e4:	47b0      	blx	r6
 80102e6:	1c43      	adds	r3, r0, #1
 80102e8:	89a3      	ldrh	r3, [r4, #12]
 80102ea:	d106      	bne.n	80102fa <__sflush_r+0x62>
 80102ec:	6829      	ldr	r1, [r5, #0]
 80102ee:	291d      	cmp	r1, #29
 80102f0:	d82b      	bhi.n	801034a <__sflush_r+0xb2>
 80102f2:	4a2a      	ldr	r2, [pc, #168]	@ (801039c <__sflush_r+0x104>)
 80102f4:	410a      	asrs	r2, r1
 80102f6:	07d6      	lsls	r6, r2, #31
 80102f8:	d427      	bmi.n	801034a <__sflush_r+0xb2>
 80102fa:	2200      	movs	r2, #0
 80102fc:	6062      	str	r2, [r4, #4]
 80102fe:	04d9      	lsls	r1, r3, #19
 8010300:	6922      	ldr	r2, [r4, #16]
 8010302:	6022      	str	r2, [r4, #0]
 8010304:	d504      	bpl.n	8010310 <__sflush_r+0x78>
 8010306:	1c42      	adds	r2, r0, #1
 8010308:	d101      	bne.n	801030e <__sflush_r+0x76>
 801030a:	682b      	ldr	r3, [r5, #0]
 801030c:	b903      	cbnz	r3, 8010310 <__sflush_r+0x78>
 801030e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010312:	602f      	str	r7, [r5, #0]
 8010314:	b1b9      	cbz	r1, 8010346 <__sflush_r+0xae>
 8010316:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801031a:	4299      	cmp	r1, r3
 801031c:	d002      	beq.n	8010324 <__sflush_r+0x8c>
 801031e:	4628      	mov	r0, r5
 8010320:	f7ff ff70 	bl	8010204 <_free_r>
 8010324:	2300      	movs	r3, #0
 8010326:	6363      	str	r3, [r4, #52]	@ 0x34
 8010328:	e00d      	b.n	8010346 <__sflush_r+0xae>
 801032a:	2301      	movs	r3, #1
 801032c:	4628      	mov	r0, r5
 801032e:	47b0      	blx	r6
 8010330:	4602      	mov	r2, r0
 8010332:	1c50      	adds	r0, r2, #1
 8010334:	d1c9      	bne.n	80102ca <__sflush_r+0x32>
 8010336:	682b      	ldr	r3, [r5, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d0c6      	beq.n	80102ca <__sflush_r+0x32>
 801033c:	2b1d      	cmp	r3, #29
 801033e:	d001      	beq.n	8010344 <__sflush_r+0xac>
 8010340:	2b16      	cmp	r3, #22
 8010342:	d11e      	bne.n	8010382 <__sflush_r+0xea>
 8010344:	602f      	str	r7, [r5, #0]
 8010346:	2000      	movs	r0, #0
 8010348:	e022      	b.n	8010390 <__sflush_r+0xf8>
 801034a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801034e:	b21b      	sxth	r3, r3
 8010350:	e01b      	b.n	801038a <__sflush_r+0xf2>
 8010352:	690f      	ldr	r7, [r1, #16]
 8010354:	2f00      	cmp	r7, #0
 8010356:	d0f6      	beq.n	8010346 <__sflush_r+0xae>
 8010358:	0793      	lsls	r3, r2, #30
 801035a:	680e      	ldr	r6, [r1, #0]
 801035c:	bf08      	it	eq
 801035e:	694b      	ldreq	r3, [r1, #20]
 8010360:	600f      	str	r7, [r1, #0]
 8010362:	bf18      	it	ne
 8010364:	2300      	movne	r3, #0
 8010366:	eba6 0807 	sub.w	r8, r6, r7
 801036a:	608b      	str	r3, [r1, #8]
 801036c:	f1b8 0f00 	cmp.w	r8, #0
 8010370:	dde9      	ble.n	8010346 <__sflush_r+0xae>
 8010372:	6a21      	ldr	r1, [r4, #32]
 8010374:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010376:	4643      	mov	r3, r8
 8010378:	463a      	mov	r2, r7
 801037a:	4628      	mov	r0, r5
 801037c:	47b0      	blx	r6
 801037e:	2800      	cmp	r0, #0
 8010380:	dc08      	bgt.n	8010394 <__sflush_r+0xfc>
 8010382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801038a:	81a3      	strh	r3, [r4, #12]
 801038c:	f04f 30ff 	mov.w	r0, #4294967295
 8010390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010394:	4407      	add	r7, r0
 8010396:	eba8 0800 	sub.w	r8, r8, r0
 801039a:	e7e7      	b.n	801036c <__sflush_r+0xd4>
 801039c:	dfbffffe 	.word	0xdfbffffe

080103a0 <_fflush_r>:
 80103a0:	b538      	push	{r3, r4, r5, lr}
 80103a2:	690b      	ldr	r3, [r1, #16]
 80103a4:	4605      	mov	r5, r0
 80103a6:	460c      	mov	r4, r1
 80103a8:	b913      	cbnz	r3, 80103b0 <_fflush_r+0x10>
 80103aa:	2500      	movs	r5, #0
 80103ac:	4628      	mov	r0, r5
 80103ae:	bd38      	pop	{r3, r4, r5, pc}
 80103b0:	b118      	cbz	r0, 80103ba <_fflush_r+0x1a>
 80103b2:	6a03      	ldr	r3, [r0, #32]
 80103b4:	b90b      	cbnz	r3, 80103ba <_fflush_r+0x1a>
 80103b6:	f7ff fdf3 	bl	800ffa0 <__sinit>
 80103ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d0f3      	beq.n	80103aa <_fflush_r+0xa>
 80103c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80103c4:	07d0      	lsls	r0, r2, #31
 80103c6:	d404      	bmi.n	80103d2 <_fflush_r+0x32>
 80103c8:	0599      	lsls	r1, r3, #22
 80103ca:	d402      	bmi.n	80103d2 <_fflush_r+0x32>
 80103cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80103ce:	f7ff feea 	bl	80101a6 <__retarget_lock_acquire_recursive>
 80103d2:	4628      	mov	r0, r5
 80103d4:	4621      	mov	r1, r4
 80103d6:	f7ff ff5f 	bl	8010298 <__sflush_r>
 80103da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80103dc:	07da      	lsls	r2, r3, #31
 80103de:	4605      	mov	r5, r0
 80103e0:	d4e4      	bmi.n	80103ac <_fflush_r+0xc>
 80103e2:	89a3      	ldrh	r3, [r4, #12]
 80103e4:	059b      	lsls	r3, r3, #22
 80103e6:	d4e1      	bmi.n	80103ac <_fflush_r+0xc>
 80103e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80103ea:	f7ff fedd 	bl	80101a8 <__retarget_lock_release_recursive>
 80103ee:	e7dd      	b.n	80103ac <_fflush_r+0xc>

080103f0 <fiprintf>:
 80103f0:	b40e      	push	{r1, r2, r3}
 80103f2:	b503      	push	{r0, r1, lr}
 80103f4:	4601      	mov	r1, r0
 80103f6:	ab03      	add	r3, sp, #12
 80103f8:	4805      	ldr	r0, [pc, #20]	@ (8010410 <fiprintf+0x20>)
 80103fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80103fe:	6800      	ldr	r0, [r0, #0]
 8010400:	9301      	str	r3, [sp, #4]
 8010402:	f000 f837 	bl	8010474 <_vfiprintf_r>
 8010406:	b002      	add	sp, #8
 8010408:	f85d eb04 	ldr.w	lr, [sp], #4
 801040c:	b003      	add	sp, #12
 801040e:	4770      	bx	lr
 8010410:	2000005c 	.word	0x2000005c

08010414 <abort>:
 8010414:	b508      	push	{r3, lr}
 8010416:	2006      	movs	r0, #6
 8010418:	f000 fb8e 	bl	8010b38 <raise>
 801041c:	2001      	movs	r0, #1
 801041e:	f7f1 faf7 	bl	8001a10 <_exit>

08010422 <__sfputc_r>:
 8010422:	6893      	ldr	r3, [r2, #8]
 8010424:	3b01      	subs	r3, #1
 8010426:	2b00      	cmp	r3, #0
 8010428:	b410      	push	{r4}
 801042a:	6093      	str	r3, [r2, #8]
 801042c:	da08      	bge.n	8010440 <__sfputc_r+0x1e>
 801042e:	6994      	ldr	r4, [r2, #24]
 8010430:	42a3      	cmp	r3, r4
 8010432:	db01      	blt.n	8010438 <__sfputc_r+0x16>
 8010434:	290a      	cmp	r1, #10
 8010436:	d103      	bne.n	8010440 <__sfputc_r+0x1e>
 8010438:	f85d 4b04 	ldr.w	r4, [sp], #4
 801043c:	f000 bac0 	b.w	80109c0 <__swbuf_r>
 8010440:	6813      	ldr	r3, [r2, #0]
 8010442:	1c58      	adds	r0, r3, #1
 8010444:	6010      	str	r0, [r2, #0]
 8010446:	7019      	strb	r1, [r3, #0]
 8010448:	4608      	mov	r0, r1
 801044a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801044e:	4770      	bx	lr

08010450 <__sfputs_r>:
 8010450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010452:	4606      	mov	r6, r0
 8010454:	460f      	mov	r7, r1
 8010456:	4614      	mov	r4, r2
 8010458:	18d5      	adds	r5, r2, r3
 801045a:	42ac      	cmp	r4, r5
 801045c:	d101      	bne.n	8010462 <__sfputs_r+0x12>
 801045e:	2000      	movs	r0, #0
 8010460:	e007      	b.n	8010472 <__sfputs_r+0x22>
 8010462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010466:	463a      	mov	r2, r7
 8010468:	4630      	mov	r0, r6
 801046a:	f7ff ffda 	bl	8010422 <__sfputc_r>
 801046e:	1c43      	adds	r3, r0, #1
 8010470:	d1f3      	bne.n	801045a <__sfputs_r+0xa>
 8010472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010474 <_vfiprintf_r>:
 8010474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010478:	460d      	mov	r5, r1
 801047a:	b09d      	sub	sp, #116	@ 0x74
 801047c:	4614      	mov	r4, r2
 801047e:	4698      	mov	r8, r3
 8010480:	4606      	mov	r6, r0
 8010482:	b118      	cbz	r0, 801048c <_vfiprintf_r+0x18>
 8010484:	6a03      	ldr	r3, [r0, #32]
 8010486:	b90b      	cbnz	r3, 801048c <_vfiprintf_r+0x18>
 8010488:	f7ff fd8a 	bl	800ffa0 <__sinit>
 801048c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801048e:	07d9      	lsls	r1, r3, #31
 8010490:	d405      	bmi.n	801049e <_vfiprintf_r+0x2a>
 8010492:	89ab      	ldrh	r3, [r5, #12]
 8010494:	059a      	lsls	r2, r3, #22
 8010496:	d402      	bmi.n	801049e <_vfiprintf_r+0x2a>
 8010498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801049a:	f7ff fe84 	bl	80101a6 <__retarget_lock_acquire_recursive>
 801049e:	89ab      	ldrh	r3, [r5, #12]
 80104a0:	071b      	lsls	r3, r3, #28
 80104a2:	d501      	bpl.n	80104a8 <_vfiprintf_r+0x34>
 80104a4:	692b      	ldr	r3, [r5, #16]
 80104a6:	b99b      	cbnz	r3, 80104d0 <_vfiprintf_r+0x5c>
 80104a8:	4629      	mov	r1, r5
 80104aa:	4630      	mov	r0, r6
 80104ac:	f000 fac6 	bl	8010a3c <__swsetup_r>
 80104b0:	b170      	cbz	r0, 80104d0 <_vfiprintf_r+0x5c>
 80104b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80104b4:	07dc      	lsls	r4, r3, #31
 80104b6:	d504      	bpl.n	80104c2 <_vfiprintf_r+0x4e>
 80104b8:	f04f 30ff 	mov.w	r0, #4294967295
 80104bc:	b01d      	add	sp, #116	@ 0x74
 80104be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c2:	89ab      	ldrh	r3, [r5, #12]
 80104c4:	0598      	lsls	r0, r3, #22
 80104c6:	d4f7      	bmi.n	80104b8 <_vfiprintf_r+0x44>
 80104c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104ca:	f7ff fe6d 	bl	80101a8 <__retarget_lock_release_recursive>
 80104ce:	e7f3      	b.n	80104b8 <_vfiprintf_r+0x44>
 80104d0:	2300      	movs	r3, #0
 80104d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80104d4:	2320      	movs	r3, #32
 80104d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80104da:	f8cd 800c 	str.w	r8, [sp, #12]
 80104de:	2330      	movs	r3, #48	@ 0x30
 80104e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010690 <_vfiprintf_r+0x21c>
 80104e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80104e8:	f04f 0901 	mov.w	r9, #1
 80104ec:	4623      	mov	r3, r4
 80104ee:	469a      	mov	sl, r3
 80104f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104f4:	b10a      	cbz	r2, 80104fa <_vfiprintf_r+0x86>
 80104f6:	2a25      	cmp	r2, #37	@ 0x25
 80104f8:	d1f9      	bne.n	80104ee <_vfiprintf_r+0x7a>
 80104fa:	ebba 0b04 	subs.w	fp, sl, r4
 80104fe:	d00b      	beq.n	8010518 <_vfiprintf_r+0xa4>
 8010500:	465b      	mov	r3, fp
 8010502:	4622      	mov	r2, r4
 8010504:	4629      	mov	r1, r5
 8010506:	4630      	mov	r0, r6
 8010508:	f7ff ffa2 	bl	8010450 <__sfputs_r>
 801050c:	3001      	adds	r0, #1
 801050e:	f000 80a7 	beq.w	8010660 <_vfiprintf_r+0x1ec>
 8010512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010514:	445a      	add	r2, fp
 8010516:	9209      	str	r2, [sp, #36]	@ 0x24
 8010518:	f89a 3000 	ldrb.w	r3, [sl]
 801051c:	2b00      	cmp	r3, #0
 801051e:	f000 809f 	beq.w	8010660 <_vfiprintf_r+0x1ec>
 8010522:	2300      	movs	r3, #0
 8010524:	f04f 32ff 	mov.w	r2, #4294967295
 8010528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801052c:	f10a 0a01 	add.w	sl, sl, #1
 8010530:	9304      	str	r3, [sp, #16]
 8010532:	9307      	str	r3, [sp, #28]
 8010534:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010538:	931a      	str	r3, [sp, #104]	@ 0x68
 801053a:	4654      	mov	r4, sl
 801053c:	2205      	movs	r2, #5
 801053e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010542:	4853      	ldr	r0, [pc, #332]	@ (8010690 <_vfiprintf_r+0x21c>)
 8010544:	f7ef fe44 	bl	80001d0 <memchr>
 8010548:	9a04      	ldr	r2, [sp, #16]
 801054a:	b9d8      	cbnz	r0, 8010584 <_vfiprintf_r+0x110>
 801054c:	06d1      	lsls	r1, r2, #27
 801054e:	bf44      	itt	mi
 8010550:	2320      	movmi	r3, #32
 8010552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010556:	0713      	lsls	r3, r2, #28
 8010558:	bf44      	itt	mi
 801055a:	232b      	movmi	r3, #43	@ 0x2b
 801055c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010560:	f89a 3000 	ldrb.w	r3, [sl]
 8010564:	2b2a      	cmp	r3, #42	@ 0x2a
 8010566:	d015      	beq.n	8010594 <_vfiprintf_r+0x120>
 8010568:	9a07      	ldr	r2, [sp, #28]
 801056a:	4654      	mov	r4, sl
 801056c:	2000      	movs	r0, #0
 801056e:	f04f 0c0a 	mov.w	ip, #10
 8010572:	4621      	mov	r1, r4
 8010574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010578:	3b30      	subs	r3, #48	@ 0x30
 801057a:	2b09      	cmp	r3, #9
 801057c:	d94b      	bls.n	8010616 <_vfiprintf_r+0x1a2>
 801057e:	b1b0      	cbz	r0, 80105ae <_vfiprintf_r+0x13a>
 8010580:	9207      	str	r2, [sp, #28]
 8010582:	e014      	b.n	80105ae <_vfiprintf_r+0x13a>
 8010584:	eba0 0308 	sub.w	r3, r0, r8
 8010588:	fa09 f303 	lsl.w	r3, r9, r3
 801058c:	4313      	orrs	r3, r2
 801058e:	9304      	str	r3, [sp, #16]
 8010590:	46a2      	mov	sl, r4
 8010592:	e7d2      	b.n	801053a <_vfiprintf_r+0xc6>
 8010594:	9b03      	ldr	r3, [sp, #12]
 8010596:	1d19      	adds	r1, r3, #4
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	9103      	str	r1, [sp, #12]
 801059c:	2b00      	cmp	r3, #0
 801059e:	bfbb      	ittet	lt
 80105a0:	425b      	neglt	r3, r3
 80105a2:	f042 0202 	orrlt.w	r2, r2, #2
 80105a6:	9307      	strge	r3, [sp, #28]
 80105a8:	9307      	strlt	r3, [sp, #28]
 80105aa:	bfb8      	it	lt
 80105ac:	9204      	strlt	r2, [sp, #16]
 80105ae:	7823      	ldrb	r3, [r4, #0]
 80105b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80105b2:	d10a      	bne.n	80105ca <_vfiprintf_r+0x156>
 80105b4:	7863      	ldrb	r3, [r4, #1]
 80105b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80105b8:	d132      	bne.n	8010620 <_vfiprintf_r+0x1ac>
 80105ba:	9b03      	ldr	r3, [sp, #12]
 80105bc:	1d1a      	adds	r2, r3, #4
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	9203      	str	r2, [sp, #12]
 80105c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105c6:	3402      	adds	r4, #2
 80105c8:	9305      	str	r3, [sp, #20]
 80105ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80106a0 <_vfiprintf_r+0x22c>
 80105ce:	7821      	ldrb	r1, [r4, #0]
 80105d0:	2203      	movs	r2, #3
 80105d2:	4650      	mov	r0, sl
 80105d4:	f7ef fdfc 	bl	80001d0 <memchr>
 80105d8:	b138      	cbz	r0, 80105ea <_vfiprintf_r+0x176>
 80105da:	9b04      	ldr	r3, [sp, #16]
 80105dc:	eba0 000a 	sub.w	r0, r0, sl
 80105e0:	2240      	movs	r2, #64	@ 0x40
 80105e2:	4082      	lsls	r2, r0
 80105e4:	4313      	orrs	r3, r2
 80105e6:	3401      	adds	r4, #1
 80105e8:	9304      	str	r3, [sp, #16]
 80105ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105ee:	4829      	ldr	r0, [pc, #164]	@ (8010694 <_vfiprintf_r+0x220>)
 80105f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105f4:	2206      	movs	r2, #6
 80105f6:	f7ef fdeb 	bl	80001d0 <memchr>
 80105fa:	2800      	cmp	r0, #0
 80105fc:	d03f      	beq.n	801067e <_vfiprintf_r+0x20a>
 80105fe:	4b26      	ldr	r3, [pc, #152]	@ (8010698 <_vfiprintf_r+0x224>)
 8010600:	bb1b      	cbnz	r3, 801064a <_vfiprintf_r+0x1d6>
 8010602:	9b03      	ldr	r3, [sp, #12]
 8010604:	3307      	adds	r3, #7
 8010606:	f023 0307 	bic.w	r3, r3, #7
 801060a:	3308      	adds	r3, #8
 801060c:	9303      	str	r3, [sp, #12]
 801060e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010610:	443b      	add	r3, r7
 8010612:	9309      	str	r3, [sp, #36]	@ 0x24
 8010614:	e76a      	b.n	80104ec <_vfiprintf_r+0x78>
 8010616:	fb0c 3202 	mla	r2, ip, r2, r3
 801061a:	460c      	mov	r4, r1
 801061c:	2001      	movs	r0, #1
 801061e:	e7a8      	b.n	8010572 <_vfiprintf_r+0xfe>
 8010620:	2300      	movs	r3, #0
 8010622:	3401      	adds	r4, #1
 8010624:	9305      	str	r3, [sp, #20]
 8010626:	4619      	mov	r1, r3
 8010628:	f04f 0c0a 	mov.w	ip, #10
 801062c:	4620      	mov	r0, r4
 801062e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010632:	3a30      	subs	r2, #48	@ 0x30
 8010634:	2a09      	cmp	r2, #9
 8010636:	d903      	bls.n	8010640 <_vfiprintf_r+0x1cc>
 8010638:	2b00      	cmp	r3, #0
 801063a:	d0c6      	beq.n	80105ca <_vfiprintf_r+0x156>
 801063c:	9105      	str	r1, [sp, #20]
 801063e:	e7c4      	b.n	80105ca <_vfiprintf_r+0x156>
 8010640:	fb0c 2101 	mla	r1, ip, r1, r2
 8010644:	4604      	mov	r4, r0
 8010646:	2301      	movs	r3, #1
 8010648:	e7f0      	b.n	801062c <_vfiprintf_r+0x1b8>
 801064a:	ab03      	add	r3, sp, #12
 801064c:	9300      	str	r3, [sp, #0]
 801064e:	462a      	mov	r2, r5
 8010650:	4b12      	ldr	r3, [pc, #72]	@ (801069c <_vfiprintf_r+0x228>)
 8010652:	a904      	add	r1, sp, #16
 8010654:	4630      	mov	r0, r6
 8010656:	f3af 8000 	nop.w
 801065a:	4607      	mov	r7, r0
 801065c:	1c78      	adds	r0, r7, #1
 801065e:	d1d6      	bne.n	801060e <_vfiprintf_r+0x19a>
 8010660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010662:	07d9      	lsls	r1, r3, #31
 8010664:	d405      	bmi.n	8010672 <_vfiprintf_r+0x1fe>
 8010666:	89ab      	ldrh	r3, [r5, #12]
 8010668:	059a      	lsls	r2, r3, #22
 801066a:	d402      	bmi.n	8010672 <_vfiprintf_r+0x1fe>
 801066c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801066e:	f7ff fd9b 	bl	80101a8 <__retarget_lock_release_recursive>
 8010672:	89ab      	ldrh	r3, [r5, #12]
 8010674:	065b      	lsls	r3, r3, #25
 8010676:	f53f af1f 	bmi.w	80104b8 <_vfiprintf_r+0x44>
 801067a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801067c:	e71e      	b.n	80104bc <_vfiprintf_r+0x48>
 801067e:	ab03      	add	r3, sp, #12
 8010680:	9300      	str	r3, [sp, #0]
 8010682:	462a      	mov	r2, r5
 8010684:	4b05      	ldr	r3, [pc, #20]	@ (801069c <_vfiprintf_r+0x228>)
 8010686:	a904      	add	r1, sp, #16
 8010688:	4630      	mov	r0, r6
 801068a:	f000 f879 	bl	8010780 <_printf_i>
 801068e:	e7e4      	b.n	801065a <_vfiprintf_r+0x1e6>
 8010690:	08010ed7 	.word	0x08010ed7
 8010694:	08010ee1 	.word	0x08010ee1
 8010698:	00000000 	.word	0x00000000
 801069c:	08010451 	.word	0x08010451
 80106a0:	08010edd 	.word	0x08010edd

080106a4 <_printf_common>:
 80106a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106a8:	4616      	mov	r6, r2
 80106aa:	4698      	mov	r8, r3
 80106ac:	688a      	ldr	r2, [r1, #8]
 80106ae:	690b      	ldr	r3, [r1, #16]
 80106b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80106b4:	4293      	cmp	r3, r2
 80106b6:	bfb8      	it	lt
 80106b8:	4613      	movlt	r3, r2
 80106ba:	6033      	str	r3, [r6, #0]
 80106bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80106c0:	4607      	mov	r7, r0
 80106c2:	460c      	mov	r4, r1
 80106c4:	b10a      	cbz	r2, 80106ca <_printf_common+0x26>
 80106c6:	3301      	adds	r3, #1
 80106c8:	6033      	str	r3, [r6, #0]
 80106ca:	6823      	ldr	r3, [r4, #0]
 80106cc:	0699      	lsls	r1, r3, #26
 80106ce:	bf42      	ittt	mi
 80106d0:	6833      	ldrmi	r3, [r6, #0]
 80106d2:	3302      	addmi	r3, #2
 80106d4:	6033      	strmi	r3, [r6, #0]
 80106d6:	6825      	ldr	r5, [r4, #0]
 80106d8:	f015 0506 	ands.w	r5, r5, #6
 80106dc:	d106      	bne.n	80106ec <_printf_common+0x48>
 80106de:	f104 0a19 	add.w	sl, r4, #25
 80106e2:	68e3      	ldr	r3, [r4, #12]
 80106e4:	6832      	ldr	r2, [r6, #0]
 80106e6:	1a9b      	subs	r3, r3, r2
 80106e8:	42ab      	cmp	r3, r5
 80106ea:	dc26      	bgt.n	801073a <_printf_common+0x96>
 80106ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80106f0:	6822      	ldr	r2, [r4, #0]
 80106f2:	3b00      	subs	r3, #0
 80106f4:	bf18      	it	ne
 80106f6:	2301      	movne	r3, #1
 80106f8:	0692      	lsls	r2, r2, #26
 80106fa:	d42b      	bmi.n	8010754 <_printf_common+0xb0>
 80106fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010700:	4641      	mov	r1, r8
 8010702:	4638      	mov	r0, r7
 8010704:	47c8      	blx	r9
 8010706:	3001      	adds	r0, #1
 8010708:	d01e      	beq.n	8010748 <_printf_common+0xa4>
 801070a:	6823      	ldr	r3, [r4, #0]
 801070c:	6922      	ldr	r2, [r4, #16]
 801070e:	f003 0306 	and.w	r3, r3, #6
 8010712:	2b04      	cmp	r3, #4
 8010714:	bf02      	ittt	eq
 8010716:	68e5      	ldreq	r5, [r4, #12]
 8010718:	6833      	ldreq	r3, [r6, #0]
 801071a:	1aed      	subeq	r5, r5, r3
 801071c:	68a3      	ldr	r3, [r4, #8]
 801071e:	bf0c      	ite	eq
 8010720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010724:	2500      	movne	r5, #0
 8010726:	4293      	cmp	r3, r2
 8010728:	bfc4      	itt	gt
 801072a:	1a9b      	subgt	r3, r3, r2
 801072c:	18ed      	addgt	r5, r5, r3
 801072e:	2600      	movs	r6, #0
 8010730:	341a      	adds	r4, #26
 8010732:	42b5      	cmp	r5, r6
 8010734:	d11a      	bne.n	801076c <_printf_common+0xc8>
 8010736:	2000      	movs	r0, #0
 8010738:	e008      	b.n	801074c <_printf_common+0xa8>
 801073a:	2301      	movs	r3, #1
 801073c:	4652      	mov	r2, sl
 801073e:	4641      	mov	r1, r8
 8010740:	4638      	mov	r0, r7
 8010742:	47c8      	blx	r9
 8010744:	3001      	adds	r0, #1
 8010746:	d103      	bne.n	8010750 <_printf_common+0xac>
 8010748:	f04f 30ff 	mov.w	r0, #4294967295
 801074c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010750:	3501      	adds	r5, #1
 8010752:	e7c6      	b.n	80106e2 <_printf_common+0x3e>
 8010754:	18e1      	adds	r1, r4, r3
 8010756:	1c5a      	adds	r2, r3, #1
 8010758:	2030      	movs	r0, #48	@ 0x30
 801075a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801075e:	4422      	add	r2, r4
 8010760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010768:	3302      	adds	r3, #2
 801076a:	e7c7      	b.n	80106fc <_printf_common+0x58>
 801076c:	2301      	movs	r3, #1
 801076e:	4622      	mov	r2, r4
 8010770:	4641      	mov	r1, r8
 8010772:	4638      	mov	r0, r7
 8010774:	47c8      	blx	r9
 8010776:	3001      	adds	r0, #1
 8010778:	d0e6      	beq.n	8010748 <_printf_common+0xa4>
 801077a:	3601      	adds	r6, #1
 801077c:	e7d9      	b.n	8010732 <_printf_common+0x8e>
	...

08010780 <_printf_i>:
 8010780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010784:	7e0f      	ldrb	r7, [r1, #24]
 8010786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010788:	2f78      	cmp	r7, #120	@ 0x78
 801078a:	4691      	mov	r9, r2
 801078c:	4680      	mov	r8, r0
 801078e:	460c      	mov	r4, r1
 8010790:	469a      	mov	sl, r3
 8010792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010796:	d807      	bhi.n	80107a8 <_printf_i+0x28>
 8010798:	2f62      	cmp	r7, #98	@ 0x62
 801079a:	d80a      	bhi.n	80107b2 <_printf_i+0x32>
 801079c:	2f00      	cmp	r7, #0
 801079e:	f000 80d2 	beq.w	8010946 <_printf_i+0x1c6>
 80107a2:	2f58      	cmp	r7, #88	@ 0x58
 80107a4:	f000 80b9 	beq.w	801091a <_printf_i+0x19a>
 80107a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80107b0:	e03a      	b.n	8010828 <_printf_i+0xa8>
 80107b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80107b6:	2b15      	cmp	r3, #21
 80107b8:	d8f6      	bhi.n	80107a8 <_printf_i+0x28>
 80107ba:	a101      	add	r1, pc, #4	@ (adr r1, 80107c0 <_printf_i+0x40>)
 80107bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107c0:	08010819 	.word	0x08010819
 80107c4:	0801082d 	.word	0x0801082d
 80107c8:	080107a9 	.word	0x080107a9
 80107cc:	080107a9 	.word	0x080107a9
 80107d0:	080107a9 	.word	0x080107a9
 80107d4:	080107a9 	.word	0x080107a9
 80107d8:	0801082d 	.word	0x0801082d
 80107dc:	080107a9 	.word	0x080107a9
 80107e0:	080107a9 	.word	0x080107a9
 80107e4:	080107a9 	.word	0x080107a9
 80107e8:	080107a9 	.word	0x080107a9
 80107ec:	0801092d 	.word	0x0801092d
 80107f0:	08010857 	.word	0x08010857
 80107f4:	080108e7 	.word	0x080108e7
 80107f8:	080107a9 	.word	0x080107a9
 80107fc:	080107a9 	.word	0x080107a9
 8010800:	0801094f 	.word	0x0801094f
 8010804:	080107a9 	.word	0x080107a9
 8010808:	08010857 	.word	0x08010857
 801080c:	080107a9 	.word	0x080107a9
 8010810:	080107a9 	.word	0x080107a9
 8010814:	080108ef 	.word	0x080108ef
 8010818:	6833      	ldr	r3, [r6, #0]
 801081a:	1d1a      	adds	r2, r3, #4
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	6032      	str	r2, [r6, #0]
 8010820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010828:	2301      	movs	r3, #1
 801082a:	e09d      	b.n	8010968 <_printf_i+0x1e8>
 801082c:	6833      	ldr	r3, [r6, #0]
 801082e:	6820      	ldr	r0, [r4, #0]
 8010830:	1d19      	adds	r1, r3, #4
 8010832:	6031      	str	r1, [r6, #0]
 8010834:	0606      	lsls	r6, r0, #24
 8010836:	d501      	bpl.n	801083c <_printf_i+0xbc>
 8010838:	681d      	ldr	r5, [r3, #0]
 801083a:	e003      	b.n	8010844 <_printf_i+0xc4>
 801083c:	0645      	lsls	r5, r0, #25
 801083e:	d5fb      	bpl.n	8010838 <_printf_i+0xb8>
 8010840:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010844:	2d00      	cmp	r5, #0
 8010846:	da03      	bge.n	8010850 <_printf_i+0xd0>
 8010848:	232d      	movs	r3, #45	@ 0x2d
 801084a:	426d      	negs	r5, r5
 801084c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010850:	4859      	ldr	r0, [pc, #356]	@ (80109b8 <_printf_i+0x238>)
 8010852:	230a      	movs	r3, #10
 8010854:	e011      	b.n	801087a <_printf_i+0xfa>
 8010856:	6821      	ldr	r1, [r4, #0]
 8010858:	6833      	ldr	r3, [r6, #0]
 801085a:	0608      	lsls	r0, r1, #24
 801085c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010860:	d402      	bmi.n	8010868 <_printf_i+0xe8>
 8010862:	0649      	lsls	r1, r1, #25
 8010864:	bf48      	it	mi
 8010866:	b2ad      	uxthmi	r5, r5
 8010868:	2f6f      	cmp	r7, #111	@ 0x6f
 801086a:	4853      	ldr	r0, [pc, #332]	@ (80109b8 <_printf_i+0x238>)
 801086c:	6033      	str	r3, [r6, #0]
 801086e:	bf14      	ite	ne
 8010870:	230a      	movne	r3, #10
 8010872:	2308      	moveq	r3, #8
 8010874:	2100      	movs	r1, #0
 8010876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801087a:	6866      	ldr	r6, [r4, #4]
 801087c:	60a6      	str	r6, [r4, #8]
 801087e:	2e00      	cmp	r6, #0
 8010880:	bfa2      	ittt	ge
 8010882:	6821      	ldrge	r1, [r4, #0]
 8010884:	f021 0104 	bicge.w	r1, r1, #4
 8010888:	6021      	strge	r1, [r4, #0]
 801088a:	b90d      	cbnz	r5, 8010890 <_printf_i+0x110>
 801088c:	2e00      	cmp	r6, #0
 801088e:	d04b      	beq.n	8010928 <_printf_i+0x1a8>
 8010890:	4616      	mov	r6, r2
 8010892:	fbb5 f1f3 	udiv	r1, r5, r3
 8010896:	fb03 5711 	mls	r7, r3, r1, r5
 801089a:	5dc7      	ldrb	r7, [r0, r7]
 801089c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80108a0:	462f      	mov	r7, r5
 80108a2:	42bb      	cmp	r3, r7
 80108a4:	460d      	mov	r5, r1
 80108a6:	d9f4      	bls.n	8010892 <_printf_i+0x112>
 80108a8:	2b08      	cmp	r3, #8
 80108aa:	d10b      	bne.n	80108c4 <_printf_i+0x144>
 80108ac:	6823      	ldr	r3, [r4, #0]
 80108ae:	07df      	lsls	r7, r3, #31
 80108b0:	d508      	bpl.n	80108c4 <_printf_i+0x144>
 80108b2:	6923      	ldr	r3, [r4, #16]
 80108b4:	6861      	ldr	r1, [r4, #4]
 80108b6:	4299      	cmp	r1, r3
 80108b8:	bfde      	ittt	le
 80108ba:	2330      	movle	r3, #48	@ 0x30
 80108bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80108c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80108c4:	1b92      	subs	r2, r2, r6
 80108c6:	6122      	str	r2, [r4, #16]
 80108c8:	f8cd a000 	str.w	sl, [sp]
 80108cc:	464b      	mov	r3, r9
 80108ce:	aa03      	add	r2, sp, #12
 80108d0:	4621      	mov	r1, r4
 80108d2:	4640      	mov	r0, r8
 80108d4:	f7ff fee6 	bl	80106a4 <_printf_common>
 80108d8:	3001      	adds	r0, #1
 80108da:	d14a      	bne.n	8010972 <_printf_i+0x1f2>
 80108dc:	f04f 30ff 	mov.w	r0, #4294967295
 80108e0:	b004      	add	sp, #16
 80108e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108e6:	6823      	ldr	r3, [r4, #0]
 80108e8:	f043 0320 	orr.w	r3, r3, #32
 80108ec:	6023      	str	r3, [r4, #0]
 80108ee:	4833      	ldr	r0, [pc, #204]	@ (80109bc <_printf_i+0x23c>)
 80108f0:	2778      	movs	r7, #120	@ 0x78
 80108f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80108f6:	6823      	ldr	r3, [r4, #0]
 80108f8:	6831      	ldr	r1, [r6, #0]
 80108fa:	061f      	lsls	r7, r3, #24
 80108fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8010900:	d402      	bmi.n	8010908 <_printf_i+0x188>
 8010902:	065f      	lsls	r7, r3, #25
 8010904:	bf48      	it	mi
 8010906:	b2ad      	uxthmi	r5, r5
 8010908:	6031      	str	r1, [r6, #0]
 801090a:	07d9      	lsls	r1, r3, #31
 801090c:	bf44      	itt	mi
 801090e:	f043 0320 	orrmi.w	r3, r3, #32
 8010912:	6023      	strmi	r3, [r4, #0]
 8010914:	b11d      	cbz	r5, 801091e <_printf_i+0x19e>
 8010916:	2310      	movs	r3, #16
 8010918:	e7ac      	b.n	8010874 <_printf_i+0xf4>
 801091a:	4827      	ldr	r0, [pc, #156]	@ (80109b8 <_printf_i+0x238>)
 801091c:	e7e9      	b.n	80108f2 <_printf_i+0x172>
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	f023 0320 	bic.w	r3, r3, #32
 8010924:	6023      	str	r3, [r4, #0]
 8010926:	e7f6      	b.n	8010916 <_printf_i+0x196>
 8010928:	4616      	mov	r6, r2
 801092a:	e7bd      	b.n	80108a8 <_printf_i+0x128>
 801092c:	6833      	ldr	r3, [r6, #0]
 801092e:	6825      	ldr	r5, [r4, #0]
 8010930:	6961      	ldr	r1, [r4, #20]
 8010932:	1d18      	adds	r0, r3, #4
 8010934:	6030      	str	r0, [r6, #0]
 8010936:	062e      	lsls	r6, r5, #24
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	d501      	bpl.n	8010940 <_printf_i+0x1c0>
 801093c:	6019      	str	r1, [r3, #0]
 801093e:	e002      	b.n	8010946 <_printf_i+0x1c6>
 8010940:	0668      	lsls	r0, r5, #25
 8010942:	d5fb      	bpl.n	801093c <_printf_i+0x1bc>
 8010944:	8019      	strh	r1, [r3, #0]
 8010946:	2300      	movs	r3, #0
 8010948:	6123      	str	r3, [r4, #16]
 801094a:	4616      	mov	r6, r2
 801094c:	e7bc      	b.n	80108c8 <_printf_i+0x148>
 801094e:	6833      	ldr	r3, [r6, #0]
 8010950:	1d1a      	adds	r2, r3, #4
 8010952:	6032      	str	r2, [r6, #0]
 8010954:	681e      	ldr	r6, [r3, #0]
 8010956:	6862      	ldr	r2, [r4, #4]
 8010958:	2100      	movs	r1, #0
 801095a:	4630      	mov	r0, r6
 801095c:	f7ef fc38 	bl	80001d0 <memchr>
 8010960:	b108      	cbz	r0, 8010966 <_printf_i+0x1e6>
 8010962:	1b80      	subs	r0, r0, r6
 8010964:	6060      	str	r0, [r4, #4]
 8010966:	6863      	ldr	r3, [r4, #4]
 8010968:	6123      	str	r3, [r4, #16]
 801096a:	2300      	movs	r3, #0
 801096c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010970:	e7aa      	b.n	80108c8 <_printf_i+0x148>
 8010972:	6923      	ldr	r3, [r4, #16]
 8010974:	4632      	mov	r2, r6
 8010976:	4649      	mov	r1, r9
 8010978:	4640      	mov	r0, r8
 801097a:	47d0      	blx	sl
 801097c:	3001      	adds	r0, #1
 801097e:	d0ad      	beq.n	80108dc <_printf_i+0x15c>
 8010980:	6823      	ldr	r3, [r4, #0]
 8010982:	079b      	lsls	r3, r3, #30
 8010984:	d413      	bmi.n	80109ae <_printf_i+0x22e>
 8010986:	68e0      	ldr	r0, [r4, #12]
 8010988:	9b03      	ldr	r3, [sp, #12]
 801098a:	4298      	cmp	r0, r3
 801098c:	bfb8      	it	lt
 801098e:	4618      	movlt	r0, r3
 8010990:	e7a6      	b.n	80108e0 <_printf_i+0x160>
 8010992:	2301      	movs	r3, #1
 8010994:	4632      	mov	r2, r6
 8010996:	4649      	mov	r1, r9
 8010998:	4640      	mov	r0, r8
 801099a:	47d0      	blx	sl
 801099c:	3001      	adds	r0, #1
 801099e:	d09d      	beq.n	80108dc <_printf_i+0x15c>
 80109a0:	3501      	adds	r5, #1
 80109a2:	68e3      	ldr	r3, [r4, #12]
 80109a4:	9903      	ldr	r1, [sp, #12]
 80109a6:	1a5b      	subs	r3, r3, r1
 80109a8:	42ab      	cmp	r3, r5
 80109aa:	dcf2      	bgt.n	8010992 <_printf_i+0x212>
 80109ac:	e7eb      	b.n	8010986 <_printf_i+0x206>
 80109ae:	2500      	movs	r5, #0
 80109b0:	f104 0619 	add.w	r6, r4, #25
 80109b4:	e7f5      	b.n	80109a2 <_printf_i+0x222>
 80109b6:	bf00      	nop
 80109b8:	08010ee8 	.word	0x08010ee8
 80109bc:	08010ef9 	.word	0x08010ef9

080109c0 <__swbuf_r>:
 80109c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109c2:	460e      	mov	r6, r1
 80109c4:	4614      	mov	r4, r2
 80109c6:	4605      	mov	r5, r0
 80109c8:	b118      	cbz	r0, 80109d2 <__swbuf_r+0x12>
 80109ca:	6a03      	ldr	r3, [r0, #32]
 80109cc:	b90b      	cbnz	r3, 80109d2 <__swbuf_r+0x12>
 80109ce:	f7ff fae7 	bl	800ffa0 <__sinit>
 80109d2:	69a3      	ldr	r3, [r4, #24]
 80109d4:	60a3      	str	r3, [r4, #8]
 80109d6:	89a3      	ldrh	r3, [r4, #12]
 80109d8:	071a      	lsls	r2, r3, #28
 80109da:	d501      	bpl.n	80109e0 <__swbuf_r+0x20>
 80109dc:	6923      	ldr	r3, [r4, #16]
 80109de:	b943      	cbnz	r3, 80109f2 <__swbuf_r+0x32>
 80109e0:	4621      	mov	r1, r4
 80109e2:	4628      	mov	r0, r5
 80109e4:	f000 f82a 	bl	8010a3c <__swsetup_r>
 80109e8:	b118      	cbz	r0, 80109f2 <__swbuf_r+0x32>
 80109ea:	f04f 37ff 	mov.w	r7, #4294967295
 80109ee:	4638      	mov	r0, r7
 80109f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109f2:	6823      	ldr	r3, [r4, #0]
 80109f4:	6922      	ldr	r2, [r4, #16]
 80109f6:	1a98      	subs	r0, r3, r2
 80109f8:	6963      	ldr	r3, [r4, #20]
 80109fa:	b2f6      	uxtb	r6, r6
 80109fc:	4283      	cmp	r3, r0
 80109fe:	4637      	mov	r7, r6
 8010a00:	dc05      	bgt.n	8010a0e <__swbuf_r+0x4e>
 8010a02:	4621      	mov	r1, r4
 8010a04:	4628      	mov	r0, r5
 8010a06:	f7ff fccb 	bl	80103a0 <_fflush_r>
 8010a0a:	2800      	cmp	r0, #0
 8010a0c:	d1ed      	bne.n	80109ea <__swbuf_r+0x2a>
 8010a0e:	68a3      	ldr	r3, [r4, #8]
 8010a10:	3b01      	subs	r3, #1
 8010a12:	60a3      	str	r3, [r4, #8]
 8010a14:	6823      	ldr	r3, [r4, #0]
 8010a16:	1c5a      	adds	r2, r3, #1
 8010a18:	6022      	str	r2, [r4, #0]
 8010a1a:	701e      	strb	r6, [r3, #0]
 8010a1c:	6962      	ldr	r2, [r4, #20]
 8010a1e:	1c43      	adds	r3, r0, #1
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d004      	beq.n	8010a2e <__swbuf_r+0x6e>
 8010a24:	89a3      	ldrh	r3, [r4, #12]
 8010a26:	07db      	lsls	r3, r3, #31
 8010a28:	d5e1      	bpl.n	80109ee <__swbuf_r+0x2e>
 8010a2a:	2e0a      	cmp	r6, #10
 8010a2c:	d1df      	bne.n	80109ee <__swbuf_r+0x2e>
 8010a2e:	4621      	mov	r1, r4
 8010a30:	4628      	mov	r0, r5
 8010a32:	f7ff fcb5 	bl	80103a0 <_fflush_r>
 8010a36:	2800      	cmp	r0, #0
 8010a38:	d0d9      	beq.n	80109ee <__swbuf_r+0x2e>
 8010a3a:	e7d6      	b.n	80109ea <__swbuf_r+0x2a>

08010a3c <__swsetup_r>:
 8010a3c:	b538      	push	{r3, r4, r5, lr}
 8010a3e:	4b29      	ldr	r3, [pc, #164]	@ (8010ae4 <__swsetup_r+0xa8>)
 8010a40:	4605      	mov	r5, r0
 8010a42:	6818      	ldr	r0, [r3, #0]
 8010a44:	460c      	mov	r4, r1
 8010a46:	b118      	cbz	r0, 8010a50 <__swsetup_r+0x14>
 8010a48:	6a03      	ldr	r3, [r0, #32]
 8010a4a:	b90b      	cbnz	r3, 8010a50 <__swsetup_r+0x14>
 8010a4c:	f7ff faa8 	bl	800ffa0 <__sinit>
 8010a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a54:	0719      	lsls	r1, r3, #28
 8010a56:	d422      	bmi.n	8010a9e <__swsetup_r+0x62>
 8010a58:	06da      	lsls	r2, r3, #27
 8010a5a:	d407      	bmi.n	8010a6c <__swsetup_r+0x30>
 8010a5c:	2209      	movs	r2, #9
 8010a5e:	602a      	str	r2, [r5, #0]
 8010a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a64:	81a3      	strh	r3, [r4, #12]
 8010a66:	f04f 30ff 	mov.w	r0, #4294967295
 8010a6a:	e033      	b.n	8010ad4 <__swsetup_r+0x98>
 8010a6c:	0758      	lsls	r0, r3, #29
 8010a6e:	d512      	bpl.n	8010a96 <__swsetup_r+0x5a>
 8010a70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a72:	b141      	cbz	r1, 8010a86 <__swsetup_r+0x4a>
 8010a74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a78:	4299      	cmp	r1, r3
 8010a7a:	d002      	beq.n	8010a82 <__swsetup_r+0x46>
 8010a7c:	4628      	mov	r0, r5
 8010a7e:	f7ff fbc1 	bl	8010204 <_free_r>
 8010a82:	2300      	movs	r3, #0
 8010a84:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a86:	89a3      	ldrh	r3, [r4, #12]
 8010a88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010a8c:	81a3      	strh	r3, [r4, #12]
 8010a8e:	2300      	movs	r3, #0
 8010a90:	6063      	str	r3, [r4, #4]
 8010a92:	6923      	ldr	r3, [r4, #16]
 8010a94:	6023      	str	r3, [r4, #0]
 8010a96:	89a3      	ldrh	r3, [r4, #12]
 8010a98:	f043 0308 	orr.w	r3, r3, #8
 8010a9c:	81a3      	strh	r3, [r4, #12]
 8010a9e:	6923      	ldr	r3, [r4, #16]
 8010aa0:	b94b      	cbnz	r3, 8010ab6 <__swsetup_r+0x7a>
 8010aa2:	89a3      	ldrh	r3, [r4, #12]
 8010aa4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010aac:	d003      	beq.n	8010ab6 <__swsetup_r+0x7a>
 8010aae:	4621      	mov	r1, r4
 8010ab0:	4628      	mov	r0, r5
 8010ab2:	f000 f883 	bl	8010bbc <__smakebuf_r>
 8010ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010aba:	f013 0201 	ands.w	r2, r3, #1
 8010abe:	d00a      	beq.n	8010ad6 <__swsetup_r+0x9a>
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	60a2      	str	r2, [r4, #8]
 8010ac4:	6962      	ldr	r2, [r4, #20]
 8010ac6:	4252      	negs	r2, r2
 8010ac8:	61a2      	str	r2, [r4, #24]
 8010aca:	6922      	ldr	r2, [r4, #16]
 8010acc:	b942      	cbnz	r2, 8010ae0 <__swsetup_r+0xa4>
 8010ace:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010ad2:	d1c5      	bne.n	8010a60 <__swsetup_r+0x24>
 8010ad4:	bd38      	pop	{r3, r4, r5, pc}
 8010ad6:	0799      	lsls	r1, r3, #30
 8010ad8:	bf58      	it	pl
 8010ada:	6962      	ldrpl	r2, [r4, #20]
 8010adc:	60a2      	str	r2, [r4, #8]
 8010ade:	e7f4      	b.n	8010aca <__swsetup_r+0x8e>
 8010ae0:	2000      	movs	r0, #0
 8010ae2:	e7f7      	b.n	8010ad4 <__swsetup_r+0x98>
 8010ae4:	2000005c 	.word	0x2000005c

08010ae8 <_raise_r>:
 8010ae8:	291f      	cmp	r1, #31
 8010aea:	b538      	push	{r3, r4, r5, lr}
 8010aec:	4605      	mov	r5, r0
 8010aee:	460c      	mov	r4, r1
 8010af0:	d904      	bls.n	8010afc <_raise_r+0x14>
 8010af2:	2316      	movs	r3, #22
 8010af4:	6003      	str	r3, [r0, #0]
 8010af6:	f04f 30ff 	mov.w	r0, #4294967295
 8010afa:	bd38      	pop	{r3, r4, r5, pc}
 8010afc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010afe:	b112      	cbz	r2, 8010b06 <_raise_r+0x1e>
 8010b00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b04:	b94b      	cbnz	r3, 8010b1a <_raise_r+0x32>
 8010b06:	4628      	mov	r0, r5
 8010b08:	f000 f830 	bl	8010b6c <_getpid_r>
 8010b0c:	4622      	mov	r2, r4
 8010b0e:	4601      	mov	r1, r0
 8010b10:	4628      	mov	r0, r5
 8010b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b16:	f000 b817 	b.w	8010b48 <_kill_r>
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	d00a      	beq.n	8010b34 <_raise_r+0x4c>
 8010b1e:	1c59      	adds	r1, r3, #1
 8010b20:	d103      	bne.n	8010b2a <_raise_r+0x42>
 8010b22:	2316      	movs	r3, #22
 8010b24:	6003      	str	r3, [r0, #0]
 8010b26:	2001      	movs	r0, #1
 8010b28:	e7e7      	b.n	8010afa <_raise_r+0x12>
 8010b2a:	2100      	movs	r1, #0
 8010b2c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010b30:	4620      	mov	r0, r4
 8010b32:	4798      	blx	r3
 8010b34:	2000      	movs	r0, #0
 8010b36:	e7e0      	b.n	8010afa <_raise_r+0x12>

08010b38 <raise>:
 8010b38:	4b02      	ldr	r3, [pc, #8]	@ (8010b44 <raise+0xc>)
 8010b3a:	4601      	mov	r1, r0
 8010b3c:	6818      	ldr	r0, [r3, #0]
 8010b3e:	f7ff bfd3 	b.w	8010ae8 <_raise_r>
 8010b42:	bf00      	nop
 8010b44:	2000005c 	.word	0x2000005c

08010b48 <_kill_r>:
 8010b48:	b538      	push	{r3, r4, r5, lr}
 8010b4a:	4d07      	ldr	r5, [pc, #28]	@ (8010b68 <_kill_r+0x20>)
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	4604      	mov	r4, r0
 8010b50:	4608      	mov	r0, r1
 8010b52:	4611      	mov	r1, r2
 8010b54:	602b      	str	r3, [r5, #0]
 8010b56:	f7f0 ff4b 	bl	80019f0 <_kill>
 8010b5a:	1c43      	adds	r3, r0, #1
 8010b5c:	d102      	bne.n	8010b64 <_kill_r+0x1c>
 8010b5e:	682b      	ldr	r3, [r5, #0]
 8010b60:	b103      	cbz	r3, 8010b64 <_kill_r+0x1c>
 8010b62:	6023      	str	r3, [r4, #0]
 8010b64:	bd38      	pop	{r3, r4, r5, pc}
 8010b66:	bf00      	nop
 8010b68:	200094fc 	.word	0x200094fc

08010b6c <_getpid_r>:
 8010b6c:	f7f0 bf38 	b.w	80019e0 <_getpid>

08010b70 <__swhatbuf_r>:
 8010b70:	b570      	push	{r4, r5, r6, lr}
 8010b72:	460c      	mov	r4, r1
 8010b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b78:	2900      	cmp	r1, #0
 8010b7a:	b096      	sub	sp, #88	@ 0x58
 8010b7c:	4615      	mov	r5, r2
 8010b7e:	461e      	mov	r6, r3
 8010b80:	da0d      	bge.n	8010b9e <__swhatbuf_r+0x2e>
 8010b82:	89a3      	ldrh	r3, [r4, #12]
 8010b84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010b88:	f04f 0100 	mov.w	r1, #0
 8010b8c:	bf14      	ite	ne
 8010b8e:	2340      	movne	r3, #64	@ 0x40
 8010b90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010b94:	2000      	movs	r0, #0
 8010b96:	6031      	str	r1, [r6, #0]
 8010b98:	602b      	str	r3, [r5, #0]
 8010b9a:	b016      	add	sp, #88	@ 0x58
 8010b9c:	bd70      	pop	{r4, r5, r6, pc}
 8010b9e:	466a      	mov	r2, sp
 8010ba0:	f000 f848 	bl	8010c34 <_fstat_r>
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	dbec      	blt.n	8010b82 <__swhatbuf_r+0x12>
 8010ba8:	9901      	ldr	r1, [sp, #4]
 8010baa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010bae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010bb2:	4259      	negs	r1, r3
 8010bb4:	4159      	adcs	r1, r3
 8010bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010bba:	e7eb      	b.n	8010b94 <__swhatbuf_r+0x24>

08010bbc <__smakebuf_r>:
 8010bbc:	898b      	ldrh	r3, [r1, #12]
 8010bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010bc0:	079d      	lsls	r5, r3, #30
 8010bc2:	4606      	mov	r6, r0
 8010bc4:	460c      	mov	r4, r1
 8010bc6:	d507      	bpl.n	8010bd8 <__smakebuf_r+0x1c>
 8010bc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010bcc:	6023      	str	r3, [r4, #0]
 8010bce:	6123      	str	r3, [r4, #16]
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	6163      	str	r3, [r4, #20]
 8010bd4:	b003      	add	sp, #12
 8010bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bd8:	ab01      	add	r3, sp, #4
 8010bda:	466a      	mov	r2, sp
 8010bdc:	f7ff ffc8 	bl	8010b70 <__swhatbuf_r>
 8010be0:	9f00      	ldr	r7, [sp, #0]
 8010be2:	4605      	mov	r5, r0
 8010be4:	4639      	mov	r1, r7
 8010be6:	4630      	mov	r0, r6
 8010be8:	f7ff f884 	bl	800fcf4 <_malloc_r>
 8010bec:	b948      	cbnz	r0, 8010c02 <__smakebuf_r+0x46>
 8010bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bf2:	059a      	lsls	r2, r3, #22
 8010bf4:	d4ee      	bmi.n	8010bd4 <__smakebuf_r+0x18>
 8010bf6:	f023 0303 	bic.w	r3, r3, #3
 8010bfa:	f043 0302 	orr.w	r3, r3, #2
 8010bfe:	81a3      	strh	r3, [r4, #12]
 8010c00:	e7e2      	b.n	8010bc8 <__smakebuf_r+0xc>
 8010c02:	89a3      	ldrh	r3, [r4, #12]
 8010c04:	6020      	str	r0, [r4, #0]
 8010c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c0a:	81a3      	strh	r3, [r4, #12]
 8010c0c:	9b01      	ldr	r3, [sp, #4]
 8010c0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010c12:	b15b      	cbz	r3, 8010c2c <__smakebuf_r+0x70>
 8010c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c18:	4630      	mov	r0, r6
 8010c1a:	f000 f81d 	bl	8010c58 <_isatty_r>
 8010c1e:	b128      	cbz	r0, 8010c2c <__smakebuf_r+0x70>
 8010c20:	89a3      	ldrh	r3, [r4, #12]
 8010c22:	f023 0303 	bic.w	r3, r3, #3
 8010c26:	f043 0301 	orr.w	r3, r3, #1
 8010c2a:	81a3      	strh	r3, [r4, #12]
 8010c2c:	89a3      	ldrh	r3, [r4, #12]
 8010c2e:	431d      	orrs	r5, r3
 8010c30:	81a5      	strh	r5, [r4, #12]
 8010c32:	e7cf      	b.n	8010bd4 <__smakebuf_r+0x18>

08010c34 <_fstat_r>:
 8010c34:	b538      	push	{r3, r4, r5, lr}
 8010c36:	4d07      	ldr	r5, [pc, #28]	@ (8010c54 <_fstat_r+0x20>)
 8010c38:	2300      	movs	r3, #0
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	4608      	mov	r0, r1
 8010c3e:	4611      	mov	r1, r2
 8010c40:	602b      	str	r3, [r5, #0]
 8010c42:	f7f0 ff35 	bl	8001ab0 <_fstat>
 8010c46:	1c43      	adds	r3, r0, #1
 8010c48:	d102      	bne.n	8010c50 <_fstat_r+0x1c>
 8010c4a:	682b      	ldr	r3, [r5, #0]
 8010c4c:	b103      	cbz	r3, 8010c50 <_fstat_r+0x1c>
 8010c4e:	6023      	str	r3, [r4, #0]
 8010c50:	bd38      	pop	{r3, r4, r5, pc}
 8010c52:	bf00      	nop
 8010c54:	200094fc 	.word	0x200094fc

08010c58 <_isatty_r>:
 8010c58:	b538      	push	{r3, r4, r5, lr}
 8010c5a:	4d06      	ldr	r5, [pc, #24]	@ (8010c74 <_isatty_r+0x1c>)
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	4604      	mov	r4, r0
 8010c60:	4608      	mov	r0, r1
 8010c62:	602b      	str	r3, [r5, #0]
 8010c64:	f7f0 ff34 	bl	8001ad0 <_isatty>
 8010c68:	1c43      	adds	r3, r0, #1
 8010c6a:	d102      	bne.n	8010c72 <_isatty_r+0x1a>
 8010c6c:	682b      	ldr	r3, [r5, #0]
 8010c6e:	b103      	cbz	r3, 8010c72 <_isatty_r+0x1a>
 8010c70:	6023      	str	r3, [r4, #0]
 8010c72:	bd38      	pop	{r3, r4, r5, pc}
 8010c74:	200094fc 	.word	0x200094fc

08010c78 <_init>:
 8010c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c7a:	bf00      	nop
 8010c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c7e:	bc08      	pop	{r3}
 8010c80:	469e      	mov	lr, r3
 8010c82:	4770      	bx	lr

08010c84 <_fini>:
 8010c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c86:	bf00      	nop
 8010c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c8a:	bc08      	pop	{r3}
 8010c8c:	469e      	mov	lr, r3
 8010c8e:	4770      	bx	lr
