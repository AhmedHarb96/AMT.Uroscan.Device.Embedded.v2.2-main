
UroScan_RTOS_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08011be4  08011be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e84  08011e84  000130ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011e84  08011e84  00012e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e8c  08011e8c  000130ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08011e8c  08011e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08011e98  08011e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08011ea4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000130ac  2**0
                  CONTENTS
 10 .bss          000094dc  200000b0  200000b0  000130b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000958c  2000958c  000130b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000130ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002afba  00000000  00000000  000130dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057d8  00000000  00000000  0003e096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e10  00000000  00000000  00043870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a896  00000000  00000000  00045680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000bcaf  00000000  00000000  0005ff16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0006bbc5  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000174e  00000000  00000000  0006bc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008a4c  00000000  00000000  0006d358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00075da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011bcc 	.word	0x08011bcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08011bcc 	.word	0x08011bcc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b988 	b.w	8000dd4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	468e      	mov	lr, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	4688      	mov	r8, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d962      	bls.n	8000bb8 <__udivmoddi4+0xdc>
 8000af2:	fab2 f682 	clz	r6, r2
 8000af6:	b14e      	cbz	r6, 8000b0c <__udivmoddi4+0x30>
 8000af8:	f1c6 0320 	rsb	r3, r6, #32
 8000afc:	fa01 f806 	lsl.w	r8, r1, r6
 8000b00:	fa20 f303 	lsr.w	r3, r0, r3
 8000b04:	40b7      	lsls	r7, r6
 8000b06:	ea43 0808 	orr.w	r8, r3, r8
 8000b0a:	40b4      	lsls	r4, r6
 8000b0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b10:	fa1f fc87 	uxth.w	ip, r7
 8000b14:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b18:	0c23      	lsrs	r3, r4, #16
 8000b1a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b22:	fb01 f20c 	mul.w	r2, r1, ip
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b30:	f080 80ea 	bcs.w	8000d08 <__udivmoddi4+0x22c>
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f240 80e7 	bls.w	8000d08 <__udivmoddi4+0x22c>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	443b      	add	r3, r7
 8000b3e:	1a9a      	subs	r2, r3, r2
 8000b40:	b2a3      	uxth	r3, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b52:	459c      	cmp	ip, r3
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x8e>
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5c:	f080 80d6 	bcs.w	8000d0c <__udivmoddi4+0x230>
 8000b60:	459c      	cmp	ip, r3
 8000b62:	f240 80d3 	bls.w	8000d0c <__udivmoddi4+0x230>
 8000b66:	443b      	add	r3, r7
 8000b68:	3802      	subs	r0, #2
 8000b6a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b6e:	eba3 030c 	sub.w	r3, r3, ip
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11d      	cbz	r5, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40f3      	lsrs	r3, r6
 8000b78:	2200      	movs	r2, #0
 8000b7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d905      	bls.n	8000b92 <__udivmoddi4+0xb6>
 8000b86:	b10d      	cbz	r5, 8000b8c <__udivmoddi4+0xb0>
 8000b88:	e9c5 0100 	strd	r0, r1, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e7f5      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000b92:	fab3 f183 	clz	r1, r3
 8000b96:	2900      	cmp	r1, #0
 8000b98:	d146      	bne.n	8000c28 <__udivmoddi4+0x14c>
 8000b9a:	4573      	cmp	r3, lr
 8000b9c:	d302      	bcc.n	8000ba4 <__udivmoddi4+0xc8>
 8000b9e:	4282      	cmp	r2, r0
 8000ba0:	f200 8105 	bhi.w	8000dae <__udivmoddi4+0x2d2>
 8000ba4:	1a84      	subs	r4, r0, r2
 8000ba6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000baa:	2001      	movs	r0, #1
 8000bac:	4690      	mov	r8, r2
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d0e5      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb2:	e9c5 4800 	strd	r4, r8, [r5]
 8000bb6:	e7e2      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f000 8090 	beq.w	8000cde <__udivmoddi4+0x202>
 8000bbe:	fab2 f682 	clz	r6, r2
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	f040 80a4 	bne.w	8000d10 <__udivmoddi4+0x234>
 8000bc8:	1a8a      	subs	r2, r1, r2
 8000bca:	0c03      	lsrs	r3, r0, #16
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	b2bc      	uxth	r4, r7
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bda:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000be2:	fb04 f20c 	mul.w	r2, r4, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d907      	bls.n	8000bfa <__udivmoddi4+0x11e>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x11c>
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	f200 80e0 	bhi.w	8000db8 <__udivmoddi4+0x2dc>
 8000bf8:	46c4      	mov	ip, r8
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c00:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c04:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c08:	fb02 f404 	mul.w	r4, r2, r4
 8000c0c:	429c      	cmp	r4, r3
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x144>
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x142>
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	f200 80ca 	bhi.w	8000db2 <__udivmoddi4+0x2d6>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	1b1b      	subs	r3, r3, r4
 8000c22:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c26:	e7a5      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c28:	f1c1 0620 	rsb	r6, r1, #32
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c32:	431f      	orrs	r7, r3
 8000c34:	fa0e f401 	lsl.w	r4, lr, r1
 8000c38:	fa20 f306 	lsr.w	r3, r0, r6
 8000c3c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c44:	4323      	orrs	r3, r4
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	fa1f fc87 	uxth.w	ip, r7
 8000c4e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c52:	0c1c      	lsrs	r4, r3, #16
 8000c54:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c58:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c5c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	fa02 f201 	lsl.w	r2, r2, r1
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x1a0>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c6e:	f080 809c 	bcs.w	8000daa <__udivmoddi4+0x2ce>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f240 8099 	bls.w	8000daa <__udivmoddi4+0x2ce>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	443c      	add	r4, r7
 8000c7c:	eba4 040e 	sub.w	r4, r4, lr
 8000c80:	fa1f fe83 	uxth.w	lr, r3
 8000c84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c88:	fb09 4413 	mls	r4, r9, r3, r4
 8000c8c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c90:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c94:	45a4      	cmp	ip, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x1ce>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c9e:	f080 8082 	bcs.w	8000da6 <__udivmoddi4+0x2ca>
 8000ca2:	45a4      	cmp	ip, r4
 8000ca4:	d97f      	bls.n	8000da6 <__udivmoddi4+0x2ca>
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cb6:	4564      	cmp	r4, ip
 8000cb8:	4673      	mov	r3, lr
 8000cba:	46e1      	mov	r9, ip
 8000cbc:	d362      	bcc.n	8000d84 <__udivmoddi4+0x2a8>
 8000cbe:	d05f      	beq.n	8000d80 <__udivmoddi4+0x2a4>
 8000cc0:	b15d      	cbz	r5, 8000cda <__udivmoddi4+0x1fe>
 8000cc2:	ebb8 0203 	subs.w	r2, r8, r3
 8000cc6:	eb64 0409 	sbc.w	r4, r4, r9
 8000cca:	fa04 f606 	lsl.w	r6, r4, r6
 8000cce:	fa22 f301 	lsr.w	r3, r2, r1
 8000cd2:	431e      	orrs	r6, r3
 8000cd4:	40cc      	lsrs	r4, r1
 8000cd6:	e9c5 6400 	strd	r6, r4, [r5]
 8000cda:	2100      	movs	r1, #0
 8000cdc:	e74f      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000cde:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ce2:	0c01      	lsrs	r1, r0, #16
 8000ce4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ce8:	b280      	uxth	r0, r0
 8000cea:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4638      	mov	r0, r7
 8000cf2:	463c      	mov	r4, r7
 8000cf4:	46b8      	mov	r8, r7
 8000cf6:	46be      	mov	lr, r7
 8000cf8:	2620      	movs	r6, #32
 8000cfa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cfe:	eba2 0208 	sub.w	r2, r2, r8
 8000d02:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d06:	e766      	b.n	8000bd6 <__udivmoddi4+0xfa>
 8000d08:	4601      	mov	r1, r0
 8000d0a:	e718      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	e72c      	b.n	8000b6a <__udivmoddi4+0x8e>
 8000d10:	f1c6 0220 	rsb	r2, r6, #32
 8000d14:	fa2e f302 	lsr.w	r3, lr, r2
 8000d18:	40b7      	lsls	r7, r6
 8000d1a:	40b1      	lsls	r1, r6
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d24:	430a      	orrs	r2, r1
 8000d26:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d2a:	b2bc      	uxth	r4, r7
 8000d2c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	fb08 f904 	mul.w	r9, r8, r4
 8000d3a:	40b0      	lsls	r0, r6
 8000d3c:	4589      	cmp	r9, r1
 8000d3e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d42:	b280      	uxth	r0, r0
 8000d44:	d93e      	bls.n	8000dc4 <__udivmoddi4+0x2e8>
 8000d46:	1879      	adds	r1, r7, r1
 8000d48:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d4c:	d201      	bcs.n	8000d52 <__udivmoddi4+0x276>
 8000d4e:	4589      	cmp	r9, r1
 8000d50:	d81f      	bhi.n	8000d92 <__udivmoddi4+0x2b6>
 8000d52:	eba1 0109 	sub.w	r1, r1, r9
 8000d56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d5a:	fb09 f804 	mul.w	r8, r9, r4
 8000d5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d62:	b292      	uxth	r2, r2
 8000d64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d68:	4542      	cmp	r2, r8
 8000d6a:	d229      	bcs.n	8000dc0 <__udivmoddi4+0x2e4>
 8000d6c:	18ba      	adds	r2, r7, r2
 8000d6e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d72:	d2c4      	bcs.n	8000cfe <__udivmoddi4+0x222>
 8000d74:	4542      	cmp	r2, r8
 8000d76:	d2c2      	bcs.n	8000cfe <__udivmoddi4+0x222>
 8000d78:	f1a9 0102 	sub.w	r1, r9, #2
 8000d7c:	443a      	add	r2, r7
 8000d7e:	e7be      	b.n	8000cfe <__udivmoddi4+0x222>
 8000d80:	45f0      	cmp	r8, lr
 8000d82:	d29d      	bcs.n	8000cc0 <__udivmoddi4+0x1e4>
 8000d84:	ebbe 0302 	subs.w	r3, lr, r2
 8000d88:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	46e1      	mov	r9, ip
 8000d90:	e796      	b.n	8000cc0 <__udivmoddi4+0x1e4>
 8000d92:	eba7 0909 	sub.w	r9, r7, r9
 8000d96:	4449      	add	r1, r9
 8000d98:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da0:	fb09 f804 	mul.w	r8, r9, r4
 8000da4:	e7db      	b.n	8000d5e <__udivmoddi4+0x282>
 8000da6:	4673      	mov	r3, lr
 8000da8:	e77f      	b.n	8000caa <__udivmoddi4+0x1ce>
 8000daa:	4650      	mov	r0, sl
 8000dac:	e766      	b.n	8000c7c <__udivmoddi4+0x1a0>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e6fd      	b.n	8000bae <__udivmoddi4+0xd2>
 8000db2:	443b      	add	r3, r7
 8000db4:	3a02      	subs	r2, #2
 8000db6:	e733      	b.n	8000c20 <__udivmoddi4+0x144>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	443b      	add	r3, r7
 8000dbe:	e71c      	b.n	8000bfa <__udivmoddi4+0x11e>
 8000dc0:	4649      	mov	r1, r9
 8000dc2:	e79c      	b.n	8000cfe <__udivmoddi4+0x222>
 8000dc4:	eba1 0109 	sub.w	r1, r1, r9
 8000dc8:	46c4      	mov	ip, r8
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fb09 f804 	mul.w	r8, r9, r4
 8000dd2:	e7c4      	b.n	8000d5e <__udivmoddi4+0x282>

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f000 ff00 	bl	8001be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de0:	f000 f816 	bl	8000e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de4:	f000 f9c6 	bl	8001174 <MX_GPIO_Init>
  MX_DMA_Init();
 8000de8:	f000 f95e 	bl	80010a8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000dec:	f000 f86e 	bl	8000ecc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000df0:	f000 f8a2 	bl	8000f38 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000df4:	f000 f8d6 	bl	8000fa4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000df8:	f000 f92c 	bl	8001054 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8000dfc:	f000 f908 	bl	8001010 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	  SetupOS();
 8000e00:	f00d fd3c 	bl	800e87c <SetupOS>
	  StartOS();
 8000e04:	f00d fe38 	bl	800ea78 <StartOS>
	  return 0;
 8000e08:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b094      	sub	sp, #80	@ 0x50
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0320 	add.w	r3, r7, #32
 8000e1a:	2230      	movs	r2, #48	@ 0x30
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f010 f8e3 	bl	8010fea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <SystemClock_Config+0xb4>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	4a21      	ldr	r2, [pc, #132]	@ (8000ec4 <SystemClock_Config+0xb4>)
 8000e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <SystemClock_Config+0xb4>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <SystemClock_Config+0xb8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec8 <SystemClock_Config+0xb8>)
 8000e5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <SystemClock_Config+0xb8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e74:	2310      	movs	r3, #16
 8000e76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 f8ff 	bl	8003084 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e8c:	f000 f9ea 	bl	8001264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fb62 	bl	8003574 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000eb6:	f000 f9d5 	bl	8001264 <Error_Handler>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3750      	adds	r7, #80	@ 0x50
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000ed2:	4a18      	ldr	r2, [pc, #96]	@ (8000f34 <MX_SPI1_Init+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000ed8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000edc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000efc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000f00:	2208      	movs	r2, #8
 8000f02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000f18:	220a      	movs	r2, #10
 8000f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <MX_SPI1_Init+0x64>)
 8000f1e:	f002 fd09 	bl	8003934 <HAL_SPI_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f28:	f000 f99c 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000d0 	.word	0x200000d0
 8000f34:	40013000 	.word	0x40013000

08000f38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f3e:	4a18      	ldr	r2, [pc, #96]	@ (8000fa0 <MX_SPI2_Init+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f56:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f84:	220a      	movs	r2, #10
 8000f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	@ (8000f9c <MX_SPI2_Init+0x64>)
 8000f8a:	f002 fcd3 	bl	8003934 <HAL_SPI_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f94:	f000 f966 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000128 	.word	0x20000128
 8000fa0:	40003800 	.word	0x40003800

08000fa4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000faa:	4a18      	ldr	r2, [pc, #96]	@ (800100c <MX_SPI3_Init+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fae:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000fb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fb4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000fd8:	2210      	movs	r2, #16
 8000fda:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <MX_SPI3_Init+0x64>)
 8000ff6:	f002 fc9d 	bl	8003934 <HAL_SPI_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001000:	f000 f930 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000180 	.word	0x20000180
 800100c:	40003c00 	.word	0x40003c00

08001010 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001014:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <MX_TIM11_Init+0x3c>)
 8001016:	4a0e      	ldr	r2, [pc, #56]	@ (8001050 <MX_TIM11_Init+0x40>)
 8001018:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16;
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <MX_TIM11_Init+0x3c>)
 800101c:	2210      	movs	r2, #16
 800101e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <MX_TIM11_Init+0x3c>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_TIM11_Init+0x3c>)
 8001028:	2263      	movs	r2, #99	@ 0x63
 800102a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <MX_TIM11_Init+0x3c>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <MX_TIM11_Init+0x3c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <MX_TIM11_Init+0x3c>)
 800103a:	f003 ff53 	bl	8004ee4 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8001044:	f000 f90e 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000418 	.word	0x20000418
 8001050:	40014800 	.word	0x40014800

08001054 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_USART1_UART_Init+0x4c>)
 800105a:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <MX_USART1_UART_Init+0x50>)
 800105c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001060:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <MX_USART1_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <MX_USART1_UART_Init+0x4c>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <MX_USART1_UART_Init+0x4c>)
 800108c:	f004 f9cc 	bl	8005428 <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001096:	f000 f8e5 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000460 	.word	0x20000460
 80010a4:	40011000 	.word	0x40011000

080010a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <MX_DMA_Init+0xc8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001170 <MX_DMA_Init+0xc8>)
 80010b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010be:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <MX_DMA_Init+0xc8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b28      	ldr	r3, [pc, #160]	@ (8001170 <MX_DMA_Init+0xc8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	4a27      	ldr	r2, [pc, #156]	@ (8001170 <MX_DMA_Init+0xc8>)
 80010d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010da:	4b25      	ldr	r3, [pc, #148]	@ (8001170 <MX_DMA_Init+0xc8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2105      	movs	r1, #5
 80010ea:	200b      	movs	r0, #11
 80010ec:	f000 feff 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010f0:	200b      	movs	r0, #11
 80010f2:	f000 ff18 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2105      	movs	r1, #5
 80010fa:	200e      	movs	r0, #14
 80010fc:	f000 fef7 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001100:	200e      	movs	r0, #14
 8001102:	f000 ff10 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2105      	movs	r1, #5
 800110a:	200f      	movs	r0, #15
 800110c:	f000 feef 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001110:	200f      	movs	r0, #15
 8001112:	f000 ff08 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2105      	movs	r1, #5
 800111a:	2010      	movs	r0, #16
 800111c:	f000 fee7 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001120:	2010      	movs	r0, #16
 8001122:	f000 ff00 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2105      	movs	r1, #5
 800112a:	2038      	movs	r0, #56	@ 0x38
 800112c:	f000 fedf 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001130:	2038      	movs	r0, #56	@ 0x38
 8001132:	f000 fef8 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	203a      	movs	r0, #58	@ 0x3a
 800113c:	f000 fed7 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001140:	203a      	movs	r0, #58	@ 0x3a
 8001142:	f000 fef0 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2105      	movs	r1, #5
 800114a:	203b      	movs	r0, #59	@ 0x3b
 800114c:	f000 fecf 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001150:	203b      	movs	r0, #59	@ 0x3b
 8001152:	f000 fee8 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2105      	movs	r1, #5
 800115a:	2046      	movs	r0, #70	@ 0x46
 800115c:	f000 fec7 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001160:	2046      	movs	r0, #70	@ 0x46
 8001162:	f000 fee0 	bl	8001f26 <HAL_NVIC_EnableIRQ>

}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800

08001174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b32      	ldr	r3, [pc, #200]	@ (8001258 <MX_GPIO_Init+0xe4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a31      	ldr	r2, [pc, #196]	@ (8001258 <MX_GPIO_Init+0xe4>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <MX_GPIO_Init+0xe4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001258 <MX_GPIO_Init+0xe4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001258 <MX_GPIO_Init+0xe4>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b28      	ldr	r3, [pc, #160]	@ (8001258 <MX_GPIO_Init+0xe4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <MX_GPIO_Init+0xe4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a23      	ldr	r2, [pc, #140]	@ (8001258 <MX_GPIO_Init+0xe4>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <MX_GPIO_Init+0xe4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <MX_GPIO_Init+0xe4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001258 <MX_GPIO_Init+0xe4>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <MX_GPIO_Init+0xe4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f248 0110 	movw	r1, #32784	@ 0x8010
 8001200:	4816      	ldr	r0, [pc, #88]	@ (800125c <MX_GPIO_Init+0xe8>)
 8001202:	f001 ff25 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PUMP_Pin|VALVE_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f241 0103 	movw	r1, #4099	@ 0x1003
 800120c:	4814      	ldr	r0, [pc, #80]	@ (8001260 <MX_GPIO_Init+0xec>)
 800120e:	f001 ff1f 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI3_CS_Pin;
 8001212:	f248 0310 	movw	r3, #32784	@ 0x8010
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	480c      	ldr	r0, [pc, #48]	@ (800125c <MX_GPIO_Init+0xe8>)
 800122c:	f001 fd74 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUMP_Pin VALVE_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = PUMP_Pin|VALVE_Pin|SPI2_CS_Pin;
 8001230:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_GPIO_Init+0xec>)
 800124a:	f001 fd65 	bl	8002d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <Error_Handler+0x8>

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <HAL_MspInit+0x54>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	4a11      	ldr	r2, [pc, #68]	@ (80012c4 <HAL_MspInit+0x54>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001284:	6453      	str	r3, [r2, #68]	@ 0x44
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <HAL_MspInit+0x54>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <HAL_MspInit+0x54>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <HAL_MspInit+0x54>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <HAL_MspInit+0x54>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	210f      	movs	r1, #15
 80012b2:	f06f 0001 	mvn.w	r0, #1
 80012b6:	f000 fe1a 	bl	8001eee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	@ 0x38
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a95      	ldr	r2, [pc, #596]	@ (800153c <HAL_SPI_MspInit+0x274>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	f040 8091 	bne.w	800140e <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
 80012f0:	4b93      	ldr	r3, [pc, #588]	@ (8001540 <HAL_SPI_MspInit+0x278>)
 80012f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f4:	4a92      	ldr	r2, [pc, #584]	@ (8001540 <HAL_SPI_MspInit+0x278>)
 80012f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fc:	4b90      	ldr	r3, [pc, #576]	@ (8001540 <HAL_SPI_MspInit+0x278>)
 80012fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001304:	623b      	str	r3, [r7, #32]
 8001306:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	4b8c      	ldr	r3, [pc, #560]	@ (8001540 <HAL_SPI_MspInit+0x278>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001310:	4a8b      	ldr	r2, [pc, #556]	@ (8001540 <HAL_SPI_MspInit+0x278>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6313      	str	r3, [r2, #48]	@ 0x30
 8001318:	4b89      	ldr	r3, [pc, #548]	@ (8001540 <HAL_SPI_MspInit+0x278>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001324:	23e0      	movs	r3, #224	@ 0xe0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001334:	2305      	movs	r3, #5
 8001336:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	4881      	ldr	r0, [pc, #516]	@ (8001544 <HAL_SPI_MspInit+0x27c>)
 8001340:	f001 fcea 	bl	8002d18 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001344:	4b80      	ldr	r3, [pc, #512]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 8001346:	4a81      	ldr	r2, [pc, #516]	@ (800154c <HAL_SPI_MspInit+0x284>)
 8001348:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800134a:	4b7f      	ldr	r3, [pc, #508]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 800134c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001350:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001352:	4b7d      	ldr	r3, [pc, #500]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001358:	4b7b      	ldr	r3, [pc, #492]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800135e:	4b7a      	ldr	r3, [pc, #488]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 8001360:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001364:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001366:	4b78      	ldr	r3, [pc, #480]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800136c:	4b76      	ldr	r3, [pc, #472]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001372:	4b75      	ldr	r3, [pc, #468]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001378:	4b73      	ldr	r3, [pc, #460]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800137e:	4b72      	ldr	r3, [pc, #456]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001384:	4870      	ldr	r0, [pc, #448]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 8001386:	f000 fded 	bl	8001f64 <HAL_DMA_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001390:	f7ff ff68 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a6c      	ldr	r2, [pc, #432]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 8001398:	64da      	str	r2, [r3, #76]	@ 0x4c
 800139a:	4a6b      	ldr	r2, [pc, #428]	@ (8001548 <HAL_SPI_MspInit+0x280>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001554 <HAL_SPI_MspInit+0x28c>)
 80013a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013a8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ae:	4b68      	ldr	r3, [pc, #416]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013b0:	2240      	movs	r2, #64	@ 0x40
 80013b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b4:	4b66      	ldr	r3, [pc, #408]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ba:	4b65      	ldr	r3, [pc, #404]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013c2:	4b63      	ldr	r3, [pc, #396]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c8:	4b61      	ldr	r3, [pc, #388]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013ce:	4b60      	ldr	r3, [pc, #384]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013da:	4b5d      	ldr	r3, [pc, #372]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013dc:	2200      	movs	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013e0:	485b      	ldr	r0, [pc, #364]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013e2:	f000 fdbf 	bl	8001f64 <HAL_DMA_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80013ec:	f7ff ff3a 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a57      	ldr	r2, [pc, #348]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013f4:	649a      	str	r2, [r3, #72]	@ 0x48
 80013f6:	4a56      	ldr	r2, [pc, #344]	@ (8001550 <HAL_SPI_MspInit+0x288>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2105      	movs	r1, #5
 8001400:	2023      	movs	r0, #35	@ 0x23
 8001402:	f000 fd74 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001406:	2023      	movs	r0, #35	@ 0x23
 8001408:	f000 fd8d 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800140c:	e145      	b.n	800169a <HAL_SPI_MspInit+0x3d2>
  else if(hspi->Instance==SPI2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a51      	ldr	r2, [pc, #324]	@ (8001558 <HAL_SPI_MspInit+0x290>)
 8001414:	4293      	cmp	r3, r2
 8001416:	f040 80ab 	bne.w	8001570 <HAL_SPI_MspInit+0x2a8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	4b48      	ldr	r3, [pc, #288]	@ (8001540 <HAL_SPI_MspInit+0x278>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	4a47      	ldr	r2, [pc, #284]	@ (8001540 <HAL_SPI_MspInit+0x278>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001428:	6413      	str	r3, [r2, #64]	@ 0x40
 800142a:	4b45      	ldr	r3, [pc, #276]	@ (8001540 <HAL_SPI_MspInit+0x278>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	4b41      	ldr	r3, [pc, #260]	@ (8001540 <HAL_SPI_MspInit+0x278>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a40      	ldr	r2, [pc, #256]	@ (8001540 <HAL_SPI_MspInit+0x278>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b3e      	ldr	r3, [pc, #248]	@ (8001540 <HAL_SPI_MspInit+0x278>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001452:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001464:	2305      	movs	r3, #5
 8001466:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	483b      	ldr	r0, [pc, #236]	@ (800155c <HAL_SPI_MspInit+0x294>)
 8001470:	f001 fc52 	bl	8002d18 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001474:	4b3a      	ldr	r3, [pc, #232]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 8001476:	4a3b      	ldr	r2, [pc, #236]	@ (8001564 <HAL_SPI_MspInit+0x29c>)
 8001478:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800147a:	4b39      	ldr	r3, [pc, #228]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001480:	4b37      	ldr	r3, [pc, #220]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001486:	4b36      	ldr	r3, [pc, #216]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800148c:	4b34      	ldr	r3, [pc, #208]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 800148e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001492:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001494:	4b32      	ldr	r3, [pc, #200]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149a:	4b31      	ldr	r3, [pc, #196]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80014a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80014b2:	482b      	ldr	r0, [pc, #172]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 80014b4:	f000 fd56 	bl	8001f64 <HAL_DMA_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_SPI_MspInit+0x1fa>
      Error_Handler();
 80014be:	f7ff fed1 	bl	8001264 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a26      	ldr	r2, [pc, #152]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 80014c6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014c8:	4a25      	ldr	r2, [pc, #148]	@ (8001560 <HAL_SPI_MspInit+0x298>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80014ce:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 80014d0:	4a26      	ldr	r2, [pc, #152]	@ (800156c <HAL_SPI_MspInit+0x2a4>)
 80014d2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80014d4:	4b24      	ldr	r3, [pc, #144]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014da:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 80014dc:	2240      	movs	r2, #64	@ 0x40
 80014de:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e0:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e6:	4b20      	ldr	r3, [pc, #128]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 80014e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ec:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80014fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001500:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001506:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 8001508:	2200      	movs	r2, #0
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800150c:	4816      	ldr	r0, [pc, #88]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 800150e:	f000 fd29 	bl	8001f64 <HAL_DMA_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_SPI_MspInit+0x254>
      Error_Handler();
 8001518:	f7ff fea4 	bl	8001264 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a12      	ldr	r2, [pc, #72]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 8001520:	649a      	str	r2, [r3, #72]	@ 0x48
 8001522:	4a11      	ldr	r2, [pc, #68]	@ (8001568 <HAL_SPI_MspInit+0x2a0>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2105      	movs	r1, #5
 800152c:	2024      	movs	r0, #36	@ 0x24
 800152e:	f000 fcde 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001532:	2024      	movs	r0, #36	@ 0x24
 8001534:	f000 fcf7 	bl	8001f26 <HAL_NVIC_EnableIRQ>
}
 8001538:	e0af      	b.n	800169a <HAL_SPI_MspInit+0x3d2>
 800153a:	bf00      	nop
 800153c:	40013000 	.word	0x40013000
 8001540:	40023800 	.word	0x40023800
 8001544:	40020000 	.word	0x40020000
 8001548:	200001d8 	.word	0x200001d8
 800154c:	40026410 	.word	0x40026410
 8001550:	20000238 	.word	0x20000238
 8001554:	40026458 	.word	0x40026458
 8001558:	40003800 	.word	0x40003800
 800155c:	40020400 	.word	0x40020400
 8001560:	20000298 	.word	0x20000298
 8001564:	40026058 	.word	0x40026058
 8001568:	200002f8 	.word	0x200002f8
 800156c:	40026070 	.word	0x40026070
  else if(hspi->Instance==SPI3)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a4b      	ldr	r2, [pc, #300]	@ (80016a4 <HAL_SPI_MspInit+0x3dc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	f040 808f 	bne.w	800169a <HAL_SPI_MspInit+0x3d2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	4b49      	ldr	r3, [pc, #292]	@ (80016a8 <HAL_SPI_MspInit+0x3e0>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001584:	4a48      	ldr	r2, [pc, #288]	@ (80016a8 <HAL_SPI_MspInit+0x3e0>)
 8001586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800158a:	6413      	str	r3, [r2, #64]	@ 0x40
 800158c:	4b46      	ldr	r3, [pc, #280]	@ (80016a8 <HAL_SPI_MspInit+0x3e0>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	4b42      	ldr	r3, [pc, #264]	@ (80016a8 <HAL_SPI_MspInit+0x3e0>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a0:	4a41      	ldr	r2, [pc, #260]	@ (80016a8 <HAL_SPI_MspInit+0x3e0>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a8:	4b3f      	ldr	r3, [pc, #252]	@ (80016a8 <HAL_SPI_MspInit+0x3e0>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015b4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015c6:	2306      	movs	r3, #6
 80015c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	4836      	ldr	r0, [pc, #216]	@ (80016ac <HAL_SPI_MspInit+0x3e4>)
 80015d2:	f001 fba1 	bl	8002d18 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80015d6:	4b36      	ldr	r3, [pc, #216]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 80015d8:	4a36      	ldr	r2, [pc, #216]	@ (80016b4 <HAL_SPI_MspInit+0x3ec>)
 80015da:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80015dc:	4b34      	ldr	r3, [pc, #208]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e2:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e8:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015ee:	4b30      	ldr	r3, [pc, #192]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 80015f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015f4:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015f6:	4b2e      	ldr	r3, [pc, #184]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015fc:	4b2c      	ldr	r3, [pc, #176]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001602:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001608:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800160e:	4b28      	ldr	r3, [pc, #160]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001614:	4826      	ldr	r0, [pc, #152]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 8001616:	f000 fca5 	bl	8001f64 <HAL_DMA_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_SPI_MspInit+0x35c>
      Error_Handler();
 8001620:	f7ff fe20 	bl	8001264 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a22      	ldr	r2, [pc, #136]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 8001628:	64da      	str	r2, [r3, #76]	@ 0x4c
 800162a:	4a21      	ldr	r2, [pc, #132]	@ (80016b0 <HAL_SPI_MspInit+0x3e8>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001630:	4b21      	ldr	r3, [pc, #132]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 8001632:	4a22      	ldr	r2, [pc, #136]	@ (80016bc <HAL_SPI_MspInit+0x3f4>)
 8001634:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800163c:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 800163e:	2240      	movs	r2, #64	@ 0x40
 8001640:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001642:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 800164a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800164e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001650:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800165c:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800166e:	4812      	ldr	r0, [pc, #72]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 8001670:	f000 fc78 	bl	8001f64 <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_SPI_MspInit+0x3b6>
      Error_Handler();
 800167a:	f7ff fdf3 	bl	8001264 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a0d      	ldr	r2, [pc, #52]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 8001682:	649a      	str	r2, [r3, #72]	@ 0x48
 8001684:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <HAL_SPI_MspInit+0x3f0>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2105      	movs	r1, #5
 800168e:	2033      	movs	r0, #51	@ 0x33
 8001690:	f000 fc2d 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001694:	2033      	movs	r0, #51	@ 0x33
 8001696:	f000 fc46 	bl	8001f26 <HAL_NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3738      	adds	r7, #56	@ 0x38
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40003c00 	.word	0x40003c00
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020800 	.word	0x40020800
 80016b0:	20000358 	.word	0x20000358
 80016b4:	40026010 	.word	0x40026010
 80016b8:	200003b8 	.word	0x200003b8
 80016bc:	40026088 	.word	0x40026088

080016c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001708 <HAL_TIM_Base_MspInit+0x48>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d115      	bne.n	80016fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <HAL_TIM_Base_MspInit+0x4c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	4a0c      	ldr	r2, [pc, #48]	@ (800170c <HAL_TIM_Base_MspInit+0x4c>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e2:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_TIM_Base_MspInit+0x4c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2105      	movs	r1, #5
 80016f2:	201a      	movs	r0, #26
 80016f4:	f000 fbfb 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016f8:	201a      	movs	r0, #26
 80016fa:	f000 fc14 	bl	8001f26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40014800 	.word	0x40014800
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a4c      	ldr	r2, [pc, #304]	@ (8001860 <HAL_UART_MspInit+0x150>)
 800172e:	4293      	cmp	r3, r2
 8001730:	f040 8091 	bne.w	8001856 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	4b4a      	ldr	r3, [pc, #296]	@ (8001864 <HAL_UART_MspInit+0x154>)
 800173a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173c:	4a49      	ldr	r2, [pc, #292]	@ (8001864 <HAL_UART_MspInit+0x154>)
 800173e:	f043 0310 	orr.w	r3, r3, #16
 8001742:	6453      	str	r3, [r2, #68]	@ 0x44
 8001744:	4b47      	ldr	r3, [pc, #284]	@ (8001864 <HAL_UART_MspInit+0x154>)
 8001746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4b43      	ldr	r3, [pc, #268]	@ (8001864 <HAL_UART_MspInit+0x154>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001758:	4a42      	ldr	r2, [pc, #264]	@ (8001864 <HAL_UART_MspInit+0x154>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001760:	4b40      	ldr	r3, [pc, #256]	@ (8001864 <HAL_UART_MspInit+0x154>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800176c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800177e:	2307      	movs	r3, #7
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4837      	ldr	r0, [pc, #220]	@ (8001868 <HAL_UART_MspInit+0x158>)
 800178a:	f001 fac5 	bl	8002d18 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800178e:	4b37      	ldr	r3, [pc, #220]	@ (800186c <HAL_UART_MspInit+0x15c>)
 8001790:	4a37      	ldr	r2, [pc, #220]	@ (8001870 <HAL_UART_MspInit+0x160>)
 8001792:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001794:	4b35      	ldr	r3, [pc, #212]	@ (800186c <HAL_UART_MspInit+0x15c>)
 8001796:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800179a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179c:	4b33      	ldr	r3, [pc, #204]	@ (800186c <HAL_UART_MspInit+0x15c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a2:	4b32      	ldr	r3, [pc, #200]	@ (800186c <HAL_UART_MspInit+0x15c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a8:	4b30      	ldr	r3, [pc, #192]	@ (800186c <HAL_UART_MspInit+0x15c>)
 80017aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b0:	4b2e      	ldr	r3, [pc, #184]	@ (800186c <HAL_UART_MspInit+0x15c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b6:	4b2d      	ldr	r3, [pc, #180]	@ (800186c <HAL_UART_MspInit+0x15c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017bc:	4b2b      	ldr	r3, [pc, #172]	@ (800186c <HAL_UART_MspInit+0x15c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017c2:	4b2a      	ldr	r3, [pc, #168]	@ (800186c <HAL_UART_MspInit+0x15c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c8:	4b28      	ldr	r3, [pc, #160]	@ (800186c <HAL_UART_MspInit+0x15c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017ce:	4827      	ldr	r0, [pc, #156]	@ (800186c <HAL_UART_MspInit+0x15c>)
 80017d0:	f000 fbc8 	bl	8001f64 <HAL_DMA_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80017da:	f7ff fd43 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a22      	ldr	r2, [pc, #136]	@ (800186c <HAL_UART_MspInit+0x15c>)
 80017e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017e4:	4a21      	ldr	r2, [pc, #132]	@ (800186c <HAL_UART_MspInit+0x15c>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80017ea:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <HAL_UART_MspInit+0x164>)
 80017ec:	4a22      	ldr	r2, [pc, #136]	@ (8001878 <HAL_UART_MspInit+0x168>)
 80017ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80017f0:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_UART_MspInit+0x164>)
 80017f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <HAL_UART_MspInit+0x164>)
 80017fa:	2240      	movs	r2, #64	@ 0x40
 80017fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <HAL_UART_MspInit+0x164>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_UART_MspInit+0x164>)
 8001806:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800180a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_UART_MspInit+0x164>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <HAL_UART_MspInit+0x164>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001818:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <HAL_UART_MspInit+0x164>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_UART_MspInit+0x164>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001824:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <HAL_UART_MspInit+0x164>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800182a:	4812      	ldr	r0, [pc, #72]	@ (8001874 <HAL_UART_MspInit+0x164>)
 800182c:	f000 fb9a 	bl	8001f64 <HAL_DMA_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001836:	f7ff fd15 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <HAL_UART_MspInit+0x164>)
 800183e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001840:	4a0c      	ldr	r2, [pc, #48]	@ (8001874 <HAL_UART_MspInit+0x164>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2105      	movs	r1, #5
 800184a:	2025      	movs	r0, #37	@ 0x25
 800184c:	f000 fb4f 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001850:	2025      	movs	r0, #37	@ 0x25
 8001852:	f000 fb68 	bl	8001f26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	@ 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40011000 	.word	0x40011000
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000
 800186c:	200004a8 	.word	0x200004a8
 8001870:	40026440 	.word	0x40026440
 8001874:	20000508 	.word	0x20000508
 8001878:	400264b8 	.word	0x400264b8

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <NMI_Handler+0x4>

08001884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <MemManage_Handler+0x4>

08001894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b6:	f000 f9e5 	bl	8001c84 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018ba:	f007 fa9d 	bl	8008df8 <xTaskGetSchedulerState>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d001      	beq.n	80018c8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018c4:	f008 f998 	bl	8009bf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <DMA1_Stream0_IRQHandler+0x10>)
 80018d2:	f000 fcdf 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000358 	.word	0x20000358

080018e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <DMA1_Stream3_IRQHandler+0x10>)
 80018e6:	f000 fcd5 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000298 	.word	0x20000298

080018f4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <DMA1_Stream4_IRQHandler+0x10>)
 80018fa:	f000 fccb 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002f8 	.word	0x200002f8

08001908 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <DMA1_Stream5_IRQHandler+0x10>)
 800190e:	f000 fcc1 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200003b8 	.word	0x200003b8

0800191c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	StartTimerTicks++;
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	4a03      	ldr	r2, [pc, #12]	@ (8001934 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001928:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800192a:	4803      	ldr	r0, [pc, #12]	@ (8001938 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 800192c:	f003 fb9a 	bl	8005064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200000cc 	.word	0x200000cc
 8001938:	20000418 	.word	0x20000418

0800193c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <SPI1_IRQHandler+0x10>)
 8001942:	f002 fef9 	bl	8004738 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200000d0 	.word	0x200000d0

08001950 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <SPI2_IRQHandler+0x10>)
 8001956:	f002 feef 	bl	8004738 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000128 	.word	0x20000128

08001964 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <USART1_IRQHandler+0x10>)
 800196a:	f003 fe5d 	bl	8005628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000460 	.word	0x20000460

08001978 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <SPI3_IRQHandler+0x10>)
 800197e:	f002 fedb 	bl	8004738 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000180 	.word	0x20000180

0800198c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <DMA2_Stream0_IRQHandler+0x10>)
 8001992:	f000 fc7f 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200001d8 	.word	0x200001d8

080019a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <DMA2_Stream2_IRQHandler+0x10>)
 80019a6:	f000 fc75 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200004a8 	.word	0x200004a8

080019b4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <DMA2_Stream3_IRQHandler+0x10>)
 80019ba:	f000 fc6b 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000238 	.word	0x20000238

080019c8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <DMA2_Stream7_IRQHandler+0x10>)
 80019ce:	f000 fc61 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000508 	.word	0x20000508

080019dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_kill>:

int _kill(int pid, int sig)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f6:	f00f fb57 	bl	80110a8 <__errno>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2216      	movs	r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_exit>:

void _exit (int status)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffe7 	bl	80019ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a1e:	bf00      	nop
 8001a20:	e7fd      	b.n	8001a1e <_exit+0x12>

08001a22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e00a      	b.n	8001a4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a34:	f3af 8000 	nop.w
 8001a38:	4601      	mov	r1, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	60ba      	str	r2, [r7, #8]
 8001a40:	b2ca      	uxtb	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf0      	blt.n	8001a34 <_read+0x12>
  }

  return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e009      	b.n	8001a82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	60ba      	str	r2, [r7, #8]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbf1      	blt.n	8001a6e <_write+0x12>
  }
  return len;
 8001a8a:	687b      	ldr	r3, [r7, #4]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_close>:

int _close(int file)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001abc:	605a      	str	r2, [r3, #4]
  return 0;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_isatty>:

int _isatty(int file)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b085      	sub	sp, #20
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f00f fabc 	bl	80110a8 <__errno>
 8001b30:	4603      	mov	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20020000 	.word	0x20020000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	20000568 	.word	0x20000568
 8001b64:	20009590 	.word	0x20009590

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	@ (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack     /* set stack pointer */
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b90:	f7ff ffea 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b94:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b96:	490d      	ldr	r1, [pc, #52]	@ (8001bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b98:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bac:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bba:	f00f fa7b 	bl	80110b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bbe:	f7ff f90b 	bl	8000dd8 <main>
  bx  lr    
 8001bc2:	4770      	bx	lr
 ldr   sp, =_estack     /* set stack pointer */
 8001bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bcc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001bd0:	08011ea4 	.word	0x08011ea4
  ldr r2, =_sbss
 8001bd4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001bd8:	2000958c 	.word	0x2000958c

08001bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC_IRQHandler>
	...

08001be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <HAL_Init+0x40>)
 8001bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <HAL_Init+0x40>)
 8001bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	@ (8001c20 <HAL_Init+0x40>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f965 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	200f      	movs	r0, #15
 8001c10:	f000 f808 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff fb2c 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_InitTick+0x54>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_InitTick+0x58>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f981 	bl	8001f4a <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 f945 	bl	8001eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	@ (8001c80 <HAL_InitTick+0x5c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_IncTick+0x20>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_IncTick+0x24>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <HAL_IncTick+0x24>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	2000056c 	.word	0x2000056c

08001cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	@ (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	2000056c 	.word	0x2000056c

08001cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ffee 	bl	8001cac <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <HAL_Delay+0x44>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffde 	bl	8001cac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8f7      	bhi.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000008 	.word	0x20000008

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db0b      	blt.n	8001d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4907      	ldr	r1, [pc, #28]	@ (8001da8 <__NVIC_EnableIRQ+0x38>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	@ (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	@ (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	@ 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	@ 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001e6c:	f3bf 8f4f 	dsb	sy
}
 8001e70:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <__NVIC_SystemReset+0x24>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e7a:	4904      	ldr	r1, [pc, #16]	@ (8001e8c <__NVIC_SystemReset+0x24>)
 8001e7c:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <__NVIC_SystemReset+0x28>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e82:	f3bf 8f4f 	dsb	sy
}
 8001e86:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <__NVIC_SystemReset+0x20>
 8001e8c:	e000ed00 	.word	0xe000ed00
 8001e90:	05fa0004 	.word	0x05fa0004

08001e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ea4:	d301      	bcc.n	8001eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00f      	b.n	8001eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <SysTick_Config+0x40>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f7ff ff78 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <SysTick_Config+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <SysTick_Config+0x40>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff13 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f00:	f7ff ff28 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f7ff ff78 	bl	8001e00 <NVIC_EncodePriority>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff47 	bl	8001dac <__NVIC_SetPriority>
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff1b 	bl	8001d70 <__NVIC_EnableIRQ>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001f46:	f7ff ff8f 	bl	8001e68 <__NVIC_SystemReset>

08001f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ff9e 	bl	8001e94 <SysTick_Config>
 8001f58:	4603      	mov	r3, r0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff fe9c 	bl	8001cac <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e099      	b.n	80020b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa0:	e00f      	b.n	8001fc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fa2:	f7ff fe83 	bl	8001cac <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d908      	bls.n	8001fc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e078      	b.n	80020b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e8      	bne.n	8001fa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	4b38      	ldr	r3, [pc, #224]	@ (80020bc <HAL_DMA_Init+0x158>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	2b04      	cmp	r3, #4
 800201a:	d107      	bne.n	800202c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002024:	4313      	orrs	r3, r2
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f023 0307 	bic.w	r3, r3, #7
 8002042:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	2b04      	cmp	r3, #4
 8002054:	d117      	bne.n	8002086 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00e      	beq.n	8002086 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fb01 	bl	8002670 <DMA_CheckFifoParam>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2240      	movs	r2, #64	@ 0x40
 8002078:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002082:	2301      	movs	r3, #1
 8002084:	e016      	b.n	80020b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fab8 	bl	8002604 <DMA_CalcBaseAndBitshift>
 8002094:	4603      	mov	r3, r0
 8002096:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209c:	223f      	movs	r2, #63	@ 0x3f
 800209e:	409a      	lsls	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	f010803f 	.word	0xf010803f

080020c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_DMA_Start_IT+0x26>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e040      	b.n	8002168 <HAL_DMA_Start_IT+0xa8>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d12f      	bne.n	800215a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fa4a 	bl	80025a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002118:	223f      	movs	r2, #63	@ 0x3f
 800211a:	409a      	lsls	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0216 	orr.w	r2, r2, #22
 800212e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0208 	orr.w	r2, r2, #8
 8002146:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e005      	b.n	8002166 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002166:	7dfb      	ldrb	r3, [r7, #23]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800217e:	f7ff fd95 	bl	8001cac <HAL_GetTick>
 8002182:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d008      	beq.n	80021a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2280      	movs	r2, #128	@ 0x80
 8002194:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e052      	b.n	8002248 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0216 	bic.w	r2, r2, #22
 80021b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <HAL_DMA_Abort+0x62>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0208 	bic.w	r2, r2, #8
 80021e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f2:	e013      	b.n	800221c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f4:	f7ff fd5a 	bl	8001cac <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d90c      	bls.n	800221c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2220      	movs	r2, #32
 8002206:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2203      	movs	r2, #3
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e015      	b.n	8002248 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e4      	bne.n	80021f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222e:	223f      	movs	r2, #63	@ 0x3f
 8002230:	409a      	lsls	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d004      	beq.n	800226e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2280      	movs	r2, #128	@ 0x80
 8002268:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00c      	b.n	8002288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2205      	movs	r2, #5
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022a0:	4b8e      	ldr	r3, [pc, #568]	@ (80024dc <HAL_DMA_IRQHandler+0x248>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a8e      	ldr	r2, [pc, #568]	@ (80024e0 <HAL_DMA_IRQHandler+0x24c>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0a9b      	lsrs	r3, r3, #10
 80022ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022be:	2208      	movs	r2, #8
 80022c0:	409a      	lsls	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01a      	beq.n	8002300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0204 	bic.w	r2, r2, #4
 80022e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ec:	2208      	movs	r2, #8
 80022ee:	409a      	lsls	r2, r3
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002304:	2201      	movs	r2, #1
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d012      	beq.n	8002336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002322:	2201      	movs	r2, #1
 8002324:	409a      	lsls	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232e:	f043 0202 	orr.w	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233a:	2204      	movs	r2, #4
 800233c:	409a      	lsls	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d012      	beq.n	800236c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00b      	beq.n	800236c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002358:	2204      	movs	r2, #4
 800235a:	409a      	lsls	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002364:	f043 0204 	orr.w	r2, r3, #4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002370:	2210      	movs	r2, #16
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d043      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d03c      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238e:	2210      	movs	r2, #16
 8002390:	409a      	lsls	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d018      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d108      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d024      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
 80023c2:	e01f      	b.n	8002404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01b      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
 80023d4:	e016      	b.n	8002404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d107      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0208 	bic.w	r2, r2, #8
 80023f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002408:	2220      	movs	r2, #32
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 808f 	beq.w	8002534 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8087 	beq.w	8002534 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	2220      	movs	r2, #32
 800242c:	409a      	lsls	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b05      	cmp	r3, #5
 800243c:	d136      	bne.n	80024ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0216 	bic.w	r2, r2, #22
 800244c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800245c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <HAL_DMA_IRQHandler+0x1da>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0208 	bic.w	r2, r2, #8
 800247c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002482:	223f      	movs	r2, #63	@ 0x3f
 8002484:	409a      	lsls	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d07e      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
        }
        return;
 80024aa:	e079      	b.n	80025a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01d      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d031      	beq.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
 80024d8:	e02c      	b.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
 80024da:	bf00      	nop
 80024dc:	20000000 	.word	0x20000000
 80024e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d023      	beq.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
 80024f4:	e01e      	b.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10f      	bne.n	8002524 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0210 	bic.w	r2, r2, #16
 8002512:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002538:	2b00      	cmp	r3, #0
 800253a:	d032      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d022      	beq.n	800258e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2205      	movs	r2, #5
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	3301      	adds	r3, #1
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	d307      	bcc.n	800257c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f2      	bne.n	8002560 <HAL_DMA_IRQHandler+0x2cc>
 800257a:	e000      	b.n	800257e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800257c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
 800259e:	e000      	b.n	80025a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025a0:	bf00      	nop
    }
  }
}
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b40      	cmp	r3, #64	@ 0x40
 80025d4:	d108      	bne.n	80025e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025e6:	e007      	b.n	80025f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	3b10      	subs	r3, #16
 8002614:	4a14      	ldr	r2, [pc, #80]	@ (8002668 <DMA_CalcBaseAndBitshift+0x64>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800261e:	4a13      	ldr	r2, [pc, #76]	@ (800266c <DMA_CalcBaseAndBitshift+0x68>)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4413      	add	r3, r2
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d909      	bls.n	8002646 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	1d1a      	adds	r2, r3, #4
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	659a      	str	r2, [r3, #88]	@ 0x58
 8002644:	e007      	b.n	8002656 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800264e:	f023 0303 	bic.w	r3, r3, #3
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	aaaaaaab 	.word	0xaaaaaaab
 800266c:	08011cb4 	.word	0x08011cb4

08002670 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002680:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d11f      	bne.n	80026ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d856      	bhi.n	800273e <DMA_CheckFifoParam+0xce>
 8002690:	a201      	add	r2, pc, #4	@ (adr r2, 8002698 <DMA_CheckFifoParam+0x28>)
 8002692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002696:	bf00      	nop
 8002698:	080026a9 	.word	0x080026a9
 800269c:	080026bb 	.word	0x080026bb
 80026a0:	080026a9 	.word	0x080026a9
 80026a4:	0800273f 	.word	0x0800273f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d046      	beq.n	8002742 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b8:	e043      	b.n	8002742 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026c2:	d140      	bne.n	8002746 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c8:	e03d      	b.n	8002746 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d2:	d121      	bne.n	8002718 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d837      	bhi.n	800274a <DMA_CheckFifoParam+0xda>
 80026da:	a201      	add	r2, pc, #4	@ (adr r2, 80026e0 <DMA_CheckFifoParam+0x70>)
 80026dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e0:	080026f1 	.word	0x080026f1
 80026e4:	080026f7 	.word	0x080026f7
 80026e8:	080026f1 	.word	0x080026f1
 80026ec:	08002709 	.word	0x08002709
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
      break;
 80026f4:	e030      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d025      	beq.n	800274e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002706:	e022      	b.n	800274e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002710:	d11f      	bne.n	8002752 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002716:	e01c      	b.n	8002752 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d903      	bls.n	8002726 <DMA_CheckFifoParam+0xb6>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d003      	beq.n	800272c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002724:	e018      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
      break;
 800272a:	e015      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002730:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00e      	beq.n	8002756 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      break;
 800273c:	e00b      	b.n	8002756 <DMA_CheckFifoParam+0xe6>
      break;
 800273e:	bf00      	nop
 8002740:	e00a      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 8002742:	bf00      	nop
 8002744:	e008      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
 8002748:	e006      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
 800274c:	e004      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 800274e:	bf00      	nop
 8002750:	e002      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;   
 8002752:	bf00      	nop
 8002754:	e000      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 8002756:	bf00      	nop
    }
  } 
  
  return status; 
 8002758:	7bfb      	ldrb	r3, [r7, #15]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop

08002768 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800277a:	4b23      	ldr	r3, [pc, #140]	@ (8002808 <HAL_FLASH_Program+0xa0>)
 800277c:	7e1b      	ldrb	r3, [r3, #24]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_FLASH_Program+0x1e>
 8002782:	2302      	movs	r3, #2
 8002784:	e03b      	b.n	80027fe <HAL_FLASH_Program+0x96>
 8002786:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <HAL_FLASH_Program+0xa0>)
 8002788:	2201      	movs	r2, #1
 800278a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800278c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002790:	f000 f870 	bl	8002874 <FLASH_WaitForLastOperation>
 8002794:	4603      	mov	r3, r0
 8002796:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d12b      	bne.n	80027f6 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80027a4:	783b      	ldrb	r3, [r7, #0]
 80027a6:	4619      	mov	r1, r3
 80027a8:	68b8      	ldr	r0, [r7, #8]
 80027aa:	f000 f91b 	bl	80029e4 <FLASH_Program_Byte>
 80027ae:	e016      	b.n	80027de <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d105      	bne.n	80027c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80027b6:	883b      	ldrh	r3, [r7, #0]
 80027b8:	4619      	mov	r1, r3
 80027ba:	68b8      	ldr	r0, [r7, #8]
 80027bc:	f000 f8ee 	bl	800299c <FLASH_Program_HalfWord>
 80027c0:	e00d      	b.n	80027de <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d105      	bne.n	80027d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	68b8      	ldr	r0, [r7, #8]
 80027ce:	f000 f8c3 	bl	8002958 <FLASH_Program_Word>
 80027d2:	e004      	b.n	80027de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80027d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027d8:	68b8      	ldr	r0, [r7, #8]
 80027da:	f000 f88b 	bl	80028f4 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027de:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80027e2:	f000 f847 	bl	8002874 <FLASH_WaitForLastOperation>
 80027e6:	4603      	mov	r3, r0
 80027e8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80027ea:	4b08      	ldr	r3, [pc, #32]	@ (800280c <HAL_FLASH_Program+0xa4>)
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	4a07      	ldr	r2, [pc, #28]	@ (800280c <HAL_FLASH_Program+0xa4>)
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027f6:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <HAL_FLASH_Program+0xa0>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	761a      	strb	r2, [r3, #24]

  return status;
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000570 	.word	0x20000570
 800280c:	40023c00 	.word	0x40023c00

08002810 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_FLASH_Unlock+0x38>)
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	da0b      	bge.n	800283a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_FLASH_Unlock+0x38>)
 8002824:	4a09      	ldr	r2, [pc, #36]	@ (800284c <HAL_FLASH_Unlock+0x3c>)
 8002826:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002828:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <HAL_FLASH_Unlock+0x38>)
 800282a:	4a09      	ldr	r2, [pc, #36]	@ (8002850 <HAL_FLASH_Unlock+0x40>)
 800282c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800282e:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_FLASH_Unlock+0x38>)
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	da01      	bge.n	800283a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800283a:	79fb      	ldrb	r3, [r7, #7]
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40023c00 	.word	0x40023c00
 800284c:	45670123 	.word	0x45670123
 8002850:	cdef89ab 	.word	0xcdef89ab

08002854 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <HAL_FLASH_Lock+0x1c>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <HAL_FLASH_Lock+0x1c>)
 800285e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002862:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40023c00 	.word	0x40023c00

08002874 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002880:	4b1a      	ldr	r3, [pc, #104]	@ (80028ec <FLASH_WaitForLastOperation+0x78>)
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002886:	f7ff fa11 	bl	8001cac <HAL_GetTick>
 800288a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800288c:	e010      	b.n	80028b0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002894:	d00c      	beq.n	80028b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <FLASH_WaitForLastOperation+0x38>
 800289c:	f7ff fa06 	bl	8001cac <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d201      	bcs.n	80028b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e019      	b.n	80028e4 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80028b0:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <FLASH_WaitForLastOperation+0x7c>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e8      	bne.n	800288e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <FLASH_WaitForLastOperation+0x7c>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80028c8:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <FLASH_WaitForLastOperation+0x7c>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80028ce:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <FLASH_WaitForLastOperation+0x7c>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80028da:	f000 f8a5 	bl	8002a28 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0

}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000570 	.word	0x20000570
 80028f0:	40023c00 	.word	0x40023c00

080028f4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002900:	4b14      	ldr	r3, [pc, #80]	@ (8002954 <FLASH_Program_DoubleWord+0x60>)
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	4a13      	ldr	r2, [pc, #76]	@ (8002954 <FLASH_Program_DoubleWord+0x60>)
 8002906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800290a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <FLASH_Program_DoubleWord+0x60>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	4a10      	ldr	r2, [pc, #64]	@ (8002954 <FLASH_Program_DoubleWord+0x60>)
 8002912:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002916:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002918:	4b0e      	ldr	r3, [pc, #56]	@ (8002954 <FLASH_Program_DoubleWord+0x60>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	4a0d      	ldr	r2, [pc, #52]	@ (8002954 <FLASH_Program_DoubleWord+0x60>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800292a:	f3bf 8f6f 	isb	sy
}
 800292e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	000a      	movs	r2, r1
 800293e:	2300      	movs	r3, #0
 8002940:	68f9      	ldr	r1, [r7, #12]
 8002942:	3104      	adds	r1, #4
 8002944:	4613      	mov	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40023c00 	.word	0x40023c00

08002958 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <FLASH_Program_Word+0x40>)
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	4a0c      	ldr	r2, [pc, #48]	@ (8002998 <FLASH_Program_Word+0x40>)
 8002968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800296c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800296e:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <FLASH_Program_Word+0x40>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	4a09      	ldr	r2, [pc, #36]	@ (8002998 <FLASH_Program_Word+0x40>)
 8002974:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002978:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800297a:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <FLASH_Program_Word+0x40>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	4a06      	ldr	r2, [pc, #24]	@ (8002998 <FLASH_Program_Word+0x40>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	601a      	str	r2, [r3, #0]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40023c00 	.word	0x40023c00

0800299c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029a8:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <FLASH_Program_HalfWord+0x44>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	4a0c      	ldr	r2, [pc, #48]	@ (80029e0 <FLASH_Program_HalfWord+0x44>)
 80029ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80029b4:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <FLASH_Program_HalfWord+0x44>)
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	4a09      	ldr	r2, [pc, #36]	@ (80029e0 <FLASH_Program_HalfWord+0x44>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029c0:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <FLASH_Program_HalfWord+0x44>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4a06      	ldr	r2, [pc, #24]	@ (80029e0 <FLASH_Program_HalfWord+0x44>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	801a      	strh	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00

080029e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <FLASH_Program_Byte+0x40>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002a24 <FLASH_Program_Byte+0x40>)
 80029f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80029fc:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <FLASH_Program_Byte+0x40>)
 80029fe:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <FLASH_Program_Byte+0x40>)
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a04:	4b07      	ldr	r3, [pc, #28]	@ (8002a24 <FLASH_Program_Byte+0x40>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	4a06      	ldr	r2, [pc, #24]	@ (8002a24 <FLASH_Program_Byte+0x40>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	701a      	strb	r2, [r3, #0]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40023c00 	.word	0x40023c00

08002a28 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002a2c:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <FLASH_SetErrorCode+0xa4>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a38:	4b25      	ldr	r3, [pc, #148]	@ (8002ad0 <FLASH_SetErrorCode+0xa8>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f043 0310 	orr.w	r3, r3, #16
 8002a40:	4a23      	ldr	r2, [pc, #140]	@ (8002ad0 <FLASH_SetErrorCode+0xa8>)
 8002a42:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002a44:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <FLASH_SetErrorCode+0xa4>)
 8002a46:	2210      	movs	r2, #16
 8002a48:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002a4a:	4b20      	ldr	r3, [pc, #128]	@ (8002acc <FLASH_SetErrorCode+0xa4>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002a56:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad0 <FLASH_SetErrorCode+0xa8>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f043 0308 	orr.w	r3, r3, #8
 8002a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad0 <FLASH_SetErrorCode+0xa8>)
 8002a60:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002a62:	4b1a      	ldr	r3, [pc, #104]	@ (8002acc <FLASH_SetErrorCode+0xa4>)
 8002a64:	2220      	movs	r2, #32
 8002a66:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002a68:	4b18      	ldr	r3, [pc, #96]	@ (8002acc <FLASH_SetErrorCode+0xa4>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002a74:	4b16      	ldr	r3, [pc, #88]	@ (8002ad0 <FLASH_SetErrorCode+0xa8>)
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f043 0304 	orr.w	r3, r3, #4
 8002a7c:	4a14      	ldr	r2, [pc, #80]	@ (8002ad0 <FLASH_SetErrorCode+0xa8>)
 8002a7e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002a80:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <FLASH_SetErrorCode+0xa4>)
 8002a82:	2240      	movs	r2, #64	@ 0x40
 8002a84:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002a86:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <FLASH_SetErrorCode+0xa4>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002a92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad0 <FLASH_SetErrorCode+0xa8>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad0 <FLASH_SetErrorCode+0xa8>)
 8002a9c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <FLASH_SetErrorCode+0xa4>)
 8002aa0:	2280      	movs	r2, #128	@ 0x80
 8002aa2:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002aa4:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <FLASH_SetErrorCode+0xa4>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002ab0:	4b07      	ldr	r3, [pc, #28]	@ (8002ad0 <FLASH_SetErrorCode+0xa8>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f043 0320 	orr.w	r3, r3, #32
 8002ab8:	4a05      	ldr	r2, [pc, #20]	@ (8002ad0 <FLASH_SetErrorCode+0xa8>)
 8002aba:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002abc:	4b03      	ldr	r3, [pc, #12]	@ (8002acc <FLASH_SetErrorCode+0xa4>)
 8002abe:	2202      	movs	r2, #2
 8002ac0:	60da      	str	r2, [r3, #12]
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40023c00 	.word	0x40023c00
 8002ad0:	20000570 	.word	0x20000570

08002ad4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ae6:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <HAL_FLASHEx_Erase+0xd8>)
 8002ae8:	7e1b      	ldrb	r3, [r3, #24]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_FLASHEx_Erase+0x1e>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e058      	b.n	8002ba4 <HAL_FLASHEx_Erase+0xd0>
 8002af2:	4b2e      	ldr	r3, [pc, #184]	@ (8002bac <HAL_FLASHEx_Erase+0xd8>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002af8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002afc:	f7ff feba 	bl	8002874 <FLASH_WaitForLastOperation>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d148      	bne.n	8002b9c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d115      	bne.n	8002b46 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f000 f844 	bl	8002bb4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b2c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b30:	f7ff fea0 	bl	8002874 <FLASH_WaitForLastOperation>
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002b38:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <HAL_FLASHEx_Erase+0xdc>)
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb0 <HAL_FLASHEx_Erase+0xdc>)
 8002b3e:	f023 0304 	bic.w	r3, r3, #4
 8002b42:	6113      	str	r3, [r2, #16]
 8002b44:	e028      	b.n	8002b98 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	e01c      	b.n	8002b88 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	4619      	mov	r1, r3
 8002b56:	68b8      	ldr	r0, [r7, #8]
 8002b58:	f000 f850 	bl	8002bfc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b5c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b60:	f7ff fe88 	bl	8002874 <FLASH_WaitForLastOperation>
 8002b64:	4603      	mov	r3, r0
 8002b66:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <HAL_FLASHEx_Erase+0xdc>)
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	4a10      	ldr	r2, [pc, #64]	@ (8002bb0 <HAL_FLASHEx_Erase+0xdc>)
 8002b6e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002b72:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	601a      	str	r2, [r3, #0]
          break;
 8002b80:	e00a      	b.n	8002b98 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3301      	adds	r3, #1
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4413      	add	r3, r2
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d3da      	bcc.n	8002b4e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002b98:	f000 f878 	bl	8002c8c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b9c:	4b03      	ldr	r3, [pc, #12]	@ (8002bac <HAL_FLASHEx_Erase+0xd8>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	761a      	strb	r2, [r3, #24]

  return status;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000570 	.word	0x20000570
 8002bb0:	40023c00 	.word	0x40023c00

08002bb4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	6039      	str	r1, [r7, #0]
 8002bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <FLASH_MassErase+0x44>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf8 <FLASH_MassErase+0x44>)
 8002bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf8 <FLASH_MassErase+0x44>)
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	4a09      	ldr	r2, [pc, #36]	@ (8002bf8 <FLASH_MassErase+0x44>)
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002bd8:	4b07      	ldr	r3, [pc, #28]	@ (8002bf8 <FLASH_MassErase+0x44>)
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	4313      	orrs	r3, r2
 8002be2:	4a05      	ldr	r2, [pc, #20]	@ (8002bf8 <FLASH_MassErase+0x44>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be8:	6113      	str	r3, [r2, #16]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00

08002bfc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e010      	b.n	8002c3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d103      	bne.n	8002c26 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e009      	b.n	8002c3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d103      	bne.n	8002c34 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e002      	b.n	8002c3a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002c34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c38:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c3a:	4b13      	ldr	r3, [pc, #76]	@ (8002c88 <FLASH_Erase_Sector+0x8c>)
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	4a12      	ldr	r2, [pc, #72]	@ (8002c88 <FLASH_Erase_Sector+0x8c>)
 8002c40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002c46:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <FLASH_Erase_Sector+0x8c>)
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	490f      	ldr	r1, [pc, #60]	@ (8002c88 <FLASH_Erase_Sector+0x8c>)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002c52:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <FLASH_Erase_Sector+0x8c>)
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	4a0c      	ldr	r2, [pc, #48]	@ (8002c88 <FLASH_Erase_Sector+0x8c>)
 8002c58:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002c5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <FLASH_Erase_Sector+0x8c>)
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4313      	orrs	r3, r2
 8002c68:	4a07      	ldr	r2, [pc, #28]	@ (8002c88 <FLASH_Erase_Sector+0x8c>)
 8002c6a:	f043 0302 	orr.w	r3, r3, #2
 8002c6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <FLASH_Erase_Sector+0x8c>)
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <FLASH_Erase_Sector+0x8c>)
 8002c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7a:	6113      	str	r3, [r2, #16]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40023c00 	.word	0x40023c00

08002c8c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002c90:	4b20      	ldr	r3, [pc, #128]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d017      	beq.n	8002ccc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002ca2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ca6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a19      	ldr	r2, [pc, #100]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002cae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a16      	ldr	r2, [pc, #88]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002cba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cbe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc0:	4b14      	ldr	r3, [pc, #80]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a13      	ldr	r2, [pc, #76]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cca:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002ccc:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d017      	beq.n	8002d08 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002cde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ce2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002cea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a07      	ldr	r2, [pc, #28]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002cf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cfa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <FLASH_FlushCaches+0x88>)
 8002d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d06:	6013      	str	r3, [r2, #0]
  }
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40023c00 	.word	0x40023c00

08002d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	@ 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	e16b      	b.n	800300c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	f040 815a 	bne.w	8003006 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d005      	beq.n	8002d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d130      	bne.n	8002dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da0:	2201      	movs	r2, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 0201 	and.w	r2, r3, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d017      	beq.n	8002e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d123      	bne.n	8002e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	69b9      	ldr	r1, [r7, #24]
 8002e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0203 	and.w	r2, r3, #3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80b4 	beq.w	8003006 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	4b60      	ldr	r3, [pc, #384]	@ (8003024 <HAL_GPIO_Init+0x30c>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	4a5f      	ldr	r2, [pc, #380]	@ (8003024 <HAL_GPIO_Init+0x30c>)
 8002ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eae:	4b5d      	ldr	r3, [pc, #372]	@ (8003024 <HAL_GPIO_Init+0x30c>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eba:	4a5b      	ldr	r2, [pc, #364]	@ (8003028 <HAL_GPIO_Init+0x310>)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a52      	ldr	r2, [pc, #328]	@ (800302c <HAL_GPIO_Init+0x314>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d02b      	beq.n	8002f3e <HAL_GPIO_Init+0x226>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a51      	ldr	r2, [pc, #324]	@ (8003030 <HAL_GPIO_Init+0x318>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d025      	beq.n	8002f3a <HAL_GPIO_Init+0x222>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a50      	ldr	r2, [pc, #320]	@ (8003034 <HAL_GPIO_Init+0x31c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d01f      	beq.n	8002f36 <HAL_GPIO_Init+0x21e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4f      	ldr	r2, [pc, #316]	@ (8003038 <HAL_GPIO_Init+0x320>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d019      	beq.n	8002f32 <HAL_GPIO_Init+0x21a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4e      	ldr	r2, [pc, #312]	@ (800303c <HAL_GPIO_Init+0x324>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0x216>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4d      	ldr	r2, [pc, #308]	@ (8003040 <HAL_GPIO_Init+0x328>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_GPIO_Init+0x212>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4c      	ldr	r2, [pc, #304]	@ (8003044 <HAL_GPIO_Init+0x32c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_Init+0x20e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4b      	ldr	r2, [pc, #300]	@ (8003048 <HAL_GPIO_Init+0x330>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_GPIO_Init+0x20a>
 8002f1e:	2307      	movs	r3, #7
 8002f20:	e00e      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f22:	2308      	movs	r3, #8
 8002f24:	e00c      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f26:	2306      	movs	r3, #6
 8002f28:	e00a      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	e008      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f2e:	2304      	movs	r3, #4
 8002f30:	e006      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f32:	2303      	movs	r3, #3
 8002f34:	e004      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e002      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	f002 0203 	and.w	r2, r2, #3
 8002f46:	0092      	lsls	r2, r2, #2
 8002f48:	4093      	lsls	r3, r2
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f50:	4935      	ldr	r1, [pc, #212]	@ (8003028 <HAL_GPIO_Init+0x310>)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	3302      	adds	r3, #2
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f82:	4a32      	ldr	r2, [pc, #200]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f88:	4b30      	ldr	r3, [pc, #192]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fac:	4a27      	ldr	r2, [pc, #156]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fb2:	4b26      	ldr	r3, [pc, #152]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003000:	4a12      	ldr	r2, [pc, #72]	@ (800304c <HAL_GPIO_Init+0x334>)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3301      	adds	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b0f      	cmp	r3, #15
 8003010:	f67f ae90 	bls.w	8002d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	3724      	adds	r7, #36	@ 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	40013800 	.word	0x40013800
 800302c:	40020000 	.word	0x40020000
 8003030:	40020400 	.word	0x40020400
 8003034:	40020800 	.word	0x40020800
 8003038:	40020c00 	.word	0x40020c00
 800303c:	40021000 	.word	0x40021000
 8003040:	40021400 	.word	0x40021400
 8003044:	40021800 	.word	0x40021800
 8003048:	40021c00 	.word	0x40021c00
 800304c:	40013c00 	.word	0x40013c00

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800306c:	e003      	b.n	8003076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	619a      	str	r2, [r3, #24]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e267      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d075      	beq.n	800318e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030a2:	4b88      	ldr	r3, [pc, #544]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d00c      	beq.n	80030c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ae:	4b85      	ldr	r3, [pc, #532]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d112      	bne.n	80030e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ba:	4b82      	ldr	r3, [pc, #520]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030c6:	d10b      	bne.n	80030e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	4b7e      	ldr	r3, [pc, #504]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d05b      	beq.n	800318c <HAL_RCC_OscConfig+0x108>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d157      	bne.n	800318c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e242      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e8:	d106      	bne.n	80030f8 <HAL_RCC_OscConfig+0x74>
 80030ea:	4b76      	ldr	r3, [pc, #472]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a75      	ldr	r2, [pc, #468]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e01d      	b.n	8003134 <HAL_RCC_OscConfig+0xb0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x98>
 8003102:	4b70      	ldr	r3, [pc, #448]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6f      	ldr	r2, [pc, #444]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b6d      	ldr	r3, [pc, #436]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6c      	ldr	r2, [pc, #432]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0xb0>
 800311c:	4b69      	ldr	r3, [pc, #420]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a68      	ldr	r2, [pc, #416]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b66      	ldr	r3, [pc, #408]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a65      	ldr	r2, [pc, #404]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fdb6 	bl	8001cac <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe fdb2 	bl	8001cac <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	@ 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e207      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b5b      	ldr	r3, [pc, #364]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0xc0>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe fda2 	bl	8001cac <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe fd9e 	bl	8001cac <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	@ 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e1f3      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	4b51      	ldr	r3, [pc, #324]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0xe8>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d063      	beq.n	8003262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800319a:	4b4a      	ldr	r3, [pc, #296]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a6:	4b47      	ldr	r3, [pc, #284]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d11c      	bne.n	80031ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b2:	4b44      	ldr	r3, [pc, #272]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	4b41      	ldr	r3, [pc, #260]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_RCC_OscConfig+0x152>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e1c7      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d6:	4b3b      	ldr	r3, [pc, #236]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4937      	ldr	r1, [pc, #220]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	e03a      	b.n	8003262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f4:	4b34      	ldr	r3, [pc, #208]	@ (80032c8 <HAL_RCC_OscConfig+0x244>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fa:	f7fe fd57 	bl	8001cac <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003202:	f7fe fd53 	bl	8001cac <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e1a8      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	4b2b      	ldr	r3, [pc, #172]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003220:	4b28      	ldr	r3, [pc, #160]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4925      	ldr	r1, [pc, #148]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
 8003234:	e015      	b.n	8003262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003236:	4b24      	ldr	r3, [pc, #144]	@ (80032c8 <HAL_RCC_OscConfig+0x244>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fd36 	bl	8001cac <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003244:	f7fe fd32 	bl	8001cac <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e187      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d036      	beq.n	80032dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d016      	beq.n	80032a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003276:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <HAL_RCC_OscConfig+0x248>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fe fd16 	bl	8001cac <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003284:	f7fe fd12 	bl	8001cac <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e167      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x200>
 80032a2:	e01b      	b.n	80032dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a4:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <HAL_RCC_OscConfig+0x248>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032aa:	f7fe fcff 	bl	8001cac <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b0:	e00e      	b.n	80032d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b2:	f7fe fcfb 	bl	8001cac <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d907      	bls.n	80032d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e150      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	42470000 	.word	0x42470000
 80032cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	4b88      	ldr	r3, [pc, #544]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80032d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ea      	bne.n	80032b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8097 	beq.w	8003418 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ee:	4b81      	ldr	r3, [pc, #516]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	4b7d      	ldr	r3, [pc, #500]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	4a7c      	ldr	r2, [pc, #496]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003308:	6413      	str	r3, [r2, #64]	@ 0x40
 800330a:	4b7a      	ldr	r3, [pc, #488]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331a:	4b77      	ldr	r3, [pc, #476]	@ (80034f8 <HAL_RCC_OscConfig+0x474>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d118      	bne.n	8003358 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003326:	4b74      	ldr	r3, [pc, #464]	@ (80034f8 <HAL_RCC_OscConfig+0x474>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a73      	ldr	r2, [pc, #460]	@ (80034f8 <HAL_RCC_OscConfig+0x474>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003332:	f7fe fcbb 	bl	8001cac <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333a:	f7fe fcb7 	bl	8001cac <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e10c      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	4b6a      	ldr	r3, [pc, #424]	@ (80034f8 <HAL_RCC_OscConfig+0x474>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x2ea>
 8003360:	4b64      	ldr	r3, [pc, #400]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003364:	4a63      	ldr	r2, [pc, #396]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6713      	str	r3, [r2, #112]	@ 0x70
 800336c:	e01c      	b.n	80033a8 <HAL_RCC_OscConfig+0x324>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b05      	cmp	r3, #5
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x30c>
 8003376:	4b5f      	ldr	r3, [pc, #380]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337a:	4a5e      	ldr	r2, [pc, #376]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	6713      	str	r3, [r2, #112]	@ 0x70
 8003382:	4b5c      	ldr	r3, [pc, #368]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003386:	4a5b      	ldr	r2, [pc, #364]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6713      	str	r3, [r2, #112]	@ 0x70
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0x324>
 8003390:	4b58      	ldr	r3, [pc, #352]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003394:	4a57      	ldr	r2, [pc, #348]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	@ 0x70
 800339c:	4b55      	ldr	r3, [pc, #340]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a0:	4a54      	ldr	r2, [pc, #336]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80033a2:	f023 0304 	bic.w	r3, r3, #4
 80033a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d015      	beq.n	80033dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fe fc7c 	bl	8001cac <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe fc78 	bl	8001cac <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0cb      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	4b49      	ldr	r3, [pc, #292]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0ee      	beq.n	80033b8 <HAL_RCC_OscConfig+0x334>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033dc:	f7fe fc66 	bl	8001cac <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7fe fc62 	bl	8001cac <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0b5      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fa:	4b3e      	ldr	r3, [pc, #248]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1ee      	bne.n	80033e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d105      	bne.n	8003418 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340c:	4b39      	ldr	r3, [pc, #228]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	4a38      	ldr	r2, [pc, #224]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003416:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a1 	beq.w	8003564 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003422:	4b34      	ldr	r3, [pc, #208]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b08      	cmp	r3, #8
 800342c:	d05c      	beq.n	80034e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d141      	bne.n	80034ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b31      	ldr	r3, [pc, #196]	@ (80034fc <HAL_RCC_OscConfig+0x478>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fe fc36 	bl	8001cac <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe fc32 	bl	8001cac <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e087      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	4b27      	ldr	r3, [pc, #156]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	3b01      	subs	r3, #1
 800347c:	041b      	lsls	r3, r3, #16
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	061b      	lsls	r3, r3, #24
 8003486:	491b      	ldr	r1, [pc, #108]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003488:	4313      	orrs	r3, r2
 800348a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800348c:	4b1b      	ldr	r3, [pc, #108]	@ (80034fc <HAL_RCC_OscConfig+0x478>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7fe fc0b 	bl	8001cac <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349a:	f7fe fc07 	bl	8001cac <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e05c      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ac:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x416>
 80034b8:	e054      	b.n	8003564 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ba:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <HAL_RCC_OscConfig+0x478>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe fbf4 	bl	8001cac <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe fbf0 	bl	8001cac <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e045      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x444>
 80034e6:	e03d      	b.n	8003564 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d107      	bne.n	8003500 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e038      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40007000 	.word	0x40007000
 80034fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003500:	4b1b      	ldr	r3, [pc, #108]	@ (8003570 <HAL_RCC_OscConfig+0x4ec>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d028      	beq.n	8003560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d121      	bne.n	8003560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d11a      	bne.n	8003560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003530:	4013      	ands	r3, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003538:	4293      	cmp	r3, r2
 800353a:	d111      	bne.n	8003560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003546:	085b      	lsrs	r3, r3, #1
 8003548:	3b01      	subs	r3, #1
 800354a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d107      	bne.n	8003560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800

08003574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0cc      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003588:	4b68      	ldr	r3, [pc, #416]	@ (800372c <HAL_RCC_ClockConfig+0x1b8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d90c      	bls.n	80035b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b65      	ldr	r3, [pc, #404]	@ (800372c <HAL_RCC_ClockConfig+0x1b8>)
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359e:	4b63      	ldr	r3, [pc, #396]	@ (800372c <HAL_RCC_ClockConfig+0x1b8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0b8      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d020      	beq.n	80035fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c8:	4b59      	ldr	r3, [pc, #356]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	4a58      	ldr	r2, [pc, #352]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e0:	4b53      	ldr	r3, [pc, #332]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a52      	ldr	r2, [pc, #328]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ec:	4b50      	ldr	r3, [pc, #320]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	494d      	ldr	r1, [pc, #308]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d044      	beq.n	8003694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d107      	bne.n	8003622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	4b47      	ldr	r3, [pc, #284]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d119      	bne.n	8003652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e07f      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d003      	beq.n	8003632 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800362e:	2b03      	cmp	r3, #3
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003632:	4b3f      	ldr	r3, [pc, #252]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e06f      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003642:	4b3b      	ldr	r3, [pc, #236]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e067      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003652:	4b37      	ldr	r3, [pc, #220]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f023 0203 	bic.w	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4934      	ldr	r1, [pc, #208]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	4313      	orrs	r3, r2
 8003662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003664:	f7fe fb22 	bl	8001cac <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	e00a      	b.n	8003682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366c:	f7fe fb1e 	bl	8001cac <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e04f      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	4b2b      	ldr	r3, [pc, #172]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 020c 	and.w	r2, r3, #12
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	429a      	cmp	r2, r3
 8003692:	d1eb      	bne.n	800366c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003694:	4b25      	ldr	r3, [pc, #148]	@ (800372c <HAL_RCC_ClockConfig+0x1b8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d20c      	bcs.n	80036bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a2:	4b22      	ldr	r3, [pc, #136]	@ (800372c <HAL_RCC_ClockConfig+0x1b8>)
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b20      	ldr	r3, [pc, #128]	@ (800372c <HAL_RCC_ClockConfig+0x1b8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e032      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c8:	4b19      	ldr	r3, [pc, #100]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4916      	ldr	r1, [pc, #88]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e6:	4b12      	ldr	r3, [pc, #72]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	490e      	ldr	r1, [pc, #56]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036fa:	f000 f821 	bl	8003740 <HAL_RCC_GetSysClockFreq>
 80036fe:	4602      	mov	r2, r0
 8003700:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	490a      	ldr	r1, [pc, #40]	@ (8003734 <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	5ccb      	ldrb	r3, [r1, r3]
 800370e:	fa22 f303 	lsr.w	r3, r2, r3
 8003712:	4a09      	ldr	r2, [pc, #36]	@ (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 8003714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003716:	4b09      	ldr	r3, [pc, #36]	@ (800373c <HAL_RCC_ClockConfig+0x1c8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fa82 	bl	8001c24 <HAL_InitTick>

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40023c00 	.word	0x40023c00
 8003730:	40023800 	.word	0x40023800
 8003734:	08011c9c 	.word	0x08011c9c
 8003738:	20000000 	.word	0x20000000
 800373c:	20000004 	.word	0x20000004

08003740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003744:	b090      	sub	sp, #64	@ 0x40
 8003746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003758:	4b59      	ldr	r3, [pc, #356]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	d00d      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x40>
 8003764:	2b08      	cmp	r3, #8
 8003766:	f200 80a1 	bhi.w	80038ac <HAL_RCC_GetSysClockFreq+0x16c>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x34>
 800376e:	2b04      	cmp	r3, #4
 8003770:	d003      	beq.n	800377a <HAL_RCC_GetSysClockFreq+0x3a>
 8003772:	e09b      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003774:	4b53      	ldr	r3, [pc, #332]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003776:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003778:	e09b      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800377a:	4b53      	ldr	r3, [pc, #332]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800377c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800377e:	e098      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003780:	4b4f      	ldr	r3, [pc, #316]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003788:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800378a:	4b4d      	ldr	r3, [pc, #308]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d028      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003796:	4b4a      	ldr	r3, [pc, #296]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	099b      	lsrs	r3, r3, #6
 800379c:	2200      	movs	r2, #0
 800379e:	623b      	str	r3, [r7, #32]
 80037a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037a8:	2100      	movs	r1, #0
 80037aa:	4b47      	ldr	r3, [pc, #284]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ac:	fb03 f201 	mul.w	r2, r3, r1
 80037b0:	2300      	movs	r3, #0
 80037b2:	fb00 f303 	mul.w	r3, r0, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	4a43      	ldr	r2, [pc, #268]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ba:	fba0 1202 	umull	r1, r2, r0, r2
 80037be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037c0:	460a      	mov	r2, r1
 80037c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80037c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037c6:	4413      	add	r3, r2
 80037c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037cc:	2200      	movs	r2, #0
 80037ce:	61bb      	str	r3, [r7, #24]
 80037d0:	61fa      	str	r2, [r7, #28]
 80037d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80037da:	f7fd f967 	bl	8000aac <__aeabi_uldivmod>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4613      	mov	r3, r2
 80037e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037e6:	e053      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e8:	4b35      	ldr	r3, [pc, #212]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	099b      	lsrs	r3, r3, #6
 80037ee:	2200      	movs	r2, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	617a      	str	r2, [r7, #20]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037fa:	f04f 0b00 	mov.w	fp, #0
 80037fe:	4652      	mov	r2, sl
 8003800:	465b      	mov	r3, fp
 8003802:	f04f 0000 	mov.w	r0, #0
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	0159      	lsls	r1, r3, #5
 800380c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003810:	0150      	lsls	r0, r2, #5
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	ebb2 080a 	subs.w	r8, r2, sl
 800381a:	eb63 090b 	sbc.w	r9, r3, fp
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800382a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800382e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003832:	ebb2 0408 	subs.w	r4, r2, r8
 8003836:	eb63 0509 	sbc.w	r5, r3, r9
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	00eb      	lsls	r3, r5, #3
 8003844:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003848:	00e2      	lsls	r2, r4, #3
 800384a:	4614      	mov	r4, r2
 800384c:	461d      	mov	r5, r3
 800384e:	eb14 030a 	adds.w	r3, r4, sl
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	eb45 030b 	adc.w	r3, r5, fp
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003866:	4629      	mov	r1, r5
 8003868:	028b      	lsls	r3, r1, #10
 800386a:	4621      	mov	r1, r4
 800386c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003870:	4621      	mov	r1, r4
 8003872:	028a      	lsls	r2, r1, #10
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387a:	2200      	movs	r2, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	60fa      	str	r2, [r7, #12]
 8003880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003884:	f7fd f912 	bl	8000aac <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4613      	mov	r3, r2
 800388e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003890:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	3301      	adds	r3, #1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80038a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038aa:	e002      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038ac:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80038ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3740      	adds	r7, #64	@ 0x40
 80038b8:	46bd      	mov	sp, r7
 80038ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800
 80038c4:	00f42400 	.word	0x00f42400
 80038c8:	017d7840 	.word	0x017d7840

080038cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d0:	4b03      	ldr	r3, [pc, #12]	@ (80038e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000000 	.word	0x20000000

080038e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038e8:	f7ff fff0 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b05      	ldr	r3, [pc, #20]	@ (8003904 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	0a9b      	lsrs	r3, r3, #10
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	4903      	ldr	r1, [pc, #12]	@ (8003908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40023800 	.word	0x40023800
 8003908:	08011cac 	.word	0x08011cac

0800390c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003910:	f7ff ffdc 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 8003914:	4602      	mov	r2, r0
 8003916:	4b05      	ldr	r3, [pc, #20]	@ (800392c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	0b5b      	lsrs	r3, r3, #13
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	4903      	ldr	r1, [pc, #12]	@ (8003930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003922:	5ccb      	ldrb	r3, [r1, r3]
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003928:	4618      	mov	r0, r3
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40023800 	.word	0x40023800
 8003930:	08011cac 	.word	0x08011cac

08003934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07b      	b.n	8003a3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	d108      	bne.n	8003960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003956:	d009      	beq.n	800396c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	61da      	str	r2, [r3, #28]
 800395e:	e005      	b.n	800396c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fc9e 	bl	80012c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f0:	ea42 0103 	orr.w	r1, r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f003 0104 	and.w	r1, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	f003 0210 	and.w	r2, r3, #16
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b088      	sub	sp, #32
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a56:	f7fe f929 	bl	8001cac <HAL_GetTick>
 8003a5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d001      	beq.n	8003a70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e12a      	b.n	8003cc6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_SPI_Transmit+0x36>
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e122      	b.n	8003cc6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_SPI_Transmit+0x48>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e11b      	b.n	8003cc6 <HAL_SPI_Transmit+0x280>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2203      	movs	r2, #3
 8003a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	88fa      	ldrh	r2, [r7, #6]
 8003aae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003adc:	d10f      	bne.n	8003afe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003afc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b40      	cmp	r3, #64	@ 0x40
 8003b0a:	d007      	beq.n	8003b1c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b24:	d152      	bne.n	8003bcc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_SPI_Transmit+0xee>
 8003b2e:	8b7b      	ldrh	r3, [r7, #26]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d145      	bne.n	8003bc0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b38:	881a      	ldrh	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b44:	1c9a      	adds	r2, r3, #2
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b58:	e032      	b.n	8003bc0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d112      	bne.n	8003b8e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6c:	881a      	ldrh	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b78:	1c9a      	adds	r2, r3, #2
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b8c:	e018      	b.n	8003bc0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b8e:	f7fe f88d 	bl	8001cac <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d803      	bhi.n	8003ba6 <HAL_SPI_Transmit+0x160>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d102      	bne.n	8003bac <HAL_SPI_Transmit+0x166>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e082      	b.n	8003cc6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1c7      	bne.n	8003b5a <HAL_SPI_Transmit+0x114>
 8003bca:	e053      	b.n	8003c74 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_SPI_Transmit+0x194>
 8003bd4:	8b7b      	ldrh	r3, [r7, #26]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d147      	bne.n	8003c6a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c00:	e033      	b.n	8003c6a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d113      	bne.n	8003c38 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	7812      	ldrb	r2, [r2, #0]
 8003c1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c36:	e018      	b.n	8003c6a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c38:	f7fe f838 	bl	8001cac <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d803      	bhi.n	8003c50 <HAL_SPI_Transmit+0x20a>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d102      	bne.n	8003c56 <HAL_SPI_Transmit+0x210>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e02d      	b.n	8003cc6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1c6      	bne.n	8003c02 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	6839      	ldr	r1, [r7, #0]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f001 f8df 	bl	8004e3c <SPI_EndRxTxTransaction>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
  }
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b088      	sub	sp, #32
 8003cd2:	af02      	add	r7, sp, #8
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	603b      	str	r3, [r7, #0]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d001      	beq.n	8003cee <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
 8003cec:	e104      	b.n	8003ef8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cf6:	d112      	bne.n	8003d1e <HAL_SPI_Receive+0x50>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10e      	bne.n	8003d1e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2204      	movs	r2, #4
 8003d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f8f3 	bl	8003f00 <HAL_SPI_TransmitReceive>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	e0ec      	b.n	8003ef8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d1e:	f7fd ffc5 	bl	8001cac <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_SPI_Receive+0x62>
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0e1      	b.n	8003ef8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_SPI_Receive+0x74>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e0da      	b.n	8003ef8 <HAL_SPI_Receive+0x22a>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	88fa      	ldrh	r2, [r7, #6]
 8003d62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	88fa      	ldrh	r2, [r7, #6]
 8003d68:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d90:	d10f      	bne.n	8003db2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003da0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbc:	2b40      	cmp	r3, #64	@ 0x40
 8003dbe:	d007      	beq.n	8003dd0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d170      	bne.n	8003eba <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003dd8:	e035      	b.n	8003e46 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d115      	bne.n	8003e14 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f103 020c 	add.w	r2, r3, #12
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df4:	7812      	ldrb	r2, [r2, #0]
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e12:	e018      	b.n	8003e46 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e14:	f7fd ff4a 	bl	8001cac <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d803      	bhi.n	8003e2c <HAL_SPI_Receive+0x15e>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d102      	bne.n	8003e32 <HAL_SPI_Receive+0x164>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e058      	b.n	8003ef8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1c4      	bne.n	8003dda <HAL_SPI_Receive+0x10c>
 8003e50:	e038      	b.n	8003ec4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d113      	bne.n	8003e88 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6a:	b292      	uxth	r2, r2
 8003e6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e72:	1c9a      	adds	r2, r3, #2
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e86:	e018      	b.n	8003eba <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e88:	f7fd ff10 	bl	8001cac <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d803      	bhi.n	8003ea0 <HAL_SPI_Receive+0x1d2>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9e:	d102      	bne.n	8003ea6 <HAL_SPI_Receive+0x1d8>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e01e      	b.n	8003ef8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1c6      	bne.n	8003e52 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	6839      	ldr	r1, [r7, #0]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 ff51 	bl	8004d70 <SPI_EndRxTransaction>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
  }
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	@ 0x28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f12:	f7fd fecb 	bl	8001cac <HAL_GetTick>
 8003f16:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f1e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003f26:	887b      	ldrh	r3, [r7, #2]
 8003f28:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f2a:	7ffb      	ldrb	r3, [r7, #31]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d00c      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x4a>
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f36:	d106      	bne.n	8003f46 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d102      	bne.n	8003f46 <HAL_SPI_TransmitReceive+0x46>
 8003f40:	7ffb      	ldrb	r3, [r7, #31]
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d001      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
 8003f48:	e17f      	b.n	800424a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_SPI_TransmitReceive+0x5c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_SPI_TransmitReceive+0x5c>
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e174      	b.n	800424a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_SPI_TransmitReceive+0x6e>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e16d      	b.n	800424a <HAL_SPI_TransmitReceive+0x34a>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d003      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2205      	movs	r2, #5
 8003f86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	887a      	ldrh	r2, [r7, #2]
 8003f9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	887a      	ldrh	r2, [r7, #2]
 8003fa0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	887a      	ldrh	r2, [r7, #2]
 8003fac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	887a      	ldrh	r2, [r7, #2]
 8003fb2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fca:	2b40      	cmp	r3, #64	@ 0x40
 8003fcc:	d007      	beq.n	8003fde <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fe6:	d17e      	bne.n	80040e6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_SPI_TransmitReceive+0xf6>
 8003ff0:	8afb      	ldrh	r3, [r7, #22]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d16c      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	881a      	ldrh	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	1c9a      	adds	r2, r3, #2
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800401a:	e059      	b.n	80040d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d11b      	bne.n	8004062 <HAL_SPI_TransmitReceive+0x162>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d016      	beq.n	8004062 <HAL_SPI_TransmitReceive+0x162>
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	2b01      	cmp	r3, #1
 8004038:	d113      	bne.n	8004062 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	881a      	ldrh	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404a:	1c9a      	adds	r2, r3, #2
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b01      	cmp	r3, #1
 800406e:	d119      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x1a4>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d014      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004084:	b292      	uxth	r2, r2
 8004086:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408c:	1c9a      	adds	r2, r3, #2
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040a0:	2301      	movs	r3, #1
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040a4:	f7fd fe02 	bl	8001cac <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d80d      	bhi.n	80040d0 <HAL_SPI_TransmitReceive+0x1d0>
 80040b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d009      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e0bc      	b.n	800424a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1a0      	bne.n	800401c <HAL_SPI_TransmitReceive+0x11c>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d19b      	bne.n	800401c <HAL_SPI_TransmitReceive+0x11c>
 80040e4:	e082      	b.n	80041ec <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_SPI_TransmitReceive+0x1f4>
 80040ee:	8afb      	ldrh	r3, [r7, #22]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d171      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	7812      	ldrb	r2, [r2, #0]
 8004100:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800411a:	e05d      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d11c      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x264>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d017      	beq.n	8004164 <HAL_SPI_TransmitReceive+0x264>
 8004134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004136:	2b01      	cmp	r3, #1
 8004138:	d114      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	7812      	ldrb	r2, [r2, #0]
 8004146:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d119      	bne.n	80041a6 <HAL_SPI_TransmitReceive+0x2a6>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d014      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041a2:	2301      	movs	r3, #1
 80041a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041a6:	f7fd fd81 	bl	8001cac <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d803      	bhi.n	80041be <HAL_SPI_TransmitReceive+0x2be>
 80041b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d102      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x2c4>
 80041be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e038      	b.n	800424a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d19c      	bne.n	800411c <HAL_SPI_TransmitReceive+0x21c>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d197      	bne.n	800411c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fe23 	bl	8004e3c <SPI_EndRxTxTransaction>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e01d      	b.n	800424a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004248:	2300      	movs	r3, #0
  }
}
 800424a:	4618      	mov	r0, r3
 800424c:	3728      	adds	r7, #40	@ 0x28
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	4613      	mov	r3, r2
 8004260:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d001      	beq.n	8004272 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
 8004270:	e097      	b.n	80043a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <HAL_SPI_Transmit_DMA+0x2a>
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e08f      	b.n	80043a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_SPI_Transmit_DMA+0x3c>
 800428c:	2302      	movs	r3, #2
 800428e:	e088      	b.n	80043a2 <HAL_SPI_Transmit_DMA+0x14e>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2203      	movs	r2, #3
 800429c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042de:	d10f      	bne.n	8004300 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004304:	4a29      	ldr	r2, [pc, #164]	@ (80043ac <HAL_SPI_Transmit_DMA+0x158>)
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800430c:	4a28      	ldr	r2, [pc, #160]	@ (80043b0 <HAL_SPI_Transmit_DMA+0x15c>)
 800430e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004314:	4a27      	ldr	r2, [pc, #156]	@ (80043b4 <HAL_SPI_Transmit_DMA+0x160>)
 8004316:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800431c:	2200      	movs	r2, #0
 800431e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	4619      	mov	r1, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	330c      	adds	r3, #12
 8004330:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004336:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004338:	f7fd fec2 	bl	80020c0 <HAL_DMA_Start_IT>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004346:	f043 0210 	orr.w	r2, r3, #16
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e023      	b.n	80043a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004364:	2b40      	cmp	r3, #64	@ 0x40
 8004366:	d007      	beq.n	8004378 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004376:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0220 	orr.w	r2, r2, #32
 800438e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0202 	orr.w	r2, r2, #2
 800439e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	08004ba5 	.word	0x08004ba5
 80043b0:	080049c5 	.word	0x080049c5
 80043b4:	08004bf9 	.word	0x08004bf9

080043b8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d001      	beq.n	80043d6 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
 80043d4:	e0a9      	b.n	800452a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d110      	bne.n	8004400 <HAL_SPI_Receive_DMA+0x48>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043e6:	d10b      	bne.n	8004400 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2204      	movs	r2, #4
 80043ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f8a2 	bl	8004540 <HAL_SPI_TransmitReceive_DMA>
 80043fc:	4603      	mov	r3, r0
 80043fe:	e094      	b.n	800452a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_SPI_Receive_DMA+0x54>
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e08c      	b.n	800452a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_SPI_Receive_DMA+0x66>
 800441a:	2302      	movs	r3, #2
 800441c:	e085      	b.n	800452a <HAL_SPI_Receive_DMA+0x172>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2204      	movs	r2, #4
 800442a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004466:	d10f      	bne.n	8004488 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004476:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004486:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800448c:	4a29      	ldr	r2, [pc, #164]	@ (8004534 <HAL_SPI_Receive_DMA+0x17c>)
 800448e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004494:	4a28      	ldr	r2, [pc, #160]	@ (8004538 <HAL_SPI_Receive_DMA+0x180>)
 8004496:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449c:	4a27      	ldr	r2, [pc, #156]	@ (800453c <HAL_SPI_Receive_DMA+0x184>)
 800449e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a4:	2200      	movs	r2, #0
 80044a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	4619      	mov	r1, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80044c0:	f7fd fdfe 	bl	80020c0 <HAL_DMA_Start_IT>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ce:	f043 0210 	orr.w	r2, r3, #16
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e023      	b.n	800452a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ec:	2b40      	cmp	r3, #64	@ 0x40
 80044ee:	d007      	beq.n	8004500 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044fe:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0220 	orr.w	r2, r2, #32
 8004516:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	08004bc1 	.word	0x08004bc1
 8004538:	08004a6d 	.word	0x08004a6d
 800453c:	08004bf9 	.word	0x08004bf9

08004540 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004554:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d00c      	beq.n	800457c <HAL_SPI_TransmitReceive_DMA+0x3c>
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004568:	d106      	bne.n	8004578 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <HAL_SPI_TransmitReceive_DMA+0x38>
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d001      	beq.n	800457c <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8004578:	2302      	movs	r3, #2
 800457a:	e0cf      	b.n	800471c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8004588:	887b      	ldrh	r3, [r7, #2]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0c4      	b.n	800471c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_SPI_TransmitReceive_DMA+0x60>
 800459c:	2302      	movs	r3, #2
 800459e:	e0bd      	b.n	800471c <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d003      	beq.n	80045bc <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2205      	movs	r2, #5
 80045b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	887a      	ldrh	r2, [r7, #2]
 80045cc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	887a      	ldrh	r2, [r7, #2]
 80045d2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	887a      	ldrh	r2, [r7, #2]
 80045de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d108      	bne.n	8004610 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004602:	4a48      	ldr	r2, [pc, #288]	@ (8004724 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8004604:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460a:	4a47      	ldr	r2, [pc, #284]	@ (8004728 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800460c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800460e:	e007      	b.n	8004620 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004614:	4a45      	ldr	r2, [pc, #276]	@ (800472c <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8004616:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461c:	4a44      	ldr	r2, [pc, #272]	@ (8004730 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800461e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004624:	4a43      	ldr	r2, [pc, #268]	@ (8004734 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004626:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800462c:	2200      	movs	r2, #0
 800462e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	330c      	adds	r3, #12
 800463a:	4619      	mov	r1, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004640:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004646:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004648:	f7fd fd3a 	bl	80020c0 <HAL_DMA_Start_IT>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004656:	f043 0210 	orr.w	r2, r3, #16
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e058      	b.n	800471c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800467e:	2200      	movs	r2, #0
 8004680:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004686:	2200      	movs	r2, #0
 8004688:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800468e:	2200      	movs	r2, #0
 8004690:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004696:	2200      	movs	r2, #0
 8004698:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a2:	4619      	mov	r1, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	330c      	adds	r3, #12
 80046aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80046b2:	f7fd fd05 	bl	80020c0 <HAL_DMA_Start_IT>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00b      	beq.n	80046d4 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c0:	f043 0210 	orr.w	r2, r3, #16
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e023      	b.n	800471c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046de:	2b40      	cmp	r3, #64	@ 0x40
 80046e0:	d007      	beq.n	80046f2 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046f0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0220 	orr.w	r2, r2, #32
 8004708:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0202 	orr.w	r2, r2, #2
 8004718:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	08004bc1 	.word	0x08004bc1
 8004728:	08004a6d 	.word	0x08004a6d
 800472c:	08004bdd 	.word	0x08004bdd
 8004730:	08004b15 	.word	0x08004b15
 8004734:	08004bf9 	.word	0x08004bf9

08004738 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	099b      	lsrs	r3, r3, #6
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10f      	bne.n	800477c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	099b      	lsrs	r3, r3, #6
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
    return;
 800477a:	e0d7      	b.n	800492c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_SPI_IRQHandler+0x66>
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	09db      	lsrs	r3, r3, #7
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	4798      	blx	r3
    return;
 800479c:	e0c6      	b.n	800492c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10c      	bne.n	80047c4 <HAL_SPI_IRQHandler+0x8c>
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	099b      	lsrs	r3, r3, #6
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	0a1b      	lsrs	r3, r3, #8
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80b4 	beq.w	800492c <HAL_SPI_IRQHandler+0x1f4>
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80ad 	beq.w	800492c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	099b      	lsrs	r3, r3, #6
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d023      	beq.n	8004826 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d011      	beq.n	800480e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ee:	f043 0204 	orr.w	r2, r3, #4
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	e00b      	b.n	8004826 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800480e:	2300      	movs	r3, #0
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	693b      	ldr	r3, [r7, #16]
        return;
 8004824:	e082      	b.n	800492c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d014      	beq.n	800485c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004836:	f043 0201 	orr.w	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00c      	beq.n	8004882 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486c:	f043 0208 	orr.w	r2, r3, #8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004874:	2300      	movs	r3, #0
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04f      	beq.n	800492a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004898:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d104      	bne.n	80048b6 <HAL_SPI_IRQHandler+0x17e>
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d034      	beq.n	8004920 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0203 	bic.w	r2, r2, #3
 80048c4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d011      	beq.n	80048f2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d2:	4a18      	ldr	r2, [pc, #96]	@ (8004934 <HAL_SPI_IRQHandler+0x1fc>)
 80048d4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fd fcb8 	bl	8002250 <HAL_DMA_Abort_IT>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d016      	beq.n	8004928 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048fe:	4a0d      	ldr	r2, [pc, #52]	@ (8004934 <HAL_SPI_IRQHandler+0x1fc>)
 8004900:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004906:	4618      	mov	r0, r3
 8004908:	f7fd fca2 	bl	8002250 <HAL_DMA_Abort_IT>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004916:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800491e:	e003      	b.n	8004928 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f845 	bl	80049b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004926:	e000      	b.n	800492a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004928:	bf00      	nop
    return;
 800492a:	bf00      	nop
  }
}
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	08004c39 	.word	0x08004c39

08004938 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049d2:	f7fd f96b 	bl	8001cac <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e6:	d03b      	beq.n	8004a60 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0220 	bic.w	r2, r2, #32
 80049f6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0202 	bic.w	r2, r2, #2
 8004a06:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	2164      	movs	r1, #100	@ 0x64
 8004a0c:	6978      	ldr	r0, [r7, #20]
 8004a0e:	f000 fa15 	bl	8004e3c <SPI_EndRxTxTransaction>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a58:	6978      	ldr	r0, [r7, #20]
 8004a5a:	f7ff ffa9 	bl	80049b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a5e:	e002      	b.n	8004a66 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004a60:	6978      	ldr	r0, [r7, #20]
 8004a62:	f7ff ff69 	bl	8004938 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a78:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a7a:	f7fd f917 	bl	8001cac <HAL_GetTick>
 8004a7e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a8e:	d03b      	beq.n	8004b08 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0220 	bic.w	r2, r2, #32
 8004a9e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10d      	bne.n	8004ac4 <SPI_DMAReceiveCplt+0x58>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ab0:	d108      	bne.n	8004ac4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0203 	bic.w	r2, r2, #3
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	e007      	b.n	8004ad4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	2164      	movs	r1, #100	@ 0x64
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f949 	bl	8004d70 <SPI_EndRxTransaction>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff ff55 	bl	80049b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b06:	e002      	b.n	8004b0e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff ff1f 	bl	800494c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b20:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b22:	f7fd f8c3 	bl	8001cac <HAL_GetTick>
 8004b26:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b36:	d02f      	beq.n	8004b98 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0220 	bic.w	r2, r2, #32
 8004b46:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	2164      	movs	r1, #100	@ 0x64
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f975 	bl	8004e3c <SPI_EndRxTxTransaction>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5c:	f043 0220 	orr.w	r2, r3, #32
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0203 	bic.w	r2, r2, #3
 8004b72:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f7ff ff0d 	bl	80049b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b96:	e002      	b.n	8004b9e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f7ff fee1 	bl	8004960 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff fede 	bl	8004974 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff feda 	bl	8004988 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff fed6 	bl	800499c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0203 	bic.w	r2, r2, #3
 8004c14:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1a:	f043 0210 	orr.w	r2, r3, #16
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f7ff fec0 	bl	80049b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff feac 	bl	80049b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c70:	f7fd f81c 	bl	8001cac <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c80:	f7fd f814 	bl	8001cac <HAL_GetTick>
 8004c84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c86:	4b39      	ldr	r3, [pc, #228]	@ (8004d6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	015b      	lsls	r3, r3, #5
 8004c8c:	0d1b      	lsrs	r3, r3, #20
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	fb02 f303 	mul.w	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c96:	e054      	b.n	8004d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d050      	beq.n	8004d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ca0:	f7fd f804 	bl	8001cac <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	69fa      	ldr	r2, [r7, #28]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d902      	bls.n	8004cb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d13d      	bne.n	8004d32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cce:	d111      	bne.n	8004cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cd8:	d004      	beq.n	8004ce4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce2:	d107      	bne.n	8004cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cfc:	d10f      	bne.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e017      	b.n	8004d62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d19b      	bne.n	8004c98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3720      	adds	r7, #32
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000000 	.word	0x20000000

08004d70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d84:	d111      	bne.n	8004daa <SPI_EndRxTransaction+0x3a>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d8e:	d004      	beq.n	8004d9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d98:	d107      	bne.n	8004daa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004da8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004db2:	d12a      	bne.n	8004e0a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dbc:	d012      	beq.n	8004de4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2180      	movs	r1, #128	@ 0x80
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7ff ff49 	bl	8004c60 <SPI_WaitFlagStateUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d02d      	beq.n	8004e30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e026      	b.n	8004e32 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	2101      	movs	r1, #1
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff ff36 	bl	8004c60 <SPI_WaitFlagStateUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01a      	beq.n	8004e30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfe:	f043 0220 	orr.w	r2, r3, #32
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e013      	b.n	8004e32 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2101      	movs	r1, #1
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff ff23 	bl	8004c60 <SPI_WaitFlagStateUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e000      	b.n	8004e32 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af02      	add	r7, sp, #8
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	2102      	movs	r1, #2
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7ff ff04 	bl	8004c60 <SPI_WaitFlagStateUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e62:	f043 0220 	orr.w	r2, r3, #32
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e032      	b.n	8004ed4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004edc <SPI_EndRxTxTransaction+0xa0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee0 <SPI_EndRxTxTransaction+0xa4>)
 8004e74:	fba2 2303 	umull	r2, r3, r2, r3
 8004e78:	0d5b      	lsrs	r3, r3, #21
 8004e7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
 8004e82:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e8c:	d112      	bne.n	8004eb4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2200      	movs	r2, #0
 8004e96:	2180      	movs	r1, #128	@ 0x80
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7ff fee1 	bl	8004c60 <SPI_WaitFlagStateUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d016      	beq.n	8004ed2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e00f      	b.n	8004ed4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eca:	2b80      	cmp	r3, #128	@ 0x80
 8004ecc:	d0f2      	beq.n	8004eb4 <SPI_EndRxTxTransaction+0x78>
 8004ece:	e000      	b.n	8004ed2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004ed0:	bf00      	nop
  }

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	165e9f81 	.word	0x165e9f81

08004ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e041      	b.n	8004f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fc fbd8 	bl	80016c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f000 f9c0 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d001      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e04e      	b.n	800503a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a23      	ldr	r2, [pc, #140]	@ (8005048 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d022      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x80>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc6:	d01d      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x80>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800504c <HAL_TIM_Base_Start_IT+0xc8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d018      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x80>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005050 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x80>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8005054 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x80>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1b      	ldr	r2, [pc, #108]	@ (8005058 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x80>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a19      	ldr	r2, [pc, #100]	@ (800505c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x80>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a18      	ldr	r2, [pc, #96]	@ (8005060 <HAL_TIM_Base_Start_IT+0xdc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d111      	bne.n	8005028 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b06      	cmp	r3, #6
 8005014:	d010      	beq.n	8005038 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0201 	orr.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005026:	e007      	b.n	8005038 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40010000 	.word	0x40010000
 800504c:	40000400 	.word	0x40000400
 8005050:	40000800 	.word	0x40000800
 8005054:	40000c00 	.word	0x40000c00
 8005058:	40010400 	.word	0x40010400
 800505c:	40014000 	.word	0x40014000
 8005060:	40001800 	.word	0x40001800

08005064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d020      	beq.n	80050c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01b      	beq.n	80050c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0202 	mvn.w	r2, #2
 8005098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8dc 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f8ce 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f8df 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d020      	beq.n	8005114 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01b      	beq.n	8005114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0204 	mvn.w	r2, #4
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f8b6 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f8a8 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f8b9 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d020      	beq.n	8005160 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01b      	beq.n	8005160 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0208 	mvn.w	r2, #8
 8005130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2204      	movs	r2, #4
 8005136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f890 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f882 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f893 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	2b00      	cmp	r3, #0
 8005168:	d020      	beq.n	80051ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01b      	beq.n	80051ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0210 	mvn.w	r2, #16
 800517c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2208      	movs	r2, #8
 8005182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f86a 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 8005198:	e005      	b.n	80051a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f85c 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f86d 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00c      	beq.n	80051d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d007      	beq.n	80051d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0201 	mvn.w	r2, #1
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f83a 	bl	8005244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f910 	bl	8005414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00c      	beq.n	8005218 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f83e 	bl	8005294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00c      	beq.n	800523c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0220 	mvn.w	r2, #32
 8005234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f8e2 	bl	8005400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a46      	ldr	r2, [pc, #280]	@ (80053d4 <TIM_Base_SetConfig+0x12c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d013      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c6:	d00f      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a43      	ldr	r2, [pc, #268]	@ (80053d8 <TIM_Base_SetConfig+0x130>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00b      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a42      	ldr	r2, [pc, #264]	@ (80053dc <TIM_Base_SetConfig+0x134>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d007      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a41      	ldr	r2, [pc, #260]	@ (80053e0 <TIM_Base_SetConfig+0x138>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a40      	ldr	r2, [pc, #256]	@ (80053e4 <TIM_Base_SetConfig+0x13c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d108      	bne.n	80052fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a35      	ldr	r2, [pc, #212]	@ (80053d4 <TIM_Base_SetConfig+0x12c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d02b      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005308:	d027      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a32      	ldr	r2, [pc, #200]	@ (80053d8 <TIM_Base_SetConfig+0x130>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d023      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a31      	ldr	r2, [pc, #196]	@ (80053dc <TIM_Base_SetConfig+0x134>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01f      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a30      	ldr	r2, [pc, #192]	@ (80053e0 <TIM_Base_SetConfig+0x138>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01b      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2f      	ldr	r2, [pc, #188]	@ (80053e4 <TIM_Base_SetConfig+0x13c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d017      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2e      	ldr	r2, [pc, #184]	@ (80053e8 <TIM_Base_SetConfig+0x140>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d013      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a2d      	ldr	r2, [pc, #180]	@ (80053ec <TIM_Base_SetConfig+0x144>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00f      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a2c      	ldr	r2, [pc, #176]	@ (80053f0 <TIM_Base_SetConfig+0x148>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00b      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a2b      	ldr	r2, [pc, #172]	@ (80053f4 <TIM_Base_SetConfig+0x14c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d007      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a2a      	ldr	r2, [pc, #168]	@ (80053f8 <TIM_Base_SetConfig+0x150>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a29      	ldr	r2, [pc, #164]	@ (80053fc <TIM_Base_SetConfig+0x154>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d108      	bne.n	800536c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a10      	ldr	r2, [pc, #64]	@ (80053d4 <TIM_Base_SetConfig+0x12c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_Base_SetConfig+0xf8>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a12      	ldr	r2, [pc, #72]	@ (80053e4 <TIM_Base_SetConfig+0x13c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d103      	bne.n	80053a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d105      	bne.n	80053c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f023 0201 	bic.w	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	611a      	str	r2, [r3, #16]
  }
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40010000 	.word	0x40010000
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	40010400 	.word	0x40010400
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40014800 	.word	0x40014800
 80053f4:	40001800 	.word	0x40001800
 80053f8:	40001c00 	.word	0x40001c00
 80053fc:	40002000 	.word	0x40002000

08005400 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e042      	b.n	80054c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fc f95e 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2224      	movs	r2, #36	@ 0x24
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800546a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 ff59 	bl	8006324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	@ 0x28
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d175      	bne.n	80055d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_UART_Transmit+0x2c>
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e06e      	b.n	80055d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2221      	movs	r2, #33	@ 0x21
 8005502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005506:	f7fc fbd1 	bl	8001cac <HAL_GetTick>
 800550a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	88fa      	ldrh	r2, [r7, #6]
 8005516:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005520:	d108      	bne.n	8005534 <HAL_UART_Transmit+0x6c>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	e003      	b.n	800553c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800553c:	e02e      	b.n	800559c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2200      	movs	r2, #0
 8005546:	2180      	movs	r1, #128	@ 0x80
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 fc31 	bl	8005db0 <UART_WaitOnFlagUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e03a      	b.n	80055d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	3302      	adds	r3, #2
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e007      	b.n	800558e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	781a      	ldrb	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	3301      	adds	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1cb      	bne.n	800553e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2200      	movs	r2, #0
 80055ae:	2140      	movs	r1, #64	@ 0x40
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fbfd 	bl	8005db0 <UART_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e006      	b.n	80055d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	e000      	b.n	80055d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80055d4:	2302      	movs	r3, #2
  }
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	4613      	mov	r3, r2
 80055ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d112      	bne.n	800561e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_UART_Receive_DMA+0x26>
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e00b      	b.n	8005620 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	461a      	mov	r2, r3
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fc25 	bl	8005e64 <UART_Start_Receive_DMA>
 800561a:	4603      	mov	r3, r0
 800561c:	e000      	b.n	8005620 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
  }
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b0ba      	sub	sp, #232	@ 0xe8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800564e:	2300      	movs	r3, #0
 8005650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005654:	2300      	movs	r3, #0
 8005656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800565a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10f      	bne.n	800568e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800566e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_UART_IRQHandler+0x66>
 800567a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fd8d 	bl	80061a6 <UART_Receive_IT>
      return;
 800568c:	e25b      	b.n	8005b46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800568e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 80de 	beq.w	8005854 <HAL_UART_IRQHandler+0x22c>
 8005698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d106      	bne.n	80056b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80d1 	beq.w	8005854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <HAL_UART_IRQHandler+0xae>
 80056be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ce:	f043 0201 	orr.w	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <HAL_UART_IRQHandler+0xd2>
 80056e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f2:	f043 0202 	orr.w	r2, r3, #2
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <HAL_UART_IRQHandler+0xf6>
 8005706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	f043 0204 	orr.w	r2, r3, #4
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d011      	beq.n	800574e <HAL_UART_IRQHandler+0x126>
 800572a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d105      	bne.n	8005742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005746:	f043 0208 	orr.w	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 81f2 	beq.w	8005b3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_UART_IRQHandler+0x14e>
 8005764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fd18 	bl	80061a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005780:	2b40      	cmp	r3, #64	@ 0x40
 8005782:	bf0c      	ite	eq
 8005784:	2301      	moveq	r3, #1
 8005786:	2300      	movne	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d103      	bne.n	80057a2 <HAL_UART_IRQHandler+0x17a>
 800579a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d04f      	beq.n	8005842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fc20 	bl	8005fe8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b2:	2b40      	cmp	r3, #64	@ 0x40
 80057b4:	d141      	bne.n	800583a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3314      	adds	r3, #20
 80057bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80057cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3314      	adds	r3, #20
 80057de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80057e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1d9      	bne.n	80057b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d013      	beq.n	8005832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800580e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a08 <HAL_UART_IRQHandler+0x3e0>)
 8005810:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005816:	4618      	mov	r0, r3
 8005818:	f7fc fd1a 	bl	8002250 <HAL_DMA_Abort_IT>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800582c:	4610      	mov	r0, r2
 800582e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	e00e      	b.n	8005850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f9a8 	bl	8005b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	e00a      	b.n	8005850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f9a4 	bl	8005b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005840:	e006      	b.n	8005850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f9a0 	bl	8005b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800584e:	e175      	b.n	8005b3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	bf00      	nop
    return;
 8005852:	e173      	b.n	8005b3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005858:	2b01      	cmp	r3, #1
 800585a:	f040 814f 	bne.w	8005afc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800585e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8148 	beq.w	8005afc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800586c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8141 	beq.w	8005afc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60bb      	str	r3, [r7, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589a:	2b40      	cmp	r3, #64	@ 0x40
 800589c:	f040 80b6 	bne.w	8005a0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8145 	beq.w	8005b40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058be:	429a      	cmp	r2, r3
 80058c0:	f080 813e 	bcs.w	8005b40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058d6:	f000 8088 	beq.w	80059ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	330c      	adds	r3, #12
 80058e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005906:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800590a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005912:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800591e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1d9      	bne.n	80058da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3314      	adds	r3, #20
 800592c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3314      	adds	r3, #20
 8005946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800594a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800594e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005952:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800595c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e1      	bne.n	8005926 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3314      	adds	r3, #20
 8005968:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005986:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005988:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800598c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e3      	bne.n	8005962 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ba:	f023 0310 	bic.w	r3, r3, #16
 80059be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80059cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80059ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e3      	bne.n	80059a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fc fbc3 	bl	8002170 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	4619      	mov	r1, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f8cb 	bl	8005b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a06:	e09b      	b.n	8005b40 <HAL_UART_IRQHandler+0x518>
 8005a08:	080060af 	.word	0x080060af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 808e 	beq.w	8005b44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8089 	beq.w	8005b44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	330c      	adds	r3, #12
 8005a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a56:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e3      	bne.n	8005a32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3314      	adds	r3, #20
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	623b      	str	r3, [r7, #32]
   return(result);
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3314      	adds	r3, #20
 8005a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0310 	bic.w	r3, r3, #16
 8005ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ad4:	61fa      	str	r2, [r7, #28]
 8005ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	69b9      	ldr	r1, [r7, #24]
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e3      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f851 	bl	8005b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005afa:	e023      	b.n	8005b44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d009      	beq.n	8005b1c <HAL_UART_IRQHandler+0x4f4>
 8005b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fade 	bl	80060d6 <UART_Transmit_IT>
    return;
 8005b1a:	e014      	b.n	8005b46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00e      	beq.n	8005b46 <HAL_UART_IRQHandler+0x51e>
 8005b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fb1e 	bl	8006176 <UART_EndTransmit_IT>
    return;
 8005b3a:	e004      	b.n	8005b46 <HAL_UART_IRQHandler+0x51e>
    return;
 8005b3c:	bf00      	nop
 8005b3e:	e002      	b.n	8005b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b40:	bf00      	nop
 8005b42:	e000      	b.n	8005b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b44:	bf00      	nop
  }
}
 8005b46:	37e8      	adds	r7, #232	@ 0xe8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b09c      	sub	sp, #112	@ 0x70
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d172      	bne.n	8005cb6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	330c      	adds	r3, #12
 8005bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005bf6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005bf8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e5      	bne.n	8005bd6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3314      	adds	r3, #20
 8005c10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1c:	f023 0301 	bic.w	r3, r3, #1
 8005c20:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3314      	adds	r3, #20
 8005c28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005c2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e5      	bne.n	8005c0a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3314      	adds	r3, #20
 8005c44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c54:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3314      	adds	r3, #20
 8005c5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e5      	bne.n	8005c3e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d119      	bne.n	8005cb6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	330c      	adds	r3, #12
 8005c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f023 0310 	bic.w	r3, r3, #16
 8005c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	330c      	adds	r3, #12
 8005ca0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ca2:	61fa      	str	r2, [r7, #28]
 8005ca4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca6:	69b9      	ldr	r1, [r7, #24]
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	617b      	str	r3, [r7, #20]
   return(result);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e5      	bne.n	8005c82 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cb8:	2200      	movs	r2, #0
 8005cba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d106      	bne.n	8005cd2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cc6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005ccc:	f7ff ff66 	bl	8005b9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cd0:	e002      	b.n	8005cd8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005cd2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005cd4:	f7ff ff44 	bl	8005b60 <HAL_UART_RxCpltCallback>
}
 8005cd8:	bf00      	nop
 8005cda:	3770      	adds	r7, #112	@ 0x70
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d108      	bne.n	8005d0e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	4619      	mov	r1, r3
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f7ff ff48 	bl	8005b9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d0c:	e002      	b.n	8005d14 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f7ff ff30 	bl	8005b74 <HAL_UART_RxHalfCpltCallback>
}
 8005d14:	bf00      	nop
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d38:	2b80      	cmp	r3, #128	@ 0x80
 8005d3a:	bf0c      	ite	eq
 8005d3c:	2301      	moveq	r3, #1
 8005d3e:	2300      	movne	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b21      	cmp	r3, #33	@ 0x21
 8005d4e:	d108      	bne.n	8005d62 <UART_DMAError+0x46>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005d5c:	68b8      	ldr	r0, [r7, #8]
 8005d5e:	f000 f91b 	bl	8005f98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6c:	2b40      	cmp	r3, #64	@ 0x40
 8005d6e:	bf0c      	ite	eq
 8005d70:	2301      	moveq	r3, #1
 8005d72:	2300      	movne	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b22      	cmp	r3, #34	@ 0x22
 8005d82:	d108      	bne.n	8005d96 <UART_DMAError+0x7a>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005d90:	68b8      	ldr	r0, [r7, #8]
 8005d92:	f000 f929 	bl	8005fe8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9a:	f043 0210 	orr.w	r2, r3, #16
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005da2:	68b8      	ldr	r0, [r7, #8]
 8005da4:	f7ff fef0 	bl	8005b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc0:	e03b      	b.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d037      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dca:	f7fb ff6f 	bl	8001cac <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	6a3a      	ldr	r2, [r7, #32]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d302      	bcc.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e03a      	b.n	8005e5a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d023      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b80      	cmp	r3, #128	@ 0x80
 8005df6:	d020      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b40      	cmp	r3, #64	@ 0x40
 8005dfc:	d01d      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d116      	bne.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 f8e0 	bl	8005fe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2208      	movs	r2, #8
 8005e2c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e00f      	b.n	8005e5a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	bf0c      	ite	eq
 8005e4a:	2301      	moveq	r3, #1
 8005e4c:	2300      	movne	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d0b4      	beq.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b098      	sub	sp, #96	@ 0x60
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2222      	movs	r2, #34	@ 0x22
 8005e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e90:	4a3e      	ldr	r2, [pc, #248]	@ (8005f8c <UART_Start_Receive_DMA+0x128>)
 8005e92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e98:	4a3d      	ldr	r2, [pc, #244]	@ (8005f90 <UART_Start_Receive_DMA+0x12c>)
 8005e9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea0:	4a3c      	ldr	r2, [pc, #240]	@ (8005f94 <UART_Start_Receive_DMA+0x130>)
 8005ea2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005eac:	f107 0308 	add.w	r3, r7, #8
 8005eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	f7fc f8fc 	bl	80020c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d019      	beq.n	8005f1a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	330c      	adds	r3, #12
 8005eec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005efc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f06:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005f08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005f0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e5      	bne.n	8005ee6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3314      	adds	r3, #20
 8005f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3314      	adds	r3, #20
 8005f38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f3a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005f3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005f40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e5      	bne.n	8005f1a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3314      	adds	r3, #20
 8005f54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f64:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3314      	adds	r3, #20
 8005f6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6a39      	ldr	r1, [r7, #32]
 8005f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e5      	bne.n	8005f4e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3760      	adds	r7, #96	@ 0x60
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	08005bb5 	.word	0x08005bb5
 8005f90:	08005ce1 	.word	0x08005ce1
 8005f94:	08005d1d 	.word	0x08005d1d

08005f98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b089      	sub	sp, #36	@ 0x24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	330c      	adds	r3, #12
 8005fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005fb6:	61fb      	str	r3, [r7, #28]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	61ba      	str	r2, [r7, #24]
 8005fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6979      	ldr	r1, [r7, #20]
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e5      	bne.n	8005fa0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005fdc:	bf00      	nop
 8005fde:	3724      	adds	r7, #36	@ 0x24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b095      	sub	sp, #84	@ 0x54
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006010:	643a      	str	r2, [r7, #64]	@ 0x40
 8006012:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006014:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006016:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800601e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e5      	bne.n	8005ff0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3314      	adds	r3, #20
 800602a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	61fb      	str	r3, [r7, #28]
   return(result);
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f023 0301 	bic.w	r3, r3, #1
 800603a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3314      	adds	r3, #20
 8006042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006044:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006046:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800604a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e5      	bne.n	8006024 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605c:	2b01      	cmp	r3, #1
 800605e:	d119      	bne.n	8006094 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	330c      	adds	r3, #12
 8006066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f023 0310 	bic.w	r3, r3, #16
 8006076:	647b      	str	r3, [r7, #68]	@ 0x44
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006080:	61ba      	str	r2, [r7, #24]
 8006082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6979      	ldr	r1, [r7, #20]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	613b      	str	r3, [r7, #16]
   return(result);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e5      	bne.n	8006060 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060a2:	bf00      	nop
 80060a4:	3754      	adds	r7, #84	@ 0x54
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff fd5d 	bl	8005b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b085      	sub	sp, #20
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b21      	cmp	r3, #33	@ 0x21
 80060e8:	d13e      	bne.n	8006168 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f2:	d114      	bne.n	800611e <UART_Transmit_IT+0x48>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d110      	bne.n	800611e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006110:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	1c9a      	adds	r2, r3, #2
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	621a      	str	r2, [r3, #32]
 800611c:	e008      	b.n	8006130 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	1c59      	adds	r1, r3, #1
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6211      	str	r1, [r2, #32]
 8006128:	781a      	ldrb	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29b      	uxth	r3, r3
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	4619      	mov	r1, r3
 800613e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10f      	bne.n	8006164 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006152:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006162:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006168:	2302      	movs	r3, #2
  }
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68da      	ldr	r2, [r3, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800618c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fcd8 	bl	8005b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b08c      	sub	sp, #48	@ 0x30
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b22      	cmp	r3, #34	@ 0x22
 80061b8:	f040 80ae 	bne.w	8006318 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c4:	d117      	bne.n	80061f6 <UART_Receive_IT+0x50>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d113      	bne.n	80061f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ee:	1c9a      	adds	r2, r3, #2
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80061f4:	e026      	b.n	8006244 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006208:	d007      	beq.n	800621a <UART_Receive_IT+0x74>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <UART_Receive_IT+0x82>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e008      	b.n	800623a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006234:	b2da      	uxtb	r2, r3
 8006236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006238:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29b      	uxth	r3, r3
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	4619      	mov	r1, r3
 8006252:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006254:	2b00      	cmp	r3, #0
 8006256:	d15d      	bne.n	8006314 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0220 	bic.w	r2, r2, #32
 8006266:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006276:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695a      	ldr	r2, [r3, #20]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0201 	bic.w	r2, r2, #1
 8006286:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629a:	2b01      	cmp	r3, #1
 800629c:	d135      	bne.n	800630a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	e853 3f00 	ldrex	r3, [r3]
 80062b2:	613b      	str	r3, [r7, #16]
   return(result);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f023 0310 	bic.w	r3, r3, #16
 80062ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	330c      	adds	r3, #12
 80062c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c4:	623a      	str	r2, [r7, #32]
 80062c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	69f9      	ldr	r1, [r7, #28]
 80062ca:	6a3a      	ldr	r2, [r7, #32]
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e5      	bne.n	80062a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	2b10      	cmp	r3, #16
 80062e4:	d10a      	bne.n	80062fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff fc4a 	bl	8005b9c <HAL_UARTEx_RxEventCallback>
 8006308:	e002      	b.n	8006310 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff fc28 	bl	8005b60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	e002      	b.n	800631a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e000      	b.n	800631a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006318:	2302      	movs	r3, #2
  }
}
 800631a:	4618      	mov	r0, r3
 800631c:	3730      	adds	r7, #48	@ 0x30
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006328:	b0c0      	sub	sp, #256	@ 0x100
 800632a:	af00      	add	r7, sp, #0
 800632c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006340:	68d9      	ldr	r1, [r3, #12]
 8006342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	ea40 0301 	orr.w	r3, r0, r1
 800634c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	431a      	orrs	r2, r3
 800635c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	431a      	orrs	r2, r3
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800637c:	f021 010c 	bic.w	r1, r1, #12
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800638a:	430b      	orrs	r3, r1
 800638c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800639a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639e:	6999      	ldr	r1, [r3, #24]
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	ea40 0301 	orr.w	r3, r0, r1
 80063aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4b8f      	ldr	r3, [pc, #572]	@ (80065f0 <UART_SetConfig+0x2cc>)
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d005      	beq.n	80063c4 <UART_SetConfig+0xa0>
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	4b8d      	ldr	r3, [pc, #564]	@ (80065f4 <UART_SetConfig+0x2d0>)
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d104      	bne.n	80063ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063c4:	f7fd faa2 	bl	800390c <HAL_RCC_GetPCLK2Freq>
 80063c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80063cc:	e003      	b.n	80063d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063ce:	f7fd fa89 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 80063d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063e0:	f040 810c 	bne.w	80065fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063f6:	4622      	mov	r2, r4
 80063f8:	462b      	mov	r3, r5
 80063fa:	1891      	adds	r1, r2, r2
 80063fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063fe:	415b      	adcs	r3, r3
 8006400:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006402:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006406:	4621      	mov	r1, r4
 8006408:	eb12 0801 	adds.w	r8, r2, r1
 800640c:	4629      	mov	r1, r5
 800640e:	eb43 0901 	adc.w	r9, r3, r1
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800641e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006426:	4690      	mov	r8, r2
 8006428:	4699      	mov	r9, r3
 800642a:	4623      	mov	r3, r4
 800642c:	eb18 0303 	adds.w	r3, r8, r3
 8006430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006434:	462b      	mov	r3, r5
 8006436:	eb49 0303 	adc.w	r3, r9, r3
 800643a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800643e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800644a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800644e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006452:	460b      	mov	r3, r1
 8006454:	18db      	adds	r3, r3, r3
 8006456:	653b      	str	r3, [r7, #80]	@ 0x50
 8006458:	4613      	mov	r3, r2
 800645a:	eb42 0303 	adc.w	r3, r2, r3
 800645e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006460:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006464:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006468:	f7fa fb20 	bl	8000aac <__aeabi_uldivmod>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4b61      	ldr	r3, [pc, #388]	@ (80065f8 <UART_SetConfig+0x2d4>)
 8006472:	fba3 2302 	umull	r2, r3, r3, r2
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	011c      	lsls	r4, r3, #4
 800647a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800647e:	2200      	movs	r2, #0
 8006480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006484:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006488:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800648c:	4642      	mov	r2, r8
 800648e:	464b      	mov	r3, r9
 8006490:	1891      	adds	r1, r2, r2
 8006492:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006494:	415b      	adcs	r3, r3
 8006496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006498:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800649c:	4641      	mov	r1, r8
 800649e:	eb12 0a01 	adds.w	sl, r2, r1
 80064a2:	4649      	mov	r1, r9
 80064a4:	eb43 0b01 	adc.w	fp, r3, r1
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064bc:	4692      	mov	sl, r2
 80064be:	469b      	mov	fp, r3
 80064c0:	4643      	mov	r3, r8
 80064c2:	eb1a 0303 	adds.w	r3, sl, r3
 80064c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064ca:	464b      	mov	r3, r9
 80064cc:	eb4b 0303 	adc.w	r3, fp, r3
 80064d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80064e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064e8:	460b      	mov	r3, r1
 80064ea:	18db      	adds	r3, r3, r3
 80064ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80064ee:	4613      	mov	r3, r2
 80064f0:	eb42 0303 	adc.w	r3, r2, r3
 80064f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064fe:	f7fa fad5 	bl	8000aac <__aeabi_uldivmod>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4611      	mov	r1, r2
 8006508:	4b3b      	ldr	r3, [pc, #236]	@ (80065f8 <UART_SetConfig+0x2d4>)
 800650a:	fba3 2301 	umull	r2, r3, r3, r1
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	2264      	movs	r2, #100	@ 0x64
 8006512:	fb02 f303 	mul.w	r3, r2, r3
 8006516:	1acb      	subs	r3, r1, r3
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800651e:	4b36      	ldr	r3, [pc, #216]	@ (80065f8 <UART_SetConfig+0x2d4>)
 8006520:	fba3 2302 	umull	r2, r3, r3, r2
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800652c:	441c      	add	r4, r3
 800652e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006532:	2200      	movs	r2, #0
 8006534:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006538:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800653c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006540:	4642      	mov	r2, r8
 8006542:	464b      	mov	r3, r9
 8006544:	1891      	adds	r1, r2, r2
 8006546:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006548:	415b      	adcs	r3, r3
 800654a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800654c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006550:	4641      	mov	r1, r8
 8006552:	1851      	adds	r1, r2, r1
 8006554:	6339      	str	r1, [r7, #48]	@ 0x30
 8006556:	4649      	mov	r1, r9
 8006558:	414b      	adcs	r3, r1
 800655a:	637b      	str	r3, [r7, #52]	@ 0x34
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006568:	4659      	mov	r1, fp
 800656a:	00cb      	lsls	r3, r1, #3
 800656c:	4651      	mov	r1, sl
 800656e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006572:	4651      	mov	r1, sl
 8006574:	00ca      	lsls	r2, r1, #3
 8006576:	4610      	mov	r0, r2
 8006578:	4619      	mov	r1, r3
 800657a:	4603      	mov	r3, r0
 800657c:	4642      	mov	r2, r8
 800657e:	189b      	adds	r3, r3, r2
 8006580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006584:	464b      	mov	r3, r9
 8006586:	460a      	mov	r2, r1
 8006588:	eb42 0303 	adc.w	r3, r2, r3
 800658c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800659c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065a4:	460b      	mov	r3, r1
 80065a6:	18db      	adds	r3, r3, r3
 80065a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065aa:	4613      	mov	r3, r2
 80065ac:	eb42 0303 	adc.w	r3, r2, r3
 80065b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80065ba:	f7fa fa77 	bl	8000aac <__aeabi_uldivmod>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4b0d      	ldr	r3, [pc, #52]	@ (80065f8 <UART_SetConfig+0x2d4>)
 80065c4:	fba3 1302 	umull	r1, r3, r3, r2
 80065c8:	095b      	lsrs	r3, r3, #5
 80065ca:	2164      	movs	r1, #100	@ 0x64
 80065cc:	fb01 f303 	mul.w	r3, r1, r3
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	3332      	adds	r3, #50	@ 0x32
 80065d6:	4a08      	ldr	r2, [pc, #32]	@ (80065f8 <UART_SetConfig+0x2d4>)
 80065d8:	fba2 2303 	umull	r2, r3, r2, r3
 80065dc:	095b      	lsrs	r3, r3, #5
 80065de:	f003 0207 	and.w	r2, r3, #7
 80065e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4422      	add	r2, r4
 80065ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065ec:	e106      	b.n	80067fc <UART_SetConfig+0x4d8>
 80065ee:	bf00      	nop
 80065f0:	40011000 	.word	0x40011000
 80065f4:	40011400 	.word	0x40011400
 80065f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006600:	2200      	movs	r2, #0
 8006602:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006606:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800660a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800660e:	4642      	mov	r2, r8
 8006610:	464b      	mov	r3, r9
 8006612:	1891      	adds	r1, r2, r2
 8006614:	6239      	str	r1, [r7, #32]
 8006616:	415b      	adcs	r3, r3
 8006618:	627b      	str	r3, [r7, #36]	@ 0x24
 800661a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800661e:	4641      	mov	r1, r8
 8006620:	1854      	adds	r4, r2, r1
 8006622:	4649      	mov	r1, r9
 8006624:	eb43 0501 	adc.w	r5, r3, r1
 8006628:	f04f 0200 	mov.w	r2, #0
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	00eb      	lsls	r3, r5, #3
 8006632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006636:	00e2      	lsls	r2, r4, #3
 8006638:	4614      	mov	r4, r2
 800663a:	461d      	mov	r5, r3
 800663c:	4643      	mov	r3, r8
 800663e:	18e3      	adds	r3, r4, r3
 8006640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006644:	464b      	mov	r3, r9
 8006646:	eb45 0303 	adc.w	r3, r5, r3
 800664a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800664e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800665a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800665e:	f04f 0200 	mov.w	r2, #0
 8006662:	f04f 0300 	mov.w	r3, #0
 8006666:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800666a:	4629      	mov	r1, r5
 800666c:	008b      	lsls	r3, r1, #2
 800666e:	4621      	mov	r1, r4
 8006670:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006674:	4621      	mov	r1, r4
 8006676:	008a      	lsls	r2, r1, #2
 8006678:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800667c:	f7fa fa16 	bl	8000aac <__aeabi_uldivmod>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4b60      	ldr	r3, [pc, #384]	@ (8006808 <UART_SetConfig+0x4e4>)
 8006686:	fba3 2302 	umull	r2, r3, r3, r2
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	011c      	lsls	r4, r3, #4
 800668e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006692:	2200      	movs	r2, #0
 8006694:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006698:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800669c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80066a0:	4642      	mov	r2, r8
 80066a2:	464b      	mov	r3, r9
 80066a4:	1891      	adds	r1, r2, r2
 80066a6:	61b9      	str	r1, [r7, #24]
 80066a8:	415b      	adcs	r3, r3
 80066aa:	61fb      	str	r3, [r7, #28]
 80066ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066b0:	4641      	mov	r1, r8
 80066b2:	1851      	adds	r1, r2, r1
 80066b4:	6139      	str	r1, [r7, #16]
 80066b6:	4649      	mov	r1, r9
 80066b8:	414b      	adcs	r3, r1
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066c8:	4659      	mov	r1, fp
 80066ca:	00cb      	lsls	r3, r1, #3
 80066cc:	4651      	mov	r1, sl
 80066ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066d2:	4651      	mov	r1, sl
 80066d4:	00ca      	lsls	r2, r1, #3
 80066d6:	4610      	mov	r0, r2
 80066d8:	4619      	mov	r1, r3
 80066da:	4603      	mov	r3, r0
 80066dc:	4642      	mov	r2, r8
 80066de:	189b      	adds	r3, r3, r2
 80066e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066e4:	464b      	mov	r3, r9
 80066e6:	460a      	mov	r2, r1
 80066e8:	eb42 0303 	adc.w	r3, r2, r3
 80066ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006708:	4649      	mov	r1, r9
 800670a:	008b      	lsls	r3, r1, #2
 800670c:	4641      	mov	r1, r8
 800670e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006712:	4641      	mov	r1, r8
 8006714:	008a      	lsls	r2, r1, #2
 8006716:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800671a:	f7fa f9c7 	bl	8000aac <__aeabi_uldivmod>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4611      	mov	r1, r2
 8006724:	4b38      	ldr	r3, [pc, #224]	@ (8006808 <UART_SetConfig+0x4e4>)
 8006726:	fba3 2301 	umull	r2, r3, r3, r1
 800672a:	095b      	lsrs	r3, r3, #5
 800672c:	2264      	movs	r2, #100	@ 0x64
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	1acb      	subs	r3, r1, r3
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	3332      	adds	r3, #50	@ 0x32
 8006738:	4a33      	ldr	r2, [pc, #204]	@ (8006808 <UART_SetConfig+0x4e4>)
 800673a:	fba2 2303 	umull	r2, r3, r2, r3
 800673e:	095b      	lsrs	r3, r3, #5
 8006740:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006744:	441c      	add	r4, r3
 8006746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800674a:	2200      	movs	r2, #0
 800674c:	673b      	str	r3, [r7, #112]	@ 0x70
 800674e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006750:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	1891      	adds	r1, r2, r2
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	415b      	adcs	r3, r3
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006764:	4641      	mov	r1, r8
 8006766:	1851      	adds	r1, r2, r1
 8006768:	6039      	str	r1, [r7, #0]
 800676a:	4649      	mov	r1, r9
 800676c:	414b      	adcs	r3, r1
 800676e:	607b      	str	r3, [r7, #4]
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800677c:	4659      	mov	r1, fp
 800677e:	00cb      	lsls	r3, r1, #3
 8006780:	4651      	mov	r1, sl
 8006782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006786:	4651      	mov	r1, sl
 8006788:	00ca      	lsls	r2, r1, #3
 800678a:	4610      	mov	r0, r2
 800678c:	4619      	mov	r1, r3
 800678e:	4603      	mov	r3, r0
 8006790:	4642      	mov	r2, r8
 8006792:	189b      	adds	r3, r3, r2
 8006794:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006796:	464b      	mov	r3, r9
 8006798:	460a      	mov	r2, r1
 800679a:	eb42 0303 	adc.w	r3, r2, r3
 800679e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80067aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80067b8:	4649      	mov	r1, r9
 80067ba:	008b      	lsls	r3, r1, #2
 80067bc:	4641      	mov	r1, r8
 80067be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067c2:	4641      	mov	r1, r8
 80067c4:	008a      	lsls	r2, r1, #2
 80067c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80067ca:	f7fa f96f 	bl	8000aac <__aeabi_uldivmod>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006808 <UART_SetConfig+0x4e4>)
 80067d4:	fba3 1302 	umull	r1, r3, r3, r2
 80067d8:	095b      	lsrs	r3, r3, #5
 80067da:	2164      	movs	r1, #100	@ 0x64
 80067dc:	fb01 f303 	mul.w	r3, r1, r3
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	3332      	adds	r3, #50	@ 0x32
 80067e6:	4a08      	ldr	r2, [pc, #32]	@ (8006808 <UART_SetConfig+0x4e4>)
 80067e8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	f003 020f 	and.w	r2, r3, #15
 80067f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4422      	add	r2, r4
 80067fa:	609a      	str	r2, [r3, #8]
}
 80067fc:	bf00      	nop
 80067fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006802:	46bd      	mov	sp, r7
 8006804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006808:	51eb851f 	.word	0x51eb851f

0800680c <__NVIC_SetPriority>:
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	6039      	str	r1, [r7, #0]
 8006816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681c:	2b00      	cmp	r3, #0
 800681e:	db0a      	blt.n	8006836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	490c      	ldr	r1, [pc, #48]	@ (8006858 <__NVIC_SetPriority+0x4c>)
 8006826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682a:	0112      	lsls	r2, r2, #4
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	440b      	add	r3, r1
 8006830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006834:	e00a      	b.n	800684c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	b2da      	uxtb	r2, r3
 800683a:	4908      	ldr	r1, [pc, #32]	@ (800685c <__NVIC_SetPriority+0x50>)
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	3b04      	subs	r3, #4
 8006844:	0112      	lsls	r2, r2, #4
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	440b      	add	r3, r1
 800684a:	761a      	strb	r2, [r3, #24]
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	e000e100 	.word	0xe000e100
 800685c:	e000ed00 	.word	0xe000ed00

08006860 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006864:	2100      	movs	r1, #0
 8006866:	f06f 0004 	mvn.w	r0, #4
 800686a:	f7ff ffcf 	bl	800680c <__NVIC_SetPriority>
#endif
}
 800686e:	bf00      	nop
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800687a:	f3ef 8305 	mrs	r3, IPSR
 800687e:	603b      	str	r3, [r7, #0]
  return(result);
 8006880:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006886:	f06f 0305 	mvn.w	r3, #5
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	e00c      	b.n	80068a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800688e:	4b0a      	ldr	r3, [pc, #40]	@ (80068b8 <osKernelInitialize+0x44>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d105      	bne.n	80068a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006896:	4b08      	ldr	r3, [pc, #32]	@ (80068b8 <osKernelInitialize+0x44>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800689c:	2300      	movs	r3, #0
 800689e:	607b      	str	r3, [r7, #4]
 80068a0:	e002      	b.n	80068a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80068a2:	f04f 33ff 	mov.w	r3, #4294967295
 80068a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068a8:	687b      	ldr	r3, [r7, #4]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	20000590 	.word	0x20000590

080068bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068c2:	f3ef 8305 	mrs	r3, IPSR
 80068c6:	603b      	str	r3, [r7, #0]
  return(result);
 80068c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80068ce:	f06f 0305 	mvn.w	r3, #5
 80068d2:	607b      	str	r3, [r7, #4]
 80068d4:	e010      	b.n	80068f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80068d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <osKernelStart+0x48>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d109      	bne.n	80068f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80068de:	f7ff ffbf 	bl	8006860 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80068e2:	4b08      	ldr	r3, [pc, #32]	@ (8006904 <osKernelStart+0x48>)
 80068e4:	2202      	movs	r2, #2
 80068e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80068e8:	f001 fe38 	bl	800855c <vTaskStartScheduler>
      stat = osOK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	607b      	str	r3, [r7, #4]
 80068f0:	e002      	b.n	80068f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068f8:	687b      	ldr	r3, [r7, #4]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20000590 	.word	0x20000590

08006908 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006908:	b580      	push	{r7, lr}
 800690a:	b08e      	sub	sp, #56	@ 0x38
 800690c:	af04      	add	r7, sp, #16
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006914:	2300      	movs	r3, #0
 8006916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006918:	f3ef 8305 	mrs	r3, IPSR
 800691c:	617b      	str	r3, [r7, #20]
  return(result);
 800691e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006920:	2b00      	cmp	r3, #0
 8006922:	d17e      	bne.n	8006a22 <osThreadNew+0x11a>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d07b      	beq.n	8006a22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800692a:	2380      	movs	r3, #128	@ 0x80
 800692c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800692e:	2318      	movs	r3, #24
 8006930:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006936:	f04f 33ff 	mov.w	r3, #4294967295
 800693a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d045      	beq.n	80069ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <osThreadNew+0x48>
        name = attr->name;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <osThreadNew+0x6e>
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	2b38      	cmp	r3, #56	@ 0x38
 8006968:	d805      	bhi.n	8006976 <osThreadNew+0x6e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <osThreadNew+0x72>
        return (NULL);
 8006976:	2300      	movs	r3, #0
 8006978:	e054      	b.n	8006a24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	089b      	lsrs	r3, r3, #2
 8006988:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <osThreadNew+0xa8>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2b5b      	cmp	r3, #91	@ 0x5b
 8006998:	d90a      	bls.n	80069b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d006      	beq.n	80069b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <osThreadNew+0xa8>
        mem = 1;
 80069aa:	2301      	movs	r3, #1
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	e010      	b.n	80069d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10c      	bne.n	80069d2 <osThreadNew+0xca>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d108      	bne.n	80069d2 <osThreadNew+0xca>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <osThreadNew+0xca>
          mem = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61bb      	str	r3, [r7, #24]
 80069cc:	e001      	b.n	80069d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d110      	bne.n	80069fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069e0:	9202      	str	r2, [sp, #8]
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	6a3a      	ldr	r2, [r7, #32]
 80069ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f001 fa7c 	bl	8007eec <xTaskCreateStatic>
 80069f4:	4603      	mov	r3, r0
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	e013      	b.n	8006a22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d110      	bne.n	8006a22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	f107 0310 	add.w	r3, r7, #16
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f001 faca 	bl	8007fac <xTaskCreate>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d001      	beq.n	8006a22 <osThreadNew+0x11a>
            hTask = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a22:	693b      	ldr	r3, [r7, #16]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3728      	adds	r7, #40	@ 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a38:	f3ef 8305 	mrs	r3, IPSR
 8006a3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8006a44:	f06f 0305 	mvn.w	r3, #5
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	e017      	b.n	8006a7c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8006a52:	f06f 0303 	mvn.w	r3, #3
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	e010      	b.n	8006a7c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8006a5a:	6938      	ldr	r0, [r7, #16]
 8006a5c:	f001 fd16 	bl	800848c <eTaskGetState>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d005      	beq.n	8006a76 <osThreadTerminate+0x4a>
      stat = osOK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8006a6e:	6938      	ldr	r0, [r7, #16]
 8006a70:	f001 fbe2 	bl	8008238 <vTaskDelete>
 8006a74:	e002      	b.n	8006a7c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8006a76:	f06f 0302 	mvn.w	r3, #2
 8006a7a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8006a7c:	697b      	ldr	r3, [r7, #20]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b08a      	sub	sp, #40	@ 0x28
 8006a8a:	af02      	add	r7, sp, #8
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a96:	f3ef 8305 	mrs	r3, IPSR
 8006a9a:	613b      	str	r3, [r7, #16]
  return(result);
 8006a9c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d175      	bne.n	8006b8e <osSemaphoreNew+0x108>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d072      	beq.n	8006b8e <osSemaphoreNew+0x108>
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d86e      	bhi.n	8006b8e <osSemaphoreNew+0x108>
    mem = -1;
 8006ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d015      	beq.n	8006ae8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d006      	beq.n	8006ad2 <osSemaphoreNew+0x4c>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	2b4f      	cmp	r3, #79	@ 0x4f
 8006aca:	d902      	bls.n	8006ad2 <osSemaphoreNew+0x4c>
        mem = 1;
 8006acc:	2301      	movs	r3, #1
 8006ace:	61bb      	str	r3, [r7, #24]
 8006ad0:	e00c      	b.n	8006aec <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d108      	bne.n	8006aec <osSemaphoreNew+0x66>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <osSemaphoreNew+0x66>
          mem = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	e001      	b.n	8006aec <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d04c      	beq.n	8006b8e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d128      	bne.n	8006b4c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10a      	bne.n	8006b16 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2203      	movs	r2, #3
 8006b06:	9200      	str	r2, [sp, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	2001      	movs	r0, #1
 8006b0e:	f000 fa2b 	bl	8006f68 <xQueueGenericCreateStatic>
 8006b12:	61f8      	str	r0, [r7, #28]
 8006b14:	e005      	b.n	8006b22 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006b16:	2203      	movs	r2, #3
 8006b18:	2100      	movs	r1, #0
 8006b1a:	2001      	movs	r0, #1
 8006b1c:	f000 faa1 	bl	8007062 <xQueueGenericCreate>
 8006b20:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d022      	beq.n	8006b6e <osSemaphoreNew+0xe8>
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01f      	beq.n	8006b6e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2200      	movs	r2, #0
 8006b32:	2100      	movs	r1, #0
 8006b34:	69f8      	ldr	r0, [r7, #28]
 8006b36:	f000 fb61 	bl	80071fc <xQueueGenericSend>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d016      	beq.n	8006b6e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006b40:	69f8      	ldr	r0, [r7, #28]
 8006b42:	f000 ffff 	bl	8007b44 <vQueueDelete>
            hSemaphore = NULL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	e010      	b.n	8006b6e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d108      	bne.n	8006b64 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	461a      	mov	r2, r3
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 fadf 	bl	800711e <xQueueCreateCountingSemaphoreStatic>
 8006b60:	61f8      	str	r0, [r7, #28]
 8006b62:	e004      	b.n	8006b6e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 fb12 	bl	8007190 <xQueueCreateCountingSemaphore>
 8006b6c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	e001      	b.n	8006b86 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006b86:	6979      	ldr	r1, [r7, #20]
 8006b88:	69f8      	ldr	r0, [r7, #28]
 8006b8a:	f001 f927 	bl	8007ddc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006b8e:	69fb      	ldr	r3, [r7, #28]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d103      	bne.n	8006bb8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006bb0:	f06f 0303 	mvn.w	r3, #3
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	e039      	b.n	8006c2c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bb8:	f3ef 8305 	mrs	r3, IPSR
 8006bbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d022      	beq.n	8006c0a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006bca:	f06f 0303 	mvn.w	r3, #3
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	e02c      	b.n	8006c2c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006bd6:	f107 0308 	add.w	r3, r7, #8
 8006bda:	461a      	mov	r2, r3
 8006bdc:	2100      	movs	r1, #0
 8006bde:	6938      	ldr	r0, [r7, #16]
 8006be0:	f000 ff2e 	bl	8007a40 <xQueueReceiveFromISR>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d003      	beq.n	8006bf2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006bea:	f06f 0302 	mvn.w	r3, #2
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e01c      	b.n	8006c2c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d019      	beq.n	8006c2c <osSemaphoreAcquire+0x94>
 8006bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8006c38 <osSemaphoreAcquire+0xa0>)
 8006bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	e010      	b.n	8006c2c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6938      	ldr	r0, [r7, #16]
 8006c0e:	f000 fe07 	bl	8007820 <xQueueSemaphoreTake>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d009      	beq.n	8006c2c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006c1e:	f06f 0301 	mvn.w	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	e002      	b.n	8006c2c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006c26:	f06f 0302 	mvn.w	r3, #2
 8006c2a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006c2c:	697b      	ldr	r3, [r7, #20]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006c52:	f06f 0303 	mvn.w	r3, #3
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	e02c      	b.n	8006cb4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c5a:	f3ef 8305 	mrs	r3, IPSR
 8006c5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c60:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01a      	beq.n	8006c9c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c6a:	f107 0308 	add.w	r3, r7, #8
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6938      	ldr	r0, [r7, #16]
 8006c72:	f000 fc63 	bl	800753c <xQueueGiveFromISR>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d003      	beq.n	8006c84 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006c7c:	f06f 0302 	mvn.w	r3, #2
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	e017      	b.n	8006cb4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d014      	beq.n	8006cb4 <osSemaphoreRelease+0x78>
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc0 <osSemaphoreRelease+0x84>)
 8006c8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	e00b      	b.n	8006cb4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	6938      	ldr	r0, [r7, #16]
 8006ca4:	f000 faaa 	bl	80071fc <xQueueGenericSend>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d002      	beq.n	8006cb4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006cae:	f06f 0302 	mvn.w	r3, #2
 8006cb2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006cb4:	697b      	ldr	r3, [r7, #20]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	e000ed04 	.word	0xe000ed04

08006cc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4a07      	ldr	r2, [pc, #28]	@ (8006cf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006cd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	4a06      	ldr	r2, [pc, #24]	@ (8006cf4 <vApplicationGetIdleTaskMemory+0x30>)
 8006cda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2280      	movs	r2, #128	@ 0x80
 8006ce0:	601a      	str	r2, [r3, #0]
}
 8006ce2:	bf00      	nop
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000594 	.word	0x20000594
 8006cf4:	200005f0 	.word	0x200005f0

08006cf8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4a07      	ldr	r2, [pc, #28]	@ (8006d24 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	4a06      	ldr	r2, [pc, #24]	@ (8006d28 <vApplicationGetTimerTaskMemory+0x30>)
 8006d0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d16:	601a      	str	r2, [r3, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	200007f0 	.word	0x200007f0
 8006d28:	2000084c 	.word	0x2000084c

08006d2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f103 0208 	add.w	r2, r3, #8
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f04f 32ff 	mov.w	r2, #4294967295
 8006d44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f103 0208 	add.w	r2, r3, #8
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f103 0208 	add.w	r2, r3, #8
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	601a      	str	r2, [r3, #0]
}
 8006dc2:	bf00      	nop
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d103      	bne.n	8006dee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e00c      	b.n	8006e08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3308      	adds	r3, #8
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	e002      	b.n	8006dfc <vListInsert+0x2e>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d2f6      	bcs.n	8006df6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]
}
 8006e34:	bf00      	nop
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6892      	ldr	r2, [r2, #8]
 8006e56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6852      	ldr	r2, [r2, #4]
 8006e60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d103      	bne.n	8006e74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	1e5a      	subs	r2, r3, #1
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10b      	bne.n	8006ec0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006eba:	bf00      	nop
 8006ebc:	bf00      	nop
 8006ebe:	e7fd      	b.n	8006ebc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ec0:	f002 fe0a 	bl	8009ad8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ecc:	68f9      	ldr	r1, [r7, #12]
 8006ece:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ed0:	fb01 f303 	mul.w	r3, r1, r3
 8006ed4:	441a      	add	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	68f9      	ldr	r1, [r7, #12]
 8006ef4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ef6:	fb01 f303 	mul.w	r3, r1, r3
 8006efa:	441a      	add	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	22ff      	movs	r2, #255	@ 0xff
 8006f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	22ff      	movs	r2, #255	@ 0xff
 8006f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d114      	bne.n	8006f40 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d01a      	beq.n	8006f54 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3310      	adds	r3, #16
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 fda8 	bl	8008a78 <xTaskRemoveFromEventList>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d012      	beq.n	8006f54 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f64 <xQueueGenericReset+0xd0>)
 8006f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	e009      	b.n	8006f54 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3310      	adds	r3, #16
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7ff fef1 	bl	8006d2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3324      	adds	r3, #36	@ 0x24
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7ff feec 	bl	8006d2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f54:	f002 fdf2 	bl	8009b3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f58:	2301      	movs	r3, #1
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08e      	sub	sp, #56	@ 0x38
 8006f6c:	af02      	add	r7, sp, #8
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10b      	bne.n	8006f94 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f8e:	bf00      	nop
 8006f90:	bf00      	nop
 8006f92:	e7fd      	b.n	8006f90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	e7fd      	b.n	8006fae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <xQueueGenericCreateStatic+0x56>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <xQueueGenericCreateStatic+0x5a>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <xQueueGenericCreateStatic+0x5c>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10b      	bne.n	8006fe0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	623b      	str	r3, [r7, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	bf00      	nop
 8006fde:	e7fd      	b.n	8006fdc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <xQueueGenericCreateStatic+0x84>
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <xQueueGenericCreateStatic+0x88>
 8006fec:	2301      	movs	r3, #1
 8006fee:	e000      	b.n	8006ff2 <xQueueGenericCreateStatic+0x8a>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10b      	bne.n	800700e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	61fb      	str	r3, [r7, #28]
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e7fd      	b.n	800700a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800700e:	2350      	movs	r3, #80	@ 0x50
 8007010:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b50      	cmp	r3, #80	@ 0x50
 8007016:	d00b      	beq.n	8007030 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	61bb      	str	r3, [r7, #24]
}
 800702a:	bf00      	nop
 800702c:	bf00      	nop
 800702e:	e7fd      	b.n	800702c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007030:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00d      	beq.n	8007058 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800703c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007044:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	4613      	mov	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 f840 	bl	80070d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800705a:	4618      	mov	r0, r3
 800705c:	3730      	adds	r7, #48	@ 0x30
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007062:	b580      	push	{r7, lr}
 8007064:	b08a      	sub	sp, #40	@ 0x28
 8007066:	af02      	add	r7, sp, #8
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	4613      	mov	r3, r2
 800706e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10b      	bne.n	800708e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	613b      	str	r3, [r7, #16]
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	e7fd      	b.n	800708a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	fb02 f303 	mul.w	r3, r2, r3
 8007096:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	3350      	adds	r3, #80	@ 0x50
 800709c:	4618      	mov	r0, r3
 800709e:	f002 fe3d 	bl	8009d1c <pvPortMalloc>
 80070a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d011      	beq.n	80070ce <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	3350      	adds	r3, #80	@ 0x50
 80070b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070bc:	79fa      	ldrb	r2, [r7, #7]
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	4613      	mov	r3, r2
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	68b9      	ldr	r1, [r7, #8]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f805 	bl	80070d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070ce:	69bb      	ldr	r3, [r7, #24]
	}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3720      	adds	r7, #32
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d103      	bne.n	80070f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	601a      	str	r2, [r3, #0]
 80070f2:	e002      	b.n	80070fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007106:	2101      	movs	r1, #1
 8007108:	69b8      	ldr	r0, [r7, #24]
 800710a:	f7ff fec3 	bl	8006e94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	78fa      	ldrb	r2, [r7, #3]
 8007112:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800711e:	b580      	push	{r7, lr}
 8007120:	b08a      	sub	sp, #40	@ 0x28
 8007122:	af02      	add	r7, sp, #8
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10b      	bne.n	8007148 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	61bb      	str	r3, [r7, #24]
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	e7fd      	b.n	8007144 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	429a      	cmp	r2, r3
 800714e:	d90b      	bls.n	8007168 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	617b      	str	r3, [r7, #20]
}
 8007162:	bf00      	nop
 8007164:	bf00      	nop
 8007166:	e7fd      	b.n	8007164 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007168:	2302      	movs	r3, #2
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	2100      	movs	r1, #0
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7ff fef8 	bl	8006f68 <xQueueGenericCreateStatic>
 8007178:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007186:	69fb      	ldr	r3, [r7, #28]
	}
 8007188:	4618      	mov	r0, r3
 800718a:	3720      	adds	r7, #32
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10b      	bne.n	80071b8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	613b      	str	r3, [r7, #16]
}
 80071b2:	bf00      	nop
 80071b4:	bf00      	nop
 80071b6:	e7fd      	b.n	80071b4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d90b      	bls.n	80071d8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	60fb      	str	r3, [r7, #12]
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	e7fd      	b.n	80071d4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80071d8:	2202      	movs	r2, #2
 80071da:	2100      	movs	r1, #0
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff ff40 	bl	8007062 <xQueueGenericCreate>
 80071e2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80071f0:	697b      	ldr	r3, [r7, #20]
	}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08e      	sub	sp, #56	@ 0x38
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800720a:	2300      	movs	r3, #0
 800720c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10b      	bne.n	8007230 <xQueueGenericSend+0x34>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800722a:	bf00      	nop
 800722c:	bf00      	nop
 800722e:	e7fd      	b.n	800722c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <xQueueGenericSend+0x42>
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <xQueueGenericSend+0x46>
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <xQueueGenericSend+0x48>
 8007242:	2300      	movs	r3, #0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10b      	bne.n	8007260 <xQueueGenericSend+0x64>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	e7fd      	b.n	800725c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d103      	bne.n	800726e <xQueueGenericSend+0x72>
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <xQueueGenericSend+0x76>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <xQueueGenericSend+0x78>
 8007272:	2300      	movs	r3, #0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10b      	bne.n	8007290 <xQueueGenericSend+0x94>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	623b      	str	r3, [r7, #32]
}
 800728a:	bf00      	nop
 800728c:	bf00      	nop
 800728e:	e7fd      	b.n	800728c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007290:	f001 fdb2 	bl	8008df8 <xTaskGetSchedulerState>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d102      	bne.n	80072a0 <xQueueGenericSend+0xa4>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <xQueueGenericSend+0xa8>
 80072a0:	2301      	movs	r3, #1
 80072a2:	e000      	b.n	80072a6 <xQueueGenericSend+0xaa>
 80072a4:	2300      	movs	r3, #0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10b      	bne.n	80072c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	61fb      	str	r3, [r7, #28]
}
 80072bc:	bf00      	nop
 80072be:	bf00      	nop
 80072c0:	e7fd      	b.n	80072be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072c2:	f002 fc09 	bl	8009ad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d302      	bcc.n	80072d8 <xQueueGenericSend+0xdc>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d129      	bne.n	800732c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072de:	f000 fc6d 	bl	8007bbc <prvCopyDataToQueue>
 80072e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d010      	beq.n	800730e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ee:	3324      	adds	r3, #36	@ 0x24
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 fbc1 	bl	8008a78 <xTaskRemoveFromEventList>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d013      	beq.n	8007324 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072fc:	4b3f      	ldr	r3, [pc, #252]	@ (80073fc <xQueueGenericSend+0x200>)
 80072fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	e00a      	b.n	8007324 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800730e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d007      	beq.n	8007324 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007314:	4b39      	ldr	r3, [pc, #228]	@ (80073fc <xQueueGenericSend+0x200>)
 8007316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007324:	f002 fc0a 	bl	8009b3c <vPortExitCritical>
				return pdPASS;
 8007328:	2301      	movs	r3, #1
 800732a:	e063      	b.n	80073f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007332:	f002 fc03 	bl	8009b3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007336:	2300      	movs	r3, #0
 8007338:	e05c      	b.n	80073f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800733a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007340:	f107 0314 	add.w	r3, r7, #20
 8007344:	4618      	mov	r0, r3
 8007346:	f001 fbfb 	bl	8008b40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800734a:	2301      	movs	r3, #1
 800734c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800734e:	f002 fbf5 	bl	8009b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007352:	f001 f96b 	bl	800862c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007356:	f002 fbbf 	bl	8009ad8 <vPortEnterCritical>
 800735a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007360:	b25b      	sxtb	r3, r3
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d103      	bne.n	8007370 <xQueueGenericSend+0x174>
 8007368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007372:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007376:	b25b      	sxtb	r3, r3
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d103      	bne.n	8007386 <xQueueGenericSend+0x18a>
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007386:	f002 fbd9 	bl	8009b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800738a:	1d3a      	adds	r2, r7, #4
 800738c:	f107 0314 	add.w	r3, r7, #20
 8007390:	4611      	mov	r1, r2
 8007392:	4618      	mov	r0, r3
 8007394:	f001 fbea 	bl	8008b6c <xTaskCheckForTimeOut>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d124      	bne.n	80073e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800739e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073a0:	f000 fd04 	bl	8007dac <prvIsQueueFull>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d018      	beq.n	80073dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	3310      	adds	r3, #16
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	4611      	mov	r1, r2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 fb0e 	bl	80089d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073ba:	f000 fc8f 	bl	8007cdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073be:	f001 f943 	bl	8008648 <xTaskResumeAll>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f47f af7c 	bne.w	80072c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80073ca:	4b0c      	ldr	r3, [pc, #48]	@ (80073fc <xQueueGenericSend+0x200>)
 80073cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	e772      	b.n	80072c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073de:	f000 fc7d 	bl	8007cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073e2:	f001 f931 	bl	8008648 <xTaskResumeAll>
 80073e6:	e76c      	b.n	80072c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073ea:	f000 fc77 	bl	8007cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073ee:	f001 f92b 	bl	8008648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3738      	adds	r7, #56	@ 0x38
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	e000ed04 	.word	0xe000ed04

08007400 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b090      	sub	sp, #64	@ 0x40
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10b      	bne.n	8007430 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800742a:	bf00      	nop
 800742c:	bf00      	nop
 800742e:	e7fd      	b.n	800742c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d103      	bne.n	800743e <xQueueGenericSendFromISR+0x3e>
 8007436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <xQueueGenericSendFromISR+0x42>
 800743e:	2301      	movs	r3, #1
 8007440:	e000      	b.n	8007444 <xQueueGenericSendFromISR+0x44>
 8007442:	2300      	movs	r3, #0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10b      	bne.n	8007460 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800745a:	bf00      	nop
 800745c:	bf00      	nop
 800745e:	e7fd      	b.n	800745c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b02      	cmp	r3, #2
 8007464:	d103      	bne.n	800746e <xQueueGenericSendFromISR+0x6e>
 8007466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <xQueueGenericSendFromISR+0x72>
 800746e:	2301      	movs	r3, #1
 8007470:	e000      	b.n	8007474 <xQueueGenericSendFromISR+0x74>
 8007472:	2300      	movs	r3, #0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10b      	bne.n	8007490 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	623b      	str	r3, [r7, #32]
}
 800748a:	bf00      	nop
 800748c:	bf00      	nop
 800748e:	e7fd      	b.n	800748c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007490:	f002 fc02 	bl	8009c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007494:	f3ef 8211 	mrs	r2, BASEPRI
 8007498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	61fa      	str	r2, [r7, #28]
 80074aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d302      	bcc.n	80074c2 <xQueueGenericSendFromISR+0xc2>
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d12f      	bne.n	8007522 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	68b9      	ldr	r1, [r7, #8]
 80074d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80074d8:	f000 fb70 	bl	8007bbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e4:	d112      	bne.n	800750c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d016      	beq.n	800751c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f0:	3324      	adds	r3, #36	@ 0x24
 80074f2:	4618      	mov	r0, r3
 80074f4:	f001 fac0 	bl	8008a78 <xTaskRemoveFromEventList>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00e      	beq.n	800751c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e007      	b.n	800751c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800750c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007510:	3301      	adds	r3, #1
 8007512:	b2db      	uxtb	r3, r3
 8007514:	b25a      	sxtb	r2, r3
 8007516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800751c:	2301      	movs	r3, #1
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007520:	e001      	b.n	8007526 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007522:	2300      	movs	r3, #0
 8007524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007528:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007530:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007534:	4618      	mov	r0, r3
 8007536:	3740      	adds	r7, #64	@ 0x40
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08e      	sub	sp, #56	@ 0x38
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10b      	bne.n	8007568 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	623b      	str	r3, [r7, #32]
}
 8007562:	bf00      	nop
 8007564:	bf00      	nop
 8007566:	e7fd      	b.n	8007564 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	61fb      	str	r3, [r7, #28]
}
 8007582:	bf00      	nop
 8007584:	bf00      	nop
 8007586:	e7fd      	b.n	8007584 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d103      	bne.n	8007598 <xQueueGiveFromISR+0x5c>
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <xQueueGiveFromISR+0x60>
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <xQueueGiveFromISR+0x62>
 800759c:	2300      	movs	r3, #0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <xQueueGiveFromISR+0x7e>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	61bb      	str	r3, [r7, #24]
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop
 80075b8:	e7fd      	b.n	80075b6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075ba:	f002 fb6d 	bl	8009c98 <vPortValidateInterruptPriority>
	__asm volatile
 80075be:	f3ef 8211 	mrs	r2, BASEPRI
 80075c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	617a      	str	r2, [r7, #20]
 80075d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80075d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075de:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80075e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d22b      	bcs.n	8007642 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007604:	d112      	bne.n	800762c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760a:	2b00      	cmp	r3, #0
 800760c:	d016      	beq.n	800763c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	3324      	adds	r3, #36	@ 0x24
 8007612:	4618      	mov	r0, r3
 8007614:	f001 fa30 	bl	8008a78 <xTaskRemoveFromEventList>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00e      	beq.n	800763c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00b      	beq.n	800763c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2201      	movs	r2, #1
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	e007      	b.n	800763c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800762c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007630:	3301      	adds	r3, #1
 8007632:	b2db      	uxtb	r3, r3
 8007634:	b25a      	sxtb	r2, r3
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800763c:	2301      	movs	r3, #1
 800763e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007640:	e001      	b.n	8007646 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007642:	2300      	movs	r3, #0
 8007644:	637b      	str	r3, [r7, #52]	@ 0x34
 8007646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007648:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f383 8811 	msr	BASEPRI, r3
}
 8007650:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007654:	4618      	mov	r0, r3
 8007656:	3738      	adds	r7, #56	@ 0x38
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08c      	sub	sp, #48	@ 0x30
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007668:	2300      	movs	r3, #0
 800766a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10b      	bne.n	800768e <xQueueReceive+0x32>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	623b      	str	r3, [r7, #32]
}
 8007688:	bf00      	nop
 800768a:	bf00      	nop
 800768c:	e7fd      	b.n	800768a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d103      	bne.n	800769c <xQueueReceive+0x40>
 8007694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <xQueueReceive+0x44>
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <xQueueReceive+0x46>
 80076a0:	2300      	movs	r3, #0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10b      	bne.n	80076be <xQueueReceive+0x62>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	61fb      	str	r3, [r7, #28]
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop
 80076bc:	e7fd      	b.n	80076ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076be:	f001 fb9b 	bl	8008df8 <xTaskGetSchedulerState>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d102      	bne.n	80076ce <xQueueReceive+0x72>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <xQueueReceive+0x76>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e000      	b.n	80076d4 <xQueueReceive+0x78>
 80076d2:	2300      	movs	r3, #0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10b      	bne.n	80076f0 <xQueueReceive+0x94>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	61bb      	str	r3, [r7, #24]
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	e7fd      	b.n	80076ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076f0:	f002 f9f2 	bl	8009ad8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d01f      	beq.n	8007740 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007700:	68b9      	ldr	r1, [r7, #8]
 8007702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007704:	f000 fac4 	bl	8007c90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	1e5a      	subs	r2, r3, #1
 800770c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00f      	beq.n	8007738 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771a:	3310      	adds	r3, #16
 800771c:	4618      	mov	r0, r3
 800771e:	f001 f9ab 	bl	8008a78 <xTaskRemoveFromEventList>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007728:	4b3c      	ldr	r3, [pc, #240]	@ (800781c <xQueueReceive+0x1c0>)
 800772a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007738:	f002 fa00 	bl	8009b3c <vPortExitCritical>
				return pdPASS;
 800773c:	2301      	movs	r3, #1
 800773e:	e069      	b.n	8007814 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d103      	bne.n	800774e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007746:	f002 f9f9 	bl	8009b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800774a:	2300      	movs	r3, #0
 800774c:	e062      	b.n	8007814 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800774e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007754:	f107 0310 	add.w	r3, r7, #16
 8007758:	4618      	mov	r0, r3
 800775a:	f001 f9f1 	bl	8008b40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800775e:	2301      	movs	r3, #1
 8007760:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007762:	f002 f9eb 	bl	8009b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007766:	f000 ff61 	bl	800862c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800776a:	f002 f9b5 	bl	8009ad8 <vPortEnterCritical>
 800776e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007770:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007774:	b25b      	sxtb	r3, r3
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	d103      	bne.n	8007784 <xQueueReceive+0x128>
 800777c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007786:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800778a:	b25b      	sxtb	r3, r3
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d103      	bne.n	800779a <xQueueReceive+0x13e>
 8007792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800779a:	f002 f9cf 	bl	8009b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800779e:	1d3a      	adds	r2, r7, #4
 80077a0:	f107 0310 	add.w	r3, r7, #16
 80077a4:	4611      	mov	r1, r2
 80077a6:	4618      	mov	r0, r3
 80077a8:	f001 f9e0 	bl	8008b6c <xTaskCheckForTimeOut>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d123      	bne.n	80077fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077b4:	f000 fae4 	bl	8007d80 <prvIsQueueEmpty>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d017      	beq.n	80077ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c0:	3324      	adds	r3, #36	@ 0x24
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	4611      	mov	r1, r2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 f904 	bl	80089d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077ce:	f000 fa85 	bl	8007cdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077d2:	f000 ff39 	bl	8008648 <xTaskResumeAll>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d189      	bne.n	80076f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80077dc:	4b0f      	ldr	r3, [pc, #60]	@ (800781c <xQueueReceive+0x1c0>)
 80077de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	e780      	b.n	80076f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077f0:	f000 fa74 	bl	8007cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077f4:	f000 ff28 	bl	8008648 <xTaskResumeAll>
 80077f8:	e77a      	b.n	80076f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077fc:	f000 fa6e 	bl	8007cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007800:	f000 ff22 	bl	8008648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007804:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007806:	f000 fabb 	bl	8007d80 <prvIsQueueEmpty>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	f43f af6f 	beq.w	80076f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007812:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007814:	4618      	mov	r0, r3
 8007816:	3730      	adds	r7, #48	@ 0x30
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	e000ed04 	.word	0xe000ed04

08007820 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08e      	sub	sp, #56	@ 0x38
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800782a:	2300      	movs	r3, #0
 800782c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007832:	2300      	movs	r3, #0
 8007834:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10b      	bne.n	8007854 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	623b      	str	r3, [r7, #32]
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	e7fd      	b.n	8007850 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00b      	beq.n	8007874 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	61fb      	str	r3, [r7, #28]
}
 800786e:	bf00      	nop
 8007870:	bf00      	nop
 8007872:	e7fd      	b.n	8007870 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007874:	f001 fac0 	bl	8008df8 <xTaskGetSchedulerState>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <xQueueSemaphoreTake+0x64>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <xQueueSemaphoreTake+0x68>
 8007884:	2301      	movs	r3, #1
 8007886:	e000      	b.n	800788a <xQueueSemaphoreTake+0x6a>
 8007888:	2300      	movs	r3, #0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	61bb      	str	r3, [r7, #24]
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078a6:	f002 f917 	bl	8009ad8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80078aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80078b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d024      	beq.n	8007900 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80078b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b8:	1e5a      	subs	r2, r3, #1
 80078ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078bc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d104      	bne.n	80078d0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80078c6:	f001 fc11 	bl	80090ec <pvTaskIncrementMutexHeldCount>
 80078ca:	4602      	mov	r2, r0
 80078cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00f      	beq.n	80078f8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078da:	3310      	adds	r3, #16
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 f8cb 	bl	8008a78 <xTaskRemoveFromEventList>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d007      	beq.n	80078f8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078e8:	4b54      	ldr	r3, [pc, #336]	@ (8007a3c <xQueueSemaphoreTake+0x21c>)
 80078ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078f8:	f002 f920 	bl	8009b3c <vPortExitCritical>
				return pdPASS;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e098      	b.n	8007a32 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d112      	bne.n	800792c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00b      	beq.n	8007924 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	617b      	str	r3, [r7, #20]
}
 800791e:	bf00      	nop
 8007920:	bf00      	nop
 8007922:	e7fd      	b.n	8007920 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007924:	f002 f90a 	bl	8009b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007928:	2300      	movs	r3, #0
 800792a:	e082      	b.n	8007a32 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800792c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007932:	f107 030c 	add.w	r3, r7, #12
 8007936:	4618      	mov	r0, r3
 8007938:	f001 f902 	bl	8008b40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800793c:	2301      	movs	r3, #1
 800793e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007940:	f002 f8fc 	bl	8009b3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007944:	f000 fe72 	bl	800862c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007948:	f002 f8c6 	bl	8009ad8 <vPortEnterCritical>
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007952:	b25b      	sxtb	r3, r3
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d103      	bne.n	8007962 <xQueueSemaphoreTake+0x142>
 800795a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007968:	b25b      	sxtb	r3, r3
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	d103      	bne.n	8007978 <xQueueSemaphoreTake+0x158>
 8007970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007978:	f002 f8e0 	bl	8009b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800797c:	463a      	mov	r2, r7
 800797e:	f107 030c 	add.w	r3, r7, #12
 8007982:	4611      	mov	r1, r2
 8007984:	4618      	mov	r0, r3
 8007986:	f001 f8f1 	bl	8008b6c <xTaskCheckForTimeOut>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d132      	bne.n	80079f6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007990:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007992:	f000 f9f5 	bl	8007d80 <prvIsQueueEmpty>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d026      	beq.n	80079ea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800799c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d109      	bne.n	80079b8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80079a4:	f002 f898 	bl	8009ad8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f001 fa41 	bl	8008e34 <xTaskPriorityInherit>
 80079b2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80079b4:	f002 f8c2 	bl	8009b3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ba:	3324      	adds	r3, #36	@ 0x24
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	4611      	mov	r1, r2
 80079c0:	4618      	mov	r0, r3
 80079c2:	f001 f807 	bl	80089d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079c8:	f000 f988 	bl	8007cdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079cc:	f000 fe3c 	bl	8008648 <xTaskResumeAll>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f47f af67 	bne.w	80078a6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80079d8:	4b18      	ldr	r3, [pc, #96]	@ (8007a3c <xQueueSemaphoreTake+0x21c>)
 80079da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	e75d      	b.n	80078a6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80079ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079ec:	f000 f976 	bl	8007cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079f0:	f000 fe2a 	bl	8008648 <xTaskResumeAll>
 80079f4:	e757      	b.n	80078a6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80079f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079f8:	f000 f970 	bl	8007cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079fc:	f000 fe24 	bl	8008648 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a02:	f000 f9bd 	bl	8007d80 <prvIsQueueEmpty>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f43f af4c 	beq.w	80078a6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00d      	beq.n	8007a30 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007a14:	f002 f860 	bl	8009ad8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a1a:	f000 f8b7 	bl	8007b8c <prvGetDisinheritPriorityAfterTimeout>
 8007a1e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a26:	4618      	mov	r0, r3
 8007a28:	f001 fadc 	bl	8008fe4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a2c:	f002 f886 	bl	8009b3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3738      	adds	r7, #56	@ 0x38
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	e000ed04 	.word	0xe000ed04

08007a40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08e      	sub	sp, #56	@ 0x38
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10b      	bne.n	8007a6e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	623b      	str	r3, [r7, #32]
}
 8007a68:	bf00      	nop
 8007a6a:	bf00      	nop
 8007a6c:	e7fd      	b.n	8007a6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d103      	bne.n	8007a7c <xQueueReceiveFromISR+0x3c>
 8007a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <xQueueReceiveFromISR+0x40>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e000      	b.n	8007a82 <xQueueReceiveFromISR+0x42>
 8007a80:	2300      	movs	r3, #0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10b      	bne.n	8007a9e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	61fb      	str	r3, [r7, #28]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a9e:	f002 f8fb 	bl	8009c98 <vPortValidateInterruptPriority>
	__asm volatile
 8007aa2:	f3ef 8211 	mrs	r2, BASEPRI
 8007aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	61ba      	str	r2, [r7, #24]
 8007ab8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007aba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d02f      	beq.n	8007b2a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007acc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ad4:	68b9      	ldr	r1, [r7, #8]
 8007ad6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ad8:	f000 f8da 	bl	8007c90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	1e5a      	subs	r2, r3, #1
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007ae4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aec:	d112      	bne.n	8007b14 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d016      	beq.n	8007b24 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af8:	3310      	adds	r3, #16
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 ffbc 	bl	8008a78 <xTaskRemoveFromEventList>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00e      	beq.n	8007b24 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	e007      	b.n	8007b24 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b18:	3301      	adds	r3, #1
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	b25a      	sxtb	r2, r3
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007b24:	2301      	movs	r3, #1
 8007b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b28:	e001      	b.n	8007b2e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f383 8811 	msr	BASEPRI, r3
}
 8007b38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3738      	adds	r7, #56	@ 0x38
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10b      	bne.n	8007b6e <vQueueDelete+0x2a>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	60bb      	str	r3, [r7, #8]
}
 8007b68:	bf00      	nop
 8007b6a:	bf00      	nop
 8007b6c:	e7fd      	b.n	8007b6a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 f95e 	bl	8007e30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d102      	bne.n	8007b84 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f002 f99a 	bl	8009eb8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d006      	beq.n	8007baa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e001      	b.n	8007bae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bae:	68fb      	ldr	r3, [r7, #12]
	}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10d      	bne.n	8007bf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d14d      	bne.n	8007c7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f001 f98c 	bl	8008f04 <xTaskPriorityDisinherit>
 8007bec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	609a      	str	r2, [r3, #8]
 8007bf4:	e043      	b.n	8007c7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d119      	bne.n	8007c30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6858      	ldr	r0, [r3, #4]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c04:	461a      	mov	r2, r3
 8007c06:	68b9      	ldr	r1, [r7, #8]
 8007c08:	f009 fa7b 	bl	8011102 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c14:	441a      	add	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d32b      	bcc.n	8007c7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	605a      	str	r2, [r3, #4]
 8007c2e:	e026      	b.n	8007c7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	68d8      	ldr	r0, [r3, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c38:	461a      	mov	r2, r3
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	f009 fa61 	bl	8011102 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c48:	425b      	negs	r3, r3
 8007c4a:	441a      	add	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d207      	bcs.n	8007c6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c64:	425b      	negs	r3, r3
 8007c66:	441a      	add	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d105      	bne.n	8007c7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007c86:	697b      	ldr	r3, [r7, #20]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d018      	beq.n	8007cd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007caa:	441a      	add	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68da      	ldr	r2, [r3, #12]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d303      	bcc.n	8007cc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68d9      	ldr	r1, [r3, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6838      	ldr	r0, [r7, #0]
 8007cd0:	f009 fa17 	bl	8011102 <memcpy>
	}
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ce4:	f001 fef8 	bl	8009ad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cf0:	e011      	b.n	8007d16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d012      	beq.n	8007d20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3324      	adds	r3, #36	@ 0x24
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 feba 	bl	8008a78 <xTaskRemoveFromEventList>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d0a:	f000 ff93 	bl	8008c34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dce9      	bgt.n	8007cf2 <prvUnlockQueue+0x16>
 8007d1e:	e000      	b.n	8007d22 <prvUnlockQueue+0x46>
					break;
 8007d20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	22ff      	movs	r2, #255	@ 0xff
 8007d26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d2a:	f001 ff07 	bl	8009b3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d2e:	f001 fed3 	bl	8009ad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d3a:	e011      	b.n	8007d60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d012      	beq.n	8007d6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3310      	adds	r3, #16
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fe95 	bl	8008a78 <xTaskRemoveFromEventList>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d54:	f000 ff6e 	bl	8008c34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dce9      	bgt.n	8007d3c <prvUnlockQueue+0x60>
 8007d68:	e000      	b.n	8007d6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	22ff      	movs	r2, #255	@ 0xff
 8007d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d74:	f001 fee2 	bl	8009b3c <vPortExitCritical>
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d88:	f001 fea6 	bl	8009ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d94:	2301      	movs	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	e001      	b.n	8007d9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d9e:	f001 fecd 	bl	8009b3c <vPortExitCritical>

	return xReturn;
 8007da2:	68fb      	ldr	r3, [r7, #12]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007db4:	f001 fe90 	bl	8009ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d102      	bne.n	8007dca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e001      	b.n	8007dce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dce:	f001 feb5 	bl	8009b3c <vPortExitCritical>

	return xReturn;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	e014      	b.n	8007e16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007dec:	4a0f      	ldr	r2, [pc, #60]	@ (8007e2c <vQueueAddToRegistry+0x50>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10b      	bne.n	8007e10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007df8:	490c      	ldr	r1, [pc, #48]	@ (8007e2c <vQueueAddToRegistry+0x50>)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e02:	4a0a      	ldr	r2, [pc, #40]	@ (8007e2c <vQueueAddToRegistry+0x50>)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	4413      	add	r3, r2
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e0e:	e006      	b.n	8007e1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b07      	cmp	r3, #7
 8007e1a:	d9e7      	bls.n	8007dec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e1c:	bf00      	nop
 8007e1e:	bf00      	nop
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	20000c4c 	.word	0x20000c4c

08007e30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	e016      	b.n	8007e6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e3e:	4a10      	ldr	r2, [pc, #64]	@ (8007e80 <vQueueUnregisterQueue+0x50>)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	4413      	add	r3, r2
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d10b      	bne.n	8007e66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8007e80 <vQueueUnregisterQueue+0x50>)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2100      	movs	r1, #0
 8007e54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e58:	4a09      	ldr	r2, [pc, #36]	@ (8007e80 <vQueueUnregisterQueue+0x50>)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	4413      	add	r3, r2
 8007e60:	2200      	movs	r2, #0
 8007e62:	605a      	str	r2, [r3, #4]
				break;
 8007e64:	e006      	b.n	8007e74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b07      	cmp	r3, #7
 8007e70:	d9e5      	bls.n	8007e3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e72:	bf00      	nop
 8007e74:	bf00      	nop
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	20000c4c 	.word	0x20000c4c

08007e84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e94:	f001 fe20 	bl	8009ad8 <vPortEnterCritical>
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e9e:	b25b      	sxtb	r3, r3
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d103      	bne.n	8007eae <vQueueWaitForMessageRestricted+0x2a>
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007eb4:	b25b      	sxtb	r3, r3
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eba:	d103      	bne.n	8007ec4 <vQueueWaitForMessageRestricted+0x40>
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ec4:	f001 fe3a 	bl	8009b3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d106      	bne.n	8007ede <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	3324      	adds	r3, #36	@ 0x24
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fda1 	bl	8008a20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ede:	6978      	ldr	r0, [r7, #20]
 8007ee0:	f7ff fefc 	bl	8007cdc <prvUnlockQueue>
	}
 8007ee4:	bf00      	nop
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08e      	sub	sp, #56	@ 0x38
 8007ef0:	af04      	add	r7, sp, #16
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10b      	bne.n	8007f18 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	623b      	str	r3, [r7, #32]
}
 8007f12:	bf00      	nop
 8007f14:	bf00      	nop
 8007f16:	e7fd      	b.n	8007f14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10b      	bne.n	8007f36 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	61fb      	str	r3, [r7, #28]
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	e7fd      	b.n	8007f32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f36:	235c      	movs	r3, #92	@ 0x5c
 8007f38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f3e:	d00b      	beq.n	8007f58 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	61bb      	str	r3, [r7, #24]
}
 8007f52:	bf00      	nop
 8007f54:	bf00      	nop
 8007f56:	e7fd      	b.n	8007f54 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d01e      	beq.n	8007f9e <xTaskCreateStatic+0xb2>
 8007f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01b      	beq.n	8007f9e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9303      	str	r3, [sp, #12]
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7e:	9302      	str	r3, [sp, #8]
 8007f80:	f107 0314 	add.w	r3, r7, #20
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f850 	bl	8008036 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f98:	f000 f8de 	bl	8008158 <prvAddNewTaskToReadyList>
 8007f9c:	e001      	b.n	8007fa2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fa2:	697b      	ldr	r3, [r7, #20]
	}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3728      	adds	r7, #40	@ 0x28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08c      	sub	sp, #48	@ 0x30
 8007fb0:	af04      	add	r7, sp, #16
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fbc:	88fb      	ldrh	r3, [r7, #6]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f001 feab 	bl	8009d1c <pvPortMalloc>
 8007fc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00e      	beq.n	8007fec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fce:	205c      	movs	r0, #92	@ 0x5c
 8007fd0:	f001 fea4 	bl	8009d1c <pvPortMalloc>
 8007fd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fe2:	e005      	b.n	8007ff0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fe4:	6978      	ldr	r0, [r7, #20]
 8007fe6:	f001 ff67 	bl	8009eb8 <vPortFree>
 8007fea:	e001      	b.n	8007ff0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d017      	beq.n	8008026 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ffe:	88fa      	ldrh	r2, [r7, #6]
 8008000:	2300      	movs	r3, #0
 8008002:	9303      	str	r3, [sp, #12]
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	9302      	str	r3, [sp, #8]
 8008008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800a:	9301      	str	r3, [sp, #4]
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 f80e 	bl	8008036 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800801a:	69f8      	ldr	r0, [r7, #28]
 800801c:	f000 f89c 	bl	8008158 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008020:	2301      	movs	r3, #1
 8008022:	61bb      	str	r3, [r7, #24]
 8008024:	e002      	b.n	800802c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008026:	f04f 33ff 	mov.w	r3, #4294967295
 800802a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800802c:	69bb      	ldr	r3, [r7, #24]
	}
 800802e:	4618      	mov	r0, r3
 8008030:	3720      	adds	r7, #32
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b088      	sub	sp, #32
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	607a      	str	r2, [r7, #4]
 8008042:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	461a      	mov	r2, r3
 800804e:	21a5      	movs	r1, #165	@ 0xa5
 8008050:	f008 ffcb 	bl	8010fea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800805e:	3b01      	subs	r3, #1
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	f023 0307 	bic.w	r3, r3, #7
 800806c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	f003 0307 	and.w	r3, r3, #7
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00b      	beq.n	8008090 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	617b      	str	r3, [r7, #20]
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	e7fd      	b.n	800808c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d01f      	beq.n	80080d6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008096:	2300      	movs	r3, #0
 8008098:	61fb      	str	r3, [r7, #28]
 800809a:	e012      	b.n	80080c2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	4413      	add	r3, r2
 80080a2:	7819      	ldrb	r1, [r3, #0]
 80080a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	4413      	add	r3, r2
 80080aa:	3334      	adds	r3, #52	@ 0x34
 80080ac:	460a      	mov	r2, r1
 80080ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	4413      	add	r3, r2
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d006      	beq.n	80080ca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	3301      	adds	r3, #1
 80080c0:	61fb      	str	r3, [r7, #28]
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	2b0f      	cmp	r3, #15
 80080c6:	d9e9      	bls.n	800809c <prvInitialiseNewTask+0x66>
 80080c8:	e000      	b.n	80080cc <prvInitialiseNewTask+0x96>
			{
				break;
 80080ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080d4:	e003      	b.n	80080de <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e0:	2b37      	cmp	r3, #55	@ 0x37
 80080e2:	d901      	bls.n	80080e8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080e4:	2337      	movs	r3, #55	@ 0x37
 80080e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080f2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f6:	2200      	movs	r2, #0
 80080f8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	3304      	adds	r3, #4
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fe34 	bl	8006d6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008106:	3318      	adds	r3, #24
 8008108:	4618      	mov	r0, r3
 800810a:	f7fe fe2f 	bl	8006d6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008112:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008116:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008122:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008126:	2200      	movs	r2, #0
 8008128:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	68f9      	ldr	r1, [r7, #12]
 8008136:	69b8      	ldr	r0, [r7, #24]
 8008138:	f001 fb9a 	bl	8009870 <pxPortInitialiseStack>
 800813c:	4602      	mov	r2, r0
 800813e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008140:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800814a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800814c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800814e:	bf00      	nop
 8008150:	3720      	adds	r7, #32
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008160:	f001 fcba 	bl	8009ad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008164:	4b2d      	ldr	r3, [pc, #180]	@ (800821c <prvAddNewTaskToReadyList+0xc4>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3301      	adds	r3, #1
 800816a:	4a2c      	ldr	r2, [pc, #176]	@ (800821c <prvAddNewTaskToReadyList+0xc4>)
 800816c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800816e:	4b2c      	ldr	r3, [pc, #176]	@ (8008220 <prvAddNewTaskToReadyList+0xc8>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008176:	4a2a      	ldr	r2, [pc, #168]	@ (8008220 <prvAddNewTaskToReadyList+0xc8>)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800817c:	4b27      	ldr	r3, [pc, #156]	@ (800821c <prvAddNewTaskToReadyList+0xc4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d110      	bne.n	80081a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008184:	f000 fd7a 	bl	8008c7c <prvInitialiseTaskLists>
 8008188:	e00d      	b.n	80081a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800818a:	4b26      	ldr	r3, [pc, #152]	@ (8008224 <prvAddNewTaskToReadyList+0xcc>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d109      	bne.n	80081a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008192:	4b23      	ldr	r3, [pc, #140]	@ (8008220 <prvAddNewTaskToReadyList+0xc8>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819c:	429a      	cmp	r2, r3
 800819e:	d802      	bhi.n	80081a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081a0:	4a1f      	ldr	r2, [pc, #124]	@ (8008220 <prvAddNewTaskToReadyList+0xc8>)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081a6:	4b20      	ldr	r3, [pc, #128]	@ (8008228 <prvAddNewTaskToReadyList+0xd0>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3301      	adds	r3, #1
 80081ac:	4a1e      	ldr	r2, [pc, #120]	@ (8008228 <prvAddNewTaskToReadyList+0xd0>)
 80081ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008228 <prvAddNewTaskToReadyList+0xd0>)
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081bc:	4b1b      	ldr	r3, [pc, #108]	@ (800822c <prvAddNewTaskToReadyList+0xd4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d903      	bls.n	80081cc <prvAddNewTaskToReadyList+0x74>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c8:	4a18      	ldr	r2, [pc, #96]	@ (800822c <prvAddNewTaskToReadyList+0xd4>)
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4a15      	ldr	r2, [pc, #84]	@ (8008230 <prvAddNewTaskToReadyList+0xd8>)
 80081da:	441a      	add	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3304      	adds	r3, #4
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f7fe fdcf 	bl	8006d86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081e8:	f001 fca8 	bl	8009b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008224 <prvAddNewTaskToReadyList+0xcc>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00e      	beq.n	8008212 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008220 <prvAddNewTaskToReadyList+0xc8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fe:	429a      	cmp	r2, r3
 8008200:	d207      	bcs.n	8008212 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008202:	4b0c      	ldr	r3, [pc, #48]	@ (8008234 <prvAddNewTaskToReadyList+0xdc>)
 8008204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20001160 	.word	0x20001160
 8008220:	20000c8c 	.word	0x20000c8c
 8008224:	2000116c 	.word	0x2000116c
 8008228:	2000117c 	.word	0x2000117c
 800822c:	20001168 	.word	0x20001168
 8008230:	20000c90 	.word	0x20000c90
 8008234:	e000ed04 	.word	0xe000ed04

08008238 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008240:	f001 fc4a 	bl	8009ad8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <vTaskDelete+0x18>
 800824a:	4b2d      	ldr	r3, [pc, #180]	@ (8008300 <vTaskDelete+0xc8>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	e000      	b.n	8008252 <vTaskDelete+0x1a>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	3304      	adds	r3, #4
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe fdf1 	bl	8006e40 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3318      	adds	r3, #24
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe fde8 	bl	8006e40 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008270:	4b24      	ldr	r3, [pc, #144]	@ (8008304 <vTaskDelete+0xcc>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3301      	adds	r3, #1
 8008276:	4a23      	ldr	r2, [pc, #140]	@ (8008304 <vTaskDelete+0xcc>)
 8008278:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800827a:	4b21      	ldr	r3, [pc, #132]	@ (8008300 <vTaskDelete+0xc8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	429a      	cmp	r2, r3
 8008282:	d10b      	bne.n	800829c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3304      	adds	r3, #4
 8008288:	4619      	mov	r1, r3
 800828a:	481f      	ldr	r0, [pc, #124]	@ (8008308 <vTaskDelete+0xd0>)
 800828c:	f7fe fd7b 	bl	8006d86 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008290:	4b1e      	ldr	r3, [pc, #120]	@ (800830c <vTaskDelete+0xd4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3301      	adds	r3, #1
 8008296:	4a1d      	ldr	r2, [pc, #116]	@ (800830c <vTaskDelete+0xd4>)
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	e009      	b.n	80082b0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800829c:	4b1c      	ldr	r3, [pc, #112]	@ (8008310 <vTaskDelete+0xd8>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008310 <vTaskDelete+0xd8>)
 80082a4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 fd56 	bl	8008d58 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80082ac:	f000 fd84 	bl	8008db8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80082b0:	f001 fc44 	bl	8009b3c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80082b4:	4b17      	ldr	r3, [pc, #92]	@ (8008314 <vTaskDelete+0xdc>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d01c      	beq.n	80082f6 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80082bc:	4b10      	ldr	r3, [pc, #64]	@ (8008300 <vTaskDelete+0xc8>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d117      	bne.n	80082f6 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80082c6:	4b14      	ldr	r3, [pc, #80]	@ (8008318 <vTaskDelete+0xe0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00b      	beq.n	80082e6 <vTaskDelete+0xae>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	60bb      	str	r3, [r7, #8]
}
 80082e0:	bf00      	nop
 80082e2:	bf00      	nop
 80082e4:	e7fd      	b.n	80082e2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80082e6:	4b0d      	ldr	r3, [pc, #52]	@ (800831c <vTaskDelete+0xe4>)
 80082e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082f6:	bf00      	nop
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20000c8c 	.word	0x20000c8c
 8008304:	2000117c 	.word	0x2000117c
 8008308:	20001134 	.word	0x20001134
 800830c:	20001148 	.word	0x20001148
 8008310:	20001160 	.word	0x20001160
 8008314:	2000116c 	.word	0x2000116c
 8008318:	20001188 	.word	0x20001188
 800831c:	e000ed04 	.word	0xe000ed04

08008320 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	@ 0x28
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800832a:	2300      	movs	r3, #0
 800832c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10b      	bne.n	800834c <vTaskDelayUntil+0x2c>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	617b      	str	r3, [r7, #20]
}
 8008346:	bf00      	nop
 8008348:	bf00      	nop
 800834a:	e7fd      	b.n	8008348 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10b      	bne.n	800836a <vTaskDelayUntil+0x4a>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	613b      	str	r3, [r7, #16]
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	e7fd      	b.n	8008366 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800836a:	4b2a      	ldr	r3, [pc, #168]	@ (8008414 <vTaskDelayUntil+0xf4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00b      	beq.n	800838a <vTaskDelayUntil+0x6a>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	60fb      	str	r3, [r7, #12]
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop
 8008388:	e7fd      	b.n	8008386 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800838a:	f000 f94f 	bl	800862c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800838e:	4b22      	ldr	r3, [pc, #136]	@ (8008418 <vTaskDelayUntil+0xf8>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	4413      	add	r3, r2
 800839c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6a3a      	ldr	r2, [r7, #32]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d20b      	bcs.n	80083c0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	69fa      	ldr	r2, [r7, #28]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d211      	bcs.n	80083d6 <vTaskDelayUntil+0xb6>
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d90d      	bls.n	80083d6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80083ba:	2301      	movs	r3, #1
 80083bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80083be:	e00a      	b.n	80083d6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	69fa      	ldr	r2, [r7, #28]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d303      	bcc.n	80083d2 <vTaskDelayUntil+0xb2>
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d901      	bls.n	80083d6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80083d2:	2301      	movs	r3, #1
 80083d4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	69fa      	ldr	r2, [r7, #28]
 80083da:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80083dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d006      	beq.n	80083f0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80083e2:	69fa      	ldr	r2, [r7, #28]
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	2100      	movs	r1, #0
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fe92 	bl	8009114 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80083f0:	f000 f92a 	bl	8008648 <xTaskResumeAll>
 80083f4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d107      	bne.n	800840c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80083fc:	4b07      	ldr	r3, [pc, #28]	@ (800841c <vTaskDelayUntil+0xfc>)
 80083fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800840c:	bf00      	nop
 800840e:	3728      	adds	r7, #40	@ 0x28
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	20001188 	.word	0x20001188
 8008418:	20001164 	.word	0x20001164
 800841c:	e000ed04 	.word	0xe000ed04

08008420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d018      	beq.n	8008464 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008432:	4b14      	ldr	r3, [pc, #80]	@ (8008484 <vTaskDelay+0x64>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00b      	beq.n	8008452 <vTaskDelay+0x32>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	60bb      	str	r3, [r7, #8]
}
 800844c:	bf00      	nop
 800844e:	bf00      	nop
 8008450:	e7fd      	b.n	800844e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008452:	f000 f8eb 	bl	800862c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008456:	2100      	movs	r1, #0
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fe5b 	bl	8009114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800845e:	f000 f8f3 	bl	8008648 <xTaskResumeAll>
 8008462:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d107      	bne.n	800847a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800846a:	4b07      	ldr	r3, [pc, #28]	@ (8008488 <vTaskDelay+0x68>)
 800846c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20001188 	.word	0x20001188
 8008488:	e000ed04 	.word	0xe000ed04

0800848c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10b      	bne.n	80084b6 <eTaskGetState+0x2a>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	60bb      	str	r3, [r7, #8]
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	e7fd      	b.n	80084b2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80084b6:	4b24      	ldr	r3, [pc, #144]	@ (8008548 <eTaskGetState+0xbc>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d102      	bne.n	80084c6 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80084c0:	2300      	movs	r3, #0
 80084c2:	77fb      	strb	r3, [r7, #31]
 80084c4:	e03a      	b.n	800853c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 80084c6:	f001 fb07 	bl	8009ad8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80084d0:	4b1e      	ldr	r3, [pc, #120]	@ (800854c <eTaskGetState+0xc0>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80084d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008550 <eTaskGetState+0xc4>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80084dc:	f001 fb2e 	bl	8009b3c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d003      	beq.n	80084f0 <eTaskGetState+0x64>
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d102      	bne.n	80084f6 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80084f0:	2302      	movs	r3, #2
 80084f2:	77fb      	strb	r3, [r7, #31]
 80084f4:	e022      	b.n	800853c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	4a16      	ldr	r2, [pc, #88]	@ (8008554 <eTaskGetState+0xc8>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d112      	bne.n	8008524 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10b      	bne.n	800851e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b01      	cmp	r3, #1
 8008510:	d102      	bne.n	8008518 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8008512:	2302      	movs	r3, #2
 8008514:	77fb      	strb	r3, [r7, #31]
 8008516:	e011      	b.n	800853c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8008518:	2303      	movs	r3, #3
 800851a:	77fb      	strb	r3, [r7, #31]
 800851c:	e00e      	b.n	800853c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800851e:	2302      	movs	r3, #2
 8008520:	77fb      	strb	r3, [r7, #31]
 8008522:	e00b      	b.n	800853c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	4a0c      	ldr	r2, [pc, #48]	@ (8008558 <eTaskGetState+0xcc>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d002      	beq.n	8008532 <eTaskGetState+0xa6>
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d102      	bne.n	8008538 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8008532:	2304      	movs	r3, #4
 8008534:	77fb      	strb	r3, [r7, #31]
 8008536:	e001      	b.n	800853c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8008538:	2301      	movs	r3, #1
 800853a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800853c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800853e:	4618      	mov	r0, r3
 8008540:	3720      	adds	r7, #32
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20000c8c 	.word	0x20000c8c
 800854c:	20001118 	.word	0x20001118
 8008550:	2000111c 	.word	0x2000111c
 8008554:	2000114c 	.word	0x2000114c
 8008558:	20001134 	.word	0x20001134

0800855c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08a      	sub	sp, #40	@ 0x28
 8008560:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008566:	2300      	movs	r3, #0
 8008568:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800856a:	463a      	mov	r2, r7
 800856c:	1d39      	adds	r1, r7, #4
 800856e:	f107 0308 	add.w	r3, r7, #8
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe fba6 	bl	8006cc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	9202      	str	r2, [sp, #8]
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	2300      	movs	r3, #0
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	2300      	movs	r3, #0
 8008588:	460a      	mov	r2, r1
 800858a:	4922      	ldr	r1, [pc, #136]	@ (8008614 <vTaskStartScheduler+0xb8>)
 800858c:	4822      	ldr	r0, [pc, #136]	@ (8008618 <vTaskStartScheduler+0xbc>)
 800858e:	f7ff fcad 	bl	8007eec <xTaskCreateStatic>
 8008592:	4603      	mov	r3, r0
 8008594:	4a21      	ldr	r2, [pc, #132]	@ (800861c <vTaskStartScheduler+0xc0>)
 8008596:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008598:	4b20      	ldr	r3, [pc, #128]	@ (800861c <vTaskStartScheduler+0xc0>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085a0:	2301      	movs	r3, #1
 80085a2:	617b      	str	r3, [r7, #20]
 80085a4:	e001      	b.n	80085aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d102      	bne.n	80085b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085b0:	f000 fe04 	bl	80091bc <xTimerCreateTimerTask>
 80085b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d116      	bne.n	80085ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	613b      	str	r3, [r7, #16]
}
 80085ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085d0:	4b13      	ldr	r3, [pc, #76]	@ (8008620 <vTaskStartScheduler+0xc4>)
 80085d2:	f04f 32ff 	mov.w	r2, #4294967295
 80085d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085d8:	4b12      	ldr	r3, [pc, #72]	@ (8008624 <vTaskStartScheduler+0xc8>)
 80085da:	2201      	movs	r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085de:	4b12      	ldr	r3, [pc, #72]	@ (8008628 <vTaskStartScheduler+0xcc>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085e4:	f001 f9d4 	bl	8009990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085e8:	e00f      	b.n	800860a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f0:	d10b      	bne.n	800860a <vTaskStartScheduler+0xae>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	60fb      	str	r3, [r7, #12]
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	e7fd      	b.n	8008606 <vTaskStartScheduler+0xaa>
}
 800860a:	bf00      	nop
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	08011be4 	.word	0x08011be4
 8008618:	08008c4d 	.word	0x08008c4d
 800861c:	20001184 	.word	0x20001184
 8008620:	20001180 	.word	0x20001180
 8008624:	2000116c 	.word	0x2000116c
 8008628:	20001164 	.word	0x20001164

0800862c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008630:	4b04      	ldr	r3, [pc, #16]	@ (8008644 <vTaskSuspendAll+0x18>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3301      	adds	r3, #1
 8008636:	4a03      	ldr	r2, [pc, #12]	@ (8008644 <vTaskSuspendAll+0x18>)
 8008638:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800863a:	bf00      	nop
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	20001188 	.word	0x20001188

08008648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800864e:	2300      	movs	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008652:	2300      	movs	r3, #0
 8008654:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008656:	4b42      	ldr	r3, [pc, #264]	@ (8008760 <xTaskResumeAll+0x118>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10b      	bne.n	8008676 <xTaskResumeAll+0x2e>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	603b      	str	r3, [r7, #0]
}
 8008670:	bf00      	nop
 8008672:	bf00      	nop
 8008674:	e7fd      	b.n	8008672 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008676:	f001 fa2f 	bl	8009ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800867a:	4b39      	ldr	r3, [pc, #228]	@ (8008760 <xTaskResumeAll+0x118>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3b01      	subs	r3, #1
 8008680:	4a37      	ldr	r2, [pc, #220]	@ (8008760 <xTaskResumeAll+0x118>)
 8008682:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008684:	4b36      	ldr	r3, [pc, #216]	@ (8008760 <xTaskResumeAll+0x118>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d162      	bne.n	8008752 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800868c:	4b35      	ldr	r3, [pc, #212]	@ (8008764 <xTaskResumeAll+0x11c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d05e      	beq.n	8008752 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008694:	e02f      	b.n	80086f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008696:	4b34      	ldr	r3, [pc, #208]	@ (8008768 <xTaskResumeAll+0x120>)
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3318      	adds	r3, #24
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe fbcc 	bl	8006e40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3304      	adds	r3, #4
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe fbc7 	bl	8006e40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086b6:	4b2d      	ldr	r3, [pc, #180]	@ (800876c <xTaskResumeAll+0x124>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d903      	bls.n	80086c6 <xTaskResumeAll+0x7e>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c2:	4a2a      	ldr	r2, [pc, #168]	@ (800876c <xTaskResumeAll+0x124>)
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4a27      	ldr	r2, [pc, #156]	@ (8008770 <xTaskResumeAll+0x128>)
 80086d4:	441a      	add	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3304      	adds	r3, #4
 80086da:	4619      	mov	r1, r3
 80086dc:	4610      	mov	r0, r2
 80086de:	f7fe fb52 	bl	8006d86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e6:	4b23      	ldr	r3, [pc, #140]	@ (8008774 <xTaskResumeAll+0x12c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d302      	bcc.n	80086f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80086f0:	4b21      	ldr	r3, [pc, #132]	@ (8008778 <xTaskResumeAll+0x130>)
 80086f2:	2201      	movs	r2, #1
 80086f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086f6:	4b1c      	ldr	r3, [pc, #112]	@ (8008768 <xTaskResumeAll+0x120>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1cb      	bne.n	8008696 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008704:	f000 fb58 	bl	8008db8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008708:	4b1c      	ldr	r3, [pc, #112]	@ (800877c <xTaskResumeAll+0x134>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d010      	beq.n	8008736 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008714:	f000 f846 	bl	80087a4 <xTaskIncrementTick>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800871e:	4b16      	ldr	r3, [pc, #88]	@ (8008778 <xTaskResumeAll+0x130>)
 8008720:	2201      	movs	r2, #1
 8008722:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3b01      	subs	r3, #1
 8008728:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1f1      	bne.n	8008714 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008730:	4b12      	ldr	r3, [pc, #72]	@ (800877c <xTaskResumeAll+0x134>)
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008736:	4b10      	ldr	r3, [pc, #64]	@ (8008778 <xTaskResumeAll+0x130>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d009      	beq.n	8008752 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800873e:	2301      	movs	r3, #1
 8008740:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008742:	4b0f      	ldr	r3, [pc, #60]	@ (8008780 <xTaskResumeAll+0x138>)
 8008744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008752:	f001 f9f3 	bl	8009b3c <vPortExitCritical>

	return xAlreadyYielded;
 8008756:	68bb      	ldr	r3, [r7, #8]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20001188 	.word	0x20001188
 8008764:	20001160 	.word	0x20001160
 8008768:	20001120 	.word	0x20001120
 800876c:	20001168 	.word	0x20001168
 8008770:	20000c90 	.word	0x20000c90
 8008774:	20000c8c 	.word	0x20000c8c
 8008778:	20001174 	.word	0x20001174
 800877c:	20001170 	.word	0x20001170
 8008780:	e000ed04 	.word	0xe000ed04

08008784 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800878a:	4b05      	ldr	r3, [pc, #20]	@ (80087a0 <xTaskGetTickCount+0x1c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008790:	687b      	ldr	r3, [r7, #4]
}
 8008792:	4618      	mov	r0, r3
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	20001164 	.word	0x20001164

080087a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087aa:	2300      	movs	r3, #0
 80087ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ae:	4b4f      	ldr	r3, [pc, #316]	@ (80088ec <xTaskIncrementTick+0x148>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f040 8090 	bne.w	80088d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087b8:	4b4d      	ldr	r3, [pc, #308]	@ (80088f0 <xTaskIncrementTick+0x14c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3301      	adds	r3, #1
 80087be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087c0:	4a4b      	ldr	r2, [pc, #300]	@ (80088f0 <xTaskIncrementTick+0x14c>)
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d121      	bne.n	8008810 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80087cc:	4b49      	ldr	r3, [pc, #292]	@ (80088f4 <xTaskIncrementTick+0x150>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00b      	beq.n	80087ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	603b      	str	r3, [r7, #0]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <xTaskIncrementTick+0x46>
 80087ee:	4b41      	ldr	r3, [pc, #260]	@ (80088f4 <xTaskIncrementTick+0x150>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	4b40      	ldr	r3, [pc, #256]	@ (80088f8 <xTaskIncrementTick+0x154>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a3e      	ldr	r2, [pc, #248]	@ (80088f4 <xTaskIncrementTick+0x150>)
 80087fa:	6013      	str	r3, [r2, #0]
 80087fc:	4a3e      	ldr	r2, [pc, #248]	@ (80088f8 <xTaskIncrementTick+0x154>)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	4b3e      	ldr	r3, [pc, #248]	@ (80088fc <xTaskIncrementTick+0x158>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3301      	adds	r3, #1
 8008808:	4a3c      	ldr	r2, [pc, #240]	@ (80088fc <xTaskIncrementTick+0x158>)
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	f000 fad4 	bl	8008db8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008810:	4b3b      	ldr	r3, [pc, #236]	@ (8008900 <xTaskIncrementTick+0x15c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	429a      	cmp	r2, r3
 8008818:	d349      	bcc.n	80088ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800881a:	4b36      	ldr	r3, [pc, #216]	@ (80088f4 <xTaskIncrementTick+0x150>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d104      	bne.n	800882e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008824:	4b36      	ldr	r3, [pc, #216]	@ (8008900 <xTaskIncrementTick+0x15c>)
 8008826:	f04f 32ff 	mov.w	r2, #4294967295
 800882a:	601a      	str	r2, [r3, #0]
					break;
 800882c:	e03f      	b.n	80088ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882e:	4b31      	ldr	r3, [pc, #196]	@ (80088f4 <xTaskIncrementTick+0x150>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	429a      	cmp	r2, r3
 8008844:	d203      	bcs.n	800884e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008846:	4a2e      	ldr	r2, [pc, #184]	@ (8008900 <xTaskIncrementTick+0x15c>)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800884c:	e02f      	b.n	80088ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	3304      	adds	r3, #4
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe faf4 	bl	8006e40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800885c:	2b00      	cmp	r3, #0
 800885e:	d004      	beq.n	800886a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	3318      	adds	r3, #24
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe faeb 	bl	8006e40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886e:	4b25      	ldr	r3, [pc, #148]	@ (8008904 <xTaskIncrementTick+0x160>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d903      	bls.n	800887e <xTaskIncrementTick+0xda>
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887a:	4a22      	ldr	r2, [pc, #136]	@ (8008904 <xTaskIncrementTick+0x160>)
 800887c:	6013      	str	r3, [r2, #0]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4a1f      	ldr	r2, [pc, #124]	@ (8008908 <xTaskIncrementTick+0x164>)
 800888c:	441a      	add	r2, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	3304      	adds	r3, #4
 8008892:	4619      	mov	r1, r3
 8008894:	4610      	mov	r0, r2
 8008896:	f7fe fa76 	bl	8006d86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889e:	4b1b      	ldr	r3, [pc, #108]	@ (800890c <xTaskIncrementTick+0x168>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d3b8      	bcc.n	800881a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80088a8:	2301      	movs	r3, #1
 80088aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ac:	e7b5      	b.n	800881a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088ae:	4b17      	ldr	r3, [pc, #92]	@ (800890c <xTaskIncrementTick+0x168>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b4:	4914      	ldr	r1, [pc, #80]	@ (8008908 <xTaskIncrementTick+0x164>)
 80088b6:	4613      	mov	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	440b      	add	r3, r1
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d901      	bls.n	80088ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80088c6:	2301      	movs	r3, #1
 80088c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80088ca:	4b11      	ldr	r3, [pc, #68]	@ (8008910 <xTaskIncrementTick+0x16c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d007      	beq.n	80088e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80088d2:	2301      	movs	r3, #1
 80088d4:	617b      	str	r3, [r7, #20]
 80088d6:	e004      	b.n	80088e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008914 <xTaskIncrementTick+0x170>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3301      	adds	r3, #1
 80088de:	4a0d      	ldr	r2, [pc, #52]	@ (8008914 <xTaskIncrementTick+0x170>)
 80088e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088e2:	697b      	ldr	r3, [r7, #20]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	20001188 	.word	0x20001188
 80088f0:	20001164 	.word	0x20001164
 80088f4:	20001118 	.word	0x20001118
 80088f8:	2000111c 	.word	0x2000111c
 80088fc:	20001178 	.word	0x20001178
 8008900:	20001180 	.word	0x20001180
 8008904:	20001168 	.word	0x20001168
 8008908:	20000c90 	.word	0x20000c90
 800890c:	20000c8c 	.word	0x20000c8c
 8008910:	20001174 	.word	0x20001174
 8008914:	20001170 	.word	0x20001170

08008918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800891e:	4b28      	ldr	r3, [pc, #160]	@ (80089c0 <vTaskSwitchContext+0xa8>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008926:	4b27      	ldr	r3, [pc, #156]	@ (80089c4 <vTaskSwitchContext+0xac>)
 8008928:	2201      	movs	r2, #1
 800892a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800892c:	e042      	b.n	80089b4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800892e:	4b25      	ldr	r3, [pc, #148]	@ (80089c4 <vTaskSwitchContext+0xac>)
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008934:	4b24      	ldr	r3, [pc, #144]	@ (80089c8 <vTaskSwitchContext+0xb0>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	60fb      	str	r3, [r7, #12]
 800893a:	e011      	b.n	8008960 <vTaskSwitchContext+0x48>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10b      	bne.n	800895a <vTaskSwitchContext+0x42>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	607b      	str	r3, [r7, #4]
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop
 8008958:	e7fd      	b.n	8008956 <vTaskSwitchContext+0x3e>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3b01      	subs	r3, #1
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	491a      	ldr	r1, [pc, #104]	@ (80089cc <vTaskSwitchContext+0xb4>)
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	4613      	mov	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	440b      	add	r3, r1
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d0e3      	beq.n	800893c <vTaskSwitchContext+0x24>
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4a13      	ldr	r2, [pc, #76]	@ (80089cc <vTaskSwitchContext+0xb4>)
 8008980:	4413      	add	r3, r2
 8008982:	60bb      	str	r3, [r7, #8]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	605a      	str	r2, [r3, #4]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	3308      	adds	r3, #8
 8008996:	429a      	cmp	r2, r3
 8008998:	d104      	bne.n	80089a4 <vTaskSwitchContext+0x8c>
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	605a      	str	r2, [r3, #4]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	4a09      	ldr	r2, [pc, #36]	@ (80089d0 <vTaskSwitchContext+0xb8>)
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	4a06      	ldr	r2, [pc, #24]	@ (80089c8 <vTaskSwitchContext+0xb0>)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6013      	str	r3, [r2, #0]
}
 80089b4:	bf00      	nop
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	20001188 	.word	0x20001188
 80089c4:	20001174 	.word	0x20001174
 80089c8:	20001168 	.word	0x20001168
 80089cc:	20000c90 	.word	0x20000c90
 80089d0:	20000c8c 	.word	0x20000c8c

080089d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10b      	bne.n	80089fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	60fb      	str	r3, [r7, #12]
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	e7fd      	b.n	80089f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <vTaskPlaceOnEventList+0x48>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3318      	adds	r3, #24
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7fe f9e2 	bl	8006dce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	6838      	ldr	r0, [r7, #0]
 8008a0e:	f000 fb81 	bl	8009114 <prvAddCurrentTaskToDelayedList>
}
 8008a12:	bf00      	nop
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20000c8c 	.word	0x20000c8c

08008a20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10b      	bne.n	8008a4a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	617b      	str	r3, [r7, #20]
}
 8008a44:	bf00      	nop
 8008a46:	bf00      	nop
 8008a48:	e7fd      	b.n	8008a46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a74 <vTaskPlaceOnEventListRestricted+0x54>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3318      	adds	r3, #24
 8008a50:	4619      	mov	r1, r3
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f7fe f997 	bl	8006d86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	68b8      	ldr	r0, [r7, #8]
 8008a68:	f000 fb54 	bl	8009114 <prvAddCurrentTaskToDelayedList>
	}
 8008a6c:	bf00      	nop
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20000c8c 	.word	0x20000c8c

08008a78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10b      	bne.n	8008aa6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	60fb      	str	r3, [r7, #12]
}
 8008aa0:	bf00      	nop
 8008aa2:	bf00      	nop
 8008aa4:	e7fd      	b.n	8008aa2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	3318      	adds	r3, #24
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe f9c8 	bl	8006e40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b28 <xTaskRemoveFromEventList+0xb0>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d11d      	bne.n	8008af4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	3304      	adds	r3, #4
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fe f9bf 	bl	8006e40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac6:	4b19      	ldr	r3, [pc, #100]	@ (8008b2c <xTaskRemoveFromEventList+0xb4>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d903      	bls.n	8008ad6 <xTaskRemoveFromEventList+0x5e>
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad2:	4a16      	ldr	r2, [pc, #88]	@ (8008b2c <xTaskRemoveFromEventList+0xb4>)
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ada:	4613      	mov	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4a13      	ldr	r2, [pc, #76]	@ (8008b30 <xTaskRemoveFromEventList+0xb8>)
 8008ae4:	441a      	add	r2, r3
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4619      	mov	r1, r3
 8008aec:	4610      	mov	r0, r2
 8008aee:	f7fe f94a 	bl	8006d86 <vListInsertEnd>
 8008af2:	e005      	b.n	8008b00 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	3318      	adds	r3, #24
 8008af8:	4619      	mov	r1, r3
 8008afa:	480e      	ldr	r0, [pc, #56]	@ (8008b34 <xTaskRemoveFromEventList+0xbc>)
 8008afc:	f7fe f943 	bl	8006d86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b04:	4b0c      	ldr	r3, [pc, #48]	@ (8008b38 <xTaskRemoveFromEventList+0xc0>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d905      	bls.n	8008b1a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b12:	4b0a      	ldr	r3, [pc, #40]	@ (8008b3c <xTaskRemoveFromEventList+0xc4>)
 8008b14:	2201      	movs	r2, #1
 8008b16:	601a      	str	r2, [r3, #0]
 8008b18:	e001      	b.n	8008b1e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b1e:	697b      	ldr	r3, [r7, #20]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20001188 	.word	0x20001188
 8008b2c:	20001168 	.word	0x20001168
 8008b30:	20000c90 	.word	0x20000c90
 8008b34:	20001120 	.word	0x20001120
 8008b38:	20000c8c 	.word	0x20000c8c
 8008b3c:	20001174 	.word	0x20001174

08008b40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b48:	4b06      	ldr	r3, [pc, #24]	@ (8008b64 <vTaskInternalSetTimeOutState+0x24>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b50:	4b05      	ldr	r3, [pc, #20]	@ (8008b68 <vTaskInternalSetTimeOutState+0x28>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	605a      	str	r2, [r3, #4]
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	20001178 	.word	0x20001178
 8008b68:	20001164 	.word	0x20001164

08008b6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10b      	bne.n	8008b94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	613b      	str	r3, [r7, #16]
}
 8008b8e:	bf00      	nop
 8008b90:	bf00      	nop
 8008b92:	e7fd      	b.n	8008b90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10b      	bne.n	8008bb2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	60fb      	str	r3, [r7, #12]
}
 8008bac:	bf00      	nop
 8008bae:	bf00      	nop
 8008bb0:	e7fd      	b.n	8008bae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008bb2:	f000 ff91 	bl	8009ad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8008c2c <xTaskCheckForTimeOut+0xc0>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bce:	d102      	bne.n	8008bd6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	61fb      	str	r3, [r7, #28]
 8008bd4:	e023      	b.n	8008c1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	4b15      	ldr	r3, [pc, #84]	@ (8008c30 <xTaskCheckForTimeOut+0xc4>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d007      	beq.n	8008bf2 <xTaskCheckForTimeOut+0x86>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d302      	bcc.n	8008bf2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008bec:	2301      	movs	r3, #1
 8008bee:	61fb      	str	r3, [r7, #28]
 8008bf0:	e015      	b.n	8008c1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d20b      	bcs.n	8008c14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	1ad2      	subs	r2, r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff ff99 	bl	8008b40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	61fb      	str	r3, [r7, #28]
 8008c12:	e004      	b.n	8008c1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c1e:	f000 ff8d 	bl	8009b3c <vPortExitCritical>

	return xReturn;
 8008c22:	69fb      	ldr	r3, [r7, #28]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3720      	adds	r7, #32
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20001164 	.word	0x20001164
 8008c30:	20001178 	.word	0x20001178

08008c34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c38:	4b03      	ldr	r3, [pc, #12]	@ (8008c48 <vTaskMissedYield+0x14>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	601a      	str	r2, [r3, #0]
}
 8008c3e:	bf00      	nop
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	20001174 	.word	0x20001174

08008c4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c54:	f000 f852 	bl	8008cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c58:	4b06      	ldr	r3, [pc, #24]	@ (8008c74 <prvIdleTask+0x28>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d9f9      	bls.n	8008c54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c60:	4b05      	ldr	r3, [pc, #20]	@ (8008c78 <prvIdleTask+0x2c>)
 8008c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c70:	e7f0      	b.n	8008c54 <prvIdleTask+0x8>
 8008c72:	bf00      	nop
 8008c74:	20000c90 	.word	0x20000c90
 8008c78:	e000ed04 	.word	0xe000ed04

08008c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c82:	2300      	movs	r3, #0
 8008c84:	607b      	str	r3, [r7, #4]
 8008c86:	e00c      	b.n	8008ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4a12      	ldr	r2, [pc, #72]	@ (8008cdc <prvInitialiseTaskLists+0x60>)
 8008c94:	4413      	add	r3, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe f848 	bl	8006d2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	607b      	str	r3, [r7, #4]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b37      	cmp	r3, #55	@ 0x37
 8008ca6:	d9ef      	bls.n	8008c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ca8:	480d      	ldr	r0, [pc, #52]	@ (8008ce0 <prvInitialiseTaskLists+0x64>)
 8008caa:	f7fe f83f 	bl	8006d2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cae:	480d      	ldr	r0, [pc, #52]	@ (8008ce4 <prvInitialiseTaskLists+0x68>)
 8008cb0:	f7fe f83c 	bl	8006d2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cb4:	480c      	ldr	r0, [pc, #48]	@ (8008ce8 <prvInitialiseTaskLists+0x6c>)
 8008cb6:	f7fe f839 	bl	8006d2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008cba:	480c      	ldr	r0, [pc, #48]	@ (8008cec <prvInitialiseTaskLists+0x70>)
 8008cbc:	f7fe f836 	bl	8006d2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008cc0:	480b      	ldr	r0, [pc, #44]	@ (8008cf0 <prvInitialiseTaskLists+0x74>)
 8008cc2:	f7fe f833 	bl	8006d2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf4 <prvInitialiseTaskLists+0x78>)
 8008cc8:	4a05      	ldr	r2, [pc, #20]	@ (8008ce0 <prvInitialiseTaskLists+0x64>)
 8008cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf8 <prvInitialiseTaskLists+0x7c>)
 8008cce:	4a05      	ldr	r2, [pc, #20]	@ (8008ce4 <prvInitialiseTaskLists+0x68>)
 8008cd0:	601a      	str	r2, [r3, #0]
}
 8008cd2:	bf00      	nop
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000c90 	.word	0x20000c90
 8008ce0:	200010f0 	.word	0x200010f0
 8008ce4:	20001104 	.word	0x20001104
 8008ce8:	20001120 	.word	0x20001120
 8008cec:	20001134 	.word	0x20001134
 8008cf0:	2000114c 	.word	0x2000114c
 8008cf4:	20001118 	.word	0x20001118
 8008cf8:	2000111c 	.word	0x2000111c

08008cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d02:	e019      	b.n	8008d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d04:	f000 fee8 	bl	8009ad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d08:	4b10      	ldr	r3, [pc, #64]	@ (8008d4c <prvCheckTasksWaitingTermination+0x50>)
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fe f893 	bl	8006e40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d50 <prvCheckTasksWaitingTermination+0x54>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	4a0b      	ldr	r2, [pc, #44]	@ (8008d50 <prvCheckTasksWaitingTermination+0x54>)
 8008d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d24:	4b0b      	ldr	r3, [pc, #44]	@ (8008d54 <prvCheckTasksWaitingTermination+0x58>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8008d54 <prvCheckTasksWaitingTermination+0x58>)
 8008d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d2e:	f000 ff05 	bl	8009b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f810 	bl	8008d58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d38:	4b06      	ldr	r3, [pc, #24]	@ (8008d54 <prvCheckTasksWaitingTermination+0x58>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1e1      	bne.n	8008d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20001134 	.word	0x20001134
 8008d50:	20001160 	.word	0x20001160
 8008d54:	20001148 	.word	0x20001148

08008d58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d108      	bne.n	8008d7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f001 f8a2 	bl	8009eb8 <vPortFree>
				vPortFree( pxTCB );
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 f89f 	bl	8009eb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d7a:	e019      	b.n	8008db0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d103      	bne.n	8008d8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 f896 	bl	8009eb8 <vPortFree>
	}
 8008d8c:	e010      	b.n	8008db0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d00b      	beq.n	8008db0 <prvDeleteTCB+0x58>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	60fb      	str	r3, [r7, #12]
}
 8008daa:	bf00      	nop
 8008dac:	bf00      	nop
 8008dae:	e7fd      	b.n	8008dac <prvDeleteTCB+0x54>
	}
 8008db0:	bf00      	nop
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008df0 <prvResetNextTaskUnblockTime+0x38>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8008df4 <prvResetNextTaskUnblockTime+0x3c>)
 8008dca:	f04f 32ff 	mov.w	r2, #4294967295
 8008dce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008dd0:	e008      	b.n	8008de4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dd2:	4b07      	ldr	r3, [pc, #28]	@ (8008df0 <prvResetNextTaskUnblockTime+0x38>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	4a04      	ldr	r2, [pc, #16]	@ (8008df4 <prvResetNextTaskUnblockTime+0x3c>)
 8008de2:	6013      	str	r3, [r2, #0]
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	20001118 	.word	0x20001118
 8008df4:	20001180 	.word	0x20001180

08008df8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8008e2c <xTaskGetSchedulerState+0x34>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e06:	2301      	movs	r3, #1
 8008e08:	607b      	str	r3, [r7, #4]
 8008e0a:	e008      	b.n	8008e1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e0c:	4b08      	ldr	r3, [pc, #32]	@ (8008e30 <xTaskGetSchedulerState+0x38>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d102      	bne.n	8008e1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e14:	2302      	movs	r3, #2
 8008e16:	607b      	str	r3, [r7, #4]
 8008e18:	e001      	b.n	8008e1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e1e:	687b      	ldr	r3, [r7, #4]
	}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	2000116c 	.word	0x2000116c
 8008e30:	20001188 	.word	0x20001188

08008e34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d051      	beq.n	8008eee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ef8 <xTaskPriorityInherit+0xc4>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d241      	bcs.n	8008edc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	db06      	blt.n	8008e6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e60:	4b25      	ldr	r3, [pc, #148]	@ (8008ef8 <xTaskPriorityInherit+0xc4>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e66:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	6959      	ldr	r1, [r3, #20]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e76:	4613      	mov	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8008efc <xTaskPriorityInherit+0xc8>)
 8008e80:	4413      	add	r3, r2
 8008e82:	4299      	cmp	r1, r3
 8008e84:	d122      	bne.n	8008ecc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	3304      	adds	r3, #4
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fd ffd8 	bl	8006e40 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e90:	4b19      	ldr	r3, [pc, #100]	@ (8008ef8 <xTaskPriorityInherit+0xc4>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e9e:	4b18      	ldr	r3, [pc, #96]	@ (8008f00 <xTaskPriorityInherit+0xcc>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d903      	bls.n	8008eae <xTaskPriorityInherit+0x7a>
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eaa:	4a15      	ldr	r2, [pc, #84]	@ (8008f00 <xTaskPriorityInherit+0xcc>)
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4a10      	ldr	r2, [pc, #64]	@ (8008efc <xTaskPriorityInherit+0xc8>)
 8008ebc:	441a      	add	r2, r3
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	f7fd ff5e 	bl	8006d86 <vListInsertEnd>
 8008eca:	e004      	b.n	8008ed6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef8 <xTaskPriorityInherit+0xc4>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	e008      	b.n	8008eee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ee0:	4b05      	ldr	r3, [pc, #20]	@ (8008ef8 <xTaskPriorityInherit+0xc4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d201      	bcs.n	8008eee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008eea:	2301      	movs	r3, #1
 8008eec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008eee:	68fb      	ldr	r3, [r7, #12]
	}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20000c8c 	.word	0x20000c8c
 8008efc:	20000c90 	.word	0x20000c90
 8008f00:	20001168 	.word	0x20001168

08008f04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d058      	beq.n	8008fcc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8008fd8 <xTaskPriorityDisinherit+0xd4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d00b      	beq.n	8008f3c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	60fb      	str	r3, [r7, #12]
}
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	e7fd      	b.n	8008f38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10b      	bne.n	8008f5c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	60bb      	str	r3, [r7, #8]
}
 8008f56:	bf00      	nop
 8008f58:	bf00      	nop
 8008f5a:	e7fd      	b.n	8008f58 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f60:	1e5a      	subs	r2, r3, #1
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d02c      	beq.n	8008fcc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d128      	bne.n	8008fcc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fd ff5e 	bl	8006e40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f90:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8008fdc <xTaskPriorityDisinherit+0xd8>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d903      	bls.n	8008fac <xTaskPriorityDisinherit+0xa8>
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8008fdc <xTaskPriorityDisinherit+0xd8>)
 8008faa:	6013      	str	r3, [r2, #0]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4a09      	ldr	r2, [pc, #36]	@ (8008fe0 <xTaskPriorityDisinherit+0xdc>)
 8008fba:	441a      	add	r2, r3
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	f7fd fedf 	bl	8006d86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fcc:	697b      	ldr	r3, [r7, #20]
	}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20000c8c 	.word	0x20000c8c
 8008fdc:	20001168 	.word	0x20001168
 8008fe0:	20000c90 	.word	0x20000c90

08008fe4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d06c      	beq.n	80090d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10b      	bne.n	800901c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	60fb      	str	r3, [r7, #12]
}
 8009016:	bf00      	nop
 8009018:	bf00      	nop
 800901a:	e7fd      	b.n	8009018 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	429a      	cmp	r2, r3
 8009024:	d902      	bls.n	800902c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	61fb      	str	r3, [r7, #28]
 800902a:	e002      	b.n	8009032 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009030:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009036:	69fa      	ldr	r2, [r7, #28]
 8009038:	429a      	cmp	r2, r3
 800903a:	d04c      	beq.n	80090d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	429a      	cmp	r2, r3
 8009044:	d147      	bne.n	80090d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009046:	4b26      	ldr	r3, [pc, #152]	@ (80090e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	429a      	cmp	r2, r3
 800904e:	d10b      	bne.n	8009068 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	60bb      	str	r3, [r7, #8]
}
 8009062:	bf00      	nop
 8009064:	bf00      	nop
 8009066:	e7fd      	b.n	8009064 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	69fa      	ldr	r2, [r7, #28]
 8009072:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	db04      	blt.n	8009086 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	6959      	ldr	r1, [r3, #20]
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	4613      	mov	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4a13      	ldr	r2, [pc, #76]	@ (80090e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009096:	4413      	add	r3, r2
 8009098:	4299      	cmp	r1, r3
 800909a:	d11c      	bne.n	80090d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	3304      	adds	r3, #4
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fd fecd 	bl	8006e40 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090aa:	4b0f      	ldr	r3, [pc, #60]	@ (80090e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d903      	bls.n	80090ba <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b6:	4a0c      	ldr	r2, [pc, #48]	@ (80090e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4a07      	ldr	r2, [pc, #28]	@ (80090e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80090c8:	441a      	add	r2, r3
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	3304      	adds	r3, #4
 80090ce:	4619      	mov	r1, r3
 80090d0:	4610      	mov	r0, r2
 80090d2:	f7fd fe58 	bl	8006d86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090d6:	bf00      	nop
 80090d8:	3720      	adds	r7, #32
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000c8c 	.word	0x20000c8c
 80090e4:	20000c90 	.word	0x20000c90
 80090e8:	20001168 	.word	0x20001168

080090ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80090f0:	4b07      	ldr	r3, [pc, #28]	@ (8009110 <pvTaskIncrementMutexHeldCount+0x24>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d004      	beq.n	8009102 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80090f8:	4b05      	ldr	r3, [pc, #20]	@ (8009110 <pvTaskIncrementMutexHeldCount+0x24>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090fe:	3201      	adds	r2, #1
 8009100:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009102:	4b03      	ldr	r3, [pc, #12]	@ (8009110 <pvTaskIncrementMutexHeldCount+0x24>)
 8009104:	681b      	ldr	r3, [r3, #0]
	}
 8009106:	4618      	mov	r0, r3
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	20000c8c 	.word	0x20000c8c

08009114 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800911e:	4b21      	ldr	r3, [pc, #132]	@ (80091a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009124:	4b20      	ldr	r3, [pc, #128]	@ (80091a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3304      	adds	r3, #4
 800912a:	4618      	mov	r0, r3
 800912c:	f7fd fe88 	bl	8006e40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d10a      	bne.n	800914e <prvAddCurrentTaskToDelayedList+0x3a>
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d007      	beq.n	800914e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800913e:	4b1a      	ldr	r3, [pc, #104]	@ (80091a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3304      	adds	r3, #4
 8009144:	4619      	mov	r1, r3
 8009146:	4819      	ldr	r0, [pc, #100]	@ (80091ac <prvAddCurrentTaskToDelayedList+0x98>)
 8009148:	f7fd fe1d 	bl	8006d86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800914c:	e026      	b.n	800919c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4413      	add	r3, r2
 8009154:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009156:	4b14      	ldr	r3, [pc, #80]	@ (80091a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	429a      	cmp	r2, r3
 8009164:	d209      	bcs.n	800917a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009166:	4b12      	ldr	r3, [pc, #72]	@ (80091b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	4b0f      	ldr	r3, [pc, #60]	@ (80091a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3304      	adds	r3, #4
 8009170:	4619      	mov	r1, r3
 8009172:	4610      	mov	r0, r2
 8009174:	f7fd fe2b 	bl	8006dce <vListInsert>
}
 8009178:	e010      	b.n	800919c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800917a:	4b0e      	ldr	r3, [pc, #56]	@ (80091b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	4b0a      	ldr	r3, [pc, #40]	@ (80091a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3304      	adds	r3, #4
 8009184:	4619      	mov	r1, r3
 8009186:	4610      	mov	r0, r2
 8009188:	f7fd fe21 	bl	8006dce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800918c:	4b0a      	ldr	r3, [pc, #40]	@ (80091b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	429a      	cmp	r2, r3
 8009194:	d202      	bcs.n	800919c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009196:	4a08      	ldr	r2, [pc, #32]	@ (80091b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6013      	str	r3, [r2, #0]
}
 800919c:	bf00      	nop
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	20001164 	.word	0x20001164
 80091a8:	20000c8c 	.word	0x20000c8c
 80091ac:	2000114c 	.word	0x2000114c
 80091b0:	2000111c 	.word	0x2000111c
 80091b4:	20001118 	.word	0x20001118
 80091b8:	20001180 	.word	0x20001180

080091bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08a      	sub	sp, #40	@ 0x28
 80091c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80091c6:	f000 fb13 	bl	80097f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80091ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009240 <xTimerCreateTimerTask+0x84>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d021      	beq.n	8009216 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091da:	1d3a      	adds	r2, r7, #4
 80091dc:	f107 0108 	add.w	r1, r7, #8
 80091e0:	f107 030c 	add.w	r3, r7, #12
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fd fd87 	bl	8006cf8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	9202      	str	r2, [sp, #8]
 80091f2:	9301      	str	r3, [sp, #4]
 80091f4:	2302      	movs	r3, #2
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	2300      	movs	r3, #0
 80091fa:	460a      	mov	r2, r1
 80091fc:	4911      	ldr	r1, [pc, #68]	@ (8009244 <xTimerCreateTimerTask+0x88>)
 80091fe:	4812      	ldr	r0, [pc, #72]	@ (8009248 <xTimerCreateTimerTask+0x8c>)
 8009200:	f7fe fe74 	bl	8007eec <xTaskCreateStatic>
 8009204:	4603      	mov	r3, r0
 8009206:	4a11      	ldr	r2, [pc, #68]	@ (800924c <xTimerCreateTimerTask+0x90>)
 8009208:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800920a:	4b10      	ldr	r3, [pc, #64]	@ (800924c <xTimerCreateTimerTask+0x90>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009212:	2301      	movs	r3, #1
 8009214:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10b      	bne.n	8009234 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	613b      	str	r3, [r7, #16]
}
 800922e:	bf00      	nop
 8009230:	bf00      	nop
 8009232:	e7fd      	b.n	8009230 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009234:	697b      	ldr	r3, [r7, #20]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	200011bc 	.word	0x200011bc
 8009244:	08011bec 	.word	0x08011bec
 8009248:	08009389 	.word	0x08009389
 800924c:	200011c0 	.word	0x200011c0

08009250 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08a      	sub	sp, #40	@ 0x28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800925e:	2300      	movs	r3, #0
 8009260:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10b      	bne.n	8009280 <xTimerGenericCommand+0x30>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	623b      	str	r3, [r7, #32]
}
 800927a:	bf00      	nop
 800927c:	bf00      	nop
 800927e:	e7fd      	b.n	800927c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009280:	4b19      	ldr	r3, [pc, #100]	@ (80092e8 <xTimerGenericCommand+0x98>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d02a      	beq.n	80092de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2b05      	cmp	r3, #5
 8009298:	dc18      	bgt.n	80092cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800929a:	f7ff fdad 	bl	8008df8 <xTaskGetSchedulerState>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d109      	bne.n	80092b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092a4:	4b10      	ldr	r3, [pc, #64]	@ (80092e8 <xTimerGenericCommand+0x98>)
 80092a6:	6818      	ldr	r0, [r3, #0]
 80092a8:	f107 0110 	add.w	r1, r7, #16
 80092ac:	2300      	movs	r3, #0
 80092ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092b0:	f7fd ffa4 	bl	80071fc <xQueueGenericSend>
 80092b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80092b6:	e012      	b.n	80092de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092b8:	4b0b      	ldr	r3, [pc, #44]	@ (80092e8 <xTimerGenericCommand+0x98>)
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	f107 0110 	add.w	r1, r7, #16
 80092c0:	2300      	movs	r3, #0
 80092c2:	2200      	movs	r2, #0
 80092c4:	f7fd ff9a 	bl	80071fc <xQueueGenericSend>
 80092c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80092ca:	e008      	b.n	80092de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092cc:	4b06      	ldr	r3, [pc, #24]	@ (80092e8 <xTimerGenericCommand+0x98>)
 80092ce:	6818      	ldr	r0, [r3, #0]
 80092d0:	f107 0110 	add.w	r1, r7, #16
 80092d4:	2300      	movs	r3, #0
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	f7fe f892 	bl	8007400 <xQueueGenericSendFromISR>
 80092dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80092de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3728      	adds	r7, #40	@ 0x28
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	200011bc 	.word	0x200011bc

080092ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af02      	add	r7, sp, #8
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f6:	4b23      	ldr	r3, [pc, #140]	@ (8009384 <prvProcessExpiredTimer+0x98>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	3304      	adds	r3, #4
 8009304:	4618      	mov	r0, r3
 8009306:	f7fd fd9b 	bl	8006e40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009310:	f003 0304 	and.w	r3, r3, #4
 8009314:	2b00      	cmp	r3, #0
 8009316:	d023      	beq.n	8009360 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	699a      	ldr	r2, [r3, #24]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	18d1      	adds	r1, r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	6978      	ldr	r0, [r7, #20]
 8009326:	f000 f8d5 	bl	80094d4 <prvInsertTimerInActiveList>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d020      	beq.n	8009372 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009330:	2300      	movs	r3, #0
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	2300      	movs	r3, #0
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	2100      	movs	r1, #0
 800933a:	6978      	ldr	r0, [r7, #20]
 800933c:	f7ff ff88 	bl	8009250 <xTimerGenericCommand>
 8009340:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d114      	bne.n	8009372 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	60fb      	str	r3, [r7, #12]
}
 800935a:	bf00      	nop
 800935c:	bf00      	nop
 800935e:	e7fd      	b.n	800935c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009366:	f023 0301 	bic.w	r3, r3, #1
 800936a:	b2da      	uxtb	r2, r3
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	6978      	ldr	r0, [r7, #20]
 8009378:	4798      	blx	r3
}
 800937a:	bf00      	nop
 800937c:	3718      	adds	r7, #24
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	200011b4 	.word	0x200011b4

08009388 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009390:	f107 0308 	add.w	r3, r7, #8
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f859 	bl	800944c <prvGetNextExpireTime>
 800939a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	4619      	mov	r1, r3
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f805 	bl	80093b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093a6:	f000 f8d7 	bl	8009558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093aa:	bf00      	nop
 80093ac:	e7f0      	b.n	8009390 <prvTimerTask+0x8>
	...

080093b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093ba:	f7ff f937 	bl	800862c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093be:	f107 0308 	add.w	r3, r7, #8
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 f866 	bl	8009494 <prvSampleTimeNow>
 80093c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d130      	bne.n	8009432 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10a      	bne.n	80093ec <prvProcessTimerOrBlockTask+0x3c>
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d806      	bhi.n	80093ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093de:	f7ff f933 	bl	8008648 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093e2:	68f9      	ldr	r1, [r7, #12]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff ff81 	bl	80092ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093ea:	e024      	b.n	8009436 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d008      	beq.n	8009404 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093f2:	4b13      	ldr	r3, [pc, #76]	@ (8009440 <prvProcessTimerOrBlockTask+0x90>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <prvProcessTimerOrBlockTask+0x50>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e000      	b.n	8009402 <prvProcessTimerOrBlockTask+0x52>
 8009400:	2300      	movs	r3, #0
 8009402:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009404:	4b0f      	ldr	r3, [pc, #60]	@ (8009444 <prvProcessTimerOrBlockTask+0x94>)
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	4619      	mov	r1, r3
 8009412:	f7fe fd37 	bl	8007e84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009416:	f7ff f917 	bl	8008648 <xTaskResumeAll>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10a      	bne.n	8009436 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009420:	4b09      	ldr	r3, [pc, #36]	@ (8009448 <prvProcessTimerOrBlockTask+0x98>)
 8009422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	f3bf 8f6f 	isb	sy
}
 8009430:	e001      	b.n	8009436 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009432:	f7ff f909 	bl	8008648 <xTaskResumeAll>
}
 8009436:	bf00      	nop
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	200011b8 	.word	0x200011b8
 8009444:	200011bc 	.word	0x200011bc
 8009448:	e000ed04 	.word	0xe000ed04

0800944c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009454:	4b0e      	ldr	r3, [pc, #56]	@ (8009490 <prvGetNextExpireTime+0x44>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <prvGetNextExpireTime+0x16>
 800945e:	2201      	movs	r2, #1
 8009460:	e000      	b.n	8009464 <prvGetNextExpireTime+0x18>
 8009462:	2200      	movs	r2, #0
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d105      	bne.n	800947c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009470:	4b07      	ldr	r3, [pc, #28]	@ (8009490 <prvGetNextExpireTime+0x44>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	60fb      	str	r3, [r7, #12]
 800947a:	e001      	b.n	8009480 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009480:	68fb      	ldr	r3, [r7, #12]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	200011b4 	.word	0x200011b4

08009494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800949c:	f7ff f972 	bl	8008784 <xTaskGetTickCount>
 80094a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094a2:	4b0b      	ldr	r3, [pc, #44]	@ (80094d0 <prvSampleTimeNow+0x3c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d205      	bcs.n	80094b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094ac:	f000 f93a 	bl	8009724 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	e002      	b.n	80094be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094be:	4a04      	ldr	r2, [pc, #16]	@ (80094d0 <prvSampleTimeNow+0x3c>)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094c4:	68fb      	ldr	r3, [r7, #12]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	200011c4 	.word	0x200011c4

080094d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094e2:	2300      	movs	r3, #0
 80094e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d812      	bhi.n	8009520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	1ad2      	subs	r2, r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	429a      	cmp	r2, r3
 8009506:	d302      	bcc.n	800950e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	e01b      	b.n	8009546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800950e:	4b10      	ldr	r3, [pc, #64]	@ (8009550 <prvInsertTimerInActiveList+0x7c>)
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3304      	adds	r3, #4
 8009516:	4619      	mov	r1, r3
 8009518:	4610      	mov	r0, r2
 800951a:	f7fd fc58 	bl	8006dce <vListInsert>
 800951e:	e012      	b.n	8009546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d206      	bcs.n	8009536 <prvInsertTimerInActiveList+0x62>
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	429a      	cmp	r2, r3
 800952e:	d302      	bcc.n	8009536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009530:	2301      	movs	r3, #1
 8009532:	617b      	str	r3, [r7, #20]
 8009534:	e007      	b.n	8009546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009536:	4b07      	ldr	r3, [pc, #28]	@ (8009554 <prvInsertTimerInActiveList+0x80>)
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	3304      	adds	r3, #4
 800953e:	4619      	mov	r1, r3
 8009540:	4610      	mov	r0, r2
 8009542:	f7fd fc44 	bl	8006dce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009546:	697b      	ldr	r3, [r7, #20]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	200011b8 	.word	0x200011b8
 8009554:	200011b4 	.word	0x200011b4

08009558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08e      	sub	sp, #56	@ 0x38
 800955c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800955e:	e0ce      	b.n	80096fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	da19      	bge.n	800959a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009566:	1d3b      	adds	r3, r7, #4
 8009568:	3304      	adds	r3, #4
 800956a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800956c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10b      	bne.n	800958a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	61fb      	str	r3, [r7, #28]
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	e7fd      	b.n	8009586 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800958a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009590:	6850      	ldr	r0, [r2, #4]
 8009592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009594:	6892      	ldr	r2, [r2, #8]
 8009596:	4611      	mov	r1, r2
 8009598:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	f2c0 80ae 	blt.w	80096fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d004      	beq.n	80095b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b0:	3304      	adds	r3, #4
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fd fc44 	bl	8006e40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095b8:	463b      	mov	r3, r7
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7ff ff6a 	bl	8009494 <prvSampleTimeNow>
 80095c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b09      	cmp	r3, #9
 80095c6:	f200 8097 	bhi.w	80096f8 <prvProcessReceivedCommands+0x1a0>
 80095ca:	a201      	add	r2, pc, #4	@ (adr r2, 80095d0 <prvProcessReceivedCommands+0x78>)
 80095cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d0:	080095f9 	.word	0x080095f9
 80095d4:	080095f9 	.word	0x080095f9
 80095d8:	080095f9 	.word	0x080095f9
 80095dc:	0800966f 	.word	0x0800966f
 80095e0:	08009683 	.word	0x08009683
 80095e4:	080096cf 	.word	0x080096cf
 80095e8:	080095f9 	.word	0x080095f9
 80095ec:	080095f9 	.word	0x080095f9
 80095f0:	0800966f 	.word	0x0800966f
 80095f4:	08009683 	.word	0x08009683
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095fe:	f043 0301 	orr.w	r3, r3, #1
 8009602:	b2da      	uxtb	r2, r3
 8009604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	18d1      	adds	r1, r2, r3
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009618:	f7ff ff5c 	bl	80094d4 <prvInsertTimerInActiveList>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d06c      	beq.n	80096fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009628:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800962a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d061      	beq.n	80096fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	441a      	add	r2, r3
 8009640:	2300      	movs	r3, #0
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	2300      	movs	r3, #0
 8009646:	2100      	movs	r1, #0
 8009648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800964a:	f7ff fe01 	bl	8009250 <xTimerGenericCommand>
 800964e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d152      	bne.n	80096fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	61bb      	str	r3, [r7, #24]
}
 8009668:	bf00      	nop
 800966a:	bf00      	nop
 800966c:	e7fd      	b.n	800966a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800966e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009674:	f023 0301 	bic.w	r3, r3, #1
 8009678:	b2da      	uxtb	r2, r3
 800967a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009680:	e03d      	b.n	80096fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009688:	f043 0301 	orr.w	r3, r3, #1
 800968c:	b2da      	uxtb	r2, r3
 800968e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009690:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009698:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800969a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10b      	bne.n	80096ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	617b      	str	r3, [r7, #20]
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	e7fd      	b.n	80096b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096bc:	699a      	ldr	r2, [r3, #24]
 80096be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c0:	18d1      	adds	r1, r2, r3
 80096c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096c8:	f7ff ff04 	bl	80094d4 <prvInsertTimerInActiveList>
					break;
 80096cc:	e017      	b.n	80096fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096d4:	f003 0302 	and.w	r3, r3, #2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d103      	bne.n	80096e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80096dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096de:	f000 fbeb 	bl	8009eb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096e2:	e00c      	b.n	80096fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096ea:	f023 0301 	bic.w	r3, r3, #1
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80096f6:	e002      	b.n	80096fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80096f8:	bf00      	nop
 80096fa:	e000      	b.n	80096fe <prvProcessReceivedCommands+0x1a6>
					break;
 80096fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096fe:	4b08      	ldr	r3, [pc, #32]	@ (8009720 <prvProcessReceivedCommands+0x1c8>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	1d39      	adds	r1, r7, #4
 8009704:	2200      	movs	r2, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f7fd ffa8 	bl	800765c <xQueueReceive>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	f47f af26 	bne.w	8009560 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop
 8009718:	3730      	adds	r7, #48	@ 0x30
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	200011bc 	.word	0x200011bc

08009724 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b088      	sub	sp, #32
 8009728:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800972a:	e049      	b.n	80097c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800972c:	4b2e      	ldr	r3, [pc, #184]	@ (80097e8 <prvSwitchTimerLists+0xc4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009736:	4b2c      	ldr	r3, [pc, #176]	@ (80097e8 <prvSwitchTimerLists+0xc4>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	3304      	adds	r3, #4
 8009744:	4618      	mov	r0, r3
 8009746:	f7fd fb7b 	bl	8006e40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	d02f      	beq.n	80097c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	4413      	add	r3, r2
 8009768:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	429a      	cmp	r2, r3
 8009770:	d90e      	bls.n	8009790 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800977e:	4b1a      	ldr	r3, [pc, #104]	@ (80097e8 <prvSwitchTimerLists+0xc4>)
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	3304      	adds	r3, #4
 8009786:	4619      	mov	r1, r3
 8009788:	4610      	mov	r0, r2
 800978a:	f7fd fb20 	bl	8006dce <vListInsert>
 800978e:	e017      	b.n	80097c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009790:	2300      	movs	r3, #0
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	2300      	movs	r3, #0
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	2100      	movs	r1, #0
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7ff fd58 	bl	8009250 <xTimerGenericCommand>
 80097a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10b      	bne.n	80097c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	603b      	str	r3, [r7, #0]
}
 80097ba:	bf00      	nop
 80097bc:	bf00      	nop
 80097be:	e7fd      	b.n	80097bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097c0:	4b09      	ldr	r3, [pc, #36]	@ (80097e8 <prvSwitchTimerLists+0xc4>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1b0      	bne.n	800972c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097ca:	4b07      	ldr	r3, [pc, #28]	@ (80097e8 <prvSwitchTimerLists+0xc4>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097d0:	4b06      	ldr	r3, [pc, #24]	@ (80097ec <prvSwitchTimerLists+0xc8>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a04      	ldr	r2, [pc, #16]	@ (80097e8 <prvSwitchTimerLists+0xc4>)
 80097d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097d8:	4a04      	ldr	r2, [pc, #16]	@ (80097ec <prvSwitchTimerLists+0xc8>)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	6013      	str	r3, [r2, #0]
}
 80097de:	bf00      	nop
 80097e0:	3718      	adds	r7, #24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	200011b4 	.word	0x200011b4
 80097ec:	200011b8 	.word	0x200011b8

080097f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097f6:	f000 f96f 	bl	8009ad8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097fa:	4b15      	ldr	r3, [pc, #84]	@ (8009850 <prvCheckForValidListAndQueue+0x60>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d120      	bne.n	8009844 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009802:	4814      	ldr	r0, [pc, #80]	@ (8009854 <prvCheckForValidListAndQueue+0x64>)
 8009804:	f7fd fa92 	bl	8006d2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009808:	4813      	ldr	r0, [pc, #76]	@ (8009858 <prvCheckForValidListAndQueue+0x68>)
 800980a:	f7fd fa8f 	bl	8006d2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800980e:	4b13      	ldr	r3, [pc, #76]	@ (800985c <prvCheckForValidListAndQueue+0x6c>)
 8009810:	4a10      	ldr	r2, [pc, #64]	@ (8009854 <prvCheckForValidListAndQueue+0x64>)
 8009812:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009814:	4b12      	ldr	r3, [pc, #72]	@ (8009860 <prvCheckForValidListAndQueue+0x70>)
 8009816:	4a10      	ldr	r2, [pc, #64]	@ (8009858 <prvCheckForValidListAndQueue+0x68>)
 8009818:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800981a:	2300      	movs	r3, #0
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	4b11      	ldr	r3, [pc, #68]	@ (8009864 <prvCheckForValidListAndQueue+0x74>)
 8009820:	4a11      	ldr	r2, [pc, #68]	@ (8009868 <prvCheckForValidListAndQueue+0x78>)
 8009822:	2110      	movs	r1, #16
 8009824:	200a      	movs	r0, #10
 8009826:	f7fd fb9f 	bl	8006f68 <xQueueGenericCreateStatic>
 800982a:	4603      	mov	r3, r0
 800982c:	4a08      	ldr	r2, [pc, #32]	@ (8009850 <prvCheckForValidListAndQueue+0x60>)
 800982e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009830:	4b07      	ldr	r3, [pc, #28]	@ (8009850 <prvCheckForValidListAndQueue+0x60>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d005      	beq.n	8009844 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009838:	4b05      	ldr	r3, [pc, #20]	@ (8009850 <prvCheckForValidListAndQueue+0x60>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	490b      	ldr	r1, [pc, #44]	@ (800986c <prvCheckForValidListAndQueue+0x7c>)
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe facc 	bl	8007ddc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009844:	f000 f97a 	bl	8009b3c <vPortExitCritical>
}
 8009848:	bf00      	nop
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	200011bc 	.word	0x200011bc
 8009854:	2000118c 	.word	0x2000118c
 8009858:	200011a0 	.word	0x200011a0
 800985c:	200011b4 	.word	0x200011b4
 8009860:	200011b8 	.word	0x200011b8
 8009864:	20001268 	.word	0x20001268
 8009868:	200011c8 	.word	0x200011c8
 800986c:	08011bf4 	.word	0x08011bf4

08009870 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	3b04      	subs	r3, #4
 8009880:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3b04      	subs	r3, #4
 800988e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	f023 0201 	bic.w	r2, r3, #1
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3b04      	subs	r3, #4
 800989e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098a0:	4a0c      	ldr	r2, [pc, #48]	@ (80098d4 <pxPortInitialiseStack+0x64>)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3b14      	subs	r3, #20
 80098aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3b04      	subs	r3, #4
 80098b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f06f 0202 	mvn.w	r2, #2
 80098be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3b20      	subs	r3, #32
 80098c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098c6:	68fb      	ldr	r3, [r7, #12]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	080098d9 	.word	0x080098d9

080098d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098e2:	4b13      	ldr	r3, [pc, #76]	@ (8009930 <prvTaskExitError+0x58>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ea:	d00b      	beq.n	8009904 <prvTaskExitError+0x2c>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	60fb      	str	r3, [r7, #12]
}
 80098fe:	bf00      	nop
 8009900:	bf00      	nop
 8009902:	e7fd      	b.n	8009900 <prvTaskExitError+0x28>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	60bb      	str	r3, [r7, #8]
}
 8009916:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009918:	bf00      	nop
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d0fc      	beq.n	800991a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009920:	bf00      	nop
 8009922:	bf00      	nop
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	2000000c 	.word	0x2000000c
	...

08009940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009940:	4b07      	ldr	r3, [pc, #28]	@ (8009960 <pxCurrentTCBConst2>)
 8009942:	6819      	ldr	r1, [r3, #0]
 8009944:	6808      	ldr	r0, [r1, #0]
 8009946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994a:	f380 8809 	msr	PSP, r0
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f04f 0000 	mov.w	r0, #0
 8009956:	f380 8811 	msr	BASEPRI, r0
 800995a:	4770      	bx	lr
 800995c:	f3af 8000 	nop.w

08009960 <pxCurrentTCBConst2>:
 8009960:	20000c8c 	.word	0x20000c8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop

08009968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009968:	4808      	ldr	r0, [pc, #32]	@ (800998c <prvPortStartFirstTask+0x24>)
 800996a:	6800      	ldr	r0, [r0, #0]
 800996c:	6800      	ldr	r0, [r0, #0]
 800996e:	f380 8808 	msr	MSP, r0
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f380 8814 	msr	CONTROL, r0
 800997a:	b662      	cpsie	i
 800997c:	b661      	cpsie	f
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	df00      	svc	0
 8009988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800998a:	bf00      	nop
 800998c:	e000ed08 	.word	0xe000ed08

08009990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009996:	4b47      	ldr	r3, [pc, #284]	@ (8009ab4 <xPortStartScheduler+0x124>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a47      	ldr	r2, [pc, #284]	@ (8009ab8 <xPortStartScheduler+0x128>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d10b      	bne.n	80099b8 <xPortStartScheduler+0x28>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	60fb      	str	r3, [r7, #12]
}
 80099b2:	bf00      	nop
 80099b4:	bf00      	nop
 80099b6:	e7fd      	b.n	80099b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099b8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ab4 <xPortStartScheduler+0x124>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a3f      	ldr	r2, [pc, #252]	@ (8009abc <xPortStartScheduler+0x12c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d10b      	bne.n	80099da <xPortStartScheduler+0x4a>
	__asm volatile
 80099c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c6:	f383 8811 	msr	BASEPRI, r3
 80099ca:	f3bf 8f6f 	isb	sy
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	613b      	str	r3, [r7, #16]
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop
 80099d8:	e7fd      	b.n	80099d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099da:	4b39      	ldr	r3, [pc, #228]	@ (8009ac0 <xPortStartScheduler+0x130>)
 80099dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	22ff      	movs	r2, #255	@ 0xff
 80099ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099f4:	78fb      	ldrb	r3, [r7, #3]
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	4b31      	ldr	r3, [pc, #196]	@ (8009ac4 <xPortStartScheduler+0x134>)
 8009a00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a02:	4b31      	ldr	r3, [pc, #196]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a04:	2207      	movs	r2, #7
 8009a06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a08:	e009      	b.n	8009a1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	4a2d      	ldr	r2, [pc, #180]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a1e:	78fb      	ldrb	r3, [r7, #3]
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a26:	2b80      	cmp	r3, #128	@ 0x80
 8009a28:	d0ef      	beq.n	8009a0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a2a:	4b27      	ldr	r3, [pc, #156]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f1c3 0307 	rsb	r3, r3, #7
 8009a32:	2b04      	cmp	r3, #4
 8009a34:	d00b      	beq.n	8009a4e <xPortStartScheduler+0xbe>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	60bb      	str	r3, [r7, #8]
}
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	e7fd      	b.n	8009a4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	021b      	lsls	r3, r3, #8
 8009a54:	4a1c      	ldr	r2, [pc, #112]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a58:	4b1b      	ldr	r3, [pc, #108]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a60:	4a19      	ldr	r2, [pc, #100]	@ (8009ac8 <xPortStartScheduler+0x138>)
 8009a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a6c:	4b17      	ldr	r3, [pc, #92]	@ (8009acc <xPortStartScheduler+0x13c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a16      	ldr	r2, [pc, #88]	@ (8009acc <xPortStartScheduler+0x13c>)
 8009a72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a78:	4b14      	ldr	r3, [pc, #80]	@ (8009acc <xPortStartScheduler+0x13c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a13      	ldr	r2, [pc, #76]	@ (8009acc <xPortStartScheduler+0x13c>)
 8009a7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a84:	f000 f8da 	bl	8009c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a88:	4b11      	ldr	r3, [pc, #68]	@ (8009ad0 <xPortStartScheduler+0x140>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a8e:	f000 f8f9 	bl	8009c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a92:	4b10      	ldr	r3, [pc, #64]	@ (8009ad4 <xPortStartScheduler+0x144>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a0f      	ldr	r2, [pc, #60]	@ (8009ad4 <xPortStartScheduler+0x144>)
 8009a98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a9e:	f7ff ff63 	bl	8009968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009aa2:	f7fe ff39 	bl	8008918 <vTaskSwitchContext>
	prvTaskExitError();
 8009aa6:	f7ff ff17 	bl	80098d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	e000ed00 	.word	0xe000ed00
 8009ab8:	410fc271 	.word	0x410fc271
 8009abc:	410fc270 	.word	0x410fc270
 8009ac0:	e000e400 	.word	0xe000e400
 8009ac4:	200012b8 	.word	0x200012b8
 8009ac8:	200012bc 	.word	0x200012bc
 8009acc:	e000ed20 	.word	0xe000ed20
 8009ad0:	2000000c 	.word	0x2000000c
 8009ad4:	e000ef34 	.word	0xe000ef34

08009ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	607b      	str	r3, [r7, #4]
}
 8009af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009af2:	4b10      	ldr	r3, [pc, #64]	@ (8009b34 <vPortEnterCritical+0x5c>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3301      	adds	r3, #1
 8009af8:	4a0e      	ldr	r2, [pc, #56]	@ (8009b34 <vPortEnterCritical+0x5c>)
 8009afa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009afc:	4b0d      	ldr	r3, [pc, #52]	@ (8009b34 <vPortEnterCritical+0x5c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d110      	bne.n	8009b26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b04:	4b0c      	ldr	r3, [pc, #48]	@ (8009b38 <vPortEnterCritical+0x60>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00b      	beq.n	8009b26 <vPortEnterCritical+0x4e>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	603b      	str	r3, [r7, #0]
}
 8009b20:	bf00      	nop
 8009b22:	bf00      	nop
 8009b24:	e7fd      	b.n	8009b22 <vPortEnterCritical+0x4a>
	}
}
 8009b26:	bf00      	nop
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	2000000c 	.word	0x2000000c
 8009b38:	e000ed04 	.word	0xe000ed04

08009b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b42:	4b12      	ldr	r3, [pc, #72]	@ (8009b8c <vPortExitCritical+0x50>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10b      	bne.n	8009b62 <vPortExitCritical+0x26>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	607b      	str	r3, [r7, #4]
}
 8009b5c:	bf00      	nop
 8009b5e:	bf00      	nop
 8009b60:	e7fd      	b.n	8009b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b62:	4b0a      	ldr	r3, [pc, #40]	@ (8009b8c <vPortExitCritical+0x50>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	4a08      	ldr	r2, [pc, #32]	@ (8009b8c <vPortExitCritical+0x50>)
 8009b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b6c:	4b07      	ldr	r3, [pc, #28]	@ (8009b8c <vPortExitCritical+0x50>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d105      	bne.n	8009b80 <vPortExitCritical+0x44>
 8009b74:	2300      	movs	r3, #0
 8009b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	f383 8811 	msr	BASEPRI, r3
}
 8009b7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	2000000c 	.word	0x2000000c

08009b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b90:	f3ef 8009 	mrs	r0, PSP
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	4b15      	ldr	r3, [pc, #84]	@ (8009bf0 <pxCurrentTCBConst>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	f01e 0f10 	tst.w	lr, #16
 8009ba0:	bf08      	it	eq
 8009ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	6010      	str	r0, [r2, #0]
 8009bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009bb4:	f380 8811 	msr	BASEPRI, r0
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f7fe feaa 	bl	8008918 <vTaskSwitchContext>
 8009bc4:	f04f 0000 	mov.w	r0, #0
 8009bc8:	f380 8811 	msr	BASEPRI, r0
 8009bcc:	bc09      	pop	{r0, r3}
 8009bce:	6819      	ldr	r1, [r3, #0]
 8009bd0:	6808      	ldr	r0, [r1, #0]
 8009bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd6:	f01e 0f10 	tst.w	lr, #16
 8009bda:	bf08      	it	eq
 8009bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009be0:	f380 8809 	msr	PSP, r0
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	f3af 8000 	nop.w

08009bf0 <pxCurrentTCBConst>:
 8009bf0:	20000c8c 	.word	0x20000c8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop

08009bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	607b      	str	r3, [r7, #4]
}
 8009c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c12:	f7fe fdc7 	bl	80087a4 <xTaskIncrementTick>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c1c:	4b06      	ldr	r3, [pc, #24]	@ (8009c38 <xPortSysTickHandler+0x40>)
 8009c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	2300      	movs	r3, #0
 8009c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	f383 8811 	msr	BASEPRI, r3
}
 8009c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c30:	bf00      	nop
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c40:	4b0b      	ldr	r3, [pc, #44]	@ (8009c70 <vPortSetupTimerInterrupt+0x34>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c46:	4b0b      	ldr	r3, [pc, #44]	@ (8009c74 <vPortSetupTimerInterrupt+0x38>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c78 <vPortSetupTimerInterrupt+0x3c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a0a      	ldr	r2, [pc, #40]	@ (8009c7c <vPortSetupTimerInterrupt+0x40>)
 8009c52:	fba2 2303 	umull	r2, r3, r2, r3
 8009c56:	099b      	lsrs	r3, r3, #6
 8009c58:	4a09      	ldr	r2, [pc, #36]	@ (8009c80 <vPortSetupTimerInterrupt+0x44>)
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c5e:	4b04      	ldr	r3, [pc, #16]	@ (8009c70 <vPortSetupTimerInterrupt+0x34>)
 8009c60:	2207      	movs	r2, #7
 8009c62:	601a      	str	r2, [r3, #0]
}
 8009c64:	bf00      	nop
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	e000e010 	.word	0xe000e010
 8009c74:	e000e018 	.word	0xe000e018
 8009c78:	20000000 	.word	0x20000000
 8009c7c:	10624dd3 	.word	0x10624dd3
 8009c80:	e000e014 	.word	0xe000e014

08009c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009c94 <vPortEnableVFP+0x10>
 8009c88:	6801      	ldr	r1, [r0, #0]
 8009c8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009c8e:	6001      	str	r1, [r0, #0]
 8009c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c92:	bf00      	nop
 8009c94:	e000ed88 	.word	0xe000ed88

08009c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c9e:	f3ef 8305 	mrs	r3, IPSR
 8009ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b0f      	cmp	r3, #15
 8009ca8:	d915      	bls.n	8009cd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009caa:	4a18      	ldr	r2, [pc, #96]	@ (8009d0c <vPortValidateInterruptPriority+0x74>)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4413      	add	r3, r2
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cb4:	4b16      	ldr	r3, [pc, #88]	@ (8009d10 <vPortValidateInterruptPriority+0x78>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	7afa      	ldrb	r2, [r7, #11]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d20b      	bcs.n	8009cd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	607b      	str	r3, [r7, #4]
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	e7fd      	b.n	8009cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8009d14 <vPortValidateInterruptPriority+0x7c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009cde:	4b0e      	ldr	r3, [pc, #56]	@ (8009d18 <vPortValidateInterruptPriority+0x80>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d90b      	bls.n	8009cfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	603b      	str	r3, [r7, #0]
}
 8009cf8:	bf00      	nop
 8009cfa:	bf00      	nop
 8009cfc:	e7fd      	b.n	8009cfa <vPortValidateInterruptPriority+0x62>
	}
 8009cfe:	bf00      	nop
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	e000e3f0 	.word	0xe000e3f0
 8009d10:	200012b8 	.word	0x200012b8
 8009d14:	e000ed0c 	.word	0xe000ed0c
 8009d18:	200012bc 	.word	0x200012bc

08009d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08a      	sub	sp, #40	@ 0x28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d24:	2300      	movs	r3, #0
 8009d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d28:	f7fe fc80 	bl	800862c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ea0 <pvPortMalloc+0x184>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d34:	f000 f924 	bl	8009f80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d38:	4b5a      	ldr	r3, [pc, #360]	@ (8009ea4 <pvPortMalloc+0x188>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4013      	ands	r3, r2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f040 8095 	bne.w	8009e70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d01e      	beq.n	8009d8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009d4c:	2208      	movs	r2, #8
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4413      	add	r3, r2
 8009d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f003 0307 	and.w	r3, r3, #7
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d015      	beq.n	8009d8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f023 0307 	bic.w	r3, r3, #7
 8009d64:	3308      	adds	r3, #8
 8009d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00b      	beq.n	8009d8a <pvPortMalloc+0x6e>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	617b      	str	r3, [r7, #20]
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop
 8009d88:	e7fd      	b.n	8009d86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d06f      	beq.n	8009e70 <pvPortMalloc+0x154>
 8009d90:	4b45      	ldr	r3, [pc, #276]	@ (8009ea8 <pvPortMalloc+0x18c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d86a      	bhi.n	8009e70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d9a:	4b44      	ldr	r3, [pc, #272]	@ (8009eac <pvPortMalloc+0x190>)
 8009d9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d9e:	4b43      	ldr	r3, [pc, #268]	@ (8009eac <pvPortMalloc+0x190>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009da4:	e004      	b.n	8009db0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d903      	bls.n	8009dc2 <pvPortMalloc+0xa6>
 8009dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f1      	bne.n	8009da6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009dc2:	4b37      	ldr	r3, [pc, #220]	@ (8009ea0 <pvPortMalloc+0x184>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d051      	beq.n	8009e70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dcc:	6a3b      	ldr	r3, [r7, #32]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2208      	movs	r2, #8
 8009dd2:	4413      	add	r3, r2
 8009dd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	1ad2      	subs	r2, r2, r3
 8009de6:	2308      	movs	r3, #8
 8009de8:	005b      	lsls	r3, r3, #1
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d920      	bls.n	8009e30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4413      	add	r3, r2
 8009df4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	f003 0307 	and.w	r3, r3, #7
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00b      	beq.n	8009e18 <pvPortMalloc+0xfc>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	613b      	str	r3, [r7, #16]
}
 8009e12:	bf00      	nop
 8009e14:	bf00      	nop
 8009e16:	e7fd      	b.n	8009e14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	1ad2      	subs	r2, r2, r3
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e2a:	69b8      	ldr	r0, [r7, #24]
 8009e2c:	f000 f90a 	bl	800a044 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e30:	4b1d      	ldr	r3, [pc, #116]	@ (8009ea8 <pvPortMalloc+0x18c>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ea8 <pvPortMalloc+0x18c>)
 8009e3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ea8 <pvPortMalloc+0x18c>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	4b1b      	ldr	r3, [pc, #108]	@ (8009eb0 <pvPortMalloc+0x194>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d203      	bcs.n	8009e52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e4a:	4b17      	ldr	r3, [pc, #92]	@ (8009ea8 <pvPortMalloc+0x18c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a18      	ldr	r2, [pc, #96]	@ (8009eb0 <pvPortMalloc+0x194>)
 8009e50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	4b13      	ldr	r3, [pc, #76]	@ (8009ea4 <pvPortMalloc+0x188>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e66:	4b13      	ldr	r3, [pc, #76]	@ (8009eb4 <pvPortMalloc+0x198>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	4a11      	ldr	r2, [pc, #68]	@ (8009eb4 <pvPortMalloc+0x198>)
 8009e6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e70:	f7fe fbea 	bl	8008648 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	f003 0307 	and.w	r3, r3, #7
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00b      	beq.n	8009e96 <pvPortMalloc+0x17a>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	60fb      	str	r3, [r7, #12]
}
 8009e90:	bf00      	nop
 8009e92:	bf00      	nop
 8009e94:	e7fd      	b.n	8009e92 <pvPortMalloc+0x176>
	return pvReturn;
 8009e96:	69fb      	ldr	r3, [r7, #28]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3728      	adds	r7, #40	@ 0x28
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	20004ec8 	.word	0x20004ec8
 8009ea4:	20004edc 	.word	0x20004edc
 8009ea8:	20004ecc 	.word	0x20004ecc
 8009eac:	20004ec0 	.word	0x20004ec0
 8009eb0:	20004ed0 	.word	0x20004ed0
 8009eb4:	20004ed4 	.word	0x20004ed4

08009eb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d04f      	beq.n	8009f6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009eca:	2308      	movs	r3, #8
 8009ecc:	425b      	negs	r3, r3
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	4b25      	ldr	r3, [pc, #148]	@ (8009f74 <vPortFree+0xbc>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10b      	bne.n	8009efe <vPortFree+0x46>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	60fb      	str	r3, [r7, #12]
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	e7fd      	b.n	8009efa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00b      	beq.n	8009f1e <vPortFree+0x66>
	__asm volatile
 8009f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f0a:	f383 8811 	msr	BASEPRI, r3
 8009f0e:	f3bf 8f6f 	isb	sy
 8009f12:	f3bf 8f4f 	dsb	sy
 8009f16:	60bb      	str	r3, [r7, #8]
}
 8009f18:	bf00      	nop
 8009f1a:	bf00      	nop
 8009f1c:	e7fd      	b.n	8009f1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	685a      	ldr	r2, [r3, #4]
 8009f22:	4b14      	ldr	r3, [pc, #80]	@ (8009f74 <vPortFree+0xbc>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4013      	ands	r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d01e      	beq.n	8009f6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d11a      	bne.n	8009f6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	4b0e      	ldr	r3, [pc, #56]	@ (8009f74 <vPortFree+0xbc>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	43db      	mvns	r3, r3
 8009f3e:	401a      	ands	r2, r3
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f44:	f7fe fb72 	bl	800862c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f78 <vPortFree+0xc0>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4413      	add	r3, r2
 8009f52:	4a09      	ldr	r2, [pc, #36]	@ (8009f78 <vPortFree+0xc0>)
 8009f54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f56:	6938      	ldr	r0, [r7, #16]
 8009f58:	f000 f874 	bl	800a044 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f5c:	4b07      	ldr	r3, [pc, #28]	@ (8009f7c <vPortFree+0xc4>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3301      	adds	r3, #1
 8009f62:	4a06      	ldr	r2, [pc, #24]	@ (8009f7c <vPortFree+0xc4>)
 8009f64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f66:	f7fe fb6f 	bl	8008648 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f6a:	bf00      	nop
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20004edc 	.word	0x20004edc
 8009f78:	20004ecc 	.word	0x20004ecc
 8009f7c:	20004ed8 	.word	0x20004ed8

08009f80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009f8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f8c:	4b27      	ldr	r3, [pc, #156]	@ (800a02c <prvHeapInit+0xac>)
 8009f8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f003 0307 	and.w	r3, r3, #7
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00c      	beq.n	8009fb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3307      	adds	r3, #7
 8009f9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f023 0307 	bic.w	r3, r3, #7
 8009fa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	4a1f      	ldr	r2, [pc, #124]	@ (800a02c <prvHeapInit+0xac>)
 8009fb0:	4413      	add	r3, r2
 8009fb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fb8:	4a1d      	ldr	r2, [pc, #116]	@ (800a030 <prvHeapInit+0xb0>)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fbe:	4b1c      	ldr	r3, [pc, #112]	@ (800a030 <prvHeapInit+0xb0>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	4413      	add	r3, r2
 8009fca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fcc:	2208      	movs	r2, #8
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0307 	bic.w	r3, r3, #7
 8009fda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	4a15      	ldr	r2, [pc, #84]	@ (800a034 <prvHeapInit+0xb4>)
 8009fe0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009fe2:	4b14      	ldr	r3, [pc, #80]	@ (800a034 <prvHeapInit+0xb4>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fea:	4b12      	ldr	r3, [pc, #72]	@ (800a034 <prvHeapInit+0xb4>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	1ad2      	subs	r2, r2, r3
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a000:	4b0c      	ldr	r3, [pc, #48]	@ (800a034 <prvHeapInit+0xb4>)
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	4a0a      	ldr	r2, [pc, #40]	@ (800a038 <prvHeapInit+0xb8>)
 800a00e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	4a09      	ldr	r2, [pc, #36]	@ (800a03c <prvHeapInit+0xbc>)
 800a016:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a018:	4b09      	ldr	r3, [pc, #36]	@ (800a040 <prvHeapInit+0xc0>)
 800a01a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a01e:	601a      	str	r2, [r3, #0]
}
 800a020:	bf00      	nop
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	200012c0 	.word	0x200012c0
 800a030:	20004ec0 	.word	0x20004ec0
 800a034:	20004ec8 	.word	0x20004ec8
 800a038:	20004ed0 	.word	0x20004ed0
 800a03c:	20004ecc 	.word	0x20004ecc
 800a040:	20004edc 	.word	0x20004edc

0800a044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a04c:	4b28      	ldr	r3, [pc, #160]	@ (800a0f0 <prvInsertBlockIntoFreeList+0xac>)
 800a04e:	60fb      	str	r3, [r7, #12]
 800a050:	e002      	b.n	800a058 <prvInsertBlockIntoFreeList+0x14>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d8f7      	bhi.n	800a052 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	4413      	add	r3, r2
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	429a      	cmp	r2, r3
 800a072:	d108      	bne.n	800a086 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	441a      	add	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	441a      	add	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	429a      	cmp	r2, r3
 800a098:	d118      	bne.n	800a0cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	4b15      	ldr	r3, [pc, #84]	@ (800a0f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d00d      	beq.n	800a0c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	441a      	add	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	e008      	b.n	800a0d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	e003      	b.n	800a0d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d002      	beq.n	800a0e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0e2:	bf00      	nop
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	20004ec0 	.word	0x20004ec0
 800a0f4:	20004ec8 	.word	0x20004ec8

0800a0f8 <_ZN13CommunicationC1Ev>:
 *      Author: OrioN
 */

#include "../Inc/GeneralHeaders.h"

Communication::Communication() {
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	4a08      	ldr	r2, [pc, #32]	@ (800a124 <_ZN13CommunicationC1Ev+0x2c>)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3304      	adds	r3, #4
 800a10a:	4618      	mov	r0, r3
 800a10c:	f002 f838 	bl	800c180 <_ZN12FlashManagerC1Ev>
	// TODO Auto-generated constructor stub
	FMI.BackupData();
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3304      	adds	r3, #4
 800a114:	4618      	mov	r0, r3
 800a116:	f002 f8a3 	bl	800c260 <_ZN12FlashManager10BackupDataEv>

}
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4618      	mov	r0, r3
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	08011cc4 	.word	0x08011cc4

0800a128 <_ZN13CommunicationD1Ev>:

Communication::~Communication() {
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	4a06      	ldr	r2, [pc, #24]	@ (800a14c <_ZN13CommunicationD1Ev+0x24>)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	3304      	adds	r3, #4
 800a13a:	4618      	mov	r0, r3
 800a13c:	f002 f870 	bl	800c220 <_ZN12FlashManagerD1Ev>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4618      	mov	r0, r3
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	08011cc4 	.word	0x08011cc4

0800a150 <_ZN13CommunicationD0Ev>:
Communication::~Communication() {
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
}
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff ffe5 	bl	800a128 <_ZN13CommunicationD1Ev>
 800a15e:	2120      	movs	r1, #32
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f006 fcb7 	bl	8010ad4 <_ZdlPvj>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4618      	mov	r0, r3
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <_ZN13Communication14ProcessCommandEPh>:

void Communication::ProcessCommand(uint8_t *command){
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
	switch(command[0]){
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d010      	beq.n	800a1a4 <_ZN13Communication14ProcessCommandEPh+0x34>
 800a182:	2b03      	cmp	r3, #3
 800a184:	dc13      	bgt.n	800a1ae <_ZN13Communication14ProcessCommandEPh+0x3e>
 800a186:	2b01      	cmp	r3, #1
 800a188:	d002      	beq.n	800a190 <_ZN13Communication14ProcessCommandEPh+0x20>
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d005      	beq.n	800a19a <_ZN13Communication14ProcessCommandEPh+0x2a>
 800a18e:	e00e      	b.n	800a1ae <_ZN13Communication14ProcessCommandEPh+0x3e>
	case RequestType::R_System:
		System(command);
 800a190:	6839      	ldr	r1, [r7, #0]
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f814 	bl	800a1c0 <_ZN13Communication6SystemEPh>
		break;
 800a198:	e00e      	b.n	800a1b8 <_ZN13Communication14ProcessCommandEPh+0x48>
	case RequestType::R_Command:
		Command(command);
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f8e5 	bl	800a36c <_ZN13Communication7CommandEPh>
		break;
 800a1a2:	e009      	b.n	800a1b8 <_ZN13Communication14ProcessCommandEPh+0x48>
	case RequestType::R_Configuration:
		Configuration(command);
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fd16 	bl	800abd8 <_ZN13Communication13ConfigurationEPh>
		break;
 800a1ac:	e004      	b.n	800a1b8 <_ZN13Communication14ProcessCommandEPh+0x48>
	default:
		ErrorResult(OperationCodes::ReadData, Errors::UndefinedProcessType);
 800a1ae:	2108      	movs	r1, #8
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	f004 fe46 	bl	800ee42 <ErrorResult>
		break;
 800a1b6:	bf00      	nop
	}
}
 800a1b8:	bf00      	nop
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <_ZN13Communication6SystemEPh>:
bool pauseFlg = false;//***//
bool CleanDone = false;
void Communication::System(uint8_t *command){
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
	if(command[0]!=RequestType::R_System) return;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	f040 80c4 	bne.w	800a35c <_ZN13Communication6SystemEPh+0x19c>
	uint16_t calibrationWeight = 500;
 800a1d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a1d8:	82fb      	strh	r3, [r7, #22]
	uint16_t calibrationFlow = 12;
 800a1da:	230c      	movs	r3, #12
 800a1dc:	82bb      	strh	r3, [r7, #20]
   	uint8_t data[11];
	switch (command[1])   										      //Check Function
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	2b05      	cmp	r3, #5
 800a1e8:	f200 80aa 	bhi.w	800a340 <_ZN13Communication6SystemEPh+0x180>
 800a1ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f4 <_ZN13Communication6SystemEPh+0x34>)
 800a1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f2:	bf00      	nop
 800a1f4:	0800a20d 	.word	0x0800a20d
 800a1f8:	0800a2bd 	.word	0x0800a2bd
 800a1fc:	0800a2d5 	.word	0x0800a2d5
 800a200:	0800a2ed 	.word	0x0800a2ed
 800a204:	0800a2f9 	.word	0x0800a2f9
 800a208:	0800a31d 	.word	0x0800a31d
	{
	   case SystemRequestType::SYSR_Status:
		   	data[0]=Statuses.FirstEmg;
 800a20c:	4b55      	ldr	r3, [pc, #340]	@ (800a364 <_ZN13Communication6SystemEPh+0x1a4>)
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	723b      	strb	r3, [r7, #8]
		   	data[1]=Statuses.SecondEmg;
 800a212:	4b54      	ldr	r3, [pc, #336]	@ (800a364 <_ZN13Communication6SystemEPh+0x1a4>)
 800a214:	785b      	ldrb	r3, [r3, #1]
 800a216:	727b      	strb	r3, [r7, #9]
		   	data[2]=Statuses.Volume;
 800a218:	4b52      	ldr	r3, [pc, #328]	@ (800a364 <_ZN13Communication6SystemEPh+0x1a4>)
 800a21a:	789b      	ldrb	r3, [r3, #2]
 800a21c:	72bb      	strb	r3, [r7, #10]
		   	data[3]=Statuses.Flow;
 800a21e:	4b51      	ldr	r3, [pc, #324]	@ (800a364 <_ZN13Communication6SystemEPh+0x1a4>)
 800a220:	78db      	ldrb	r3, [r3, #3]
 800a222:	72fb      	strb	r3, [r7, #11]
		   	data[4]=Statuses.Pump;
 800a224:	4b4f      	ldr	r3, [pc, #316]	@ (800a364 <_ZN13Communication6SystemEPh+0x1a4>)
 800a226:	791b      	ldrb	r3, [r3, #4]
 800a228:	733b      	strb	r3, [r7, #12]
		   	data[5]=Statuses.Valve;
 800a22a:	4b4e      	ldr	r3, [pc, #312]	@ (800a364 <_ZN13Communication6SystemEPh+0x1a4>)
 800a22c:	795b      	ldrb	r3, [r3, #5]
 800a22e:	737b      	strb	r3, [r7, #13]
		   	data[6]=ThreadStorage.LoadcellAverageThreadId!=NULL&&ThreadStorage.FirstEmgThreadId!=0x00;
 800a230:	4b4d      	ldr	r3, [pc, #308]	@ (800a368 <_ZN13Communication6SystemEPh+0x1a8>)
 800a232:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a234:	2b00      	cmp	r3, #0
 800a236:	d005      	beq.n	800a244 <_ZN13Communication6SystemEPh+0x84>
 800a238:	4b4b      	ldr	r3, [pc, #300]	@ (800a368 <_ZN13Communication6SystemEPh+0x1a8>)
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <_ZN13Communication6SystemEPh+0x84>
 800a240:	2301      	movs	r3, #1
 800a242:	e000      	b.n	800a246 <_ZN13Communication6SystemEPh+0x86>
 800a244:	2300      	movs	r3, #0
 800a246:	73bb      	strb	r3, [r7, #14]
		   	data[7]=ThreadStorage.CalibrationVolumeThreadId!=NULL&&ThreadStorage.FirstEmgThreadId!=0x00;
 800a248:	4b47      	ldr	r3, [pc, #284]	@ (800a368 <_ZN13Communication6SystemEPh+0x1a8>)
 800a24a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d005      	beq.n	800a25c <_ZN13Communication6SystemEPh+0x9c>
 800a250:	4b45      	ldr	r3, [pc, #276]	@ (800a368 <_ZN13Communication6SystemEPh+0x1a8>)
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <_ZN13Communication6SystemEPh+0x9c>
 800a258:	2301      	movs	r3, #1
 800a25a:	e000      	b.n	800a25e <_ZN13Communication6SystemEPh+0x9e>
 800a25c:	2300      	movs	r3, #0
 800a25e:	73fb      	strb	r3, [r7, #15]
		   	data[8]=ThreadStorage.CalibrationFlowThreadId!=NULL&&ThreadStorage.FirstEmgThreadId!=0x00;
 800a260:	4b41      	ldr	r3, [pc, #260]	@ (800a368 <_ZN13Communication6SystemEPh+0x1a8>)
 800a262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a266:	2b00      	cmp	r3, #0
 800a268:	d005      	beq.n	800a276 <_ZN13Communication6SystemEPh+0xb6>
 800a26a:	4b3f      	ldr	r3, [pc, #252]	@ (800a368 <_ZN13Communication6SystemEPh+0x1a8>)
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <_ZN13Communication6SystemEPh+0xb6>
 800a272:	2301      	movs	r3, #1
 800a274:	e000      	b.n	800a278 <_ZN13Communication6SystemEPh+0xb8>
 800a276:	2300      	movs	r3, #0
 800a278:	743b      	strb	r3, [r7, #16]
		   	data[9]=ThreadStorage.CleanThreadId!=NULL&&ThreadStorage.FirstEmgThreadId!=0x00;
 800a27a:	4b3b      	ldr	r3, [pc, #236]	@ (800a368 <_ZN13Communication6SystemEPh+0x1a8>)
 800a27c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a280:	2b00      	cmp	r3, #0
 800a282:	d005      	beq.n	800a290 <_ZN13Communication6SystemEPh+0xd0>
 800a284:	4b38      	ldr	r3, [pc, #224]	@ (800a368 <_ZN13Communication6SystemEPh+0x1a8>)
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d001      	beq.n	800a290 <_ZN13Communication6SystemEPh+0xd0>
 800a28c:	2301      	movs	r3, #1
 800a28e:	e000      	b.n	800a292 <_ZN13Communication6SystemEPh+0xd2>
 800a290:	2300      	movs	r3, #0
 800a292:	747b      	strb	r3, [r7, #17]
		   	data[10]=Statuses.SafeMode;
 800a294:	4b33      	ldr	r3, [pc, #204]	@ (800a364 <_ZN13Communication6SystemEPh+0x1a4>)
 800a296:	799b      	ldrb	r3, [r3, #6]
 800a298:	74bb      	strb	r3, [r7, #18]
		   	SuccessDataResult(100,SuccessDataType::SD_Status,data,11);
 800a29a:	f107 0208 	add.w	r2, r7, #8
 800a29e:	230b      	movs	r3, #11
 800a2a0:	2102      	movs	r1, #2
 800a2a2:	2064      	movs	r0, #100	@ 0x64
 800a2a4:	f004 fd52 	bl	800ed4c <SuccessDataResult>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	7818      	ldrb	r0, [r3, #0]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	f004 fd1f 	bl	800ecf8 <SendFeedback>
			break;
 800a2ba:	e050      	b.n	800a35e <_ZN13Communication6SystemEPh+0x19e>
	   case SystemRequestType::SYSR_Restart:
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	7818      	ldrb	r0, [r3, #0]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	f004 fd15 	bl	800ecf8 <SendFeedback>
		    HAL_NVIC_SystemReset();
 800a2ce:	f7f7 fe38 	bl	8001f42 <HAL_NVIC_SystemReset>
	        break;
 800a2d2:	e044      	b.n	800a35e <_ZN13Communication6SystemEPh+0x19e>
	   case SystemRequestType::SYSR_FactoryReset:
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	7818      	ldrb	r0, [r3, #0]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	f004 fd09 	bl	800ecf8 <SendFeedback>
			HardReset();
 800a2e6:	f004 fc05 	bl	800eaf4 <HardReset>
		   break;
 800a2ea:	e038      	b.n	800a35e <_ZN13Communication6SystemEPh+0x19e>
	   case SystemRequestType::SYSR_MeasurementAverage:
		   	 ClearLoadcellParams();
 800a2ec:	f006 fb12 	bl	8010914 <ClearLoadcellParams>
		   	 LoadcellAverage();
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 fa41 	bl	800b778 <_ZN13Communication15LoadcellAverageEv>
		   	 break;
 800a2f6:	e032      	b.n	800a35e <_ZN13Communication6SystemEPh+0x19e>
	   case SystemRequestType::SYSR_CalibrationVolume:
		   	 ClearLoadcellParams();
 800a2f8:	f006 fb0c 	bl	8010914 <ClearLoadcellParams>
			calibrationWeight=(command[2]<<8)+command[3];
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	3302      	adds	r3, #2
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	021b      	lsls	r3, r3, #8
 800a304:	b29b      	uxth	r3, r3
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	3203      	adds	r2, #3
 800a30a:	7812      	ldrb	r2, [r2, #0]
 800a30c:	4413      	add	r3, r2
 800a30e:	82fb      	strh	r3, [r7, #22]
		   	 LoadcellVolumeCalibration(calibrationWeight);
 800a310:	8afb      	ldrh	r3, [r7, #22]
 800a312:	4619      	mov	r1, r3
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f001 fa59 	bl	800b7cc <_ZN13Communication25LoadcellVolumeCalibrationEt>
		   	 break;
 800a31a:	e020      	b.n	800a35e <_ZN13Communication6SystemEPh+0x19e>
	   case SystemRequestType::SYSR_CalibrationFlow:
		   	 ClearLoadcellParams();
 800a31c:	f006 fafa 	bl	8010914 <ClearLoadcellParams>
			calibrationFlow=(command[2]<<8)+command[3];
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	3302      	adds	r3, #2
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	021b      	lsls	r3, r3, #8
 800a328:	b29b      	uxth	r3, r3
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	3203      	adds	r2, #3
 800a32e:	7812      	ldrb	r2, [r2, #0]
 800a330:	4413      	add	r3, r2
 800a332:	82bb      	strh	r3, [r7, #20]
		   	 LoadcellFlowCalibration(calibrationFlow);
 800a334:	8abb      	ldrh	r3, [r7, #20]
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 fa7f 	bl	800b83c <_ZN13Communication23LoadcellFlowCalibrationEt>
		   	 break;
 800a33e:	e00e      	b.n	800a35e <_ZN13Communication6SystemEPh+0x19e>
		default:
			ErrorResult(OperationCodes::ReadData, Errors::UndefinedSystemType);
 800a340:	2109      	movs	r1, #9
 800a342:	2000      	movs	r0, #0
 800a344:	f004 fd7d 	bl	800ee42 <ErrorResult>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	7818      	ldrb	r0, [r3, #0]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	3301      	adds	r3, #1
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2202      	movs	r2, #2
 800a354:	4619      	mov	r1, r3
 800a356:	f004 fccf 	bl	800ecf8 <SendFeedback>
			break;
 800a35a:	e000      	b.n	800a35e <_ZN13Communication6SystemEPh+0x19e>
	if(command[0]!=RequestType::R_System) return;
 800a35c:	bf00      	nop
	 }
}
 800a35e:	3718      	adds	r7, #24
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	20009324 	.word	0x20009324
 800a368:	2000913c 	.word	0x2000913c

0800a36c <_ZN13Communication7CommandEPh>:
bool isOpenFirstEmg;
bool isOpenSecondEmg;
bool isOpenLoadcell;
void Communication::Command(uint8_t *command){
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af02      	add	r7, sp, #8
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]

	uint16_t cleanTime=0;
 800a376:	2300      	movs	r3, #0
 800a378:	81fb      	strh	r3, [r7, #14]
	if(command[0]!=RequestType::R_Command) return;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	f040 8419 	bne.w	800abb6 <_ZN13Communication7CommandEPh+0x84a>
    isOpenFirstEmg = command[2] & 0x04;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	3302      	adds	r3, #2
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	f003 0304 	and.w	r3, r3, #4
 800a38e:	2b00      	cmp	r3, #0
 800a390:	bf14      	ite	ne
 800a392:	2301      	movne	r3, #1
 800a394:	2300      	moveq	r3, #0
 800a396:	b2da      	uxtb	r2, r3
 800a398:	4bab      	ldr	r3, [pc, #684]	@ (800a648 <_ZN13Communication7CommandEPh+0x2dc>)
 800a39a:	701a      	strb	r2, [r3, #0]
    isOpenSecondEmg = command[2] & 0x02;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	3302      	adds	r3, #2
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	f003 0302 	and.w	r3, r3, #2
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	bf14      	ite	ne
 800a3aa:	2301      	movne	r3, #1
 800a3ac:	2300      	moveq	r3, #0
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	4ba6      	ldr	r3, [pc, #664]	@ (800a64c <_ZN13Communication7CommandEPh+0x2e0>)
 800a3b2:	701a      	strb	r2, [r3, #0]
    isOpenLoadcell = command[2] & 0x01;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	bf14      	ite	ne
 800a3c2:	2301      	movne	r3, #1
 800a3c4:	2300      	moveq	r3, #0
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	4ba1      	ldr	r3, [pc, #644]	@ (800a650 <_ZN13Communication7CommandEPh+0x2e4>)
 800a3ca:	701a      	strb	r2, [r3, #0]
	switch (command[1])   												//Check Function
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	2bff      	cmp	r3, #255	@ 0xff
 800a3d4:	f000 8336 	beq.w	800aa44 <_ZN13Communication7CommandEPh+0x6d8>
 800a3d8:	2bff      	cmp	r3, #255	@ 0xff
 800a3da:	f300 83de 	bgt.w	800ab9a <_ZN13Communication7CommandEPh+0x82e>
 800a3de:	2b1b      	cmp	r3, #27
 800a3e0:	dc40      	bgt.n	800a464 <_ZN13Communication7CommandEPh+0xf8>
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f340 83d9 	ble.w	800ab9a <_ZN13Communication7CommandEPh+0x82e>
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	2b1a      	cmp	r3, #26
 800a3ec:	f200 83d5 	bhi.w	800ab9a <_ZN13Communication7CommandEPh+0x82e>
 800a3f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f8 <_ZN13Communication7CommandEPh+0x8c>)
 800a3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f6:	bf00      	nop
 800a3f8:	0800a46d 	.word	0x0800a46d
 800a3fc:	0800a4d3 	.word	0x0800a4d3
 800a400:	0800a539 	.word	0x0800a539
 800a404:	0800a60f 	.word	0x0800a60f
 800a408:	0800a685 	.word	0x0800a685
 800a40c:	0800a6eb 	.word	0x0800a6eb
 800a410:	0800a761 	.word	0x0800a761
 800a414:	0800a7bd 	.word	0x0800a7bd
 800a418:	0800a819 	.word	0x0800a819
 800a41c:	0800a8ab 	.word	0x0800a8ab
 800a420:	0800a959 	.word	0x0800a959
 800a424:	0800a9bf 	.word	0x0800a9bf
 800a428:	0800ab35 	.word	0x0800ab35
 800a42c:	0800ab25 	.word	0x0800ab25
 800a430:	0800ab2d 	.word	0x0800ab2d
 800a434:	0800ab9b 	.word	0x0800ab9b
 800a438:	0800ab9b 	.word	0x0800ab9b
 800a43c:	0800ab9b 	.word	0x0800ab9b
 800a440:	0800ab9b 	.word	0x0800ab9b
 800a444:	0800ab9b 	.word	0x0800ab9b
 800a448:	0800ab9b 	.word	0x0800ab9b
 800a44c:	0800ab9b 	.word	0x0800ab9b
 800a450:	0800ab9b 	.word	0x0800ab9b
 800a454:	0800ab9b 	.word	0x0800ab9b
 800a458:	0800ab9b 	.word	0x0800ab9b
 800a45c:	0800ab3d 	.word	0x0800ab3d
 800a460:	0800ab5d 	.word	0x0800ab5d
 800a464:	2bfd      	cmp	r3, #253	@ 0xfd
 800a466:	f000 82dd 	beq.w	800aa24 <_ZN13Communication7CommandEPh+0x6b8>
 800a46a:	e396      	b.n	800ab9a <_ZN13Communication7CommandEPh+0x82e>
	{
		case CommandRequestType::CMDR_FirstEmg:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a46c:	4b79      	ldr	r3, [pc, #484]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a46e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a472:	2b00      	cmp	r3, #0
 800a474:	d017      	beq.n	800a4a6 <_ZN13Communication7CommandEPh+0x13a>
 800a476:	4b77      	ldr	r3, [pc, #476]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a478:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d012      	beq.n	800a4a6 <_ZN13Communication7CommandEPh+0x13a>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a480:	4b74      	ldr	r3, [pc, #464]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a482:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a486:	2b05      	cmp	r3, #5
 800a488:	d00d      	beq.n	800a4a6 <_ZN13Communication7CommandEPh+0x13a>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a48a:	2102      	movs	r1, #2
 800a48c:	2000      	movs	r0, #0
 800a48e:	f004 fcd8 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	7818      	ldrb	r0, [r3, #0]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	3301      	adds	r3, #1
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	2202      	movs	r2, #2
 800a49e:	4619      	mov	r1, r3
 800a4a0:	f004 fc2a 	bl	800ecf8 <SendFeedback>
				return;
 800a4a4:	e38a      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			 ToggleFirstEmg(command[2]==1);  	     //Check SubFunction
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	3302      	adds	r3, #2
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	bf0c      	ite	eq
 800a4b0:	2301      	moveq	r3, #1
 800a4b2:	2300      	movne	r3, #0
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fd29 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	7818      	ldrb	r0, [r3, #0]
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	f004 fc14 	bl	800ecf8 <SendFeedback>
			 break;
 800a4d0:	e374      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_SecondEmg:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a4d2:	4b60      	ldr	r3, [pc, #384]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a4d4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d017      	beq.n	800a50c <_ZN13Communication7CommandEPh+0x1a0>
 800a4dc:	4b5d      	ldr	r3, [pc, #372]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a4de:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d012      	beq.n	800a50c <_ZN13Communication7CommandEPh+0x1a0>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a4e6:	4b5b      	ldr	r3, [pc, #364]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a4e8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a4ec:	2b05      	cmp	r3, #5
 800a4ee:	d00d      	beq.n	800a50c <_ZN13Communication7CommandEPh+0x1a0>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a4f0:	2102      	movs	r1, #2
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	f004 fca5 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	7818      	ldrb	r0, [r3, #0]
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	3301      	adds	r3, #1
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	2202      	movs	r2, #2
 800a504:	4619      	mov	r1, r3
 800a506:	f004 fbf7 	bl	800ecf8 <SendFeedback>
				return;
 800a50a:	e357      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			ToggleSecondEmg(command[2]==1);    	 //Check SubFunction
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	3302      	adds	r3, #2
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	2b01      	cmp	r3, #1
 800a514:	bf0c      	ite	eq
 800a516:	2301      	moveq	r3, #1
 800a518:	2300      	movne	r3, #0
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	4619      	mov	r1, r3
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 fd24 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	7818      	ldrb	r0, [r3, #0]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	3301      	adds	r3, #1
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	2202      	movs	r2, #2
 800a530:	4619      	mov	r1, r3
 800a532:	f004 fbe1 	bl	800ecf8 <SendFeedback>
			 break;
 800a536:	e341      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_LoadcellMeasure:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a538:	4b46      	ldr	r3, [pc, #280]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a53a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d017      	beq.n	800a572 <_ZN13Communication7CommandEPh+0x206>
 800a542:	4b44      	ldr	r3, [pc, #272]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a544:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d012      	beq.n	800a572 <_ZN13Communication7CommandEPh+0x206>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a54c:	4b41      	ldr	r3, [pc, #260]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a54e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a552:	2b05      	cmp	r3, #5
 800a554:	d00d      	beq.n	800a572 <_ZN13Communication7CommandEPh+0x206>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a556:	2102      	movs	r1, #2
 800a558:	2000      	movs	r0, #0
 800a55a:	f004 fc72 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	7818      	ldrb	r0, [r3, #0]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	3301      	adds	r3, #1
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	2202      	movs	r2, #2
 800a56a:	4619      	mov	r1, r3
 800a56c:	f004 fbc4 	bl	800ecf8 <SendFeedback>
				return;
 800a570:	e324      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			if(SystemConfig.VolumeAverage==0 || SystemConfig.FlowAverage==0){
 800a572:	4b38      	ldr	r3, [pc, #224]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <_ZN13Communication7CommandEPh+0x216>
 800a57a:	4b36      	ldr	r3, [pc, #216]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10d      	bne.n	800a59e <_ZN13Communication7CommandEPh+0x232>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotAverage);
 800a582:	2105      	movs	r1, #5
 800a584:	2000      	movs	r0, #0
 800a586:	f004 fc5c 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	7818      	ldrb	r0, [r3, #0]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	3301      	adds	r3, #1
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	2202      	movs	r2, #2
 800a596:	4619      	mov	r1, r3
 800a598:	f004 fbae 	bl	800ecf8 <SendFeedback>
				return;
 800a59c:	e30e      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			if(SystemConfig.FlowRate<2 || SystemConfig.VolumeRate<2){
 800a59e:	4b2d      	ldr	r3, [pc, #180]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a5a0:	edd3 7a08 	vldr	s15, [r3, #32]
 800a5a4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a5a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b0:	d409      	bmi.n	800a5c6 <_ZN13Communication7CommandEPh+0x25a>
 800a5b2:	4b28      	ldr	r3, [pc, #160]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a5b4:	edd3 7a07 	vldr	s15, [r3, #28]
 800a5b8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a5bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c4:	d50d      	bpl.n	800a5e2 <_ZN13Communication7CommandEPh+0x276>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotCalibration);
 800a5c6:	2104      	movs	r1, #4
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	f004 fc3a 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	7818      	ldrb	r0, [r3, #0]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2202      	movs	r2, #2
 800a5da:	4619      	mov	r1, r3
 800a5dc:	f004 fb8c 	bl	800ecf8 <SendFeedback>
				return;
 800a5e0:	e2ec      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			 ToggleLoadCell(command[2]==1);
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	3302      	adds	r3, #2
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	bf0c      	ite	eq
 800a5ec:	2301      	moveq	r3, #1
 800a5ee:	2300      	movne	r3, #0
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fce7 	bl	800afc8 <_ZN13Communication14ToggleLoadCellEb>
			 SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	7818      	ldrb	r0, [r3, #0]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	3301      	adds	r3, #1
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2202      	movs	r2, #2
 800a606:	4619      	mov	r1, r3
 800a608:	f004 fb76 	bl	800ecf8 <SendFeedback>
			 break;
 800a60c:	e2d6      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_Pump:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a60e:	4b11      	ldr	r3, [pc, #68]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a610:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a614:	2b00      	cmp	r3, #0
 800a616:	d01f      	beq.n	800a658 <_ZN13Communication7CommandEPh+0x2ec>
 800a618:	4b0e      	ldr	r3, [pc, #56]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a61a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d01a      	beq.n	800a658 <_ZN13Communication7CommandEPh+0x2ec>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a622:	4b0c      	ldr	r3, [pc, #48]	@ (800a654 <_ZN13Communication7CommandEPh+0x2e8>)
 800a624:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a628:	2b05      	cmp	r3, #5
 800a62a:	d015      	beq.n	800a658 <_ZN13Communication7CommandEPh+0x2ec>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a62c:	2102      	movs	r1, #2
 800a62e:	2000      	movs	r0, #0
 800a630:	f004 fc07 	bl	800ee42 <ErrorResult>
				 SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	7818      	ldrb	r0, [r3, #0]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	3301      	adds	r3, #1
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	2202      	movs	r2, #2
 800a640:	4619      	mov	r1, r3
 800a642:	f004 fb59 	bl	800ecf8 <SendFeedback>
				return;
 800a646:	e2b9      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
 800a648:	20004ee2 	.word	0x20004ee2
 800a64c:	20004ee3 	.word	0x20004ee3
 800a650:	20004ee4 	.word	0x20004ee4
 800a654:	2000932c 	.word	0x2000932c
			}
			TogglePump(command[2]==1); 	 	 //Check SubFunction
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	3302      	adds	r3, #2
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	bf0c      	ite	eq
 800a662:	2301      	moveq	r3, #1
 800a664:	2300      	movne	r3, #0
 800a666:	b2db      	uxtb	r3, r3
 800a668:	4619      	mov	r1, r3
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fde6 	bl	800b23c <_ZN13Communication10TogglePumpEb>
			 SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	7818      	ldrb	r0, [r3, #0]
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	3301      	adds	r3, #1
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	2202      	movs	r2, #2
 800a67c:	4619      	mov	r1, r3
 800a67e:	f004 fb3b 	bl	800ecf8 <SendFeedback>
			 break;
 800a682:	e29b      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_Valve:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a684:	4ba8      	ldr	r3, [pc, #672]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a686:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d017      	beq.n	800a6be <_ZN13Communication7CommandEPh+0x352>
 800a68e:	4ba6      	ldr	r3, [pc, #664]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a690:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a694:	2b01      	cmp	r3, #1
 800a696:	d012      	beq.n	800a6be <_ZN13Communication7CommandEPh+0x352>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a698:	4ba3      	ldr	r3, [pc, #652]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a69a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a69e:	2b05      	cmp	r3, #5
 800a6a0:	d00d      	beq.n	800a6be <_ZN13Communication7CommandEPh+0x352>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a6a2:	2102      	movs	r1, #2
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	f004 fbcc 	bl	800ee42 <ErrorResult>
				 SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	7818      	ldrb	r0, [r3, #0]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	f004 fb1e 	bl	800ecf8 <SendFeedback>
				return;
 800a6bc:	e27e      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			ToggleValve(command[2]==1);   	 //Check SubFunction
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	3302      	adds	r3, #2
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	bf0c      	ite	eq
 800a6c8:	2301      	moveq	r3, #1
 800a6ca:	2300      	movne	r3, #0
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fded 	bl	800b2b0 <_ZN13Communication11ToggleValveEb>
			 SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	7818      	ldrb	r0, [r3, #0]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	f004 fb08 	bl	800ecf8 <SendFeedback>
			 break;
 800a6e8:	e268      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_Clean: //Check SubFunction
			if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800a6ea:	4b8f      	ldr	r3, [pc, #572]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a6ec:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00d      	beq.n	800a710 <_ZN13Communication7CommandEPh+0x3a4>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a6f4:	2102      	movs	r1, #2
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	f004 fba3 	bl	800ee42 <ErrorResult>
				 SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	7818      	ldrb	r0, [r3, #0]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	3301      	adds	r3, #1
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	2202      	movs	r2, #2
 800a708:	4619      	mov	r1, r3
 800a70a:	f004 faf5 	bl	800ecf8 <SendFeedback>
				return;
 800a70e:	e255      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			 cleanTime=(command[2]<<8)+command[3];
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	3302      	adds	r3, #2
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	021b      	lsls	r3, r3, #8
 800a718:	b29b      	uxth	r3, r3
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	3203      	adds	r2, #3
 800a71e:	7812      	ldrb	r2, [r2, #0]
 800a720:	4413      	add	r3, r2
 800a722:	81fb      	strh	r3, [r7, #14]
			if(cleanTime<1){
 800a724:	89fb      	ldrh	r3, [r7, #14]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10d      	bne.n	800a746 <_ZN13Communication7CommandEPh+0x3da>
				ErrorResult(OperationCodes::ReadData, Errors::ValueShouldNotBeZero);
 800a72a:	2106      	movs	r1, #6
 800a72c:	2000      	movs	r0, #0
 800a72e:	f004 fb88 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	7818      	ldrb	r0, [r3, #0]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	3301      	adds	r3, #1
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2202      	movs	r2, #2
 800a73e:	4619      	mov	r1, r3
 800a740:	f004 fada 	bl	800ecf8 <SendFeedback>
				return;
 800a744:	e23a      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			 StartClean(cleanTime*1000);
 800a746:	89fb      	ldrh	r3, [r7, #14]
 800a748:	461a      	mov	r2, r3
 800a74a:	0152      	lsls	r2, r2, #5
 800a74c:	1ad2      	subs	r2, r2, r3
 800a74e:	0092      	lsls	r2, r2, #2
 800a750:	4413      	add	r3, r2
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	b29b      	uxth	r3, r3
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 ff7f 	bl	800b65c <_ZN13Communication10StartCleanEt>
			 break;
 800a75e:	e22d      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_Safe: //Check SubFunction
				if(SystemConfig.systemMode!=SystemModes::EmptyMode && SystemConfig.systemMode!=SystemModes::SafeMode){
 800a760:	4b71      	ldr	r3, [pc, #452]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a762:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a766:	2b00      	cmp	r3, #0
 800a768:	d012      	beq.n	800a790 <_ZN13Communication7CommandEPh+0x424>
 800a76a:	4b6f      	ldr	r3, [pc, #444]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a76c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a770:	2b04      	cmp	r3, #4
 800a772:	d00d      	beq.n	800a790 <_ZN13Communication7CommandEPh+0x424>
					ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a774:	2102      	movs	r1, #2
 800a776:	2000      	movs	r0, #0
 800a778:	f004 fb63 	bl	800ee42 <ErrorResult>
					SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	7818      	ldrb	r0, [r3, #0]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	3301      	adds	r3, #1
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2202      	movs	r2, #2
 800a788:	4619      	mov	r1, r3
 800a78a:	f004 fab5 	bl	800ecf8 <SendFeedback>
					return;
 800a78e:	e215      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
				}
				ToggleSafeMode(command[2]==1);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	3302      	adds	r3, #2
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	2b01      	cmp	r3, #1
 800a798:	bf0c      	ite	eq
 800a79a:	2301      	moveq	r3, #1
 800a79c:	2300      	movne	r3, #0
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 ff90 	bl	800b6c8 <_ZN13Communication14ToggleSafeModeEb>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	7818      	ldrb	r0, [r3, #0]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	f004 fa9f 	bl	800ecf8 <SendFeedback>
			 break;
 800a7ba:	e1ff      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_DataStream:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode && SystemConfig.systemMode!= SystemModes::TestMode){
 800a7bc:	4b5a      	ldr	r3, [pc, #360]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a7be:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d012      	beq.n	800a7ec <_ZN13Communication7CommandEPh+0x480>
 800a7c6:	4b58      	ldr	r3, [pc, #352]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a7c8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d00d      	beq.n	800a7ec <_ZN13Communication7CommandEPh+0x480>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a7d0:	2102      	movs	r1, #2
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	f004 fb35 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	7818      	ldrb	r0, [r3, #0]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	f004 fa87 	bl	800ecf8 <SendFeedback>
				return;
 800a7ea:	e1e7      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			ToggleDataStream(command[2]==1);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	3302      	adds	r3, #2
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	bf0c      	ite	eq
 800a7f6:	2301      	moveq	r3, #1
 800a7f8:	2300      	movne	r3, #0
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fd90 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	7818      	ldrb	r0, [r3, #0]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	3301      	adds	r3, #1
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2202      	movs	r2, #2
 800a810:	4619      	mov	r1, r3
 800a812:	f004 fa71 	bl	800ecf8 <SendFeedback>
			 break;
 800a816:	e1d1      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_ReadVolume:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a818:	4b43      	ldr	r3, [pc, #268]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a81a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d017      	beq.n	800a852 <_ZN13Communication7CommandEPh+0x4e6>
 800a822:	4b41      	ldr	r3, [pc, #260]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a824:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d012      	beq.n	800a852 <_ZN13Communication7CommandEPh+0x4e6>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a82c:	4b3e      	ldr	r3, [pc, #248]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a82e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a832:	2b05      	cmp	r3, #5
 800a834:	d00d      	beq.n	800a852 <_ZN13Communication7CommandEPh+0x4e6>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a836:	2102      	movs	r1, #2
 800a838:	2000      	movs	r0, #0
 800a83a:	f004 fb02 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	7818      	ldrb	r0, [r3, #0]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	3301      	adds	r3, #1
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	2202      	movs	r2, #2
 800a84a:	4619      	mov	r1, r3
 800a84c:	f004 fa54 	bl	800ecf8 <SendFeedback>
				return;
 800a850:	e1b4      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			if(SystemConfig.VolumeAverage==0 || SystemConfig.FlowAverage==0){
 800a852:	4b35      	ldr	r3, [pc, #212]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d003      	beq.n	800a862 <_ZN13Communication7CommandEPh+0x4f6>
 800a85a:	4b33      	ldr	r3, [pc, #204]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10d      	bne.n	800a87e <_ZN13Communication7CommandEPh+0x512>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotAverage);
 800a862:	2105      	movs	r1, #5
 800a864:	2000      	movs	r0, #0
 800a866:	f004 faec 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	7818      	ldrb	r0, [r3, #0]
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	3301      	adds	r3, #1
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2202      	movs	r2, #2
 800a876:	4619      	mov	r1, r3
 800a878:	f004 fa3e 	bl	800ecf8 <SendFeedback>
				return;
 800a87c:	e19e      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			 ToggleReadVolume(command[2]==1);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	3302      	adds	r3, #2
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	2b01      	cmp	r3, #1
 800a886:	bf0c      	ite	eq
 800a888:	2301      	moveq	r3, #1
 800a88a:	2300      	movne	r3, #0
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fbf3 	bl	800b07c <_ZN13Communication16ToggleReadVolumeEb>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	7818      	ldrb	r0, [r3, #0]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	3301      	adds	r3, #1
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	f004 fa28 	bl	800ecf8 <SendFeedback>
			 break;
 800a8a8:	e188      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_ReadFlow:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a8aa:	4b1f      	ldr	r3, [pc, #124]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a8ac:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d017      	beq.n	800a8e4 <_ZN13Communication7CommandEPh+0x578>
 800a8b4:	4b1c      	ldr	r3, [pc, #112]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a8b6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d012      	beq.n	800a8e4 <_ZN13Communication7CommandEPh+0x578>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a8be:	4b1a      	ldr	r3, [pc, #104]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a8c0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a8c4:	2b05      	cmp	r3, #5
 800a8c6:	d00d      	beq.n	800a8e4 <_ZN13Communication7CommandEPh+0x578>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a8c8:	2102      	movs	r1, #2
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	f004 fab9 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	7818      	ldrb	r0, [r3, #0]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	4619      	mov	r1, r3
 800a8de:	f004 fa0b 	bl	800ecf8 <SendFeedback>
				return;
 800a8e2:	e16b      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			if(SystemConfig.FlowRate<2 || SystemConfig.VolumeRate<2){
 800a8e4:	4b10      	ldr	r3, [pc, #64]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a8e6:	edd3 7a08 	vldr	s15, [r3, #32]
 800a8ea:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a8ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f6:	d409      	bmi.n	800a90c <_ZN13Communication7CommandEPh+0x5a0>
 800a8f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a928 <_ZN13Communication7CommandEPh+0x5bc>)
 800a8fa:	edd3 7a07 	vldr	s15, [r3, #28]
 800a8fe:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a902:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a90a:	d50f      	bpl.n	800a92c <_ZN13Communication7CommandEPh+0x5c0>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotCalibration);
 800a90c:	2104      	movs	r1, #4
 800a90e:	2000      	movs	r0, #0
 800a910:	f004 fa97 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	7818      	ldrb	r0, [r3, #0]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	3301      	adds	r3, #1
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	2202      	movs	r2, #2
 800a920:	4619      	mov	r1, r3
 800a922:	f004 f9e9 	bl	800ecf8 <SendFeedback>
				return;
 800a926:	e149      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
 800a928:	2000932c 	.word	0x2000932c
			}
			 ToggleReadFlow(command[2]==1);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	3302      	adds	r3, #2
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	2b01      	cmp	r3, #1
 800a934:	bf0c      	ite	eq
 800a936:	2301      	moveq	r3, #1
 800a938:	2300      	movne	r3, #0
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	4619      	mov	r1, r3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fbd6 	bl	800b0f0 <_ZN13Communication14ToggleReadFlowEb>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	7818      	ldrb	r0, [r3, #0]
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	3301      	adds	r3, #1
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	2202      	movs	r2, #2
 800a950:	4619      	mov	r1, r3
 800a952:	f004 f9d1 	bl	800ecf8 <SendFeedback>
			 break;
 800a956:	e131      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_ReadFirstEmg:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a958:	4b9a      	ldr	r3, [pc, #616]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800a95a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d017      	beq.n	800a992 <_ZN13Communication7CommandEPh+0x626>
 800a962:	4b98      	ldr	r3, [pc, #608]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800a964:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d012      	beq.n	800a992 <_ZN13Communication7CommandEPh+0x626>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a96c:	4b95      	ldr	r3, [pc, #596]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800a96e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a972:	2b05      	cmp	r3, #5
 800a974:	d00d      	beq.n	800a992 <_ZN13Communication7CommandEPh+0x626>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a976:	2102      	movs	r1, #2
 800a978:	2000      	movs	r0, #0
 800a97a:	f004 fa62 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	7818      	ldrb	r0, [r3, #0]
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	3301      	adds	r3, #1
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2202      	movs	r2, #2
 800a98a:	4619      	mov	r1, r3
 800a98c:	f004 f9b4 	bl	800ecf8 <SendFeedback>
				return;
 800a990:	e114      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			 ToggleReadFirstEmg(command[2]==1);
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	3302      	adds	r3, #2
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	bf0c      	ite	eq
 800a99c:	2301      	moveq	r3, #1
 800a99e:	2300      	movne	r3, #0
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fbdd 	bl	800b164 <_ZN13Communication18ToggleReadFirstEmgEb>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	7818      	ldrb	r0, [r3, #0]
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	f004 f99e 	bl	800ecf8 <SendFeedback>
			 break;
 800a9bc:	e0fe      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_ReadSecondEmg:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a9be:	4b81      	ldr	r3, [pc, #516]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800a9c0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d017      	beq.n	800a9f8 <_ZN13Communication7CommandEPh+0x68c>
 800a9c8:	4b7e      	ldr	r3, [pc, #504]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800a9ca:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d012      	beq.n	800a9f8 <_ZN13Communication7CommandEPh+0x68c>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a9d2:	4b7c      	ldr	r3, [pc, #496]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800a9d4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a9d8:	2b05      	cmp	r3, #5
 800a9da:	d00d      	beq.n	800a9f8 <_ZN13Communication7CommandEPh+0x68c>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a9dc:	2102      	movs	r1, #2
 800a9de:	2000      	movs	r0, #0
 800a9e0:	f004 fa2f 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	7818      	ldrb	r0, [r3, #0]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	f004 f981 	bl	800ecf8 <SendFeedback>
				return;
 800a9f6:	e0e1      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			 ToggleReadSecondEmg(command[2]==1);
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	3302      	adds	r3, #2
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	bf0c      	ite	eq
 800aa02:	2301      	moveq	r3, #1
 800aa04:	2300      	movne	r3, #0
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	4619      	mov	r1, r3
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fbe0 	bl	800b1d0 <_ZN13Communication19ToggleReadSecondEmgEb>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	7818      	ldrb	r0, [r3, #0]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	3301      	adds	r3, #1
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	2202      	movs	r2, #2
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	f004 f96b 	bl	800ecf8 <SendFeedback>
			 break;
 800aa22:	e0cb      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_StopTest:
			 cleanTime=(command[2]<<8)+command[3];
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	3302      	adds	r3, #2
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	021b      	lsls	r3, r3, #8
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	3203      	adds	r2, #3
 800aa32:	7812      	ldrb	r2, [r2, #0]
 800aa34:	4413      	add	r3, r2
 800aa36:	81fb      	strh	r3, [r7, #14]
			StopTest(cleanTime);
 800aa38:	89fb      	ldrh	r3, [r7, #14]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fce9 	bl	800b414 <_ZN13Communication8StopTestEt>
			 break;
 800aa42:	e0bb      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_StartTest:        //############################# Start Test #################
			if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800aa44:	4b5f      	ldr	r3, [pc, #380]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800aa46:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00d      	beq.n	800aa6a <_ZN13Communication7CommandEPh+0x6fe>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800aa4e:	2102      	movs	r1, #2
 800aa50:	2000      	movs	r0, #0
 800aa52:	f004 f9f6 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	7818      	ldrb	r0, [r3, #0]
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2202      	movs	r2, #2
 800aa62:	4619      	mov	r1, r3
 800aa64:	f004 f948 	bl	800ecf8 <SendFeedback>
				return;
 800aa68:	e0a8      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			if(SystemConfig.VolumeAverage==0 || SystemConfig.FlowAverage==0){
 800aa6a:	4b56      	ldr	r3, [pc, #344]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d003      	beq.n	800aa7a <_ZN13Communication7CommandEPh+0x70e>
 800aa72:	4b54      	ldr	r3, [pc, #336]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800aa74:	695b      	ldr	r3, [r3, #20]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10d      	bne.n	800aa96 <_ZN13Communication7CommandEPh+0x72a>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotAverage);
 800aa7a:	2105      	movs	r1, #5
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	f004 f9e0 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	7818      	ldrb	r0, [r3, #0]
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	4619      	mov	r1, r3
 800aa90:	f004 f932 	bl	800ecf8 <SendFeedback>
				return;
 800aa94:	e092      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			if(SystemConfig.FlowRate<2 || SystemConfig.VolumeRate<2){
 800aa96:	4b4b      	ldr	r3, [pc, #300]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800aa98:	edd3 7a08 	vldr	s15, [r3, #32]
 800aa9c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800aaa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aaa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa8:	d409      	bmi.n	800aabe <_ZN13Communication7CommandEPh+0x752>
 800aaaa:	4b46      	ldr	r3, [pc, #280]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800aaac:	edd3 7a07 	vldr	s15, [r3, #28]
 800aab0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800aab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aabc:	d50d      	bpl.n	800aada <_ZN13Communication7CommandEPh+0x76e>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotCalibration);
 800aabe:	2104      	movs	r1, #4
 800aac0:	2000      	movs	r0, #0
 800aac2:	f004 f9be 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	7818      	ldrb	r0, [r3, #0]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	3301      	adds	r3, #1
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	2202      	movs	r2, #2
 800aad2:	4619      	mov	r1, r3
 800aad4:	f004 f910 	bl	800ecf8 <SendFeedback>
				return;
 800aad8:	e070      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			}
			 cleanTime=(command[3]<<8)+command[4];
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	3303      	adds	r3, #3
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	021b      	lsls	r3, r3, #8
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	3204      	adds	r2, #4
 800aae8:	7812      	ldrb	r2, [r2, #0]
 800aaea:	4413      	add	r3, r2
 800aaec:	81fb      	strh	r3, [r7, #14]
			 SystemConfig.MinimumFlowSensiblity=command[5];
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	795a      	ldrb	r2, [r3, #5]
 800aaf2:	4b34      	ldr	r3, [pc, #208]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800aaf4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
			 SystemConfig.WaitAfterProcessSeconds=command[6];
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	799a      	ldrb	r2, [r3, #6]
 800aafc:	4b31      	ldr	r3, [pc, #196]	@ (800abc4 <_ZN13Communication7CommandEPh+0x858>)
 800aafe:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
			StartTest(isOpenFirstEmg, isOpenSecondEmg, isOpenLoadcell,cleanTime,command[7]);
 800ab02:	4b31      	ldr	r3, [pc, #196]	@ (800abc8 <_ZN13Communication7CommandEPh+0x85c>)
 800ab04:	7819      	ldrb	r1, [r3, #0]
 800ab06:	4b31      	ldr	r3, [pc, #196]	@ (800abcc <_ZN13Communication7CommandEPh+0x860>)
 800ab08:	781a      	ldrb	r2, [r3, #0]
 800ab0a:	4b31      	ldr	r3, [pc, #196]	@ (800abd0 <_ZN13Communication7CommandEPh+0x864>)
 800ab0c:	7818      	ldrb	r0, [r3, #0]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	3307      	adds	r3, #7
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	89fb      	ldrh	r3, [r7, #14]
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fc3f 	bl	800b3a0 <_ZN13Communication9StartTestEbbbth>
			 break;
 800ab22:	e04b      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>

		case CommandRequestType::CMDR_PauseTest:
			pauseTest();
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fcd1 	bl	800b4cc <_ZN13Communication9pauseTestEv>
			break;
 800ab2a:	e047      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_ResumeTest:
			resumeTest();
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fca7 	bl	800b480 <_ZN13Communication10resumeTestEv>
			break;
 800ab32:	e043      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_CancelTest:
			cancelTest();
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fcf7 	bl	800b528 <_ZN13Communication10cancelTestEv>
			break;
 800ab3a:	e03f      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>

		case CommandRequestType::CMDR_StartManPrep:
			cleanTime=(command[3]<<8)+command[4];
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	3303      	adds	r3, #3
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	021b      	lsls	r3, r3, #8
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	3204      	adds	r2, #4
 800ab4a:	7812      	ldrb	r2, [r2, #0]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	81fb      	strh	r3, [r7, #14]
			ManualPrep(cleanTime);
 800ab50:	89fb      	ldrh	r3, [r7, #14]
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fd1f 	bl	800b598 <_ZN13Communication10ManualPrepEt>
			break;
 800ab5a:	e02f      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
		case CommandRequestType::CMDR_StartManTest:
			if(CleanDone){
 800ab5c:	4b1d      	ldr	r3, [pc, #116]	@ (800abd4 <_ZN13Communication7CommandEPh+0x868>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d02a      	beq.n	800abba <_ZN13Communication7CommandEPh+0x84e>
				cleanTime=(command[3]<<8)+command[4];  //0;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	3303      	adds	r3, #3
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	021b      	lsls	r3, r3, #8
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	3204      	adds	r2, #4
 800ab72:	7812      	ldrb	r2, [r2, #0]
 800ab74:	4413      	add	r3, r2
 800ab76:	81fb      	strh	r3, [r7, #14]
				StartManTest(isOpenFirstEmg, isOpenSecondEmg, isOpenLoadcell,cleanTime,command[7]);
 800ab78:	4b13      	ldr	r3, [pc, #76]	@ (800abc8 <_ZN13Communication7CommandEPh+0x85c>)
 800ab7a:	7819      	ldrb	r1, [r3, #0]
 800ab7c:	4b13      	ldr	r3, [pc, #76]	@ (800abcc <_ZN13Communication7CommandEPh+0x860>)
 800ab7e:	781a      	ldrb	r2, [r3, #0]
 800ab80:	4b13      	ldr	r3, [pc, #76]	@ (800abd0 <_ZN13Communication7CommandEPh+0x864>)
 800ab82:	7818      	ldrb	r0, [r3, #0]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	3307      	adds	r3, #7
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	9301      	str	r3, [sp, #4]
 800ab8c:	89fb      	ldrh	r3, [r7, #14]
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	4603      	mov	r3, r0
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fd22 	bl	800b5dc <_ZN13Communication12StartManTestEbbbth>
			}
			break;
 800ab98:	e00f      	b.n	800abba <_ZN13Communication7CommandEPh+0x84e>

		default:
			ErrorResult(OperationCodes::ReadData, Errors::UndefinedCommandType);
 800ab9a:	210a      	movs	r1, #10
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	f004 f950 	bl	800ee42 <ErrorResult>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	7818      	ldrb	r0, [r3, #0]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	3301      	adds	r3, #1
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	2202      	movs	r2, #2
 800abae:	4619      	mov	r1, r3
 800abb0:	f004 f8a2 	bl	800ecf8 <SendFeedback>
			 break;
 800abb4:	e002      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
	if(command[0]!=RequestType::R_Command) return;
 800abb6:	bf00      	nop
 800abb8:	e000      	b.n	800abbc <_ZN13Communication7CommandEPh+0x850>
			break;
 800abba:	bf00      	nop
	}
}
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	2000932c 	.word	0x2000932c
 800abc8:	20004ee2 	.word	0x20004ee2
 800abcc:	20004ee3 	.word	0x20004ee3
 800abd0:	20004ee4 	.word	0x20004ee4
 800abd4:	20004ee1 	.word	0x20004ee1

0800abd8 <_ZN13Communication13ConfigurationEPh>:

void Communication::Configuration(uint8_t *command){
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
	if(command[0]!=RequestType::R_Configuration) return;
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	f040 818e 	bne.w	800af08 <_ZN13Communication13ConfigurationEPh+0x330>
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800abec:	4bac      	ldr	r3, [pc, #688]	@ (800aea0 <_ZN13Communication13ConfigurationEPh+0x2c8>)
 800abee:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d004      	beq.n	800ac00 <_ZN13Communication13ConfigurationEPh+0x28>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800abf6:	2102      	movs	r1, #2
 800abf8:	2000      	movs	r0, #0
 800abfa:	f004 f922 	bl	800ee42 <ErrorResult>
		return;
 800abfe:	e184      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
	}
	uint16_t maxTrim = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	81fb      	strh	r3, [r7, #14]
	uint16_t zeroPointMaxTrim = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	81bb      	strh	r3, [r7, #12]
	uint16_t zeroPointMinTrim = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	817b      	strh	r3, [r7, #10]
	switch (command[1])   												//Check Function
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	3b01      	subs	r3, #1
 800ac14:	2b0a      	cmp	r3, #10
 800ac16:	f200 8169 	bhi.w	800aeec <_ZN13Communication13ConfigurationEPh+0x314>
 800ac1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac20 <_ZN13Communication13ConfigurationEPh+0x48>)
 800ac1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac20:	0800ac4d 	.word	0x0800ac4d
 800ac24:	0800ac6f 	.word	0x0800ac6f
 800ac28:	0800ac95 	.word	0x0800ac95
 800ac2c:	0800acbb 	.word	0x0800acbb
 800ac30:	0800ace1 	.word	0x0800ace1
 800ac34:	0800ad07 	.word	0x0800ad07
 800ac38:	0800ad2d 	.word	0x0800ad2d
 800ac3c:	0800ad53 	.word	0x0800ad53
 800ac40:	0800ad79 	.word	0x0800ad79
 800ac44:	0800ae1d 	.word	0x0800ae1d
 800ac48:	0800aecb 	.word	0x0800aecb
	{
		case ConfigurationRequestType::CFGR_ReadConfiguration:
			 SuccessDataResult(100,SuccessDataType::SD_Configuration, SystemConfig.Backup,SystemConfig.BackupLen);
 800ac4c:	4b94      	ldr	r3, [pc, #592]	@ (800aea0 <_ZN13Communication13ConfigurationEPh+0x2c8>)
 800ac4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac50:	4a94      	ldr	r2, [pc, #592]	@ (800aea4 <_ZN13Communication13ConfigurationEPh+0x2cc>)
 800ac52:	2101      	movs	r1, #1
 800ac54:	2064      	movs	r0, #100	@ 0x64
 800ac56:	f004 f879 	bl	800ed4c <SuccessDataResult>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	7818      	ldrb	r0, [r3, #0]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	3301      	adds	r3, #1
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2202      	movs	r2, #2
 800ac66:	4619      	mov	r1, r3
 800ac68:	f004 f846 	bl	800ecf8 <SendFeedback>
			 break;
 800ac6c:	e14d      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetSendPerSecond:
			FMI.WriteSendPerSecond(command[2]);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	1d1a      	adds	r2, r3, #4
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	3302      	adds	r3, #2
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	4619      	mov	r1, r3
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	f001 fc74 	bl	800c568 <_ZN12FlashManager18WriteSendPerSecondEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	7818      	ldrb	r0, [r3, #0]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	3301      	adds	r3, #1
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f004 f833 	bl	800ecf8 <SendFeedback>
			 break;
 800ac92:	e13a      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetFirstEmgPerSecond:
			FMI.WriteFirstEmgPerSecond(command[2]);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	1d1a      	adds	r2, r3, #4
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	3302      	adds	r3, #2
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4610      	mov	r0, r2
 800aca2:	f001 fcfd 	bl	800c6a0 <_ZN12FlashManager22WriteFirstEmgPerSecondEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	7818      	ldrb	r0, [r3, #0]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	3301      	adds	r3, #1
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	2202      	movs	r2, #2
 800acb2:	4619      	mov	r1, r3
 800acb4:	f004 f820 	bl	800ecf8 <SendFeedback>
			 break;
 800acb8:	e127      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetSecondEmgPerSecond:
			FMI.WriteSecondEmgPerSecond(command[2]);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	1d1a      	adds	r2, r3, #4
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	3302      	adds	r3, #2
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	4619      	mov	r1, r3
 800acc6:	4610      	mov	r0, r2
 800acc8:	f001 fd86 	bl	800c7d8 <_ZN12FlashManager23WriteSecondEmgPerSecondEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	7818      	ldrb	r0, [r3, #0]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	3301      	adds	r3, #1
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	2202      	movs	r2, #2
 800acd8:	4619      	mov	r1, r3
 800acda:	f004 f80d 	bl	800ecf8 <SendFeedback>
			 break;
 800acde:	e114      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetVolumePerSecond:
			FMI.WriteVolumePerSecond(command[2]);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	1d1a      	adds	r2, r3, #4
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	3302      	adds	r3, #2
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	4619      	mov	r1, r3
 800acec:	4610      	mov	r0, r2
 800acee:	f001 fe0f 	bl	800c910 <_ZN12FlashManager20WriteVolumePerSecondEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	7818      	ldrb	r0, [r3, #0]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	3301      	adds	r3, #1
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	2202      	movs	r2, #2
 800acfe:	4619      	mov	r1, r3
 800ad00:	f003 fffa 	bl	800ecf8 <SendFeedback>
			 break;
 800ad04:	e101      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetFlowPerSecond:
			FMI.WriteFlowPerSecond(command[2]);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	1d1a      	adds	r2, r3, #4
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	3302      	adds	r3, #2
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	4619      	mov	r1, r3
 800ad12:	4610      	mov	r0, r2
 800ad14:	f001 fe98 	bl	800ca48 <_ZN12FlashManager18WriteFlowPerSecondEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	7818      	ldrb	r0, [r3, #0]
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2202      	movs	r2, #2
 800ad24:	4619      	mov	r1, r3
 800ad26:	f003 ffe7 	bl	800ecf8 <SendFeedback>
			 break;
 800ad2a:	e0ee      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetPumpMaxRunTime:
			FMI.WritePumpMaxRunTime(command[2]);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	1d1a      	adds	r2, r3, #4
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	3302      	adds	r3, #2
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	4619      	mov	r1, r3
 800ad38:	4610      	mov	r0, r2
 800ad3a:	f001 ff21 	bl	800cb80 <_ZN12FlashManager19WritePumpMaxRunTimeEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	7818      	ldrb	r0, [r3, #0]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	3301      	adds	r3, #1
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	2202      	movs	r2, #2
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	f003 ffd4 	bl	800ecf8 <SendFeedback>
			 break;
 800ad50:	e0db      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetValveMaxRunTime:
			FMI.WriteValveMaxRunTime(command[2]);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	1d1a      	adds	r2, r3, #4
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	3302      	adds	r3, #2
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	4610      	mov	r0, r2
 800ad60:	f001 ffaa 	bl	800ccb8 <_ZN12FlashManager20WriteValveMaxRunTimeEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	7818      	ldrb	r0, [r3, #0]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	2202      	movs	r2, #2
 800ad70:	4619      	mov	r1, r3
 800ad72:	f003 ffc1 	bl	800ecf8 <SendFeedback>
			 break;
 800ad76:	e0c8      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
		 case ConfigurationRequestType::CFGR_SetCalibrationFirstEmg:
				maxTrim=(command[2]<<8)+command[3];
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	3302      	adds	r3, #2
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	021b      	lsls	r3, r3, #8
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	3203      	adds	r2, #3
 800ad86:	7812      	ldrb	r2, [r2, #0]
 800ad88:	4413      	add	r3, r2
 800ad8a:	81fb      	strh	r3, [r7, #14]
				zeroPointMaxTrim=(command[4]<<8)+command[5];
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	021b      	lsls	r3, r3, #8
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	3205      	adds	r2, #5
 800ad9a:	7812      	ldrb	r2, [r2, #0]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	81bb      	strh	r3, [r7, #12]
				zeroPointMinTrim=(command[6]<<8)+command[7];
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	3306      	adds	r3, #6
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	021b      	lsls	r3, r3, #8
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	3207      	adds	r2, #7
 800adae:	7812      	ldrb	r2, [r2, #0]
 800adb0:	4413      	add	r3, r2
 800adb2:	817b      	strh	r3, [r7, #10]
				if(maxTrim<1){
 800adb4:	89fb      	ldrh	r3, [r7, #14]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d10d      	bne.n	800add6 <_ZN13Communication13ConfigurationEPh+0x1fe>
					ErrorResult(OperationCodes::ReadData, Errors::ValueShouldNotBeZero);
 800adba:	2106      	movs	r1, #6
 800adbc:	2000      	movs	r0, #0
 800adbe:	f004 f840 	bl	800ee42 <ErrorResult>
					SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	7818      	ldrb	r0, [r3, #0]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	3301      	adds	r3, #1
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	2202      	movs	r2, #2
 800adce:	4619      	mov	r1, r3
 800add0:	f003 ff92 	bl	800ecf8 <SendFeedback>
					return;
 800add4:	e099      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
				}
				if(zeroPointMinTrim>=zeroPointMaxTrim){
 800add6:	897a      	ldrh	r2, [r7, #10]
 800add8:	89bb      	ldrh	r3, [r7, #12]
 800adda:	429a      	cmp	r2, r3
 800addc:	d30d      	bcc.n	800adfa <_ZN13Communication13ConfigurationEPh+0x222>
					ErrorResult(OperationCodes::ReadData, Errors::MinValueCanNotBeGreaterThanMaxValue);
 800adde:	2107      	movs	r1, #7
 800ade0:	2000      	movs	r0, #0
 800ade2:	f004 f82e 	bl	800ee42 <ErrorResult>
					SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	7818      	ldrb	r0, [r3, #0]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	3301      	adds	r3, #1
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	2202      	movs	r2, #2
 800adf2:	4619      	mov	r1, r3
 800adf4:	f003 ff80 	bl	800ecf8 <SendFeedback>
					return;
 800adf8:	e087      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
				}
				FMI.WriteFirstEmgData(maxTrim, zeroPointMaxTrim, zeroPointMinTrim);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	1d18      	adds	r0, r3, #4
 800adfe:	897b      	ldrh	r3, [r7, #10]
 800ae00:	89ba      	ldrh	r2, [r7, #12]
 800ae02:	89f9      	ldrh	r1, [r7, #14]
 800ae04:	f002 fa4e 	bl	800d2a4 <_ZN12FlashManager17WriteFirstEmgDataEttt>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	7818      	ldrb	r0, [r3, #0]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	2202      	movs	r2, #2
 800ae14:	4619      	mov	r1, r3
 800ae16:	f003 ff6f 	bl	800ecf8 <SendFeedback>
			 break;
 800ae1a:	e076      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetCalibrationSecondEmg:
			maxTrim=(command[2]<<8)+command[3];
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	3302      	adds	r3, #2
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	3203      	adds	r2, #3
 800ae2a:	7812      	ldrb	r2, [r2, #0]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	81fb      	strh	r3, [r7, #14]
			zeroPointMaxTrim=(command[4]<<8)+command[5];
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	3304      	adds	r3, #4
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	021b      	lsls	r3, r3, #8
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	3205      	adds	r2, #5
 800ae3e:	7812      	ldrb	r2, [r2, #0]
 800ae40:	4413      	add	r3, r2
 800ae42:	81bb      	strh	r3, [r7, #12]
			zeroPointMinTrim=(command[6]<<8)+command[7];
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	3306      	adds	r3, #6
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	021b      	lsls	r3, r3, #8
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	3207      	adds	r2, #7
 800ae52:	7812      	ldrb	r2, [r2, #0]
 800ae54:	4413      	add	r3, r2
 800ae56:	817b      	strh	r3, [r7, #10]
			if(maxTrim<1){
 800ae58:	89fb      	ldrh	r3, [r7, #14]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10d      	bne.n	800ae7a <_ZN13Communication13ConfigurationEPh+0x2a2>
				ErrorResult(OperationCodes::ReadData, Errors::ValueShouldNotBeZero);
 800ae5e:	2106      	movs	r1, #6
 800ae60:	2000      	movs	r0, #0
 800ae62:	f003 ffee 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	7818      	ldrb	r0, [r3, #0]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2202      	movs	r2, #2
 800ae72:	4619      	mov	r1, r3
 800ae74:	f003 ff40 	bl	800ecf8 <SendFeedback>
				return;
 800ae78:	e047      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
			}
			if(zeroPointMinTrim>=zeroPointMaxTrim){
 800ae7a:	897a      	ldrh	r2, [r7, #10]
 800ae7c:	89bb      	ldrh	r3, [r7, #12]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d312      	bcc.n	800aea8 <_ZN13Communication13ConfigurationEPh+0x2d0>
				ErrorResult(OperationCodes::ReadData, Errors::MinValueCanNotBeGreaterThanMaxValue);
 800ae82:	2107      	movs	r1, #7
 800ae84:	2000      	movs	r0, #0
 800ae86:	f003 ffdc 	bl	800ee42 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	7818      	ldrb	r0, [r3, #0]
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	3301      	adds	r3, #1
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2202      	movs	r2, #2
 800ae96:	4619      	mov	r1, r3
 800ae98:	f003 ff2e 	bl	800ecf8 <SendFeedback>
				return;
 800ae9c:	e035      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800ae9e:	bf00      	nop
 800aea0:	2000932c 	.word	0x2000932c
 800aea4:	20009361 	.word	0x20009361
			}
			FMI.WriteSecondEmgData(maxTrim, zeroPointMaxTrim, zeroPointMinTrim);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	1d18      	adds	r0, r3, #4
 800aeac:	897b      	ldrh	r3, [r7, #10]
 800aeae:	89ba      	ldrh	r2, [r7, #12]
 800aeb0:	89f9      	ldrh	r1, [r7, #14]
 800aeb2:	f002 fbb2 	bl	800d61a <_ZN12FlashManager18WriteSecondEmgDataEttt>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	7818      	ldrb	r0, [r3, #0]
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2202      	movs	r2, #2
 800aec2:	4619      	mov	r1, r3
 800aec4:	f003 ff18 	bl	800ecf8 <SendFeedback>
			 break;
 800aec8:	e01f      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SaveFlash:
			FMI.Update();
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3304      	adds	r3, #4
 800aece:	4618      	mov	r0, r3
 800aed0:	f001 fa2e 	bl	800c330 <_ZN12FlashManager6UpdateEv>
			FlashInitialize();
 800aed4:	f003 fe1a 	bl	800eb0c <FlashInitialize>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	7818      	ldrb	r0, [r3, #0]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	3301      	adds	r3, #1
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	2202      	movs	r2, #2
 800aee4:	4619      	mov	r1, r3
 800aee6:	f003 ff07 	bl	800ecf8 <SendFeedback>
			break;
 800aeea:	e00e      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
		default:
			ErrorResult(OperationCodes::ReadData, Errors::UndefinedConfigurationType);
 800aeec:	210b      	movs	r1, #11
 800aeee:	2000      	movs	r0, #0
 800aef0:	f003 ffa7 	bl	800ee42 <ErrorResult>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	7818      	ldrb	r0, [r3, #0]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	3301      	adds	r3, #1
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	2202      	movs	r2, #2
 800af00:	4619      	mov	r1, r3
 800af02:	f003 fef9 	bl	800ecf8 <SendFeedback>
			 break;
 800af06:	e000      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
	if(command[0]!=RequestType::R_Configuration) return;
 800af08:	bf00      	nop
	}
}
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <_ZN13Communication14ToggleFirstEmgEb>:

void Communication::ToggleFirstEmg(bool isStart){
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	460b      	mov	r3, r1
 800af1a:	70fb      	strb	r3, [r7, #3]
	Statuses.FirstEmg=isStart;
 800af1c:	4a0f      	ldr	r2, [pc, #60]	@ (800af5c <_ZN13Communication14ToggleFirstEmgEb+0x4c>)
 800af1e:	78fb      	ldrb	r3, [r7, #3]
 800af20:	7013      	strb	r3, [r2, #0]
	if(isStart){
 800af22:	78fb      	ldrb	r3, [r7, #3]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00c      	beq.n	800af42 <_ZN13Communication14ToggleFirstEmgEb+0x32>
		if(ThreadStorage.FirstEmgThreadId!=NULL) return;
 800af28:	4b0d      	ldr	r3, [pc, #52]	@ (800af60 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d111      	bne.n	800af54 <_ZN13Communication14ToggleFirstEmgEb+0x44>
		ThreadStorage.FirstEmgThreadId = osThreadNew(StartFirstEmgTask, NULL, &ThreadStorage.FirstEmgThreadAttr);
 800af30:	4a0c      	ldr	r2, [pc, #48]	@ (800af64 <_ZN13Communication14ToggleFirstEmgEb+0x54>)
 800af32:	2100      	movs	r1, #0
 800af34:	480c      	ldr	r0, [pc, #48]	@ (800af68 <_ZN13Communication14ToggleFirstEmgEb+0x58>)
 800af36:	f7fb fce7 	bl	8006908 <osThreadNew>
 800af3a:	4603      	mov	r3, r0
 800af3c:	4a08      	ldr	r2, [pc, #32]	@ (800af60 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800af3e:	6093      	str	r3, [r2, #8]
		return;
 800af40:	e009      	b.n	800af56 <_ZN13Communication14ToggleFirstEmgEb+0x46>
	}
	osThreadTerminate(ThreadStorage.FirstEmgThreadId);
 800af42:	4b07      	ldr	r3, [pc, #28]	@ (800af60 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	4618      	mov	r0, r3
 800af48:	f7fb fd70 	bl	8006a2c <osThreadTerminate>
	ThreadStorage.FirstEmgThreadId=NULL;
 800af4c:	4b04      	ldr	r3, [pc, #16]	@ (800af60 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800af4e:	2200      	movs	r2, #0
 800af50:	609a      	str	r2, [r3, #8]
 800af52:	e000      	b.n	800af56 <_ZN13Communication14ToggleFirstEmgEb+0x46>
		if(ThreadStorage.FirstEmgThreadId!=NULL) return;
 800af54:	bf00      	nop
}
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	20009324 	.word	0x20009324
 800af60:	2000913c 	.word	0x2000913c
 800af64:	2000914c 	.word	0x2000914c
 800af68:	0800f9b5 	.word	0x0800f9b5

0800af6c <_ZN13Communication15ToggleSecondEmgEb>:
void Communication::ToggleSecondEmg(bool isStart){
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	460b      	mov	r3, r1
 800af76:	70fb      	strb	r3, [r7, #3]
	Statuses.SecondEmg=isStart;
 800af78:	4a0f      	ldr	r2, [pc, #60]	@ (800afb8 <_ZN13Communication15ToggleSecondEmgEb+0x4c>)
 800af7a:	78fb      	ldrb	r3, [r7, #3]
 800af7c:	7053      	strb	r3, [r2, #1]
	if(isStart){
 800af7e:	78fb      	ldrb	r3, [r7, #3]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00c      	beq.n	800af9e <_ZN13Communication15ToggleSecondEmgEb+0x32>
		if(ThreadStorage.SecondEmgThreadId!=NULL) return;
 800af84:	4b0d      	ldr	r3, [pc, #52]	@ (800afbc <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d111      	bne.n	800afb0 <_ZN13Communication15ToggleSecondEmgEb+0x44>
		ThreadStorage.SecondEmgThreadId = osThreadNew(StartSecondEmgTask, NULL, &ThreadStorage.SecondEmgThreadAttr);
 800af8c:	4a0c      	ldr	r2, [pc, #48]	@ (800afc0 <_ZN13Communication15ToggleSecondEmgEb+0x54>)
 800af8e:	2100      	movs	r1, #0
 800af90:	480c      	ldr	r0, [pc, #48]	@ (800afc4 <_ZN13Communication15ToggleSecondEmgEb+0x58>)
 800af92:	f7fb fcb9 	bl	8006908 <osThreadNew>
 800af96:	4603      	mov	r3, r0
 800af98:	4a08      	ldr	r2, [pc, #32]	@ (800afbc <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800af9a:	60d3      	str	r3, [r2, #12]
		return;
 800af9c:	e009      	b.n	800afb2 <_ZN13Communication15ToggleSecondEmgEb+0x46>
	}
	osThreadTerminate(ThreadStorage.SecondEmgThreadId);
 800af9e:	4b07      	ldr	r3, [pc, #28]	@ (800afbc <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fb fd42 	bl	8006a2c <osThreadTerminate>
	ThreadStorage.SecondEmgThreadId=NULL;
 800afa8:	4b04      	ldr	r3, [pc, #16]	@ (800afbc <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800afaa:	2200      	movs	r2, #0
 800afac:	60da      	str	r2, [r3, #12]
 800afae:	e000      	b.n	800afb2 <_ZN13Communication15ToggleSecondEmgEb+0x46>
		if(ThreadStorage.SecondEmgThreadId!=NULL) return;
 800afb0:	bf00      	nop
}
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20009324 	.word	0x20009324
 800afbc:	2000913c 	.word	0x2000913c
 800afc0:	20009170 	.word	0x20009170
 800afc4:	0800fb1d 	.word	0x0800fb1d

0800afc8 <_ZN13Communication14ToggleLoadCellEb>:
void Communication::ToggleLoadCell(bool isStart){
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	70fb      	strb	r3, [r7, #3]
	Statuses.Volume=isStart;
 800afd4:	4a22      	ldr	r2, [pc, #136]	@ (800b060 <_ZN13Communication14ToggleLoadCellEb+0x98>)
 800afd6:	78fb      	ldrb	r3, [r7, #3]
 800afd8:	7093      	strb	r3, [r2, #2]
	Statuses.Flow=isStart;
 800afda:	4a21      	ldr	r2, [pc, #132]	@ (800b060 <_ZN13Communication14ToggleLoadCellEb+0x98>)
 800afdc:	78fb      	ldrb	r3, [r7, #3]
 800afde:	70d3      	strb	r3, [r2, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800afe0:	4b20      	ldr	r3, [pc, #128]	@ (800b064 <_ZN13Communication14ToggleLoadCellEb+0x9c>)
 800afe2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800afe6:	2b04      	cmp	r3, #4
 800afe8:	d104      	bne.n	800aff4 <_ZN13Communication14ToggleLoadCellEb+0x2c>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800afea:	2102      	movs	r1, #2
 800afec:	2000      	movs	r0, #0
 800afee:	f003 ff28 	bl	800ee42 <ErrorResult>
		return;
 800aff2:	e031      	b.n	800b058 <_ZN13Communication14ToggleLoadCellEb+0x90>
	}
	if(isStart){
 800aff4:	78fb      	ldrb	r3, [r7, #3]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d01a      	beq.n	800b030 <_ZN13Communication14ToggleLoadCellEb+0x68>
		if(ThreadStorage.FlowThreadId!=NULL) return;
 800affa:	4b1b      	ldr	r3, [pc, #108]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800affc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800affe:	2b00      	cmp	r3, #0
 800b000:	d127      	bne.n	800b052 <_ZN13Communication14ToggleLoadCellEb+0x8a>
		if(ThreadStorage.VolumeThreadId!=NULL) return;
 800b002:	4b19      	ldr	r3, [pc, #100]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b006:	2b00      	cmp	r3, #0
 800b008:	d125      	bne.n	800b056 <_ZN13Communication14ToggleLoadCellEb+0x8e>
		ClearLoadcellParams();
 800b00a:	f005 fc83 	bl	8010914 <ClearLoadcellParams>
		ThreadStorage.VolumeThreadId = osThreadNew(StartVolumeTask, NULL, &ThreadStorage.VolumeThreadAttr);
 800b00e:	4a17      	ldr	r2, [pc, #92]	@ (800b06c <_ZN13Communication14ToggleLoadCellEb+0xa4>)
 800b010:	2100      	movs	r1, #0
 800b012:	4817      	ldr	r0, [pc, #92]	@ (800b070 <_ZN13Communication14ToggleLoadCellEb+0xa8>)
 800b014:	f7fb fc78 	bl	8006908 <osThreadNew>
 800b018:	4603      	mov	r3, r0
 800b01a:	4a13      	ldr	r2, [pc, #76]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b01c:	6593      	str	r3, [r2, #88]	@ 0x58
		ThreadStorage.FlowThreadId = osThreadNew(StartFlowTask, NULL, &ThreadStorage.FlowThreadAttr);
 800b01e:	4a15      	ldr	r2, [pc, #84]	@ (800b074 <_ZN13Communication14ToggleLoadCellEb+0xac>)
 800b020:	2100      	movs	r1, #0
 800b022:	4815      	ldr	r0, [pc, #84]	@ (800b078 <_ZN13Communication14ToggleLoadCellEb+0xb0>)
 800b024:	f7fb fc70 	bl	8006908 <osThreadNew>
 800b028:	4603      	mov	r3, r0
 800b02a:	4a0f      	ldr	r2, [pc, #60]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b02c:	65d3      	str	r3, [r2, #92]	@ 0x5c
		return;
 800b02e:	e013      	b.n	800b058 <_ZN13Communication14ToggleLoadCellEb+0x90>
	}
	osThreadTerminate(ThreadStorage.VolumeThreadId);
 800b030:	4b0d      	ldr	r3, [pc, #52]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b034:	4618      	mov	r0, r3
 800b036:	f7fb fcf9 	bl	8006a2c <osThreadTerminate>
	osThreadTerminate(ThreadStorage.FlowThreadId);
 800b03a:	4b0b      	ldr	r3, [pc, #44]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b03c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fb fcf4 	bl	8006a2c <osThreadTerminate>
	ThreadStorage.VolumeThreadId=NULL;
 800b044:	4b08      	ldr	r3, [pc, #32]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b046:	2200      	movs	r2, #0
 800b048:	659a      	str	r2, [r3, #88]	@ 0x58
	ThreadStorage.FlowThreadId=NULL;
 800b04a:	4b07      	ldr	r3, [pc, #28]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b050:	e002      	b.n	800b058 <_ZN13Communication14ToggleLoadCellEb+0x90>
		if(ThreadStorage.FlowThreadId!=NULL) return;
 800b052:	bf00      	nop
 800b054:	e000      	b.n	800b058 <_ZN13Communication14ToggleLoadCellEb+0x90>
		if(ThreadStorage.VolumeThreadId!=NULL) return;
 800b056:	bf00      	nop
}
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	20009324 	.word	0x20009324
 800b064:	2000932c 	.word	0x2000932c
 800b068:	2000913c 	.word	0x2000913c
 800b06c:	200091c8 	.word	0x200091c8
 800b070:	0800fdfd 	.word	0x0800fdfd
 800b074:	200091ec 	.word	0x200091ec
 800b078:	0800fc85 	.word	0x0800fc85

0800b07c <_ZN13Communication16ToggleReadVolumeEb>:
void Communication::ToggleReadVolume(bool isStart){
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800b088:	4b15      	ldr	r3, [pc, #84]	@ (800b0e0 <_ZN13Communication16ToggleReadVolumeEb+0x64>)
 800b08a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b08e:	2b04      	cmp	r3, #4
 800b090:	d104      	bne.n	800b09c <_ZN13Communication16ToggleReadVolumeEb+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b092:	2102      	movs	r1, #2
 800b094:	2000      	movs	r0, #0
 800b096:	f003 fed4 	bl	800ee42 <ErrorResult>
		return;
 800b09a:	e01d      	b.n	800b0d8 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
	}
	if(isStart){
 800b09c:	78fb      	ldrb	r3, [r7, #3]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00e      	beq.n	800b0c0 <_ZN13Communication16ToggleReadVolumeEb+0x44>
		if(ThreadStorage.ReadVolumeThreadId!=NULL) return;
 800b0a2:	4b10      	ldr	r3, [pc, #64]	@ (800b0e4 <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800b0a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d115      	bne.n	800b0d6 <_ZN13Communication16ToggleReadVolumeEb+0x5a>
		ClearLoadcellParams();
 800b0aa:	f005 fc33 	bl	8010914 <ClearLoadcellParams>
		ThreadStorage.ReadVolumeThreadId = osThreadNew(StartReadVolumeTask, NULL, &ThreadStorage.VolumeThreadAttr);
 800b0ae:	4a0e      	ldr	r2, [pc, #56]	@ (800b0e8 <_ZN13Communication16ToggleReadVolumeEb+0x6c>)
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	480e      	ldr	r0, [pc, #56]	@ (800b0ec <_ZN13Communication16ToggleReadVolumeEb+0x70>)
 800b0b4:	f7fb fc28 	bl	8006908 <osThreadNew>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800b0e4 <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800b0bc:	6613      	str	r3, [r2, #96]	@ 0x60
		return;
 800b0be:	e00b      	b.n	800b0d8 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
	}
	osThreadTerminate(ThreadStorage.ReadVolumeThreadId);
 800b0c0:	4b08      	ldr	r3, [pc, #32]	@ (800b0e4 <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800b0c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fb fcb1 	bl	8006a2c <osThreadTerminate>
	ThreadStorage.ReadVolumeThreadId=NULL;
 800b0ca:	4b06      	ldr	r3, [pc, #24]	@ (800b0e4 <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	661a      	str	r2, [r3, #96]	@ 0x60
	ClearLoadcellParams();
 800b0d0:	f005 fc20 	bl	8010914 <ClearLoadcellParams>
 800b0d4:	e000      	b.n	800b0d8 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
		if(ThreadStorage.ReadVolumeThreadId!=NULL) return;
 800b0d6:	bf00      	nop
}
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	2000932c 	.word	0x2000932c
 800b0e4:	2000913c 	.word	0x2000913c
 800b0e8:	200091c8 	.word	0x200091c8
 800b0ec:	0800fe81 	.word	0x0800fe81

0800b0f0 <_ZN13Communication14ToggleReadFlowEb>:

void Communication::ToggleReadFlow(bool isStart){
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800b0fc:	4b15      	ldr	r3, [pc, #84]	@ (800b154 <_ZN13Communication14ToggleReadFlowEb+0x64>)
 800b0fe:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b102:	2b04      	cmp	r3, #4
 800b104:	d104      	bne.n	800b110 <_ZN13Communication14ToggleReadFlowEb+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b106:	2102      	movs	r1, #2
 800b108:	2000      	movs	r0, #0
 800b10a:	f003 fe9a 	bl	800ee42 <ErrorResult>
		return;
 800b10e:	e01d      	b.n	800b14c <_ZN13Communication14ToggleReadFlowEb+0x5c>
	}
	if(isStart){
 800b110:	78fb      	ldrb	r3, [r7, #3]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00e      	beq.n	800b134 <_ZN13Communication14ToggleReadFlowEb+0x44>
		if(ThreadStorage.ReadFlowThreadId!=NULL) return;
 800b116:	4b10      	ldr	r3, [pc, #64]	@ (800b158 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800b118:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d115      	bne.n	800b14a <_ZN13Communication14ToggleReadFlowEb+0x5a>
		ClearLoadcellParams();
 800b11e:	f005 fbf9 	bl	8010914 <ClearLoadcellParams>
		ThreadStorage.ReadFlowThreadId = osThreadNew(StartReadFlowTask, NULL, &ThreadStorage.FlowThreadAttr);
 800b122:	4a0e      	ldr	r2, [pc, #56]	@ (800b15c <_ZN13Communication14ToggleReadFlowEb+0x6c>)
 800b124:	2100      	movs	r1, #0
 800b126:	480e      	ldr	r0, [pc, #56]	@ (800b160 <_ZN13Communication14ToggleReadFlowEb+0x70>)
 800b128:	f7fb fbee 	bl	8006908 <osThreadNew>
 800b12c:	4603      	mov	r3, r0
 800b12e:	4a0a      	ldr	r2, [pc, #40]	@ (800b158 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800b130:	6653      	str	r3, [r2, #100]	@ 0x64
		return;
 800b132:	e00b      	b.n	800b14c <_ZN13Communication14ToggleReadFlowEb+0x5c>
	}
	osThreadTerminate(ThreadStorage.ReadFlowThreadId);
 800b134:	4b08      	ldr	r3, [pc, #32]	@ (800b158 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800b136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fb fc77 	bl	8006a2c <osThreadTerminate>
	ThreadStorage.ReadFlowThreadId=NULL;
 800b13e:	4b06      	ldr	r3, [pc, #24]	@ (800b158 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800b140:	2200      	movs	r2, #0
 800b142:	665a      	str	r2, [r3, #100]	@ 0x64
	ClearLoadcellParams();
 800b144:	f005 fbe6 	bl	8010914 <ClearLoadcellParams>
 800b148:	e000      	b.n	800b14c <_ZN13Communication14ToggleReadFlowEb+0x5c>
		if(ThreadStorage.ReadFlowThreadId!=NULL) return;
 800b14a:	bf00      	nop
}
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	2000932c 	.word	0x2000932c
 800b158:	2000913c 	.word	0x2000913c
 800b15c:	200091ec 	.word	0x200091ec
 800b160:	0800fd01 	.word	0x0800fd01

0800b164 <_ZN13Communication18ToggleReadFirstEmgEb>:

void Communication::ToggleReadFirstEmg(bool isStart){
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	460b      	mov	r3, r1
 800b16e:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800b170:	4b13      	ldr	r3, [pc, #76]	@ (800b1c0 <_ZN13Communication18ToggleReadFirstEmgEb+0x5c>)
 800b172:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b176:	2b04      	cmp	r3, #4
 800b178:	d104      	bne.n	800b184 <_ZN13Communication18ToggleReadFirstEmgEb+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b17a:	2102      	movs	r1, #2
 800b17c:	2000      	movs	r0, #0
 800b17e:	f003 fe60 	bl	800ee42 <ErrorResult>
		return;
 800b182:	e019      	b.n	800b1b8 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
	}
	if(isStart){
 800b184:	78fb      	ldrb	r3, [r7, #3]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00c      	beq.n	800b1a4 <_ZN13Communication18ToggleReadFirstEmgEb+0x40>
		if(ThreadStorage.ReadFirstEmgThreadId!=NULL) return;
 800b18a:	4b0e      	ldr	r3, [pc, #56]	@ (800b1c4 <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800b18c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d111      	bne.n	800b1b6 <_ZN13Communication18ToggleReadFirstEmgEb+0x52>
		ThreadStorage.ReadFirstEmgThreadId = osThreadNew(StartReadFirstEmgTask, NULL, &ThreadStorage.FlowThreadAttr);
 800b192:	4a0d      	ldr	r2, [pc, #52]	@ (800b1c8 <_ZN13Communication18ToggleReadFirstEmgEb+0x64>)
 800b194:	2100      	movs	r1, #0
 800b196:	480d      	ldr	r0, [pc, #52]	@ (800b1cc <_ZN13Communication18ToggleReadFirstEmgEb+0x68>)
 800b198:	f7fb fbb6 	bl	8006908 <osThreadNew>
 800b19c:	4603      	mov	r3, r0
 800b19e:	4a09      	ldr	r2, [pc, #36]	@ (800b1c4 <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800b1a0:	6693      	str	r3, [r2, #104]	@ 0x68
		return;
 800b1a2:	e009      	b.n	800b1b8 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
	}
	osThreadTerminate(ThreadStorage.ReadFirstEmgThreadId);
 800b1a4:	4b07      	ldr	r3, [pc, #28]	@ (800b1c4 <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800b1a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fb fc3f 	bl	8006a2c <osThreadTerminate>
	ThreadStorage.ReadFirstEmgThreadId=NULL;
 800b1ae:	4b05      	ldr	r3, [pc, #20]	@ (800b1c4 <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	669a      	str	r2, [r3, #104]	@ 0x68
 800b1b4:	e000      	b.n	800b1b8 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
		if(ThreadStorage.ReadFirstEmgThreadId!=NULL) return;
 800b1b6:	bf00      	nop
}
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	2000932c 	.word	0x2000932c
 800b1c4:	2000913c 	.word	0x2000913c
 800b1c8:	200091ec 	.word	0x200091ec
 800b1cc:	0800fa31 	.word	0x0800fa31

0800b1d0 <_ZN13Communication19ToggleReadSecondEmgEb>:

void Communication::ToggleReadSecondEmg(bool isStart){
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800b1dc:	4b13      	ldr	r3, [pc, #76]	@ (800b22c <_ZN13Communication19ToggleReadSecondEmgEb+0x5c>)
 800b1de:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b1e2:	2b04      	cmp	r3, #4
 800b1e4:	d104      	bne.n	800b1f0 <_ZN13Communication19ToggleReadSecondEmgEb+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b1e6:	2102      	movs	r1, #2
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	f003 fe2a 	bl	800ee42 <ErrorResult>
		return;
 800b1ee:	e019      	b.n	800b224 <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
	}
	if(isStart){
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00c      	beq.n	800b210 <_ZN13Communication19ToggleReadSecondEmgEb+0x40>
		if(ThreadStorage.ReadSecondEmgThreadId!=NULL) return;
 800b1f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b230 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800b1f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d111      	bne.n	800b222 <_ZN13Communication19ToggleReadSecondEmgEb+0x52>
		ThreadStorage.ReadSecondEmgThreadId = osThreadNew(StartReadSecondEmgTask, NULL, &ThreadStorage.FlowThreadAttr);
 800b1fe:	4a0d      	ldr	r2, [pc, #52]	@ (800b234 <_ZN13Communication19ToggleReadSecondEmgEb+0x64>)
 800b200:	2100      	movs	r1, #0
 800b202:	480d      	ldr	r0, [pc, #52]	@ (800b238 <_ZN13Communication19ToggleReadSecondEmgEb+0x68>)
 800b204:	f7fb fb80 	bl	8006908 <osThreadNew>
 800b208:	4603      	mov	r3, r0
 800b20a:	4a09      	ldr	r2, [pc, #36]	@ (800b230 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800b20c:	66d3      	str	r3, [r2, #108]	@ 0x6c
		return;
 800b20e:	e009      	b.n	800b224 <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
	}
	osThreadTerminate(ThreadStorage.ReadSecondEmgThreadId);
 800b210:	4b07      	ldr	r3, [pc, #28]	@ (800b230 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800b212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b214:	4618      	mov	r0, r3
 800b216:	f7fb fc09 	bl	8006a2c <osThreadTerminate>
	ThreadStorage.ReadSecondEmgThreadId=NULL;
 800b21a:	4b05      	ldr	r3, [pc, #20]	@ (800b230 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b220:	e000      	b.n	800b224 <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
		if(ThreadStorage.ReadSecondEmgThreadId!=NULL) return;
 800b222:	bf00      	nop
}
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	2000932c 	.word	0x2000932c
 800b230:	2000913c 	.word	0x2000913c
 800b234:	200091ec 	.word	0x200091ec
 800b238:	0800fb99 	.word	0x0800fb99

0800b23c <_ZN13Communication10TogglePumpEb>:

void Communication::TogglePump(bool isStart){
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
	Statuses.Pump=isStart;
 800b248:	4a14      	ldr	r2, [pc, #80]	@ (800b29c <_ZN13Communication10TogglePumpEb+0x60>)
 800b24a:	78fb      	ldrb	r3, [r7, #3]
 800b24c:	7113      	strb	r3, [r2, #4]
	if(isStart){
 800b24e:	78fb      	ldrb	r3, [r7, #3]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d011      	beq.n	800b278 <_ZN13Communication10TogglePumpEb+0x3c>
		if(ThreadStorage.PumpMaxRunThreadId!=NULL) return;
 800b254:	4b12      	ldr	r3, [pc, #72]	@ (800b2a0 <_ZN13Communication10TogglePumpEb+0x64>)
 800b256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d11b      	bne.n	800b294 <_ZN13Communication10TogglePumpEb+0x58>
		HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_SET);
 800b25c:	2201      	movs	r2, #1
 800b25e:	2101      	movs	r1, #1
 800b260:	4810      	ldr	r0, [pc, #64]	@ (800b2a4 <_ZN13Communication10TogglePumpEb+0x68>)
 800b262:	f7f7 fef5 	bl	8003050 <HAL_GPIO_WritePin>
		ThreadStorage.PumpMaxRunThreadId = osThreadNew(StartAutoClosePumpTask, NULL, &ThreadStorage.PumpMaxRunThreadAttr);
 800b266:	4a10      	ldr	r2, [pc, #64]	@ (800b2a8 <_ZN13Communication10TogglePumpEb+0x6c>)
 800b268:	2100      	movs	r1, #0
 800b26a:	4810      	ldr	r0, [pc, #64]	@ (800b2ac <_ZN13Communication10TogglePumpEb+0x70>)
 800b26c:	f7fb fb4c 	bl	8006908 <osThreadNew>
 800b270:	4603      	mov	r3, r0
 800b272:	4a0b      	ldr	r2, [pc, #44]	@ (800b2a0 <_ZN13Communication10TogglePumpEb+0x64>)
 800b274:	6713      	str	r3, [r2, #112]	@ 0x70
		return;
 800b276:	e00e      	b.n	800b296 <_ZN13Communication10TogglePumpEb+0x5a>
	}
	HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_RESET);
 800b278:	2200      	movs	r2, #0
 800b27a:	2101      	movs	r1, #1
 800b27c:	4809      	ldr	r0, [pc, #36]	@ (800b2a4 <_ZN13Communication10TogglePumpEb+0x68>)
 800b27e:	f7f7 fee7 	bl	8003050 <HAL_GPIO_WritePin>
	osThreadTerminate(ThreadStorage.PumpMaxRunThreadId);
 800b282:	4b07      	ldr	r3, [pc, #28]	@ (800b2a0 <_ZN13Communication10TogglePumpEb+0x64>)
 800b284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b286:	4618      	mov	r0, r3
 800b288:	f7fb fbd0 	bl	8006a2c <osThreadTerminate>
	ThreadStorage.PumpMaxRunThreadId=NULL;
 800b28c:	4b04      	ldr	r3, [pc, #16]	@ (800b2a0 <_ZN13Communication10TogglePumpEb+0x64>)
 800b28e:	2200      	movs	r2, #0
 800b290:	671a      	str	r2, [r3, #112]	@ 0x70
 800b292:	e000      	b.n	800b296 <_ZN13Communication10TogglePumpEb+0x5a>
		if(ThreadStorage.PumpMaxRunThreadId!=NULL) return;
 800b294:	bf00      	nop

}
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	20009324 	.word	0x20009324
 800b2a0:	2000913c 	.word	0x2000913c
 800b2a4:	40020400 	.word	0x40020400
 800b2a8:	20009210 	.word	0x20009210
 800b2ac:	0800ff7d 	.word	0x0800ff7d

0800b2b0 <_ZN13Communication11ToggleValveEb>:

void Communication::ToggleValve(bool isStart){
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	70fb      	strb	r3, [r7, #3]
	Statuses.Valve=isStart;
 800b2bc:	4a14      	ldr	r2, [pc, #80]	@ (800b310 <_ZN13Communication11ToggleValveEb+0x60>)
 800b2be:	78fb      	ldrb	r3, [r7, #3]
 800b2c0:	7153      	strb	r3, [r2, #5]
	if(isStart){
 800b2c2:	78fb      	ldrb	r3, [r7, #3]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d011      	beq.n	800b2ec <_ZN13Communication11ToggleValveEb+0x3c>
		if(ThreadStorage.ValveMaxRunThreadId!=NULL) return;
 800b2c8:	4b12      	ldr	r3, [pc, #72]	@ (800b314 <_ZN13Communication11ToggleValveEb+0x64>)
 800b2ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d11b      	bne.n	800b308 <_ZN13Communication11ToggleValveEb+0x58>
		HAL_GPIO_WritePin(VALVE_GPIO_Port, VALVE_Pin, GPIO_PIN_SET);
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	2102      	movs	r1, #2
 800b2d4:	4810      	ldr	r0, [pc, #64]	@ (800b318 <_ZN13Communication11ToggleValveEb+0x68>)
 800b2d6:	f7f7 febb 	bl	8003050 <HAL_GPIO_WritePin>
		ThreadStorage.ValveMaxRunThreadId = osThreadNew(StartAutoCloseValveTask, NULL, &ThreadStorage.ValveMaxRunThreadAttr);
 800b2da:	4a10      	ldr	r2, [pc, #64]	@ (800b31c <_ZN13Communication11ToggleValveEb+0x6c>)
 800b2dc:	2100      	movs	r1, #0
 800b2de:	4810      	ldr	r0, [pc, #64]	@ (800b320 <_ZN13Communication11ToggleValveEb+0x70>)
 800b2e0:	f7fb fb12 	bl	8006908 <osThreadNew>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	4a0b      	ldr	r2, [pc, #44]	@ (800b314 <_ZN13Communication11ToggleValveEb+0x64>)
 800b2e8:	6753      	str	r3, [r2, #116]	@ 0x74
		return;
 800b2ea:	e00e      	b.n	800b30a <_ZN13Communication11ToggleValveEb+0x5a>
	}
	HAL_GPIO_WritePin(VALVE_GPIO_Port, VALVE_Pin, GPIO_PIN_RESET);
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2102      	movs	r1, #2
 800b2f0:	4809      	ldr	r0, [pc, #36]	@ (800b318 <_ZN13Communication11ToggleValveEb+0x68>)
 800b2f2:	f7f7 fead 	bl	8003050 <HAL_GPIO_WritePin>
	osThreadTerminate(ThreadStorage.ValveMaxRunThreadId);
 800b2f6:	4b07      	ldr	r3, [pc, #28]	@ (800b314 <_ZN13Communication11ToggleValveEb+0x64>)
 800b2f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fb fb96 	bl	8006a2c <osThreadTerminate>
	ThreadStorage.ValveMaxRunThreadId=NULL;
 800b300:	4b04      	ldr	r3, [pc, #16]	@ (800b314 <_ZN13Communication11ToggleValveEb+0x64>)
 800b302:	2200      	movs	r2, #0
 800b304:	675a      	str	r2, [r3, #116]	@ 0x74
 800b306:	e000      	b.n	800b30a <_ZN13Communication11ToggleValveEb+0x5a>
		if(ThreadStorage.ValveMaxRunThreadId!=NULL) return;
 800b308:	bf00      	nop
}
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	20009324 	.word	0x20009324
 800b314:	2000913c 	.word	0x2000913c
 800b318:	40020400 	.word	0x40020400
 800b31c:	20009234 	.word	0x20009234
 800b320:	0800ffb1 	.word	0x0800ffb1

0800b324 <_ZN13Communication16ToggleDataStreamEb>:
void Communication::ToggleDataStream(bool isStart){
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode && SystemConfig.systemMode!=SystemModes::TestMode){
 800b330:	4b18      	ldr	r3, [pc, #96]	@ (800b394 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b332:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00e      	beq.n	800b358 <_ZN13Communication16ToggleDataStreamEb+0x34>
 800b33a:	4b16      	ldr	r3, [pc, #88]	@ (800b394 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b33c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b340:	2b01      	cmp	r3, #1
 800b342:	d009      	beq.n	800b358 <_ZN13Communication16ToggleDataStreamEb+0x34>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b344:	2102      	movs	r1, #2
 800b346:	2000      	movs	r0, #0
 800b348:	f003 fd7b 	bl	800ee42 <ErrorResult>
		SendFeedback(RequestType::R_Command,CommandRequestType::CMDR_DataStream, ProcessStatuses::PS_End);
 800b34c:	2202      	movs	r2, #2
 800b34e:	2108      	movs	r1, #8
 800b350:	2002      	movs	r0, #2
 800b352:	f003 fcd1 	bl	800ecf8 <SendFeedback>
		return;
 800b356:	e01a      	b.n	800b38e <_ZN13Communication16ToggleDataStreamEb+0x6a>
	}
	SystemConfig.IsStartTest=isStart;
 800b358:	4a0e      	ldr	r2, [pc, #56]	@ (800b394 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b35a:	78fb      	ldrb	r3, [r7, #3]
 800b35c:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
	if(isStart&&!pauseFlg){
 800b360:	78fb      	ldrb	r3, [r7, #3]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00f      	beq.n	800b386 <_ZN13Communication16ToggleDataStreamEb+0x62>
 800b366:	4b0c      	ldr	r3, [pc, #48]	@ (800b398 <_ZN13Communication16ToggleDataStreamEb+0x74>)
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	f083 0301 	eor.w	r3, r3, #1
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	d008      	beq.n	800b386 <_ZN13Communication16ToggleDataStreamEb+0x62>
		SystemConfig.StartTestTime=StartTimerTicks;
 800b374:	4b09      	ldr	r3, [pc, #36]	@ (800b39c <_ZN13Communication16ToggleDataStreamEb+0x78>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a06      	ldr	r2, [pc, #24]	@ (800b394 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b37a:	6313      	str	r3, [r2, #48]	@ 0x30
		SystemConfig.systemMode=SystemModes::TestMode;
 800b37c:	4b05      	ldr	r3, [pc, #20]	@ (800b394 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
		return;
 800b384:	e003      	b.n	800b38e <_ZN13Communication16ToggleDataStreamEb+0x6a>
	}
	SystemConfig.systemMode=SystemModes::EmptyMode;
 800b386:	4b03      	ldr	r3, [pc, #12]	@ (800b394 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
}
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	2000932c 	.word	0x2000932c
 800b398:	20004ee0 	.word	0x20004ee0
 800b39c:	200000cc 	.word	0x200000cc

0800b3a0 <_ZN13Communication9StartTestEbbbth>:
void Communication::StartTest(bool isStartFirstEmg,bool isStartSecondEmg,bool isStartLoadcell,uint16_t cleanTime,uint8_t startHandleSeconds){
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	4608      	mov	r0, r1
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	70fb      	strb	r3, [r7, #3]
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	70bb      	strb	r3, [r7, #2]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	707b      	strb	r3, [r7, #1]

	SystemConfig.CleanTime=cleanTime;
 800b3ba:	4a15      	ldr	r2, [pc, #84]	@ (800b410 <_ZN13Communication9StartTestEbbbth+0x70>)
 800b3bc:	8a3b      	ldrh	r3, [r7, #16]
 800b3be:	8593      	strh	r3, [r2, #44]	@ 0x2c
	StartCleanTask(NULL);
 800b3c0:	2000      	movs	r0, #0
 800b3c2:	f005 f893 	bl	80104ec <StartCleanTask>
	FixVolume();
 800b3c6:	f005 fa59 	bl	801087c <FixVolume>
	ToggleFirstEmg(isStartFirstEmg);
 800b3ca:	78fb      	ldrb	r3, [r7, #3]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7ff fd9e 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
	ToggleSecondEmg(isStartSecondEmg);
 800b3d4:	78bb      	ldrb	r3, [r7, #2]
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f7ff fdc7 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
	ToggleLoadCell(isStartLoadcell);
 800b3de:	787b      	ldrb	r3, [r7, #1]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fdf0 	bl	800afc8 <_ZN13Communication14ToggleLoadCellEb>
	SystemConfig.StartHandleSeconds=startHandleSeconds;
 800b3e8:	4a09      	ldr	r2, [pc, #36]	@ (800b410 <_ZN13Communication9StartTestEbbbth+0x70>)
 800b3ea:	7d3b      	ldrb	r3, [r7, #20]
 800b3ec:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
	ToggleDataStream(true);
 800b3f0:	2101      	movs	r1, #1
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7ff ff96 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
	SystemConfig.PocketIndex=0;
 800b3f8:	4b05      	ldr	r3, [pc, #20]	@ (800b410 <_ZN13Communication9StartTestEbbbth+0x70>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	66da      	str	r2, [r3, #108]	@ 0x6c
	SystemConfig.systemMode=SystemModes::TestMode;
 800b3fe:	4b04      	ldr	r3, [pc, #16]	@ (800b410 <_ZN13Communication9StartTestEbbbth+0x70>)
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
}
 800b406:	bf00      	nop
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	2000932c 	.word	0x2000932c

0800b414 <_ZN13Communication8StopTestEt>:
void Communication::StopTest(uint16_t cleanTime){
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	460b      	mov	r3, r1
 800b41e:	807b      	strh	r3, [r7, #2]
	SystemConfig.CleanTime=cleanTime;
 800b420:	4a16      	ldr	r2, [pc, #88]	@ (800b47c <_ZN13Communication8StopTestEt+0x68>)
 800b422:	887b      	ldrh	r3, [r7, #2]
 800b424:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ToggleDataStream(false);
 800b426:	2100      	movs	r1, #0
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f7ff ff7b 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_StopTest, ProcessStatuses::PS_Processing);
 800b42e:	2201      	movs	r2, #1
 800b430:	21fd      	movs	r1, #253	@ 0xfd
 800b432:	2002      	movs	r0, #2
 800b434:	f003 fc60 	bl	800ecf8 <SendFeedback>
	ToggleFirstEmg(false);
 800b438:	2100      	movs	r1, #0
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff fd68 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
	ToggleSecondEmg(false);
 800b440:	2100      	movs	r1, #0
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7ff fd92 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
	ToggleLoadCell(false);
 800b448:	2100      	movs	r1, #0
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7ff fdbc 	bl	800afc8 <_ZN13Communication14ToggleLoadCellEb>
	StartCleanTask(NULL);
 800b450:	2000      	movs	r0, #0
 800b452:	f005 f84b 	bl	80104ec <StartCleanTask>
	SystemConfig.PocketIndex=0;
 800b456:	4b09      	ldr	r3, [pc, #36]	@ (800b47c <_ZN13Communication8StopTestEt+0x68>)
 800b458:	2200      	movs	r2, #0
 800b45a:	66da      	str	r2, [r3, #108]	@ 0x6c
	SystemConfig.systemMode=SystemModes::EmptyMode;
 800b45c:	4b07      	ldr	r3, [pc, #28]	@ (800b47c <_ZN13Communication8StopTestEt+0x68>)
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_StopTest, ProcessStatuses::PS_End);
 800b464:	2202      	movs	r2, #2
 800b466:	21fd      	movs	r1, #253	@ 0xfd
 800b468:	2002      	movs	r0, #2
 800b46a:	f003 fc45 	bl	800ecf8 <SendFeedback>
    HAL_NVIC_SystemReset();
 800b46e:	f7f6 fd68 	bl	8001f42 <HAL_NVIC_SystemReset>
}
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	2000932c 	.word	0x2000932c

0800b480 <_ZN13Communication10resumeTestEv>:

//**************************************** Resume/Pause FNs *******************************************//
void Communication::resumeTest(void){
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
	if(isOpenFirstEmg) ToggleFirstEmg(true);
 800b488:	4b0e      	ldr	r3, [pc, #56]	@ (800b4c4 <_ZN13Communication10resumeTestEv+0x44>)
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d003      	beq.n	800b498 <_ZN13Communication10resumeTestEv+0x18>
 800b490:	2101      	movs	r1, #1
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff fd3c 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
	if(isOpenSecondEmg) ToggleSecondEmg(true);
 800b498:	4b0b      	ldr	r3, [pc, #44]	@ (800b4c8 <_ZN13Communication10resumeTestEv+0x48>)
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d003      	beq.n	800b4a8 <_ZN13Communication10resumeTestEv+0x28>
 800b4a0:	2101      	movs	r1, #1
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff fd62 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
	//ToggleLoadCell(true);  // //250721
	ToggleDataStream(true);
 800b4a8:	2101      	movs	r1, #1
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7ff ff3a 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_ResumeTest, ProcessStatuses::PS_End);
 800b4b0:	2202      	movs	r2, #2
 800b4b2:	210f      	movs	r1, #15
 800b4b4:	2002      	movs	r0, #2
 800b4b6:	f003 fc1f 	bl	800ecf8 <SendFeedback>
}
 800b4ba:	bf00      	nop
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20004ee2 	.word	0x20004ee2
 800b4c8:	20004ee3 	.word	0x20004ee3

0800b4cc <_ZN13Communication9pauseTestEv>:
void Communication::pauseTest(void){
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
	pauseFlg = true;
 800b4d4:	4b11      	ldr	r3, [pc, #68]	@ (800b51c <_ZN13Communication9pauseTestEv+0x50>)
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	701a      	strb	r2, [r3, #0]

	if(isOpenFirstEmg) ToggleFirstEmg(false);
 800b4da:	4b11      	ldr	r3, [pc, #68]	@ (800b520 <_ZN13Communication9pauseTestEv+0x54>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <_ZN13Communication9pauseTestEv+0x1e>
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f7ff fd13 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
	if(isOpenSecondEmg) ToggleSecondEmg(false);
 800b4ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b524 <_ZN13Communication9pauseTestEv+0x58>)
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d003      	beq.n	800b4fa <_ZN13Communication9pauseTestEv+0x2e>
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff fd39 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
	//ToggleLoadCell(false); // //250721
	ToggleDataStream(false);
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7ff ff11 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_PauseTest, ProcessStatuses::PS_End);
 800b502:	2202      	movs	r2, #2
 800b504:	210e      	movs	r1, #14
 800b506:	2002      	movs	r0, #2
 800b508:	f003 fbf6 	bl	800ecf8 <SendFeedback>
	vTaskDelay(100);
 800b50c:	2064      	movs	r0, #100	@ 0x64
 800b50e:	f7fc ff87 	bl	8008420 <vTaskDelay>
}
 800b512:	bf00      	nop
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	20004ee0 	.word	0x20004ee0
 800b520:	20004ee2 	.word	0x20004ee2
 800b524:	20004ee3 	.word	0x20004ee3

0800b528 <_ZN13Communication10cancelTestEv>:
void Communication::cancelTest(void){
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
	pauseFlg = false;
 800b530:	4b17      	ldr	r3, [pc, #92]	@ (800b590 <_ZN13Communication10cancelTestEv+0x68>)
 800b532:	2200      	movs	r2, #0
 800b534:	701a      	strb	r2, [r3, #0]
	SystemConfig.CleanTime=0;//cleanTime;
 800b536:	4b17      	ldr	r3, [pc, #92]	@ (800b594 <_ZN13Communication10cancelTestEv+0x6c>)
 800b538:	2200      	movs	r2, #0
 800b53a:	859a      	strh	r2, [r3, #44]	@ 0x2c
	ToggleDataStream(false);
 800b53c:	2100      	movs	r1, #0
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff fef0 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_CancelTest, ProcessStatuses::PS_Processing);
 800b544:	2201      	movs	r2, #1
 800b546:	210d      	movs	r1, #13
 800b548:	2002      	movs	r0, #2
 800b54a:	f003 fbd5 	bl	800ecf8 <SendFeedback>
	ToggleFirstEmg(false);
 800b54e:	2100      	movs	r1, #0
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f7ff fcdd 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
	ToggleSecondEmg(false);
 800b556:	2100      	movs	r1, #0
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7ff fd07 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
	ToggleLoadCell(false);
 800b55e:	2100      	movs	r1, #0
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f7ff fd31 	bl	800afc8 <_ZN13Communication14ToggleLoadCellEb>
	//StartCleanTask(NULL);
	//StartPreManualTask(NULL);
	SystemConfig.PocketIndex=0;
 800b566:	4b0b      	ldr	r3, [pc, #44]	@ (800b594 <_ZN13Communication10cancelTestEv+0x6c>)
 800b568:	2200      	movs	r2, #0
 800b56a:	66da      	str	r2, [r3, #108]	@ 0x6c
	SystemConfig.systemMode=SystemModes::EmptyMode;
 800b56c:	4b09      	ldr	r3, [pc, #36]	@ (800b594 <_ZN13Communication10cancelTestEv+0x6c>)
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_CancelTest, ProcessStatuses::PS_End);
 800b574:	2202      	movs	r2, #2
 800b576:	210d      	movs	r1, #13
 800b578:	2002      	movs	r0, #2
 800b57a:	f003 fbbd 	bl	800ecf8 <SendFeedback>
	vTaskDelay(100);
 800b57e:	2064      	movs	r0, #100	@ 0x64
 800b580:	f7fc ff4e 	bl	8008420 <vTaskDelay>
    HAL_NVIC_SystemReset();
 800b584:	f7f6 fcdd 	bl	8001f42 <HAL_NVIC_SystemReset>
}
 800b588:	bf00      	nop
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20004ee0 	.word	0x20004ee0
 800b594:	2000932c 	.word	0x2000932c

0800b598 <_ZN13Communication10ManualPrepEt>:
//*********************************  Manual Mode Functions **********************************//
void Communication::ManualPrep(uint16_t cleanTime){
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	807b      	strh	r3, [r7, #2]
	SystemConfig.CleanTime=cleanTime;
 800b5a4:	4a0b      	ldr	r2, [pc, #44]	@ (800b5d4 <_ZN13Communication10ManualPrepEt+0x3c>)
 800b5a6:	887b      	ldrh	r3, [r7, #2]
 800b5a8:	8593      	strh	r3, [r2, #44]	@ 0x2c
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_StartManPrep, ProcessStatuses::PS_Processing);
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	211a      	movs	r1, #26
 800b5ae:	2002      	movs	r0, #2
 800b5b0:	f003 fba2 	bl	800ecf8 <SendFeedback>
	StartCleanTask(NULL);
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	f004 ff99 	bl	80104ec <StartCleanTask>
	CleanDone = true;
 800b5ba:	4b07      	ldr	r3, [pc, #28]	@ (800b5d8 <_ZN13Communication10ManualPrepEt+0x40>)
 800b5bc:	2201      	movs	r2, #1
 800b5be:	701a      	strb	r2, [r3, #0]
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_StartManPrep, ProcessStatuses::PS_End);
 800b5c0:	2202      	movs	r2, #2
 800b5c2:	211a      	movs	r1, #26
 800b5c4:	2002      	movs	r0, #2
 800b5c6:	f003 fb97 	bl	800ecf8 <SendFeedback>
}
 800b5ca:	bf00      	nop
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	2000932c 	.word	0x2000932c
 800b5d8:	20004ee1 	.word	0x20004ee1

0800b5dc <_ZN13Communication12StartManTestEbbbth>:
void Communication::StartManTest(bool isStartFirstEmg,bool isStartSecondEmg,bool isStartLoadcell,uint16_t cleanTime,uint8_t startHandleSeconds){
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	4611      	mov	r1, r2
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	70fb      	strb	r3, [r7, #3]
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	70bb      	strb	r3, [r7, #2]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	707b      	strb	r3, [r7, #1]
	SystemConfig.CleanTime=cleanTime;
 800b5f6:	4a17      	ldr	r2, [pc, #92]	@ (800b654 <_ZN13Communication12StartManTestEbbbth+0x78>)
 800b5f8:	8a3b      	ldrh	r3, [r7, #16]
 800b5fa:	8593      	strh	r3, [r2, #44]	@ 0x2c
	CleanDone = false;
 800b5fc:	4b16      	ldr	r3, [pc, #88]	@ (800b658 <_ZN13Communication12StartManTestEbbbth+0x7c>)
 800b5fe:	2200      	movs	r2, #0
 800b600:	701a      	strb	r2, [r3, #0]
	//StartCleanTask(NULL);
	FixVolume();
 800b602:	f005 f93b 	bl	801087c <FixVolume>
	ToggleFirstEmg(isStartFirstEmg);
 800b606:	78fb      	ldrb	r3, [r7, #3]
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff fc80 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
	ToggleSecondEmg(isStartSecondEmg);
 800b610:	78bb      	ldrb	r3, [r7, #2]
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff fca9 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
	ToggleLoadCell(isStartLoadcell);
 800b61a:	787b      	ldrb	r3, [r7, #1]
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7ff fcd2 	bl	800afc8 <_ZN13Communication14ToggleLoadCellEb>
	SystemConfig.StartHandleSeconds=startHandleSeconds;
 800b624:	4a0b      	ldr	r2, [pc, #44]	@ (800b654 <_ZN13Communication12StartManTestEbbbth+0x78>)
 800b626:	7d3b      	ldrb	r3, [r7, #20]
 800b628:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
	ToggleDataStream(true);
 800b62c:	2101      	movs	r1, #1
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7ff fe78 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
	SystemConfig.PocketIndex=0;
 800b634:	4b07      	ldr	r3, [pc, #28]	@ (800b654 <_ZN13Communication12StartManTestEbbbth+0x78>)
 800b636:	2200      	movs	r2, #0
 800b638:	66da      	str	r2, [r3, #108]	@ 0x6c
	SystemConfig.systemMode=SystemModes::TestMode;
 800b63a:	4b06      	ldr	r3, [pc, #24]	@ (800b654 <_ZN13Communication12StartManTestEbbbth+0x78>)
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_StartManTest, ProcessStatuses::PS_End);
 800b642:	2202      	movs	r2, #2
 800b644:	211b      	movs	r1, #27
 800b646:	2002      	movs	r0, #2
 800b648:	f003 fb56 	bl	800ecf8 <SendFeedback>
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	2000932c 	.word	0x2000932c
 800b658:	20004ee1 	.word	0x20004ee1

0800b65c <_ZN13Communication10StartCleanEt>:
//******************************************************************************************//
void Communication::StartClean(uint16_t cleanTime){
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	460b      	mov	r3, r1
 800b666:	807b      	strh	r3, [r7, #2]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800b668:	4b13      	ldr	r3, [pc, #76]	@ (800b6b8 <_ZN13Communication10StartCleanEt+0x5c>)
 800b66a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d009      	beq.n	800b686 <_ZN13Communication10StartCleanEt+0x2a>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b672:	2102      	movs	r1, #2
 800b674:	2000      	movs	r0, #0
 800b676:	f003 fbe4 	bl	800ee42 <ErrorResult>
		 SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_Clean, ProcessStatuses::PS_End);
 800b67a:	2202      	movs	r2, #2
 800b67c:	2106      	movs	r1, #6
 800b67e:	2002      	movs	r0, #2
 800b680:	f003 fb3a 	bl	800ecf8 <SendFeedback>
		return;
 800b684:	e015      	b.n	800b6b2 <_ZN13Communication10StartCleanEt+0x56>
	}
	SystemConfig.systemMode=SystemModes::CleanMode;
 800b686:	4b0c      	ldr	r3, [pc, #48]	@ (800b6b8 <_ZN13Communication10StartCleanEt+0x5c>)
 800b688:	2203      	movs	r2, #3
 800b68a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	if(ThreadStorage.CleanThreadId==NULL){
 800b68e:	4b0b      	ldr	r3, [pc, #44]	@ (800b6bc <_ZN13Communication10StartCleanEt+0x60>)
 800b690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10c      	bne.n	800b6b2 <_ZN13Communication10StartCleanEt+0x56>
		SystemConfig.CleanTime=cleanTime;
 800b698:	4a07      	ldr	r2, [pc, #28]	@ (800b6b8 <_ZN13Communication10StartCleanEt+0x5c>)
 800b69a:	887b      	ldrh	r3, [r7, #2]
 800b69c:	8593      	strh	r3, [r2, #44]	@ 0x2c
		ThreadStorage.CleanThreadId = osThreadNew(StartCleanTask, NULL, &ThreadStorage.CleanThreadAttr);
 800b69e:	4a08      	ldr	r2, [pc, #32]	@ (800b6c0 <_ZN13Communication10StartCleanEt+0x64>)
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	4808      	ldr	r0, [pc, #32]	@ (800b6c4 <_ZN13Communication10StartCleanEt+0x68>)
 800b6a4:	f7fb f930 	bl	8006908 <osThreadNew>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	4a04      	ldr	r2, [pc, #16]	@ (800b6bc <_ZN13Communication10StartCleanEt+0x60>)
 800b6ac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
		return;
 800b6b0:	bf00      	nop
	}
}
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	2000932c 	.word	0x2000932c
 800b6bc:	2000913c 	.word	0x2000913c
 800b6c0:	200092c4 	.word	0x200092c4
 800b6c4:	080104ed 	.word	0x080104ed

0800b6c8 <_ZN13Communication14ToggleSafeModeEb>:

void Communication::ToggleSafeMode(bool isStart){
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	70fb      	strb	r3, [r7, #3]

	Statuses.SafeMode=isStart;
 800b6d4:	4a23      	ldr	r2, [pc, #140]	@ (800b764 <_ZN13Communication14ToggleSafeModeEb+0x9c>)
 800b6d6:	78fb      	ldrb	r3, [r7, #3]
 800b6d8:	7193      	strb	r3, [r2, #6]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode && SystemConfig.systemMode!=SystemModes::SafeMode){
 800b6da:	4b23      	ldr	r3, [pc, #140]	@ (800b768 <_ZN13Communication14ToggleSafeModeEb+0xa0>)
 800b6dc:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00e      	beq.n	800b702 <_ZN13Communication14ToggleSafeModeEb+0x3a>
 800b6e4:	4b20      	ldr	r3, [pc, #128]	@ (800b768 <_ZN13Communication14ToggleSafeModeEb+0xa0>)
 800b6e6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b6ea:	2b04      	cmp	r3, #4
 800b6ec:	d009      	beq.n	800b702 <_ZN13Communication14ToggleSafeModeEb+0x3a>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b6ee:	2102      	movs	r1, #2
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	f003 fba6 	bl	800ee42 <ErrorResult>
		SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_Safe, ProcessStatuses::PS_End);
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	2107      	movs	r1, #7
 800b6fa:	2002      	movs	r0, #2
 800b6fc:	f003 fafc 	bl	800ecf8 <SendFeedback>
		return;
 800b700:	e02d      	b.n	800b75e <_ZN13Communication14ToggleSafeModeEb+0x96>
	}
	if(isStart){
 800b702:	78fb      	ldrb	r3, [r7, #3]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d012      	beq.n	800b72e <_ZN13Communication14ToggleSafeModeEb+0x66>
		if(ThreadStorage.SafeModeThreadId!=NULL)return;
 800b708:	4b18      	ldr	r3, [pc, #96]	@ (800b76c <_ZN13Communication14ToggleSafeModeEb+0xa4>)
 800b70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d124      	bne.n	800b75c <_ZN13Communication14ToggleSafeModeEb+0x94>
		SystemConfig.systemMode=SystemModes::SafeMode;
 800b712:	4b15      	ldr	r3, [pc, #84]	@ (800b768 <_ZN13Communication14ToggleSafeModeEb+0xa0>)
 800b714:	2204      	movs	r2, #4
 800b716:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
		ThreadStorage.SafeModeThreadId = osThreadNew(StartSafeModeTask, NULL, &ThreadStorage.SafeModeThreadAttr);
 800b71a:	4a15      	ldr	r2, [pc, #84]	@ (800b770 <_ZN13Communication14ToggleSafeModeEb+0xa8>)
 800b71c:	2100      	movs	r1, #0
 800b71e:	4815      	ldr	r0, [pc, #84]	@ (800b774 <_ZN13Communication14ToggleSafeModeEb+0xac>)
 800b720:	f7fb f8f2 	bl	8006908 <osThreadNew>
 800b724:	4603      	mov	r3, r0
 800b726:	4a11      	ldr	r2, [pc, #68]	@ (800b76c <_ZN13Communication14ToggleSafeModeEb+0xa4>)
 800b728:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
		return;
 800b72c:	e017      	b.n	800b75e <_ZN13Communication14ToggleSafeModeEb+0x96>
	}
	SystemConfig.systemMode=SystemModes::EmptyMode;
 800b72e:	4b0e      	ldr	r3, [pc, #56]	@ (800b768 <_ZN13Communication14ToggleSafeModeEb+0xa0>)
 800b730:	2200      	movs	r2, #0
 800b732:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	osThreadTerminate(ThreadStorage.SafeModeThreadId);
 800b736:	4b0d      	ldr	r3, [pc, #52]	@ (800b76c <_ZN13Communication14ToggleSafeModeEb+0xa4>)
 800b738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fb f975 	bl	8006a2c <osThreadTerminate>
	TogglePump(false);
 800b742:	2100      	movs	r1, #0
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7ff fd79 	bl	800b23c <_ZN13Communication10TogglePumpEb>
	ToggleValve(false);
 800b74a:	2100      	movs	r1, #0
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff fdaf 	bl	800b2b0 <_ZN13Communication11ToggleValveEb>
	ThreadStorage.SafeModeThreadId=NULL;
 800b752:	4b06      	ldr	r3, [pc, #24]	@ (800b76c <_ZN13Communication14ToggleSafeModeEb+0xa4>)
 800b754:	2200      	movs	r2, #0
 800b756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800b75a:	e000      	b.n	800b75e <_ZN13Communication14ToggleSafeModeEb+0x96>
		if(ThreadStorage.SafeModeThreadId!=NULL)return;
 800b75c:	bf00      	nop
}
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	20009324 	.word	0x20009324
 800b768:	2000932c 	.word	0x2000932c
 800b76c:	2000913c 	.word	0x2000913c
 800b770:	200092e8 	.word	0x200092e8
 800b774:	08010775 	.word	0x08010775

0800b778 <_ZN13Communication15LoadcellAverageEv>:

void Communication::LoadcellAverage(){
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800b780:	4b0e      	ldr	r3, [pc, #56]	@ (800b7bc <_ZN13Communication15LoadcellAverageEv+0x44>)
 800b782:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b786:	2b00      	cmp	r3, #0
 800b788:	d009      	beq.n	800b79e <_ZN13Communication15LoadcellAverageEv+0x26>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b78a:	2102      	movs	r1, #2
 800b78c:	2000      	movs	r0, #0
 800b78e:	f003 fb58 	bl	800ee42 <ErrorResult>
		SendFeedback(RequestType::R_System, SystemRequestType::SYSR_MeasurementAverage, ProcessStatuses::PS_End);
 800b792:	2202      	movs	r2, #2
 800b794:	2104      	movs	r1, #4
 800b796:	2001      	movs	r0, #1
 800b798:	f003 faae 	bl	800ecf8 <SendFeedback>
		return;
 800b79c:	e00b      	b.n	800b7b6 <_ZN13Communication15LoadcellAverageEv+0x3e>
	}
	SystemConfig.systemMode=SystemModes::CalibrationMode;
 800b79e:	4b07      	ldr	r3, [pc, #28]	@ (800b7bc <_ZN13Communication15LoadcellAverageEv+0x44>)
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	ThreadStorage.LoadcellAverageThreadId = osThreadNew(StartLoadcellAverageTask, NULL, &ThreadStorage.LoadcellAverageThreadAttr);
 800b7a6:	4a06      	ldr	r2, [pc, #24]	@ (800b7c0 <_ZN13Communication15LoadcellAverageEv+0x48>)
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	4806      	ldr	r0, [pc, #24]	@ (800b7c4 <_ZN13Communication15LoadcellAverageEv+0x4c>)
 800b7ac:	f7fb f8ac 	bl	8006908 <osThreadNew>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	4a05      	ldr	r2, [pc, #20]	@ (800b7c8 <_ZN13Communication15LoadcellAverageEv+0x50>)
 800b7b4:	6793      	str	r3, [r2, #120]	@ 0x78
}
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	2000932c 	.word	0x2000932c
 800b7c0:	20009258 	.word	0x20009258
 800b7c4:	0800fff9 	.word	0x0800fff9
 800b7c8:	2000913c 	.word	0x2000913c

0800b7cc <_ZN13Communication25LoadcellVolumeCalibrationEt>:

void Communication::LoadcellVolumeCalibration(uint16_t weight){
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	807b      	strh	r3, [r7, #2]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800b7d8:	4b14      	ldr	r3, [pc, #80]	@ (800b82c <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800b7da:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d009      	beq.n	800b7f6 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x2a>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b7e2:	2102      	movs	r1, #2
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	f003 fb2c 	bl	800ee42 <ErrorResult>
		SendFeedback(RequestType::R_System, SystemRequestType::SYSR_CalibrationVolume, ProcessStatuses::PS_End);
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	2105      	movs	r1, #5
 800b7ee:	2001      	movs	r0, #1
 800b7f0:	f003 fa82 	bl	800ecf8 <SendFeedback>
		return;
 800b7f4:	e017      	b.n	800b826 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x5a>
	}
	SystemConfig.systemMode=SystemModes::CalibrationMode;
 800b7f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b82c <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	SystemConfig.VolumeRate=1;
 800b7fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b82c <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800b800:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b804:	61da      	str	r2, [r3, #28]
	SystemConfig.CalibrationWeight=weight;
 800b806:	887b      	ldrh	r3, [r7, #2]
 800b808:	ee07 3a90 	vmov	s15, r3
 800b80c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b810:	4b06      	ldr	r3, [pc, #24]	@ (800b82c <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800b812:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	ThreadStorage.CalibrationVolumeThreadId = osThreadNew(StartCalibrationVolumeTask, NULL, &ThreadStorage.CalibrationVolumeThreadAttr);
 800b816:	4a06      	ldr	r2, [pc, #24]	@ (800b830 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x64>)
 800b818:	2100      	movs	r1, #0
 800b81a:	4806      	ldr	r0, [pc, #24]	@ (800b834 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x68>)
 800b81c:	f7fb f874 	bl	8006908 <osThreadNew>
 800b820:	4603      	mov	r3, r0
 800b822:	4a05      	ldr	r2, [pc, #20]	@ (800b838 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x6c>)
 800b824:	67d3      	str	r3, [r2, #124]	@ 0x7c
}
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	2000932c 	.word	0x2000932c
 800b830:	2000927c 	.word	0x2000927c
 800b834:	08010195 	.word	0x08010195
 800b838:	2000913c 	.word	0x2000913c

0800b83c <_ZN13Communication23LoadcellFlowCalibrationEt>:

void Communication::LoadcellFlowCalibration(uint16_t flow){
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	807b      	strh	r3, [r7, #2]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800b848:	4b15      	ldr	r3, [pc, #84]	@ (800b8a0 <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800b84a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d009      	beq.n	800b866 <_ZN13Communication23LoadcellFlowCalibrationEt+0x2a>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b852:	2102      	movs	r1, #2
 800b854:	2000      	movs	r0, #0
 800b856:	f003 faf4 	bl	800ee42 <ErrorResult>
		SendFeedback(RequestType::R_System, SystemRequestType::SYSR_CalibrationFlow, ProcessStatuses::PS_End);
 800b85a:	2202      	movs	r2, #2
 800b85c:	2106      	movs	r1, #6
 800b85e:	2001      	movs	r0, #1
 800b860:	f003 fa4a 	bl	800ecf8 <SendFeedback>
		return;
 800b864:	e018      	b.n	800b898 <_ZN13Communication23LoadcellFlowCalibrationEt+0x5c>
	}
	SystemConfig.systemMode=SystemModes::CalibrationMode;
 800b866:	4b0e      	ldr	r3, [pc, #56]	@ (800b8a0 <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800b868:	2202      	movs	r2, #2
 800b86a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	SystemConfig.FlowRate=1;
 800b86e:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a0 <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800b870:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b874:	621a      	str	r2, [r3, #32]
	SystemConfig.CalibrationFlow=flow;
 800b876:	887b      	ldrh	r3, [r7, #2]
 800b878:	ee07 3a90 	vmov	s15, r3
 800b87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b880:	4b07      	ldr	r3, [pc, #28]	@ (800b8a0 <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800b882:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	ThreadStorage.CalibrationFlowThreadId = osThreadNew(StartCalibrationFlowTask, NULL, &ThreadStorage.CalibrationFlowThreadAttr);
 800b886:	4a07      	ldr	r2, [pc, #28]	@ (800b8a4 <_ZN13Communication23LoadcellFlowCalibrationEt+0x68>)
 800b888:	2100      	movs	r1, #0
 800b88a:	4807      	ldr	r0, [pc, #28]	@ (800b8a8 <_ZN13Communication23LoadcellFlowCalibrationEt+0x6c>)
 800b88c:	f7fb f83c 	bl	8006908 <osThreadNew>
 800b890:	4603      	mov	r3, r0
 800b892:	4a06      	ldr	r2, [pc, #24]	@ (800b8ac <_ZN13Communication23LoadcellFlowCalibrationEt+0x70>)
 800b894:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	2000932c 	.word	0x2000932c
 800b8a4:	200092a0 	.word	0x200092a0
 800b8a8:	08010345 	.word	0x08010345
 800b8ac:	2000913c 	.word	0x2000913c

0800b8b0 <_ZN12FlashManageraSERKS_>:
enum FlashStatus {
	Success,
	Error,
	NotBackup
};
class FlashManager {
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	685a      	ldr	r2, [r3, #4]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	605a      	str	r2, [r3, #4]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	689a      	ldr	r2, [r3, #8]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	609a      	str	r2, [r3, #8]
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	7b1a      	ldrb	r2, [r3, #12]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	731a      	strb	r2, [r3, #12]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	7b5a      	ldrb	r2, [r3, #13]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	735a      	strb	r2, [r3, #13]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	7b9a      	ldrb	r2, [r3, #14]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	739a      	strb	r2, [r3, #14]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	7bda      	ldrb	r2, [r3, #15]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	73da      	strb	r2, [r3, #15]
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	7c1a      	ldrb	r2, [r3, #16]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	741a      	strb	r2, [r3, #16]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	7c5a      	ldrb	r2, [r3, #17]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	745a      	strb	r2, [r3, #17]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	7c9a      	ldrb	r2, [r3, #18]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	749a      	strb	r2, [r3, #18]
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	7cda      	ldrb	r2, [r3, #19]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	74da      	strb	r2, [r3, #19]
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	7d1a      	ldrb	r2, [r3, #20]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	751a      	strb	r2, [r3, #20]
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	7d5a      	ldrb	r2, [r3, #21]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	755a      	strb	r2, [r3, #21]
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	7d9a      	ldrb	r2, [r3, #22]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	759a      	strb	r2, [r3, #22]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	7dda      	ldrb	r2, [r3, #23]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	75da      	strb	r2, [r3, #23]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	7e1a      	ldrb	r2, [r3, #24]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	761a      	strb	r2, [r3, #24]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	7e5a      	ldrb	r2, [r3, #25]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	765a      	strb	r2, [r3, #25]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4618      	mov	r0, r3
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <_ZN13Communication15SetFlashManagerE12FlashManager>:

void Communication::SetFlashManager(FlashManager flashManager){
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
	FMI=flashManager;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	3304      	adds	r3, #4
 800b956:	6839      	ldr	r1, [r7, #0]
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff ffa9 	bl	800b8b0 <_ZN12FlashManageraSERKS_>
}
 800b95e:	bf00      	nop
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
	...

0800b968 <_ZN3EmgC1Ev>:
int firstEmgDataLen=0;
int secondEmgDataLen=0;



Emg::Emg() {
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	4a0e      	ldr	r2, [pc, #56]	@ (800b9ac <_ZN3EmgC1Ev+0x44>)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	601a      	str	r2, [r3, #0]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b97c:	461a      	mov	r2, r3
 800b97e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800b982:	6393      	str	r3, [r2, #56]	@ 0x38
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b98a:	461a      	mov	r2, r3
 800b98c:	2300      	movs	r3, #0
 800b98e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b996:	461a      	mov	r2, r3
 800b998:	2300      	movs	r3, #0
 800b99a:	6413      	str	r3, [r2, #64]	@ 0x40
	// TODO Auto-generated constructor stub

}
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	08011cd4 	.word	0x08011cd4

0800b9b0 <_ZN3EmgD1Ev>:

Emg::~Emg() {
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	4a04      	ldr	r2, [pc, #16]	@ (800b9cc <_ZN3EmgD1Ev+0x1c>)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	08011cd4 	.word	0x08011cd4

0800b9d0 <_ZN3EmgD0Ev>:
Emg::~Emg() {
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
}
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff ffe9 	bl	800b9b0 <_ZN3EmgD1Ev>
 800b9de:	f242 0144 	movw	r1, #8260	@ 0x2044
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f005 f876 	bl	8010ad4 <_ZdlPvj>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <_ZN3Emg12FirstEmgReadEb>:
void Emg::FirstEmgRead(bool useBuffer){
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]

	FirstEmgReadFromSPI(DATA_CH0_0);
 800ba00:	2101      	movs	r1, #1
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f988 	bl	800bd18 <_ZN3Emg19FirstEmgReadFromSPIEh>
	ReadFirstEmgValueArray[0] = FirstEmgReadSPIValue[0];
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	7f1b      	ldrb	r3, [r3, #28]
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	605a      	str	r2, [r3, #4]

	FirstEmgReadFromSPI(DATA_CH0_1);
 800ba12:	2103      	movs	r1, #3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f97f 	bl	800bd18 <_ZN3Emg19FirstEmgReadFromSPIEh>
	ReadFirstEmgValueArray[1] = FirstEmgReadSPIValue[0];
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	7f1b      	ldrb	r3, [r3, #28]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	609a      	str	r2, [r3, #8]

	FirstEmgReadFromSPI(DATA_CH0_2);
 800ba24:	2105      	movs	r1, #5
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f976 	bl	800bd18 <_ZN3Emg19FirstEmgReadFromSPIEh>
	ReadFirstEmgValueArray[2] = FirstEmgReadSPIValue[0];
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	7f1b      	ldrb	r3, [r3, #28]
 800ba30:	461a      	mov	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	60da      	str	r2, [r3, #12]

	FirstEmgValue = (ReadFirstEmgValueArray[1] + (ReadFirstEmgValueArray[0] << 8));
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	689a      	ldr	r2, [r3, #8]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	021b      	lsls	r3, r3, #8
 800ba40:	441a      	add	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	625a      	str	r2, [r3, #36]	@ 0x24
	NonFilterFirstEmg=FirstEmgValue;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	621a      	str	r2, [r3, #32]

	uint32_t filteredValue = FirstEmgMovingAverageFilter(FirstEmgValue);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba52:	4619      	mov	r1, r3
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f9c5 	bl	800bde4 <_ZN3Emg27FirstEmgMovingAverageFilterEm>
 800ba5a:	60f8      	str	r0, [r7, #12]
	Debugger.FirstEmg=filteredValue;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	4b1f      	ldr	r3, [pc, #124]	@ (800bae0 <_ZN3Emg12FirstEmgReadEb+0xec>)
 800ba62:	851a      	strh	r2, [r3, #40]	@ 0x28
	FirstEmgValue=filteredValue;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	625a      	str	r2, [r3, #36]	@ 0x24
	if(useBuffer){
 800ba6a:	78fb      	ldrb	r3, [r7, #3]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d033      	beq.n	800bad8 <_ZN3Emg12FirstEmgReadEb+0xe4>
		FirstEmgBufferLen%=1024;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba78:	425a      	negs	r2, r3
 800ba7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba7e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ba82:	bf58      	it	pl
 800ba84:	4253      	negpl	r3, r2
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800ba8c:	6313      	str	r3, [r2, #48]	@ 0x30
	    FirstEmgBuffer[FirstEmgBufferLen]=(filteredValue >> 8) & 0xFF;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	0a19      	lsrs	r1, r3, #8
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba9a:	b2c9      	uxtb	r1, r1
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	320c      	adds	r2, #12
 800baa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    FirstEmgBuffer[FirstEmgBufferLen+1]=(filteredValue) & 0xFF;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800baaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	b2d9      	uxtb	r1, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	320c      	adds	r2, #12
 800bab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    FirstEmgBufferLen+=2;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bac2:	3302      	adds	r3, #2
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800baca:	6313      	str	r3, [r2, #48]	@ 0x30
	    Debugger.FirstEmgBufferLen=FirstEmgBufferLen;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bad4:	4a02      	ldr	r2, [pc, #8]	@ (800bae0 <_ZN3Emg12FirstEmgReadEb+0xec>)
 800bad6:	6093      	str	r3, [r2, #8]
	}
}
 800bad8:	bf00      	nop
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	200093a8 	.word	0x200093a8

0800bae4 <_ZN3Emg13SecondEmgReadEb>:

void Emg::SecondEmgRead(bool useBuffer){
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	70fb      	strb	r3, [r7, #3]
	SecondEmgReadFromSPI(DATA_CH0_0);
 800baf0:	2101      	movs	r1, #1
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f942 	bl	800bd7c <_ZN3Emg20SecondEmgReadFromSPIEh>
	ReadSecondEmgValueArray[0] = SecondEmgReadSPIValue[0];
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	7f5b      	ldrb	r3, [r3, #29]
 800bafc:	461a      	mov	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	611a      	str	r2, [r3, #16]

	SecondEmgReadFromSPI(DATA_CH0_1);
 800bb02:	2103      	movs	r1, #3
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 f939 	bl	800bd7c <_ZN3Emg20SecondEmgReadFromSPIEh>
	ReadSecondEmgValueArray[1] = SecondEmgReadSPIValue[0];
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	7f5b      	ldrb	r3, [r3, #29]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	615a      	str	r2, [r3, #20]

	SecondEmgReadFromSPI(DATA_CH0_2);
 800bb14:	2105      	movs	r1, #5
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f930 	bl	800bd7c <_ZN3Emg20SecondEmgReadFromSPIEh>
	ReadSecondEmgValueArray[2] = SecondEmgReadSPIValue[0];
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	7f5b      	ldrb	r3, [r3, #29]
 800bb20:	461a      	mov	r2, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	619a      	str	r2, [r3, #24]

	SecondEmgValue = (ReadSecondEmgValueArray[1] + (ReadSecondEmgValueArray[0] << 8));
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	695a      	ldr	r2, [r3, #20]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	021b      	lsls	r3, r3, #8
 800bb30:	441a      	add	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	62da      	str	r2, [r3, #44]	@ 0x2c
	NonFilterSecondEmg=SecondEmgValue;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	629a      	str	r2, [r3, #40]	@ 0x28
	uint32_t filteredValue = SecondEmgMovingAverageFilter(SecondEmgValue);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb42:	4619      	mov	r1, r3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f9db 	bl	800bf00 <_ZN3Emg28SecondEmgMovingAverageFilterEm>
 800bb4a:	60f8      	str	r0, [r7, #12]
	Debugger.SecondEmg=filteredValue;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	4b20      	ldr	r3, [pc, #128]	@ (800bbd4 <_ZN3Emg13SecondEmgReadEb+0xf0>)
 800bb52:	855a      	strh	r2, [r3, #42]	@ 0x2a
	SecondEmgValue=filteredValue;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	62da      	str	r2, [r3, #44]	@ 0x2c
	if(useBuffer){
 800bb5a:	78fb      	ldrb	r3, [r7, #3]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d035      	beq.n	800bbcc <_ZN3Emg13SecondEmgReadEb+0xe8>
		SecondEmgBufferLen%=1024;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bb66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb68:	425a      	negs	r2, r3
 800bb6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bb72:	bf58      	it	pl
 800bb74:	4253      	negpl	r3, r2
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800bb7c:	6353      	str	r3, [r2, #52]	@ 0x34
		SecondEmgBuffer[SecondEmgBufferLen]=(filteredValue >> 8) & 0xFF;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	0a19      	lsrs	r1, r3, #8
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bb88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb8a:	b2c9      	uxtb	r1, r1
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 800bb92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    SecondEmgBuffer[SecondEmgBufferLen+1]=(filteredValue) & 0xFF;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bb9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb9e:	1c5a      	adds	r2, r3, #1
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	b2d9      	uxtb	r1, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 800bbaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    SecondEmgBufferLen+=2;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bbb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbb6:	3302      	adds	r3, #2
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800bbbe:	6353      	str	r3, [r2, #52]	@ 0x34
	    Debugger.SecondEmgBufferLen=SecondEmgBufferLen;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bbc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbc8:	4a02      	ldr	r2, [pc, #8]	@ (800bbd4 <_ZN3Emg13SecondEmgReadEb+0xf0>)
 800bbca:	60d3      	str	r3, [r2, #12]
	}
}
 800bbcc:	bf00      	nop
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	200093a8 	.word	0x200093a8

0800bbd8 <_ZN3Emg13FirstEmgSetupEv>:

void Emg::FirstEmgSetup(void){
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
	FirstEmgWriteToSPI(EMG_PHASE_ADDRESS, EMG_PHASE_VALUE);
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	210e      	movs	r1, #14
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f839 	bl	800bc5c <_ZN3Emg18FirstEmgWriteToSPIEtt>
	FirstEmgWriteToSPI(EMG_GAIN_ADDRESS, EMG_GAIN_VALUE);
 800bbea:	2200      	movs	r2, #0
 800bbec:	2110      	movs	r1, #16
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f834 	bl	800bc5c <_ZN3Emg18FirstEmgWriteToSPIEtt>
	FirstEmgWriteToSPI(EMG_STATUS_COM_ADDRESS, EMG_STATUS_COM_VALUE);
 800bbf4:	2203      	movs	r2, #3
 800bbf6:	2112      	movs	r1, #18
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f82f 	bl	800bc5c <_ZN3Emg18FirstEmgWriteToSPIEtt>
	FirstEmgWriteToSPI(EMG_CONFIG_1_ADDRESS, EMG_CONFIG_1_VALUE);
 800bbfe:	2210      	movs	r2, #16
 800bc00:	2114      	movs	r1, #20
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f82a 	bl	800bc5c <_ZN3Emg18FirstEmgWriteToSPIEtt>
	FirstEmgWriteToSPI(EMG_CONFIG_2_ADDRESS, EMG_CONFIG_2_VALUE);
 800bc08:	220c      	movs	r2, #12
 800bc0a:	2116      	movs	r1, #22
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 f825 	bl	800bc5c <_ZN3Emg18FirstEmgWriteToSPIEtt>
}
 800bc12:	bf00      	nop
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <_ZN3Emg14SecondEmgSetupEv>:

void Emg::SecondEmgSetup(void){
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b082      	sub	sp, #8
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]

	SecondEmgWriteToSPI(EMG_PHASE_ADDRESS, EMG_PHASE_VALUE);
 800bc22:	2200      	movs	r2, #0
 800bc24:	210e      	movs	r1, #14
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f846 	bl	800bcb8 <_ZN3Emg19SecondEmgWriteToSPIEtt>
	SecondEmgWriteToSPI(EMG_GAIN_ADDRESS, EMG_GAIN_VALUE);
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2110      	movs	r1, #16
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f841 	bl	800bcb8 <_ZN3Emg19SecondEmgWriteToSPIEtt>
	SecondEmgWriteToSPI(EMG_STATUS_COM_ADDRESS, EMG_STATUS_COM_VALUE);
 800bc36:	2203      	movs	r2, #3
 800bc38:	2112      	movs	r1, #18
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 f83c 	bl	800bcb8 <_ZN3Emg19SecondEmgWriteToSPIEtt>
	SecondEmgWriteToSPI(EMG_CONFIG_1_ADDRESS, EMG_CONFIG_1_VALUE);
 800bc40:	2210      	movs	r2, #16
 800bc42:	2114      	movs	r1, #20
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f837 	bl	800bcb8 <_ZN3Emg19SecondEmgWriteToSPIEtt>
	SecondEmgWriteToSPI(EMG_CONFIG_2_ADDRESS, EMG_CONFIG_2_VALUE);
 800bc4a:	220c      	movs	r2, #12
 800bc4c:	2116      	movs	r1, #22
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f832 	bl	800bcb8 <_ZN3Emg19SecondEmgWriteToSPIEtt>
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <_ZN3Emg18FirstEmgWriteToSPIEtt>:

void Emg::FirstEmgWriteToSPI(uint16_t emgSPIAddress, uint16_t emgValue){
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	460b      	mov	r3, r1
 800bc66:	807b      	strh	r3, [r7, #2]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	803b      	strh	r3, [r7, #0]
	uint8_t EmgWriteArray[2];
	EmgWriteArray[0] = emgSPIAddress;
 800bc6c:	887b      	ldrh	r3, [r7, #2]
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	733b      	strb	r3, [r7, #12]
	EmgWriteArray[1] = emgValue;
 800bc72:	883b      	ldrh	r3, [r7, #0]
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800bc78:	2200      	movs	r2, #0
 800bc7a:	2110      	movs	r1, #16
 800bc7c:	480b      	ldr	r0, [pc, #44]	@ (800bcac <_ZN3Emg18FirstEmgWriteToSPIEtt+0x50>)
 800bc7e:	f7f7 f9e7 	bl	8003050 <HAL_GPIO_WritePin>
	Debugger.FirstEmgWriteStatus=HAL_SPI_Transmit(EMG_SPI_CHANNEL, EmgWriteArray, 2, 100);
 800bc82:	f107 010c 	add.w	r1, r7, #12
 800bc86:	2364      	movs	r3, #100	@ 0x64
 800bc88:	2202      	movs	r2, #2
 800bc8a:	4809      	ldr	r0, [pc, #36]	@ (800bcb0 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x54>)
 800bc8c:	f7f7 fedb 	bl	8003a46 <HAL_SPI_Transmit>
 800bc90:	4603      	mov	r3, r0
 800bc92:	461a      	mov	r2, r3
 800bc94:	4b07      	ldr	r3, [pc, #28]	@ (800bcb4 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x58>)
 800bc96:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	2110      	movs	r1, #16
 800bc9e:	4803      	ldr	r0, [pc, #12]	@ (800bcac <_ZN3Emg18FirstEmgWriteToSPIEtt+0x50>)
 800bca0:	f7f7 f9d6 	bl	8003050 <HAL_GPIO_WritePin>
}
 800bca4:	bf00      	nop
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	40020000 	.word	0x40020000
 800bcb0:	200000d0 	.word	0x200000d0
 800bcb4:	200093a8 	.word	0x200093a8

0800bcb8 <_ZN3Emg19SecondEmgWriteToSPIEtt>:

void Emg::SecondEmgWriteToSPI(uint16_t emgSPIAddress, uint16_t emgValue){
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	807b      	strh	r3, [r7, #2]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	803b      	strh	r3, [r7, #0]
	uint8_t EmgWriteArray[2];
	EmgWriteArray[0] = emgSPIAddress;
 800bcc8:	887b      	ldrh	r3, [r7, #2]
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	733b      	strb	r3, [r7, #12]
	EmgWriteArray[1] = emgValue;
 800bcce:	883b      	ldrh	r3, [r7, #0]
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bcda:	480c      	ldr	r0, [pc, #48]	@ (800bd0c <_ZN3Emg19SecondEmgWriteToSPIEtt+0x54>)
 800bcdc:	f7f7 f9b8 	bl	8003050 <HAL_GPIO_WritePin>
	Debugger.SecondEmgWriteStatus=HAL_SPI_Transmit(EMG2_SPI_CHANNEL, EmgWriteArray, 2, 100);
 800bce0:	f107 010c 	add.w	r1, r7, #12
 800bce4:	2364      	movs	r3, #100	@ 0x64
 800bce6:	2202      	movs	r2, #2
 800bce8:	4809      	ldr	r0, [pc, #36]	@ (800bd10 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x58>)
 800bcea:	f7f7 feac 	bl	8003a46 <HAL_SPI_Transmit>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	4b08      	ldr	r3, [pc, #32]	@ (800bd14 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x5c>)
 800bcf4:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bcfe:	4803      	ldr	r0, [pc, #12]	@ (800bd0c <_ZN3Emg19SecondEmgWriteToSPIEtt+0x54>)
 800bd00:	f7f7 f9a6 	bl	8003050 <HAL_GPIO_WritePin>
}
 800bd04:	bf00      	nop
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	40020400 	.word	0x40020400
 800bd10:	20000128 	.word	0x20000128
 800bd14:	200093a8 	.word	0x200093a8

0800bd18 <_ZN3Emg19FirstEmgReadFromSPIEh>:

void Emg::FirstEmgReadFromSPI(uint8_t emgValue){
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800bd24:	2200      	movs	r2, #0
 800bd26:	2110      	movs	r1, #16
 800bd28:	4811      	ldr	r0, [pc, #68]	@ (800bd70 <_ZN3Emg19FirstEmgReadFromSPIEh+0x58>)
 800bd2a:	f7f7 f991 	bl	8003050 <HAL_GPIO_WritePin>
	Debugger.FirstEmgWriteStatus=HAL_SPI_Transmit_DMA(EMG_SPI_CHANNEL, &emgValue, 1);
 800bd2e:	1cfb      	adds	r3, r7, #3
 800bd30:	2201      	movs	r2, #1
 800bd32:	4619      	mov	r1, r3
 800bd34:	480f      	ldr	r0, [pc, #60]	@ (800bd74 <_ZN3Emg19FirstEmgReadFromSPIEh+0x5c>)
 800bd36:	f7f8 fa8d 	bl	8004254 <HAL_SPI_Transmit_DMA>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	4b0e      	ldr	r3, [pc, #56]	@ (800bd78 <_ZN3Emg19FirstEmgReadFromSPIEh+0x60>)
 800bd40:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	Debugger.FirstEmgReadStatus=HAL_SPI_Receive_DMA(EMG_SPI_CHANNEL, FirstEmgReadSPIValue, 1);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	331c      	adds	r3, #28
 800bd48:	2201      	movs	r2, #1
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4809      	ldr	r0, [pc, #36]	@ (800bd74 <_ZN3Emg19FirstEmgReadFromSPIEh+0x5c>)
 800bd4e:	f7f8 fb33 	bl	80043b8 <HAL_SPI_Receive_DMA>
 800bd52:	4603      	mov	r3, r0
 800bd54:	461a      	mov	r2, r3
 800bd56:	4b08      	ldr	r3, [pc, #32]	@ (800bd78 <_ZN3Emg19FirstEmgReadFromSPIEh+0x60>)
 800bd58:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	2110      	movs	r1, #16
 800bd60:	4803      	ldr	r0, [pc, #12]	@ (800bd70 <_ZN3Emg19FirstEmgReadFromSPIEh+0x58>)
 800bd62:	f7f7 f975 	bl	8003050 <HAL_GPIO_WritePin>
}
 800bd66:	bf00      	nop
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	40020000 	.word	0x40020000
 800bd74:	200000d0 	.word	0x200000d0
 800bd78:	200093a8 	.word	0x200093a8

0800bd7c <_ZN3Emg20SecondEmgReadFromSPIEh>:

void Emg::SecondEmgReadFromSPI(uint8_t emgValue){
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bd8e:	4812      	ldr	r0, [pc, #72]	@ (800bdd8 <_ZN3Emg20SecondEmgReadFromSPIEh+0x5c>)
 800bd90:	f7f7 f95e 	bl	8003050 <HAL_GPIO_WritePin>
	Debugger.SecondEmgWriteStatus=HAL_SPI_Transmit_DMA(EMG2_SPI_CHANNEL, &emgValue, 1);
 800bd94:	1cfb      	adds	r3, r7, #3
 800bd96:	2201      	movs	r2, #1
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4810      	ldr	r0, [pc, #64]	@ (800bddc <_ZN3Emg20SecondEmgReadFromSPIEh+0x60>)
 800bd9c:	f7f8 fa5a 	bl	8004254 <HAL_SPI_Transmit_DMA>
 800bda0:	4603      	mov	r3, r0
 800bda2:	461a      	mov	r2, r3
 800bda4:	4b0e      	ldr	r3, [pc, #56]	@ (800bde0 <_ZN3Emg20SecondEmgReadFromSPIEh+0x64>)
 800bda6:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	Debugger.SecondEmgReadStatus=HAL_SPI_Receive_DMA(EMG2_SPI_CHANNEL, SecondEmgReadSPIValue, 1);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	331d      	adds	r3, #29
 800bdae:	2201      	movs	r2, #1
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	480a      	ldr	r0, [pc, #40]	@ (800bddc <_ZN3Emg20SecondEmgReadFromSPIEh+0x60>)
 800bdb4:	f7f8 fb00 	bl	80043b8 <HAL_SPI_Receive_DMA>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	461a      	mov	r2, r3
 800bdbc:	4b08      	ldr	r3, [pc, #32]	@ (800bde0 <_ZN3Emg20SecondEmgReadFromSPIEh+0x64>)
 800bdbe:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bdc8:	4803      	ldr	r0, [pc, #12]	@ (800bdd8 <_ZN3Emg20SecondEmgReadFromSPIEh+0x5c>)
 800bdca:	f7f7 f941 	bl	8003050 <HAL_GPIO_WritePin>
}
 800bdce:	bf00      	nop
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	40020400 	.word	0x40020400
 800bddc:	20000128 	.word	0x20000128
 800bde0:	200093a8 	.word	0x200093a8

0800bde4 <_ZN3Emg27FirstEmgMovingAverageFilterEm>:

uint32_t Emg::FirstEmgMovingAverageFilter(uint32_t newSample){
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
	if(SystemConfig.FirstEmgZeroMaxTrim==0) return newSample;
 800bdee:	4b3f      	ldr	r3, [pc, #252]	@ (800beec <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x108>)
 800bdf0:	895b      	ldrh	r3, [r3, #10]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d101      	bne.n	800bdfa <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x16>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	e071      	b.n	800bede <_ZN3Emg27FirstEmgMovingAverageFilterEm+0xfa>

	newVal=(newSample-65536)*-1;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800be00:	4a3b      	ldr	r2, [pc, #236]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be02:	6013      	str	r3, [r2, #0]
	Debugger.FirstEmgNewVal=newVal;
 800be04:	4b3a      	ldr	r3, [pc, #232]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	b29a      	uxth	r2, r3
 800be0a:	4b3a      	ldr	r3, [pc, #232]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x110>)
 800be0c:	859a      	strh	r2, [r3, #44]	@ 0x2c
	uint16_t avgTrim=(SystemConfig.FirstEmgZeroMaxTrim+SystemConfig.FirstEmgZeroMinTrim)/2;
 800be0e:	4b37      	ldr	r3, [pc, #220]	@ (800beec <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x108>)
 800be10:	895b      	ldrh	r3, [r3, #10]
 800be12:	461a      	mov	r2, r3
 800be14:	4b35      	ldr	r3, [pc, #212]	@ (800beec <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x108>)
 800be16:	899b      	ldrh	r3, [r3, #12]
 800be18:	4413      	add	r3, r2
 800be1a:	0fda      	lsrs	r2, r3, #31
 800be1c:	4413      	add	r3, r2
 800be1e:	105b      	asrs	r3, r3, #1
 800be20:	81fb      	strh	r3, [r7, #14]
	if(newVal<SystemConfig.FirstEmgZeroMaxTrim && newVal>SystemConfig.FirstEmgZeroMinTrim){
 800be22:	4b32      	ldr	r3, [pc, #200]	@ (800beec <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x108>)
 800be24:	895b      	ldrh	r3, [r3, #10]
 800be26:	461a      	mov	r2, r3
 800be28:	4b31      	ldr	r3, [pc, #196]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d909      	bls.n	800be44 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x60>
 800be30:	4b2e      	ldr	r3, [pc, #184]	@ (800beec <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x108>)
 800be32:	899b      	ldrh	r3, [r3, #12]
 800be34:	461a      	mov	r2, r3
 800be36:	4b2e      	ldr	r3, [pc, #184]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d202      	bcs.n	800be44 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x60>
		newVal=avgTrim;
 800be3e:	89fb      	ldrh	r3, [r7, #14]
 800be40:	4a2b      	ldr	r2, [pc, #172]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be42:	6013      	str	r3, [r2, #0]
	}
	if(newVal<avgTrim){
 800be44:	89fa      	ldrh	r2, [r7, #14]
 800be46:	4b2a      	ldr	r3, [pc, #168]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d907      	bls.n	800be5e <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x7a>
		newVal=avgTrim+(avgTrim-newVal);
 800be4e:	89fa      	ldrh	r2, [r7, #14]
 800be50:	89f9      	ldrh	r1, [r7, #14]
 800be52:	4b27      	ldr	r3, [pc, #156]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	1acb      	subs	r3, r1, r3
 800be58:	4413      	add	r3, r2
 800be5a:	4a25      	ldr	r2, [pc, #148]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be5c:	6013      	str	r3, [r2, #0]
	}
	newVal-=avgTrim;
 800be5e:	4b24      	ldr	r3, [pc, #144]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	89fb      	ldrh	r3, [r7, #14]
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	4a22      	ldr	r2, [pc, #136]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be68:	6013      	str	r3, [r2, #0]
	Debugger.FirstEmgNewValAfter=newVal;
 800be6a:	4b21      	ldr	r3, [pc, #132]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	b29a      	uxth	r2, r3
 800be70:	4b20      	ldr	r3, [pc, #128]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x110>)
 800be72:	861a      	strh	r2, [r3, #48]	@ 0x30
	if(newVal>SystemConfig.FirstEmgMaxTrim){
 800be74:	4b1d      	ldr	r3, [pc, #116]	@ (800beec <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x108>)
 800be76:	891b      	ldrh	r3, [r3, #8]
 800be78:	461a      	mov	r2, r3
 800be7a:	4b1d      	ldr	r3, [pc, #116]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d204      	bcs.n	800be8c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0xa8>
		return LastFirstEmg;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800be88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be8a:	e028      	b.n	800bede <_ZN3Emg27FirstEmgMovingAverageFilterEm+0xfa>
	}
	newVal=(LastFirstEmg*90+newVal*10)/100;  //newVal=(LastFirstEmg*990+newVal*10)/1000;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800be92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be94:	225a      	movs	r2, #90	@ 0x5a
 800be96:	fb02 f103 	mul.w	r1, r2, r3
 800be9a:	4b15      	ldr	r3, [pc, #84]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	4613      	mov	r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	4413      	add	r3, r2
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	440b      	add	r3, r1
 800bea8:	4a13      	ldr	r2, [pc, #76]	@ (800bef8 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x114>)
 800beaa:	fba2 2303 	umull	r2, r3, r2, r3
 800beae:	095b      	lsrs	r3, r3, #5
 800beb0:	4a0f      	ldr	r2, [pc, #60]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800beb2:	6013      	str	r3, [r2, #0]
	LastFirstEmg=newVal;
 800beb4:	4b0e      	ldr	r3, [pc, #56]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800bebe:	63d3      	str	r3, [r2, #60]	@ 0x3c
	newVal=newVal-50; //250
 800bec0:	4b0b      	ldr	r3, [pc, #44]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3b32      	subs	r3, #50	@ 0x32
 800bec6:	4a0a      	ldr	r2, [pc, #40]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bec8:	6013      	str	r3, [r2, #0]
	if(newVal>=66000) newVal=0;
 800beca:	4b09      	ldr	r3, [pc, #36]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a0b      	ldr	r2, [pc, #44]	@ (800befc <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x118>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d902      	bls.n	800beda <_ZN3Emg27FirstEmgMovingAverageFilterEm+0xf6>
 800bed4:	4b06      	ldr	r3, [pc, #24]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	601a      	str	r2, [r3, #0]
	return newVal;
 800beda:	4b05      	ldr	r3, [pc, #20]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3714      	adds	r7, #20
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	2000932c 	.word	0x2000932c
 800bef0:	20004ee8 	.word	0x20004ee8
 800bef4:	200093a8 	.word	0x200093a8
 800bef8:	51eb851f 	.word	0x51eb851f
 800befc:	000101cf 	.word	0x000101cf

0800bf00 <_ZN3Emg28SecondEmgMovingAverageFilterEm>:
uint32_t Emg::SecondEmgMovingAverageFilter(uint32_t newSample){
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
	if(SystemConfig.SecondEmgZeroMaxTrim==0) return newSample;
 800bf0a:	4b35      	ldr	r3, [pc, #212]	@ (800bfe0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe0>)
 800bf0c:	8a1b      	ldrh	r3, [r3, #16]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d101      	bne.n	800bf16 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x16>
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	e05e      	b.n	800bfd4 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xd4>
	uint32_t newVal=(newSample-65536)*-1;
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800bf1c:	60fb      	str	r3, [r7, #12]
	Debugger.SecondEmgNewVal=newVal;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	4b30      	ldr	r3, [pc, #192]	@ (800bfe4 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe4>)
 800bf24:	85da      	strh	r2, [r3, #46]	@ 0x2e
	uint16_t avgTrim=(SystemConfig.SecondEmgZeroMaxTrim+SystemConfig.SecondEmgZeroMinTrim)/2;
 800bf26:	4b2e      	ldr	r3, [pc, #184]	@ (800bfe0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe0>)
 800bf28:	8a1b      	ldrh	r3, [r3, #16]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	4b2c      	ldr	r3, [pc, #176]	@ (800bfe0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe0>)
 800bf2e:	8a5b      	ldrh	r3, [r3, #18]
 800bf30:	4413      	add	r3, r2
 800bf32:	0fda      	lsrs	r2, r3, #31
 800bf34:	4413      	add	r3, r2
 800bf36:	105b      	asrs	r3, r3, #1
 800bf38:	817b      	strh	r3, [r7, #10]
	if(newVal<SystemConfig.SecondEmgZeroMaxTrim && newVal>SystemConfig.SecondEmgZeroMinTrim){
 800bf3a:	4b29      	ldr	r3, [pc, #164]	@ (800bfe0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe0>)
 800bf3c:	8a1b      	ldrh	r3, [r3, #16]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d207      	bcs.n	800bf56 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x56>
 800bf46:	4b26      	ldr	r3, [pc, #152]	@ (800bfe0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe0>)
 800bf48:	8a5b      	ldrh	r3, [r3, #18]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d901      	bls.n	800bf56 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x56>
		newVal=avgTrim;
 800bf52:	897b      	ldrh	r3, [r7, #10]
 800bf54:	60fb      	str	r3, [r7, #12]
	}
	if(newVal<avgTrim){
 800bf56:	897b      	ldrh	r3, [r7, #10]
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d205      	bcs.n	800bf6a <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x6a>
		newVal=avgTrim+(avgTrim-newVal);
 800bf5e:	897a      	ldrh	r2, [r7, #10]
 800bf60:	8979      	ldrh	r1, [r7, #10]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	1acb      	subs	r3, r1, r3
 800bf66:	4413      	add	r3, r2
 800bf68:	60fb      	str	r3, [r7, #12]
	}
	newVal-=avgTrim;
 800bf6a:	897b      	ldrh	r3, [r7, #10]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	60fb      	str	r3, [r7, #12]
	Debugger.SecondEmgNewValAfter=newVal;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	4b1b      	ldr	r3, [pc, #108]	@ (800bfe4 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe4>)
 800bf78:	865a      	strh	r2, [r3, #50]	@ 0x32
	if(newVal>SystemConfig.SecondEmgMaxTrim){
 800bf7a:	4b19      	ldr	r3, [pc, #100]	@ (800bfe0 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe0>)
 800bf7c:	89db      	ldrh	r3, [r3, #14]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d904      	bls.n	800bf90 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x90>
		return LastSecondEmg;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bf8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf8e:	e021      	b.n	800bfd4 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xd4>
	}
	newVal=(LastSecondEmg*90+newVal*10)/100;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bf96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf98:	225a      	movs	r2, #90	@ 0x5a
 800bf9a:	fb02 f103 	mul.w	r1, r2, r3
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4413      	add	r3, r2
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	440b      	add	r3, r1
 800bfaa:	4a0f      	ldr	r2, [pc, #60]	@ (800bfe8 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe8>)
 800bfac:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb0:	095b      	lsrs	r3, r3, #5
 800bfb2:	60fb      	str	r3, [r7, #12]
	LastSecondEmg=newVal;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bfba:	461a      	mov	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6413      	str	r3, [r2, #64]	@ 0x40
	newVal=newVal-50; //250
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	3b32      	subs	r3, #50	@ 0x32
 800bfc4:	60fb      	str	r3, [r7, #12]
	if(newVal>=66000) newVal=0;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	4a08      	ldr	r2, [pc, #32]	@ (800bfec <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xec>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d901      	bls.n	800bfd2 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xd2>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	60fb      	str	r3, [r7, #12]
	return newVal;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	2000932c 	.word	0x2000932c
 800bfe4:	200093a8 	.word	0x200093a8
 800bfe8:	51eb851f 	.word	0x51eb851f
 800bfec:	000101cf 	.word	0x000101cf

0800bff0 <_ZN6FilterC1Ev>:
 *      Author: OrioN
 */

#include "../Inc/GeneralHeaders.h"

Filter::Filter() {
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	4a04      	ldr	r2, [pc, #16]	@ (800c00c <_ZN6FilterC1Ev+0x1c>)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	08011ce4 	.word	0x08011ce4

0800c010 <_ZN6FilterD1Ev>:

Filter::~Filter() {
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	4a04      	ldr	r2, [pc, #16]	@ (800c02c <_ZN6FilterD1Ev+0x1c>)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4618      	mov	r0, r3
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	08011ce4 	.word	0x08011ce4

0800c030 <_ZN6FilterD0Ev>:
Filter::~Filter() {
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
}
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7ff ffe9 	bl	800c010 <_ZN6FilterD1Ev>
 800c03e:	2104      	movs	r1, #4
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f004 fd47 	bl	8010ad4 <_ZdlPvj>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4618      	mov	r0, r3
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <_ZN6Filter14MoovingAverageEPfS0_mmf>:
	previousFilteredValue = filteredValue;

	return (filteredValue < 0) ? 0 : filteredValue;
}

float32_t Filter::MoovingAverage(float32_t *dataArray, float32_t *sumData, uint32_t index, uint32_t len, float32_t nextValue){
 800c050:	b480      	push	{r7}
 800c052:	b089      	sub	sp, #36	@ 0x24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6178      	str	r0, [r7, #20]
 800c058:	6139      	str	r1, [r7, #16]
 800c05a:	60fa      	str	r2, [r7, #12]
 800c05c:	60bb      	str	r3, [r7, #8]
 800c05e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (index >= len) {
 800c062:	68ba      	ldr	r2, [r7, #8]
 800c064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c066:	429a      	cmp	r2, r3
 800c068:	d302      	bcc.n	800c070 <_ZN6Filter14MoovingAverageEPfS0_mmf+0x20>
			return 0.0f;
 800c06a:	f04f 0300 	mov.w	r3, #0
 800c06e:	e03b      	b.n	800c0e8 <_ZN6Filter14MoovingAverageEPfS0_mmf+0x98>
		}
		*sumData = *sumData - dataArray[index] + nextValue;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	ed93 7a00 	vldr	s14, [r3]
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	693a      	ldr	r2, [r7, #16]
 800c07c:	4413      	add	r3, r2
 800c07e:	edd3 7a00 	vldr	s15, [r3]
 800c082:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c086:	edd7 7a01 	vldr	s15, [r7, #4]
 800c08a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	edc3 7a00 	vstr	s15, [r3]
		*sumData = (*sumData < 1) ? 0 : *sumData;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	edd3 7a00 	vldr	s15, [r3]
 800c09a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c09e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a6:	d502      	bpl.n	800c0ae <_ZN6Filter14MoovingAverageEPfS0_mmf+0x5e>
 800c0a8:	f04f 0300 	mov.w	r3, #0
 800c0ac:	e001      	b.n	800c0b2 <_ZN6Filter14MoovingAverageEPfS0_mmf+0x62>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	6013      	str	r3, [r2, #0]
		dataArray[index] = nextValue;
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	693a      	ldr	r2, [r7, #16]
 800c0bc:	4413      	add	r3, r2
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	601a      	str	r2, [r3, #0]
		float32_t average = (len != 0) ? *sumData / len : 0.0f;
 800c0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d00a      	beq.n	800c0de <_ZN6Filter14MoovingAverageEPfS0_mmf+0x8e>
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	edd3 6a00 	vldr	s13, [r3]
 800c0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d0:	ee07 3a90 	vmov	s15, r3
 800c0d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c0d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0dc:	e001      	b.n	800c0e2 <_ZN6Filter14MoovingAverageEPfS0_mmf+0x92>
 800c0de:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800c0fc <_ZN6Filter14MoovingAverageEPfS0_mmf+0xac>
 800c0e2:	edc7 7a07 	vstr	s15, [r7, #28]

		return average;
 800c0e6:	69fb      	ldr	r3, [r7, #28]
}
 800c0e8:	ee07 3a90 	vmov	s15, r3
 800c0ec:	eeb0 0a67 	vmov.f32	s0, s15
 800c0f0:	3724      	adds	r7, #36	@ 0x24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	00000000 	.word	0x00000000

0800c100 <_ZN12FlashManager8ReadDataEPhhib>:
	uint16_t ReadSecondEmgZeroPointMinTrim(void);
	uint16_t ReadSecondEmgZeroPointMaxTrim(void);
	FlashStatus Update(void);
	FlashStatus WriteData(uint8_t appendAddress,int len, uint8_t *data);
private:
	void ReadData(uint8_t *retVal, uint8_t appendAddress,int len, bool isReverse=false){
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	603b      	str	r3, [r7, #0]
 800c10c:	4613      	mov	r3, r2
 800c10e:	71fb      	strb	r3, [r7, #7]
		if(HAL_FLASH_Unlock()==HAL_OK){
 800c110:	f7f6 fb7e 	bl	8002810 <HAL_FLASH_Unlock>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	bf0c      	ite	eq
 800c11a:	2301      	moveq	r3, #1
 800c11c:	2300      	movne	r3, #0
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b00      	cmp	r3, #0
 800c122:	d028      	beq.n	800c176 <_ZN12FlashManager8ReadDataEPhhib+0x76>
			for (int i = 0; i < len; ++i) {
 800c124:	2300      	movs	r3, #0
 800c126:	617b      	str	r3, [r7, #20]
 800c128:	e01f      	b.n	800c16a <_ZN12FlashManager8ReadDataEPhhib+0x6a>
				uint32_t address=FlashMemAddress+appendAddress+i;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	689a      	ldr	r2, [r3, #8]
 800c12e:	79fb      	ldrb	r3, [r7, #7]
 800c130:	441a      	add	r2, r3
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	4413      	add	r3, r2
 800c136:	613b      	str	r3, [r7, #16]
				if(isReverse){
 800c138:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00a      	beq.n	800c156 <_ZN12FlashManager8ReadDataEPhhib+0x56>
					retVal[len-i-1]=*(__IO uint8_t*) address;
 800c140:	693a      	ldr	r2, [r7, #16]
 800c142:	6839      	ldr	r1, [r7, #0]
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	1acb      	subs	r3, r1, r3
 800c148:	3b01      	subs	r3, #1
 800c14a:	68b9      	ldr	r1, [r7, #8]
 800c14c:	440b      	add	r3, r1
 800c14e:	7812      	ldrb	r2, [r2, #0]
 800c150:	b2d2      	uxtb	r2, r2
 800c152:	701a      	strb	r2, [r3, #0]
 800c154:	e006      	b.n	800c164 <_ZN12FlashManager8ReadDataEPhhib+0x64>
				}
				else{
					retVal[i]=*(__IO uint8_t*) address;
 800c156:	693a      	ldr	r2, [r7, #16]
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	68b9      	ldr	r1, [r7, #8]
 800c15c:	440b      	add	r3, r1
 800c15e:	7812      	ldrb	r2, [r2, #0]
 800c160:	b2d2      	uxtb	r2, r2
 800c162:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < len; ++i) {
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	3301      	adds	r3, #1
 800c168:	617b      	str	r3, [r7, #20]
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	429a      	cmp	r2, r3
 800c170:	dbdb      	blt.n	800c12a <_ZN12FlashManager8ReadDataEPhhib+0x2a>
				}
			}
			HAL_FLASH_Lock();
 800c172:	f7f6 fb6f 	bl	8002854 <HAL_FLASH_Lock>
		}
	}
 800c176:	bf00      	nop
 800c178:	3718      	adds	r7, #24
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
	...

0800c180 <_ZN12FlashManagerC1Ev>:
 *      Author: OrioN
 */

#include "../Inc/GeneralHeaders.h"

FlashManager::FlashManager() {
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	4a22      	ldr	r2, [pc, #136]	@ (800c214 <_ZN12FlashManagerC1Ev+0x94>)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	601a      	str	r2, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a21      	ldr	r2, [pc, #132]	@ (800c218 <_ZN12FlashManagerC1Ev+0x98>)
 800c192:	609a      	str	r2, [r3, #8]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	731a      	strb	r2, [r3, #12]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2208      	movs	r2, #8
 800c19e:	735a      	strb	r2, [r3, #13]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2210      	movs	r2, #16
 800c1a4:	739a      	strb	r2, [r3, #14]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2214      	movs	r2, #20
 800c1aa:	73da      	strb	r2, [r3, #15]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2218      	movs	r2, #24
 800c1b0:	741a      	strb	r2, [r3, #16]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	221e      	movs	r2, #30
 800c1b6:	745a      	strb	r2, [r3, #17]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2224      	movs	r2, #36	@ 0x24
 800c1bc:	749a      	strb	r2, [r3, #18]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2225      	movs	r2, #37	@ 0x25
 800c1c2:	74da      	strb	r2, [r3, #19]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2226      	movs	r2, #38	@ 0x26
 800c1c8:	751a      	strb	r2, [r3, #20]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2227      	movs	r2, #39	@ 0x27
 800c1ce:	755a      	strb	r2, [r3, #21]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2228      	movs	r2, #40	@ 0x28
 800c1d4:	759a      	strb	r2, [r3, #22]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2229      	movs	r2, #41	@ 0x29
 800c1da:	75da      	strb	r2, [r3, #23]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	222a      	movs	r2, #42	@ 0x2a
 800c1e0:	761a      	strb	r2, [r3, #24]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	222b      	movs	r2, #43	@ 0x2b
 800c1e6:	765a      	strb	r2, [r3, #25]
	// TODO Auto-generated constructor stub
	serialN = rand() % 1000;
 800c1e8:	f004 fdbc 	bl	8010d64 <rand>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c21c <_ZN12FlashManagerC1Ev+0x9c>)
 800c1f0:	fb83 1302 	smull	r1, r3, r3, r2
 800c1f4:	1199      	asrs	r1, r3, #6
 800c1f6:	17d3      	asrs	r3, r2, #31
 800c1f8:	1acb      	subs	r3, r1, r3
 800c1fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c1fe:	fb01 f303 	mul.w	r3, r1, r3
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	6053      	str	r3, [r2, #4]

}
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4618      	mov	r0, r3
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	08011cf4 	.word	0x08011cf4
 800c218:	08020000 	.word	0x08020000
 800c21c:	10624dd3 	.word	0x10624dd3

0800c220 <_ZN12FlashManagerD1Ev>:

FlashManager::~FlashManager() {
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	4a04      	ldr	r2, [pc, #16]	@ (800c23c <_ZN12FlashManagerD1Ev+0x1c>)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4618      	mov	r0, r3
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	08011cf4 	.word	0x08011cf4

0800c240 <_ZN12FlashManagerD0Ev>:
FlashManager::~FlashManager() {
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
}
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f7ff ffe9 	bl	800c220 <_ZN12FlashManagerD1Ev>
 800c24e:	211c      	movs	r1, #28
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f004 fc3f 	bl	8010ad4 <_ZdlPvj>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4618      	mov	r0, r3
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <_ZN12FlashManager10BackupDataEv>:
void FlashManager::BackupData(void){
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af02      	add	r7, sp, #8
 800c266:	6078      	str	r0, [r7, #4]
	ReadData(SystemConfig.Backup,FlashMemAddress,SystemConfig.BackupLen);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	b2da      	uxtb	r2, r3
 800c26e:	4b08      	ldr	r3, [pc, #32]	@ (800c290 <_ZN12FlashManager10BackupDataEv+0x30>)
 800c270:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c272:	2100      	movs	r1, #0
 800c274:	9100      	str	r1, [sp, #0]
 800c276:	4907      	ldr	r1, [pc, #28]	@ (800c294 <_ZN12FlashManager10BackupDataEv+0x34>)
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f7ff ff41 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
	SystemConfig.isBackup=true;
 800c27e:	4b04      	ldr	r3, [pc, #16]	@ (800c290 <_ZN12FlashManager10BackupDataEv+0x30>)
 800c280:	2201      	movs	r2, #1
 800c282:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 800c286:	bf00      	nop
 800c288:	3708      	adds	r7, #8
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	2000932c 	.word	0x2000932c
 800c294:	20009361 	.word	0x20009361

0800c298 <_ZN12FlashManager9HardResetEb>:
FlashStatus FlashManager::HardReset(bool useUnlock){
 800c298:	b580      	push	{r7, lr}
 800c29a:	b08e      	sub	sp, #56	@ 0x38
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	70fb      	strb	r3, [r7, #3]

	if(!useUnlock){
 800c2a4:	78fb      	ldrb	r3, [r7, #3]
 800c2a6:	f083 0301 	eor.w	r3, r3, #1
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d015      	beq.n	800c2dc <_ZN12FlashManager9HardResetEb+0x44>
		FLASH_EraseInitTypeDef	 FlashErase;
		uint32_t status = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	623b      	str	r3, [r7, #32]
		FlashErase.Sector = FLASH_SECTOR_5;
 800c2b4:	2305      	movs	r3, #5
 800c2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		FlashErase.Banks=FLASH_BANK_1;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	62bb      	str	r3, [r7, #40]	@ 0x28
		FlashErase.NbSectors = 1;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	633b      	str	r3, [r7, #48]	@ 0x30
		FlashErase.TypeErase    = FLASH_TYPEERASE_SECTORS;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	627b      	str	r3, [r7, #36]	@ 0x24
		FlashErase.VoltageRange = VOLTAGE_RANGE_3;
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_FLASHEx_Erase(&FlashErase, &status);
 800c2c8:	f107 0220 	add.w	r2, r7, #32
 800c2cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7f6 fbfe 	bl	8002ad4 <HAL_FLASHEx_Erase>
		return FlashStatus::Success;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	e025      	b.n	800c328 <_ZN12FlashManager9HardResetEb+0x90>
	}
	if(useUnlock&&HAL_FLASH_Unlock()==HAL_OK){
 800c2dc:	78fb      	ldrb	r3, [r7, #3]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d006      	beq.n	800c2f0 <_ZN12FlashManager9HardResetEb+0x58>
 800c2e2:	f7f6 fa95 	bl	8002810 <HAL_FLASH_Unlock>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d101      	bne.n	800c2f0 <_ZN12FlashManager9HardResetEb+0x58>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e000      	b.n	800c2f2 <_ZN12FlashManager9HardResetEb+0x5a>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d017      	beq.n	800c326 <_ZN12FlashManager9HardResetEb+0x8e>

		FLASH_EraseInitTypeDef	 FlashErase;
		uint32_t status = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	60bb      	str	r3, [r7, #8]
		FlashErase.Sector = FLASH_SECTOR_5;
 800c2fa:	2305      	movs	r3, #5
 800c2fc:	617b      	str	r3, [r7, #20]
		FlashErase.Banks=FLASH_BANK_1;
 800c2fe:	2301      	movs	r3, #1
 800c300:	613b      	str	r3, [r7, #16]
		FlashErase.NbSectors = 1;
 800c302:	2301      	movs	r3, #1
 800c304:	61bb      	str	r3, [r7, #24]
		FlashErase.TypeErase    = FLASH_TYPEERASE_SECTORS;
 800c306:	2300      	movs	r3, #0
 800c308:	60fb      	str	r3, [r7, #12]
		FlashErase.VoltageRange = VOLTAGE_RANGE_3;
 800c30a:	2302      	movs	r3, #2
 800c30c:	61fb      	str	r3, [r7, #28]
		HAL_FLASHEx_Erase(&FlashErase, &status);
 800c30e:	f107 0208 	add.w	r2, r7, #8
 800c312:	f107 030c 	add.w	r3, r7, #12
 800c316:	4611      	mov	r1, r2
 800c318:	4618      	mov	r0, r3
 800c31a:	f7f6 fbdb 	bl	8002ad4 <HAL_FLASHEx_Erase>
		HAL_FLASH_Lock();
 800c31e:	f7f6 fa99 	bl	8002854 <HAL_FLASH_Lock>
		return FlashStatus::Success;
 800c322:	2300      	movs	r3, #0
 800c324:	e000      	b.n	800c328 <_ZN12FlashManager9HardResetEb+0x90>
	}
	return FlashStatus::Error;
 800c326:	2301      	movs	r3, #1

}
 800c328:	4618      	mov	r0, r3
 800c32a:	3738      	adds	r7, #56	@ 0x38
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <_ZN12FlashManager6UpdateEv>:
FlashStatus FlashManager::Update(void){
 800c330:	b5b0      	push	{r4, r5, r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
	if(!SystemConfig.isBackup){
 800c338:	4b1f      	ldr	r3, [pc, #124]	@ (800c3b8 <_ZN12FlashManager6UpdateEv+0x88>)
 800c33a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800c33e:	f083 0301 	eor.w	r3, r3, #1
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b00      	cmp	r3, #0
 800c346:	d001      	beq.n	800c34c <_ZN12FlashManager6UpdateEv+0x1c>
		return FlashStatus::NotBackup;
 800c348:	2302      	movs	r3, #2
 800c34a:	e031      	b.n	800c3b0 <_ZN12FlashManager6UpdateEv+0x80>
	}
	if(HAL_FLASH_Unlock()==HAL_OK){
 800c34c:	f7f6 fa60 	bl	8002810 <HAL_FLASH_Unlock>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	bf0c      	ite	eq
 800c356:	2301      	moveq	r3, #1
 800c358:	2300      	movne	r3, #0
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d026      	beq.n	800c3ae <_ZN12FlashManager6UpdateEv+0x7e>
		HardReset(false);
 800c360:	2100      	movs	r1, #0
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7ff ff98 	bl	800c298 <_ZN12FlashManager9HardResetEb>
		for (int i = 0; i < SystemConfig.BackupLen; ++i) {
 800c368:	2300      	movs	r3, #0
 800c36a:	60fb      	str	r3, [r7, #12]
 800c36c:	e016      	b.n	800c39c <_ZN12FlashManager6UpdateEv+0x6c>
			uint32_t address=FlashMemAddress+i;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	689a      	ldr	r2, [r3, #8]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	4413      	add	r3, r2
 800c376:	60bb      	str	r3, [r7, #8]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address,SystemConfig.Backup[i] );
 800c378:	4a0f      	ldr	r2, [pc, #60]	@ (800c3b8 <_ZN12FlashManager6UpdateEv+0x88>)
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	4413      	add	r3, r2
 800c37e:	3335      	adds	r3, #53	@ 0x35
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	b2db      	uxtb	r3, r3
 800c384:	2200      	movs	r2, #0
 800c386:	461c      	mov	r4, r3
 800c388:	4615      	mov	r5, r2
 800c38a:	4622      	mov	r2, r4
 800c38c:	462b      	mov	r3, r5
 800c38e:	68b9      	ldr	r1, [r7, #8]
 800c390:	2000      	movs	r0, #0
 800c392:	f7f6 f9e9 	bl	8002768 <HAL_FLASH_Program>
		for (int i = 0; i < SystemConfig.BackupLen; ++i) {
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3301      	adds	r3, #1
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	4b06      	ldr	r3, [pc, #24]	@ (800c3b8 <_ZN12FlashManager6UpdateEv+0x88>)
 800c39e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	dbe3      	blt.n	800c36e <_ZN12FlashManager6UpdateEv+0x3e>
		}
		HAL_FLASH_Lock();
 800c3a6:	f7f6 fa55 	bl	8002854 <HAL_FLASH_Lock>
		return FlashStatus::Success;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e000      	b.n	800c3b0 <_ZN12FlashManager6UpdateEv+0x80>
	}
	return FlashStatus::Error;
 800c3ae:	2301      	movs	r3, #1
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bdb0      	pop	{r4, r5, r7, pc}
 800c3b8:	2000932c 	.word	0x2000932c

0800c3bc <_ZN12FlashManager9WriteDataEhiPh>:

FlashStatus FlashManager::WriteData(uint8_t appendAddress,int len, uint8_t *data){
 800c3bc:	b480      	push	{r7}
 800c3be:	b087      	sub	sp, #28
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	607a      	str	r2, [r7, #4]
 800c3c6:	603b      	str	r3, [r7, #0]
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	72fb      	strb	r3, [r7, #11]
	if(!SystemConfig.isBackup){
 800c3cc:	4b14      	ldr	r3, [pc, #80]	@ (800c420 <_ZN12FlashManager9WriteDataEhiPh+0x64>)
 800c3ce:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800c3d2:	f083 0301 	eor.w	r3, r3, #1
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <_ZN12FlashManager9WriteDataEhiPh+0x24>
		return FlashStatus::NotBackup;
 800c3dc:	2302      	movs	r3, #2
 800c3de:	e018      	b.n	800c412 <_ZN12FlashManager9WriteDataEhiPh+0x56>
	}
	for (int i = 0; i < len; ++i) {
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	617b      	str	r3, [r7, #20]
 800c3e4:	e010      	b.n	800c408 <_ZN12FlashManager9WriteDataEhiPh+0x4c>
		uint32_t address=appendAddress+i;
 800c3e6:	7afa      	ldrb	r2, [r7, #11]
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	613b      	str	r3, [r7, #16]
		SystemConfig.Backup[address]=data[i];
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	683a      	ldr	r2, [r7, #0]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	7819      	ldrb	r1, [r3, #0]
 800c3f6:	4a0a      	ldr	r2, [pc, #40]	@ (800c420 <_ZN12FlashManager9WriteDataEhiPh+0x64>)
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	3335      	adds	r3, #53	@ 0x35
 800c3fe:	460a      	mov	r2, r1
 800c400:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; ++i) {
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	3301      	adds	r3, #1
 800c406:	617b      	str	r3, [r7, #20]
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	dbea      	blt.n	800c3e6 <_ZN12FlashManager9WriteDataEhiPh+0x2a>
	}
	return FlashStatus::Success;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	371c      	adds	r7, #28
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	2000932c 	.word	0x2000932c

0800c424 <_ZN12FlashManager5SetupEv>:
void FlashManager::Setup(){
 800c424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c428:	b087      	sub	sp, #28
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
	size_t size=1;
    uint8_t data[size]={0};
	WriteData(SetupAppendAddress,size, data);
}
 800c42e:	466b      	mov	r3, sp
 800c430:	461e      	mov	r6, r3
	size_t size=1;
 800c432:	2301      	movs	r3, #1
 800c434:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={0};
 800c436:	6979      	ldr	r1, [r7, #20]
 800c438:	460b      	mov	r3, r1
 800c43a:	3b01      	subs	r3, #1
 800c43c:	613b      	str	r3, [r7, #16]
 800c43e:	2300      	movs	r3, #0
 800c440:	4688      	mov	r8, r1
 800c442:	4699      	mov	r9, r3
 800c444:	f04f 0200 	mov.w	r2, #0
 800c448:	f04f 0300 	mov.w	r3, #0
 800c44c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c450:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c454:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c458:	2300      	movs	r3, #0
 800c45a:	460c      	mov	r4, r1
 800c45c:	461d      	mov	r5, r3
 800c45e:	f04f 0200 	mov.w	r2, #0
 800c462:	f04f 0300 	mov.w	r3, #0
 800c466:	00eb      	lsls	r3, r5, #3
 800c468:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c46c:	00e2      	lsls	r2, r4, #3
 800c46e:	1dcb      	adds	r3, r1, #7
 800c470:	08db      	lsrs	r3, r3, #3
 800c472:	00db      	lsls	r3, r3, #3
 800c474:	ebad 0d03 	sub.w	sp, sp, r3
 800c478:	466b      	mov	r3, sp
 800c47a:	3300      	adds	r3, #0
 800c47c:	60fb      	str	r3, [r7, #12]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	460a      	mov	r2, r1
 800c482:	1e51      	subs	r1, r2, #1
 800c484:	2200      	movs	r2, #0
 800c486:	701a      	strb	r2, [r3, #0]
 800c488:	1c5a      	adds	r2, r3, #1
 800c48a:	1e4b      	subs	r3, r1, #1
 800c48c:	e003      	b.n	800c496 <_ZN12FlashManager5SetupEv+0x72>
 800c48e:	2100      	movs	r1, #0
 800c490:	7011      	strb	r1, [r2, #0]
 800c492:	3b01      	subs	r3, #1
 800c494:	3201      	adds	r2, #1
 800c496:	2b00      	cmp	r3, #0
 800c498:	daf9      	bge.n	800c48e <_ZN12FlashManager5SetupEv+0x6a>
	WriteData(SetupAppendAddress,size, data);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	7c99      	ldrb	r1, [r3, #18]
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7ff ff8a 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800c4a8:	46b5      	mov	sp, r6
}
 800c4aa:	bf00      	nop
 800c4ac:	371c      	adds	r7, #28
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c4b4 <_ZN12FlashManager7IsSetupEv>:
bool FlashManager::IsSetup(){
 800c4b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4b8:	b089      	sub	sp, #36	@ 0x24
 800c4ba:	af02      	add	r7, sp, #8
 800c4bc:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,SetupAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return (value==0x00);
}
 800c4be:	466b      	mov	r3, sp
 800c4c0:	461e      	mov	r6, r3
	BackupData();
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7ff fecc 	bl	800c260 <_ZN12FlashManager10BackupDataEv>
	size_t size=1;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800c4cc:	6979      	ldr	r1, [r7, #20]
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	613b      	str	r3, [r7, #16]
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	4688      	mov	r8, r1
 800c4d8:	4699      	mov	r9, r3
 800c4da:	f04f 0200 	mov.w	r2, #0
 800c4de:	f04f 0300 	mov.w	r3, #0
 800c4e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c4e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c4ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	460c      	mov	r4, r1
 800c4f2:	461d      	mov	r5, r3
 800c4f4:	f04f 0200 	mov.w	r2, #0
 800c4f8:	f04f 0300 	mov.w	r3, #0
 800c4fc:	00eb      	lsls	r3, r5, #3
 800c4fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c502:	00e2      	lsls	r2, r4, #3
 800c504:	1dcb      	adds	r3, r1, #7
 800c506:	08db      	lsrs	r3, r3, #3
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	ebad 0d03 	sub.w	sp, sp, r3
 800c50e:	ab02      	add	r3, sp, #8
 800c510:	3300      	adds	r3, #0
 800c512:	60fb      	str	r3, [r7, #12]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	460a      	mov	r2, r1
 800c518:	1e51      	subs	r1, r2, #1
 800c51a:	22ff      	movs	r2, #255	@ 0xff
 800c51c:	701a      	strb	r2, [r3, #0]
 800c51e:	1c5a      	adds	r2, r3, #1
 800c520:	1e4b      	subs	r3, r1, #1
 800c522:	e003      	b.n	800c52c <_ZN12FlashManager7IsSetupEv+0x78>
 800c524:	2100      	movs	r1, #0
 800c526:	7011      	strb	r1, [r2, #0]
 800c528:	3b01      	subs	r3, #1
 800c52a:	3201      	adds	r2, #1
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	daf9      	bge.n	800c524 <_ZN12FlashManager7IsSetupEv+0x70>
	ReadData(data,SetupAppendAddress,size, false);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	7c9a      	ldrb	r2, [r3, #18]
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2100      	movs	r1, #0
 800c538:	9100      	str	r1, [sp, #0]
 800c53a:	68f9      	ldr	r1, [r7, #12]
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7ff fddf 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c542:	f107 030b 	add.w	r3, r7, #11
 800c546:	697a      	ldr	r2, [r7, #20]
 800c548:	68f9      	ldr	r1, [r7, #12]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f004 fdd9 	bl	8011102 <memcpy>
    return (value==0x00);
 800c550:	7afb      	ldrb	r3, [r7, #11]
 800c552:	2b00      	cmp	r3, #0
 800c554:	bf0c      	ite	eq
 800c556:	2301      	moveq	r3, #1
 800c558:	2300      	movne	r3, #0
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	46b5      	mov	sp, r6
}
 800c55e:	4618      	mov	r0, r3
 800c560:	371c      	adds	r7, #28
 800c562:	46bd      	mov	sp, r7
 800c564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c568 <_ZN12FlashManager18WriteSendPerSecondEh>:
void FlashManager::WriteSendPerSecond(uint8_t count){
 800c568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c56c:	b087      	sub	sp, #28
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	460b      	mov	r3, r1
 800c574:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(SendPerSecondAppendAddress,size, data);
}
 800c576:	466b      	mov	r3, sp
 800c578:	461e      	mov	r6, r3
	size_t size=1;
 800c57a:	2301      	movs	r3, #1
 800c57c:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800c57e:	6979      	ldr	r1, [r7, #20]
 800c580:	460b      	mov	r3, r1
 800c582:	3b01      	subs	r3, #1
 800c584:	613b      	str	r3, [r7, #16]
 800c586:	2300      	movs	r3, #0
 800c588:	4688      	mov	r8, r1
 800c58a:	4699      	mov	r9, r3
 800c58c:	f04f 0200 	mov.w	r2, #0
 800c590:	f04f 0300 	mov.w	r3, #0
 800c594:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c598:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c59c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	461d      	mov	r5, r3
 800c5a6:	f04f 0200 	mov.w	r2, #0
 800c5aa:	f04f 0300 	mov.w	r3, #0
 800c5ae:	00eb      	lsls	r3, r5, #3
 800c5b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c5b4:	00e2      	lsls	r2, r4, #3
 800c5b6:	1dcb      	adds	r3, r1, #7
 800c5b8:	08db      	lsrs	r3, r3, #3
 800c5ba:	00db      	lsls	r3, r3, #3
 800c5bc:	ebad 0d03 	sub.w	sp, sp, r3
 800c5c0:	466b      	mov	r3, sp
 800c5c2:	3300      	adds	r3, #0
 800c5c4:	60fb      	str	r3, [r7, #12]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	460a      	mov	r2, r1
 800c5ca:	1e51      	subs	r1, r2, #1
 800c5cc:	78fa      	ldrb	r2, [r7, #3]
 800c5ce:	701a      	strb	r2, [r3, #0]
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	1e4b      	subs	r3, r1, #1
 800c5d4:	e003      	b.n	800c5de <_ZN12FlashManager18WriteSendPerSecondEh+0x76>
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	7011      	strb	r1, [r2, #0]
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	3201      	adds	r2, #1
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	daf9      	bge.n	800c5d6 <_ZN12FlashManager18WriteSendPerSecondEh+0x6e>
	WriteData(SendPerSecondAppendAddress,size, data);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	7cd9      	ldrb	r1, [r3, #19]
 800c5e6:	697a      	ldr	r2, [r7, #20]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7ff fee6 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800c5f0:	46b5      	mov	sp, r6
}
 800c5f2:	bf00      	nop
 800c5f4:	371c      	adds	r7, #28
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c5fc <_ZN12FlashManager17ReadSendPerSecondEv>:
uint8_t FlashManager::ReadSendPerSecond(){
 800c5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c600:	b089      	sub	sp, #36	@ 0x24
 800c602:	af02      	add	r7, sp, #8
 800c604:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0XFF};
	ReadData(data,SendPerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800c606:	466b      	mov	r3, sp
 800c608:	461e      	mov	r6, r3
	size_t size=1;
 800c60a:	2301      	movs	r3, #1
 800c60c:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0XFF};
 800c60e:	6979      	ldr	r1, [r7, #20]
 800c610:	460b      	mov	r3, r1
 800c612:	3b01      	subs	r3, #1
 800c614:	613b      	str	r3, [r7, #16]
 800c616:	2300      	movs	r3, #0
 800c618:	4688      	mov	r8, r1
 800c61a:	4699      	mov	r9, r3
 800c61c:	f04f 0200 	mov.w	r2, #0
 800c620:	f04f 0300 	mov.w	r3, #0
 800c624:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c628:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c62c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c630:	2300      	movs	r3, #0
 800c632:	460c      	mov	r4, r1
 800c634:	461d      	mov	r5, r3
 800c636:	f04f 0200 	mov.w	r2, #0
 800c63a:	f04f 0300 	mov.w	r3, #0
 800c63e:	00eb      	lsls	r3, r5, #3
 800c640:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c644:	00e2      	lsls	r2, r4, #3
 800c646:	1dcb      	adds	r3, r1, #7
 800c648:	08db      	lsrs	r3, r3, #3
 800c64a:	00db      	lsls	r3, r3, #3
 800c64c:	ebad 0d03 	sub.w	sp, sp, r3
 800c650:	ab02      	add	r3, sp, #8
 800c652:	3300      	adds	r3, #0
 800c654:	60fb      	str	r3, [r7, #12]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	460a      	mov	r2, r1
 800c65a:	1e51      	subs	r1, r2, #1
 800c65c:	22ff      	movs	r2, #255	@ 0xff
 800c65e:	701a      	strb	r2, [r3, #0]
 800c660:	1c5a      	adds	r2, r3, #1
 800c662:	1e4b      	subs	r3, r1, #1
 800c664:	e003      	b.n	800c66e <_ZN12FlashManager17ReadSendPerSecondEv+0x72>
 800c666:	2100      	movs	r1, #0
 800c668:	7011      	strb	r1, [r2, #0]
 800c66a:	3b01      	subs	r3, #1
 800c66c:	3201      	adds	r2, #1
 800c66e:	2b00      	cmp	r3, #0
 800c670:	daf9      	bge.n	800c666 <_ZN12FlashManager17ReadSendPerSecondEv+0x6a>
	ReadData(data,SendPerSecondAppendAddress,size, false);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	7cda      	ldrb	r2, [r3, #19]
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	2100      	movs	r1, #0
 800c67a:	9100      	str	r1, [sp, #0]
 800c67c:	68f9      	ldr	r1, [r7, #12]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7ff fd3e 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c684:	f107 030b 	add.w	r3, r7, #11
 800c688:	697a      	ldr	r2, [r7, #20]
 800c68a:	68f9      	ldr	r1, [r7, #12]
 800c68c:	4618      	mov	r0, r3
 800c68e:	f004 fd38 	bl	8011102 <memcpy>
    return value;
 800c692:	7afb      	ldrb	r3, [r7, #11]
 800c694:	46b5      	mov	sp, r6
}
 800c696:	4618      	mov	r0, r3
 800c698:	371c      	adds	r7, #28
 800c69a:	46bd      	mov	sp, r7
 800c69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c6a0 <_ZN12FlashManager22WriteFirstEmgPerSecondEh>:
void FlashManager::WriteFirstEmgPerSecond(uint8_t count){
 800c6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6a4:	b087      	sub	sp, #28
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(FirstEmgPerSecondAppendAddress,size, data);
}
 800c6ae:	466b      	mov	r3, sp
 800c6b0:	461e      	mov	r6, r3
	size_t size=1;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800c6b6:	6979      	ldr	r1, [r7, #20]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	613b      	str	r3, [r7, #16]
 800c6be:	2300      	movs	r3, #0
 800c6c0:	4688      	mov	r8, r1
 800c6c2:	4699      	mov	r9, r3
 800c6c4:	f04f 0200 	mov.w	r2, #0
 800c6c8:	f04f 0300 	mov.w	r3, #0
 800c6cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c6d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c6d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c6d8:	2300      	movs	r3, #0
 800c6da:	460c      	mov	r4, r1
 800c6dc:	461d      	mov	r5, r3
 800c6de:	f04f 0200 	mov.w	r2, #0
 800c6e2:	f04f 0300 	mov.w	r3, #0
 800c6e6:	00eb      	lsls	r3, r5, #3
 800c6e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c6ec:	00e2      	lsls	r2, r4, #3
 800c6ee:	1dcb      	adds	r3, r1, #7
 800c6f0:	08db      	lsrs	r3, r3, #3
 800c6f2:	00db      	lsls	r3, r3, #3
 800c6f4:	ebad 0d03 	sub.w	sp, sp, r3
 800c6f8:	466b      	mov	r3, sp
 800c6fa:	3300      	adds	r3, #0
 800c6fc:	60fb      	str	r3, [r7, #12]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	460a      	mov	r2, r1
 800c702:	1e51      	subs	r1, r2, #1
 800c704:	78fa      	ldrb	r2, [r7, #3]
 800c706:	701a      	strb	r2, [r3, #0]
 800c708:	1c5a      	adds	r2, r3, #1
 800c70a:	1e4b      	subs	r3, r1, #1
 800c70c:	e003      	b.n	800c716 <_ZN12FlashManager22WriteFirstEmgPerSecondEh+0x76>
 800c70e:	2100      	movs	r1, #0
 800c710:	7011      	strb	r1, [r2, #0]
 800c712:	3b01      	subs	r3, #1
 800c714:	3201      	adds	r2, #1
 800c716:	2b00      	cmp	r3, #0
 800c718:	daf9      	bge.n	800c70e <_ZN12FlashManager22WriteFirstEmgPerSecondEh+0x6e>
	WriteData(FirstEmgPerSecondAppendAddress,size, data);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	7d19      	ldrb	r1, [r3, #20]
 800c71e:	697a      	ldr	r2, [r7, #20]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7ff fe4a 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800c728:	46b5      	mov	sp, r6
}
 800c72a:	bf00      	nop
 800c72c:	371c      	adds	r7, #28
 800c72e:	46bd      	mov	sp, r7
 800c730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c734 <_ZN12FlashManager21ReadFirstEmgPerSecondEv>:
uint8_t FlashManager::ReadFirstEmgPerSecond(){
 800c734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c738:	b089      	sub	sp, #36	@ 0x24
 800c73a:	af02      	add	r7, sp, #8
 800c73c:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,FirstEmgPerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800c73e:	466b      	mov	r3, sp
 800c740:	461e      	mov	r6, r3
	size_t size=1;
 800c742:	2301      	movs	r3, #1
 800c744:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800c746:	6979      	ldr	r1, [r7, #20]
 800c748:	460b      	mov	r3, r1
 800c74a:	3b01      	subs	r3, #1
 800c74c:	613b      	str	r3, [r7, #16]
 800c74e:	2300      	movs	r3, #0
 800c750:	4688      	mov	r8, r1
 800c752:	4699      	mov	r9, r3
 800c754:	f04f 0200 	mov.w	r2, #0
 800c758:	f04f 0300 	mov.w	r3, #0
 800c75c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c760:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c764:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c768:	2300      	movs	r3, #0
 800c76a:	460c      	mov	r4, r1
 800c76c:	461d      	mov	r5, r3
 800c76e:	f04f 0200 	mov.w	r2, #0
 800c772:	f04f 0300 	mov.w	r3, #0
 800c776:	00eb      	lsls	r3, r5, #3
 800c778:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c77c:	00e2      	lsls	r2, r4, #3
 800c77e:	1dcb      	adds	r3, r1, #7
 800c780:	08db      	lsrs	r3, r3, #3
 800c782:	00db      	lsls	r3, r3, #3
 800c784:	ebad 0d03 	sub.w	sp, sp, r3
 800c788:	ab02      	add	r3, sp, #8
 800c78a:	3300      	adds	r3, #0
 800c78c:	60fb      	str	r3, [r7, #12]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	460a      	mov	r2, r1
 800c792:	1e51      	subs	r1, r2, #1
 800c794:	22ff      	movs	r2, #255	@ 0xff
 800c796:	701a      	strb	r2, [r3, #0]
 800c798:	1c5a      	adds	r2, r3, #1
 800c79a:	1e4b      	subs	r3, r1, #1
 800c79c:	e003      	b.n	800c7a6 <_ZN12FlashManager21ReadFirstEmgPerSecondEv+0x72>
 800c79e:	2100      	movs	r1, #0
 800c7a0:	7011      	strb	r1, [r2, #0]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	3201      	adds	r2, #1
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	daf9      	bge.n	800c79e <_ZN12FlashManager21ReadFirstEmgPerSecondEv+0x6a>
	ReadData(data,FirstEmgPerSecondAppendAddress,size, false);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	7d1a      	ldrb	r2, [r3, #20]
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	9100      	str	r1, [sp, #0]
 800c7b4:	68f9      	ldr	r1, [r7, #12]
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f7ff fca2 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c7bc:	f107 030b 	add.w	r3, r7, #11
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	68f9      	ldr	r1, [r7, #12]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f004 fc9c 	bl	8011102 <memcpy>
    return value;
 800c7ca:	7afb      	ldrb	r3, [r7, #11]
 800c7cc:	46b5      	mov	sp, r6
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	371c      	adds	r7, #28
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c7d8 <_ZN12FlashManager23WriteSecondEmgPerSecondEh>:
void FlashManager::WriteSecondEmgPerSecond(uint8_t count){
 800c7d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7dc:	b087      	sub	sp, #28
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(SecondEmgPerSecondAppendAddress,size, data);
}
 800c7e6:	466b      	mov	r3, sp
 800c7e8:	461e      	mov	r6, r3
	size_t size=1;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800c7ee:	6979      	ldr	r1, [r7, #20]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	613b      	str	r3, [r7, #16]
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	4688      	mov	r8, r1
 800c7fa:	4699      	mov	r9, r3
 800c7fc:	f04f 0200 	mov.w	r2, #0
 800c800:	f04f 0300 	mov.w	r3, #0
 800c804:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c808:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c80c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c810:	2300      	movs	r3, #0
 800c812:	460c      	mov	r4, r1
 800c814:	461d      	mov	r5, r3
 800c816:	f04f 0200 	mov.w	r2, #0
 800c81a:	f04f 0300 	mov.w	r3, #0
 800c81e:	00eb      	lsls	r3, r5, #3
 800c820:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c824:	00e2      	lsls	r2, r4, #3
 800c826:	1dcb      	adds	r3, r1, #7
 800c828:	08db      	lsrs	r3, r3, #3
 800c82a:	00db      	lsls	r3, r3, #3
 800c82c:	ebad 0d03 	sub.w	sp, sp, r3
 800c830:	466b      	mov	r3, sp
 800c832:	3300      	adds	r3, #0
 800c834:	60fb      	str	r3, [r7, #12]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	460a      	mov	r2, r1
 800c83a:	1e51      	subs	r1, r2, #1
 800c83c:	78fa      	ldrb	r2, [r7, #3]
 800c83e:	701a      	strb	r2, [r3, #0]
 800c840:	1c5a      	adds	r2, r3, #1
 800c842:	1e4b      	subs	r3, r1, #1
 800c844:	e003      	b.n	800c84e <_ZN12FlashManager23WriteSecondEmgPerSecondEh+0x76>
 800c846:	2100      	movs	r1, #0
 800c848:	7011      	strb	r1, [r2, #0]
 800c84a:	3b01      	subs	r3, #1
 800c84c:	3201      	adds	r2, #1
 800c84e:	2b00      	cmp	r3, #0
 800c850:	daf9      	bge.n	800c846 <_ZN12FlashManager23WriteSecondEmgPerSecondEh+0x6e>
	WriteData(SecondEmgPerSecondAppendAddress,size, data);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	7d59      	ldrb	r1, [r3, #21]
 800c856:	697a      	ldr	r2, [r7, #20]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7ff fdae 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800c860:	46b5      	mov	sp, r6
}
 800c862:	bf00      	nop
 800c864:	371c      	adds	r7, #28
 800c866:	46bd      	mov	sp, r7
 800c868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c86c <_ZN12FlashManager22ReadSecondEmgPerSecondEv>:
uint8_t FlashManager::ReadSecondEmgPerSecond(){
 800c86c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c870:	b089      	sub	sp, #36	@ 0x24
 800c872:	af02      	add	r7, sp, #8
 800c874:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,SecondEmgPerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800c876:	466b      	mov	r3, sp
 800c878:	461e      	mov	r6, r3
	size_t size=1;
 800c87a:	2301      	movs	r3, #1
 800c87c:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800c87e:	6979      	ldr	r1, [r7, #20]
 800c880:	460b      	mov	r3, r1
 800c882:	3b01      	subs	r3, #1
 800c884:	613b      	str	r3, [r7, #16]
 800c886:	2300      	movs	r3, #0
 800c888:	4688      	mov	r8, r1
 800c88a:	4699      	mov	r9, r3
 800c88c:	f04f 0200 	mov.w	r2, #0
 800c890:	f04f 0300 	mov.w	r3, #0
 800c894:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c898:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c89c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	460c      	mov	r4, r1
 800c8a4:	461d      	mov	r5, r3
 800c8a6:	f04f 0200 	mov.w	r2, #0
 800c8aa:	f04f 0300 	mov.w	r3, #0
 800c8ae:	00eb      	lsls	r3, r5, #3
 800c8b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c8b4:	00e2      	lsls	r2, r4, #3
 800c8b6:	1dcb      	adds	r3, r1, #7
 800c8b8:	08db      	lsrs	r3, r3, #3
 800c8ba:	00db      	lsls	r3, r3, #3
 800c8bc:	ebad 0d03 	sub.w	sp, sp, r3
 800c8c0:	ab02      	add	r3, sp, #8
 800c8c2:	3300      	adds	r3, #0
 800c8c4:	60fb      	str	r3, [r7, #12]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	460a      	mov	r2, r1
 800c8ca:	1e51      	subs	r1, r2, #1
 800c8cc:	22ff      	movs	r2, #255	@ 0xff
 800c8ce:	701a      	strb	r2, [r3, #0]
 800c8d0:	1c5a      	adds	r2, r3, #1
 800c8d2:	1e4b      	subs	r3, r1, #1
 800c8d4:	e003      	b.n	800c8de <_ZN12FlashManager22ReadSecondEmgPerSecondEv+0x72>
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	7011      	strb	r1, [r2, #0]
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	3201      	adds	r2, #1
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	daf9      	bge.n	800c8d6 <_ZN12FlashManager22ReadSecondEmgPerSecondEv+0x6a>
	ReadData(data,SecondEmgPerSecondAppendAddress,size, false);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	7d5a      	ldrb	r2, [r3, #21]
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	9100      	str	r1, [sp, #0]
 800c8ec:	68f9      	ldr	r1, [r7, #12]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7ff fc06 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c8f4:	f107 030b 	add.w	r3, r7, #11
 800c8f8:	697a      	ldr	r2, [r7, #20]
 800c8fa:	68f9      	ldr	r1, [r7, #12]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f004 fc00 	bl	8011102 <memcpy>
    return value;
 800c902:	7afb      	ldrb	r3, [r7, #11]
 800c904:	46b5      	mov	sp, r6
}
 800c906:	4618      	mov	r0, r3
 800c908:	371c      	adds	r7, #28
 800c90a:	46bd      	mov	sp, r7
 800c90c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c910 <_ZN12FlashManager20WriteVolumePerSecondEh>:
void FlashManager::WriteVolumePerSecond(uint8_t count){
 800c910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c914:	b087      	sub	sp, #28
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
 800c91a:	460b      	mov	r3, r1
 800c91c:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(VolumePerSecondAppendAddress,size, data);
}
 800c91e:	466b      	mov	r3, sp
 800c920:	461e      	mov	r6, r3
	size_t size=1;
 800c922:	2301      	movs	r3, #1
 800c924:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800c926:	6979      	ldr	r1, [r7, #20]
 800c928:	460b      	mov	r3, r1
 800c92a:	3b01      	subs	r3, #1
 800c92c:	613b      	str	r3, [r7, #16]
 800c92e:	2300      	movs	r3, #0
 800c930:	4688      	mov	r8, r1
 800c932:	4699      	mov	r9, r3
 800c934:	f04f 0200 	mov.w	r2, #0
 800c938:	f04f 0300 	mov.w	r3, #0
 800c93c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c940:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c944:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c948:	2300      	movs	r3, #0
 800c94a:	460c      	mov	r4, r1
 800c94c:	461d      	mov	r5, r3
 800c94e:	f04f 0200 	mov.w	r2, #0
 800c952:	f04f 0300 	mov.w	r3, #0
 800c956:	00eb      	lsls	r3, r5, #3
 800c958:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c95c:	00e2      	lsls	r2, r4, #3
 800c95e:	1dcb      	adds	r3, r1, #7
 800c960:	08db      	lsrs	r3, r3, #3
 800c962:	00db      	lsls	r3, r3, #3
 800c964:	ebad 0d03 	sub.w	sp, sp, r3
 800c968:	466b      	mov	r3, sp
 800c96a:	3300      	adds	r3, #0
 800c96c:	60fb      	str	r3, [r7, #12]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	460a      	mov	r2, r1
 800c972:	1e51      	subs	r1, r2, #1
 800c974:	78fa      	ldrb	r2, [r7, #3]
 800c976:	701a      	strb	r2, [r3, #0]
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	1e4b      	subs	r3, r1, #1
 800c97c:	e003      	b.n	800c986 <_ZN12FlashManager20WriteVolumePerSecondEh+0x76>
 800c97e:	2100      	movs	r1, #0
 800c980:	7011      	strb	r1, [r2, #0]
 800c982:	3b01      	subs	r3, #1
 800c984:	3201      	adds	r2, #1
 800c986:	2b00      	cmp	r3, #0
 800c988:	daf9      	bge.n	800c97e <_ZN12FlashManager20WriteVolumePerSecondEh+0x6e>
	WriteData(VolumePerSecondAppendAddress,size, data);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	7d99      	ldrb	r1, [r3, #22]
 800c98e:	697a      	ldr	r2, [r7, #20]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f7ff fd12 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800c998:	46b5      	mov	sp, r6
}
 800c99a:	bf00      	nop
 800c99c:	371c      	adds	r7, #28
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c9a4 <_ZN12FlashManager19ReadVolumePerSecondEv>:
uint8_t FlashManager::ReadVolumePerSecond(){
 800c9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9a8:	b089      	sub	sp, #36	@ 0x24
 800c9aa:	af02      	add	r7, sp, #8
 800c9ac:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,VolumePerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800c9ae:	466b      	mov	r3, sp
 800c9b0:	461e      	mov	r6, r3
	size_t size=1;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800c9b6:	6979      	ldr	r1, [r7, #20]
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	613b      	str	r3, [r7, #16]
 800c9be:	2300      	movs	r3, #0
 800c9c0:	4688      	mov	r8, r1
 800c9c2:	4699      	mov	r9, r3
 800c9c4:	f04f 0200 	mov.w	r2, #0
 800c9c8:	f04f 0300 	mov.w	r3, #0
 800c9cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c9d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c9d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c9d8:	2300      	movs	r3, #0
 800c9da:	460c      	mov	r4, r1
 800c9dc:	461d      	mov	r5, r3
 800c9de:	f04f 0200 	mov.w	r2, #0
 800c9e2:	f04f 0300 	mov.w	r3, #0
 800c9e6:	00eb      	lsls	r3, r5, #3
 800c9e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c9ec:	00e2      	lsls	r2, r4, #3
 800c9ee:	1dcb      	adds	r3, r1, #7
 800c9f0:	08db      	lsrs	r3, r3, #3
 800c9f2:	00db      	lsls	r3, r3, #3
 800c9f4:	ebad 0d03 	sub.w	sp, sp, r3
 800c9f8:	ab02      	add	r3, sp, #8
 800c9fa:	3300      	adds	r3, #0
 800c9fc:	60fb      	str	r3, [r7, #12]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	460a      	mov	r2, r1
 800ca02:	1e51      	subs	r1, r2, #1
 800ca04:	22ff      	movs	r2, #255	@ 0xff
 800ca06:	701a      	strb	r2, [r3, #0]
 800ca08:	1c5a      	adds	r2, r3, #1
 800ca0a:	1e4b      	subs	r3, r1, #1
 800ca0c:	e003      	b.n	800ca16 <_ZN12FlashManager19ReadVolumePerSecondEv+0x72>
 800ca0e:	2100      	movs	r1, #0
 800ca10:	7011      	strb	r1, [r2, #0]
 800ca12:	3b01      	subs	r3, #1
 800ca14:	3201      	adds	r2, #1
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	daf9      	bge.n	800ca0e <_ZN12FlashManager19ReadVolumePerSecondEv+0x6a>
	ReadData(data,VolumePerSecondAppendAddress,size, false);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7d9a      	ldrb	r2, [r3, #22]
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	2100      	movs	r1, #0
 800ca22:	9100      	str	r1, [sp, #0]
 800ca24:	68f9      	ldr	r1, [r7, #12]
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7ff fb6a 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800ca2c:	f107 030b 	add.w	r3, r7, #11
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	68f9      	ldr	r1, [r7, #12]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f004 fb64 	bl	8011102 <memcpy>
    return value;
 800ca3a:	7afb      	ldrb	r3, [r7, #11]
 800ca3c:	46b5      	mov	sp, r6
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	371c      	adds	r7, #28
 800ca42:	46bd      	mov	sp, r7
 800ca44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ca48 <_ZN12FlashManager18WriteFlowPerSecondEh>:
void FlashManager::WriteFlowPerSecond(uint8_t count){
 800ca48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca4c:	b087      	sub	sp, #28
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	460b      	mov	r3, r1
 800ca54:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(FlowPerSecondAppendAddress,size, data);
}
 800ca56:	466b      	mov	r3, sp
 800ca58:	461e      	mov	r6, r3
	size_t size=1;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800ca5e:	6979      	ldr	r1, [r7, #20]
 800ca60:	460b      	mov	r3, r1
 800ca62:	3b01      	subs	r3, #1
 800ca64:	613b      	str	r3, [r7, #16]
 800ca66:	2300      	movs	r3, #0
 800ca68:	4688      	mov	r8, r1
 800ca6a:	4699      	mov	r9, r3
 800ca6c:	f04f 0200 	mov.w	r2, #0
 800ca70:	f04f 0300 	mov.w	r3, #0
 800ca74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ca78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ca7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ca80:	2300      	movs	r3, #0
 800ca82:	460c      	mov	r4, r1
 800ca84:	461d      	mov	r5, r3
 800ca86:	f04f 0200 	mov.w	r2, #0
 800ca8a:	f04f 0300 	mov.w	r3, #0
 800ca8e:	00eb      	lsls	r3, r5, #3
 800ca90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca94:	00e2      	lsls	r2, r4, #3
 800ca96:	1dcb      	adds	r3, r1, #7
 800ca98:	08db      	lsrs	r3, r3, #3
 800ca9a:	00db      	lsls	r3, r3, #3
 800ca9c:	ebad 0d03 	sub.w	sp, sp, r3
 800caa0:	466b      	mov	r3, sp
 800caa2:	3300      	adds	r3, #0
 800caa4:	60fb      	str	r3, [r7, #12]
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	460a      	mov	r2, r1
 800caaa:	1e51      	subs	r1, r2, #1
 800caac:	78fa      	ldrb	r2, [r7, #3]
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	1c5a      	adds	r2, r3, #1
 800cab2:	1e4b      	subs	r3, r1, #1
 800cab4:	e003      	b.n	800cabe <_ZN12FlashManager18WriteFlowPerSecondEh+0x76>
 800cab6:	2100      	movs	r1, #0
 800cab8:	7011      	strb	r1, [r2, #0]
 800caba:	3b01      	subs	r3, #1
 800cabc:	3201      	adds	r2, #1
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	daf9      	bge.n	800cab6 <_ZN12FlashManager18WriteFlowPerSecondEh+0x6e>
	WriteData(FlowPerSecondAppendAddress,size, data);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	7dd9      	ldrb	r1, [r3, #23]
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f7ff fc76 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800cad0:	46b5      	mov	sp, r6
}
 800cad2:	bf00      	nop
 800cad4:	371c      	adds	r7, #28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cadc <_ZN12FlashManager17ReadFlowPerSecondEv>:
uint8_t FlashManager::ReadFlowPerSecond(){
 800cadc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cae0:	b089      	sub	sp, #36	@ 0x24
 800cae2:	af02      	add	r7, sp, #8
 800cae4:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,FlowPerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800cae6:	466b      	mov	r3, sp
 800cae8:	461e      	mov	r6, r3
	size_t size=1;
 800caea:	2301      	movs	r3, #1
 800caec:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800caee:	6979      	ldr	r1, [r7, #20]
 800caf0:	460b      	mov	r3, r1
 800caf2:	3b01      	subs	r3, #1
 800caf4:	613b      	str	r3, [r7, #16]
 800caf6:	2300      	movs	r3, #0
 800caf8:	4688      	mov	r8, r1
 800cafa:	4699      	mov	r9, r3
 800cafc:	f04f 0200 	mov.w	r2, #0
 800cb00:	f04f 0300 	mov.w	r3, #0
 800cb04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb10:	2300      	movs	r3, #0
 800cb12:	460c      	mov	r4, r1
 800cb14:	461d      	mov	r5, r3
 800cb16:	f04f 0200 	mov.w	r2, #0
 800cb1a:	f04f 0300 	mov.w	r3, #0
 800cb1e:	00eb      	lsls	r3, r5, #3
 800cb20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cb24:	00e2      	lsls	r2, r4, #3
 800cb26:	1dcb      	adds	r3, r1, #7
 800cb28:	08db      	lsrs	r3, r3, #3
 800cb2a:	00db      	lsls	r3, r3, #3
 800cb2c:	ebad 0d03 	sub.w	sp, sp, r3
 800cb30:	ab02      	add	r3, sp, #8
 800cb32:	3300      	adds	r3, #0
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	460a      	mov	r2, r1
 800cb3a:	1e51      	subs	r1, r2, #1
 800cb3c:	22ff      	movs	r2, #255	@ 0xff
 800cb3e:	701a      	strb	r2, [r3, #0]
 800cb40:	1c5a      	adds	r2, r3, #1
 800cb42:	1e4b      	subs	r3, r1, #1
 800cb44:	e003      	b.n	800cb4e <_ZN12FlashManager17ReadFlowPerSecondEv+0x72>
 800cb46:	2100      	movs	r1, #0
 800cb48:	7011      	strb	r1, [r2, #0]
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	3201      	adds	r2, #1
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	daf9      	bge.n	800cb46 <_ZN12FlashManager17ReadFlowPerSecondEv+0x6a>
	ReadData(data,FlowPerSecondAppendAddress,size, false);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	7dda      	ldrb	r2, [r3, #23]
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	2100      	movs	r1, #0
 800cb5a:	9100      	str	r1, [sp, #0]
 800cb5c:	68f9      	ldr	r1, [r7, #12]
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7ff face 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800cb64:	f107 030b 	add.w	r3, r7, #11
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	68f9      	ldr	r1, [r7, #12]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f004 fac8 	bl	8011102 <memcpy>
    return value;
 800cb72:	7afb      	ldrb	r3, [r7, #11]
 800cb74:	46b5      	mov	sp, r6
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	371c      	adds	r7, #28
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cb80 <_ZN12FlashManager19WritePumpMaxRunTimeEh>:
void FlashManager::WritePumpMaxRunTime(uint8_t second){
 800cb80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb84:	b087      	sub	sp, #28
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={second};
	WriteData(PumpMaxRunTimeAppendAddress,size, data);
}
 800cb8e:	466b      	mov	r3, sp
 800cb90:	461e      	mov	r6, r3
	size_t size=1;
 800cb92:	2301      	movs	r3, #1
 800cb94:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={second};
 800cb96:	6979      	ldr	r1, [r7, #20]
 800cb98:	460b      	mov	r3, r1
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	613b      	str	r3, [r7, #16]
 800cb9e:	2300      	movs	r3, #0
 800cba0:	4688      	mov	r8, r1
 800cba2:	4699      	mov	r9, r3
 800cba4:	f04f 0200 	mov.w	r2, #0
 800cba8:	f04f 0300 	mov.w	r3, #0
 800cbac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cbb0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cbb4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cbb8:	2300      	movs	r3, #0
 800cbba:	460c      	mov	r4, r1
 800cbbc:	461d      	mov	r5, r3
 800cbbe:	f04f 0200 	mov.w	r2, #0
 800cbc2:	f04f 0300 	mov.w	r3, #0
 800cbc6:	00eb      	lsls	r3, r5, #3
 800cbc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cbcc:	00e2      	lsls	r2, r4, #3
 800cbce:	1dcb      	adds	r3, r1, #7
 800cbd0:	08db      	lsrs	r3, r3, #3
 800cbd2:	00db      	lsls	r3, r3, #3
 800cbd4:	ebad 0d03 	sub.w	sp, sp, r3
 800cbd8:	466b      	mov	r3, sp
 800cbda:	3300      	adds	r3, #0
 800cbdc:	60fb      	str	r3, [r7, #12]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	460a      	mov	r2, r1
 800cbe2:	1e51      	subs	r1, r2, #1
 800cbe4:	78fa      	ldrb	r2, [r7, #3]
 800cbe6:	701a      	strb	r2, [r3, #0]
 800cbe8:	1c5a      	adds	r2, r3, #1
 800cbea:	1e4b      	subs	r3, r1, #1
 800cbec:	e003      	b.n	800cbf6 <_ZN12FlashManager19WritePumpMaxRunTimeEh+0x76>
 800cbee:	2100      	movs	r1, #0
 800cbf0:	7011      	strb	r1, [r2, #0]
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	3201      	adds	r2, #1
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	daf9      	bge.n	800cbee <_ZN12FlashManager19WritePumpMaxRunTimeEh+0x6e>
	WriteData(PumpMaxRunTimeAppendAddress,size, data);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	7e19      	ldrb	r1, [r3, #24]
 800cbfe:	697a      	ldr	r2, [r7, #20]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7ff fbda 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800cc08:	46b5      	mov	sp, r6
}
 800cc0a:	bf00      	nop
 800cc0c:	371c      	adds	r7, #28
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cc14 <_ZN12FlashManager18ReadPumpMaxRunTimeEv>:
uint8_t FlashManager::ReadPumpMaxRunTime(){
 800cc14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc18:	b089      	sub	sp, #36	@ 0x24
 800cc1a:	af02      	add	r7, sp, #8
 800cc1c:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,PumpMaxRunTimeAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800cc1e:	466b      	mov	r3, sp
 800cc20:	461e      	mov	r6, r3
	size_t size=1;
 800cc22:	2301      	movs	r3, #1
 800cc24:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800cc26:	6979      	ldr	r1, [r7, #20]
 800cc28:	460b      	mov	r3, r1
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	613b      	str	r3, [r7, #16]
 800cc2e:	2300      	movs	r3, #0
 800cc30:	4688      	mov	r8, r1
 800cc32:	4699      	mov	r9, r3
 800cc34:	f04f 0200 	mov.w	r2, #0
 800cc38:	f04f 0300 	mov.w	r3, #0
 800cc3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cc40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cc44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cc48:	2300      	movs	r3, #0
 800cc4a:	460c      	mov	r4, r1
 800cc4c:	461d      	mov	r5, r3
 800cc4e:	f04f 0200 	mov.w	r2, #0
 800cc52:	f04f 0300 	mov.w	r3, #0
 800cc56:	00eb      	lsls	r3, r5, #3
 800cc58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc5c:	00e2      	lsls	r2, r4, #3
 800cc5e:	1dcb      	adds	r3, r1, #7
 800cc60:	08db      	lsrs	r3, r3, #3
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	ebad 0d03 	sub.w	sp, sp, r3
 800cc68:	ab02      	add	r3, sp, #8
 800cc6a:	3300      	adds	r3, #0
 800cc6c:	60fb      	str	r3, [r7, #12]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	460a      	mov	r2, r1
 800cc72:	1e51      	subs	r1, r2, #1
 800cc74:	22ff      	movs	r2, #255	@ 0xff
 800cc76:	701a      	strb	r2, [r3, #0]
 800cc78:	1c5a      	adds	r2, r3, #1
 800cc7a:	1e4b      	subs	r3, r1, #1
 800cc7c:	e003      	b.n	800cc86 <_ZN12FlashManager18ReadPumpMaxRunTimeEv+0x72>
 800cc7e:	2100      	movs	r1, #0
 800cc80:	7011      	strb	r1, [r2, #0]
 800cc82:	3b01      	subs	r3, #1
 800cc84:	3201      	adds	r2, #1
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	daf9      	bge.n	800cc7e <_ZN12FlashManager18ReadPumpMaxRunTimeEv+0x6a>
	ReadData(data,PumpMaxRunTimeAppendAddress,size, false);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	7e1a      	ldrb	r2, [r3, #24]
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	2100      	movs	r1, #0
 800cc92:	9100      	str	r1, [sp, #0]
 800cc94:	68f9      	ldr	r1, [r7, #12]
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7ff fa32 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800cc9c:	f107 030b 	add.w	r3, r7, #11
 800cca0:	697a      	ldr	r2, [r7, #20]
 800cca2:	68f9      	ldr	r1, [r7, #12]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f004 fa2c 	bl	8011102 <memcpy>
    return value;
 800ccaa:	7afb      	ldrb	r3, [r7, #11]
 800ccac:	46b5      	mov	sp, r6
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	371c      	adds	r7, #28
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ccb8 <_ZN12FlashManager20WriteValveMaxRunTimeEh>:
void FlashManager::WriteValveMaxRunTime(uint8_t second){
 800ccb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccbc:	b087      	sub	sp, #28
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={second};
	WriteData(ValveMaxRunTimeAppendAddress,size, data);
}
 800ccc6:	466b      	mov	r3, sp
 800ccc8:	461e      	mov	r6, r3
	size_t size=1;
 800ccca:	2301      	movs	r3, #1
 800cccc:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={second};
 800ccce:	6979      	ldr	r1, [r7, #20]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	3b01      	subs	r3, #1
 800ccd4:	613b      	str	r3, [r7, #16]
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	4688      	mov	r8, r1
 800ccda:	4699      	mov	r9, r3
 800ccdc:	f04f 0200 	mov.w	r2, #0
 800cce0:	f04f 0300 	mov.w	r3, #0
 800cce4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cce8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ccec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	461d      	mov	r5, r3
 800ccf6:	f04f 0200 	mov.w	r2, #0
 800ccfa:	f04f 0300 	mov.w	r3, #0
 800ccfe:	00eb      	lsls	r3, r5, #3
 800cd00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd04:	00e2      	lsls	r2, r4, #3
 800cd06:	1dcb      	adds	r3, r1, #7
 800cd08:	08db      	lsrs	r3, r3, #3
 800cd0a:	00db      	lsls	r3, r3, #3
 800cd0c:	ebad 0d03 	sub.w	sp, sp, r3
 800cd10:	466b      	mov	r3, sp
 800cd12:	3300      	adds	r3, #0
 800cd14:	60fb      	str	r3, [r7, #12]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	460a      	mov	r2, r1
 800cd1a:	1e51      	subs	r1, r2, #1
 800cd1c:	78fa      	ldrb	r2, [r7, #3]
 800cd1e:	701a      	strb	r2, [r3, #0]
 800cd20:	1c5a      	adds	r2, r3, #1
 800cd22:	1e4b      	subs	r3, r1, #1
 800cd24:	e003      	b.n	800cd2e <_ZN12FlashManager20WriteValveMaxRunTimeEh+0x76>
 800cd26:	2100      	movs	r1, #0
 800cd28:	7011      	strb	r1, [r2, #0]
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	3201      	adds	r2, #1
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	daf9      	bge.n	800cd26 <_ZN12FlashManager20WriteValveMaxRunTimeEh+0x6e>
	WriteData(ValveMaxRunTimeAppendAddress,size, data);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	7e59      	ldrb	r1, [r3, #25]
 800cd36:	697a      	ldr	r2, [r7, #20]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7ff fb3e 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800cd40:	46b5      	mov	sp, r6
}
 800cd42:	bf00      	nop
 800cd44:	371c      	adds	r7, #28
 800cd46:	46bd      	mov	sp, r7
 800cd48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cd4c <_ZN12FlashManager19ReadValveMaxRunTimeEv>:
uint8_t FlashManager::ReadValveMaxRunTime(){
 800cd4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd50:	b089      	sub	sp, #36	@ 0x24
 800cd52:	af02      	add	r7, sp, #8
 800cd54:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,ValveMaxRunTimeAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800cd56:	466b      	mov	r3, sp
 800cd58:	461e      	mov	r6, r3
	size_t size=1;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800cd5e:	6979      	ldr	r1, [r7, #20]
 800cd60:	460b      	mov	r3, r1
 800cd62:	3b01      	subs	r3, #1
 800cd64:	613b      	str	r3, [r7, #16]
 800cd66:	2300      	movs	r3, #0
 800cd68:	4688      	mov	r8, r1
 800cd6a:	4699      	mov	r9, r3
 800cd6c:	f04f 0200 	mov.w	r2, #0
 800cd70:	f04f 0300 	mov.w	r3, #0
 800cd74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cd78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cd7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cd80:	2300      	movs	r3, #0
 800cd82:	460c      	mov	r4, r1
 800cd84:	461d      	mov	r5, r3
 800cd86:	f04f 0200 	mov.w	r2, #0
 800cd8a:	f04f 0300 	mov.w	r3, #0
 800cd8e:	00eb      	lsls	r3, r5, #3
 800cd90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd94:	00e2      	lsls	r2, r4, #3
 800cd96:	1dcb      	adds	r3, r1, #7
 800cd98:	08db      	lsrs	r3, r3, #3
 800cd9a:	00db      	lsls	r3, r3, #3
 800cd9c:	ebad 0d03 	sub.w	sp, sp, r3
 800cda0:	ab02      	add	r3, sp, #8
 800cda2:	3300      	adds	r3, #0
 800cda4:	60fb      	str	r3, [r7, #12]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	460a      	mov	r2, r1
 800cdaa:	1e51      	subs	r1, r2, #1
 800cdac:	22ff      	movs	r2, #255	@ 0xff
 800cdae:	701a      	strb	r2, [r3, #0]
 800cdb0:	1c5a      	adds	r2, r3, #1
 800cdb2:	1e4b      	subs	r3, r1, #1
 800cdb4:	e003      	b.n	800cdbe <_ZN12FlashManager19ReadValveMaxRunTimeEv+0x72>
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	7011      	strb	r1, [r2, #0]
 800cdba:	3b01      	subs	r3, #1
 800cdbc:	3201      	adds	r2, #1
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	daf9      	bge.n	800cdb6 <_ZN12FlashManager19ReadValveMaxRunTimeEv+0x6a>
	ReadData(data,ValveMaxRunTimeAppendAddress,size, false);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	7e5a      	ldrb	r2, [r3, #25]
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	2100      	movs	r1, #0
 800cdca:	9100      	str	r1, [sp, #0]
 800cdcc:	68f9      	ldr	r1, [r7, #12]
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7ff f996 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800cdd4:	f107 030b 	add.w	r3, r7, #11
 800cdd8:	697a      	ldr	r2, [r7, #20]
 800cdda:	68f9      	ldr	r1, [r7, #12]
 800cddc:	4618      	mov	r0, r3
 800cdde:	f004 f990 	bl	8011102 <memcpy>
    return value;
 800cde2:	7afb      	ldrb	r3, [r7, #11]
 800cde4:	46b5      	mov	sp, r6
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	371c      	adds	r7, #28
 800cdea:	46bd      	mov	sp, r7
 800cdec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cdf0 <_ZN12FlashManager13WriteFlowRateEd>:
void FlashManager::WriteFlowRate(double_t rate){
 800cdf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdf4:	b089      	sub	sp, #36	@ 0x24
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	60f8      	str	r0, [r7, #12]
 800cdfa:	ed87 0b00 	vstr	d0, [r7]
	size_t size=8;
    uint8_t data[size];
    memcpy(data, &rate, size);
	WriteData(FlowRateAppendAddress,size, data);
}
 800cdfe:	466b      	mov	r3, sp
 800ce00:	461e      	mov	r6, r3
	size_t size=8;
 800ce02:	2308      	movs	r3, #8
 800ce04:	61fb      	str	r3, [r7, #28]
    uint8_t data[size];
 800ce06:	69f9      	ldr	r1, [r7, #28]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	61bb      	str	r3, [r7, #24]
 800ce0e:	2300      	movs	r3, #0
 800ce10:	4688      	mov	r8, r1
 800ce12:	4699      	mov	r9, r3
 800ce14:	f04f 0200 	mov.w	r2, #0
 800ce18:	f04f 0300 	mov.w	r3, #0
 800ce1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ce20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ce24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ce28:	2300      	movs	r3, #0
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	461d      	mov	r5, r3
 800ce2e:	f04f 0200 	mov.w	r2, #0
 800ce32:	f04f 0300 	mov.w	r3, #0
 800ce36:	00eb      	lsls	r3, r5, #3
 800ce38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ce3c:	00e2      	lsls	r2, r4, #3
 800ce3e:	1dcb      	adds	r3, r1, #7
 800ce40:	08db      	lsrs	r3, r3, #3
 800ce42:	00db      	lsls	r3, r3, #3
 800ce44:	ebad 0d03 	sub.w	sp, sp, r3
 800ce48:	466b      	mov	r3, sp
 800ce4a:	3300      	adds	r3, #0
 800ce4c:	617b      	str	r3, [r7, #20]
    memcpy(data, &rate, size);
 800ce4e:	463b      	mov	r3, r7
 800ce50:	69fa      	ldr	r2, [r7, #28]
 800ce52:	4619      	mov	r1, r3
 800ce54:	6978      	ldr	r0, [r7, #20]
 800ce56:	f004 f954 	bl	8011102 <memcpy>
	WriteData(FlowRateAppendAddress,size, data);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	7b19      	ldrb	r1, [r3, #12]
 800ce5e:	69fa      	ldr	r2, [r7, #28]
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f7ff faaa 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800ce68:	46b5      	mov	sp, r6
}
 800ce6a:	bf00      	nop
 800ce6c:	3724      	adds	r7, #36	@ 0x24
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ce74 <_ZN12FlashManager12ReadFlowRateEv>:
double_t FlashManager::ReadFlowRate(){
 800ce74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce78:	b08b      	sub	sp, #44	@ 0x2c
 800ce7a:	af02      	add	r7, sp, #8
 800ce7c:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FlowRateAppendAddress,size, false);
    double_t value;
    memcpy(&value, data, size);
    return value;
}
 800ce7e:	466b      	mov	r3, sp
 800ce80:	461e      	mov	r6, r3
	size_t size=8;
 800ce82:	2308      	movs	r3, #8
 800ce84:	61fb      	str	r3, [r7, #28]
	uint8_t data[size]={0};
 800ce86:	69f9      	ldr	r1, [r7, #28]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	3b01      	subs	r3, #1
 800ce8c:	61bb      	str	r3, [r7, #24]
 800ce8e:	2300      	movs	r3, #0
 800ce90:	4688      	mov	r8, r1
 800ce92:	4699      	mov	r9, r3
 800ce94:	f04f 0200 	mov.w	r2, #0
 800ce98:	f04f 0300 	mov.w	r3, #0
 800ce9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cea0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cea4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cea8:	2300      	movs	r3, #0
 800ceaa:	460c      	mov	r4, r1
 800ceac:	461d      	mov	r5, r3
 800ceae:	f04f 0200 	mov.w	r2, #0
 800ceb2:	f04f 0300 	mov.w	r3, #0
 800ceb6:	00eb      	lsls	r3, r5, #3
 800ceb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cebc:	00e2      	lsls	r2, r4, #3
 800cebe:	1dcb      	adds	r3, r1, #7
 800cec0:	08db      	lsrs	r3, r3, #3
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	ebad 0d03 	sub.w	sp, sp, r3
 800cec8:	ab02      	add	r3, sp, #8
 800ceca:	3300      	adds	r3, #0
 800cecc:	617b      	str	r3, [r7, #20]
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	460a      	mov	r2, r1
 800ced2:	1e51      	subs	r1, r2, #1
 800ced4:	2200      	movs	r2, #0
 800ced6:	701a      	strb	r2, [r3, #0]
 800ced8:	1c5a      	adds	r2, r3, #1
 800ceda:	1e4b      	subs	r3, r1, #1
 800cedc:	e003      	b.n	800cee6 <_ZN12FlashManager12ReadFlowRateEv+0x72>
 800cede:	2100      	movs	r1, #0
 800cee0:	7011      	strb	r1, [r2, #0]
 800cee2:	3b01      	subs	r3, #1
 800cee4:	3201      	adds	r2, #1
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	daf9      	bge.n	800cede <_ZN12FlashManager12ReadFlowRateEv+0x6a>
	ReadData(data,FlowRateAppendAddress,size, false);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	7b1a      	ldrb	r2, [r3, #12]
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	2100      	movs	r1, #0
 800cef2:	9100      	str	r1, [sp, #0]
 800cef4:	6979      	ldr	r1, [r7, #20]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff f902 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800cefc:	f107 0308 	add.w	r3, r7, #8
 800cf00:	69fa      	ldr	r2, [r7, #28]
 800cf02:	6979      	ldr	r1, [r7, #20]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f004 f8fc 	bl	8011102 <memcpy>
    return value;
 800cf0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf0e:	46b5      	mov	sp, r6
 800cf10:	ec43 2b17 	vmov	d7, r2, r3
}
 800cf14:	eeb0 0a47 	vmov.f32	s0, s14
 800cf18:	eef0 0a67 	vmov.f32	s1, s15
 800cf1c:	3724      	adds	r7, #36	@ 0x24
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cf24 <_ZN12FlashManager15WriteVolumeRateEd>:

void FlashManager::WriteVolumeRate(double_t rate){
 800cf24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf28:	b089      	sub	sp, #36	@ 0x24
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	60f8      	str	r0, [r7, #12]
 800cf2e:	ed87 0b00 	vstr	d0, [r7]
	size_t size=8;
    uint8_t data[size];
    memcpy(data, &rate, size);
	WriteData(VolumeRateAppendAddress, size, data);
}
 800cf32:	466b      	mov	r3, sp
 800cf34:	461e      	mov	r6, r3
	size_t size=8;
 800cf36:	2308      	movs	r3, #8
 800cf38:	61fb      	str	r3, [r7, #28]
    uint8_t data[size];
 800cf3a:	69f9      	ldr	r1, [r7, #28]
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	61bb      	str	r3, [r7, #24]
 800cf42:	2300      	movs	r3, #0
 800cf44:	4688      	mov	r8, r1
 800cf46:	4699      	mov	r9, r3
 800cf48:	f04f 0200 	mov.w	r2, #0
 800cf4c:	f04f 0300 	mov.w	r3, #0
 800cf50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	460c      	mov	r4, r1
 800cf60:	461d      	mov	r5, r3
 800cf62:	f04f 0200 	mov.w	r2, #0
 800cf66:	f04f 0300 	mov.w	r3, #0
 800cf6a:	00eb      	lsls	r3, r5, #3
 800cf6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cf70:	00e2      	lsls	r2, r4, #3
 800cf72:	1dcb      	adds	r3, r1, #7
 800cf74:	08db      	lsrs	r3, r3, #3
 800cf76:	00db      	lsls	r3, r3, #3
 800cf78:	ebad 0d03 	sub.w	sp, sp, r3
 800cf7c:	466b      	mov	r3, sp
 800cf7e:	3300      	adds	r3, #0
 800cf80:	617b      	str	r3, [r7, #20]
    memcpy(data, &rate, size);
 800cf82:	463b      	mov	r3, r7
 800cf84:	69fa      	ldr	r2, [r7, #28]
 800cf86:	4619      	mov	r1, r3
 800cf88:	6978      	ldr	r0, [r7, #20]
 800cf8a:	f004 f8ba 	bl	8011102 <memcpy>
	WriteData(VolumeRateAppendAddress, size, data);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	7b59      	ldrb	r1, [r3, #13]
 800cf92:	69fa      	ldr	r2, [r7, #28]
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	f7ff fa10 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800cf9c:	46b5      	mov	sp, r6
}
 800cf9e:	bf00      	nop
 800cfa0:	3724      	adds	r7, #36	@ 0x24
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cfa8 <_ZN12FlashManager14ReadVolumeRateEv>:
double_t FlashManager::ReadVolumeRate(){
 800cfa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfac:	b08b      	sub	sp, #44	@ 0x2c
 800cfae:	af02      	add	r7, sp, #8
 800cfb0:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,VolumeRateAppendAddress, size, false);
    double_t value;
    memcpy(&value, data, size);
    return value;
}
 800cfb2:	466b      	mov	r3, sp
 800cfb4:	461e      	mov	r6, r3
	size_t size=8;
 800cfb6:	2308      	movs	r3, #8
 800cfb8:	61fb      	str	r3, [r7, #28]
	uint8_t data[size]={0};
 800cfba:	69f9      	ldr	r1, [r7, #28]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	61bb      	str	r3, [r7, #24]
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	4688      	mov	r8, r1
 800cfc6:	4699      	mov	r9, r3
 800cfc8:	f04f 0200 	mov.w	r2, #0
 800cfcc:	f04f 0300 	mov.w	r3, #0
 800cfd0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cfd4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cfd8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cfdc:	2300      	movs	r3, #0
 800cfde:	460c      	mov	r4, r1
 800cfe0:	461d      	mov	r5, r3
 800cfe2:	f04f 0200 	mov.w	r2, #0
 800cfe6:	f04f 0300 	mov.w	r3, #0
 800cfea:	00eb      	lsls	r3, r5, #3
 800cfec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cff0:	00e2      	lsls	r2, r4, #3
 800cff2:	1dcb      	adds	r3, r1, #7
 800cff4:	08db      	lsrs	r3, r3, #3
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	ebad 0d03 	sub.w	sp, sp, r3
 800cffc:	ab02      	add	r3, sp, #8
 800cffe:	3300      	adds	r3, #0
 800d000:	617b      	str	r3, [r7, #20]
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	460a      	mov	r2, r1
 800d006:	1e51      	subs	r1, r2, #1
 800d008:	2200      	movs	r2, #0
 800d00a:	701a      	strb	r2, [r3, #0]
 800d00c:	1c5a      	adds	r2, r3, #1
 800d00e:	1e4b      	subs	r3, r1, #1
 800d010:	e003      	b.n	800d01a <_ZN12FlashManager14ReadVolumeRateEv+0x72>
 800d012:	2100      	movs	r1, #0
 800d014:	7011      	strb	r1, [r2, #0]
 800d016:	3b01      	subs	r3, #1
 800d018:	3201      	adds	r2, #1
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	daf9      	bge.n	800d012 <_ZN12FlashManager14ReadVolumeRateEv+0x6a>
	ReadData(data,VolumeRateAppendAddress, size, false);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	7b5a      	ldrb	r2, [r3, #13]
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	2100      	movs	r1, #0
 800d026:	9100      	str	r1, [sp, #0]
 800d028:	6979      	ldr	r1, [r7, #20]
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7ff f868 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d030:	f107 0308 	add.w	r3, r7, #8
 800d034:	69fa      	ldr	r2, [r7, #28]
 800d036:	6979      	ldr	r1, [r7, #20]
 800d038:	4618      	mov	r0, r3
 800d03a:	f004 f862 	bl	8011102 <memcpy>
    return value;
 800d03e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d042:	46b5      	mov	sp, r6
 800d044:	ec43 2b17 	vmov	d7, r2, r3
}
 800d048:	eeb0 0a47 	vmov.f32	s0, s14
 800d04c:	eef0 0a67 	vmov.f32	s1, s15
 800d050:	3724      	adds	r7, #36	@ 0x24
 800d052:	46bd      	mov	sp, r7
 800d054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d058 <_ZN12FlashManager18WriteVolumeAverageEm>:

void FlashManager::WriteVolumeAverage(uint32_t avg){
 800d058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d05c:	b087      	sub	sp, #28
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	6039      	str	r1, [r7, #0]
	size_t size=4;
    uint8_t data[size];
    memcpy(data, &avg, size);
	WriteData(VolumeAverageAppendAddress, size, data);
}
 800d064:	466b      	mov	r3, sp
 800d066:	461e      	mov	r6, r3
	size_t size=4;
 800d068:	2304      	movs	r3, #4
 800d06a:	617b      	str	r3, [r7, #20]
    uint8_t data[size];
 800d06c:	6979      	ldr	r1, [r7, #20]
 800d06e:	460b      	mov	r3, r1
 800d070:	3b01      	subs	r3, #1
 800d072:	613b      	str	r3, [r7, #16]
 800d074:	2300      	movs	r3, #0
 800d076:	4688      	mov	r8, r1
 800d078:	4699      	mov	r9, r3
 800d07a:	f04f 0200 	mov.w	r2, #0
 800d07e:	f04f 0300 	mov.w	r3, #0
 800d082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d08a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d08e:	2300      	movs	r3, #0
 800d090:	460c      	mov	r4, r1
 800d092:	461d      	mov	r5, r3
 800d094:	f04f 0200 	mov.w	r2, #0
 800d098:	f04f 0300 	mov.w	r3, #0
 800d09c:	00eb      	lsls	r3, r5, #3
 800d09e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d0a2:	00e2      	lsls	r2, r4, #3
 800d0a4:	1dcb      	adds	r3, r1, #7
 800d0a6:	08db      	lsrs	r3, r3, #3
 800d0a8:	00db      	lsls	r3, r3, #3
 800d0aa:	ebad 0d03 	sub.w	sp, sp, r3
 800d0ae:	466b      	mov	r3, sp
 800d0b0:	3300      	adds	r3, #0
 800d0b2:	60fb      	str	r3, [r7, #12]
    memcpy(data, &avg, size);
 800d0b4:	463b      	mov	r3, r7
 800d0b6:	697a      	ldr	r2, [r7, #20]
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f004 f821 	bl	8011102 <memcpy>
	WriteData(VolumeAverageAppendAddress, size, data);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	7bd9      	ldrb	r1, [r3, #15]
 800d0c4:	697a      	ldr	r2, [r7, #20]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f7ff f977 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800d0ce:	46b5      	mov	sp, r6
}
 800d0d0:	bf00      	nop
 800d0d2:	371c      	adds	r7, #28
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d0da <_ZN12FlashManager17ReadVolumeAverageEv>:
uint32_t FlashManager::ReadVolumeAverage(){
 800d0da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0de:	b089      	sub	sp, #36	@ 0x24
 800d0e0:	af02      	add	r7, sp, #8
 800d0e2:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,VolumeAverageAppendAddress,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d0e4:	466b      	mov	r3, sp
 800d0e6:	461e      	mov	r6, r3
	size_t size=4;
 800d0e8:	2304      	movs	r3, #4
 800d0ea:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d0ec:	6979      	ldr	r1, [r7, #20]
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	613b      	str	r3, [r7, #16]
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	4688      	mov	r8, r1
 800d0f8:	4699      	mov	r9, r3
 800d0fa:	f04f 0200 	mov.w	r2, #0
 800d0fe:	f04f 0300 	mov.w	r3, #0
 800d102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d10a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d10e:	2300      	movs	r3, #0
 800d110:	460c      	mov	r4, r1
 800d112:	461d      	mov	r5, r3
 800d114:	f04f 0200 	mov.w	r2, #0
 800d118:	f04f 0300 	mov.w	r3, #0
 800d11c:	00eb      	lsls	r3, r5, #3
 800d11e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d122:	00e2      	lsls	r2, r4, #3
 800d124:	1dcb      	adds	r3, r1, #7
 800d126:	08db      	lsrs	r3, r3, #3
 800d128:	00db      	lsls	r3, r3, #3
 800d12a:	ebad 0d03 	sub.w	sp, sp, r3
 800d12e:	ab02      	add	r3, sp, #8
 800d130:	3300      	adds	r3, #0
 800d132:	60fb      	str	r3, [r7, #12]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	460a      	mov	r2, r1
 800d138:	1e51      	subs	r1, r2, #1
 800d13a:	2200      	movs	r2, #0
 800d13c:	701a      	strb	r2, [r3, #0]
 800d13e:	1c5a      	adds	r2, r3, #1
 800d140:	1e4b      	subs	r3, r1, #1
 800d142:	e003      	b.n	800d14c <_ZN12FlashManager17ReadVolumeAverageEv+0x72>
 800d144:	2100      	movs	r1, #0
 800d146:	7011      	strb	r1, [r2, #0]
 800d148:	3b01      	subs	r3, #1
 800d14a:	3201      	adds	r2, #1
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	daf9      	bge.n	800d144 <_ZN12FlashManager17ReadVolumeAverageEv+0x6a>
	ReadData(data,VolumeAverageAppendAddress,size, false);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	7bda      	ldrb	r2, [r3, #15]
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	2100      	movs	r1, #0
 800d158:	9100      	str	r1, [sp, #0]
 800d15a:	68f9      	ldr	r1, [r7, #12]
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7fe ffcf 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d162:	f107 0308 	add.w	r3, r7, #8
 800d166:	697a      	ldr	r2, [r7, #20]
 800d168:	68f9      	ldr	r1, [r7, #12]
 800d16a:	4618      	mov	r0, r3
 800d16c:	f003 ffc9 	bl	8011102 <memcpy>
    return value;
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	46b5      	mov	sp, r6
}
 800d174:	4618      	mov	r0, r3
 800d176:	371c      	adds	r7, #28
 800d178:	46bd      	mov	sp, r7
 800d17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d17e <_ZN12FlashManager16WriteFlowAverageEm>:
void FlashManager::WriteFlowAverage(uint32_t avg){
 800d17e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d182:	b087      	sub	sp, #28
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
	size_t size=4;
    uint8_t data[size];
    memcpy(data, &avg, size);
	WriteData(FlowAverageAppendAddress, size, data);
}
 800d18a:	466b      	mov	r3, sp
 800d18c:	461e      	mov	r6, r3
	size_t size=4;
 800d18e:	2304      	movs	r3, #4
 800d190:	617b      	str	r3, [r7, #20]
    uint8_t data[size];
 800d192:	6979      	ldr	r1, [r7, #20]
 800d194:	460b      	mov	r3, r1
 800d196:	3b01      	subs	r3, #1
 800d198:	613b      	str	r3, [r7, #16]
 800d19a:	2300      	movs	r3, #0
 800d19c:	4688      	mov	r8, r1
 800d19e:	4699      	mov	r9, r3
 800d1a0:	f04f 0200 	mov.w	r2, #0
 800d1a4:	f04f 0300 	mov.w	r3, #0
 800d1a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d1ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d1b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	460c      	mov	r4, r1
 800d1b8:	461d      	mov	r5, r3
 800d1ba:	f04f 0200 	mov.w	r2, #0
 800d1be:	f04f 0300 	mov.w	r3, #0
 800d1c2:	00eb      	lsls	r3, r5, #3
 800d1c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d1c8:	00e2      	lsls	r2, r4, #3
 800d1ca:	1dcb      	adds	r3, r1, #7
 800d1cc:	08db      	lsrs	r3, r3, #3
 800d1ce:	00db      	lsls	r3, r3, #3
 800d1d0:	ebad 0d03 	sub.w	sp, sp, r3
 800d1d4:	466b      	mov	r3, sp
 800d1d6:	3300      	adds	r3, #0
 800d1d8:	60fb      	str	r3, [r7, #12]
    memcpy(data, &avg, size);
 800d1da:	463b      	mov	r3, r7
 800d1dc:	697a      	ldr	r2, [r7, #20]
 800d1de:	4619      	mov	r1, r3
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f003 ff8e 	bl	8011102 <memcpy>
	WriteData(FlowAverageAppendAddress, size, data);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	7b99      	ldrb	r1, [r3, #14]
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff f8e4 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800d1f4:	46b5      	mov	sp, r6
}
 800d1f6:	bf00      	nop
 800d1f8:	371c      	adds	r7, #28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d200 <_ZN12FlashManager15ReadFlowAverageEv>:
uint32_t FlashManager::ReadFlowAverage(){
 800d200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d204:	b089      	sub	sp, #36	@ 0x24
 800d206:	af02      	add	r7, sp, #8
 800d208:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FlowAverageAppendAddress,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d20a:	466b      	mov	r3, sp
 800d20c:	461e      	mov	r6, r3
	size_t size=4;
 800d20e:	2304      	movs	r3, #4
 800d210:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d212:	6979      	ldr	r1, [r7, #20]
 800d214:	460b      	mov	r3, r1
 800d216:	3b01      	subs	r3, #1
 800d218:	613b      	str	r3, [r7, #16]
 800d21a:	2300      	movs	r3, #0
 800d21c:	4688      	mov	r8, r1
 800d21e:	4699      	mov	r9, r3
 800d220:	f04f 0200 	mov.w	r2, #0
 800d224:	f04f 0300 	mov.w	r3, #0
 800d228:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d22c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d230:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d234:	2300      	movs	r3, #0
 800d236:	460c      	mov	r4, r1
 800d238:	461d      	mov	r5, r3
 800d23a:	f04f 0200 	mov.w	r2, #0
 800d23e:	f04f 0300 	mov.w	r3, #0
 800d242:	00eb      	lsls	r3, r5, #3
 800d244:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d248:	00e2      	lsls	r2, r4, #3
 800d24a:	1dcb      	adds	r3, r1, #7
 800d24c:	08db      	lsrs	r3, r3, #3
 800d24e:	00db      	lsls	r3, r3, #3
 800d250:	ebad 0d03 	sub.w	sp, sp, r3
 800d254:	ab02      	add	r3, sp, #8
 800d256:	3300      	adds	r3, #0
 800d258:	60fb      	str	r3, [r7, #12]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	460a      	mov	r2, r1
 800d25e:	1e51      	subs	r1, r2, #1
 800d260:	2200      	movs	r2, #0
 800d262:	701a      	strb	r2, [r3, #0]
 800d264:	1c5a      	adds	r2, r3, #1
 800d266:	1e4b      	subs	r3, r1, #1
 800d268:	e003      	b.n	800d272 <_ZN12FlashManager15ReadFlowAverageEv+0x72>
 800d26a:	2100      	movs	r1, #0
 800d26c:	7011      	strb	r1, [r2, #0]
 800d26e:	3b01      	subs	r3, #1
 800d270:	3201      	adds	r2, #1
 800d272:	2b00      	cmp	r3, #0
 800d274:	daf9      	bge.n	800d26a <_ZN12FlashManager15ReadFlowAverageEv+0x6a>
	ReadData(data,FlowAverageAppendAddress,size, false);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	7b9a      	ldrb	r2, [r3, #14]
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	2100      	movs	r1, #0
 800d27e:	9100      	str	r1, [sp, #0]
 800d280:	68f9      	ldr	r1, [r7, #12]
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7fe ff3c 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d288:	f107 0308 	add.w	r3, r7, #8
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	68f9      	ldr	r1, [r7, #12]
 800d290:	4618      	mov	r0, r3
 800d292:	f003 ff36 	bl	8011102 <memcpy>
    return value;
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	46b5      	mov	sp, r6
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	371c      	adds	r7, #28
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d2a4 <_ZN12FlashManager17WriteFirstEmgDataEttt>:
void FlashManager::WriteFirstEmgData(uint16_t maxTrim, uint16_t zeroPointMaxTrim, uint16_t zeroPointMinTrim){
 800d2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a8:	b093      	sub	sp, #76	@ 0x4c
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2ae:	4610      	mov	r0, r2
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	843b      	strh	r3, [r7, #32]
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	83fb      	strh	r3, [r7, #30]
    memcpy(zeroPointMaxTrimData, &zeroPointMaxTrim, size);
    memcpy(zeroPointMinTrimData, &zeroPointMinTrim, size);
	WriteData(FirstEmgAppendAddress, size, maxTrimData);
	WriteData(FirstEmgAppendAddress+2, size, zeroPointMaxTrimData);
	WriteData(FirstEmgAppendAddress+4, size, zeroPointMinTrimData);
}
 800d2be:	466b      	mov	r3, sp
 800d2c0:	461e      	mov	r6, r3
	size_t size=2;
 800d2c2:	2302      	movs	r3, #2
 800d2c4:	647b      	str	r3, [r7, #68]	@ 0x44
    uint8_t maxTrimData[size];
 800d2c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	460c      	mov	r4, r1
 800d2d2:	461d      	mov	r5, r3
 800d2d4:	f04f 0200 	mov.w	r2, #0
 800d2d8:	f04f 0300 	mov.w	r3, #0
 800d2dc:	00eb      	lsls	r3, r5, #3
 800d2de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d2e2:	00e2      	lsls	r2, r4, #3
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	6139      	str	r1, [r7, #16]
 800d2e8:	617b      	str	r3, [r7, #20]
 800d2ea:	f04f 0200 	mov.w	r2, #0
 800d2ee:	f04f 0300 	mov.w	r3, #0
 800d2f2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	00c3      	lsls	r3, r0, #3
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d300:	4620      	mov	r0, r4
 800d302:	00c2      	lsls	r2, r0, #3
 800d304:	1dcb      	adds	r3, r1, #7
 800d306:	08db      	lsrs	r3, r3, #3
 800d308:	00db      	lsls	r3, r3, #3
 800d30a:	ebad 0d03 	sub.w	sp, sp, r3
 800d30e:	466b      	mov	r3, sp
 800d310:	3300      	adds	r3, #0
 800d312:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint8_t zeroPointMaxTrimData[size];
 800d314:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d316:	460b      	mov	r3, r1
 800d318:	3b01      	subs	r3, #1
 800d31a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d31c:	2300      	movs	r3, #0
 800d31e:	60b9      	str	r1, [r7, #8]
 800d320:	60fb      	str	r3, [r7, #12]
 800d322:	f04f 0200 	mov.w	r2, #0
 800d326:	f04f 0300 	mov.w	r3, #0
 800d32a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d32e:	4628      	mov	r0, r5
 800d330:	00c3      	lsls	r3, r0, #3
 800d332:	4620      	mov	r0, r4
 800d334:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d338:	4620      	mov	r0, r4
 800d33a:	00c2      	lsls	r2, r0, #3
 800d33c:	2300      	movs	r3, #0
 800d33e:	6039      	str	r1, [r7, #0]
 800d340:	607b      	str	r3, [r7, #4]
 800d342:	f04f 0200 	mov.w	r2, #0
 800d346:	f04f 0300 	mov.w	r3, #0
 800d34a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d34e:	4628      	mov	r0, r5
 800d350:	00c3      	lsls	r3, r0, #3
 800d352:	4620      	mov	r0, r4
 800d354:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d358:	4620      	mov	r0, r4
 800d35a:	00c2      	lsls	r2, r0, #3
 800d35c:	1dcb      	adds	r3, r1, #7
 800d35e:	08db      	lsrs	r3, r3, #3
 800d360:	00db      	lsls	r3, r3, #3
 800d362:	ebad 0d03 	sub.w	sp, sp, r3
 800d366:	466b      	mov	r3, sp
 800d368:	3300      	adds	r3, #0
 800d36a:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t zeroPointMinTrimData[size];
 800d36c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d36e:	460b      	mov	r3, r1
 800d370:	3b01      	subs	r3, #1
 800d372:	633b      	str	r3, [r7, #48]	@ 0x30
 800d374:	2300      	movs	r3, #0
 800d376:	468a      	mov	sl, r1
 800d378:	469b      	mov	fp, r3
 800d37a:	f04f 0200 	mov.w	r2, #0
 800d37e:	f04f 0300 	mov.w	r3, #0
 800d382:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d386:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d38a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d38e:	2300      	movs	r3, #0
 800d390:	4688      	mov	r8, r1
 800d392:	4699      	mov	r9, r3
 800d394:	f04f 0200 	mov.w	r2, #0
 800d398:	f04f 0300 	mov.w	r3, #0
 800d39c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d3a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d3a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d3a8:	1dcb      	adds	r3, r1, #7
 800d3aa:	08db      	lsrs	r3, r3, #3
 800d3ac:	00db      	lsls	r3, r3, #3
 800d3ae:	ebad 0d03 	sub.w	sp, sp, r3
 800d3b2:	466b      	mov	r3, sp
 800d3b4:	3300      	adds	r3, #0
 800d3b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(maxTrimData, &maxTrim, size);
 800d3b8:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 800d3bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3be:	4619      	mov	r1, r3
 800d3c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d3c2:	f003 fe9e 	bl	8011102 <memcpy>
    memcpy(zeroPointMaxTrimData, &zeroPointMaxTrim, size);
 800d3c6:	f107 0320 	add.w	r3, r7, #32
 800d3ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d3d0:	f003 fe97 	bl	8011102 <memcpy>
    memcpy(zeroPointMinTrimData, &zeroPointMinTrim, size);
 800d3d4:	f107 031e 	add.w	r3, r7, #30
 800d3d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3da:	4619      	mov	r1, r3
 800d3dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3de:	f003 fe90 	bl	8011102 <memcpy>
	WriteData(FirstEmgAppendAddress, size, maxTrimData);
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e4:	7c19      	ldrb	r1, [r3, #16]
 800d3e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3ec:	f7fe ffe6 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
	WriteData(FirstEmgAppendAddress+2, size, zeroPointMaxTrimData);
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f2:	7c1b      	ldrb	r3, [r3, #16]
 800d3f4:	3302      	adds	r3, #2
 800d3f6:	b2d9      	uxtb	r1, r3
 800d3f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3fe:	f7fe ffdd 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
	WriteData(FirstEmgAppendAddress+4, size, zeroPointMinTrimData);
 800d402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d404:	7c1b      	ldrb	r3, [r3, #16]
 800d406:	3304      	adds	r3, #4
 800d408:	b2d9      	uxtb	r1, r3
 800d40a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d410:	f7fe ffd4 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800d414:	46b5      	mov	sp, r6
}
 800d416:	bf00      	nop
 800d418:	374c      	adds	r7, #76	@ 0x4c
 800d41a:	46bd      	mov	sp, r7
 800d41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d420 <_ZN12FlashManager19ReadFirstEmgMaxTrimEv>:
uint16_t FlashManager::ReadFirstEmgMaxTrim(){
 800d420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d424:	b089      	sub	sp, #36	@ 0x24
 800d426:	af02      	add	r7, sp, #8
 800d428:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FirstEmgAppendAddress,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d42a:	466b      	mov	r3, sp
 800d42c:	461e      	mov	r6, r3
	size_t size=2;
 800d42e:	2302      	movs	r3, #2
 800d430:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d432:	6979      	ldr	r1, [r7, #20]
 800d434:	460b      	mov	r3, r1
 800d436:	3b01      	subs	r3, #1
 800d438:	613b      	str	r3, [r7, #16]
 800d43a:	2300      	movs	r3, #0
 800d43c:	4688      	mov	r8, r1
 800d43e:	4699      	mov	r9, r3
 800d440:	f04f 0200 	mov.w	r2, #0
 800d444:	f04f 0300 	mov.w	r3, #0
 800d448:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d44c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d450:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d454:	2300      	movs	r3, #0
 800d456:	460c      	mov	r4, r1
 800d458:	461d      	mov	r5, r3
 800d45a:	f04f 0200 	mov.w	r2, #0
 800d45e:	f04f 0300 	mov.w	r3, #0
 800d462:	00eb      	lsls	r3, r5, #3
 800d464:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d468:	00e2      	lsls	r2, r4, #3
 800d46a:	1dcb      	adds	r3, r1, #7
 800d46c:	08db      	lsrs	r3, r3, #3
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	ebad 0d03 	sub.w	sp, sp, r3
 800d474:	ab02      	add	r3, sp, #8
 800d476:	3300      	adds	r3, #0
 800d478:	60fb      	str	r3, [r7, #12]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	460a      	mov	r2, r1
 800d47e:	1e51      	subs	r1, r2, #1
 800d480:	2200      	movs	r2, #0
 800d482:	701a      	strb	r2, [r3, #0]
 800d484:	1c5a      	adds	r2, r3, #1
 800d486:	1e4b      	subs	r3, r1, #1
 800d488:	e003      	b.n	800d492 <_ZN12FlashManager19ReadFirstEmgMaxTrimEv+0x72>
 800d48a:	2100      	movs	r1, #0
 800d48c:	7011      	strb	r1, [r2, #0]
 800d48e:	3b01      	subs	r3, #1
 800d490:	3201      	adds	r2, #1
 800d492:	2b00      	cmp	r3, #0
 800d494:	daf9      	bge.n	800d48a <_ZN12FlashManager19ReadFirstEmgMaxTrimEv+0x6a>
	ReadData(data,FirstEmgAppendAddress,size, false);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	7c1a      	ldrb	r2, [r3, #16]
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	2100      	movs	r1, #0
 800d49e:	9100      	str	r1, [sp, #0]
 800d4a0:	68f9      	ldr	r1, [r7, #12]
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7fe fe2c 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d4a8:	f107 0308 	add.w	r3, r7, #8
 800d4ac:	697a      	ldr	r2, [r7, #20]
 800d4ae:	68f9      	ldr	r1, [r7, #12]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f003 fe26 	bl	8011102 <memcpy>
    return value;
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	46b5      	mov	sp, r6
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	371c      	adds	r7, #28
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d4c6 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv>:
uint16_t FlashManager::ReadFirstEmgZeroPointMaxTrim(){
 800d4c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4ca:	b089      	sub	sp, #36	@ 0x24
 800d4cc:	af02      	add	r7, sp, #8
 800d4ce:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FirstEmgAppendAddress+2,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d4d0:	466b      	mov	r3, sp
 800d4d2:	461e      	mov	r6, r3
	size_t size=2;
 800d4d4:	2302      	movs	r3, #2
 800d4d6:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d4d8:	6979      	ldr	r1, [r7, #20]
 800d4da:	460b      	mov	r3, r1
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	613b      	str	r3, [r7, #16]
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	4688      	mov	r8, r1
 800d4e4:	4699      	mov	r9, r3
 800d4e6:	f04f 0200 	mov.w	r2, #0
 800d4ea:	f04f 0300 	mov.w	r3, #0
 800d4ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d4f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d4f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	460c      	mov	r4, r1
 800d4fe:	461d      	mov	r5, r3
 800d500:	f04f 0200 	mov.w	r2, #0
 800d504:	f04f 0300 	mov.w	r3, #0
 800d508:	00eb      	lsls	r3, r5, #3
 800d50a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d50e:	00e2      	lsls	r2, r4, #3
 800d510:	1dcb      	adds	r3, r1, #7
 800d512:	08db      	lsrs	r3, r3, #3
 800d514:	00db      	lsls	r3, r3, #3
 800d516:	ebad 0d03 	sub.w	sp, sp, r3
 800d51a:	ab02      	add	r3, sp, #8
 800d51c:	3300      	adds	r3, #0
 800d51e:	60fb      	str	r3, [r7, #12]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	460a      	mov	r2, r1
 800d524:	1e51      	subs	r1, r2, #1
 800d526:	2200      	movs	r2, #0
 800d528:	701a      	strb	r2, [r3, #0]
 800d52a:	1c5a      	adds	r2, r3, #1
 800d52c:	1e4b      	subs	r3, r1, #1
 800d52e:	e003      	b.n	800d538 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv+0x72>
 800d530:	2100      	movs	r1, #0
 800d532:	7011      	strb	r1, [r2, #0]
 800d534:	3b01      	subs	r3, #1
 800d536:	3201      	adds	r2, #1
 800d538:	2b00      	cmp	r3, #0
 800d53a:	daf9      	bge.n	800d530 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv+0x6a>
	ReadData(data,FirstEmgAppendAddress+2,size, false);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	7c1b      	ldrb	r3, [r3, #16]
 800d540:	3302      	adds	r3, #2
 800d542:	b2da      	uxtb	r2, r3
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	2100      	movs	r1, #0
 800d548:	9100      	str	r1, [sp, #0]
 800d54a:	68f9      	ldr	r1, [r7, #12]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f7fe fdd7 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d552:	f107 0308 	add.w	r3, r7, #8
 800d556:	697a      	ldr	r2, [r7, #20]
 800d558:	68f9      	ldr	r1, [r7, #12]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f003 fdd1 	bl	8011102 <memcpy>
    return value;
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	b29b      	uxth	r3, r3
 800d564:	46b5      	mov	sp, r6
}
 800d566:	4618      	mov	r0, r3
 800d568:	371c      	adds	r7, #28
 800d56a:	46bd      	mov	sp, r7
 800d56c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d570 <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv>:
uint16_t FlashManager::ReadFirstEmgZeroPointMinTrim(){
 800d570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d574:	b089      	sub	sp, #36	@ 0x24
 800d576:	af02      	add	r7, sp, #8
 800d578:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FirstEmgAppendAddress+4,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d57a:	466b      	mov	r3, sp
 800d57c:	461e      	mov	r6, r3
	size_t size=2;
 800d57e:	2302      	movs	r3, #2
 800d580:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d582:	6979      	ldr	r1, [r7, #20]
 800d584:	460b      	mov	r3, r1
 800d586:	3b01      	subs	r3, #1
 800d588:	613b      	str	r3, [r7, #16]
 800d58a:	2300      	movs	r3, #0
 800d58c:	4688      	mov	r8, r1
 800d58e:	4699      	mov	r9, r3
 800d590:	f04f 0200 	mov.w	r2, #0
 800d594:	f04f 0300 	mov.w	r3, #0
 800d598:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d59c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d5a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	460c      	mov	r4, r1
 800d5a8:	461d      	mov	r5, r3
 800d5aa:	f04f 0200 	mov.w	r2, #0
 800d5ae:	f04f 0300 	mov.w	r3, #0
 800d5b2:	00eb      	lsls	r3, r5, #3
 800d5b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d5b8:	00e2      	lsls	r2, r4, #3
 800d5ba:	1dcb      	adds	r3, r1, #7
 800d5bc:	08db      	lsrs	r3, r3, #3
 800d5be:	00db      	lsls	r3, r3, #3
 800d5c0:	ebad 0d03 	sub.w	sp, sp, r3
 800d5c4:	ab02      	add	r3, sp, #8
 800d5c6:	3300      	adds	r3, #0
 800d5c8:	60fb      	str	r3, [r7, #12]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	460a      	mov	r2, r1
 800d5ce:	1e51      	subs	r1, r2, #1
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	701a      	strb	r2, [r3, #0]
 800d5d4:	1c5a      	adds	r2, r3, #1
 800d5d6:	1e4b      	subs	r3, r1, #1
 800d5d8:	e003      	b.n	800d5e2 <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv+0x72>
 800d5da:	2100      	movs	r1, #0
 800d5dc:	7011      	strb	r1, [r2, #0]
 800d5de:	3b01      	subs	r3, #1
 800d5e0:	3201      	adds	r2, #1
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	daf9      	bge.n	800d5da <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv+0x6a>
	ReadData(data,FirstEmgAppendAddress+4,size, false);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	7c1b      	ldrb	r3, [r3, #16]
 800d5ea:	3304      	adds	r3, #4
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	2100      	movs	r1, #0
 800d5f2:	9100      	str	r1, [sp, #0]
 800d5f4:	68f9      	ldr	r1, [r7, #12]
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7fe fd82 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d5fc:	f107 0308 	add.w	r3, r7, #8
 800d600:	697a      	ldr	r2, [r7, #20]
 800d602:	68f9      	ldr	r1, [r7, #12]
 800d604:	4618      	mov	r0, r3
 800d606:	f003 fd7c 	bl	8011102 <memcpy>
    return value;
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	46b5      	mov	sp, r6
}
 800d610:	4618      	mov	r0, r3
 800d612:	371c      	adds	r7, #28
 800d614:	46bd      	mov	sp, r7
 800d616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d61a <_ZN12FlashManager18WriteSecondEmgDataEttt>:

void FlashManager::WriteSecondEmgData(uint16_t maxTrim, uint16_t zeroPointMaxTrim, uint16_t zeroPointMinTrim){
 800d61a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61e:	b093      	sub	sp, #76	@ 0x4c
 800d620:	af00      	add	r7, sp, #0
 800d622:	6278      	str	r0, [r7, #36]	@ 0x24
 800d624:	4610      	mov	r0, r2
 800d626:	461a      	mov	r2, r3
 800d628:	460b      	mov	r3, r1
 800d62a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d62c:	4603      	mov	r3, r0
 800d62e:	843b      	strh	r3, [r7, #32]
 800d630:	4613      	mov	r3, r2
 800d632:	83fb      	strh	r3, [r7, #30]
    memcpy(zeroPointMaxTrimData, &zeroPointMaxTrim, size);
    memcpy(zeroPointMinTrimData, &zeroPointMinTrim, size);
	WriteData(SecondEmgAppendAddress, size, maxTrimData);
	WriteData(SecondEmgAppendAddress+2, size, zeroPointMaxTrimData);
	WriteData(SecondEmgAppendAddress+4, size, zeroPointMinTrimData);
}
 800d634:	466b      	mov	r3, sp
 800d636:	461e      	mov	r6, r3
	size_t size=2;
 800d638:	2302      	movs	r3, #2
 800d63a:	647b      	str	r3, [r7, #68]	@ 0x44
    uint8_t maxTrimData[size];
 800d63c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d63e:	460b      	mov	r3, r1
 800d640:	3b01      	subs	r3, #1
 800d642:	643b      	str	r3, [r7, #64]	@ 0x40
 800d644:	2300      	movs	r3, #0
 800d646:	460c      	mov	r4, r1
 800d648:	461d      	mov	r5, r3
 800d64a:	f04f 0200 	mov.w	r2, #0
 800d64e:	f04f 0300 	mov.w	r3, #0
 800d652:	00eb      	lsls	r3, r5, #3
 800d654:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d658:	00e2      	lsls	r2, r4, #3
 800d65a:	2300      	movs	r3, #0
 800d65c:	6139      	str	r1, [r7, #16]
 800d65e:	617b      	str	r3, [r7, #20]
 800d660:	f04f 0200 	mov.w	r2, #0
 800d664:	f04f 0300 	mov.w	r3, #0
 800d668:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d66c:	4628      	mov	r0, r5
 800d66e:	00c3      	lsls	r3, r0, #3
 800d670:	4620      	mov	r0, r4
 800d672:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d676:	4620      	mov	r0, r4
 800d678:	00c2      	lsls	r2, r0, #3
 800d67a:	1dcb      	adds	r3, r1, #7
 800d67c:	08db      	lsrs	r3, r3, #3
 800d67e:	00db      	lsls	r3, r3, #3
 800d680:	ebad 0d03 	sub.w	sp, sp, r3
 800d684:	466b      	mov	r3, sp
 800d686:	3300      	adds	r3, #0
 800d688:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint8_t zeroPointMaxTrimData[size];
 800d68a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d68c:	460b      	mov	r3, r1
 800d68e:	3b01      	subs	r3, #1
 800d690:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d692:	2300      	movs	r3, #0
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	60fb      	str	r3, [r7, #12]
 800d698:	f04f 0200 	mov.w	r2, #0
 800d69c:	f04f 0300 	mov.w	r3, #0
 800d6a0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	00c3      	lsls	r3, r0, #3
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	00c2      	lsls	r2, r0, #3
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	6039      	str	r1, [r7, #0]
 800d6b6:	607b      	str	r3, [r7, #4]
 800d6b8:	f04f 0200 	mov.w	r2, #0
 800d6bc:	f04f 0300 	mov.w	r3, #0
 800d6c0:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	00c3      	lsls	r3, r0, #3
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	00c2      	lsls	r2, r0, #3
 800d6d2:	1dcb      	adds	r3, r1, #7
 800d6d4:	08db      	lsrs	r3, r3, #3
 800d6d6:	00db      	lsls	r3, r3, #3
 800d6d8:	ebad 0d03 	sub.w	sp, sp, r3
 800d6dc:	466b      	mov	r3, sp
 800d6de:	3300      	adds	r3, #0
 800d6e0:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t zeroPointMinTrimData[size];
 800d6e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	468a      	mov	sl, r1
 800d6ee:	469b      	mov	fp, r3
 800d6f0:	f04f 0200 	mov.w	r2, #0
 800d6f4:	f04f 0300 	mov.w	r3, #0
 800d6f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d6fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d700:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d704:	2300      	movs	r3, #0
 800d706:	4688      	mov	r8, r1
 800d708:	4699      	mov	r9, r3
 800d70a:	f04f 0200 	mov.w	r2, #0
 800d70e:	f04f 0300 	mov.w	r3, #0
 800d712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d71a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d71e:	1dcb      	adds	r3, r1, #7
 800d720:	08db      	lsrs	r3, r3, #3
 800d722:	00db      	lsls	r3, r3, #3
 800d724:	ebad 0d03 	sub.w	sp, sp, r3
 800d728:	466b      	mov	r3, sp
 800d72a:	3300      	adds	r3, #0
 800d72c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(maxTrimData, &maxTrim, size);
 800d72e:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 800d732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d734:	4619      	mov	r1, r3
 800d736:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d738:	f003 fce3 	bl	8011102 <memcpy>
    memcpy(zeroPointMaxTrimData, &zeroPointMaxTrim, size);
 800d73c:	f107 0320 	add.w	r3, r7, #32
 800d740:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d742:	4619      	mov	r1, r3
 800d744:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d746:	f003 fcdc 	bl	8011102 <memcpy>
    memcpy(zeroPointMinTrimData, &zeroPointMinTrim, size);
 800d74a:	f107 031e 	add.w	r3, r7, #30
 800d74e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d750:	4619      	mov	r1, r3
 800d752:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d754:	f003 fcd5 	bl	8011102 <memcpy>
	WriteData(SecondEmgAppendAddress, size, maxTrimData);
 800d758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75a:	7c59      	ldrb	r1, [r3, #17]
 800d75c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d760:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d762:	f7fe fe2b 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
	WriteData(SecondEmgAppendAddress+2, size, zeroPointMaxTrimData);
 800d766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d768:	7c5b      	ldrb	r3, [r3, #17]
 800d76a:	3302      	adds	r3, #2
 800d76c:	b2d9      	uxtb	r1, r3
 800d76e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d772:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d774:	f7fe fe22 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
	WriteData(SecondEmgAppendAddress+4, size, zeroPointMinTrimData);
 800d778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77a:	7c5b      	ldrb	r3, [r3, #17]
 800d77c:	3304      	adds	r3, #4
 800d77e:	b2d9      	uxtb	r1, r3
 800d780:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d784:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d786:	f7fe fe19 	bl	800c3bc <_ZN12FlashManager9WriteDataEhiPh>
 800d78a:	46b5      	mov	sp, r6
}
 800d78c:	bf00      	nop
 800d78e:	374c      	adds	r7, #76	@ 0x4c
 800d790:	46bd      	mov	sp, r7
 800d792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d796 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv>:
uint16_t FlashManager::ReadSecondEmgMaxTrim(){
 800d796:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d79a:	b089      	sub	sp, #36	@ 0x24
 800d79c:	af02      	add	r7, sp, #8
 800d79e:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,SecondEmgAppendAddress,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d7a0:	466b      	mov	r3, sp
 800d7a2:	461e      	mov	r6, r3
	size_t size=2;
 800d7a4:	2302      	movs	r3, #2
 800d7a6:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d7a8:	6979      	ldr	r1, [r7, #20]
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	613b      	str	r3, [r7, #16]
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	4688      	mov	r8, r1
 800d7b4:	4699      	mov	r9, r3
 800d7b6:	f04f 0200 	mov.w	r2, #0
 800d7ba:	f04f 0300 	mov.w	r3, #0
 800d7be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d7c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d7c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	461d      	mov	r5, r3
 800d7d0:	f04f 0200 	mov.w	r2, #0
 800d7d4:	f04f 0300 	mov.w	r3, #0
 800d7d8:	00eb      	lsls	r3, r5, #3
 800d7da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d7de:	00e2      	lsls	r2, r4, #3
 800d7e0:	1dcb      	adds	r3, r1, #7
 800d7e2:	08db      	lsrs	r3, r3, #3
 800d7e4:	00db      	lsls	r3, r3, #3
 800d7e6:	ebad 0d03 	sub.w	sp, sp, r3
 800d7ea:	ab02      	add	r3, sp, #8
 800d7ec:	3300      	adds	r3, #0
 800d7ee:	60fb      	str	r3, [r7, #12]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	460a      	mov	r2, r1
 800d7f4:	1e51      	subs	r1, r2, #1
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	701a      	strb	r2, [r3, #0]
 800d7fa:	1c5a      	adds	r2, r3, #1
 800d7fc:	1e4b      	subs	r3, r1, #1
 800d7fe:	e003      	b.n	800d808 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv+0x72>
 800d800:	2100      	movs	r1, #0
 800d802:	7011      	strb	r1, [r2, #0]
 800d804:	3b01      	subs	r3, #1
 800d806:	3201      	adds	r2, #1
 800d808:	2b00      	cmp	r3, #0
 800d80a:	daf9      	bge.n	800d800 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv+0x6a>
	ReadData(data,SecondEmgAppendAddress,size, false);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	7c5a      	ldrb	r2, [r3, #17]
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	2100      	movs	r1, #0
 800d814:	9100      	str	r1, [sp, #0]
 800d816:	68f9      	ldr	r1, [r7, #12]
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7fe fc71 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d81e:	f107 0308 	add.w	r3, r7, #8
 800d822:	697a      	ldr	r2, [r7, #20]
 800d824:	68f9      	ldr	r1, [r7, #12]
 800d826:	4618      	mov	r0, r3
 800d828:	f003 fc6b 	bl	8011102 <memcpy>
    return value;
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	b29b      	uxth	r3, r3
 800d830:	46b5      	mov	sp, r6
}
 800d832:	4618      	mov	r0, r3
 800d834:	371c      	adds	r7, #28
 800d836:	46bd      	mov	sp, r7
 800d838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d83c <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv>:
uint16_t FlashManager::ReadSecondEmgZeroPointMaxTrim(){
 800d83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d840:	b089      	sub	sp, #36	@ 0x24
 800d842:	af02      	add	r7, sp, #8
 800d844:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,SecondEmgAppendAddress+2,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d846:	466b      	mov	r3, sp
 800d848:	461e      	mov	r6, r3
	size_t size=2;
 800d84a:	2302      	movs	r3, #2
 800d84c:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d84e:	6979      	ldr	r1, [r7, #20]
 800d850:	460b      	mov	r3, r1
 800d852:	3b01      	subs	r3, #1
 800d854:	613b      	str	r3, [r7, #16]
 800d856:	2300      	movs	r3, #0
 800d858:	4688      	mov	r8, r1
 800d85a:	4699      	mov	r9, r3
 800d85c:	f04f 0200 	mov.w	r2, #0
 800d860:	f04f 0300 	mov.w	r3, #0
 800d864:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d868:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d86c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d870:	2300      	movs	r3, #0
 800d872:	460c      	mov	r4, r1
 800d874:	461d      	mov	r5, r3
 800d876:	f04f 0200 	mov.w	r2, #0
 800d87a:	f04f 0300 	mov.w	r3, #0
 800d87e:	00eb      	lsls	r3, r5, #3
 800d880:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d884:	00e2      	lsls	r2, r4, #3
 800d886:	1dcb      	adds	r3, r1, #7
 800d888:	08db      	lsrs	r3, r3, #3
 800d88a:	00db      	lsls	r3, r3, #3
 800d88c:	ebad 0d03 	sub.w	sp, sp, r3
 800d890:	ab02      	add	r3, sp, #8
 800d892:	3300      	adds	r3, #0
 800d894:	60fb      	str	r3, [r7, #12]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	460a      	mov	r2, r1
 800d89a:	1e51      	subs	r1, r2, #1
 800d89c:	2200      	movs	r2, #0
 800d89e:	701a      	strb	r2, [r3, #0]
 800d8a0:	1c5a      	adds	r2, r3, #1
 800d8a2:	1e4b      	subs	r3, r1, #1
 800d8a4:	e003      	b.n	800d8ae <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv+0x72>
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	7011      	strb	r1, [r2, #0]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	3201      	adds	r2, #1
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	daf9      	bge.n	800d8a6 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv+0x6a>
	ReadData(data,SecondEmgAppendAddress+2,size, false);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	7c5b      	ldrb	r3, [r3, #17]
 800d8b6:	3302      	adds	r3, #2
 800d8b8:	b2da      	uxtb	r2, r3
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	2100      	movs	r1, #0
 800d8be:	9100      	str	r1, [sp, #0]
 800d8c0:	68f9      	ldr	r1, [r7, #12]
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f7fe fc1c 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d8c8:	f107 0308 	add.w	r3, r7, #8
 800d8cc:	697a      	ldr	r2, [r7, #20]
 800d8ce:	68f9      	ldr	r1, [r7, #12]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f003 fc16 	bl	8011102 <memcpy>
    return value;
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	46b5      	mov	sp, r6
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	371c      	adds	r7, #28
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d8e6 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv>:
uint16_t FlashManager::ReadSecondEmgZeroPointMinTrim(){
 800d8e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8ea:	b089      	sub	sp, #36	@ 0x24
 800d8ec:	af02      	add	r7, sp, #8
 800d8ee:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,SecondEmgAppendAddress+4,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d8f0:	466b      	mov	r3, sp
 800d8f2:	461e      	mov	r6, r3
	size_t size=2;
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d8f8:	6979      	ldr	r1, [r7, #20]
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	3b01      	subs	r3, #1
 800d8fe:	613b      	str	r3, [r7, #16]
 800d900:	2300      	movs	r3, #0
 800d902:	4688      	mov	r8, r1
 800d904:	4699      	mov	r9, r3
 800d906:	f04f 0200 	mov.w	r2, #0
 800d90a:	f04f 0300 	mov.w	r3, #0
 800d90e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d91a:	2300      	movs	r3, #0
 800d91c:	460c      	mov	r4, r1
 800d91e:	461d      	mov	r5, r3
 800d920:	f04f 0200 	mov.w	r2, #0
 800d924:	f04f 0300 	mov.w	r3, #0
 800d928:	00eb      	lsls	r3, r5, #3
 800d92a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d92e:	00e2      	lsls	r2, r4, #3
 800d930:	1dcb      	adds	r3, r1, #7
 800d932:	08db      	lsrs	r3, r3, #3
 800d934:	00db      	lsls	r3, r3, #3
 800d936:	ebad 0d03 	sub.w	sp, sp, r3
 800d93a:	ab02      	add	r3, sp, #8
 800d93c:	3300      	adds	r3, #0
 800d93e:	60fb      	str	r3, [r7, #12]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	460a      	mov	r2, r1
 800d944:	1e51      	subs	r1, r2, #1
 800d946:	2200      	movs	r2, #0
 800d948:	701a      	strb	r2, [r3, #0]
 800d94a:	1c5a      	adds	r2, r3, #1
 800d94c:	1e4b      	subs	r3, r1, #1
 800d94e:	e003      	b.n	800d958 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv+0x72>
 800d950:	2100      	movs	r1, #0
 800d952:	7011      	strb	r1, [r2, #0]
 800d954:	3b01      	subs	r3, #1
 800d956:	3201      	adds	r2, #1
 800d958:	2b00      	cmp	r3, #0
 800d95a:	daf9      	bge.n	800d950 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv+0x6a>
	ReadData(data,SecondEmgAppendAddress+4,size, false);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	7c5b      	ldrb	r3, [r3, #17]
 800d960:	3304      	adds	r3, #4
 800d962:	b2da      	uxtb	r2, r3
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	2100      	movs	r1, #0
 800d968:	9100      	str	r1, [sp, #0]
 800d96a:	68f9      	ldr	r1, [r7, #12]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f7fe fbc7 	bl	800c100 <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d972:	f107 0308 	add.w	r3, r7, #8
 800d976:	697a      	ldr	r2, [r7, #20]
 800d978:	68f9      	ldr	r1, [r7, #12]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f003 fbc1 	bl	8011102 <memcpy>
    return value;
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	b29b      	uxth	r3, r3
 800d984:	46b5      	mov	sp, r6
}
 800d986:	4618      	mov	r0, r3
 800d988:	371c      	adds	r7, #28
 800d98a:	46bd      	mov	sp, r7
 800d98c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d990 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	ed87 0a01 	vstr	s0, [r7, #4]
 800d99a:	ed97 0a01 	vldr	s0, [r7, #4]
 800d99e:	f003 f89d 	bl	8010adc <ceilf>
 800d9a2:	eef0 7a40 	vmov.f32	s15, s0
 800d9a6:	eeb0 0a67 	vmov.f32	s0, s15
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	ed87 0a01 	vstr	s0, [r7, #4]
 800d9ba:	ed97 0a01 	vldr	s0, [r7, #4]
 800d9be:	f003 f8cf 	bl	8010b60 <floorf>
 800d9c2:	eef0 7a40 	vmov.f32	s15, s0
 800d9c6:	eeb0 0a67 	vmov.f32	s0, s15
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <_ZN18VolumeFilterStructC1Ev>:
	float32_t FirstVolumeMAFArray[50];  //60//20
	uint16_t FirstVolumeMAFLength;
	uint16_t Len=25;   //50;  //50//60//20;
	float PreviousHPFilteredValue;

} VolumeFilterStruct;
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2219      	movs	r2, #25
 800d9dc:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	370c      	adds	r7, #12
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr

0800d9ee <_ZN16FlowFilterStructC1Ev>:
	float32_t SumFirstFlowMAFValue;
	float32_t FirstFlowMAFArray[40];
	uint16_t Len=40;         //7;    //40
	uint8_t FirstFlowMAFLength;

} FlowFilterStruct;
 800d9ee:	b480      	push	{r7}
 800d9f0:	b083      	sub	sp, #12
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2228      	movs	r2, #40	@ 0x28
 800d9fa:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	4618      	mov	r0, r3
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <_ZN8LoadCellC1Ev>:
FlowFilterStruct FlowFilter;

float32_t dependedFlow=0;


LoadCell::LoadCell() {
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	4a04      	ldr	r2, [pc, #16]	@ (800da28 <_ZN8LoadCellC1Ev+0x1c>)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4618      	mov	r0, r3
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr
 800da28:	08011d04 	.word	0x08011d04

0800da2c <_ZN8LoadCellD1Ev>:

LoadCell::~LoadCell() {
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	4a04      	ldr	r2, [pc, #16]	@ (800da48 <_ZN8LoadCellD1Ev+0x1c>)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	4618      	mov	r0, r3
 800da3e:	370c      	adds	r7, #12
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr
 800da48:	08011d04 	.word	0x08011d04

0800da4c <_ZN8LoadCellD0Ev>:
LoadCell::~LoadCell() {
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
}
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f7ff ffe9 	bl	800da2c <_ZN8LoadCellD1Ev>
 800da5a:	f242 0138 	movw	r1, #8248	@ 0x2038
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f003 f838 	bl	8010ad4 <_ZdlPvj>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4618      	mov	r0, r3
 800da68:	3708      	adds	r7, #8
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <_ZN8LoadCell5SetupEv>:

void LoadCell::Setup(void){
 800da6e:	b580      	push	{r7, lr}
 800da70:	b082      	sub	sp, #8
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
	WriteToSPI(PHASE_ADDRESS, PHASE_VALUE);
 800da76:	2200      	movs	r2, #0
 800da78:	210e      	movs	r1, #14
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 fd74 	bl	800e568 <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(GAIN_ADDRESS, GAIN_VALUE);
 800da80:	2200      	movs	r2, #0
 800da82:	2110      	movs	r1, #16
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 fd6f 	bl	800e568 <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(STATUS_COM_ADDRESS, STATUS_COM_VALUE);
 800da8a:	22a3      	movs	r2, #163	@ 0xa3
 800da8c:	2112      	movs	r1, #18
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 fd6a 	bl	800e568 <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(CONFIG_1_ADDRESS, CONFIG_1_VALUE);
 800da94:	22f0      	movs	r2, #240	@ 0xf0
 800da96:	2114      	movs	r1, #20
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fd65 	bl	800e568 <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(CONFIG_2_ADDRESS, CONFIG_2_VALUE);
 800da9e:	220c      	movs	r2, #12
 800daa0:	2116      	movs	r1, #22
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 fd60 	bl	800e568 <_ZN8LoadCell10WriteToSPIEtt>
}
 800daa8:	bf00      	nop
 800daaa:	3708      	adds	r7, #8
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <_ZN8LoadCell17ReadVolumeAndFlowEv>:
void LoadCell::ReadVolumeAndFlow(void){
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b08a      	sub	sp, #40	@ 0x28
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
	VolumeValue=0;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dabe:	461a      	mov	r2, r3
 800dac0:	f04f 0300 	mov.w	r3, #0
 800dac4:	6113      	str	r3, [r2, #16]
	uint32_t readLoadCellValue[6];

	ReadFromSPI(DATA_CH0_0,LOAD_CELL_ALL);
 800dac6:	2201      	movs	r2, #1
 800dac8:	2101      	movs	r1, #1
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 fc8e 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[0] = VolumeAndFlowReadSPIValue;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dad6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dada:	60fb      	str	r3, [r7, #12]
	Debugger.LoadcellSPI.Channel1=VolumeAndFlowReadSPIValue;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dae2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dae6:	461a      	mov	r2, r3
 800dae8:	4b61      	ldr	r3, [pc, #388]	@ (800dc70 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800daea:	67da      	str	r2, [r3, #124]	@ 0x7c
	ReadFromSPI(DATA_CH0_1,LOAD_CELL_ALL);
 800daec:	2201      	movs	r2, #1
 800daee:	2103      	movs	r1, #3
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fc7b 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[1] = VolumeAndFlowReadSPIValue;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dafc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db00:	613b      	str	r3, [r7, #16]
	Debugger.LoadcellSPI.Channel2=VolumeAndFlowReadSPIValue;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db08:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db0c:	461a      	mov	r2, r3
 800db0e:	4b58      	ldr	r3, [pc, #352]	@ (800dc70 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800db10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	ReadFromSPI(DATA_CH0_2,LOAD_CELL_ALL);
 800db14:	2201      	movs	r2, #1
 800db16:	2105      	movs	r1, #5
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f000 fc67 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[2] = VolumeAndFlowReadSPIValue;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db24:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db28:	617b      	str	r3, [r7, #20]
	Debugger.LoadcellSPI.Channel3=VolumeAndFlowReadSPIValue;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db30:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db34:	461a      	mov	r2, r3
 800db36:	4b4e      	ldr	r3, [pc, #312]	@ (800dc70 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800db38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	ReadFromSPI(DATA_CH1_0,LOAD_CELL_ALL);
 800db3c:	2201      	movs	r2, #1
 800db3e:	2107      	movs	r1, #7
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 fc53 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[3] = VolumeAndFlowReadSPIValue;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db4c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db50:	61bb      	str	r3, [r7, #24]
	Debugger.LoadcellSPI.Channel4=VolumeAndFlowReadSPIValue;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db5c:	461a      	mov	r2, r3
 800db5e:	4b44      	ldr	r3, [pc, #272]	@ (800dc70 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800db60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	ReadFromSPI(DATA_CH1_1,LOAD_CELL_ALL);
 800db64:	2201      	movs	r2, #1
 800db66:	2109      	movs	r1, #9
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 fc3f 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[4] = VolumeAndFlowReadSPIValue;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db74:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db78:	61fb      	str	r3, [r7, #28]
	Debugger.LoadcellSPI.Channel5=VolumeAndFlowReadSPIValue;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db80:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db84:	461a      	mov	r2, r3
 800db86:	4b3a      	ldr	r3, [pc, #232]	@ (800dc70 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800db88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

	ReadFromSPI(DATA_CH1_2,LOAD_CELL_ALL);
 800db8c:	2201      	movs	r2, #1
 800db8e:	210b      	movs	r1, #11
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 fc2b 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[5] = VolumeAndFlowReadSPIValue;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dba0:	623b      	str	r3, [r7, #32]
	Debugger.LoadcellSPI.Channel6=VolumeAndFlowReadSPIValue;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dba8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dbac:	461a      	mov	r2, r3
 800dbae:	4b30      	ldr	r3, [pc, #192]	@ (800dc70 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800dbb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbb8:	e036      	b.n	800dc28 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x178>
		VolumeValue = VolumeValue
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dbc0:	ed93 7a04 	vldr	s14, [r3, #16]
				+ readLoadCellValue[4] + (readLoadCellValue[3] << 8);
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	ee07 3a90 	vmov	s15, r3
 800dbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	021b      	lsls	r3, r3, #8
 800dbd6:	ee07 3a90 	vmov	s15, r3
 800dbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbde:	ee77 7a27 	vadd.f32	s15, s14, s15
		VolumeValue = VolumeValue
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dbe8:	edc3 7a04 	vstr	s15, [r3, #16]
		FlowValue = readLoadCellValue[1]
 800dbec:	693a      	ldr	r2, [r7, #16]
				+ (readLoadCellValue[0] << 8);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	021b      	lsls	r3, r3, #8
 800dbf2:	4413      	add	r3, r2
		FlowValue = readLoadCellValue[1]
 800dbf4:	ee07 3a90 	vmov	s15, r3
 800dbf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc02:	edc3 7a03 	vstr	s15, [r3, #12]
		FlowValue=(65536-FlowValue);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc0c:	edd3 7a03 	vldr	s15, [r3, #12]
 800dc10:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800dc74 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c4>
 800dc14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc1e:	edc3 7a03 	vstr	s15, [r3, #12]
	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800dc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc24:	3301      	adds	r3, #1
 800dc26:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2a:	2b27      	cmp	r3, #39	@ 0x27
 800dc2c:	ddc5      	ble.n	800dbba <_ZN8LoadCell17ReadVolumeAndFlowEv+0x10a>
	}
	Debugger.ReadedVolume=VolumeValue;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc34:	691b      	ldr	r3, [r3, #16]
 800dc36:	4a0e      	ldr	r2, [pc, #56]	@ (800dc70 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800dc38:	6113      	str	r3, [r2, #16]
	//float32_t readedVolume=ExponantialSmoothingFilter(0.5, VolumeValue, LastReadVolumeValue);
	LastReadVolumeValue=VolumeValue;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc40:	691b      	ldr	r3, [r3, #16]
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800dc48:	6213      	str	r3, [r2, #32]

	Debugger.ReadedFlow=FlowValue;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	4a07      	ldr	r2, [pc, #28]	@ (800dc70 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800dc54:	6153      	str	r3, [r2, #20]
	//float32_t readedFlow=ExponantialSmoothingFilter(0.5, FlowValue, LastReadFlowValue);
	LastReadFlowValue=FlowValue;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc5c:	68db      	ldr	r3, [r3, #12]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800dc64:	61d3      	str	r3, [r2, #28]

}
 800dc66:	bf00      	nop
 800dc68:	3728      	adds	r7, #40	@ 0x28
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	200093a8 	.word	0x200093a8
 800dc74:	47800000 	.word	0x47800000

0800dc78 <_ZN8LoadCell10ReadVolumeEb>:
void LoadCell::ReadVolume(bool useBuffer){
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b088      	sub	sp, #32
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	460b      	mov	r3, r1
 800dc82:	70fb      	strb	r3, [r7, #3]
	VolumeValue=0;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	f04f 0300 	mov.w	r3, #0
 800dc90:	6113      	str	r3, [r2, #16]
	uint32_t readLoadCellValue[3];

	ReadFromSPI(DATA_CH1_0,LOAD_CELL_VOLUME);
 800dc92:	2202      	movs	r2, #2
 800dc94:	2107      	movs	r1, #7
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fba8 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[0] = VolumeReadSPIValue;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dca2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dca6:	60fb      	str	r3, [r7, #12]

	ReadFromSPI(DATA_CH1_1,LOAD_CELL_VOLUME);
 800dca8:	2202      	movs	r2, #2
 800dcaa:	2109      	movs	r1, #9
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 fb9d 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[1] = VolumeReadSPIValue;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dcb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dcbc:	613b      	str	r3, [r7, #16]

	ReadFromSPI(DATA_CH1_2,LOAD_CELL_VOLUME);
 800dcbe:	2202      	movs	r2, #2
 800dcc0:	210b      	movs	r1, #11
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 fb92 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[2] = VolumeReadSPIValue;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dcce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dcd2:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	61fb      	str	r3, [r7, #28]
 800dcd8:	e01b      	b.n	800dd12 <_ZN8LoadCell10ReadVolumeEb+0x9a>
		VolumeValue = VolumeValue
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dce0:	ed93 7a04 	vldr	s14, [r3, #16]
				+ readLoadCellValue[1] + (readLoadCellValue[0] << 8);
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	ee07 3a90 	vmov	s15, r3
 800dcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	021b      	lsls	r3, r3, #8
 800dcf6:	ee07 3a90 	vmov	s15, r3
 800dcfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcfe:	ee77 7a27 	vadd.f32	s15, s14, s15
		VolumeValue = VolumeValue
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dd08:	edc3 7a04 	vstr	s15, [r3, #16]
	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	61fb      	str	r3, [r7, #28]
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	2b27      	cmp	r3, #39	@ 0x27
 800dd16:	dde0      	ble.n	800dcda <_ZN8LoadCell10ReadVolumeEb+0x62>
	}
	float32_t newVal=CalculateRealVolumeData(VolumeValue)-2; //-1
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dd1e:	edd3 7a04 	vldr	s15, [r3, #16]
 800dd22:	eeb0 0a67 	vmov.f32	s0, s15
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 f88c 	bl	800de44 <_ZN8LoadCell23CalculateRealVolumeDataEf>
 800dd2c:	eef0 7a40 	vmov.f32	s15, s0
 800dd30:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800dd34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd38:	edc7 7a02 	vstr	s15, [r7, #8]
	if(newVal<0){
 800dd3c:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dd44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd48:	d502      	bpl.n	800dd50 <_ZN8LoadCell10ReadVolumeEb+0xd8>
		newVal=0;
 800dd4a:	f04f 0300 	mov.w	r3, #0
 800dd4e:	60bb      	str	r3, [r7, #8]
	//if(dependedFlow==0) newVal=0;

	/*if(newVal<MaxVolumeValue){   //
		newVal=MaxVolumeValue;     //
	}*/                            //
	MaxVolumeValue=newVal;
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800dd58:	6153      	str	r3, [r2, #20]
	Debugger.Volume=newVal;
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	4a38      	ldr	r2, [pc, #224]	@ (800de40 <_ZN8LoadCell10ReadVolumeEb+0x1c8>)
 800dd5e:	6213      	str	r3, [r2, #32]
	if(useBuffer==false) return;
 800dd60:	78fb      	ldrb	r3, [r7, #3]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d067      	beq.n	800de36 <_ZN8LoadCell10ReadVolumeEb+0x1be>
	VolumeBufferLen%=1024;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	425a      	negs	r2, r3
 800dd70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd74:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800dd78:	bf58      	it	pl
 800dd7a:	4253      	negpl	r3, r2
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800dd82:	6053      	str	r3, [r2, #4]
	uint8_t *array;
	array = (uint8_t*)(&newVal);
 800dd84:	f107 0308 	add.w	r3, r7, #8
 800dd88:	61bb      	str	r3, [r7, #24]
	VolumeBuffer[VolumeBufferLen]=array[0];
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	781a      	ldrb	r2, [r3, #0]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	ee07 2a90 	vmov	s15, r2
 800dd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	4413      	add	r3, r2
 800dda4:	3304      	adds	r3, #4
 800dda6:	edc3 7a00 	vstr	s15, [r3]
	VolumeBuffer[VolumeBufferLen+1]=array[1];
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	3301      	adds	r3, #1
 800ddae:	781a      	ldrb	r2, [r3, #0]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	ee07 2a90 	vmov	s15, r2
 800ddbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	4413      	add	r3, r2
 800ddc8:	3304      	adds	r3, #4
 800ddca:	edc3 7a00 	vstr	s15, [r3]
	VolumeBuffer[VolumeBufferLen+2]=array[2];
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	3302      	adds	r3, #2
 800ddd2:	781a      	ldrb	r2, [r3, #0]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	3302      	adds	r3, #2
 800ddde:	ee07 2a90 	vmov	s15, r2
 800dde2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4413      	add	r3, r2
 800ddec:	3304      	adds	r3, #4
 800ddee:	edc3 7a00 	vstr	s15, [r3]
	VolumeBuffer[VolumeBufferLen+3]=array[3];
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	3303      	adds	r3, #3
 800ddf6:	781a      	ldrb	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	3303      	adds	r3, #3
 800de02:	ee07 2a90 	vmov	s15, r2
 800de06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	4413      	add	r3, r2
 800de10:	3304      	adds	r3, #4
 800de12:	edc3 7a00 	vstr	s15, [r3]
	VolumeBufferLen+=4;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	3304      	adds	r3, #4
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800de26:	6053      	str	r3, [r2, #4]
	Debugger.VolumeBufferLen=VolumeBufferLen;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	4a03      	ldr	r2, [pc, #12]	@ (800de40 <_ZN8LoadCell10ReadVolumeEb+0x1c8>)
 800de32:	6013      	str	r3, [r2, #0]
 800de34:	e000      	b.n	800de38 <_ZN8LoadCell10ReadVolumeEb+0x1c0>
	if(useBuffer==false) return;
 800de36:	bf00      	nop
}
 800de38:	3720      	adds	r7, #32
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	200093a8 	.word	0x200093a8

0800de44 <_ZN8LoadCell23CalculateRealVolumeDataEf>:
float32_t LoadCell::CalculateRealVolumeData(float32_t volume){
 800de44:	b580      	push	{r7, lr}
 800de46:	b08a      	sub	sp, #40	@ 0x28
 800de48:	af02      	add	r7, sp, #8
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	ed87 0a00 	vstr	s0, [r7]
	float32_t newVolume = 0;
 800de50:	f04f 0300 	mov.w	r3, #0
 800de54:	61fb      	str	r3, [r7, #28]
	float32_t movingVolumeData = 0;
 800de56:	f04f 0300 	mov.w	r3, #0
 800de5a:	617b      	str	r3, [r7, #20]
	Debugger.ReadedVolume=volume;
 800de5c:	4a5a      	ldr	r2, [pc, #360]	@ (800dfc8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	6113      	str	r3, [r2, #16]
	float32_t readedVolume=ExponantialSmoothingFilter(0.45, volume, LastReadVolumeValue);  //0.5
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800de68:	edd3 7a08 	vldr	s15, [r3, #32]
 800de6c:	eeb0 1a67 	vmov.f32	s2, s15
 800de70:	edd7 0a00 	vldr	s1, [r7]
 800de74:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 800dfcc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 fb9f 	bl	800e5bc <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800de7e:	ed87 0a04 	vstr	s0, [r7, #16]
	LastReadVolumeValue=readedVolume;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800de88:	461a      	mov	r2, r3
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	6213      	str	r3, [r2, #32]

	VolumeFilter.FirstVolumeMAFLength++;
 800de8e:	4b50      	ldr	r3, [pc, #320]	@ (800dfd0 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800de90:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800de94:	3301      	adds	r3, #1
 800de96:	b29a      	uxth	r2, r3
 800de98:	4b4d      	ldr	r3, [pc, #308]	@ (800dfd0 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800de9a:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
	if (VolumeFilter.FirstVolumeMAFLength
 800de9e:	4b4c      	ldr	r3, [pc, #304]	@ (800dfd0 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800dea0:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
			>= VolumeFilter.Len) {
 800dea4:	4b4a      	ldr	r3, [pc, #296]	@ (800dfd0 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800dea6:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
	if (VolumeFilter.FirstVolumeMAFLength
 800deaa:	429a      	cmp	r2, r3
 800deac:	d303      	bcc.n	800deb6 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x72>
		VolumeFilter.FirstVolumeMAFLength = 0;
 800deae:	4b48      	ldr	r3, [pc, #288]	@ (800dfd0 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800deb0:	2200      	movs	r2, #0
 800deb2:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
	}
	float32_t diff=readedVolume-(SystemConfig.VolumeAverage);
 800deb6:	4b47      	ldr	r3, [pc, #284]	@ (800dfd4 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x190>)
 800deb8:	699b      	ldr	r3, [r3, #24]
 800deba:	ee07 3a90 	vmov	s15, r3
 800debe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dec2:	ed97 7a04 	vldr	s14, [r7, #16]
 800dec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800deca:	edc7 7a06 	vstr	s15, [r7, #24]
	if(diff<0){
 800dece:	edd7 7a06 	vldr	s15, [r7, #24]
 800ded2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ded6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deda:	d502      	bpl.n	800dee2 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x9e>
		diff=0;
 800dedc:	f04f 0300 	mov.w	r3, #0
 800dee0:	61bb      	str	r3, [r7, #24]
	}
	Debugger.DiffAverageVolumeValue=diff;
 800dee2:	4a39      	ldr	r2, [pc, #228]	@ (800dfc8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	6593      	str	r3, [r2, #88]	@ 0x58

	movingVolumeData = FilterInstance.MoovingAverage(
			VolumeFilter.FirstVolumeMAFArray,
			&VolumeFilter.SumFirstVolumeMAFValue,
			VolumeFilter.FirstVolumeMAFLength,VolumeFilter.Len , diff);
 800dee8:	4b39      	ldr	r3, [pc, #228]	@ (800dfd0 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800deea:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
	movingVolumeData = FilterInstance.MoovingAverage(
 800deee:	461a      	mov	r2, r3
			VolumeFilter.FirstVolumeMAFLength,VolumeFilter.Len , diff);
 800def0:	4b37      	ldr	r3, [pc, #220]	@ (800dfd0 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800def2:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
	movingVolumeData = FilterInstance.MoovingAverage(
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	ed97 0a06 	vldr	s0, [r7, #24]
 800defc:	4613      	mov	r3, r2
 800defe:	4a34      	ldr	r2, [pc, #208]	@ (800dfd0 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800df00:	4935      	ldr	r1, [pc, #212]	@ (800dfd8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x194>)
 800df02:	4836      	ldr	r0, [pc, #216]	@ (800dfdc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x198>)
 800df04:	f7fe f8a4 	bl	800c050 <_ZN6Filter14MoovingAverageEPfS0_mmf>
 800df08:	ed87 0a05 	vstr	s0, [r7, #20]
	Debugger.MovingAverageVolumeValue=movingVolumeData;
 800df0c:	4a2e      	ldr	r2, [pc, #184]	@ (800dfc8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	6513      	str	r3, [r2, #80]	@ 0x50
	float32_t newValue=movingVolumeData/(SystemConfig.VolumeRate); //+6
 800df12:	4b30      	ldr	r3, [pc, #192]	@ (800dfd4 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x190>)
 800df14:	ed93 7a07 	vldr	s14, [r3, #28]
 800df18:	edd7 6a05 	vldr	s13, [r7, #20]
 800df1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df20:	edc7 7a03 	vstr	s15, [r7, #12]
	newVolume=ExponantialSmoothingFilter((newValue>10?0.45:0.85), newValue,LastVolumeValue); //0.5
 800df24:	edd7 7a03 	vldr	s15, [r7, #12]
 800df28:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800df2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df34:	dd02      	ble.n	800df3c <_ZN8LoadCell23CalculateRealVolumeDataEf+0xf8>
 800df36:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800dfcc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>
 800df3a:	e001      	b.n	800df40 <_ZN8LoadCell23CalculateRealVolumeDataEf+0xfc>
 800df3c:	eddf 7a28 	vldr	s15, [pc, #160]	@ 800dfe0 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x19c>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800df46:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800df4a:	eeb0 1a47 	vmov.f32	s2, s14
 800df4e:	edd7 0a03 	vldr	s1, [r7, #12]
 800df52:	eeb0 0a67 	vmov.f32	s0, s15
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f000 fb30 	bl	800e5bc <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800df5c:	ed87 0a07 	vstr	s0, [r7, #28]
	if(newValue>5){
 800df60:	edd7 7a03 	vldr	s15, [r7, #12]
 800df64:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800df68:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df70:	dd06      	ble.n	800df80 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x13c>
		newVolume=ceil(newVolume);
 800df72:	ed97 0a07 	vldr	s0, [r7, #28]
 800df76:	f7ff fd0b 	bl	800d990 <_ZSt4ceilf>
 800df7a:	ed87 0a07 	vstr	s0, [r7, #28]
 800df7e:	e005      	b.n	800df8c <_ZN8LoadCell23CalculateRealVolumeDataEf+0x148>
	}
	else{
		newVolume=floor(newVolume);
 800df80:	ed97 0a07 	vldr	s0, [r7, #28]
 800df84:	f7ff fd14 	bl	800d9b0 <_ZSt5floorf>
 800df88:	ed87 0a07 	vstr	s0, [r7, #28]
	}
	if(newVolume<0){
 800df8c:	edd7 7a07 	vldr	s15, [r7, #28]
 800df90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df98:	d502      	bpl.n	800dfa0 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x15c>
		newVolume=0;
 800df9a:	f04f 0300 	mov.w	r3, #0
 800df9e:	61fb      	str	r3, [r7, #28]
	}
	LastVolumeValue=newVolume;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	6293      	str	r3, [r2, #40]	@ 0x28
	Debugger.LastVolume=LastVolumeValue;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dfb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfb4:	4a04      	ldr	r2, [pc, #16]	@ (800dfc8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800dfb6:	6193      	str	r3, [r2, #24]
	return newVolume;
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	ee07 3a90 	vmov	s15, r3
}
 800dfbe:	eeb0 0a67 	vmov.f32	s0, s15
 800dfc2:	3720      	adds	r7, #32
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	200093a8 	.word	0x200093a8
 800dfcc:	3ee66666 	.word	0x3ee66666
 800dfd0:	20004ef4 	.word	0x20004ef4
 800dfd4:	2000932c 	.word	0x2000932c
 800dfd8:	20004ef8 	.word	0x20004ef8
 800dfdc:	20004ef0 	.word	0x20004ef0
 800dfe0:	3f59999a 	.word	0x3f59999a
 800dfe4:	00000000 	.word	0x00000000

0800dfe8 <_ZN8LoadCell8ReadFlowEb>:
void LoadCell::ReadFlow(bool useBuffer){
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b08a      	sub	sp, #40	@ 0x28
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	460b      	mov	r3, r1
 800dff2:	70fb      	strb	r3, [r7, #3]
	uint32_t readLoadCellValue[6];

	ReadFromSPI(DATA_CH0_0,LOAD_CELL_FLOW);
 800dff4:	2203      	movs	r2, #3
 800dff6:	2101      	movs	r1, #1
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f000 f9f7 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[0] = FlowReadSPIValue;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e004:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e008:	60fb      	str	r3, [r7, #12]

	ReadFromSPI(DATA_CH0_1,LOAD_CELL_FLOW);
 800e00a:	2203      	movs	r2, #3
 800e00c:	2103      	movs	r1, #3
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 f9ec 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[1] = FlowReadSPIValue;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e01a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e01e:	613b      	str	r3, [r7, #16]

	ReadFromSPI(DATA_CH0_2,LOAD_CELL_FLOW);
 800e020:	2203      	movs	r2, #3
 800e022:	2105      	movs	r1, #5
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 f9e1 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[2] = FlowReadSPIValue;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e030:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e034:	617b      	str	r3, [r7, #20]

	ReadFromSPI(DATA_CH1_0,LOAD_CELL_FLOW);
 800e036:	2203      	movs	r2, #3
 800e038:	2107      	movs	r1, #7
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f000 f9d6 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[3] = FlowReadSPIValue;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e046:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e04a:	61bb      	str	r3, [r7, #24]

	ReadFromSPI(DATA_CH1_1,LOAD_CELL_FLOW);
 800e04c:	2203      	movs	r2, #3
 800e04e:	2109      	movs	r1, #9
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 f9cb 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[4] = FlowReadSPIValue;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e05c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e060:	61fb      	str	r3, [r7, #28]

	ReadFromSPI(DATA_CH1_2,LOAD_CELL_FLOW);
 800e062:	2203      	movs	r2, #3
 800e064:	210b      	movs	r1, #11
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 f9c0 	bl	800e3ec <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[5] = FlowReadSPIValue;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e072:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e076:	623b      	str	r3, [r7, #32]
	FlowValue = readLoadCellValue[1]
 800e078:	693a      	ldr	r2, [r7, #16]
			+ (readLoadCellValue[0] << 8);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	021b      	lsls	r3, r3, #8
 800e07e:	4413      	add	r3, r2
	FlowValue = readLoadCellValue[1]
 800e080:	ee07 3a90 	vmov	s15, r3
 800e084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e08e:	edc3 7a03 	vstr	s15, [r3, #12]
	FlowValue=(65536-FlowValue);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e098:	edd3 7a03 	vldr	s15, [r3, #12]
 800e09c:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800e228 <_ZN8LoadCell8ReadFlowEb+0x240>
 800e0a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e0aa:	edc3 7a03 	vstr	s15, [r3, #12]
	float32_t newVal=CalculateRealFlowData(FlowValue)-4.52;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e0b4:	edd3 7a03 	vldr	s15, [r3, #12]
 800e0b8:	eeb0 0a67 	vmov.f32	s0, s15
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 f8bf 	bl	800e240 <_ZN8LoadCell21CalculateRealFlowDataEf>
 800e0c2:	ee10 3a10 	vmov	r3, s0
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7f2 fa36 	bl	8000538 <__aeabi_f2d>
 800e0cc:	a354      	add	r3, pc, #336	@ (adr r3, 800e220 <_ZN8LoadCell8ReadFlowEb+0x238>)
 800e0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d2:	f7f2 f8d1 	bl	8000278 <__aeabi_dsub>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	460b      	mov	r3, r1
 800e0da:	4610      	mov	r0, r2
 800e0dc:	4619      	mov	r1, r3
 800e0de:	f7f2 fc95 	bl	8000a0c <__aeabi_d2f>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	60bb      	str	r3, [r7, #8]
	if(newVal<0) newVal=0;
 800e0e6:	edd7 7a02 	vldr	s15, [r7, #8]
 800e0ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f2:	d502      	bpl.n	800e0fa <_ZN8LoadCell8ReadFlowEb+0x112>
 800e0f4:	f04f 0300 	mov.w	r3, #0
 800e0f8:	60bb      	str	r3, [r7, #8]
    dependedFlow=newVal;
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	4a4b      	ldr	r2, [pc, #300]	@ (800e22c <_ZN8LoadCell8ReadFlowEb+0x244>)
 800e0fe:	6013      	str	r3, [r2, #0]

	if(newVal>=SystemConfig.MinimumFlowSensiblity){
 800e100:	4b4b      	ldr	r3, [pc, #300]	@ (800e230 <_ZN8LoadCell8ReadFlowEb+0x248>)
 800e102:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800e106:	ee07 3a90 	vmov	s15, r3
 800e10a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e10e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e11a:	d80b      	bhi.n	800e134 <_ZN8LoadCell8ReadFlowEb+0x14c>
		IsFirstHandle=true;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e122:	2201      	movs	r2, #1
 800e124:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		LastHandleProcessTime=StartTimerTicks;
 800e128:	4b42      	ldr	r3, [pc, #264]	@ (800e234 <_ZN8LoadCell8ReadFlowEb+0x24c>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800e132:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	Debugger.Flow=newVal;
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	4a40      	ldr	r2, [pc, #256]	@ (800e238 <_ZN8LoadCell8ReadFlowEb+0x250>)
 800e138:	6253      	str	r3, [r2, #36]	@ 0x24
	if(useBuffer==false) return;
 800e13a:	78fb      	ldrb	r3, [r7, #3]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d06b      	beq.n	800e218 <_ZN8LoadCell8ReadFlowEb+0x230>
	FlowBufferLen%=1024;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	425a      	negs	r2, r3
 800e14a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e14e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e152:	bf58      	it	pl
 800e154:	4253      	negpl	r3, r2
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800e15c:	6093      	str	r3, [r2, #8]
	uint8_t *array;
	array = (uint8_t*)(&newVal);
 800e15e:	f107 0308 	add.w	r3, r7, #8
 800e162:	627b      	str	r3, [r7, #36]	@ 0x24
	FlowBuffer[FlowBufferLen]=array[0];
 800e164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e166:	781a      	ldrb	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e16e:	689b      	ldr	r3, [r3, #8]
 800e170:	ee07 2a90 	vmov	s15, r2
 800e174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	4413      	add	r3, r2
 800e182:	edc3 7a00 	vstr	s15, [r3]
	FlowBuffer[FlowBufferLen+1]=array[1];
 800e186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e188:	3301      	adds	r3, #1
 800e18a:	781a      	ldrb	r2, [r3, #0]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e192:	689b      	ldr	r3, [r3, #8]
 800e194:	3301      	adds	r3, #1
 800e196:	ee07 2a90 	vmov	s15, r2
 800e19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4413      	add	r3, r2
 800e1a8:	edc3 7a00 	vstr	s15, [r3]
	FlowBuffer[FlowBufferLen+2]=array[2];
 800e1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ae:	3302      	adds	r3, #2
 800e1b0:	781a      	ldrb	r2, [r3, #0]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e1b8:	689b      	ldr	r3, [r3, #8]
 800e1ba:	3302      	adds	r3, #2
 800e1bc:	ee07 2a90 	vmov	s15, r2
 800e1c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	4413      	add	r3, r2
 800e1ce:	edc3 7a00 	vstr	s15, [r3]
	FlowBuffer[FlowBufferLen+3]=array[3];
 800e1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d4:	3303      	adds	r3, #3
 800e1d6:	781a      	ldrb	r2, [r3, #0]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e1de:	689b      	ldr	r3, [r3, #8]
 800e1e0:	3303      	adds	r3, #3
 800e1e2:	ee07 2a90 	vmov	s15, r2
 800e1e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e1f0:	009b      	lsls	r3, r3, #2
 800e1f2:	4413      	add	r3, r2
 800e1f4:	edc3 7a00 	vstr	s15, [r3]
	FlowBufferLen+=4;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	3304      	adds	r3, #4
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800e208:	6093      	str	r3, [r2, #8]
	Debugger.FlowBufferLen=FlowBufferLen;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	4a09      	ldr	r2, [pc, #36]	@ (800e238 <_ZN8LoadCell8ReadFlowEb+0x250>)
 800e214:	6053      	str	r3, [r2, #4]
 800e216:	e000      	b.n	800e21a <_ZN8LoadCell8ReadFlowEb+0x232>
	if(useBuffer==false) return;
 800e218:	bf00      	nop
}
 800e21a:	3728      	adds	r7, #40	@ 0x28
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	e147ae14 	.word	0xe147ae14
 800e224:	4012147a 	.word	0x4012147a
 800e228:	47800000 	.word	0x47800000
 800e22c:	20005070 	.word	0x20005070
 800e230:	2000932c 	.word	0x2000932c
 800e234:	200000cc 	.word	0x200000cc
 800e238:	200093a8 	.word	0x200093a8
 800e23c:	00000000 	.word	0x00000000

0800e240 <_ZN8LoadCell21CalculateRealFlowDataEf>:
float32_t LoadCell::CalculateRealFlowData(float32_t flow){
 800e240:	b580      	push	{r7, lr}
 800e242:	b08a      	sub	sp, #40	@ 0x28
 800e244:	af02      	add	r7, sp, #8
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	ed87 0a00 	vstr	s0, [r7]
	float32_t newFlow = 0;
 800e24c:	f04f 0300 	mov.w	r3, #0
 800e250:	61fb      	str	r3, [r7, #28]
	float32_t movingFlowData = 0;
 800e252:	f04f 0300 	mov.w	r3, #0
 800e256:	617b      	str	r3, [r7, #20]

	Debugger.ReadedFlow=flow;
 800e258:	4a5d      	ldr	r2, [pc, #372]	@ (800e3d0 <_ZN8LoadCell21CalculateRealFlowDataEf+0x190>)
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	6153      	str	r3, [r2, #20]
	float32_t readedFlow=ExponantialSmoothingFilter(0.25, flow, LastReadFlowValue) + 100; //0,4
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e264:	edd3 7a07 	vldr	s15, [r3, #28]
 800e268:	eeb0 1a67 	vmov.f32	s2, s15
 800e26c:	edd7 0a00 	vldr	s1, [r7]
 800e270:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 f9a1 	bl	800e5bc <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800e27a:	eef0 7a40 	vmov.f32	s15, s0
 800e27e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800e3d4 <_ZN8LoadCell21CalculateRealFlowDataEf+0x194>
 800e282:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e286:	edc7 7a04 	vstr	s15, [r7, #16]
	LastReadFlowValue=readedFlow;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e290:	461a      	mov	r2, r3
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	61d3      	str	r3, [r2, #28]
	FlowFilter.FirstFlowMAFLength++;
 800e296:	4b50      	ldr	r3, [pc, #320]	@ (800e3d8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e298:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800e29c:	3301      	adds	r3, #1
 800e29e:	b2da      	uxtb	r2, r3
 800e2a0:	4b4d      	ldr	r3, [pc, #308]	@ (800e3d8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e2a2:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	float32_t diffFlow=readedFlow-(SystemConfig.FlowAverage-280);    //320 //270  //200
 800e2a6:	4b4d      	ldr	r3, [pc, #308]	@ (800e3dc <_ZN8LoadCell21CalculateRealFlowDataEf+0x19c>)
 800e2a8:	695b      	ldr	r3, [r3, #20]
 800e2aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e2ae:	ee07 3a90 	vmov	s15, r3
 800e2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2b6:	ed97 7a04 	vldr	s14, [r7, #16]
 800e2ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2be:	edc7 7a06 	vstr	s15, [r7, #24]
	if(diffFlow<0){
 800e2c2:	edd7 7a06 	vldr	s15, [r7, #24]
 800e2c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ce:	d502      	bpl.n	800e2d6 <_ZN8LoadCell21CalculateRealFlowDataEf+0x96>
		diffFlow=0;
 800e2d0:	f04f 0300 	mov.w	r3, #0
 800e2d4:	61bb      	str	r3, [r7, #24]
	}
	if (FlowFilter.FirstFlowMAFLength >= FlowFilter.Len) {
 800e2d6:	4b40      	ldr	r3, [pc, #256]	@ (800e3d8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e2d8:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800e2dc:	461a      	mov	r2, r3
 800e2de:	4b3e      	ldr	r3, [pc, #248]	@ (800e3d8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e2e0:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	db03      	blt.n	800e2f0 <_ZN8LoadCell21CalculateRealFlowDataEf+0xb0>
		FlowFilter.FirstFlowMAFLength = 0;
 800e2e8:	4b3b      	ldr	r3, [pc, #236]	@ (800e3d8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	}

	movingFlowData = FilterInstance.MoovingAverage(
			FlowFilter.FirstFlowMAFArray,
			&FlowFilter.SumFirstFlowMAFValue,
			FlowFilter.FirstFlowMAFLength,
 800e2f0:	4b39      	ldr	r3, [pc, #228]	@ (800e3d8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e2f2:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
	movingFlowData = FilterInstance.MoovingAverage(
 800e2f6:	461a      	mov	r2, r3
			FlowFilter.Len,
 800e2f8:	4b37      	ldr	r3, [pc, #220]	@ (800e3d8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e2fa:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
	movingFlowData = FilterInstance.MoovingAverage(
 800e2fe:	9300      	str	r3, [sp, #0]
 800e300:	ed97 0a06 	vldr	s0, [r7, #24]
 800e304:	4613      	mov	r3, r2
 800e306:	4a34      	ldr	r2, [pc, #208]	@ (800e3d8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e308:	4935      	ldr	r1, [pc, #212]	@ (800e3e0 <_ZN8LoadCell21CalculateRealFlowDataEf+0x1a0>)
 800e30a:	4836      	ldr	r0, [pc, #216]	@ (800e3e4 <_ZN8LoadCell21CalculateRealFlowDataEf+0x1a4>)
 800e30c:	f7fd fea0 	bl	800c050 <_ZN6Filter14MoovingAverageEPfS0_mmf>
 800e310:	ed87 0a05 	vstr	s0, [r7, #20]
			diffFlow);
	float32_t newValue=movingFlowData/SystemConfig.FlowRate;
 800e314:	4b31      	ldr	r3, [pc, #196]	@ (800e3dc <_ZN8LoadCell21CalculateRealFlowDataEf+0x19c>)
 800e316:	ed93 7a08 	vldr	s14, [r3, #32]
 800e31a:	edd7 6a05 	vldr	s13, [r7, #20]
 800e31e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e322:	edc7 7a03 	vstr	s15, [r7, #12]
	newFlow=(ExponantialSmoothingFilter((newValue>4?0.25:0.85), newValue,LastFlowValue))/1.1;  //1.25//0,5  //1.6 scale ==> flow 13 max
 800e326:	edd7 7a03 	vldr	s15, [r7, #12]
 800e32a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800e32e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e336:	dd02      	ble.n	800e33e <_ZN8LoadCell21CalculateRealFlowDataEf+0xfe>
 800e338:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800e33c:	e001      	b.n	800e342 <_ZN8LoadCell21CalculateRealFlowDataEf+0x102>
 800e33e:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 800e3e8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x1a8>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e348:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800e34c:	eeb0 1a47 	vmov.f32	s2, s14
 800e350:	edd7 0a03 	vldr	s1, [r7, #12]
 800e354:	eeb0 0a67 	vmov.f32	s0, s15
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 f92f 	bl	800e5bc <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800e35e:	ee10 3a10 	vmov	r3, s0
 800e362:	4618      	mov	r0, r3
 800e364:	f7f2 f8e8 	bl	8000538 <__aeabi_f2d>
 800e368:	a317      	add	r3, pc, #92	@ (adr r3, 800e3c8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x188>)
 800e36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36e:	f7f2 fa65 	bl	800083c <__aeabi_ddiv>
 800e372:	4602      	mov	r2, r0
 800e374:	460b      	mov	r3, r1
 800e376:	4610      	mov	r0, r2
 800e378:	4619      	mov	r1, r3
 800e37a:	f7f2 fb47 	bl	8000a0c <__aeabi_d2f>
 800e37e:	4603      	mov	r3, r0
 800e380:	61fb      	str	r3, [r7, #28]
	if(newFlow<1.5){
 800e382:	edd7 7a07 	vldr	s15, [r7, #28]
 800e386:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e38a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e392:	d502      	bpl.n	800e39a <_ZN8LoadCell21CalculateRealFlowDataEf+0x15a>
		newFlow=0;
 800e394:	f04f 0300 	mov.w	r3, #0
 800e398:	61fb      	str	r3, [r7, #28]
	}
	LastFlowValue=newFlow;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	69fb      	ldr	r3, [r7, #28]
 800e3a4:	6253      	str	r3, [r2, #36]	@ 0x24
	Debugger.LastFlow=LastFlowValue;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ae:	4a08      	ldr	r2, [pc, #32]	@ (800e3d0 <_ZN8LoadCell21CalculateRealFlowDataEf+0x190>)
 800e3b0:	61d3      	str	r3, [r2, #28]
	return newFlow;
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	ee07 3a90 	vmov	s15, r3
}
 800e3b8:	eeb0 0a67 	vmov.f32	s0, s15
 800e3bc:	3720      	adds	r7, #32
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	f3af 8000 	nop.w
 800e3c8:	9999999a 	.word	0x9999999a
 800e3cc:	3ff19999 	.word	0x3ff19999
 800e3d0:	200093a8 	.word	0x200093a8
 800e3d4:	42c80000 	.word	0x42c80000
 800e3d8:	20004fc8 	.word	0x20004fc8
 800e3dc:	2000932c 	.word	0x2000932c
 800e3e0:	20004fcc 	.word	0x20004fcc
 800e3e4:	20004ef0 	.word	0x20004ef0
 800e3e8:	3f59999a 	.word	0x3f59999a

0800e3ec <_ZN8LoadCell11ReadFromSPIEhi>:
void LoadCell::ReadFromSPI(uint8_t value, int type){
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	607a      	str	r2, [r7, #4]
 800e3f8:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e400:	481f      	ldr	r0, [pc, #124]	@ (800e480 <_ZN8LoadCell11ReadFromSPIEhi+0x94>)
 800e402:	f7f4 fe25 	bl	8003050 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(LOAD_CELL_SPI_CHANNEL, &value, 1, 100);  //, 100
 800e406:	f107 010b 	add.w	r1, r7, #11
 800e40a:	2364      	movs	r3, #100	@ 0x64
 800e40c:	2201      	movs	r2, #1
 800e40e:	481d      	ldr	r0, [pc, #116]	@ (800e484 <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800e410:	f7f5 fb19 	bl	8003a46 <HAL_SPI_Transmit>
	switch(type){
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2b03      	cmp	r3, #3
 800e418:	d01d      	beq.n	800e456 <_ZN8LoadCell11ReadFromSPIEhi+0x6a>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2b03      	cmp	r3, #3
 800e41e:	dc24      	bgt.n	800e46a <_ZN8LoadCell11ReadFromSPIEhi+0x7e>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2b01      	cmp	r3, #1
 800e424:	d003      	beq.n	800e42e <_ZN8LoadCell11ReadFromSPIEhi+0x42>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b02      	cmp	r3, #2
 800e42a:	d00a      	beq.n	800e442 <_ZN8LoadCell11ReadFromSPIEhi+0x56>
		break;
		case LOAD_CELL_FLOW:
			HAL_SPI_Receive(LOAD_CELL_SPI_CHANNEL, &FlowReadSPIValue,1, 100);  //, 100
		break;
		default:
			break;
 800e42c:	e01d      	b.n	800e46a <_ZN8LoadCell11ReadFromSPIEhi+0x7e>
			HAL_SPI_Receive(LOAD_CELL_SPI_CHANNEL, &VolumeAndFlowReadSPIValue,1, 100);  //, 100
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f503 5100 	add.w	r1, r3, #8192	@ 0x2000
 800e434:	3134      	adds	r1, #52	@ 0x34
 800e436:	2364      	movs	r3, #100	@ 0x64
 800e438:	2201      	movs	r2, #1
 800e43a:	4812      	ldr	r0, [pc, #72]	@ (800e484 <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800e43c:	f7f5 fc47 	bl	8003cce <HAL_SPI_Receive>
		break;
 800e440:	e014      	b.n	800e46c <_ZN8LoadCell11ReadFromSPIEhi+0x80>
			HAL_SPI_Receive(LOAD_CELL_SPI_CHANNEL, &VolumeReadSPIValue,1, 100);  //, 100
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f503 5100 	add.w	r1, r3, #8192	@ 0x2000
 800e448:	3135      	adds	r1, #53	@ 0x35
 800e44a:	2364      	movs	r3, #100	@ 0x64
 800e44c:	2201      	movs	r2, #1
 800e44e:	480d      	ldr	r0, [pc, #52]	@ (800e484 <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800e450:	f7f5 fc3d 	bl	8003cce <HAL_SPI_Receive>
		break;
 800e454:	e00a      	b.n	800e46c <_ZN8LoadCell11ReadFromSPIEhi+0x80>
			HAL_SPI_Receive(LOAD_CELL_SPI_CHANNEL, &FlowReadSPIValue,1, 100);  //, 100
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f503 5100 	add.w	r1, r3, #8192	@ 0x2000
 800e45c:	3136      	adds	r1, #54	@ 0x36
 800e45e:	2364      	movs	r3, #100	@ 0x64
 800e460:	2201      	movs	r2, #1
 800e462:	4808      	ldr	r0, [pc, #32]	@ (800e484 <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800e464:	f7f5 fc33 	bl	8003cce <HAL_SPI_Receive>
		break;
 800e468:	e000      	b.n	800e46c <_ZN8LoadCell11ReadFromSPIEhi+0x80>
			break;
 800e46a:	bf00      	nop
	}
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 800e46c:	2201      	movs	r2, #1
 800e46e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e472:	4803      	ldr	r0, [pc, #12]	@ (800e480 <_ZN8LoadCell11ReadFromSPIEhi+0x94>)
 800e474:	f7f4 fdec 	bl	8003050 <HAL_GPIO_WritePin>
}
 800e478:	bf00      	nop
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	40020000 	.word	0x40020000
 800e484:	20000180 	.word	0x20000180

0800e488 <_ZN8LoadCell11ClearParamsEv>:
void LoadCell::ClearParams(void){
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
	LastHandleProcessTime=UINT32_MAX;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e496:	461a      	mov	r2, r3
 800e498:	f04f 33ff 	mov.w	r3, #4294967295
 800e49c:	6313      	str	r3, [r2, #48]	@ 0x30
	IsFirstHandle=false;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	VolumeValue=0;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	f04f 0300 	mov.w	r3, #0
 800e4b6:	6113      	str	r3, [r2, #16]
	FlowValue=0;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4be:	461a      	mov	r2, r3
 800e4c0:	f04f 0300 	mov.w	r3, #0
 800e4c4:	60d3      	str	r3, [r2, #12]
	LastVolumeValue=0;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	f04f 0300 	mov.w	r3, #0
 800e4d2:	6293      	str	r3, [r2, #40]	@ 0x28
	LastFlowValue=0;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4da:	461a      	mov	r2, r3
 800e4dc:	f04f 0300 	mov.w	r3, #0
 800e4e0:	6253      	str	r3, [r2, #36]	@ 0x24
	LastReadVolumeValue=0;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	f04f 0300 	mov.w	r3, #0
 800e4ee:	6213      	str	r3, [r2, #32]
	LastReadFlowValue=0;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	f04f 0300 	mov.w	r3, #0
 800e4fc:	61d3      	str	r3, [r2, #28]
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800e4fe:	2300      	movs	r3, #0
 800e500:	60fb      	str	r3, [r7, #12]
 800e502:	e009      	b.n	800e518 <_ZN8LoadCell11ClearParamsEv+0x90>
		VolumeSamples[i]=0;
 800e504:	4a14      	ldr	r2, [pc, #80]	@ (800e558 <_ZN8LoadCell11ClearParamsEv+0xd0>)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	4413      	add	r3, r2
 800e50c:	f04f 0200 	mov.w	r2, #0
 800e510:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	3301      	adds	r3, #1
 800e516:	60fb      	str	r3, [r7, #12]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2b0a      	cmp	r3, #10
 800e51c:	ddf2      	ble.n	800e504 <_ZN8LoadCell11ClearParamsEv+0x7c>
	}
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800e51e:	2300      	movs	r3, #0
 800e520:	60bb      	str	r3, [r7, #8]
 800e522:	e009      	b.n	800e538 <_ZN8LoadCell11ClearParamsEv+0xb0>
		FlowSamples[i]=0;
 800e524:	4a0d      	ldr	r2, [pc, #52]	@ (800e55c <_ZN8LoadCell11ClearParamsEv+0xd4>)
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	4413      	add	r3, r2
 800e52c:	f04f 0200 	mov.w	r2, #0
 800e530:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	3301      	adds	r3, #1
 800e536:	60bb      	str	r3, [r7, #8]
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	2b04      	cmp	r3, #4
 800e53c:	ddf2      	ble.n	800e524 <_ZN8LoadCell11ClearParamsEv+0x9c>
	}
	FlowIndex=0;
 800e53e:	4b08      	ldr	r3, [pc, #32]	@ (800e560 <_ZN8LoadCell11ClearParamsEv+0xd8>)
 800e540:	2200      	movs	r2, #0
 800e542:	701a      	strb	r2, [r3, #0]
	VolumeIndex=0;
 800e544:	4b07      	ldr	r3, [pc, #28]	@ (800e564 <_ZN8LoadCell11ClearParamsEv+0xdc>)
 800e546:	2200      	movs	r2, #0
 800e548:	701a      	strb	r2, [r3, #0]
}
 800e54a:	bf00      	nop
 800e54c:	3714      	adds	r7, #20
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	20000010 	.word	0x20000010
 800e55c:	2000003c 	.word	0x2000003c
 800e560:	20004eec 	.word	0x20004eec
 800e564:	20004eed 	.word	0x20004eed

0800e568 <_ZN8LoadCell10WriteToSPIEtt>:

void LoadCell::WriteToSPI(uint16_t SPIAddress, uint16_t value){
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	460b      	mov	r3, r1
 800e572:	807b      	strh	r3, [r7, #2]
 800e574:	4613      	mov	r3, r2
 800e576:	803b      	strh	r3, [r7, #0]

	uint8_t data[2];
	data[0] = SPIAddress;
 800e578:	887b      	ldrh	r3, [r7, #2]
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 800e57e:	883b      	ldrh	r3, [r7, #0]
 800e580:	b2db      	uxtb	r3, r3
 800e582:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800e584:	2200      	movs	r2, #0
 800e586:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e58a:	480a      	ldr	r0, [pc, #40]	@ (800e5b4 <_ZN8LoadCell10WriteToSPIEtt+0x4c>)
 800e58c:	f7f4 fd60 	bl	8003050 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(LOAD_CELL_SPI_CHANNEL, data, 2, 100);
 800e590:	f107 010c 	add.w	r1, r7, #12
 800e594:	2364      	movs	r3, #100	@ 0x64
 800e596:	2202      	movs	r2, #2
 800e598:	4807      	ldr	r0, [pc, #28]	@ (800e5b8 <_ZN8LoadCell10WriteToSPIEtt+0x50>)
 800e59a:	f7f5 fa54 	bl	8003a46 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 800e59e:	2201      	movs	r2, #1
 800e5a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e5a4:	4803      	ldr	r0, [pc, #12]	@ (800e5b4 <_ZN8LoadCell10WriteToSPIEtt+0x4c>)
 800e5a6:	f7f4 fd53 	bl	8003050 <HAL_GPIO_WritePin>
}
 800e5aa:	bf00      	nop
 800e5ac:	3710      	adds	r7, #16
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	40020000 	.word	0x40020000
 800e5b8:	20000180 	.word	0x20000180

0800e5bc <_ZN8LoadCell26ExponantialSmoothingFilterEfff>:
		}
	}
    return (sum==0)?0:sum / cnt;
}

float32_t LoadCell::ExponantialSmoothingFilter(float32_t alpha,float32_t value,float32_t lastValue){
 800e5bc:	b480      	push	{r7}
 800e5be:	b087      	sub	sp, #28
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	ed87 0a02 	vstr	s0, [r7, #8]
 800e5c8:	edc7 0a01 	vstr	s1, [r7, #4]
 800e5cc:	ed87 1a00 	vstr	s2, [r7]
    float forecast = alpha * value + (1 - alpha) * lastValue;
 800e5d0:	ed97 7a02 	vldr	s14, [r7, #8]
 800e5d4:	edd7 7a01 	vldr	s15, [r7, #4]
 800e5d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5e0:	edd7 7a02 	vldr	s15, [r7, #8]
 800e5e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e5e8:	edd7 7a00 	vldr	s15, [r7]
 800e5ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5f4:	edc7 7a05 	vstr	s15, [r7, #20]
    return forecast;
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	ee07 3a90 	vmov	s15, r3
}
 800e5fe:	eeb0 0a67 	vmov.f32	s0, s15
 800e602:	371c      	adds	r7, #28
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <_ZN8LoadCell12ClearSamplesEv>:
void LoadCell::ClearSamples(){
 800e60c:	b480      	push	{r7}
 800e60e:	b085      	sub	sp, #20
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800e614:	2300      	movs	r3, #0
 800e616:	60fb      	str	r3, [r7, #12]
 800e618:	e008      	b.n	800e62c <_ZN8LoadCell12ClearSamplesEv+0x20>
		FlowSamples[i]=-1;
 800e61a:	4a13      	ldr	r2, [pc, #76]	@ (800e668 <_ZN8LoadCell12ClearSamplesEv+0x5c>)
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	4413      	add	r3, r2
 800e622:	4a12      	ldr	r2, [pc, #72]	@ (800e66c <_ZN8LoadCell12ClearSamplesEv+0x60>)
 800e624:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	3301      	adds	r3, #1
 800e62a:	60fb      	str	r3, [r7, #12]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b04      	cmp	r3, #4
 800e630:	ddf3      	ble.n	800e61a <_ZN8LoadCell12ClearSamplesEv+0xe>
	}
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800e632:	2300      	movs	r3, #0
 800e634:	60bb      	str	r3, [r7, #8]
 800e636:	e008      	b.n	800e64a <_ZN8LoadCell12ClearSamplesEv+0x3e>
		VolumeSamples[i]=-1;
 800e638:	4a0d      	ldr	r2, [pc, #52]	@ (800e670 <_ZN8LoadCell12ClearSamplesEv+0x64>)
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	4413      	add	r3, r2
 800e640:	4a0a      	ldr	r2, [pc, #40]	@ (800e66c <_ZN8LoadCell12ClearSamplesEv+0x60>)
 800e642:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	3301      	adds	r3, #1
 800e648:	60bb      	str	r3, [r7, #8]
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	2b0a      	cmp	r3, #10
 800e64e:	ddf3      	ble.n	800e638 <_ZN8LoadCell12ClearSamplesEv+0x2c>
	}
	VolumeIndex=0;
 800e650:	4b08      	ldr	r3, [pc, #32]	@ (800e674 <_ZN8LoadCell12ClearSamplesEv+0x68>)
 800e652:	2200      	movs	r2, #0
 800e654:	701a      	strb	r2, [r3, #0]
	FlowIndex=0;
 800e656:	4b08      	ldr	r3, [pc, #32]	@ (800e678 <_ZN8LoadCell12ClearSamplesEv+0x6c>)
 800e658:	2200      	movs	r2, #0
 800e65a:	701a      	strb	r2, [r3, #0]

}
 800e65c:	bf00      	nop
 800e65e:	3714      	adds	r7, #20
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr
 800e668:	2000003c 	.word	0x2000003c
 800e66c:	bf800000 	.word	0xbf800000
 800e670:	20000010 	.word	0x20000010
 800e674:	20004eed 	.word	0x20004eed
 800e678:	20004eec 	.word	0x20004eec

0800e67c <_Z41__static_initialization_and_destruction_0v>:
 800e67c:	b580      	push	{r7, lr}
 800e67e:	af00      	add	r7, sp, #0
Filter FilterInstance;
 800e680:	4805      	ldr	r0, [pc, #20]	@ (800e698 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 800e682:	f7fd fcb5 	bl	800bff0 <_ZN6FilterC1Ev>
VolumeFilterStruct VolumeFilter;
 800e686:	4805      	ldr	r0, [pc, #20]	@ (800e69c <_Z41__static_initialization_and_destruction_0v+0x20>)
 800e688:	f7ff f9a2 	bl	800d9d0 <_ZN18VolumeFilterStructC1Ev>
FlowFilterStruct FlowFilter;
 800e68c:	4804      	ldr	r0, [pc, #16]	@ (800e6a0 <_Z41__static_initialization_and_destruction_0v+0x24>)
 800e68e:	f7ff f9ae 	bl	800d9ee <_ZN16FlowFilterStructC1Ev>
}
 800e692:	bf00      	nop
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	20004ef0 	.word	0x20004ef0
 800e69c:	20004ef4 	.word	0x20004ef4
 800e6a0:	20004fc8 	.word	0x20004fc8

0800e6a4 <_Z41__static_initialization_and_destruction_1v>:
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	af00      	add	r7, sp, #0
Filter FilterInstance;
 800e6a8:	4802      	ldr	r0, [pc, #8]	@ (800e6b4 <_Z41__static_initialization_and_destruction_1v+0x10>)
 800e6aa:	f7fd fcb1 	bl	800c010 <_ZN6FilterD1Ev>
}
 800e6ae:	bf00      	nop
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	20004ef0 	.word	0x20004ef0

0800e6b8 <_GLOBAL__sub_I_VolumeSamples>:
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	f7ff ffde 	bl	800e67c <_Z41__static_initialization_and_destruction_0v>
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <_GLOBAL__sub_D_VolumeSamples>:
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	f7ff ffed 	bl	800e6a4 <_Z41__static_initialization_and_destruction_1v>
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <_ZN18SystemConfigStructC1Ev>:
	uint8_t VolumeCalibrationSampleCount=100;
	uint8_t FlowCalibrationSampleCount=100;
	uint8_t MinimumFlowSensiblity=0;
	uint8_t WaitAfterProcessSeconds=0;
	bool IsInternalClean=false;
} SystemConfigStruct;
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2214      	movs	r2, #20
 800e6d8:	701a      	strb	r2, [r3, #0]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2228      	movs	r2, #40	@ 0x28
 800e6de:	705a      	strb	r2, [r3, #1]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2228      	movs	r2, #40	@ 0x28
 800e6e4:	709a      	strb	r2, [r3, #2]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	220a      	movs	r2, #10
 800e6ea:	70da      	strb	r2, [r3, #3]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2228      	movs	r2, #40	@ 0x28
 800e6f0:	711a      	strb	r2, [r3, #4]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	221e      	movs	r2, #30
 800e6f6:	715a      	strb	r2, [r3, #5]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	221e      	movs	r2, #30
 800e6fc:	719a      	strb	r2, [r3, #6]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800e704:	811a      	strh	r2, [r3, #8]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800e70c:	815a      	strh	r2, [r3, #10]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800e714:	819a      	strh	r2, [r3, #12]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800e71c:	81da      	strh	r2, [r3, #14]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800e724:	821a      	strh	r2, [r3, #16]
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800e72c:	825a      	strh	r2, [r3, #18]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2200      	movs	r2, #0
 800e732:	615a      	str	r2, [r3, #20]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2200      	movs	r2, #0
 800e738:	619a      	str	r2, [r3, #24]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e740:	61da      	str	r2, [r3, #28]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e748:	621a      	str	r2, [r3, #32]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e750:	625a      	str	r2, [r3, #36]	@ 0x24
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e758:	629a      	str	r2, [r3, #40]	@ 0x28
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	220a      	movs	r2, #10
 800e75e:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2200      	movs	r2, #0
 800e764:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2200      	movs	r2, #0
 800e774:	631a      	str	r2, [r3, #48]	@ 0x30
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	222c      	movs	r2, #44	@ 0x2c
 800e782:	665a      	str	r2, [r3, #100]	@ 0x64
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2200      	movs	r2, #0
 800e796:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2264      	movs	r2, #100	@ 0x64
 800e79e:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2264      	movs	r2, #100	@ 0x64
 800e7a6:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2264      	movs	r2, #100	@ 0x64
 800e7ae:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <_ZN12FlashManagerC1ERKS_>:
class FlashManager {
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
 800e7e2:	4a25      	ldr	r2, [pc, #148]	@ (800e878 <_ZN12FlashManagerC1ERKS_+0xa0>)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	601a      	str	r2, [r3, #0]
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	685a      	ldr	r2, [r3, #4]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	605a      	str	r2, [r3, #4]
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	689a      	ldr	r2, [r3, #8]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	609a      	str	r2, [r3, #8]
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	7b1a      	ldrb	r2, [r3, #12]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	731a      	strb	r2, [r3, #12]
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	7b5a      	ldrb	r2, [r3, #13]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	735a      	strb	r2, [r3, #13]
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	7b9a      	ldrb	r2, [r3, #14]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	739a      	strb	r2, [r3, #14]
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	7bda      	ldrb	r2, [r3, #15]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	73da      	strb	r2, [r3, #15]
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	7c1a      	ldrb	r2, [r3, #16]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	741a      	strb	r2, [r3, #16]
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	7c5a      	ldrb	r2, [r3, #17]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	745a      	strb	r2, [r3, #17]
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	7c9a      	ldrb	r2, [r3, #18]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	749a      	strb	r2, [r3, #18]
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	7cda      	ldrb	r2, [r3, #19]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	74da      	strb	r2, [r3, #19]
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	7d1a      	ldrb	r2, [r3, #20]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	751a      	strb	r2, [r3, #20]
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	7d5a      	ldrb	r2, [r3, #21]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	755a      	strb	r2, [r3, #21]
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	7d9a      	ldrb	r2, [r3, #22]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	759a      	strb	r2, [r3, #22]
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	7dda      	ldrb	r2, [r3, #23]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	75da      	strb	r2, [r3, #23]
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	7e1a      	ldrb	r2, [r3, #24]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	761a      	strb	r2, [r3, #24]
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	7e5a      	ldrb	r2, [r3, #25]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	765a      	strb	r2, [r3, #25]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4618      	mov	r0, r3
 800e86c:	370c      	adds	r7, #12
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	08011cf4 	.word	0x08011cf4

0800e87c <SetupOS>:
/* Definitions for CommunicationSemaphoreHandle */
const osSemaphoreAttr_t communicationSemaphore_attributes = {
  .name = "CommunicationSemaphoreHandle"
};

void SetupOS(void){
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b088      	sub	sp, #32
 800e880:	af00      	add	r7, sp, #0
	EmgInstance.FirstEmgSetup();
 800e882:	480f      	ldr	r0, [pc, #60]	@ (800e8c0 <SetupOS+0x44>)
 800e884:	f7fd f9a8 	bl	800bbd8 <_ZN3Emg13FirstEmgSetupEv>
	EmgInstance.SecondEmgSetup();
 800e888:	480d      	ldr	r0, [pc, #52]	@ (800e8c0 <SetupOS+0x44>)
 800e88a:	f7fd f9c6 	bl	800bc1a <_ZN3Emg14SecondEmgSetupEv>
	LoadCellInstance.Setup();
 800e88e:	480d      	ldr	r0, [pc, #52]	@ (800e8c4 <SetupOS+0x48>)
 800e890:	f7ff f8ed 	bl	800da6e <_ZN8LoadCell5SetupEv>
	FlashInitialize();
 800e894:	f000 f93a 	bl	800eb0c <FlashInitialize>
	CommunicationInstance.SetFlashManager(FlashManagerInstance);
 800e898:	1d3b      	adds	r3, r7, #4
 800e89a:	490b      	ldr	r1, [pc, #44]	@ (800e8c8 <SetupOS+0x4c>)
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7ff ff9b 	bl	800e7d8 <_ZN12FlashManagerC1ERKS_>
 800e8a2:	1d3b      	adds	r3, r7, #4
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4809      	ldr	r0, [pc, #36]	@ (800e8cc <SetupOS+0x50>)
 800e8a8:	f7fd f84e 	bl	800b948 <_ZN13Communication15SetFlashManagerE12FlashManager>
 800e8ac:	1d3b      	adds	r3, r7, #4
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fd fcb6 	bl	800c220 <_ZN12FlashManagerD1Ev>
	osKernelInitialize();
 800e8b4:	f7f7 ffde 	bl	8006874 <osKernelInitialize>
}
 800e8b8:	bf00      	nop
 800e8ba:	3720      	adds	r7, #32
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	20005084 	.word	0x20005084
 800e8c4:	200070c8 	.word	0x200070c8
 800e8c8:	20009120 	.word	0x20009120
 800e8cc:	20009100 	.word	0x20009100

0800e8d0 <_Z14UpdatePriorityv>:

void UpdatePriority(void){
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 800e8d4:	4865      	ldr	r0, [pc, #404]	@ (800ea6c <_Z14UpdatePriorityv+0x19c>)
 800e8d6:	f7f6 fb55 	bl	8004f84 <HAL_TIM_Base_Start_IT>
	ThreadStorage.FirstEmgThreadAttr=normalPriority;
 800e8da:	4b65      	ldr	r3, [pc, #404]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e8dc:	3310      	adds	r3, #16
 800e8de:	2224      	movs	r2, #36	@ 0x24
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f002 fb81 	bl	8010fea <memset>
 800e8e8:	4b61      	ldr	r3, [pc, #388]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e8ea:	4a62      	ldr	r2, [pc, #392]	@ (800ea74 <_Z14UpdatePriorityv+0x1a4>)
 800e8ec:	611a      	str	r2, [r3, #16]
 800e8ee:	4b60      	ldr	r3, [pc, #384]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e8f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8f4:	625a      	str	r2, [r3, #36]	@ 0x24
 800e8f6:	4b5e      	ldr	r3, [pc, #376]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e8f8:	2218      	movs	r2, #24
 800e8fa:	629a      	str	r2, [r3, #40]	@ 0x28
	ThreadStorage.SecondEmgThreadAttr=normalPriority;
 800e8fc:	4b5c      	ldr	r3, [pc, #368]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e8fe:	3334      	adds	r3, #52	@ 0x34
 800e900:	2224      	movs	r2, #36	@ 0x24
 800e902:	2100      	movs	r1, #0
 800e904:	4618      	mov	r0, r3
 800e906:	f002 fb70 	bl	8010fea <memset>
 800e90a:	4b59      	ldr	r3, [pc, #356]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e90c:	4a59      	ldr	r2, [pc, #356]	@ (800ea74 <_Z14UpdatePriorityv+0x1a4>)
 800e90e:	635a      	str	r2, [r3, #52]	@ 0x34
 800e910:	4b57      	ldr	r3, [pc, #348]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e916:	649a      	str	r2, [r3, #72]	@ 0x48
 800e918:	4b55      	ldr	r3, [pc, #340]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e91a:	2218      	movs	r2, #24
 800e91c:	64da      	str	r2, [r3, #76]	@ 0x4c
	ThreadStorage.FlowThreadAttr=normalPriority;
 800e91e:	4b54      	ldr	r3, [pc, #336]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e920:	33b0      	adds	r3, #176	@ 0xb0
 800e922:	2224      	movs	r2, #36	@ 0x24
 800e924:	2100      	movs	r1, #0
 800e926:	4618      	mov	r0, r3
 800e928:	f002 fb5f 	bl	8010fea <memset>
 800e92c:	4b50      	ldr	r3, [pc, #320]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e92e:	4a51      	ldr	r2, [pc, #324]	@ (800ea74 <_Z14UpdatePriorityv+0x1a4>)
 800e930:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800e934:	4b4e      	ldr	r3, [pc, #312]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e93a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 800e93e:	4b4c      	ldr	r3, [pc, #304]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e940:	2218      	movs	r2, #24
 800e942:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	ThreadStorage.VolumeThreadAttr=normalPriority;
 800e946:	4b4a      	ldr	r3, [pc, #296]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e948:	338c      	adds	r3, #140	@ 0x8c
 800e94a:	2224      	movs	r2, #36	@ 0x24
 800e94c:	2100      	movs	r1, #0
 800e94e:	4618      	mov	r0, r3
 800e950:	f002 fb4b 	bl	8010fea <memset>
 800e954:	4b46      	ldr	r3, [pc, #280]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e956:	4a47      	ldr	r2, [pc, #284]	@ (800ea74 <_Z14UpdatePriorityv+0x1a4>)
 800e958:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800e95c:	4b44      	ldr	r3, [pc, #272]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e95e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e962:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800e966:	4b42      	ldr	r3, [pc, #264]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e968:	2218      	movs	r2, #24
 800e96a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	ThreadStorage.PumpMaxRunThreadAttr=normalPriority;
 800e96e:	4b40      	ldr	r3, [pc, #256]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e970:	33d4      	adds	r3, #212	@ 0xd4
 800e972:	2224      	movs	r2, #36	@ 0x24
 800e974:	2100      	movs	r1, #0
 800e976:	4618      	mov	r0, r3
 800e978:	f002 fb37 	bl	8010fea <memset>
 800e97c:	4b3c      	ldr	r3, [pc, #240]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e97e:	4a3d      	ldr	r2, [pc, #244]	@ (800ea74 <_Z14UpdatePriorityv+0x1a4>)
 800e980:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800e984:	4b3a      	ldr	r3, [pc, #232]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e98a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800e98e:	4b38      	ldr	r3, [pc, #224]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e990:	2218      	movs	r2, #24
 800e992:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	ThreadStorage.ValveMaxRunThreadAttr=normalPriority;
 800e996:	4b36      	ldr	r3, [pc, #216]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e998:	33f8      	adds	r3, #248	@ 0xf8
 800e99a:	2224      	movs	r2, #36	@ 0x24
 800e99c:	2100      	movs	r1, #0
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f002 fb23 	bl	8010fea <memset>
 800e9a4:	4b32      	ldr	r3, [pc, #200]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e9a6:	4a33      	ldr	r2, [pc, #204]	@ (800ea74 <_Z14UpdatePriorityv+0x1a4>)
 800e9a8:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 800e9ac:	4b30      	ldr	r3, [pc, #192]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e9ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9b2:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800e9b6:	4b2e      	ldr	r3, [pc, #184]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e9b8:	2218      	movs	r2, #24
 800e9ba:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	ThreadStorage.CalibrationFlowThreadAttr=normalPriority;
 800e9be:	4b2c      	ldr	r3, [pc, #176]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e9c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e9c4:	2224      	movs	r2, #36	@ 0x24
 800e9c6:	2100      	movs	r1, #0
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f002 fb0e 	bl	8010fea <memset>
 800e9ce:	4b28      	ldr	r3, [pc, #160]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e9d0:	4a28      	ldr	r2, [pc, #160]	@ (800ea74 <_Z14UpdatePriorityv+0x1a4>)
 800e9d2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 800e9d6:	4b26      	ldr	r3, [pc, #152]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e9d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9dc:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 800e9e0:	4b23      	ldr	r3, [pc, #140]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e9e2:	2218      	movs	r2, #24
 800e9e4:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
	ThreadStorage.CalibrationVolumeThreadAttr=normalPriority;
 800e9e8:	4b21      	ldr	r3, [pc, #132]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e9ea:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800e9ee:	2224      	movs	r2, #36	@ 0x24
 800e9f0:	2100      	movs	r1, #0
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f002 faf9 	bl	8010fea <memset>
 800e9f8:	4b1d      	ldr	r3, [pc, #116]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800e9fa:	4a1e      	ldr	r2, [pc, #120]	@ (800ea74 <_Z14UpdatePriorityv+0x1a4>)
 800e9fc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800ea00:	4b1b      	ldr	r3, [pc, #108]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800ea02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea06:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 800ea0a:	4b19      	ldr	r3, [pc, #100]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800ea0c:	2218      	movs	r2, #24
 800ea0e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	ThreadStorage.CleanThreadAttr=normalPriority;
 800ea12:	4b17      	ldr	r3, [pc, #92]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800ea14:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800ea18:	2224      	movs	r2, #36	@ 0x24
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f002 fae4 	bl	8010fea <memset>
 800ea22:	4b13      	ldr	r3, [pc, #76]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800ea24:	4a13      	ldr	r2, [pc, #76]	@ (800ea74 <_Z14UpdatePriorityv+0x1a4>)
 800ea26:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 800ea2a:	4b11      	ldr	r3, [pc, #68]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800ea2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea30:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 800ea34:	4b0e      	ldr	r3, [pc, #56]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800ea36:	2218      	movs	r2, #24
 800ea38:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
	ThreadStorage.SafeModeThreadAttr=normalPriority;
 800ea3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800ea3e:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800ea42:	2224      	movs	r2, #36	@ 0x24
 800ea44:	2100      	movs	r1, #0
 800ea46:	4618      	mov	r0, r3
 800ea48:	f002 facf 	bl	8010fea <memset>
 800ea4c:	4b08      	ldr	r3, [pc, #32]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800ea4e:	4a09      	ldr	r2, [pc, #36]	@ (800ea74 <_Z14UpdatePriorityv+0x1a4>)
 800ea50:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 800ea54:	4b06      	ldr	r3, [pc, #24]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800ea56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea5a:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
 800ea5e:	4b04      	ldr	r3, [pc, #16]	@ (800ea70 <_Z14UpdatePriorityv+0x1a0>)
 800ea60:	2218      	movs	r2, #24
 800ea62:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
}
 800ea66:	bf00      	nop
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	20000418 	.word	0x20000418
 800ea70:	2000913c 	.word	0x2000913c
 800ea74:	08011bfc 	.word	0x08011bfc

0800ea78 <StartOS>:

void StartOS(void){
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
	UpdatePriority();
 800ea7e:	f7ff ff27 	bl	800e8d0 <_Z14UpdatePriorityv>
		uartData[0]=(cnt & 0xFF00)>>8;
		uartData[1]=(cnt & 0x00FF);
		WriteUart(uartData, 2);
	}
	*/
	HAL_Delay( 1000 );
 800ea82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ea86:	f7f3 f91d 	bl	8001cc4 <HAL_Delay>
   	uint8_t data[4];
   	data[0]=HasCalibration();//HasCalibration
 800ea8a:	f001 ff5b 	bl	8010944 <HasCalibration>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	713b      	strb	r3, [r7, #4]
   	data[1]=HasLoadcell(true);//HasLoadcell
 800ea92:	2001      	movs	r0, #1
 800ea94:	f001 ff76 	bl	8010984 <HasLoadcell>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	717b      	strb	r3, [r7, #5]
   	data[2]=HasFirstEmg(true);//HasFirstEmg
 800ea9c:	2001      	movs	r0, #1
 800ea9e:	f001 ff99 	bl	80109d4 <HasFirstEmg>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	71bb      	strb	r3, [r7, #6]
   	data[3]=HasSecondEmg(true);//HasSecondEmg
 800eaa6:	2001      	movs	r0, #1
 800eaa8:	f001 ffb4 	bl	8010a14 <HasSecondEmg>
 800eaac:	4603      	mov	r3, r0
 800eaae:	71fb      	strb	r3, [r7, #7]
	SuccessDataResult(0, SuccessDataType::SD_Start, data, 4);
 800eab0:	1d3a      	adds	r2, r7, #4
 800eab2:	2304      	movs	r3, #4
 800eab4:	21ff      	movs	r1, #255	@ 0xff
 800eab6:	2000      	movs	r0, #0
 800eab8:	f000 f948 	bl	800ed4c <SuccessDataResult>
	SendFeedback(0,0,0);
 800eabc:	2200      	movs	r2, #0
 800eabe:	2100      	movs	r1, #0
 800eac0:	2000      	movs	r0, #0
 800eac2:	f000 f919 	bl	800ecf8 <SendFeedback>

	ThreadStorage.ReadUARTThreadId=osThreadNew(StartReadUARTTask, NULL, &highPriority);
 800eac6:	4a08      	ldr	r2, [pc, #32]	@ (800eae8 <StartOS+0x70>)
 800eac8:	2100      	movs	r1, #0
 800eaca:	4808      	ldr	r0, [pc, #32]	@ (800eaec <StartOS+0x74>)
 800eacc:	f7f7 ff1c 	bl	8006908 <osThreadNew>
 800ead0:	4603      	mov	r3, r0
 800ead2:	4a07      	ldr	r2, [pc, #28]	@ (800eaf0 <StartOS+0x78>)
 800ead4:	6053      	str	r3, [r2, #4]
	osKernelStart();
 800ead6:	f7f7 fef1 	bl	80068bc <osKernelStart>
    HAL_NVIC_SystemReset();
 800eada:	f7f3 fa32 	bl	8001f42 <HAL_NVIC_SystemReset>
}
 800eade:	bf00      	nop
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	08011d30 	.word	0x08011d30
 800eaec:	0800ee81 	.word	0x0800ee81
 800eaf0:	2000913c 	.word	0x2000913c

0800eaf4 <HardReset>:

void HardReset(void){
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	af00      	add	r7, sp, #0
	FlashManagerInstance.HardReset(true);
 800eaf8:	2101      	movs	r1, #1
 800eafa:	4803      	ldr	r0, [pc, #12]	@ (800eb08 <HardReset+0x14>)
 800eafc:	f7fd fbcc 	bl	800c298 <_ZN12FlashManager9HardResetEb>
    HAL_NVIC_SystemReset();
 800eb00:	f7f3 fa1f 	bl	8001f42 <HAL_NVIC_SystemReset>
}
 800eb04:	bf00      	nop
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	20009120 	.word	0x20009120

0800eb0c <FlashInitialize>:
void FlashInitialize(void){
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	af00      	add	r7, sp, #0
	if(!FlashManagerInstance.IsSetup()){
 800eb10:	4877      	ldr	r0, [pc, #476]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800eb12:	f7fd fccf 	bl	800c4b4 <_ZN12FlashManager7IsSetupEv>
 800eb16:	4603      	mov	r3, r0
 800eb18:	f083 0301 	eor.w	r3, r3, #1
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d065      	beq.n	800ebee <FlashInitialize+0xe2>
		FlashManagerInstance.WriteSendPerSecond(SystemConfig.SendPerSecond);
 800eb22:	4b74      	ldr	r3, [pc, #464]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	4619      	mov	r1, r3
 800eb28:	4871      	ldr	r0, [pc, #452]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800eb2a:	f7fd fd1d 	bl	800c568 <_ZN12FlashManager18WriteSendPerSecondEh>
		FlashManagerInstance.WriteFirstEmgPerSecond(SystemConfig.FirstEmgPerSecond);
 800eb2e:	4b71      	ldr	r3, [pc, #452]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800eb30:	785b      	ldrb	r3, [r3, #1]
 800eb32:	4619      	mov	r1, r3
 800eb34:	486e      	ldr	r0, [pc, #440]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800eb36:	f7fd fdb3 	bl	800c6a0 <_ZN12FlashManager22WriteFirstEmgPerSecondEh>
		FlashManagerInstance.WriteSecondEmgPerSecond(SystemConfig.SecondEmgPerSecond);
 800eb3a:	4b6e      	ldr	r3, [pc, #440]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800eb3c:	789b      	ldrb	r3, [r3, #2]
 800eb3e:	4619      	mov	r1, r3
 800eb40:	486b      	ldr	r0, [pc, #428]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800eb42:	f7fd fe49 	bl	800c7d8 <_ZN12FlashManager23WriteSecondEmgPerSecondEh>
		FlashManagerInstance.WriteVolumePerSecond(SystemConfig.VolumePerSecond);
 800eb46:	4b6b      	ldr	r3, [pc, #428]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800eb48:	78db      	ldrb	r3, [r3, #3]
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	4868      	ldr	r0, [pc, #416]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800eb4e:	f7fd fedf 	bl	800c910 <_ZN12FlashManager20WriteVolumePerSecondEh>
		FlashManagerInstance.WriteFlowPerSecond(SystemConfig.FlowPerSecond);
 800eb52:	4b68      	ldr	r3, [pc, #416]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800eb54:	791b      	ldrb	r3, [r3, #4]
 800eb56:	4619      	mov	r1, r3
 800eb58:	4865      	ldr	r0, [pc, #404]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800eb5a:	f7fd ff75 	bl	800ca48 <_ZN12FlashManager18WriteFlowPerSecondEh>
		FlashManagerInstance.WritePumpMaxRunTime(SystemConfig.PumpMaxRunSecond);
 800eb5e:	4b65      	ldr	r3, [pc, #404]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800eb60:	795b      	ldrb	r3, [r3, #5]
 800eb62:	4619      	mov	r1, r3
 800eb64:	4862      	ldr	r0, [pc, #392]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800eb66:	f7fe f80b 	bl	800cb80 <_ZN12FlashManager19WritePumpMaxRunTimeEh>
		FlashManagerInstance.WriteValveMaxRunTime(SystemConfig.ValveMaxRunSecond);
 800eb6a:	4b62      	ldr	r3, [pc, #392]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800eb6c:	799b      	ldrb	r3, [r3, #6]
 800eb6e:	4619      	mov	r1, r3
 800eb70:	485f      	ldr	r0, [pc, #380]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800eb72:	f7fe f8a1 	bl	800ccb8 <_ZN12FlashManager20WriteValveMaxRunTimeEh>
		FlashManagerInstance.WriteFlowRate(SystemConfig.FlowRate);
 800eb76:	4b5f      	ldr	r3, [pc, #380]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800eb78:	6a1b      	ldr	r3, [r3, #32]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7f1 fcdc 	bl	8000538 <__aeabi_f2d>
 800eb80:	4602      	mov	r2, r0
 800eb82:	460b      	mov	r3, r1
 800eb84:	ec43 2b10 	vmov	d0, r2, r3
 800eb88:	4859      	ldr	r0, [pc, #356]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800eb8a:	f7fe f931 	bl	800cdf0 <_ZN12FlashManager13WriteFlowRateEd>
		FlashManagerInstance.WriteVolumeRate(SystemConfig.VolumeRate);
 800eb8e:	4b59      	ldr	r3, [pc, #356]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800eb90:	69db      	ldr	r3, [r3, #28]
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7f1 fcd0 	bl	8000538 <__aeabi_f2d>
 800eb98:	4602      	mov	r2, r0
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	ec43 2b10 	vmov	d0, r2, r3
 800eba0:	4853      	ldr	r0, [pc, #332]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800eba2:	f7fe f9bf 	bl	800cf24 <_ZN12FlashManager15WriteVolumeRateEd>
		FlashManagerInstance.WriteFlowAverage(SystemConfig.FlowAverage);
 800eba6:	4b53      	ldr	r3, [pc, #332]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800eba8:	695b      	ldr	r3, [r3, #20]
 800ebaa:	4619      	mov	r1, r3
 800ebac:	4850      	ldr	r0, [pc, #320]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ebae:	f7fe fae6 	bl	800d17e <_ZN12FlashManager16WriteFlowAverageEm>
		FlashManagerInstance.WriteVolumeAverage(SystemConfig.VolumeAverage);
 800ebb2:	4b50      	ldr	r3, [pc, #320]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ebb4:	699b      	ldr	r3, [r3, #24]
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	484d      	ldr	r0, [pc, #308]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ebba:	f7fe fa4d 	bl	800d058 <_ZN12FlashManager18WriteVolumeAverageEm>
		FlashManagerInstance.WriteFirstEmgData(
 800ebbe:	4b4d      	ldr	r3, [pc, #308]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ebc0:	8919      	ldrh	r1, [r3, #8]
 800ebc2:	4b4c      	ldr	r3, [pc, #304]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ebc4:	895a      	ldrh	r2, [r3, #10]
 800ebc6:	4b4b      	ldr	r3, [pc, #300]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ebc8:	899b      	ldrh	r3, [r3, #12]
 800ebca:	4849      	ldr	r0, [pc, #292]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ebcc:	f7fe fb6a 	bl	800d2a4 <_ZN12FlashManager17WriteFirstEmgDataEttt>
				SystemConfig.FirstEmgMaxTrim,
				SystemConfig.FirstEmgZeroMaxTrim,
				SystemConfig.FirstEmgZeroMinTrim);
		FlashManagerInstance.WriteSecondEmgData(
 800ebd0:	4b48      	ldr	r3, [pc, #288]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ebd2:	89d9      	ldrh	r1, [r3, #14]
 800ebd4:	4b47      	ldr	r3, [pc, #284]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ebd6:	8a1a      	ldrh	r2, [r3, #16]
 800ebd8:	4b46      	ldr	r3, [pc, #280]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ebda:	8a5b      	ldrh	r3, [r3, #18]
 800ebdc:	4844      	ldr	r0, [pc, #272]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ebde:	f7fe fd1c 	bl	800d61a <_ZN12FlashManager18WriteSecondEmgDataEttt>
				SystemConfig.SecondEmgMaxTrim,
				SystemConfig.SecondEmgZeroMaxTrim,
				SystemConfig.SecondEmgZeroMinTrim);
		FlashManagerInstance.Setup();
 800ebe2:	4843      	ldr	r0, [pc, #268]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ebe4:	f7fd fc1e 	bl	800c424 <_ZN12FlashManager5SetupEv>
		FlashManagerInstance.Update();
 800ebe8:	4841      	ldr	r0, [pc, #260]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ebea:	f7fd fba1 	bl	800c330 <_ZN12FlashManager6UpdateEv>
	}
	//FlashManagerInstance.WriteFirstEmgData(0,0,0);
	//FlashManagerInstance.WriteSecondEmgData(0,0,0);
	//FlashManagerInstance.Update();
	SystemConfig.SendPerSecond=FlashManagerInstance.ReadSendPerSecond();
 800ebee:	4840      	ldr	r0, [pc, #256]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ebf0:	f7fd fd04 	bl	800c5fc <_ZN12FlashManager17ReadSendPerSecondEv>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	4b3e      	ldr	r3, [pc, #248]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ebfa:	701a      	strb	r2, [r3, #0]
	SystemConfig.FirstEmgPerSecond=FlashManagerInstance.ReadFirstEmgPerSecond();
 800ebfc:	483c      	ldr	r0, [pc, #240]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ebfe:	f7fd fd99 	bl	800c734 <_ZN12FlashManager21ReadFirstEmgPerSecondEv>
 800ec02:	4603      	mov	r3, r0
 800ec04:	461a      	mov	r2, r3
 800ec06:	4b3b      	ldr	r3, [pc, #236]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ec08:	705a      	strb	r2, [r3, #1]
	SystemConfig.SecondEmgPerSecond=FlashManagerInstance.ReadSecondEmgPerSecond();
 800ec0a:	4839      	ldr	r0, [pc, #228]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ec0c:	f7fd fe2e 	bl	800c86c <_ZN12FlashManager22ReadSecondEmgPerSecondEv>
 800ec10:	4603      	mov	r3, r0
 800ec12:	461a      	mov	r2, r3
 800ec14:	4b37      	ldr	r3, [pc, #220]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ec16:	709a      	strb	r2, [r3, #2]
	SystemConfig.VolumePerSecond=FlashManagerInstance.ReadVolumePerSecond();
 800ec18:	4835      	ldr	r0, [pc, #212]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ec1a:	f7fd fec3 	bl	800c9a4 <_ZN12FlashManager19ReadVolumePerSecondEv>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	461a      	mov	r2, r3
 800ec22:	4b34      	ldr	r3, [pc, #208]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ec24:	70da      	strb	r2, [r3, #3]
	SystemConfig.FlowPerSecond=FlashManagerInstance.ReadFlowPerSecond();
 800ec26:	4832      	ldr	r0, [pc, #200]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ec28:	f7fd ff58 	bl	800cadc <_ZN12FlashManager17ReadFlowPerSecondEv>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	461a      	mov	r2, r3
 800ec30:	4b30      	ldr	r3, [pc, #192]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ec32:	711a      	strb	r2, [r3, #4]
	SystemConfig.PumpMaxRunSecond=FlashManagerInstance.ReadPumpMaxRunTime();
 800ec34:	482e      	ldr	r0, [pc, #184]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ec36:	f7fd ffed 	bl	800cc14 <_ZN12FlashManager18ReadPumpMaxRunTimeEv>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	4b2d      	ldr	r3, [pc, #180]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ec40:	715a      	strb	r2, [r3, #5]
	SystemConfig.ValveMaxRunSecond=FlashManagerInstance.ReadValveMaxRunTime();
 800ec42:	482b      	ldr	r0, [pc, #172]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ec44:	f7fe f882 	bl	800cd4c <_ZN12FlashManager19ReadValveMaxRunTimeEv>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	4b29      	ldr	r3, [pc, #164]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ec4e:	719a      	strb	r2, [r3, #6]
	SystemConfig.FlowRate=FlashManagerInstance.ReadFlowRate();
 800ec50:	4827      	ldr	r0, [pc, #156]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ec52:	f7fe f90f 	bl	800ce74 <_ZN12FlashManager12ReadFlowRateEv>
 800ec56:	ec53 2b10 	vmov	r2, r3, d0
 800ec5a:	4610      	mov	r0, r2
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	f7f1 fed5 	bl	8000a0c <__aeabi_d2f>
 800ec62:	4603      	mov	r3, r0
 800ec64:	4a23      	ldr	r2, [pc, #140]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ec66:	6213      	str	r3, [r2, #32]
	SystemConfig.VolumeRate=FlashManagerInstance.ReadVolumeRate();
 800ec68:	4821      	ldr	r0, [pc, #132]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ec6a:	f7fe f99d 	bl	800cfa8 <_ZN12FlashManager14ReadVolumeRateEv>
 800ec6e:	ec53 2b10 	vmov	r2, r3, d0
 800ec72:	4610      	mov	r0, r2
 800ec74:	4619      	mov	r1, r3
 800ec76:	f7f1 fec9 	bl	8000a0c <__aeabi_d2f>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	4a1d      	ldr	r2, [pc, #116]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ec7e:	61d3      	str	r3, [r2, #28]
	SystemConfig.FlowAverage=FlashManagerInstance.ReadFlowAverage();
 800ec80:	481b      	ldr	r0, [pc, #108]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ec82:	f7fe fabd 	bl	800d200 <_ZN12FlashManager15ReadFlowAverageEv>
 800ec86:	4603      	mov	r3, r0
 800ec88:	4a1a      	ldr	r2, [pc, #104]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ec8a:	6153      	str	r3, [r2, #20]
	SystemConfig.VolumeAverage=FlashManagerInstance.ReadVolumeAverage();
 800ec8c:	4818      	ldr	r0, [pc, #96]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ec8e:	f7fe fa24 	bl	800d0da <_ZN12FlashManager17ReadVolumeAverageEv>
 800ec92:	4603      	mov	r3, r0
 800ec94:	4a17      	ldr	r2, [pc, #92]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ec96:	6193      	str	r3, [r2, #24]
	SystemConfig.FirstEmgMaxTrim=FlashManagerInstance.ReadFirstEmgMaxTrim();
 800ec98:	4815      	ldr	r0, [pc, #84]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ec9a:	f7fe fbc1 	bl	800d420 <_ZN12FlashManager19ReadFirstEmgMaxTrimEv>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	461a      	mov	r2, r3
 800eca2:	4b14      	ldr	r3, [pc, #80]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800eca4:	811a      	strh	r2, [r3, #8]
	SystemConfig.FirstEmgZeroMaxTrim=FlashManagerInstance.ReadFirstEmgZeroPointMaxTrim();
 800eca6:	4812      	ldr	r0, [pc, #72]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800eca8:	f7fe fc0d 	bl	800d4c6 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv>
 800ecac:	4603      	mov	r3, r0
 800ecae:	461a      	mov	r2, r3
 800ecb0:	4b10      	ldr	r3, [pc, #64]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ecb2:	815a      	strh	r2, [r3, #10]
	SystemConfig.FirstEmgZeroMinTrim=FlashManagerInstance.ReadFirstEmgZeroPointMinTrim();
 800ecb4:	480e      	ldr	r0, [pc, #56]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ecb6:	f7fe fc5b 	bl	800d570 <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	4b0d      	ldr	r3, [pc, #52]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ecc0:	819a      	strh	r2, [r3, #12]
	SystemConfig.SecondEmgMaxTrim=FlashManagerInstance.ReadSecondEmgMaxTrim();
 800ecc2:	480b      	ldr	r0, [pc, #44]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ecc4:	f7fe fd67 	bl	800d796 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	461a      	mov	r2, r3
 800eccc:	4b09      	ldr	r3, [pc, #36]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ecce:	81da      	strh	r2, [r3, #14]
	SystemConfig.SecondEmgZeroMaxTrim=FlashManagerInstance.ReadSecondEmgZeroPointMaxTrim();
 800ecd0:	4807      	ldr	r0, [pc, #28]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ecd2:	f7fe fdb3 	bl	800d83c <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	461a      	mov	r2, r3
 800ecda:	4b06      	ldr	r3, [pc, #24]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ecdc:	821a      	strh	r2, [r3, #16]
	SystemConfig.SecondEmgZeroMinTrim=FlashManagerInstance.ReadSecondEmgZeroPointMinTrim();
 800ecde:	4804      	ldr	r0, [pc, #16]	@ (800ecf0 <FlashInitialize+0x1e4>)
 800ece0:	f7fe fe01 	bl	800d8e6 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv>
 800ece4:	4603      	mov	r3, r0
 800ece6:	461a      	mov	r2, r3
 800ece8:	4b02      	ldr	r3, [pc, #8]	@ (800ecf4 <FlashInitialize+0x1e8>)
 800ecea:	825a      	strh	r2, [r3, #18]
}
 800ecec:	bf00      	nop
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	20009120 	.word	0x20009120
 800ecf4:	2000932c 	.word	0x2000932c

0800ecf8 <SendFeedback>:
void SuccessResult(void){
	uint8_t data[1]={0x01};
	WriteUart(data, 1);
}

void SendFeedback(uint8_t processType,uint8_t subType, uint8_t status){
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	4603      	mov	r3, r0
 800ed00:	71fb      	strb	r3, [r7, #7]
 800ed02:	460b      	mov	r3, r1
 800ed04:	71bb      	strb	r3, [r7, #6]
 800ed06:	4613      	mov	r3, r2
 800ed08:	717b      	strb	r3, [r7, #5]
	uint8_t uartData[6]={0};
 800ed0a:	f107 0308 	add.w	r3, r7, #8
 800ed0e:	2200      	movs	r2, #0
 800ed10:	601a      	str	r2, [r3, #0]
 800ed12:	809a      	strh	r2, [r3, #4]
	uint16_t xLen=3;
 800ed14:	2303      	movs	r3, #3
 800ed16:	81fb      	strh	r3, [r7, #14]
	uartData[0]=0x04;
 800ed18:	2304      	movs	r3, #4
 800ed1a:	723b      	strb	r3, [r7, #8]
	uartData[1]=(xLen & 0xFF00)>>8;
 800ed1c:	89fb      	ldrh	r3, [r7, #14]
 800ed1e:	0a1b      	lsrs	r3, r3, #8
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	727b      	strb	r3, [r7, #9]
	uartData[2]=(xLen & 0x00FF);
 800ed26:	89fb      	ldrh	r3, [r7, #14]
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	72bb      	strb	r3, [r7, #10]
	uartData[3]=processType;
 800ed2c:	79fb      	ldrb	r3, [r7, #7]
 800ed2e:	72fb      	strb	r3, [r7, #11]
	uartData[4]=subType;
 800ed30:	79bb      	ldrb	r3, [r7, #6]
 800ed32:	733b      	strb	r3, [r7, #12]
	uartData[5]=status;
 800ed34:	797b      	ldrb	r3, [r7, #5]
 800ed36:	737b      	strb	r3, [r7, #13]
	WriteUart(uartData, 6);
 800ed38:	f107 0308 	add.w	r3, r7, #8
 800ed3c:	2106      	movs	r1, #6
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f000 f8f8 	bl	800ef34 <WriteUart>
}
 800ed44:	bf00      	nop
 800ed46:	3710      	adds	r7, #16
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <SuccessDataResult>:
void SuccessDataResult(uint8_t percent,uint8_t dataType,uint8_t *data,int len){
 800ed4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed50:	b089      	sub	sp, #36	@ 0x24
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	60ba      	str	r2, [r7, #8]
 800ed56:	607b      	str	r3, [r7, #4]
 800ed58:	4603      	mov	r3, r0
 800ed5a:	73fb      	strb	r3, [r7, #15]
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	73bb      	strb	r3, [r7, #14]
	uartData[5]=dataType;
	for (int i = 6; i < len+6; ++i) {
		uartData[i]=data[i-6];
	}
	WriteUart(uartData, len+6);
}
 800ed60:	466b      	mov	r3, sp
 800ed62:	461e      	mov	r6, r3
	uint8_t uartData[len+6]={0};
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	1d99      	adds	r1, r3, #6
 800ed68:	1e4b      	subs	r3, r1, #1
 800ed6a:	61bb      	str	r3, [r7, #24]
 800ed6c:	460a      	mov	r2, r1
 800ed6e:	2300      	movs	r3, #0
 800ed70:	4690      	mov	r8, r2
 800ed72:	4699      	mov	r9, r3
 800ed74:	f04f 0200 	mov.w	r2, #0
 800ed78:	f04f 0300 	mov.w	r3, #0
 800ed7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ed80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ed84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ed88:	460a      	mov	r2, r1
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	4614      	mov	r4, r2
 800ed8e:	461d      	mov	r5, r3
 800ed90:	f04f 0200 	mov.w	r2, #0
 800ed94:	f04f 0300 	mov.w	r3, #0
 800ed98:	00eb      	lsls	r3, r5, #3
 800ed9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ed9e:	00e2      	lsls	r2, r4, #3
 800eda0:	460b      	mov	r3, r1
 800eda2:	3307      	adds	r3, #7
 800eda4:	08db      	lsrs	r3, r3, #3
 800eda6:	00db      	lsls	r3, r3, #3
 800eda8:	ebad 0d03 	sub.w	sp, sp, r3
 800edac:	466b      	mov	r3, sp
 800edae:	3300      	adds	r3, #0
 800edb0:	617b      	str	r3, [r7, #20]
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	3901      	subs	r1, #1
 800edb6:	2200      	movs	r2, #0
 800edb8:	701a      	strb	r2, [r3, #0]
 800edba:	1c5a      	adds	r2, r3, #1
 800edbc:	1e4b      	subs	r3, r1, #1
 800edbe:	e003      	b.n	800edc8 <SuccessDataResult+0x7c>
 800edc0:	2100      	movs	r1, #0
 800edc2:	7011      	strb	r1, [r2, #0]
 800edc4:	3b01      	subs	r3, #1
 800edc6:	3201      	adds	r2, #1
 800edc8:	2b00      	cmp	r3, #0
 800edca:	daf9      	bge.n	800edc0 <SuccessDataResult+0x74>
	uint16_t xLen=len+3;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	b29b      	uxth	r3, r3
 800edd0:	3303      	adds	r3, #3
 800edd2:	827b      	strh	r3, [r7, #18]
	uartData[0]=0x02;
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	2202      	movs	r2, #2
 800edd8:	701a      	strb	r2, [r3, #0]
	uartData[1]=(xLen & 0xFF00)>>8;
 800edda:	8a7b      	ldrh	r3, [r7, #18]
 800eddc:	0a1b      	lsrs	r3, r3, #8
 800edde:	b29b      	uxth	r3, r3
 800ede0:	b2da      	uxtb	r2, r3
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	705a      	strb	r2, [r3, #1]
	uartData[2]=(xLen & 0x00FF);
 800ede6:	8a7b      	ldrh	r3, [r7, #18]
 800ede8:	b2da      	uxtb	r2, r3
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	709a      	strb	r2, [r3, #2]
	uartData[3]=1;
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	2201      	movs	r2, #1
 800edf2:	70da      	strb	r2, [r3, #3]
	uartData[4]=percent;
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	7bfa      	ldrb	r2, [r7, #15]
 800edf8:	711a      	strb	r2, [r3, #4]
	uartData[5]=dataType;
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	7bba      	ldrb	r2, [r7, #14]
 800edfe:	715a      	strb	r2, [r3, #5]
	for (int i = 6; i < len+6; ++i) {
 800ee00:	2306      	movs	r3, #6
 800ee02:	61fb      	str	r3, [r7, #28]
 800ee04:	e00c      	b.n	800ee20 <SuccessDataResult+0xd4>
		uartData[i]=data[i-6];
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	3b06      	subs	r3, #6
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	7819      	ldrb	r1, [r3, #0]
 800ee10:	697a      	ldr	r2, [r7, #20]
 800ee12:	69fb      	ldr	r3, [r7, #28]
 800ee14:	4413      	add	r3, r2
 800ee16:	460a      	mov	r2, r1
 800ee18:	701a      	strb	r2, [r3, #0]
	for (int i = 6; i < len+6; ++i) {
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	61fb      	str	r3, [r7, #28]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	3305      	adds	r3, #5
 800ee24:	69fa      	ldr	r2, [r7, #28]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	dded      	ble.n	800ee06 <SuccessDataResult+0xba>
	WriteUart(uartData, len+6);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	3306      	adds	r3, #6
 800ee2e:	4619      	mov	r1, r3
 800ee30:	6978      	ldr	r0, [r7, #20]
 800ee32:	f000 f87f 	bl	800ef34 <WriteUart>
 800ee36:	46b5      	mov	sp, r6
}
 800ee38:	bf00      	nop
 800ee3a:	3724      	adds	r7, #36	@ 0x24
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ee42 <ErrorResult>:
	uartData[5]=opCode;
	uartData[6]=(errorCode>>8) & 0xFF;
	uartData[7]=errorCode & 0xFF;
	WriteUart(uartData, 8);
}
void ErrorResult(uint8_t opCode,uint16_t errorCode){
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b084      	sub	sp, #16
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	4603      	mov	r3, r0
 800ee4a:	460a      	mov	r2, r1
 800ee4c:	71fb      	strb	r3, [r7, #7]
 800ee4e:	4613      	mov	r3, r2
 800ee50:	80bb      	strh	r3, [r7, #4]
	uint8_t data[4];
	data[0]=0x00;
 800ee52:	2300      	movs	r3, #0
 800ee54:	733b      	strb	r3, [r7, #12]
	data[1]=opCode;
 800ee56:	79fb      	ldrb	r3, [r7, #7]
 800ee58:	737b      	strb	r3, [r7, #13]
	data[2]=(errorCode>>8) & 0xFF;
 800ee5a:	88bb      	ldrh	r3, [r7, #4]
 800ee5c:	0a1b      	lsrs	r3, r3, #8
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	73bb      	strb	r3, [r7, #14]
	data[3]=errorCode & 0xFF;
 800ee64:	88bb      	ldrh	r3, [r7, #4]
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	73fb      	strb	r3, [r7, #15]
	WriteUart(data, 4);
 800ee6a:	f107 030c 	add.w	r3, r7, #12
 800ee6e:	2104      	movs	r1, #4
 800ee70:	4618      	mov	r0, r3
 800ee72:	f000 f85f 	bl	800ef34 <WriteUart>
}
 800ee76:	bf00      	nop
 800ee78:	3710      	adds	r7, #16
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
	...

0800ee80 <StartReadUARTTask>:
void StartReadUARTTask(void *argument){
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 50 / portTICK_PERIOD_MS;
 800ee88:	2332      	movs	r3, #50	@ 0x32
 800ee8a:	617b      	str	r3, [r7, #20]
	//osStatus_t communicationSemaphoreVal;
	ThreadStorage.CommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &communicationSemaphore_attributes);
 800ee8c:	4a23      	ldr	r2, [pc, #140]	@ (800ef1c <StartReadUARTTask+0x9c>)
 800ee8e:	2101      	movs	r1, #1
 800ee90:	2001      	movs	r0, #1
 800ee92:	f7f7 fdf8 	bl	8006a86 <osSemaphoreNew>
 800ee96:	4603      	mov	r3, r0
 800ee98:	4a21      	ldr	r2, [pc, #132]	@ (800ef20 <StartReadUARTTask+0xa0>)
 800ee9a:	f8c2 31e0 	str.w	r3, [r2, #480]	@ 0x1e0
	ThreadStorage.SendUARTThreadId=osThreadNew(StartSendUARTTask, NULL, &normalPriority);
 800ee9e:	4a21      	ldr	r2, [pc, #132]	@ (800ef24 <StartReadUARTTask+0xa4>)
 800eea0:	2100      	movs	r1, #0
 800eea2:	4821      	ldr	r0, [pc, #132]	@ (800ef28 <StartReadUARTTask+0xa8>)
 800eea4:	f7f7 fd30 	bl	8006908 <osThreadNew>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	4a1d      	ldr	r2, [pc, #116]	@ (800ef20 <StartReadUARTTask+0xa0>)
 800eeac:	6013      	str	r3, [r2, #0]
	//bool retryStatus=false;
    uint8_t data[8];
	for(;;){
		//uint16_t newPos = __HAL_DMA_GET_COUNTER(huart1.hdmarx);
		//if(newPos>0){
			HAL_StatusTypeDef status=HAL_UART_Receive_DMA(&huart1, data, 8);
 800eeae:	f107 0308 	add.w	r3, r7, #8
 800eeb2:	2208      	movs	r2, #8
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	481d      	ldr	r0, [pc, #116]	@ (800ef2c <StartReadUARTTask+0xac>)
 800eeb8:	f7f6 fb91 	bl	80055de <HAL_UART_Receive_DMA>
 800eebc:	4603      	mov	r3, r0
 800eebe:	74fb      	strb	r3, [r7, #19]
			if (status == HAL_OK&&(data[0]==1||data[0]==2||data[0]==3)) {
 800eec0:	7cfb      	ldrb	r3, [r7, #19]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d115      	bne.n	800eef2 <StartReadUARTTask+0x72>
 800eec6:	7a3b      	ldrb	r3, [r7, #8]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d005      	beq.n	800eed8 <StartReadUARTTask+0x58>
 800eecc:	7a3b      	ldrb	r3, [r7, #8]
 800eece:	2b02      	cmp	r3, #2
 800eed0:	d002      	beq.n	800eed8 <StartReadUARTTask+0x58>
 800eed2:	7a3b      	ldrb	r3, [r7, #8]
 800eed4:	2b03      	cmp	r3, #3
 800eed6:	d10c      	bne.n	800eef2 <StartReadUARTTask+0x72>
				SendFeedback(data[0], data[1], ProcessStatuses::PS_Processing);
 800eed8:	7a3b      	ldrb	r3, [r7, #8]
 800eeda:	7a79      	ldrb	r1, [r7, #9]
 800eedc:	2201      	movs	r2, #1
 800eede:	4618      	mov	r0, r3
 800eee0:	f7ff ff0a 	bl	800ecf8 <SendFeedback>
				CommunicationInstance.ProcessCommand(data);
 800eee4:	f107 0308 	add.w	r3, r7, #8
 800eee8:	4619      	mov	r1, r3
 800eeea:	4811      	ldr	r0, [pc, #68]	@ (800ef30 <StartReadUARTTask+0xb0>)
 800eeec:	f7fb f940 	bl	800a170 <_ZN13Communication14ProcessCommandEPh>
 800eef0:	e00f      	b.n	800ef12 <StartReadUARTTask+0x92>
	        }
			else if(status != HAL_TIMEOUT && status != HAL_BUSY && status != HAL_OK){
 800eef2:	7cfb      	ldrb	r3, [r7, #19]
 800eef4:	2b03      	cmp	r3, #3
 800eef6:	d00c      	beq.n	800ef12 <StartReadUARTTask+0x92>
 800eef8:	7cfb      	ldrb	r3, [r7, #19]
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d009      	beq.n	800ef12 <StartReadUARTTask+0x92>
 800eefe:	7cfb      	ldrb	r3, [r7, #19]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d006      	beq.n	800ef12 <StartReadUARTTask+0x92>
				SuccessDataResult(100, SuccessDataType::SD_RepeatAgain, data, 8);
 800ef04:	f107 0208 	add.w	r2, r7, #8
 800ef08:	2308      	movs	r3, #8
 800ef0a:	21fe      	movs	r1, #254	@ 0xfe
 800ef0c:	2064      	movs	r0, #100	@ 0x64
 800ef0e:	f7ff ff1d 	bl	800ed4c <SuccessDataResult>
	        }
		//}
		vTaskDelay(xDelay);
 800ef12:	2032      	movs	r0, #50	@ 0x32
 800ef14:	f7f9 fa84 	bl	8008420 <vTaskDelay>
					HAL_UART_Receive(&huart1, xData, sizeof(len),HAL_MAX_DELAY);
					SuccessDataResult(100, SuccessDataType::SD_RepeatAgain, xData, sizeof(len));
				}
			vTaskDelay(xDelay);
		}*/
	}
 800ef18:	e7c9      	b.n	800eeae <StartReadUARTTask+0x2e>
 800ef1a:	bf00      	nop
 800ef1c:	08011d94 	.word	0x08011d94
 800ef20:	2000913c 	.word	0x2000913c
 800ef24:	08011d0c 	.word	0x08011d0c
 800ef28:	0800ef89 	.word	0x0800ef89
 800ef2c:	20000460 	.word	0x20000460
 800ef30:	20009100 	.word	0x20009100

0800ef34 <WriteUart>:
}
void WriteUart(uint8_t *data,int len){
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
	  uint8_t count=0;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	73fb      	strb	r3, [r7, #15]
	  HAL_StatusTypeDef status=HAL_UART_Transmit(&huart1, data,len ,HAL_MAX_DELAY);
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	f04f 33ff 	mov.w	r3, #4294967295
 800ef4a:	6879      	ldr	r1, [r7, #4]
 800ef4c:	480d      	ldr	r0, [pc, #52]	@ (800ef84 <WriteUart+0x50>)
 800ef4e:	f7f6 fabb 	bl	80054c8 <HAL_UART_Transmit>
 800ef52:	4603      	mov	r3, r0
 800ef54:	73bb      	strb	r3, [r7, #14]
	  if(status!=HAL_OK && count<5)
 800ef56:	7bbb      	ldrb	r3, [r7, #14]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d00f      	beq.n	800ef7c <WriteUart+0x48>
 800ef5c:	7bfb      	ldrb	r3, [r7, #15]
 800ef5e:	2b04      	cmp	r3, #4
 800ef60:	d80c      	bhi.n	800ef7c <WriteUart+0x48>
	  {
		  status=HAL_UART_Transmit(&huart1, data,len ,HAL_MAX_DELAY);
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	f04f 33ff 	mov.w	r3, #4294967295
 800ef6a:	6879      	ldr	r1, [r7, #4]
 800ef6c:	4805      	ldr	r0, [pc, #20]	@ (800ef84 <WriteUart+0x50>)
 800ef6e:	f7f6 faab 	bl	80054c8 <HAL_UART_Transmit>
 800ef72:	4603      	mov	r3, r0
 800ef74:	73bb      	strb	r3, [r7, #14]
		  count++;
 800ef76:	7bfb      	ldrb	r3, [r7, #15]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	73fb      	strb	r3, [r7, #15]
	  }
	  /*if(status==HAL_OK){
		  uint8_t nl = 0x0A;
		  HAL_UART_Transmit(&huart1, &nl, 1, HAL_MAX_DELAY);
	  }*/
}
 800ef7c:	bf00      	nop
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	20000460 	.word	0x20000460

0800ef88 <StartSendUARTTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSendUARTTask */
void StartSendUARTTask(void *argument)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800ef96:	f843 0c54 	str.w	r0, [r3, #-84]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  // uint8_t data[] = "SendTask\r\n";
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800ef9a:	f7f9 fbf3 	bl	8008784 <xTaskGetTickCount>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800efa4:	f102 020c 	add.w	r2, r2, #12
 800efa8:	6013      	str	r3, [r2, #0]
	const TickType_t xFrequency = (1000/SystemConfig.SendPerSecond);
 800efaa:	4bb1      	ldr	r3, [pc, #708]	@ (800f270 <StartSendUARTTask+0x2e8>)
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	461a      	mov	r2, r3
 800efb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800efb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800efb8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800efbc:	f102 021c 	add.w	r2, r2, #28
 800efc0:	6013      	str	r3, [r2, #0]
	osStatus_t volumeSemaphoreVal;
	osStatus_t flowSemaphoreVal;
	osStatus_t communicationSemaphoreVal;
  for(;;)
  {
	  uint16_t totalLen=12;
 800efc2:	230c      	movs	r3, #12
 800efc4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800efc8:	f102 0216 	add.w	r2, r2, #22
 800efcc:	8013      	strh	r3, [r2, #0]
	  uint8_t allData[4096];
	  firstEmgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FirstEmgSemaphoreHandle,xFrequency/10);
 800efce:	4ba9      	ldr	r3, [pc, #676]	@ (800f274 <StartSendUARTTask+0x2ec>)
 800efd0:	f8d3 21d0 	ldr.w	r2, [r3, #464]	@ 0x1d0
 800efd4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800efd8:	f103 031c 	add.w	r3, r3, #28
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	49a6      	ldr	r1, [pc, #664]	@ (800f278 <StartSendUARTTask+0x2f0>)
 800efe0:	fba1 1303 	umull	r1, r3, r1, r3
 800efe4:	08db      	lsrs	r3, r3, #3
 800efe6:	4619      	mov	r1, r3
 800efe8:	4610      	mov	r0, r2
 800efea:	f7f7 fdd5 	bl	8006b98 <osSemaphoreAcquire>
 800efee:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800eff2:	f103 0318 	add.w	r3, r3, #24
 800eff6:	6018      	str	r0, [r3, #0]
	  if(firstEmgSemaphoreVal==osOK){
 800eff8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800effc:	f103 0318 	add.w	r3, r3, #24
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	f040 80b1 	bne.w	800f16a <StartSendUARTTask+0x1e2>
		  int xLen=EmgInstance.FirstEmgBufferLen;
 800f008:	4b9c      	ldr	r3, [pc, #624]	@ (800f27c <StartSendUARTTask+0x2f4>)
 800f00a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f010:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f014:	f102 0214 	add.w	r2, r2, #20
 800f018:	6013      	str	r3, [r2, #0]
		  if(xLen>0){
 800f01a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f01e:	f103 0314 	add.w	r3, r3, #20
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	f340 809a 	ble.w	800f15e <StartSendUARTTask+0x1d6>
			  allData[totalLen]=1;
 800f02a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f02e:	f103 0316 	add.w	r3, r3, #22
 800f032:	881b      	ldrh	r3, [r3, #0]
 800f034:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f038:	4413      	add	r3, r2
 800f03a:	2201      	movs	r2, #1
 800f03c:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f040:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f044:	f103 0316 	add.w	r3, r3, #22
 800f048:	881b      	ldrh	r3, [r3, #0]
 800f04a:	3301      	adds	r3, #1
 800f04c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f050:	f102 0216 	add.w	r2, r2, #22
 800f054:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=(xLen & 0xFF00)>>8;
 800f056:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f05a:	f103 0314 	add.w	r3, r3, #20
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	121a      	asrs	r2, r3, #8
 800f062:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f066:	f103 0316 	add.w	r3, r3, #22
 800f06a:	881b      	ldrh	r3, [r3, #0]
 800f06c:	b2d2      	uxtb	r2, r2
 800f06e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f072:	440b      	add	r3, r1
 800f074:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f078:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f07c:	f103 0316 	add.w	r3, r3, #22
 800f080:	881b      	ldrh	r3, [r3, #0]
 800f082:	3301      	adds	r3, #1
 800f084:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f088:	f102 0216 	add.w	r2, r2, #22
 800f08c:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=xLen & 0xFF;
 800f08e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f092:	f103 0316 	add.w	r3, r3, #22
 800f096:	881b      	ldrh	r3, [r3, #0]
 800f098:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f09c:	f102 0214 	add.w	r2, r2, #20
 800f0a0:	6812      	ldr	r2, [r2, #0]
 800f0a2:	b2d2      	uxtb	r2, r2
 800f0a4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f0a8:	440b      	add	r3, r1
 800f0aa:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f0ae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f0b2:	f103 0316 	add.w	r3, r3, #22
 800f0b6:	881b      	ldrh	r3, [r3, #0]
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f0be:	f102 0216 	add.w	r2, r2, #22
 800f0c2:	8013      	strh	r3, [r2, #0]
			   for (int i=0;i < xLen; ++i) {
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f0ca:	f102 0210 	add.w	r2, r2, #16
 800f0ce:	6013      	str	r3, [r2, #0]
 800f0d0:	e033      	b.n	800f13a <StartSendUARTTask+0x1b2>
				   allData[totalLen]=EmgInstance.FirstEmgBuffer[i];
 800f0d2:	4a6a      	ldr	r2, [pc, #424]	@ (800f27c <StartSendUARTTask+0x2f4>)
 800f0d4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f0d8:	f103 0310 	add.w	r3, r3, #16
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	330c      	adds	r3, #12
 800f0e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f0e4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f0e8:	f103 0316 	add.w	r3, r3, #22
 800f0ec:	881b      	ldrh	r3, [r3, #0]
 800f0ee:	b2d2      	uxtb	r2, r2
 800f0f0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f0f4:	440b      	add	r3, r1
 800f0f6:	f803 2c4c 	strb.w	r2, [r3, #-76]
				   totalLen++;
 800f0fa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f0fe:	f103 0316 	add.w	r3, r3, #22
 800f102:	881b      	ldrh	r3, [r3, #0]
 800f104:	3301      	adds	r3, #1
 800f106:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f10a:	f102 0216 	add.w	r2, r2, #22
 800f10e:	8013      	strh	r3, [r2, #0]
				   EmgInstance.FirstEmgBuffer[i]=0;
 800f110:	4a5a      	ldr	r2, [pc, #360]	@ (800f27c <StartSendUARTTask+0x2f4>)
 800f112:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f116:	f103 0310 	add.w	r3, r3, #16
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	330c      	adds	r3, #12
 800f11e:	2100      	movs	r1, #0
 800f120:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			   for (int i=0;i < xLen; ++i) {
 800f124:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f128:	f103 0310 	add.w	r3, r3, #16
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	3301      	adds	r3, #1
 800f130:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f134:	f102 0210 	add.w	r2, r2, #16
 800f138:	6013      	str	r3, [r2, #0]
 800f13a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f13e:	f103 0310 	add.w	r3, r3, #16
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f148:	f103 0314 	add.w	r3, r3, #20
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	429a      	cmp	r2, r3
 800f150:	dbbf      	blt.n	800f0d2 <StartSendUARTTask+0x14a>
			   }
			   EmgInstance.FirstEmgBufferLen=0;
 800f152:	4b4a      	ldr	r3, [pc, #296]	@ (800f27c <StartSendUARTTask+0x2f4>)
 800f154:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f158:	461a      	mov	r2, r3
 800f15a:	2300      	movs	r3, #0
 800f15c:	6313      	str	r3, [r2, #48]	@ 0x30
		  }
		  osSemaphoreRelease(ThreadStorage.FirstEmgSemaphoreHandle);
 800f15e:	4b45      	ldr	r3, [pc, #276]	@ (800f274 <StartSendUARTTask+0x2ec>)
 800f160:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800f164:	4618      	mov	r0, r3
 800f166:	f7f7 fd69 	bl	8006c3c <osSemaphoreRelease>
	  }
	  secondEmgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.SecondEmgSemaphoreHandle, xFrequency/10);
 800f16a:	4b42      	ldr	r3, [pc, #264]	@ (800f274 <StartSendUARTTask+0x2ec>)
 800f16c:	f8d3 21d4 	ldr.w	r2, [r3, #468]	@ 0x1d4
 800f170:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f174:	f103 031c 	add.w	r3, r3, #28
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	493f      	ldr	r1, [pc, #252]	@ (800f278 <StartSendUARTTask+0x2f0>)
 800f17c:	fba1 1303 	umull	r1, r3, r1, r3
 800f180:	08db      	lsrs	r3, r3, #3
 800f182:	4619      	mov	r1, r3
 800f184:	4610      	mov	r0, r2
 800f186:	f7f7 fd07 	bl	8006b98 <osSemaphoreAcquire>
 800f18a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f18e:	f103 0310 	add.w	r3, r3, #16
 800f192:	6018      	str	r0, [r3, #0]
	  if(secondEmgSemaphoreVal==osOK){
 800f194:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f198:	f103 0310 	add.w	r3, r3, #16
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	f040 80bc 	bne.w	800f31c <StartSendUARTTask+0x394>
		  int xLen=EmgInstance.SecondEmgBufferLen;
 800f1a4:	4b35      	ldr	r3, [pc, #212]	@ (800f27c <StartSendUARTTask+0x2f4>)
 800f1a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f1aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1ac:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f1b0:	f102 020c 	add.w	r2, r2, #12
 800f1b4:	6013      	str	r3, [r2, #0]
		  if(xLen>0){
 800f1b6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f1ba:	f103 030c 	add.w	r3, r3, #12
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	f340 80a5 	ble.w	800f310 <StartSendUARTTask+0x388>
			  allData[totalLen]=2;
 800f1c6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f1ca:	f103 0316 	add.w	r3, r3, #22
 800f1ce:	881b      	ldrh	r3, [r3, #0]
 800f1d0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f1d4:	4413      	add	r3, r2
 800f1d6:	2202      	movs	r2, #2
 800f1d8:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f1dc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f1e0:	f103 0316 	add.w	r3, r3, #22
 800f1e4:	881b      	ldrh	r3, [r3, #0]
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f1ec:	f102 0216 	add.w	r2, r2, #22
 800f1f0:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=(xLen & 0xFF00)>>8;
 800f1f2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f1f6:	f103 030c 	add.w	r3, r3, #12
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	121a      	asrs	r2, r3, #8
 800f1fe:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f202:	f103 0316 	add.w	r3, r3, #22
 800f206:	881b      	ldrh	r3, [r3, #0]
 800f208:	b2d2      	uxtb	r2, r2
 800f20a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f20e:	440b      	add	r3, r1
 800f210:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f214:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f218:	f103 0316 	add.w	r3, r3, #22
 800f21c:	881b      	ldrh	r3, [r3, #0]
 800f21e:	3301      	adds	r3, #1
 800f220:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f224:	f102 0216 	add.w	r2, r2, #22
 800f228:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=xLen & 0xFF;
 800f22a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f22e:	f103 0316 	add.w	r3, r3, #22
 800f232:	881b      	ldrh	r3, [r3, #0]
 800f234:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f238:	f102 020c 	add.w	r2, r2, #12
 800f23c:	6812      	ldr	r2, [r2, #0]
 800f23e:	b2d2      	uxtb	r2, r2
 800f240:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f244:	440b      	add	r3, r1
 800f246:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f24a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f24e:	f103 0316 	add.w	r3, r3, #22
 800f252:	881b      	ldrh	r3, [r3, #0]
 800f254:	3301      	adds	r3, #1
 800f256:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f25a:	f102 0216 	add.w	r2, r2, #22
 800f25e:	8013      	strh	r3, [r2, #0]
			   for (int i=0;i < xLen; ++i) {
 800f260:	2300      	movs	r3, #0
 800f262:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f266:	f102 020c 	add.w	r2, r2, #12
 800f26a:	6013      	str	r3, [r2, #0]
 800f26c:	e03e      	b.n	800f2ec <StartSendUARTTask+0x364>
 800f26e:	bf00      	nop
 800f270:	2000932c 	.word	0x2000932c
 800f274:	2000913c 	.word	0x2000913c
 800f278:	cccccccd 	.word	0xcccccccd
 800f27c:	20005084 	.word	0x20005084
				   allData[totalLen]=EmgInstance.SecondEmgBuffer[i];
 800f280:	4ad1      	ldr	r2, [pc, #836]	@ (800f5c8 <StartSendUARTTask+0x640>)
 800f282:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f286:	f103 030c 	add.w	r3, r3, #12
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800f290:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f294:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f298:	f103 0316 	add.w	r3, r3, #22
 800f29c:	881b      	ldrh	r3, [r3, #0]
 800f29e:	b2d2      	uxtb	r2, r2
 800f2a0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f2a4:	440b      	add	r3, r1
 800f2a6:	f803 2c4c 	strb.w	r2, [r3, #-76]
				   totalLen++;
 800f2aa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f2ae:	f103 0316 	add.w	r3, r3, #22
 800f2b2:	881b      	ldrh	r3, [r3, #0]
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f2ba:	f102 0216 	add.w	r2, r2, #22
 800f2be:	8013      	strh	r3, [r2, #0]
				   EmgInstance.SecondEmgBuffer[i]=0;
 800f2c0:	4ac1      	ldr	r2, [pc, #772]	@ (800f5c8 <StartSendUARTTask+0x640>)
 800f2c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f2c6:	f103 030c 	add.w	r3, r3, #12
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800f2d0:	2100      	movs	r1, #0
 800f2d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			   for (int i=0;i < xLen; ++i) {
 800f2d6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f2da:	f103 030c 	add.w	r3, r3, #12
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f2e6:	f102 020c 	add.w	r2, r2, #12
 800f2ea:	6013      	str	r3, [r2, #0]
 800f2ec:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f2f0:	f103 030c 	add.w	r3, r3, #12
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f2fa:	f103 030c 	add.w	r3, r3, #12
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	429a      	cmp	r2, r3
 800f302:	dbbd      	blt.n	800f280 <StartSendUARTTask+0x2f8>
			   }
			   EmgInstance.SecondEmgBufferLen=0;
 800f304:	4bb0      	ldr	r3, [pc, #704]	@ (800f5c8 <StartSendUARTTask+0x640>)
 800f306:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f30a:	461a      	mov	r2, r3
 800f30c:	2300      	movs	r3, #0
 800f30e:	6353      	str	r3, [r2, #52]	@ 0x34
		  }
		  osSemaphoreRelease(ThreadStorage.SecondEmgSemaphoreHandle);
 800f310:	4bae      	ldr	r3, [pc, #696]	@ (800f5cc <StartSendUARTTask+0x644>)
 800f312:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800f316:	4618      	mov	r0, r3
 800f318:	f7f7 fc90 	bl	8006c3c <osSemaphoreRelease>
	  }
	  volumeSemaphoreVal = osSemaphoreAcquire(ThreadStorage.VolumeSemaphoreHandle, xFrequency/10);
 800f31c:	4bab      	ldr	r3, [pc, #684]	@ (800f5cc <StartSendUARTTask+0x644>)
 800f31e:	f8d3 21dc 	ldr.w	r2, [r3, #476]	@ 0x1dc
 800f322:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f326:	f103 031c 	add.w	r3, r3, #28
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	49a8      	ldr	r1, [pc, #672]	@ (800f5d0 <StartSendUARTTask+0x648>)
 800f32e:	fba1 1303 	umull	r1, r3, r1, r3
 800f332:	08db      	lsrs	r3, r3, #3
 800f334:	4619      	mov	r1, r3
 800f336:	4610      	mov	r0, r2
 800f338:	f7f7 fc2e 	bl	8006b98 <osSemaphoreAcquire>
 800f33c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f340:	f103 0308 	add.w	r3, r3, #8
 800f344:	6018      	str	r0, [r3, #0]
	  if(volumeSemaphoreVal==osOK){
 800f346:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f34a:	f103 0308 	add.w	r3, r3, #8
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	f040 80ba 	bne.w	800f4ca <StartSendUARTTask+0x542>
		  int xLen=LoadCellInstance.VolumeBufferLen;
 800f356:	4b9f      	ldr	r3, [pc, #636]	@ (800f5d4 <StartSendUARTTask+0x64c>)
 800f358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f362:	f102 0204 	add.w	r2, r2, #4
 800f366:	6013      	str	r3, [r2, #0]
		  if(xLen>0){
 800f368:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f36c:	f103 0304 	add.w	r3, r3, #4
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	f340 80a3 	ble.w	800f4be <StartSendUARTTask+0x536>
			  allData[totalLen]=3;
 800f378:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f37c:	f103 0316 	add.w	r3, r3, #22
 800f380:	881b      	ldrh	r3, [r3, #0]
 800f382:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f386:	4413      	add	r3, r2
 800f388:	2203      	movs	r2, #3
 800f38a:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f38e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f392:	f103 0316 	add.w	r3, r3, #22
 800f396:	881b      	ldrh	r3, [r3, #0]
 800f398:	3301      	adds	r3, #1
 800f39a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f39e:	f102 0216 	add.w	r2, r2, #22
 800f3a2:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=(xLen & 0xFF00)>>8;
 800f3a4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f3a8:	f103 0304 	add.w	r3, r3, #4
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	121a      	asrs	r2, r3, #8
 800f3b0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f3b4:	f103 0316 	add.w	r3, r3, #22
 800f3b8:	881b      	ldrh	r3, [r3, #0]
 800f3ba:	b2d2      	uxtb	r2, r2
 800f3bc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f3c0:	440b      	add	r3, r1
 800f3c2:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f3c6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f3ca:	f103 0316 	add.w	r3, r3, #22
 800f3ce:	881b      	ldrh	r3, [r3, #0]
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f3d6:	f102 0216 	add.w	r2, r2, #22
 800f3da:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=xLen & 0xFF;
 800f3dc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f3e0:	f103 0316 	add.w	r3, r3, #22
 800f3e4:	881b      	ldrh	r3, [r3, #0]
 800f3e6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f3ea:	f102 0204 	add.w	r2, r2, #4
 800f3ee:	6812      	ldr	r2, [r2, #0]
 800f3f0:	b2d2      	uxtb	r2, r2
 800f3f2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f3f6:	440b      	add	r3, r1
 800f3f8:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f3fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f400:	f103 0316 	add.w	r3, r3, #22
 800f404:	881b      	ldrh	r3, [r3, #0]
 800f406:	3301      	adds	r3, #1
 800f408:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f40c:	f102 0216 	add.w	r2, r2, #22
 800f410:	8013      	strh	r3, [r2, #0]
			   for (int i=0;i < xLen; ++i) {
 800f412:	2300      	movs	r3, #0
 800f414:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f418:	f102 0208 	add.w	r2, r2, #8
 800f41c:	6013      	str	r3, [r2, #0]
 800f41e:	e03c      	b.n	800f49a <StartSendUARTTask+0x512>
				   allData[totalLen]=LoadCellInstance.VolumeBuffer[i];
 800f420:	4a6c      	ldr	r2, [pc, #432]	@ (800f5d4 <StartSendUARTTask+0x64c>)
 800f422:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f426:	f103 0308 	add.w	r3, r3, #8
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	4413      	add	r3, r2
 800f430:	3304      	adds	r3, #4
 800f432:	edd3 7a00 	vldr	s15, [r3]
 800f436:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f43a:	f103 0316 	add.w	r3, r3, #22
 800f43e:	881b      	ldrh	r3, [r3, #0]
 800f440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f444:	edc7 7a00 	vstr	s15, [r7]
 800f448:	783a      	ldrb	r2, [r7, #0]
 800f44a:	b2d2      	uxtb	r2, r2
 800f44c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f450:	440b      	add	r3, r1
 800f452:	f803 2c4c 	strb.w	r2, [r3, #-76]
				   totalLen++;
 800f456:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f45a:	f103 0316 	add.w	r3, r3, #22
 800f45e:	881b      	ldrh	r3, [r3, #0]
 800f460:	3301      	adds	r3, #1
 800f462:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f466:	f102 0216 	add.w	r2, r2, #22
 800f46a:	8013      	strh	r3, [r2, #0]
				   LoadCellInstance.VolumeBuffer[i]=0;
 800f46c:	4a59      	ldr	r2, [pc, #356]	@ (800f5d4 <StartSendUARTTask+0x64c>)
 800f46e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f472:	f103 0308 	add.w	r3, r3, #8
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	009b      	lsls	r3, r3, #2
 800f47a:	4413      	add	r3, r2
 800f47c:	3304      	adds	r3, #4
 800f47e:	f04f 0200 	mov.w	r2, #0
 800f482:	601a      	str	r2, [r3, #0]
			   for (int i=0;i < xLen; ++i) {
 800f484:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f488:	f103 0308 	add.w	r3, r3, #8
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	3301      	adds	r3, #1
 800f490:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f494:	f102 0208 	add.w	r2, r2, #8
 800f498:	6013      	str	r3, [r2, #0]
 800f49a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f49e:	f103 0308 	add.w	r3, r3, #8
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f4a8:	f103 0304 	add.w	r3, r3, #4
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	dbb6      	blt.n	800f420 <StartSendUARTTask+0x498>
			   }
			   LoadCellInstance.VolumeBufferLen=0;
 800f4b2:	4b48      	ldr	r3, [pc, #288]	@ (800f5d4 <StartSendUARTTask+0x64c>)
 800f4b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	6053      	str	r3, [r2, #4]
		  }
		  osSemaphoreRelease(ThreadStorage.VolumeSemaphoreHandle);
 800f4be:	4b43      	ldr	r3, [pc, #268]	@ (800f5cc <StartSendUARTTask+0x644>)
 800f4c0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7f7 fbb9 	bl	8006c3c <osSemaphoreRelease>
	  }
	  flowSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FlowSemaphoreHandle, xFrequency/10);
 800f4ca:	4b40      	ldr	r3, [pc, #256]	@ (800f5cc <StartSendUARTTask+0x644>)
 800f4cc:	f8d3 21d8 	ldr.w	r2, [r3, #472]	@ 0x1d8
 800f4d0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f4d4:	f103 031c 	add.w	r3, r3, #28
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	493d      	ldr	r1, [pc, #244]	@ (800f5d0 <StartSendUARTTask+0x648>)
 800f4dc:	fba1 1303 	umull	r1, r3, r1, r3
 800f4e0:	08db      	lsrs	r3, r3, #3
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	4610      	mov	r0, r2
 800f4e6:	f7f7 fb57 	bl	8006b98 <osSemaphoreAcquire>
 800f4ea:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f4ee:	6018      	str	r0, [r3, #0]
	  if(flowSemaphoreVal==osOK){
 800f4f0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	f040 80c5 	bne.w	800f686 <StartSendUARTTask+0x6fe>
		  int xLen=LoadCellInstance.FlowBufferLen;
 800f4fc:	4b35      	ldr	r3, [pc, #212]	@ (800f5d4 <StartSendUARTTask+0x64c>)
 800f4fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f502:	689b      	ldr	r3, [r3, #8]
 800f504:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800f508:	f102 021c 	add.w	r2, r2, #28
 800f50c:	6013      	str	r3, [r2, #0]
		  if(xLen>0){
 800f50e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f512:	f103 031c 	add.w	r3, r3, #28
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f340 80ae 	ble.w	800f67a <StartSendUARTTask+0x6f2>
			  allData[totalLen]=4;
 800f51e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f522:	f103 0316 	add.w	r3, r3, #22
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f52c:	4413      	add	r3, r2
 800f52e:	2204      	movs	r2, #4
 800f530:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f534:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f538:	f103 0316 	add.w	r3, r3, #22
 800f53c:	881b      	ldrh	r3, [r3, #0]
 800f53e:	3301      	adds	r3, #1
 800f540:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f544:	f102 0216 	add.w	r2, r2, #22
 800f548:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=(xLen & 0xFF00)>>8;
 800f54a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f54e:	f103 031c 	add.w	r3, r3, #28
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	121a      	asrs	r2, r3, #8
 800f556:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f55a:	f103 0316 	add.w	r3, r3, #22
 800f55e:	881b      	ldrh	r3, [r3, #0]
 800f560:	b2d2      	uxtb	r2, r2
 800f562:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f566:	440b      	add	r3, r1
 800f568:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f56c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f570:	f103 0316 	add.w	r3, r3, #22
 800f574:	881b      	ldrh	r3, [r3, #0]
 800f576:	3301      	adds	r3, #1
 800f578:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f57c:	f102 0216 	add.w	r2, r2, #22
 800f580:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=xLen & 0xFF;
 800f582:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f586:	f103 0316 	add.w	r3, r3, #22
 800f58a:	881b      	ldrh	r3, [r3, #0]
 800f58c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800f590:	f102 021c 	add.w	r2, r2, #28
 800f594:	6812      	ldr	r2, [r2, #0]
 800f596:	b2d2      	uxtb	r2, r2
 800f598:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f59c:	440b      	add	r3, r1
 800f59e:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f5a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f5a6:	f103 0316 	add.w	r3, r3, #22
 800f5aa:	881b      	ldrh	r3, [r3, #0]
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f5b2:	f102 0216 	add.w	r2, r2, #22
 800f5b6:	8013      	strh	r3, [r2, #0]
			   for (int i=0;i < xLen; ++i) {
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f5be:	f102 0204 	add.w	r2, r2, #4
 800f5c2:	6013      	str	r3, [r2, #0]
 800f5c4:	e047      	b.n	800f656 <StartSendUARTTask+0x6ce>
 800f5c6:	bf00      	nop
 800f5c8:	20005084 	.word	0x20005084
 800f5cc:	2000913c 	.word	0x2000913c
 800f5d0:	cccccccd 	.word	0xcccccccd
 800f5d4:	200070c8 	.word	0x200070c8
				   allData[totalLen]=LoadCellInstance.FlowBuffer[i];
 800f5d8:	4ab7      	ldr	r2, [pc, #732]	@ (800f8b8 <StartSendUARTTask+0x930>)
 800f5da:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f5de:	f103 0304 	add.w	r3, r3, #4
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	4413      	add	r3, r2
 800f5ec:	edd3 7a00 	vldr	s15, [r3]
 800f5f0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f5f4:	f103 0316 	add.w	r3, r3, #22
 800f5f8:	881b      	ldrh	r3, [r3, #0]
 800f5fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5fe:	edc7 7a00 	vstr	s15, [r7]
 800f602:	783a      	ldrb	r2, [r7, #0]
 800f604:	b2d2      	uxtb	r2, r2
 800f606:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f60a:	440b      	add	r3, r1
 800f60c:	f803 2c4c 	strb.w	r2, [r3, #-76]
				   totalLen++;
 800f610:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f614:	f103 0316 	add.w	r3, r3, #22
 800f618:	881b      	ldrh	r3, [r3, #0]
 800f61a:	3301      	adds	r3, #1
 800f61c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f620:	f102 0216 	add.w	r2, r2, #22
 800f624:	8013      	strh	r3, [r2, #0]
				   LoadCellInstance.FlowBuffer[i]=0;
 800f626:	4aa4      	ldr	r2, [pc, #656]	@ (800f8b8 <StartSendUARTTask+0x930>)
 800f628:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f62c:	f103 0304 	add.w	r3, r3, #4
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	4413      	add	r3, r2
 800f63a:	f04f 0200 	mov.w	r2, #0
 800f63e:	601a      	str	r2, [r3, #0]
			   for (int i=0;i < xLen; ++i) {
 800f640:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f644:	f103 0304 	add.w	r3, r3, #4
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	3301      	adds	r3, #1
 800f64c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f650:	f102 0204 	add.w	r2, r2, #4
 800f654:	6013      	str	r3, [r2, #0]
 800f656:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f65a:	f103 0304 	add.w	r3, r3, #4
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f664:	f103 031c 	add.w	r3, r3, #28
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	dbb4      	blt.n	800f5d8 <StartSendUARTTask+0x650>
			   }
			   LoadCellInstance.FlowBufferLen=0;
 800f66e:	4b92      	ldr	r3, [pc, #584]	@ (800f8b8 <StartSendUARTTask+0x930>)
 800f670:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f674:	461a      	mov	r2, r3
 800f676:	2300      	movs	r3, #0
 800f678:	6093      	str	r3, [r2, #8]
		  }
		  osSemaphoreRelease(ThreadStorage.FlowSemaphoreHandle);
 800f67a:	4b90      	ldr	r3, [pc, #576]	@ (800f8bc <StartSendUARTTask+0x934>)
 800f67c:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800f680:	4618      	mov	r0, r3
 800f682:	f7f7 fadb 	bl	8006c3c <osSemaphoreRelease>
	  }
	  if(totalLen>11){
 800f686:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f68a:	f103 0316 	add.w	r3, r3, #22
 800f68e:	881b      	ldrh	r3, [r3, #0]
 800f690:	2b0b      	cmp	r3, #11
 800f692:	f240 8176 	bls.w	800f982 <StartSendUARTTask+0x9fa>
		  uint16_t len=totalLen-3;
 800f696:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f69a:	f103 0316 	add.w	r3, r3, #22
 800f69e:	881b      	ldrh	r3, [r3, #0]
 800f6a0:	3b03      	subs	r3, #3
 800f6a2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800f6a6:	f102 021a 	add.w	r2, r2, #26
 800f6aa:	8013      	strh	r3, [r2, #0]
		  allData[0]=3;
 800f6ac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6b0:	2203      	movs	r2, #3
 800f6b2:	f803 2c4c 	strb.w	r2, [r3, #-76]
		  allData[1]=(len & 0xFF00)>>8;
 800f6b6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f6ba:	f103 031a 	add.w	r3, r3, #26
 800f6be:	881b      	ldrh	r3, [r3, #0]
 800f6c0:	0a1b      	lsrs	r3, r3, #8
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	b2da      	uxtb	r2, r3
 800f6c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6ca:	f803 2c4b 	strb.w	r2, [r3, #-75]
		  allData[2]=len & 0xFF;
 800f6ce:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f6d2:	f103 031a 	add.w	r3, r3, #26
 800f6d6:	881b      	ldrh	r3, [r3, #0]
 800f6d8:	b2da      	uxtb	r2, r3
 800f6da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6de:	f803 2c4a 	strb.w	r2, [r3, #-74]
		  allData[3]=(SystemConfig.PocketIndex & 0xFF000000) >> 24;
 800f6e2:	4b77      	ldr	r3, [pc, #476]	@ (800f8c0 <StartSendUARTTask+0x938>)
 800f6e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6e6:	0e1b      	lsrs	r3, r3, #24
 800f6e8:	b2da      	uxtb	r2, r3
 800f6ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6ee:	f803 2c49 	strb.w	r2, [r3, #-73]
		  allData[4]=(SystemConfig.PocketIndex & 0x00FF0000) >> 16;
 800f6f2:	4b73      	ldr	r3, [pc, #460]	@ (800f8c0 <StartSendUARTTask+0x938>)
 800f6f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6f6:	141b      	asrs	r3, r3, #16
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6fe:	f803 2c48 	strb.w	r2, [r3, #-72]
		  allData[5]=(SystemConfig.PocketIndex & 0x0000FF00) >> 8;
 800f702:	4b6f      	ldr	r3, [pc, #444]	@ (800f8c0 <StartSendUARTTask+0x938>)
 800f704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f706:	121b      	asrs	r3, r3, #8
 800f708:	b2da      	uxtb	r2, r3
 800f70a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f70e:	f803 2c47 	strb.w	r2, [r3, #-71]
		  allData[6]=(SystemConfig.PocketIndex & 0x000000FF);
 800f712:	4b6b      	ldr	r3, [pc, #428]	@ (800f8c0 <StartSendUARTTask+0x938>)
 800f714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f716:	b2da      	uxtb	r2, r3
 800f718:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f71c:	f803 2c46 	strb.w	r2, [r3, #-70]
		  uint32_t time=(StartTimerTicks-SystemConfig.StartTestTime)/10;
 800f720:	4b68      	ldr	r3, [pc, #416]	@ (800f8c4 <StartSendUARTTask+0x93c>)
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	4b66      	ldr	r3, [pc, #408]	@ (800f8c0 <StartSendUARTTask+0x938>)
 800f726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f728:	1ad3      	subs	r3, r2, r3
 800f72a:	4a67      	ldr	r2, [pc, #412]	@ (800f8c8 <StartSendUARTTask+0x940>)
 800f72c:	fba2 2303 	umull	r2, r3, r2, r3
 800f730:	08db      	lsrs	r3, r3, #3
 800f732:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800f736:	f102 0214 	add.w	r2, r2, #20
 800f73a:	6013      	str	r3, [r2, #0]
		  allData[7]=(time & 0xFF000000) >> 24;
 800f73c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f740:	f103 0314 	add.w	r3, r3, #20
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	0e1b      	lsrs	r3, r3, #24
 800f748:	b2da      	uxtb	r2, r3
 800f74a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f74e:	f803 2c45 	strb.w	r2, [r3, #-69]
		  allData[8]=(time & 0x00FF0000) >> 16;
 800f752:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f756:	f103 0314 	add.w	r3, r3, #20
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	0c1b      	lsrs	r3, r3, #16
 800f75e:	b2da      	uxtb	r2, r3
 800f760:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f764:	f803 2c44 	strb.w	r2, [r3, #-68]
		  allData[9]=(time & 0x0000FF00) >> 8;
 800f768:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f76c:	f103 0314 	add.w	r3, r3, #20
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	0a1b      	lsrs	r3, r3, #8
 800f774:	b2da      	uxtb	r2, r3
 800f776:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f77a:	f803 2c43 	strb.w	r2, [r3, #-67]
		  allData[10]=(time & 0x000000FF);
 800f77e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f782:	f103 0314 	add.w	r3, r3, #20
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f78e:	f803 2c42 	strb.w	r2, [r3, #-66]
		  uint8_t status=0;
 800f792:	2300      	movs	r3, #0
 800f794:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f798:	f102 0203 	add.w	r2, r2, #3
 800f79c:	7013      	strb	r3, [r2, #0]
		  if(HasCalibration()){
 800f79e:	f001 f8d1 	bl	8010944 <HasCalibration>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	bf14      	ite	ne
 800f7a8:	2301      	movne	r3, #1
 800f7aa:	2300      	moveq	r3, #0
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d00a      	beq.n	800f7c8 <StartSendUARTTask+0x840>
			  status+=1;
 800f7b2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f7b6:	f103 0303 	add.w	r3, r3, #3
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f7c2:	f102 0203 	add.w	r2, r2, #3
 800f7c6:	7013      	strb	r3, [r2, #0]
		  }
		  if(HasLoadcell(false)){
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	f001 f8db 	bl	8010984 <HasLoadcell>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	bf14      	ite	ne
 800f7d4:	2301      	movne	r3, #1
 800f7d6:	2300      	moveq	r3, #0
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00a      	beq.n	800f7f4 <StartSendUARTTask+0x86c>
			  status+=2;
 800f7de:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f7e2:	f103 0303 	add.w	r3, r3, #3
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	3302      	adds	r3, #2
 800f7ea:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f7ee:	f102 0203 	add.w	r2, r2, #3
 800f7f2:	7013      	strb	r3, [r2, #0]
		  }
		  if(HasFirstEmg(false)){
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	f001 f8ed 	bl	80109d4 <HasFirstEmg>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	bf14      	ite	ne
 800f800:	2301      	movne	r3, #1
 800f802:	2300      	moveq	r3, #0
 800f804:	b2db      	uxtb	r3, r3
 800f806:	2b00      	cmp	r3, #0
 800f808:	d00a      	beq.n	800f820 <StartSendUARTTask+0x898>
			  status+=4;
 800f80a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f80e:	f103 0303 	add.w	r3, r3, #3
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	3304      	adds	r3, #4
 800f816:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f81a:	f102 0203 	add.w	r2, r2, #3
 800f81e:	7013      	strb	r3, [r2, #0]
		  }
		  if(HasSecondEmg(false)){
 800f820:	2000      	movs	r0, #0
 800f822:	f001 f8f7 	bl	8010a14 <HasSecondEmg>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	bf14      	ite	ne
 800f82c:	2301      	movne	r3, #1
 800f82e:	2300      	moveq	r3, #0
 800f830:	b2db      	uxtb	r3, r3
 800f832:	2b00      	cmp	r3, #0
 800f834:	d00a      	beq.n	800f84c <StartSendUARTTask+0x8c4>
			  status+=8;
 800f836:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f83a:	f103 0303 	add.w	r3, r3, #3
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	3308      	adds	r3, #8
 800f842:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f846:	f102 0203 	add.w	r2, r2, #3
 800f84a:	7013      	strb	r3, [r2, #0]
		  }
		  allData[11]=status;
 800f84c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f850:	461a      	mov	r2, r3
 800f852:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f856:	f103 0303 	add.w	r3, r3, #3
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	f802 3c41 	strb.w	r3, [r2, #-65]
		  if(SystemConfig.IsStartTest){
 800f860:	4b17      	ldr	r3, [pc, #92]	@ (800f8c0 <StartSendUARTTask+0x938>)
 800f862:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f866:	2b00      	cmp	r3, #0
 800f868:	f000 8086 	beq.w	800f978 <StartSendUARTTask+0x9f0>
			  if(SystemConfig.StartHandleSeconds>0&&SystemConfig.StartHandleSeconds*1000<time&&LoadCellInstance.IsFirstHandle==false){
 800f86c:	4b14      	ldr	r3, [pc, #80]	@ (800f8c0 <StartSendUARTTask+0x938>)
 800f86e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f872:	2b00      	cmp	r3, #0
 800f874:	d019      	beq.n	800f8aa <StartSendUARTTask+0x922>
 800f876:	4b12      	ldr	r3, [pc, #72]	@ (800f8c0 <StartSendUARTTask+0x938>)
 800f878:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f87c:	461a      	mov	r2, r3
 800f87e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f882:	fb02 f303 	mul.w	r3, r2, r3
 800f886:	461a      	mov	r2, r3
 800f888:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f88c:	f103 0314 	add.w	r3, r3, #20
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	4293      	cmp	r3, r2
 800f894:	d909      	bls.n	800f8aa <StartSendUARTTask+0x922>
 800f896:	4b08      	ldr	r3, [pc, #32]	@ (800f8b8 <StartSendUARTTask+0x930>)
 800f898:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f89c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d101      	bne.n	800f8aa <StartSendUARTTask+0x922>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e000      	b.n	800f8ac <StartSendUARTTask+0x924>
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00f      	beq.n	800f8d0 <StartSendUARTTask+0x948>
				  //SystemConfig.IsInternalClean=true;
				  //CommunicationInstance.StopTest(5000);
				  CommunicationInstance.cancelTest();
 800f8b0:	4806      	ldr	r0, [pc, #24]	@ (800f8cc <StartSendUARTTask+0x944>)
 800f8b2:	f7fb fe39 	bl	800b528 <_ZN13Communication10cancelTestEv>
				continue;
 800f8b6:	e070      	b.n	800f99a <StartSendUARTTask+0xa12>
 800f8b8:	200070c8 	.word	0x200070c8
 800f8bc:	2000913c 	.word	0x2000913c
 800f8c0:	2000932c 	.word	0x2000932c
 800f8c4:	200000cc 	.word	0x200000cc
 800f8c8:	cccccccd 	.word	0xcccccccd
 800f8cc:	20009100 	.word	0x20009100
			  }
			  if(SystemConfig.WaitAfterProcessSeconds>0&&SystemConfig.WaitAfterProcessSeconds*10000<StartTimerTicks-LoadCellInstance.LastHandleProcessTime&&LoadCellInstance.IsFirstHandle==true){
 800f8d0:	4b33      	ldr	r3, [pc, #204]	@ (800f9a0 <StartSendUARTTask+0xa18>)
 800f8d2:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d01b      	beq.n	800f912 <StartSendUARTTask+0x98a>
 800f8da:	4b31      	ldr	r3, [pc, #196]	@ (800f9a0 <StartSendUARTTask+0xa18>)
 800f8dc:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f8e6:	fb02 f303 	mul.w	r3, r2, r3
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	4b2d      	ldr	r3, [pc, #180]	@ (800f9a4 <StartSendUARTTask+0xa1c>)
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	4b2d      	ldr	r3, [pc, #180]	@ (800f9a8 <StartSendUARTTask+0xa20>)
 800f8f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f8f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8f8:	1ad3      	subs	r3, r2, r3
 800f8fa:	4299      	cmp	r1, r3
 800f8fc:	d209      	bcs.n	800f912 <StartSendUARTTask+0x98a>
 800f8fe:	4b2a      	ldr	r3, [pc, #168]	@ (800f9a8 <StartSendUARTTask+0xa20>)
 800f900:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f904:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d101      	bne.n	800f912 <StartSendUARTTask+0x98a>
 800f90e:	2301      	movs	r3, #1
 800f910:	e000      	b.n	800f914 <StartSendUARTTask+0x98c>
 800f912:	2300      	movs	r3, #0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d009      	beq.n	800f92c <StartSendUARTTask+0x9a4>
				  SystemConfig.IsInternalClean=true;
 800f918:	4b21      	ldr	r3, [pc, #132]	@ (800f9a0 <StartSendUARTTask+0xa18>)
 800f91a:	2201      	movs	r2, #1
 800f91c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
				  CommunicationInstance.StopTest(5000);
 800f920:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f924:	4821      	ldr	r0, [pc, #132]	@ (800f9ac <StartSendUARTTask+0xa24>)
 800f926:	f7fb fd75 	bl	800b414 <_ZN13Communication8StopTestEt>
				  //CommunicationInstance.cancelTest();
				continue;
 800f92a:	e036      	b.n	800f99a <StartSendUARTTask+0xa12>
			  }
			  communicationSemaphoreVal = osSemaphoreAcquire(ThreadStorage.CommunicationSemaphoreHandle, 1000);
 800f92c:	4b20      	ldr	r3, [pc, #128]	@ (800f9b0 <StartSendUARTTask+0xa28>)
 800f92e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800f932:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f936:	4618      	mov	r0, r3
 800f938:	f7f7 f92e 	bl	8006b98 <osSemaphoreAcquire>
 800f93c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f940:	f103 0310 	add.w	r3, r3, #16
 800f944:	6018      	str	r0, [r3, #0]
			  if(communicationSemaphoreVal==osOK){
 800f946:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f94a:	f103 0310 	add.w	r3, r3, #16
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d111      	bne.n	800f978 <StartSendUARTTask+0x9f0>
				  WriteUart(allData,totalLen);
 800f954:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f958:	f103 0316 	add.w	r3, r3, #22
 800f95c:	881a      	ldrh	r2, [r3, #0]
 800f95e:	f107 0318 	add.w	r3, r7, #24
 800f962:	3b0c      	subs	r3, #12
 800f964:	4611      	mov	r1, r2
 800f966:	4618      	mov	r0, r3
 800f968:	f7ff fae4 	bl	800ef34 <WriteUart>
				  osSemaphoreRelease(ThreadStorage.CommunicationSemaphoreHandle);
 800f96c:	4b10      	ldr	r3, [pc, #64]	@ (800f9b0 <StartSendUARTTask+0xa28>)
 800f96e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800f972:	4618      	mov	r0, r3
 800f974:	f7f7 f962 	bl	8006c3c <osSemaphoreRelease>
			  }
		  }
		SystemConfig.PocketIndex++;
 800f978:	4b09      	ldr	r3, [pc, #36]	@ (800f9a0 <StartSendUARTTask+0xa18>)
 800f97a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f97c:	3301      	adds	r3, #1
 800f97e:	4a08      	ldr	r2, [pc, #32]	@ (800f9a0 <StartSendUARTTask+0xa18>)
 800f980:	66d3      	str	r3, [r2, #108]	@ 0x6c
	  }
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800f982:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f986:	f103 030c 	add.w	r3, r3, #12
 800f98a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f98e:	f102 021c 	add.w	r2, r2, #28
 800f992:	6811      	ldr	r1, [r2, #0]
 800f994:	4618      	mov	r0, r3
 800f996:	f7f8 fcc3 	bl	8008320 <vTaskDelayUntil>
  }
 800f99a:	f7ff bb12 	b.w	800efc2 <StartSendUARTTask+0x3a>
 800f99e:	bf00      	nop
 800f9a0:	2000932c 	.word	0x2000932c
 800f9a4:	200000cc 	.word	0x200000cc
 800f9a8:	200070c8 	.word	0x200070c8
 800f9ac:	20009100 	.word	0x20009100
 800f9b0:	2000913c 	.word	0x2000913c

0800f9b4 <StartFirstEmgTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFirstEmgTask */
void StartFirstEmgTask(void *argument)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.FirstEmgPerSecond) / portTICK_PERIOD_MS;
 800f9bc:	4b17      	ldr	r3, [pc, #92]	@ (800fa1c <StartFirstEmgTask+0x68>)
 800f9be:	785b      	ldrb	r3, [r3, #1]
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f9c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9ca:	60fb      	str	r3, [r7, #12]
	ThreadStorage.FirstEmgSemaphoreHandle = osSemaphoreNew(1, 1, &firstEmgSemaphore_attributes);
 800f9cc:	4a14      	ldr	r2, [pc, #80]	@ (800fa20 <StartFirstEmgTask+0x6c>)
 800f9ce:	2101      	movs	r1, #1
 800f9d0:	2001      	movs	r0, #1
 800f9d2:	f7f7 f858 	bl	8006a86 <osSemaphoreNew>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	4a12      	ldr	r2, [pc, #72]	@ (800fa24 <StartFirstEmgTask+0x70>)
 800f9da:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
	osStatus_t emgSemaphoreVal;
	for(;;)
	{
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FirstEmgSemaphoreHandle, 1000);
 800f9de:	4b11      	ldr	r3, [pc, #68]	@ (800fa24 <StartFirstEmgTask+0x70>)
 800f9e0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800f9e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7f7 f8d5 	bl	8006b98 <osSemaphoreAcquire>
 800f9ee:	60b8      	str	r0, [r7, #8]
		if(emgSemaphoreVal==osOK){
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d1f3      	bne.n	800f9de <StartFirstEmgTask+0x2a>
			firstEmgCounter++;
 800f9f6:	4b0c      	ldr	r3, [pc, #48]	@ (800fa28 <StartFirstEmgTask+0x74>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	4a0a      	ldr	r2, [pc, #40]	@ (800fa28 <StartFirstEmgTask+0x74>)
 800f9fe:	6013      	str	r3, [r2, #0]
			EmgInstance.FirstEmgRead(true);
 800fa00:	2101      	movs	r1, #1
 800fa02:	480a      	ldr	r0, [pc, #40]	@ (800fa2c <StartFirstEmgTask+0x78>)
 800fa04:	f7fb fff6 	bl	800b9f4 <_ZN3Emg12FirstEmgReadEb>
			osSemaphoreRelease(ThreadStorage.FirstEmgSemaphoreHandle);
 800fa08:	4b06      	ldr	r3, [pc, #24]	@ (800fa24 <StartFirstEmgTask+0x70>)
 800fa0a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7f7 f914 	bl	8006c3c <osSemaphoreRelease>
			vTaskDelay( xDelay );
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f7f8 fd03 	bl	8008420 <vTaskDelay>
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FirstEmgSemaphoreHandle, 1000);
 800fa1a:	e7e0      	b.n	800f9de <StartFirstEmgTask+0x2a>
 800fa1c:	2000932c 	.word	0x2000932c
 800fa20:	08011d54 	.word	0x08011d54
 800fa24:	2000913c 	.word	0x2000913c
 800fa28:	20005074 	.word	0x20005074
 800fa2c:	20005084 	.word	0x20005084

0800fa30 <StartReadFirstEmgTask>:
	}
  /* USER CODE END 5 */
}

void StartReadFirstEmgTask(void *argument)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b08a      	sub	sp, #40	@ 0x28
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.FirstEmgPerSecond) / portTICK_PERIOD_MS;
 800fa38:	4b32      	ldr	r3, [pc, #200]	@ (800fb04 <StartReadFirstEmgTask+0xd4>)
 800fa3a:	785b      	ldrb	r3, [r3, #1]
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa42:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa46:	627b      	str	r3, [r7, #36]	@ 0x24
	ThreadStorage.FirstEmgSemaphoreHandle = osSemaphoreNew(1, 1, &firstEmgSemaphore_attributes);
 800fa48:	4a2f      	ldr	r2, [pc, #188]	@ (800fb08 <StartReadFirstEmgTask+0xd8>)
 800fa4a:	2101      	movs	r1, #1
 800fa4c:	2001      	movs	r0, #1
 800fa4e:	f7f7 f81a 	bl	8006a86 <osSemaphoreNew>
 800fa52:	4603      	mov	r3, r0
 800fa54:	4a2d      	ldr	r2, [pc, #180]	@ (800fb0c <StartReadFirstEmgTask+0xdc>)
 800fa56:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
	osStatus_t emgSemaphoreVal;
	uint8_t data[8];
	SystemConfig.StartTestTime=StartTimerTicks;
 800fa5a:	4b2d      	ldr	r3, [pc, #180]	@ (800fb10 <StartReadFirstEmgTask+0xe0>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	4a29      	ldr	r2, [pc, #164]	@ (800fb04 <StartReadFirstEmgTask+0xd4>)
 800fa60:	6313      	str	r3, [r2, #48]	@ 0x30
	for(;;)
	{
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FirstEmgSemaphoreHandle, 1000);
 800fa62:	4b2a      	ldr	r3, [pc, #168]	@ (800fb0c <StartReadFirstEmgTask+0xdc>)
 800fa64:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800fa68:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7f7 f893 	bl	8006b98 <osSemaphoreAcquire>
 800fa72:	6238      	str	r0, [r7, #32]
		if(emgSemaphoreVal==osOK){
 800fa74:	6a3b      	ldr	r3, [r7, #32]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d140      	bne.n	800fafc <StartReadFirstEmgTask+0xcc>
			EmgInstance.FirstEmgRead(false);
 800fa7a:	2100      	movs	r1, #0
 800fa7c:	4825      	ldr	r0, [pc, #148]	@ (800fb14 <StartReadFirstEmgTask+0xe4>)
 800fa7e:	f7fb ffb9 	bl	800b9f4 <_ZN3Emg12FirstEmgReadEb>
			float32_t emgValue=EmgInstance.FirstEmgValue;
 800fa82:	4b24      	ldr	r3, [pc, #144]	@ (800fb14 <StartReadFirstEmgTask+0xe4>)
 800fa84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa86:	ee07 3a90 	vmov	s15, r3
 800fa8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa8e:	edc7 7a03 	vstr	s15, [r7, #12]
			uint8_t *emgArray;
			emgArray = (uint8_t*)(&emgValue );
 800fa92:	f107 030c 	add.w	r3, r7, #12
 800fa96:	61fb      	str	r3, [r7, #28]
			uint32_t time=(StartTimerTicks-SystemConfig.StartTestTime)/10;
 800fa98:	4b1d      	ldr	r3, [pc, #116]	@ (800fb10 <StartReadFirstEmgTask+0xe0>)
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	4b19      	ldr	r3, [pc, #100]	@ (800fb04 <StartReadFirstEmgTask+0xd4>)
 800fa9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faa0:	1ad3      	subs	r3, r2, r3
 800faa2:	4a1d      	ldr	r2, [pc, #116]	@ (800fb18 <StartReadFirstEmgTask+0xe8>)
 800faa4:	fba2 2303 	umull	r2, r3, r2, r3
 800faa8:	08db      	lsrs	r3, r3, #3
 800faaa:	61bb      	str	r3, [r7, #24]
			data[0]=(time & 0xFF000000) >> 24;
 800faac:	69bb      	ldr	r3, [r7, #24]
 800faae:	0e1b      	lsrs	r3, r3, #24
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	743b      	strb	r3, [r7, #16]
			data[1]=(time & 0x00FF0000) >> 16;
 800fab4:	69bb      	ldr	r3, [r7, #24]
 800fab6:	0c1b      	lsrs	r3, r3, #16
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	747b      	strb	r3, [r7, #17]
			data[2]=(time & 0x0000FF00) >> 8;
 800fabc:	69bb      	ldr	r3, [r7, #24]
 800fabe:	0a1b      	lsrs	r3, r3, #8
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	74bb      	strb	r3, [r7, #18]
			data[3]=(time & 0x000000FF);
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	74fb      	strb	r3, [r7, #19]
			data[4]=emgArray[0];
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	753b      	strb	r3, [r7, #20]
			data[5]=emgArray[1];
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	785b      	ldrb	r3, [r3, #1]
 800fad4:	757b      	strb	r3, [r7, #21]
			data[6]=emgArray[2];
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	789b      	ldrb	r3, [r3, #2]
 800fada:	75bb      	strb	r3, [r7, #22]
			data[7]=emgArray[3];
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	78db      	ldrb	r3, [r3, #3]
 800fae0:	75fb      	strb	r3, [r7, #23]
			//WriteUart(emgArray, 4);
			SuccessDataResult(0, SuccessDataType::SD_FirstEmg, data, 8);
 800fae2:	f107 0210 	add.w	r2, r7, #16
 800fae6:	2308      	movs	r3, #8
 800fae8:	210a      	movs	r1, #10
 800faea:	2000      	movs	r0, #0
 800faec:	f7ff f92e 	bl	800ed4c <SuccessDataResult>
			osSemaphoreRelease(ThreadStorage.FirstEmgSemaphoreHandle);
 800faf0:	4b06      	ldr	r3, [pc, #24]	@ (800fb0c <StartReadFirstEmgTask+0xdc>)
 800faf2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7f7 f8a0 	bl	8006c3c <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800fafc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fafe:	f7f8 fc8f 	bl	8008420 <vTaskDelay>
	}
 800fb02:	e7ae      	b.n	800fa62 <StartReadFirstEmgTask+0x32>
 800fb04:	2000932c 	.word	0x2000932c
 800fb08:	08011d54 	.word	0x08011d54
 800fb0c:	2000913c 	.word	0x2000913c
 800fb10:	200000cc 	.word	0x200000cc
 800fb14:	20005084 	.word	0x20005084
 800fb18:	cccccccd 	.word	0xcccccccd

0800fb1c <StartSecondEmgTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSecondEmgTask */
void StartSecondEmgTask(void *argument)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.SecondEmgPerSecond) / portTICK_PERIOD_MS;
 800fb24:	4b17      	ldr	r3, [pc, #92]	@ (800fb84 <StartSecondEmgTask+0x68>)
 800fb26:	789b      	ldrb	r3, [r3, #2]
 800fb28:	461a      	mov	r2, r3
 800fb2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb32:	60fb      	str	r3, [r7, #12]
	ThreadStorage.SecondEmgSemaphoreHandle = osSemaphoreNew(1, 1, &secondEmgSemaphore_attributes);
 800fb34:	4a14      	ldr	r2, [pc, #80]	@ (800fb88 <StartSecondEmgTask+0x6c>)
 800fb36:	2101      	movs	r1, #1
 800fb38:	2001      	movs	r0, #1
 800fb3a:	f7f6 ffa4 	bl	8006a86 <osSemaphoreNew>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	4a12      	ldr	r2, [pc, #72]	@ (800fb8c <StartSecondEmgTask+0x70>)
 800fb42:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
	osStatus_t emgSemaphoreVal;
	for(;;)
	{
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.SecondEmgSemaphoreHandle, 1000);
 800fb46:	4b11      	ldr	r3, [pc, #68]	@ (800fb8c <StartSecondEmgTask+0x70>)
 800fb48:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800fb4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7f7 f821 	bl	8006b98 <osSemaphoreAcquire>
 800fb56:	60b8      	str	r0, [r7, #8]
		if(emgSemaphoreVal==osOK){
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d10e      	bne.n	800fb7c <StartSecondEmgTask+0x60>
			secondEmgCounter++;
 800fb5e:	4b0c      	ldr	r3, [pc, #48]	@ (800fb90 <StartSecondEmgTask+0x74>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	3301      	adds	r3, #1
 800fb64:	4a0a      	ldr	r2, [pc, #40]	@ (800fb90 <StartSecondEmgTask+0x74>)
 800fb66:	6013      	str	r3, [r2, #0]
			EmgInstance.SecondEmgRead(true);
 800fb68:	2101      	movs	r1, #1
 800fb6a:	480a      	ldr	r0, [pc, #40]	@ (800fb94 <StartSecondEmgTask+0x78>)
 800fb6c:	f7fb ffba 	bl	800bae4 <_ZN3Emg13SecondEmgReadEb>
			osSemaphoreRelease(ThreadStorage.SecondEmgSemaphoreHandle);
 800fb70:	4b06      	ldr	r3, [pc, #24]	@ (800fb8c <StartSecondEmgTask+0x70>)
 800fb72:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7f7 f860 	bl	8006c3c <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f7f8 fc4f 	bl	8008420 <vTaskDelay>
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.SecondEmgSemaphoreHandle, 1000);
 800fb82:	e7e0      	b.n	800fb46 <StartSecondEmgTask+0x2a>
 800fb84:	2000932c 	.word	0x2000932c
 800fb88:	08011d64 	.word	0x08011d64
 800fb8c:	2000913c 	.word	0x2000913c
 800fb90:	20005078 	.word	0x20005078
 800fb94:	20005084 	.word	0x20005084

0800fb98 <StartReadSecondEmgTask>:
	}
  /* USER CODE END 5 */
}

void StartReadSecondEmgTask(void *argument)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b08a      	sub	sp, #40	@ 0x28
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.SecondEmgPerSecond) / portTICK_PERIOD_MS;
 800fba0:	4b32      	ldr	r3, [pc, #200]	@ (800fc6c <StartReadSecondEmgTask+0xd4>)
 800fba2:	789b      	ldrb	r3, [r3, #2]
 800fba4:	461a      	mov	r2, r3
 800fba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbae:	627b      	str	r3, [r7, #36]	@ 0x24
	ThreadStorage.SecondEmgSemaphoreHandle = osSemaphoreNew(1, 1, &secondEmgSemaphore_attributes);
 800fbb0:	4a2f      	ldr	r2, [pc, #188]	@ (800fc70 <StartReadSecondEmgTask+0xd8>)
 800fbb2:	2101      	movs	r1, #1
 800fbb4:	2001      	movs	r0, #1
 800fbb6:	f7f6 ff66 	bl	8006a86 <osSemaphoreNew>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	4a2d      	ldr	r2, [pc, #180]	@ (800fc74 <StartReadSecondEmgTask+0xdc>)
 800fbbe:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
	osStatus_t emgSemaphoreVal;
	uint8_t data[8];
	SystemConfig.StartTestTime=StartTimerTicks;
 800fbc2:	4b2d      	ldr	r3, [pc, #180]	@ (800fc78 <StartReadSecondEmgTask+0xe0>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	4a29      	ldr	r2, [pc, #164]	@ (800fc6c <StartReadSecondEmgTask+0xd4>)
 800fbc8:	6313      	str	r3, [r2, #48]	@ 0x30
	for(;;)
	{
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.SecondEmgSemaphoreHandle, 1000);
 800fbca:	4b2a      	ldr	r3, [pc, #168]	@ (800fc74 <StartReadSecondEmgTask+0xdc>)
 800fbcc:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800fbd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7f6 ffdf 	bl	8006b98 <osSemaphoreAcquire>
 800fbda:	6238      	str	r0, [r7, #32]
		if(emgSemaphoreVal==osOK){
 800fbdc:	6a3b      	ldr	r3, [r7, #32]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d140      	bne.n	800fc64 <StartReadSecondEmgTask+0xcc>
			EmgInstance.SecondEmgRead(false);
 800fbe2:	2100      	movs	r1, #0
 800fbe4:	4825      	ldr	r0, [pc, #148]	@ (800fc7c <StartReadSecondEmgTask+0xe4>)
 800fbe6:	f7fb ff7d 	bl	800bae4 <_ZN3Emg13SecondEmgReadEb>
			float32_t emgValue=EmgInstance.SecondEmgValue;
 800fbea:	4b24      	ldr	r3, [pc, #144]	@ (800fc7c <StartReadSecondEmgTask+0xe4>)
 800fbec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbee:	ee07 3a90 	vmov	s15, r3
 800fbf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbf6:	edc7 7a03 	vstr	s15, [r7, #12]
			uint8_t *emgArray;
			emgArray = (uint8_t*)(&emgValue );
 800fbfa:	f107 030c 	add.w	r3, r7, #12
 800fbfe:	61fb      	str	r3, [r7, #28]
			uint32_t time=(StartTimerTicks-SystemConfig.StartTestTime)/10;
 800fc00:	4b1d      	ldr	r3, [pc, #116]	@ (800fc78 <StartReadSecondEmgTask+0xe0>)
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	4b19      	ldr	r3, [pc, #100]	@ (800fc6c <StartReadSecondEmgTask+0xd4>)
 800fc06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	4a1d      	ldr	r2, [pc, #116]	@ (800fc80 <StartReadSecondEmgTask+0xe8>)
 800fc0c:	fba2 2303 	umull	r2, r3, r2, r3
 800fc10:	08db      	lsrs	r3, r3, #3
 800fc12:	61bb      	str	r3, [r7, #24]
			data[0]=(time & 0xFF000000) >> 24;
 800fc14:	69bb      	ldr	r3, [r7, #24]
 800fc16:	0e1b      	lsrs	r3, r3, #24
 800fc18:	b2db      	uxtb	r3, r3
 800fc1a:	743b      	strb	r3, [r7, #16]
			data[1]=(time & 0x00FF0000) >> 16;
 800fc1c:	69bb      	ldr	r3, [r7, #24]
 800fc1e:	0c1b      	lsrs	r3, r3, #16
 800fc20:	b2db      	uxtb	r3, r3
 800fc22:	747b      	strb	r3, [r7, #17]
			data[2]=(time & 0x0000FF00) >> 8;
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	0a1b      	lsrs	r3, r3, #8
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	74bb      	strb	r3, [r7, #18]
			data[3]=(time & 0x000000FF);
 800fc2c:	69bb      	ldr	r3, [r7, #24]
 800fc2e:	b2db      	uxtb	r3, r3
 800fc30:	74fb      	strb	r3, [r7, #19]
			data[4]=emgArray[0];
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	753b      	strb	r3, [r7, #20]
			data[5]=emgArray[1];
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	785b      	ldrb	r3, [r3, #1]
 800fc3c:	757b      	strb	r3, [r7, #21]
			data[6]=emgArray[2];
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	789b      	ldrb	r3, [r3, #2]
 800fc42:	75bb      	strb	r3, [r7, #22]
			data[7]=emgArray[3];
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	78db      	ldrb	r3, [r3, #3]
 800fc48:	75fb      	strb	r3, [r7, #23]
			SuccessDataResult(0, SuccessDataType::SD_SecondEmg, data, 8);
 800fc4a:	f107 0210 	add.w	r2, r7, #16
 800fc4e:	2308      	movs	r3, #8
 800fc50:	210b      	movs	r1, #11
 800fc52:	2000      	movs	r0, #0
 800fc54:	f7ff f87a 	bl	800ed4c <SuccessDataResult>
			osSemaphoreRelease(ThreadStorage.SecondEmgSemaphoreHandle);
 800fc58:	4b06      	ldr	r3, [pc, #24]	@ (800fc74 <StartReadSecondEmgTask+0xdc>)
 800fc5a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7f6 ffec 	bl	8006c3c <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800fc64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fc66:	f7f8 fbdb 	bl	8008420 <vTaskDelay>
	}
 800fc6a:	e7ae      	b.n	800fbca <StartReadSecondEmgTask+0x32>
 800fc6c:	2000932c 	.word	0x2000932c
 800fc70:	08011d64 	.word	0x08011d64
 800fc74:	2000913c 	.word	0x2000913c
 800fc78:	200000cc 	.word	0x200000cc
 800fc7c:	20005084 	.word	0x20005084
 800fc80:	cccccccd 	.word	0xcccccccd

0800fc84 <StartFlowTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b084      	sub	sp, #16
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.FlowPerSecond) / portTICK_PERIOD_MS;
 800fc8c:	4b17      	ldr	r3, [pc, #92]	@ (800fcec <StartFlowTask+0x68>)
 800fc8e:	791b      	ldrb	r3, [r3, #4]
 800fc90:	461a      	mov	r2, r3
 800fc92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc96:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc9a:	60fb      	str	r3, [r7, #12]
	ThreadStorage.FlowSemaphoreHandle = osSemaphoreNew(1, 1, &flowSemaphore_attributes);
 800fc9c:	4a14      	ldr	r2, [pc, #80]	@ (800fcf0 <StartFlowTask+0x6c>)
 800fc9e:	2101      	movs	r1, #1
 800fca0:	2001      	movs	r0, #1
 800fca2:	f7f6 fef0 	bl	8006a86 <osSemaphoreNew>
 800fca6:	4603      	mov	r3, r0
 800fca8:	4a12      	ldr	r2, [pc, #72]	@ (800fcf4 <StartFlowTask+0x70>)
 800fcaa:	f8c2 31d8 	str.w	r3, [r2, #472]	@ 0x1d8
	osStatus_t flowSemaphoreVal;
	for(;;)
	{
		flowSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FlowSemaphoreHandle, 1000);
 800fcae:	4b11      	ldr	r3, [pc, #68]	@ (800fcf4 <StartFlowTask+0x70>)
 800fcb0:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800fcb4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f7f6 ff6d 	bl	8006b98 <osSemaphoreAcquire>
 800fcbe:	60b8      	str	r0, [r7, #8]
		if(flowSemaphoreVal==osOK){
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d10e      	bne.n	800fce4 <StartFlowTask+0x60>
			flowCounter++;
 800fcc6:	4b0c      	ldr	r3, [pc, #48]	@ (800fcf8 <StartFlowTask+0x74>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	3301      	adds	r3, #1
 800fccc:	4a0a      	ldr	r2, [pc, #40]	@ (800fcf8 <StartFlowTask+0x74>)
 800fcce:	6013      	str	r3, [r2, #0]
			LoadCellInstance.ReadFlow(true);
 800fcd0:	2101      	movs	r1, #1
 800fcd2:	480a      	ldr	r0, [pc, #40]	@ (800fcfc <StartFlowTask+0x78>)
 800fcd4:	f7fe f988 	bl	800dfe8 <_ZN8LoadCell8ReadFlowEb>
			osSemaphoreRelease(ThreadStorage.FlowSemaphoreHandle);
 800fcd8:	4b06      	ldr	r3, [pc, #24]	@ (800fcf4 <StartFlowTask+0x70>)
 800fcda:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7f6 ffac 	bl	8006c3c <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f7f8 fb9b 	bl	8008420 <vTaskDelay>
		flowSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FlowSemaphoreHandle, 1000);
 800fcea:	e7e0      	b.n	800fcae <StartFlowTask+0x2a>
 800fcec:	2000932c 	.word	0x2000932c
 800fcf0:	08011d74 	.word	0x08011d74
 800fcf4:	2000913c 	.word	0x2000913c
 800fcf8:	2000507c 	.word	0x2000507c
 800fcfc:	200070c8 	.word	0x200070c8

0800fd00 <StartReadFlowTask>:
	}
  /* USER CODE END 5 */
}
void StartReadFlowTask(void *argument)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b08e      	sub	sp, #56	@ 0x38
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	LoadCellInstance.ClearSamples();
 800fd08:	4838      	ldr	r0, [pc, #224]	@ (800fdec <StartReadFlowTask+0xec>)
 800fd0a:	f7fe fc7f 	bl	800e60c <_ZN8LoadCell12ClearSamplesEv>
	const TickType_t xDelay = (1000/SystemConfig.FlowPerSecond) / portTICK_PERIOD_MS;
 800fd0e:	4b38      	ldr	r3, [pc, #224]	@ (800fdf0 <StartReadFlowTask+0xf0>)
 800fd10:	791b      	ldrb	r3, [r3, #4]
 800fd12:	461a      	mov	r2, r3
 800fd14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd18:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd1c:	637b      	str	r3, [r7, #52]	@ 0x34
	ThreadStorage.FlowSemaphoreHandle = osSemaphoreNew(1, 1, &flowSemaphore_attributes);
 800fd1e:	4a35      	ldr	r2, [pc, #212]	@ (800fdf4 <StartReadFlowTask+0xf4>)
 800fd20:	2101      	movs	r1, #1
 800fd22:	2001      	movs	r0, #1
 800fd24:	f7f6 feaf 	bl	8006a86 <osSemaphoreNew>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	4a33      	ldr	r2, [pc, #204]	@ (800fdf8 <StartReadFlowTask+0xf8>)
 800fd2c:	f8c2 31d8 	str.w	r3, [r2, #472]	@ 0x1d8
	osStatus_t flowSemaphoreVal;
	float32_t avg=SystemConfig.FlowAverage;
 800fd30:	4b2f      	ldr	r3, [pc, #188]	@ (800fdf0 <StartReadFlowTask+0xf0>)
 800fd32:	695b      	ldr	r3, [r3, #20]
 800fd34:	ee07 3a90 	vmov	s15, r3
 800fd38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd3c:	edc7 7a08 	vstr	s15, [r7, #32]
	uint8_t *avgArray;
	avgArray = (uint8_t*)(&avg );
 800fd40:	f107 0320 	add.w	r3, r7, #32
 800fd44:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t data[12];
	data[0]=avgArray[0];
 800fd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	753b      	strb	r3, [r7, #20]
	data[1]=avgArray[1];
 800fd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd4e:	785b      	ldrb	r3, [r3, #1]
 800fd50:	757b      	strb	r3, [r7, #21]
	data[2]=avgArray[2];
 800fd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd54:	789b      	ldrb	r3, [r3, #2]
 800fd56:	75bb      	strb	r3, [r7, #22]
	data[3]=avgArray[3];
 800fd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd5a:	78db      	ldrb	r3, [r3, #3]
 800fd5c:	75fb      	strb	r3, [r7, #23]
	for(;;)
	{
		flowSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FlowSemaphoreHandle, 1000);
 800fd5e:	4b26      	ldr	r3, [pc, #152]	@ (800fdf8 <StartReadFlowTask+0xf8>)
 800fd60:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800fd64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7f6 ff15 	bl	8006b98 <osSemaphoreAcquire>
 800fd6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(flowSemaphoreVal==osOK){
 800fd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d136      	bne.n	800fde4 <StartReadFlowTask+0xe4>
			LoadCellInstance.ReadFlow(false);
 800fd76:	2100      	movs	r1, #0
 800fd78:	481c      	ldr	r0, [pc, #112]	@ (800fdec <StartReadFlowTask+0xec>)
 800fd7a:	f7fe f935 	bl	800dfe8 <_ZN8LoadCell8ReadFlowEb>
			float32_t rate=SystemConfig.FlowRate;
 800fd7e:	4b1c      	ldr	r3, [pc, #112]	@ (800fdf0 <StartReadFlowTask+0xf0>)
 800fd80:	6a1b      	ldr	r3, [r3, #32]
 800fd82:	613b      	str	r3, [r7, #16]
			uint8_t *rateArray;
			rateArray = (uint8_t*)(&rate );
 800fd84:	f107 0310 	add.w	r3, r7, #16
 800fd88:	62bb      	str	r3, [r7, #40]	@ 0x28
			float32_t flow=LoadCellInstance.LastReadFlowValue;
 800fd8a:	4b18      	ldr	r3, [pc, #96]	@ (800fdec <StartReadFlowTask+0xec>)
 800fd8c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fd90:	69db      	ldr	r3, [r3, #28]
 800fd92:	60fb      	str	r3, [r7, #12]
			uint8_t *flowArray;
			flowArray = (uint8_t*)(&flow );
 800fd94:	f107 030c 	add.w	r3, r7, #12
 800fd98:	627b      	str	r3, [r7, #36]	@ 0x24
			data[4]=rateArray[0];
 800fd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	763b      	strb	r3, [r7, #24]
			data[5]=rateArray[1];
 800fda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda2:	785b      	ldrb	r3, [r3, #1]
 800fda4:	767b      	strb	r3, [r7, #25]
			data[6]=rateArray[2];
 800fda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda8:	789b      	ldrb	r3, [r3, #2]
 800fdaa:	76bb      	strb	r3, [r7, #26]
			data[7]=rateArray[3];
 800fdac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdae:	78db      	ldrb	r3, [r3, #3]
 800fdb0:	76fb      	strb	r3, [r7, #27]
			data[8]=flowArray[0];
 800fdb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	773b      	strb	r3, [r7, #28]
			data[9]=flowArray[1];
 800fdb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdba:	785b      	ldrb	r3, [r3, #1]
 800fdbc:	777b      	strb	r3, [r7, #29]
			data[10]=flowArray[2];
 800fdbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc0:	789b      	ldrb	r3, [r3, #2]
 800fdc2:	77bb      	strb	r3, [r7, #30]
			data[11]=flowArray[3];
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc6:	78db      	ldrb	r3, [r3, #3]
 800fdc8:	77fb      	strb	r3, [r7, #31]
			SuccessDataResult(0, SuccessDataType::SD_Flow, data, 12);
 800fdca:	f107 0214 	add.w	r2, r7, #20
 800fdce:	230c      	movs	r3, #12
 800fdd0:	2105      	movs	r1, #5
 800fdd2:	2000      	movs	r0, #0
 800fdd4:	f7fe ffba 	bl	800ed4c <SuccessDataResult>
			osSemaphoreRelease(ThreadStorage.FlowSemaphoreHandle);
 800fdd8:	4b07      	ldr	r3, [pc, #28]	@ (800fdf8 <StartReadFlowTask+0xf8>)
 800fdda:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7f6 ff2c 	bl	8006c3c <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800fde4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fde6:	f7f8 fb1b 	bl	8008420 <vTaskDelay>
	}
 800fdea:	e7b8      	b.n	800fd5e <StartReadFlowTask+0x5e>
 800fdec:	200070c8 	.word	0x200070c8
 800fdf0:	2000932c 	.word	0x2000932c
 800fdf4:	08011d74 	.word	0x08011d74
 800fdf8:	2000913c 	.word	0x2000913c

0800fdfc <StartVolumeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartVolumeTask */
void StartVolumeTask(void *argument)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	LoadCellInstance.ClearSamples();
 800fe04:	4819      	ldr	r0, [pc, #100]	@ (800fe6c <StartVolumeTask+0x70>)
 800fe06:	f7fe fc01 	bl	800e60c <_ZN8LoadCell12ClearSamplesEv>
	const TickType_t xDelay = (1000/SystemConfig.VolumePerSecond) / portTICK_PERIOD_MS;
 800fe0a:	4b19      	ldr	r3, [pc, #100]	@ (800fe70 <StartVolumeTask+0x74>)
 800fe0c:	78db      	ldrb	r3, [r3, #3]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe14:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe18:	60fb      	str	r3, [r7, #12]
	ThreadStorage.VolumeSemaphoreHandle = osSemaphoreNew(1, 1, &volumeSemaphore_attributes);
 800fe1a:	4a16      	ldr	r2, [pc, #88]	@ (800fe74 <StartVolumeTask+0x78>)
 800fe1c:	2101      	movs	r1, #1
 800fe1e:	2001      	movs	r0, #1
 800fe20:	f7f6 fe31 	bl	8006a86 <osSemaphoreNew>
 800fe24:	4603      	mov	r3, r0
 800fe26:	4a14      	ldr	r2, [pc, #80]	@ (800fe78 <StartVolumeTask+0x7c>)
 800fe28:	f8c2 31dc 	str.w	r3, [r2, #476]	@ 0x1dc
	osStatus_t volumeSemaphoreVal;
	for(;;)
	{
		volumeSemaphoreVal = osSemaphoreAcquire(ThreadStorage.VolumeSemaphoreHandle, 1000);
 800fe2c:	4b12      	ldr	r3, [pc, #72]	@ (800fe78 <StartVolumeTask+0x7c>)
 800fe2e:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800fe32:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7f6 feae 	bl	8006b98 <osSemaphoreAcquire>
 800fe3c:	60b8      	str	r0, [r7, #8]
		if(volumeSemaphoreVal==osOK){
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d1f3      	bne.n	800fe2c <StartVolumeTask+0x30>
			volumeCounter++;
 800fe44:	4b0d      	ldr	r3, [pc, #52]	@ (800fe7c <StartVolumeTask+0x80>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	4a0c      	ldr	r2, [pc, #48]	@ (800fe7c <StartVolumeTask+0x80>)
 800fe4c:	6013      	str	r3, [r2, #0]
			LoadCellInstance.ReadVolume(true);
 800fe4e:	2101      	movs	r1, #1
 800fe50:	4806      	ldr	r0, [pc, #24]	@ (800fe6c <StartVolumeTask+0x70>)
 800fe52:	f7fd ff11 	bl	800dc78 <_ZN8LoadCell10ReadVolumeEb>
			osSemaphoreRelease(ThreadStorage.VolumeSemaphoreHandle);
 800fe56:	4b08      	ldr	r3, [pc, #32]	@ (800fe78 <StartVolumeTask+0x7c>)
 800fe58:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7f6 feed 	bl	8006c3c <osSemaphoreRelease>
			vTaskDelay( xDelay );
 800fe62:	68f8      	ldr	r0, [r7, #12]
 800fe64:	f7f8 fadc 	bl	8008420 <vTaskDelay>
		volumeSemaphoreVal = osSemaphoreAcquire(ThreadStorage.VolumeSemaphoreHandle, 1000);
 800fe68:	e7e0      	b.n	800fe2c <StartVolumeTask+0x30>
 800fe6a:	bf00      	nop
 800fe6c:	200070c8 	.word	0x200070c8
 800fe70:	2000932c 	.word	0x2000932c
 800fe74:	08011d84 	.word	0x08011d84
 800fe78:	2000913c 	.word	0x2000913c
 800fe7c:	20005080 	.word	0x20005080

0800fe80 <StartReadVolumeTask>:
	}
  /* USER CODE END 5 */
}

void StartReadVolumeTask(void *argument)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b08e      	sub	sp, #56	@ 0x38
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	LoadCellInstance.ClearSamples();
 800fe88:	4838      	ldr	r0, [pc, #224]	@ (800ff6c <StartReadVolumeTask+0xec>)
 800fe8a:	f7fe fbbf 	bl	800e60c <_ZN8LoadCell12ClearSamplesEv>
	const TickType_t xDelay = (1000/SystemConfig.VolumePerSecond) / portTICK_PERIOD_MS;
 800fe8e:	4b38      	ldr	r3, [pc, #224]	@ (800ff70 <StartReadVolumeTask+0xf0>)
 800fe90:	78db      	ldrb	r3, [r3, #3]
 800fe92:	461a      	mov	r2, r3
 800fe94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe98:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe9c:	637b      	str	r3, [r7, #52]	@ 0x34
	ThreadStorage.VolumeSemaphoreHandle = osSemaphoreNew(1, 1, &volumeSemaphore_attributes);
 800fe9e:	4a35      	ldr	r2, [pc, #212]	@ (800ff74 <StartReadVolumeTask+0xf4>)
 800fea0:	2101      	movs	r1, #1
 800fea2:	2001      	movs	r0, #1
 800fea4:	f7f6 fdef 	bl	8006a86 <osSemaphoreNew>
 800fea8:	4603      	mov	r3, r0
 800feaa:	4a33      	ldr	r2, [pc, #204]	@ (800ff78 <StartReadVolumeTask+0xf8>)
 800feac:	f8c2 31dc 	str.w	r3, [r2, #476]	@ 0x1dc
	osStatus_t volumeSemaphoreVal;
	float32_t avg=SystemConfig.VolumeAverage;
 800feb0:	4b2f      	ldr	r3, [pc, #188]	@ (800ff70 <StartReadVolumeTask+0xf0>)
 800feb2:	699b      	ldr	r3, [r3, #24]
 800feb4:	ee07 3a90 	vmov	s15, r3
 800feb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800febc:	edc7 7a08 	vstr	s15, [r7, #32]
	uint8_t *avgArray;
	avgArray = (uint8_t*)(&avg );
 800fec0:	f107 0320 	add.w	r3, r7, #32
 800fec4:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t data[12];
	data[0]=avgArray[0];
 800fec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	753b      	strb	r3, [r7, #20]
	data[1]=avgArray[1];
 800fecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fece:	785b      	ldrb	r3, [r3, #1]
 800fed0:	757b      	strb	r3, [r7, #21]
	data[2]=avgArray[2];
 800fed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed4:	789b      	ldrb	r3, [r3, #2]
 800fed6:	75bb      	strb	r3, [r7, #22]
	data[3]=avgArray[3];
 800fed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feda:	78db      	ldrb	r3, [r3, #3]
 800fedc:	75fb      	strb	r3, [r7, #23]
	for(;;)
	{
		volumeSemaphoreVal = osSemaphoreAcquire(ThreadStorage.VolumeSemaphoreHandle, 1000);
 800fede:	4b26      	ldr	r3, [pc, #152]	@ (800ff78 <StartReadVolumeTask+0xf8>)
 800fee0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800fee4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fee8:	4618      	mov	r0, r3
 800feea:	f7f6 fe55 	bl	8006b98 <osSemaphoreAcquire>
 800feee:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(volumeSemaphoreVal==osOK){
 800fef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d136      	bne.n	800ff64 <StartReadVolumeTask+0xe4>
			LoadCellInstance.ReadVolume(false);
 800fef6:	2100      	movs	r1, #0
 800fef8:	481c      	ldr	r0, [pc, #112]	@ (800ff6c <StartReadVolumeTask+0xec>)
 800fefa:	f7fd febd 	bl	800dc78 <_ZN8LoadCell10ReadVolumeEb>
			float32_t rate=SystemConfig.VolumeRate;
 800fefe:	4b1c      	ldr	r3, [pc, #112]	@ (800ff70 <StartReadVolumeTask+0xf0>)
 800ff00:	69db      	ldr	r3, [r3, #28]
 800ff02:	613b      	str	r3, [r7, #16]
			uint8_t *rateArray;
			rateArray = (uint8_t*)(&rate );
 800ff04:	f107 0310 	add.w	r3, r7, #16
 800ff08:	62bb      	str	r3, [r7, #40]	@ 0x28
			float32_t volume=LoadCellInstance.LastReadVolumeValue;
 800ff0a:	4b18      	ldr	r3, [pc, #96]	@ (800ff6c <StartReadVolumeTask+0xec>)
 800ff0c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ff10:	6a1b      	ldr	r3, [r3, #32]
 800ff12:	60fb      	str	r3, [r7, #12]
			uint8_t *volumeArray;
			volumeArray = (uint8_t*)(&volume );
 800ff14:	f107 030c 	add.w	r3, r7, #12
 800ff18:	627b      	str	r3, [r7, #36]	@ 0x24
			data[4]=rateArray[0];
 800ff1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	763b      	strb	r3, [r7, #24]
			data[5]=rateArray[1];
 800ff20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff22:	785b      	ldrb	r3, [r3, #1]
 800ff24:	767b      	strb	r3, [r7, #25]
			data[6]=rateArray[2];
 800ff26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff28:	789b      	ldrb	r3, [r3, #2]
 800ff2a:	76bb      	strb	r3, [r7, #26]
			data[7]=rateArray[3];
 800ff2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff2e:	78db      	ldrb	r3, [r3, #3]
 800ff30:	76fb      	strb	r3, [r7, #27]
			data[8]=volumeArray[0];
 800ff32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	773b      	strb	r3, [r7, #28]
			data[9]=volumeArray[1];
 800ff38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff3a:	785b      	ldrb	r3, [r3, #1]
 800ff3c:	777b      	strb	r3, [r7, #29]
			data[10]=volumeArray[2];
 800ff3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff40:	789b      	ldrb	r3, [r3, #2]
 800ff42:	77bb      	strb	r3, [r7, #30]
			data[11]=volumeArray[3];
 800ff44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff46:	78db      	ldrb	r3, [r3, #3]
 800ff48:	77fb      	strb	r3, [r7, #31]
			SuccessDataResult(0, SuccessDataType::SD_Volume, data, 12);
 800ff4a:	f107 0214 	add.w	r2, r7, #20
 800ff4e:	230c      	movs	r3, #12
 800ff50:	2104      	movs	r1, #4
 800ff52:	2000      	movs	r0, #0
 800ff54:	f7fe fefa 	bl	800ed4c <SuccessDataResult>
			osSemaphoreRelease(ThreadStorage.VolumeSemaphoreHandle);
 800ff58:	4b07      	ldr	r3, [pc, #28]	@ (800ff78 <StartReadVolumeTask+0xf8>)
 800ff5a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7f6 fe6c 	bl	8006c3c <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800ff64:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ff66:	f7f8 fa5b 	bl	8008420 <vTaskDelay>
	}
 800ff6a:	e7b8      	b.n	800fede <StartReadVolumeTask+0x5e>
 800ff6c:	200070c8 	.word	0x200070c8
 800ff70:	2000932c 	.word	0x2000932c
 800ff74:	08011d84 	.word	0x08011d84
 800ff78:	2000913c 	.word	0x2000913c

0800ff7c <StartAutoClosePumpTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAutoClosePumpTask */
void StartAutoClosePumpTask(void *argument)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000*SystemConfig.PumpMaxRunSecond) / portTICK_PERIOD_MS;
 800ff84:	4b08      	ldr	r3, [pc, #32]	@ (800ffa8 <StartAutoClosePumpTask+0x2c>)
 800ff86:	795b      	ldrb	r3, [r3, #5]
 800ff88:	461a      	mov	r2, r3
 800ff8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff8e:	fb02 f303 	mul.w	r3, r2, r3
 800ff92:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		vTaskDelay( xDelay );
 800ff94:	68f8      	ldr	r0, [r7, #12]
 800ff96:	f7f8 fa43 	bl	8008420 <vTaskDelay>
		CommunicationInstance.TogglePump(false);
 800ff9a:	2100      	movs	r1, #0
 800ff9c:	4803      	ldr	r0, [pc, #12]	@ (800ffac <StartAutoClosePumpTask+0x30>)
 800ff9e:	f7fb f94d 	bl	800b23c <_ZN13Communication10TogglePumpEb>
		vTaskDelay( xDelay );
 800ffa2:	bf00      	nop
 800ffa4:	e7f6      	b.n	800ff94 <StartAutoClosePumpTask+0x18>
 800ffa6:	bf00      	nop
 800ffa8:	2000932c 	.word	0x2000932c
 800ffac:	20009100 	.word	0x20009100

0800ffb0 <StartAutoCloseValveTask>:
	}
  /* USER CODE END 5 */
}
void StartAutoCloseValveTask(void *argument)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000*SystemConfig.ValveMaxRunSecond) / portTICK_PERIOD_MS;
 800ffb8:	4b0c      	ldr	r3, [pc, #48]	@ (800ffec <StartAutoCloseValveTask+0x3c>)
 800ffba:	799b      	ldrb	r3, [r3, #6]
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffc2:	fb02 f303 	mul.w	r3, r2, r3
 800ffc6:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		vTaskDelay( xDelay );
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f7f8 fa29 	bl	8008420 <vTaskDelay>
		CommunicationInstance.ToggleValve(false);
 800ffce:	2100      	movs	r1, #0
 800ffd0:	4807      	ldr	r0, [pc, #28]	@ (800fff0 <StartAutoCloseValveTask+0x40>)
 800ffd2:	f7fb f96d 	bl	800b2b0 <_ZN13Communication11ToggleValveEb>
		osThreadTerminate(ThreadStorage.ValveMaxRunThreadId);
 800ffd6:	4b07      	ldr	r3, [pc, #28]	@ (800fff4 <StartAutoCloseValveTask+0x44>)
 800ffd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7f6 fd26 	bl	8006a2c <osThreadTerminate>
		ThreadStorage.ValveMaxRunThreadId=NULL;
 800ffe0:	4b04      	ldr	r3, [pc, #16]	@ (800fff4 <StartAutoCloseValveTask+0x44>)
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	675a      	str	r2, [r3, #116]	@ 0x74
		vTaskDelay( xDelay );
 800ffe6:	bf00      	nop
 800ffe8:	e7ee      	b.n	800ffc8 <StartAutoCloseValveTask+0x18>
 800ffea:	bf00      	nop
 800ffec:	2000932c 	.word	0x2000932c
 800fff0:	20009100 	.word	0x20009100
 800fff4:	2000913c 	.word	0x2000913c

0800fff8 <StartLoadcellAverageTask>:
	}
  /* USER CODE END 5 */
}
void StartLoadcellAverageTask(void *argument){
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b08c      	sub	sp, #48	@ 0x30
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 8010000:	2364      	movs	r3, #100	@ 0x64
 8010002:	623b      	str	r3, [r7, #32]
	float32_t sumFlow = 0;
 8010004:	f04f 0300 	mov.w	r3, #0
 8010008:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float32_t sumVolume = 0;
 801000a:	f04f 0300 	mov.w	r3, #0
 801000e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t instanceCount=0;
 8010010:	2300      	movs	r3, #0
 8010012:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t jumpCount=50;
 8010014:	2332      	movs	r3, #50	@ 0x32
 8010016:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t percent=0;
 801001a:	2300      	movs	r3, #0
 801001c:	77fb      	strb	r3, [r7, #31]
	uint8_t data[8];
	LoadCellInstance.ClearSamples();
 801001e:	4856      	ldr	r0, [pc, #344]	@ (8010178 <StartLoadcellAverageTask+0x180>)
 8010020:	f7fe faf4 	bl	800e60c <_ZN8LoadCell12ClearSamplesEv>
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 8010024:	4854      	ldr	r0, [pc, #336]	@ (8010178 <StartLoadcellAverageTask+0x180>)
 8010026:	f7fd fd43 	bl	800dab0 <_ZN8LoadCell17ReadVolumeAndFlowEv>
		if(jumpCount>0){
 801002a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801002e:	2b00      	cmp	r3, #0
 8010030:	d008      	beq.n	8010044 <StartLoadcellAverageTask+0x4c>
			jumpCount--;
 8010032:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010036:	3b01      	subs	r3, #1
 8010038:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			vTaskDelay( xDelay );
 801003c:	2064      	movs	r0, #100	@ 0x64
 801003e:	f7f8 f9ef 	bl	8008420 <vTaskDelay>
			continue;
 8010042:	e098      	b.n	8010176 <StartLoadcellAverageTask+0x17e>
		}
		sumFlow+=LoadCellInstance.FlowValue;
 8010044:	4b4c      	ldr	r3, [pc, #304]	@ (8010178 <StartLoadcellAverageTask+0x180>)
 8010046:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801004a:	edd3 7a03 	vldr	s15, [r3, #12]
 801004e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8010052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010056:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		sumVolume+=LoadCellInstance.VolumeValue;
 801005a:	4b47      	ldr	r3, [pc, #284]	@ (8010178 <StartLoadcellAverageTask+0x180>)
 801005c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010060:	edd3 7a04 	vldr	s15, [r3, #16]
 8010064:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8010068:	ee77 7a27 	vadd.f32	s15, s14, s15
 801006c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		uint8_t *volumeArray;
		volumeArray = (uint8_t*)(&LoadCellInstance.VolumeValue );
 8010070:	4b42      	ldr	r3, [pc, #264]	@ (801017c <StartLoadcellAverageTask+0x184>)
 8010072:	61bb      	str	r3, [r7, #24]
		uint8_t *flowArray;
		flowArray = (uint8_t*)(&LoadCellInstance.FlowValue );
 8010074:	4b42      	ldr	r3, [pc, #264]	@ (8010180 <StartLoadcellAverageTask+0x188>)
 8010076:	617b      	str	r3, [r7, #20]
		data[0]=volumeArray[0];
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	733b      	strb	r3, [r7, #12]
		data[1]=volumeArray[1];
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	785b      	ldrb	r3, [r3, #1]
 8010082:	737b      	strb	r3, [r7, #13]
		data[2]=volumeArray[2];
 8010084:	69bb      	ldr	r3, [r7, #24]
 8010086:	789b      	ldrb	r3, [r3, #2]
 8010088:	73bb      	strb	r3, [r7, #14]
		data[3]=volumeArray[3];
 801008a:	69bb      	ldr	r3, [r7, #24]
 801008c:	78db      	ldrb	r3, [r3, #3]
 801008e:	73fb      	strb	r3, [r7, #15]
		data[4]=flowArray[0];
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	743b      	strb	r3, [r7, #16]
		data[5]=flowArray[1];
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	785b      	ldrb	r3, [r3, #1]
 801009a:	747b      	strb	r3, [r7, #17]
		data[6]=flowArray[2];
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	789b      	ldrb	r3, [r3, #2]
 80100a0:	74bb      	strb	r3, [r7, #18]
		data[7]=flowArray[3];
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	78db      	ldrb	r3, [r3, #3]
 80100a6:	74fb      	strb	r3, [r7, #19]
		instanceCount++;
 80100a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80100aa:	3301      	adds	r3, #1
 80100ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
		percent=((instanceCount*100)/SystemConfig.AverageSampleCount)-1;
 80100ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80100b0:	2264      	movs	r2, #100	@ 0x64
 80100b2:	fb02 f303 	mul.w	r3, r2, r3
 80100b6:	4a33      	ldr	r2, [pc, #204]	@ (8010184 <StartLoadcellAverageTask+0x18c>)
 80100b8:	f892 2071 	ldrb.w	r2, [r2, #113]	@ 0x71
 80100bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	3b01      	subs	r3, #1
 80100c4:	77fb      	strb	r3, [r7, #31]
		Debugger.AveragePercent=percent;
 80100c6:	4a30      	ldr	r2, [pc, #192]	@ (8010188 <StartLoadcellAverageTask+0x190>)
 80100c8:	7ffb      	ldrb	r3, [r7, #31]
 80100ca:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
		SuccessDataResult(percent, SuccessDataType::SD_MeasurementAverage, data, 8);
 80100ce:	f107 020c 	add.w	r2, r7, #12
 80100d2:	7ff8      	ldrb	r0, [r7, #31]
 80100d4:	2308      	movs	r3, #8
 80100d6:	2106      	movs	r1, #6
 80100d8:	f7fe fe38 	bl	800ed4c <SuccessDataResult>
		if(instanceCount>=SystemConfig.AverageSampleCount){
 80100dc:	4b29      	ldr	r3, [pc, #164]	@ (8010184 <StartLoadcellAverageTask+0x18c>)
 80100de:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80100e2:	461a      	mov	r2, r3
 80100e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d342      	bcc.n	8010170 <StartLoadcellAverageTask+0x178>
			SystemConfig.VolumeAverage=sumVolume/instanceCount;
 80100ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80100ec:	ee07 3a90 	vmov	s15, r3
 80100f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80100f4:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80100f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010100:	ee17 2a90 	vmov	r2, s15
 8010104:	4b1f      	ldr	r3, [pc, #124]	@ (8010184 <StartLoadcellAverageTask+0x18c>)
 8010106:	619a      	str	r2, [r3, #24]
			SystemConfig.FlowAverage=sumFlow/(instanceCount-1);
 8010108:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801010a:	3b01      	subs	r3, #1
 801010c:	ee07 3a90 	vmov	s15, r3
 8010110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010114:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8010118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801011c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010120:	ee17 2a90 	vmov	r2, s15
 8010124:	4b17      	ldr	r3, [pc, #92]	@ (8010184 <StartLoadcellAverageTask+0x18c>)
 8010126:	615a      	str	r2, [r3, #20]
			FlashManagerInstance.WriteVolumeAverage(SystemConfig.VolumeAverage);
 8010128:	4b16      	ldr	r3, [pc, #88]	@ (8010184 <StartLoadcellAverageTask+0x18c>)
 801012a:	699b      	ldr	r3, [r3, #24]
 801012c:	4619      	mov	r1, r3
 801012e:	4817      	ldr	r0, [pc, #92]	@ (801018c <StartLoadcellAverageTask+0x194>)
 8010130:	f7fc ff92 	bl	800d058 <_ZN12FlashManager18WriteVolumeAverageEm>
			FlashManagerInstance.WriteFlowAverage(SystemConfig.FlowAverage);
 8010134:	4b13      	ldr	r3, [pc, #76]	@ (8010184 <StartLoadcellAverageTask+0x18c>)
 8010136:	695b      	ldr	r3, [r3, #20]
 8010138:	4619      	mov	r1, r3
 801013a:	4814      	ldr	r0, [pc, #80]	@ (801018c <StartLoadcellAverageTask+0x194>)
 801013c:	f7fd f81f 	bl	800d17e <_ZN12FlashManager16WriteFlowAverageEm>
			SuccessDataResult(100, SuccessDataType::SD_MeasurementAverage, data, 8);
 8010140:	f107 020c 	add.w	r2, r7, #12
 8010144:	2308      	movs	r3, #8
 8010146:	2106      	movs	r1, #6
 8010148:	2064      	movs	r0, #100	@ 0x64
 801014a:	f7fe fdff 	bl	800ed4c <SuccessDataResult>
			SendFeedback(RequestType::R_System, SystemRequestType::SYSR_MeasurementAverage, ProcessStatuses::PS_End);
 801014e:	2202      	movs	r2, #2
 8010150:	2104      	movs	r1, #4
 8010152:	2001      	movs	r0, #1
 8010154:	f7fe fdd0 	bl	800ecf8 <SendFeedback>
			SystemConfig.systemMode=SystemModes::EmptyMode;
 8010158:	4b0a      	ldr	r3, [pc, #40]	@ (8010184 <StartLoadcellAverageTask+0x18c>)
 801015a:	2200      	movs	r2, #0
 801015c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			osThreadTerminate(ThreadStorage.LoadcellAverageThreadId);
 8010160:	4b0b      	ldr	r3, [pc, #44]	@ (8010190 <StartLoadcellAverageTask+0x198>)
 8010162:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010164:	4618      	mov	r0, r3
 8010166:	f7f6 fc61 	bl	8006a2c <osThreadTerminate>
			ThreadStorage.LoadcellAverageThreadId=NULL;
 801016a:	4b09      	ldr	r3, [pc, #36]	@ (8010190 <StartLoadcellAverageTask+0x198>)
 801016c:	2200      	movs	r2, #0
 801016e:	679a      	str	r2, [r3, #120]	@ 0x78
		}
		vTaskDelay( xDelay );
 8010170:	2064      	movs	r0, #100	@ 0x64
 8010172:	f7f8 f955 	bl	8008420 <vTaskDelay>
	}
 8010176:	e755      	b.n	8010024 <StartLoadcellAverageTask+0x2c>
 8010178:	200070c8 	.word	0x200070c8
 801017c:	200090d8 	.word	0x200090d8
 8010180:	200090d4 	.word	0x200090d4
 8010184:	2000932c 	.word	0x2000932c
 8010188:	200093a8 	.word	0x200093a8
 801018c:	20009120 	.word	0x20009120
 8010190:	2000913c 	.word	0x2000913c

08010194 <StartCalibrationVolumeTask>:
}
void StartCalibrationVolumeTask(void *argument){
 8010194:	b5b0      	push	{r4, r5, r7, lr}
 8010196:	b08a      	sub	sp, #40	@ 0x28
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 801019c:	2364      	movs	r3, #100	@ 0x64
 801019e:	61fb      	str	r3, [r7, #28]
	float32_t sumVolume = 0;
 80101a0:	f04f 0300 	mov.w	r3, #0
 80101a4:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t instanceCount=0;
 80101a6:	2300      	movs	r3, #0
 80101a8:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint8_t jumpCount=50;
 80101aa:	2332      	movs	r3, #50	@ 0x32
 80101ac:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t percent=0;
 80101b0:	2300      	movs	r3, #0
 80101b2:	76fb      	strb	r3, [r7, #27]
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 80101b4:	485e      	ldr	r0, [pc, #376]	@ (8010330 <StartCalibrationVolumeTask+0x19c>)
 80101b6:	f7fd fc7b 	bl	800dab0 <_ZN8LoadCell17ReadVolumeAndFlowEv>
		if(jumpCount>0){
 80101ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d008      	beq.n	80101d4 <StartCalibrationVolumeTask+0x40>
			jumpCount--;
 80101c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80101c6:	3b01      	subs	r3, #1
 80101c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			vTaskDelay( xDelay );
 80101cc:	2064      	movs	r0, #100	@ 0x64
 80101ce:	f7f8 f927 	bl	8008420 <vTaskDelay>
			continue;
 80101d2:	e0ac      	b.n	801032e <StartCalibrationVolumeTask+0x19a>
		}
		float32_t diff =LoadCellInstance.VolumeValue-SystemConfig.VolumeAverage;
 80101d4:	4b56      	ldr	r3, [pc, #344]	@ (8010330 <StartCalibrationVolumeTask+0x19c>)
 80101d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80101da:	ed93 7a04 	vldr	s14, [r3, #16]
 80101de:	4b55      	ldr	r3, [pc, #340]	@ (8010334 <StartCalibrationVolumeTask+0x1a0>)
 80101e0:	699b      	ldr	r3, [r3, #24]
 80101e2:	ee07 3a90 	vmov	s15, r3
 80101e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101ee:	edc7 7a05 	vstr	s15, [r7, #20]
		if(diff<1){
 80101f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80101f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80101fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010202:	d503      	bpl.n	801020c <StartCalibrationVolumeTask+0x78>
			vTaskDelay( xDelay );
 8010204:	2064      	movs	r0, #100	@ 0x64
 8010206:	f7f8 f90b 	bl	8008420 <vTaskDelay>
			continue;
 801020a:	e090      	b.n	801032e <StartCalibrationVolumeTask+0x19a>
		}
		sumVolume+=diff;
 801020c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8010210:	edd7 7a05 	vldr	s15, [r7, #20]
 8010214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010218:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float32_t rate=(sumVolume/instanceCount)/SystemConfig.CalibrationWeight;
 801021c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801021e:	ee07 3a90 	vmov	s15, r3
 8010222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010226:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 801022a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801022e:	4b41      	ldr	r3, [pc, #260]	@ (8010334 <StartCalibrationVolumeTask+0x1a0>)
 8010230:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8010234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010238:	edc7 7a03 	vstr	s15, [r7, #12]
		Debugger.VolumeRate=rate;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	4618      	mov	r0, r3
 8010240:	f7f0 f97a 	bl	8000538 <__aeabi_f2d>
 8010244:	4602      	mov	r2, r0
 8010246:	460b      	mov	r3, r1
 8010248:	493b      	ldr	r1, [pc, #236]	@ (8010338 <StartCalibrationVolumeTask+0x1a4>)
 801024a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uint8_t *rateArray;
		rateArray = (uint8_t*)(&rate );
 801024e:	f107 030c 	add.w	r3, r7, #12
 8010252:	613b      	str	r3, [r7, #16]
		instanceCount++;
 8010254:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010256:	3301      	adds	r3, #1
 8010258:	847b      	strh	r3, [r7, #34]	@ 0x22
		percent=((instanceCount*100)/SystemConfig.VolumeCalibrationSampleCount)-1;
 801025a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801025c:	2264      	movs	r2, #100	@ 0x64
 801025e:	fb02 f303 	mul.w	r3, r2, r3
 8010262:	4a34      	ldr	r2, [pc, #208]	@ (8010334 <StartCalibrationVolumeTask+0x1a0>)
 8010264:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 8010268:	fb93 f3f2 	sdiv	r3, r3, r2
 801026c:	b2db      	uxtb	r3, r3
 801026e:	3b01      	subs	r3, #1
 8010270:	76fb      	strb	r3, [r7, #27]
		Debugger.AveragePercent=percent;
 8010272:	4a31      	ldr	r2, [pc, #196]	@ (8010338 <StartCalibrationVolumeTask+0x1a4>)
 8010274:	7efb      	ldrb	r3, [r7, #27]
 8010276:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
		SuccessDataResult(percent, SuccessDataType::SD_VolumeCalibration, rateArray, 4);
 801027a:	7ef8      	ldrb	r0, [r7, #27]
 801027c:	2304      	movs	r3, #4
 801027e:	693a      	ldr	r2, [r7, #16]
 8010280:	2108      	movs	r1, #8
 8010282:	f7fe fd63 	bl	800ed4c <SuccessDataResult>
		if(instanceCount>=SystemConfig.VolumeCalibrationSampleCount){
 8010286:	4b2b      	ldr	r3, [pc, #172]	@ (8010334 <StartCalibrationVolumeTask+0x1a0>)
 8010288:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 801028c:	461a      	mov	r2, r3
 801028e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010290:	4293      	cmp	r3, r2
 8010292:	d349      	bcc.n	8010328 <StartCalibrationVolumeTask+0x194>
			SystemConfig.VolumeRate=((double_t)sumVolume/(double_t)instanceCount)/SystemConfig.CalibrationWeight;
 8010294:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010296:	f7f0 f94f 	bl	8000538 <__aeabi_f2d>
 801029a:	4604      	mov	r4, r0
 801029c:	460d      	mov	r5, r1
 801029e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7f0 f927 	bl	80004f4 <__aeabi_ui2d>
 80102a6:	4602      	mov	r2, r0
 80102a8:	460b      	mov	r3, r1
 80102aa:	4620      	mov	r0, r4
 80102ac:	4629      	mov	r1, r5
 80102ae:	f7f0 fac5 	bl	800083c <__aeabi_ddiv>
 80102b2:	4602      	mov	r2, r0
 80102b4:	460b      	mov	r3, r1
 80102b6:	4614      	mov	r4, r2
 80102b8:	461d      	mov	r5, r3
 80102ba:	4b1e      	ldr	r3, [pc, #120]	@ (8010334 <StartCalibrationVolumeTask+0x1a0>)
 80102bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102be:	4618      	mov	r0, r3
 80102c0:	f7f0 f93a 	bl	8000538 <__aeabi_f2d>
 80102c4:	4602      	mov	r2, r0
 80102c6:	460b      	mov	r3, r1
 80102c8:	4620      	mov	r0, r4
 80102ca:	4629      	mov	r1, r5
 80102cc:	f7f0 fab6 	bl	800083c <__aeabi_ddiv>
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	4610      	mov	r0, r2
 80102d6:	4619      	mov	r1, r3
 80102d8:	f7f0 fb98 	bl	8000a0c <__aeabi_d2f>
 80102dc:	4603      	mov	r3, r0
 80102de:	4a15      	ldr	r2, [pc, #84]	@ (8010334 <StartCalibrationVolumeTask+0x1a0>)
 80102e0:	61d3      	str	r3, [r2, #28]
			FlashManagerInstance.WriteVolumeRate(SystemConfig.VolumeRate);
 80102e2:	4b14      	ldr	r3, [pc, #80]	@ (8010334 <StartCalibrationVolumeTask+0x1a0>)
 80102e4:	69db      	ldr	r3, [r3, #28]
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7f0 f926 	bl	8000538 <__aeabi_f2d>
 80102ec:	4602      	mov	r2, r0
 80102ee:	460b      	mov	r3, r1
 80102f0:	ec43 2b10 	vmov	d0, r2, r3
 80102f4:	4811      	ldr	r0, [pc, #68]	@ (801033c <StartCalibrationVolumeTask+0x1a8>)
 80102f6:	f7fc fe15 	bl	800cf24 <_ZN12FlashManager15WriteVolumeRateEd>
			SuccessDataResult(100, SuccessDataType::SD_VolumeCalibration, rateArray, 4);
 80102fa:	2304      	movs	r3, #4
 80102fc:	693a      	ldr	r2, [r7, #16]
 80102fe:	2108      	movs	r1, #8
 8010300:	2064      	movs	r0, #100	@ 0x64
 8010302:	f7fe fd23 	bl	800ed4c <SuccessDataResult>
			SendFeedback(RequestType::R_System, SystemRequestType::SYSR_CalibrationVolume, ProcessStatuses::PS_End);
 8010306:	2202      	movs	r2, #2
 8010308:	2105      	movs	r1, #5
 801030a:	2001      	movs	r0, #1
 801030c:	f7fe fcf4 	bl	800ecf8 <SendFeedback>
			SystemConfig.systemMode=SystemModes::EmptyMode;
 8010310:	4b08      	ldr	r3, [pc, #32]	@ (8010334 <StartCalibrationVolumeTask+0x1a0>)
 8010312:	2200      	movs	r2, #0
 8010314:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			osThreadTerminate(ThreadStorage.CalibrationVolumeThreadId);
 8010318:	4b09      	ldr	r3, [pc, #36]	@ (8010340 <StartCalibrationVolumeTask+0x1ac>)
 801031a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801031c:	4618      	mov	r0, r3
 801031e:	f7f6 fb85 	bl	8006a2c <osThreadTerminate>
			ThreadStorage.CalibrationVolumeThreadId=NULL;
 8010322:	4b07      	ldr	r3, [pc, #28]	@ (8010340 <StartCalibrationVolumeTask+0x1ac>)
 8010324:	2200      	movs	r2, #0
 8010326:	67da      	str	r2, [r3, #124]	@ 0x7c
		}
		vTaskDelay( xDelay );
 8010328:	2064      	movs	r0, #100	@ 0x64
 801032a:	f7f8 f879 	bl	8008420 <vTaskDelay>
	}
 801032e:	e741      	b.n	80101b4 <StartCalibrationVolumeTask+0x20>
 8010330:	200070c8 	.word	0x200070c8
 8010334:	2000932c 	.word	0x2000932c
 8010338:	200093a8 	.word	0x200093a8
 801033c:	20009120 	.word	0x20009120
 8010340:	2000913c 	.word	0x2000913c

08010344 <StartCalibrationFlowTask>:
}
void StartCalibrationFlowTask(void *argument){
 8010344:	b580      	push	{r7, lr}
 8010346:	b08a      	sub	sp, #40	@ 0x28
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 801034c:	2364      	movs	r3, #100	@ 0x64
 801034e:	61fb      	str	r3, [r7, #28]
	float32_t maxFlow=1;
 8010350:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8010354:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t instanceCount=0;
 8010356:	2300      	movs	r3, #0
 8010358:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint8_t jumpCount=50;
 801035a:	2332      	movs	r3, #50	@ 0x32
 801035c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t percent=0;
 8010360:	2300      	movs	r3, #0
 8010362:	76fb      	strb	r3, [r7, #27]
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 8010364:	485c      	ldr	r0, [pc, #368]	@ (80104d8 <StartCalibrationFlowTask+0x194>)
 8010366:	f7fd fba3 	bl	800dab0 <_ZN8LoadCell17ReadVolumeAndFlowEv>
		if(jumpCount>0){
 801036a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801036e:	2b00      	cmp	r3, #0
 8010370:	d008      	beq.n	8010384 <StartCalibrationFlowTask+0x40>
			jumpCount--;
 8010372:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010376:	3b01      	subs	r3, #1
 8010378:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			vTaskDelay( xDelay );
 801037c:	2064      	movs	r0, #100	@ 0x64
 801037e:	f7f8 f84f 	bl	8008420 <vTaskDelay>
 8010382:	e7ef      	b.n	8010364 <StartCalibrationFlowTask+0x20>
			continue;
		}
		if(SystemConfig.FlowAverage>LoadCellInstance.FlowValue){
 8010384:	4b55      	ldr	r3, [pc, #340]	@ (80104dc <StartCalibrationFlowTask+0x198>)
 8010386:	695b      	ldr	r3, [r3, #20]
 8010388:	ee07 3a90 	vmov	s15, r3
 801038c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010390:	4b51      	ldr	r3, [pc, #324]	@ (80104d8 <StartCalibrationFlowTask+0x194>)
 8010392:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010396:	edd3 7a03 	vldr	s15, [r3, #12]
 801039a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801039e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103a2:	bfcc      	ite	gt
 80103a4:	2301      	movgt	r3, #1
 80103a6:	2300      	movle	r3, #0
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d00a      	beq.n	80103c4 <StartCalibrationFlowTask+0x80>
			LoadCellInstance.FlowValue=SystemConfig.FlowAverage;
 80103ae:	4b4b      	ldr	r3, [pc, #300]	@ (80104dc <StartCalibrationFlowTask+0x198>)
 80103b0:	695b      	ldr	r3, [r3, #20]
 80103b2:	ee07 3a90 	vmov	s15, r3
 80103b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103ba:	4b47      	ldr	r3, [pc, #284]	@ (80104d8 <StartCalibrationFlowTask+0x194>)
 80103bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80103c0:	edc3 7a03 	vstr	s15, [r3, #12]
		}
		uint32_t flow=LoadCellInstance.FlowValue-SystemConfig.FlowAverage;
 80103c4:	4b44      	ldr	r3, [pc, #272]	@ (80104d8 <StartCalibrationFlowTask+0x194>)
 80103c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80103ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80103ce:	4b43      	ldr	r3, [pc, #268]	@ (80104dc <StartCalibrationFlowTask+0x198>)
 80103d0:	695b      	ldr	r3, [r3, #20]
 80103d2:	ee07 3a90 	vmov	s15, r3
 80103d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80103e2:	ee17 3a90 	vmov	r3, s15
 80103e6:	617b      	str	r3, [r7, #20]
		if(flow>maxFlow){
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	ee07 3a90 	vmov	s15, r3
 80103ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103f2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80103f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80103fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103fe:	d506      	bpl.n	801040e <StartCalibrationFlowTask+0xca>
			maxFlow=flow;
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	ee07 3a90 	vmov	s15, r3
 8010406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801040a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		}
		float32_t rate=maxFlow/SystemConfig.CalibrationFlow;
 801040e:	4b33      	ldr	r3, [pc, #204]	@ (80104dc <StartCalibrationFlowTask+0x198>)
 8010410:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8010414:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801041c:	edc7 7a03 	vstr	s15, [r7, #12]
		Debugger.FlowRate=rate;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	4618      	mov	r0, r3
 8010424:	f7f0 f888 	bl	8000538 <__aeabi_f2d>
 8010428:	4602      	mov	r2, r0
 801042a:	460b      	mov	r3, r1
 801042c:	492c      	ldr	r1, [pc, #176]	@ (80104e0 <StartCalibrationFlowTask+0x19c>)
 801042e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		instanceCount++;
 8010432:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010434:	3301      	adds	r3, #1
 8010436:	847b      	strh	r3, [r7, #34]	@ 0x22
		uint8_t *rateArray;
		rateArray = (uint8_t*)(&rate );
 8010438:	f107 030c 	add.w	r3, r7, #12
 801043c:	613b      	str	r3, [r7, #16]
		percent=((instanceCount*100)/SystemConfig.FlowCalibrationSampleCount)-1;
 801043e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010440:	2264      	movs	r2, #100	@ 0x64
 8010442:	fb02 f303 	mul.w	r3, r2, r3
 8010446:	4a25      	ldr	r2, [pc, #148]	@ (80104dc <StartCalibrationFlowTask+0x198>)
 8010448:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 801044c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010450:	b2db      	uxtb	r3, r3
 8010452:	3b01      	subs	r3, #1
 8010454:	76fb      	strb	r3, [r7, #27]
		SuccessDataResult(percent, SuccessDataType::SD_FlowCalibration, rateArray, 4);
 8010456:	7ef8      	ldrb	r0, [r7, #27]
 8010458:	2304      	movs	r3, #4
 801045a:	693a      	ldr	r2, [r7, #16]
 801045c:	2109      	movs	r1, #9
 801045e:	f7fe fc75 	bl	800ed4c <SuccessDataResult>
		if(instanceCount>SystemConfig.FlowCalibrationSampleCount){
 8010462:	4b1e      	ldr	r3, [pc, #120]	@ (80104dc <StartCalibrationFlowTask+0x198>)
 8010464:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8010468:	461a      	mov	r2, r3
 801046a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801046c:	4293      	cmp	r3, r2
 801046e:	d92e      	bls.n	80104ce <StartCalibrationFlowTask+0x18a>
			SystemConfig.FlowRate=(double_t)maxFlow/SystemConfig.CalibrationFlow;
 8010470:	4b1a      	ldr	r3, [pc, #104]	@ (80104dc <StartCalibrationFlowTask+0x198>)
 8010472:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8010476:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 801047a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801047e:	4b17      	ldr	r3, [pc, #92]	@ (80104dc <StartCalibrationFlowTask+0x198>)
 8010480:	edc3 7a08 	vstr	s15, [r3, #32]
			FlashManagerInstance.WriteFlowRate(SystemConfig.FlowRate);
 8010484:	4b15      	ldr	r3, [pc, #84]	@ (80104dc <StartCalibrationFlowTask+0x198>)
 8010486:	6a1b      	ldr	r3, [r3, #32]
 8010488:	4618      	mov	r0, r3
 801048a:	f7f0 f855 	bl	8000538 <__aeabi_f2d>
 801048e:	4602      	mov	r2, r0
 8010490:	460b      	mov	r3, r1
 8010492:	ec43 2b10 	vmov	d0, r2, r3
 8010496:	4813      	ldr	r0, [pc, #76]	@ (80104e4 <StartCalibrationFlowTask+0x1a0>)
 8010498:	f7fc fcaa 	bl	800cdf0 <_ZN12FlashManager13WriteFlowRateEd>
			SystemConfig.systemMode=SystemModes::EmptyMode;
 801049c:	4b0f      	ldr	r3, [pc, #60]	@ (80104dc <StartCalibrationFlowTask+0x198>)
 801049e:	2200      	movs	r2, #0
 80104a0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			SuccessDataResult(100, SuccessDataType::SD_FlowCalibration, rateArray, 4);
 80104a4:	2304      	movs	r3, #4
 80104a6:	693a      	ldr	r2, [r7, #16]
 80104a8:	2109      	movs	r1, #9
 80104aa:	2064      	movs	r0, #100	@ 0x64
 80104ac:	f7fe fc4e 	bl	800ed4c <SuccessDataResult>
			SendFeedback(RequestType::R_System, SystemRequestType::SYSR_CalibrationFlow, ProcessStatuses::PS_End);
 80104b0:	2202      	movs	r2, #2
 80104b2:	2106      	movs	r1, #6
 80104b4:	2001      	movs	r0, #1
 80104b6:	f7fe fc1f 	bl	800ecf8 <SendFeedback>
			osThreadTerminate(ThreadStorage.CalibrationFlowThreadId);
 80104ba:	4b0b      	ldr	r3, [pc, #44]	@ (80104e8 <StartCalibrationFlowTask+0x1a4>)
 80104bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7f6 fab3 	bl	8006a2c <osThreadTerminate>
			ThreadStorage.CalibrationFlowThreadId=NULL;
 80104c6:	4b08      	ldr	r3, [pc, #32]	@ (80104e8 <StartCalibrationFlowTask+0x1a4>)
 80104c8:	2200      	movs	r2, #0
 80104ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		}
		vTaskDelay( xDelay );
 80104ce:	2064      	movs	r0, #100	@ 0x64
 80104d0:	f7f7 ffa6 	bl	8008420 <vTaskDelay>
	}
 80104d4:	e746      	b.n	8010364 <StartCalibrationFlowTask+0x20>
 80104d6:	bf00      	nop
 80104d8:	200070c8 	.word	0x200070c8
 80104dc:	2000932c 	.word	0x2000932c
 80104e0:	200093a8 	.word	0x200093a8
 80104e4:	20009120 	.word	0x20009120
 80104e8:	2000913c 	.word	0x2000913c

080104ec <StartCleanTask>:
}
void StartCleanTask(void *argument){
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b086      	sub	sp, #24
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 80104f4:	2364      	movs	r3, #100	@ 0x64
 80104f6:	613b      	str	r3, [r7, #16]
	uint16_t clearedCount=0;
 80104f8:	2300      	movs	r3, #0
 80104fa:	82fb      	strh	r3, [r7, #22]
	volatile uint8_t type=0;
 80104fc:	2300      	movs	r3, #0
 80104fe:	73fb      	strb	r3, [r7, #15]
	LoadCellInstance.ClearSamples();
 8010500:	4897      	ldr	r0, [pc, #604]	@ (8010760 <StartCleanTask+0x274>)
 8010502:	f7fe f883 	bl	800e60c <_ZN8LoadCell12ClearSamplesEv>
	CommunicationInstance.TogglePump(true);
 8010506:	2101      	movs	r1, #1
 8010508:	4896      	ldr	r0, [pc, #600]	@ (8010764 <StartCleanTask+0x278>)
 801050a:	f7fa fe97 	bl	800b23c <_ZN13Communication10TogglePumpEb>
	if(ThreadStorage.PumpMaxRunThreadId!=NULL&&ThreadStorage.PumpMaxRunThreadId!=0x00){
 801050e:	4b96      	ldr	r3, [pc, #600]	@ (8010768 <StartCleanTask+0x27c>)
 8010510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010512:	2b00      	cmp	r3, #0
 8010514:	d00b      	beq.n	801052e <StartCleanTask+0x42>
 8010516:	4b94      	ldr	r3, [pc, #592]	@ (8010768 <StartCleanTask+0x27c>)
 8010518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801051a:	2b00      	cmp	r3, #0
 801051c:	d007      	beq.n	801052e <StartCleanTask+0x42>
		osThreadTerminate(ThreadStorage.PumpMaxRunThreadId);
 801051e:	4b92      	ldr	r3, [pc, #584]	@ (8010768 <StartCleanTask+0x27c>)
 8010520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010522:	4618      	mov	r0, r3
 8010524:	f7f6 fa82 	bl	8006a2c <osThreadTerminate>
		ThreadStorage.PumpMaxRunThreadId=NULL;
 8010528:	4b8f      	ldr	r3, [pc, #572]	@ (8010768 <StartCleanTask+0x27c>)
 801052a:	2200      	movs	r2, #0
 801052c:	671a      	str	r2, [r3, #112]	@ 0x70
	}
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 801052e:	488c      	ldr	r0, [pc, #560]	@ (8010760 <StartCleanTask+0x274>)
 8010530:	f7fd fabe 	bl	800dab0 <_ZN8LoadCell17ReadVolumeAndFlowEv>
		Debugger.ReadedVolume=LoadCellInstance.VolumeValue;
 8010534:	4b8a      	ldr	r3, [pc, #552]	@ (8010760 <StartCleanTask+0x274>)
 8010536:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801053a:	691b      	ldr	r3, [r3, #16]
 801053c:	4a8b      	ldr	r2, [pc, #556]	@ (801076c <StartCleanTask+0x280>)
 801053e:	6113      	str	r3, [r2, #16]
		if(LoadCellInstance.VolumeValue>LoadCellInstance.VolumeValue){
 8010540:	4b87      	ldr	r3, [pc, #540]	@ (8010760 <StartCleanTask+0x274>)
 8010542:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010546:	ed93 7a04 	vldr	s14, [r3, #16]
 801054a:	4b85      	ldr	r3, [pc, #532]	@ (8010760 <StartCleanTask+0x274>)
 801054c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010550:	edd3 7a04 	vldr	s15, [r3, #16]
 8010554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801055c:	bfcc      	ite	gt
 801055e:	2301      	movgt	r3, #1
 8010560:	2300      	movle	r3, #0
 8010562:	b2db      	uxtb	r3, r3
 8010564:	2b00      	cmp	r3, #0
 8010566:	d012      	beq.n	801058e <StartCleanTask+0xa2>
			Debugger.DiffVolumeValue=LoadCellInstance.VolumeValue-(SystemConfig.VolumeAverage+500);
 8010568:	4b7d      	ldr	r3, [pc, #500]	@ (8010760 <StartCleanTask+0x274>)
 801056a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801056e:	ed93 7a04 	vldr	s14, [r3, #16]
 8010572:	4b7f      	ldr	r3, [pc, #508]	@ (8010770 <StartCleanTask+0x284>)
 8010574:	699b      	ldr	r3, [r3, #24]
 8010576:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 801057a:	ee07 3a90 	vmov	s15, r3
 801057e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010586:	4b79      	ldr	r3, [pc, #484]	@ (801076c <StartCleanTask+0x280>)
 8010588:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
 801058c:	e012      	b.n	80105b4 <StartCleanTask+0xc8>
		}else{
			Debugger.DiffVolumeValue=(SystemConfig.VolumeAverage+10000)-LoadCellInstance.VolumeValue;
 801058e:	4b78      	ldr	r3, [pc, #480]	@ (8010770 <StartCleanTask+0x284>)
 8010590:	699b      	ldr	r3, [r3, #24]
 8010592:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8010596:	3310      	adds	r3, #16
 8010598:	ee07 3a90 	vmov	s15, r3
 801059c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80105a0:	4b6f      	ldr	r3, [pc, #444]	@ (8010760 <StartCleanTask+0x274>)
 80105a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80105a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80105aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105ae:	4b6f      	ldr	r3, [pc, #444]	@ (801076c <StartCleanTask+0x280>)
 80105b0:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
		}
		Debugger.DiffVolumeValue=LoadCellInstance.VolumeValue-(SystemConfig.VolumeAverage+10000);
 80105b4:	4b6a      	ldr	r3, [pc, #424]	@ (8010760 <StartCleanTask+0x274>)
 80105b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80105ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80105be:	4b6c      	ldr	r3, [pc, #432]	@ (8010770 <StartCleanTask+0x284>)
 80105c0:	699b      	ldr	r3, [r3, #24]
 80105c2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80105c6:	3310      	adds	r3, #16
 80105c8:	ee07 3a90 	vmov	s15, r3
 80105cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105d4:	4b65      	ldr	r3, [pc, #404]	@ (801076c <StartCleanTask+0x280>)
 80105d6:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
		Debugger.CleanType=type;
 80105da:	7bfb      	ldrb	r3, [r7, #15]
 80105dc:	b2da      	uxtb	r2, r3
 80105de:	4b63      	ldr	r3, [pc, #396]	@ (801076c <StartCleanTask+0x280>)
 80105e0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
		if(type==0||type==2){
 80105e4:	7bfb      	ldrb	r3, [r7, #15]
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d003      	beq.n	80105f4 <StartCleanTask+0x108>
 80105ec:	7bfb      	ldrb	r3, [r7, #15]
 80105ee:	b2db      	uxtb	r3, r3
 80105f0:	2b02      	cmp	r3, #2
 80105f2:	d101      	bne.n	80105f8 <StartCleanTask+0x10c>
 80105f4:	2301      	movs	r3, #1
 80105f6:	e000      	b.n	80105fa <StartCleanTask+0x10e>
 80105f8:	2300      	movs	r3, #0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d047      	beq.n	801068e <StartCleanTask+0x1a2>
			if(SystemConfig.VolumeAverage+10000>LoadCellInstance.VolumeValue){
 80105fe:	4b5c      	ldr	r3, [pc, #368]	@ (8010770 <StartCleanTask+0x284>)
 8010600:	699b      	ldr	r3, [r3, #24]
 8010602:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8010606:	3310      	adds	r3, #16
 8010608:	ee07 3a90 	vmov	s15, r3
 801060c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010610:	4b53      	ldr	r3, [pc, #332]	@ (8010760 <StartCleanTask+0x274>)
 8010612:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010616:	edd3 7a04 	vldr	s15, [r3, #16]
 801061a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010622:	bfcc      	ite	gt
 8010624:	2301      	movgt	r3, #1
 8010626:	2300      	movle	r3, #0
 8010628:	b2db      	uxtb	r3, r3
 801062a:	2b00      	cmp	r3, #0
 801062c:	d002      	beq.n	8010634 <StartCleanTask+0x148>
				clearedCount++;
 801062e:	8afb      	ldrh	r3, [r7, #22]
 8010630:	3301      	adds	r3, #1
 8010632:	82fb      	strh	r3, [r7, #22]
			}
			if(clearedCount>5){
 8010634:	8afb      	ldrh	r3, [r7, #22]
 8010636:	2b05      	cmp	r3, #5
 8010638:	d97f      	bls.n	801073a <StartCleanTask+0x24e>
				if(type==0){
 801063a:	7bfb      	ldrb	r3, [r7, #15]
 801063c:	b2db      	uxtb	r3, r3
 801063e:	2b00      	cmp	r3, #0
 8010640:	bf0c      	ite	eq
 8010642:	2301      	moveq	r3, #1
 8010644:	2300      	movne	r3, #0
 8010646:	b2db      	uxtb	r3, r3
 8010648:	2b00      	cmp	r3, #0
 801064a:	d014      	beq.n	8010676 <StartCleanTask+0x18a>
					CommunicationInstance.ToggleValve(true);
 801064c:	2101      	movs	r1, #1
 801064e:	4845      	ldr	r0, [pc, #276]	@ (8010764 <StartCleanTask+0x278>)
 8010650:	f7fa fe2e 	bl	800b2b0 <_ZN13Communication11ToggleValveEb>
					if(SystemConfig.IsInternalClean){
 8010654:	4b46      	ldr	r3, [pc, #280]	@ (8010770 <StartCleanTask+0x284>)
 8010656:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 801065a:	2b00      	cmp	r3, #0
 801065c:	d005      	beq.n	801066a <StartCleanTask+0x17e>
						HAL_Delay(SystemConfig.CleanTime);
 801065e:	4b44      	ldr	r3, [pc, #272]	@ (8010770 <StartCleanTask+0x284>)
 8010660:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010662:	4618      	mov	r0, r3
 8010664:	f7f1 fb2e 	bl	8001cc4 <HAL_Delay>
 8010668:	e009      	b.n	801067e <StartCleanTask+0x192>
					}
					else{
						vTaskDelay( SystemConfig.CleanTime );
 801066a:	4b41      	ldr	r3, [pc, #260]	@ (8010770 <StartCleanTask+0x284>)
 801066c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801066e:	4618      	mov	r0, r3
 8010670:	f7f7 fed6 	bl	8008420 <vTaskDelay>
 8010674:	e003      	b.n	801067e <StartCleanTask+0x192>
					}
				}else{
					CommunicationInstance.TogglePump(false);
 8010676:	2100      	movs	r1, #0
 8010678:	483a      	ldr	r0, [pc, #232]	@ (8010764 <StartCleanTask+0x278>)
 801067a:	f7fa fddf 	bl	800b23c <_ZN13Communication10TogglePumpEb>
				}
				type++;
 801067e:	7bfb      	ldrb	r3, [r7, #15]
 8010680:	b2db      	uxtb	r3, r3
 8010682:	3301      	adds	r3, #1
 8010684:	b2db      	uxtb	r3, r3
 8010686:	73fb      	strb	r3, [r7, #15]
				clearedCount=0;
 8010688:	2300      	movs	r3, #0
 801068a:	82fb      	strh	r3, [r7, #22]
 801068c:	e055      	b.n	801073a <StartCleanTask+0x24e>
			}
		}
		else if(type==1){
 801068e:	7bfb      	ldrb	r3, [r7, #15]
 8010690:	b2db      	uxtb	r3, r3
 8010692:	2b01      	cmp	r3, #1
 8010694:	bf0c      	ite	eq
 8010696:	2301      	moveq	r3, #1
 8010698:	2300      	movne	r3, #0
 801069a:	b2db      	uxtb	r3, r3
 801069c:	2b00      	cmp	r3, #0
 801069e:	d01d      	beq.n	80106dc <StartCleanTask+0x1f0>
			CommunicationInstance.ToggleValve(false);
 80106a0:	2100      	movs	r1, #0
 80106a2:	4830      	ldr	r0, [pc, #192]	@ (8010764 <StartCleanTask+0x278>)
 80106a4:	f7fa fe04 	bl	800b2b0 <_ZN13Communication11ToggleValveEb>
			CommunicationInstance.TogglePump(true);
 80106a8:	2101      	movs	r1, #1
 80106aa:	482e      	ldr	r0, [pc, #184]	@ (8010764 <StartCleanTask+0x278>)
 80106ac:	f7fa fdc6 	bl	800b23c <_ZN13Communication10TogglePumpEb>
			if(ThreadStorage.PumpMaxRunThreadId!=NULL&&ThreadStorage.PumpMaxRunThreadId!=0x00){
 80106b0:	4b2d      	ldr	r3, [pc, #180]	@ (8010768 <StartCleanTask+0x27c>)
 80106b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d00b      	beq.n	80106d0 <StartCleanTask+0x1e4>
 80106b8:	4b2b      	ldr	r3, [pc, #172]	@ (8010768 <StartCleanTask+0x27c>)
 80106ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d007      	beq.n	80106d0 <StartCleanTask+0x1e4>
				osThreadTerminate(ThreadStorage.PumpMaxRunThreadId);
 80106c0:	4b29      	ldr	r3, [pc, #164]	@ (8010768 <StartCleanTask+0x27c>)
 80106c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7f6 f9b1 	bl	8006a2c <osThreadTerminate>
				ThreadStorage.PumpMaxRunThreadId=NULL;
 80106ca:	4b27      	ldr	r3, [pc, #156]	@ (8010768 <StartCleanTask+0x27c>)
 80106cc:	2200      	movs	r2, #0
 80106ce:	671a      	str	r2, [r3, #112]	@ 0x70
			}
			type++;
 80106d0:	7bfb      	ldrb	r3, [r7, #15]
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	3301      	adds	r3, #1
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	73fb      	strb	r3, [r7, #15]
 80106da:	e02e      	b.n	801073a <StartCleanTask+0x24e>
		}
		else if(type==3){
 80106dc:	7bfb      	ldrb	r3, [r7, #15]
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	2b03      	cmp	r3, #3
 80106e2:	bf0c      	ite	eq
 80106e4:	2301      	moveq	r3, #1
 80106e6:	2300      	movne	r3, #0
 80106e8:	b2db      	uxtb	r3, r3
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d025      	beq.n	801073a <StartCleanTask+0x24e>
			if(!SystemConfig.IsInternalClean){
 80106ee:	4b20      	ldr	r3, [pc, #128]	@ (8010770 <StartCleanTask+0x284>)
 80106f0:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80106f4:	f083 0301 	eor.w	r3, r3, #1
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d004      	beq.n	8010708 <StartCleanTask+0x21c>
				SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_Clean, ProcessStatuses::PS_End);
 80106fe:	2202      	movs	r2, #2
 8010700:	2106      	movs	r1, #6
 8010702:	2002      	movs	r0, #2
 8010704:	f7fe faf8 	bl	800ecf8 <SendFeedback>
			}
			SystemConfig.systemMode=SystemModes::EmptyMode;
 8010708:	4b19      	ldr	r3, [pc, #100]	@ (8010770 <StartCleanTask+0x284>)
 801070a:	2200      	movs	r2, #0
 801070c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			if(ThreadStorage.CleanThreadId!=0x00&&ThreadStorage.CleanThreadId!=NULL){
 8010710:	4b15      	ldr	r3, [pc, #84]	@ (8010768 <StartCleanTask+0x27c>)
 8010712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010716:	2b00      	cmp	r3, #0
 8010718:	d01c      	beq.n	8010754 <StartCleanTask+0x268>
 801071a:	4b13      	ldr	r3, [pc, #76]	@ (8010768 <StartCleanTask+0x27c>)
 801071c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010720:	2b00      	cmp	r3, #0
 8010722:	d017      	beq.n	8010754 <StartCleanTask+0x268>
				osThreadTerminate(ThreadStorage.CleanThreadId);
 8010724:	4b10      	ldr	r3, [pc, #64]	@ (8010768 <StartCleanTask+0x27c>)
 8010726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801072a:	4618      	mov	r0, r3
 801072c:	f7f6 f97e 	bl	8006a2c <osThreadTerminate>
				ThreadStorage.CleanThreadId=NULL;
 8010730:	4b0d      	ldr	r3, [pc, #52]	@ (8010768 <StartCleanTask+0x27c>)
 8010732:	2200      	movs	r2, #0
 8010734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			}
			break;
 8010738:	e00c      	b.n	8010754 <StartCleanTask+0x268>
		}
		if(SystemConfig.IsInternalClean){
 801073a:	4b0d      	ldr	r3, [pc, #52]	@ (8010770 <StartCleanTask+0x284>)
 801073c:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8010740:	2b00      	cmp	r3, #0
 8010742:	d003      	beq.n	801074c <StartCleanTask+0x260>
			HAL_Delay(xDelay);
 8010744:	2064      	movs	r0, #100	@ 0x64
 8010746:	f7f1 fabd 	bl	8001cc4 <HAL_Delay>
 801074a:	e6f0      	b.n	801052e <StartCleanTask+0x42>
		}
		else{
			vTaskDelay( xDelay );
 801074c:	2064      	movs	r0, #100	@ 0x64
 801074e:	f7f7 fe67 	bl	8008420 <vTaskDelay>
		LoadCellInstance.ReadVolumeAndFlow();
 8010752:	e6ec      	b.n	801052e <StartCleanTask+0x42>
			break;
 8010754:	bf00      	nop
		}
	}
}
 8010756:	bf00      	nop
 8010758:	3718      	adds	r7, #24
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	200070c8 	.word	0x200070c8
 8010764:	20009100 	.word	0x20009100
 8010768:	2000913c 	.word	0x2000913c
 801076c:	200093a8 	.word	0x200093a8
 8010770:	2000932c 	.word	0x2000932c

08010774 <StartSafeModeTask>:

void StartSafeModeTask(void *argument){
 8010774:	b580      	push	{r7, lr}
 8010776:	b086      	sub	sp, #24
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 1000 / portTICK_PERIOD_MS;
 801077c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010780:	613b      	str	r3, [r7, #16]
	const TickType_t xDelay2 = 100 / portTICK_PERIOD_MS;
 8010782:	2364      	movs	r3, #100	@ 0x64
 8010784:	60fb      	str	r3, [r7, #12]
	uint8_t type=0;
 8010786:	2300      	movs	r3, #0
 8010788:	75fb      	strb	r3, [r7, #23]
	uint8_t clearedCount=0;
 801078a:	2300      	movs	r3, #0
 801078c:	75bb      	strb	r3, [r7, #22]
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 801078e:	4837      	ldr	r0, [pc, #220]	@ (801086c <StartSafeModeTask+0xf8>)
 8010790:	f7fd f98e 	bl	800dab0 <_ZN8LoadCell17ReadVolumeAndFlowEv>
		if(type==0){
 8010794:	7dfb      	ldrb	r3, [r7, #23]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d12b      	bne.n	80107f2 <StartSafeModeTask+0x7e>
			if(SystemConfig.VolumeAverage+5000<LoadCellInstance.VolumeValue){
 801079a:	4b35      	ldr	r3, [pc, #212]	@ (8010870 <StartSafeModeTask+0xfc>)
 801079c:	699b      	ldr	r3, [r3, #24]
 801079e:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80107a2:	3308      	adds	r3, #8
 80107a4:	ee07 3a90 	vmov	s15, r3
 80107a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80107ac:	4b2f      	ldr	r3, [pc, #188]	@ (801086c <StartSafeModeTask+0xf8>)
 80107ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80107b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80107b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80107ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107be:	bf4c      	ite	mi
 80107c0:	2301      	movmi	r3, #1
 80107c2:	2300      	movpl	r3, #0
 80107c4:	b2db      	uxtb	r3, r3
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d00e      	beq.n	80107e8 <StartSafeModeTask+0x74>
				CommunicationInstance.TogglePump(true);
 80107ca:	2101      	movs	r1, #1
 80107cc:	4829      	ldr	r0, [pc, #164]	@ (8010874 <StartSafeModeTask+0x100>)
 80107ce:	f7fa fd35 	bl	800b23c <_ZN13Communication10TogglePumpEb>
				osThreadTerminate(ThreadStorage.PumpMaxRunThreadId);
 80107d2:	4b29      	ldr	r3, [pc, #164]	@ (8010878 <StartSafeModeTask+0x104>)
 80107d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7f6 f928 	bl	8006a2c <osThreadTerminate>
				ThreadStorage.PumpMaxRunThreadId=NULL;
 80107dc:	4b26      	ldr	r3, [pc, #152]	@ (8010878 <StartSafeModeTask+0x104>)
 80107de:	2200      	movs	r2, #0
 80107e0:	671a      	str	r2, [r3, #112]	@ 0x70
				type++;
 80107e2:	7dfb      	ldrb	r3, [r7, #23]
 80107e4:	3301      	adds	r3, #1
 80107e6:	75fb      	strb	r3, [r7, #23]
			}
			vTaskDelay( xDelay );
 80107e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80107ec:	f7f7 fe18 	bl	8008420 <vTaskDelay>
 80107f0:	e7cd      	b.n	801078e <StartSafeModeTask+0x1a>
		}
		else if(type==1){
 80107f2:	7dfb      	ldrb	r3, [r7, #23]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d1ca      	bne.n	801078e <StartSafeModeTask+0x1a>
			if(SystemConfig.VolumeAverage>LoadCellInstance.VolumeValue|| SystemConfig.VolumeAverage+5000>=LoadCellInstance.VolumeValue){
 80107f8:	4b1d      	ldr	r3, [pc, #116]	@ (8010870 <StartSafeModeTask+0xfc>)
 80107fa:	699b      	ldr	r3, [r3, #24]
 80107fc:	ee07 3a90 	vmov	s15, r3
 8010800:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010804:	4b19      	ldr	r3, [pc, #100]	@ (801086c <StartSafeModeTask+0xf8>)
 8010806:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801080a:	edd3 7a04 	vldr	s15, [r3, #16]
 801080e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010816:	dc12      	bgt.n	801083e <StartSafeModeTask+0xca>
 8010818:	4b15      	ldr	r3, [pc, #84]	@ (8010870 <StartSafeModeTask+0xfc>)
 801081a:	699b      	ldr	r3, [r3, #24]
 801081c:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8010820:	3308      	adds	r3, #8
 8010822:	ee07 3a90 	vmov	s15, r3
 8010826:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801082a:	4b10      	ldr	r3, [pc, #64]	@ (801086c <StartSafeModeTask+0xf8>)
 801082c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010830:	edd3 7a04 	vldr	s15, [r3, #16]
 8010834:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801083c:	db01      	blt.n	8010842 <StartSafeModeTask+0xce>
 801083e:	2301      	movs	r3, #1
 8010840:	e000      	b.n	8010844 <StartSafeModeTask+0xd0>
 8010842:	2300      	movs	r3, #0
 8010844:	2b00      	cmp	r3, #0
 8010846:	d002      	beq.n	801084e <StartSafeModeTask+0xda>
				clearedCount++;
 8010848:	7dbb      	ldrb	r3, [r7, #22]
 801084a:	3301      	adds	r3, #1
 801084c:	75bb      	strb	r3, [r7, #22]
			}
			if(clearedCount>3){
 801084e:	7dbb      	ldrb	r3, [r7, #22]
 8010850:	2b03      	cmp	r3, #3
 8010852:	d907      	bls.n	8010864 <StartSafeModeTask+0xf0>
				CommunicationInstance.TogglePump(false);
 8010854:	2100      	movs	r1, #0
 8010856:	4807      	ldr	r0, [pc, #28]	@ (8010874 <StartSafeModeTask+0x100>)
 8010858:	f7fa fcf0 	bl	800b23c <_ZN13Communication10TogglePumpEb>
				type=0;
 801085c:	2300      	movs	r3, #0
 801085e:	75fb      	strb	r3, [r7, #23]
				clearedCount=0;
 8010860:	2300      	movs	r3, #0
 8010862:	75bb      	strb	r3, [r7, #22]
			}
			vTaskDelay( xDelay2 );
 8010864:	2064      	movs	r0, #100	@ 0x64
 8010866:	f7f7 fddb 	bl	8008420 <vTaskDelay>
		LoadCellInstance.ReadVolumeAndFlow();
 801086a:	e790      	b.n	801078e <StartSafeModeTask+0x1a>
 801086c:	200070c8 	.word	0x200070c8
 8010870:	2000932c 	.word	0x2000932c
 8010874:	20009100 	.word	0x20009100
 8010878:	2000913c 	.word	0x2000913c

0801087c <FixVolume>:
		}
	}
}
void FixVolume(void){
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
	ClearLoadcellParams();
 8010882:	f000 f847 	bl	8010914 <ClearLoadcellParams>
	uint8_t i=0;
 8010886:	2300      	movs	r3, #0
 8010888:	71fb      	strb	r3, [r7, #7]
	float32_t maxReaded=0;
 801088a:	f04f 0300 	mov.w	r3, #0
 801088e:	603b      	str	r3, [r7, #0]
	while(i<10){
 8010890:	e01f      	b.n	80108d2 <FixVolume+0x56>
		HAL_Delay(10);
 8010892:	200a      	movs	r0, #10
 8010894:	f7f1 fa16 	bl	8001cc4 <HAL_Delay>
		LoadCellInstance.ReadVolume(false);
 8010898:	2100      	movs	r1, #0
 801089a:	481c      	ldr	r0, [pc, #112]	@ (801090c <FixVolume+0x90>)
 801089c:	f7fd f9ec 	bl	800dc78 <_ZN8LoadCell10ReadVolumeEb>
		if(LoadCellInstance.LastReadVolumeValue>maxReaded){
 80108a0:	4b1a      	ldr	r3, [pc, #104]	@ (801090c <FixVolume+0x90>)
 80108a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80108a6:	edd3 7a08 	vldr	s15, [r3, #32]
 80108aa:	ed97 7a00 	vldr	s14, [r7]
 80108ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b6:	bf4c      	ite	mi
 80108b8:	2301      	movmi	r3, #1
 80108ba:	2300      	movpl	r3, #0
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d004      	beq.n	80108cc <FixVolume+0x50>
			maxReaded=LoadCellInstance.LastReadVolumeValue;
 80108c2:	4b12      	ldr	r3, [pc, #72]	@ (801090c <FixVolume+0x90>)
 80108c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80108c8:	6a1b      	ldr	r3, [r3, #32]
 80108ca:	603b      	str	r3, [r7, #0]
		}
		i++;
 80108cc:	79fb      	ldrb	r3, [r7, #7]
 80108ce:	3301      	adds	r3, #1
 80108d0:	71fb      	strb	r3, [r7, #7]
	while(i<10){
 80108d2:	79fb      	ldrb	r3, [r7, #7]
 80108d4:	2b09      	cmp	r3, #9
 80108d6:	d9dc      	bls.n	8010892 <FixVolume+0x16>
	}
	if(maxReaded>SystemConfig.VolumeAverage){
 80108d8:	4b0d      	ldr	r3, [pc, #52]	@ (8010910 <FixVolume+0x94>)
 80108da:	699b      	ldr	r3, [r3, #24]
 80108dc:	ee07 3a90 	vmov	s15, r3
 80108e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108e4:	ed97 7a00 	vldr	s14, [r7]
 80108e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f0:	dc00      	bgt.n	80108f4 <FixVolume+0x78>
		SystemConfig.VolumeAverage=maxReaded;
	}
}
 80108f2:	e007      	b.n	8010904 <FixVolume+0x88>
		SystemConfig.VolumeAverage=maxReaded;
 80108f4:	edd7 7a00 	vldr	s15, [r7]
 80108f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80108fc:	ee17 2a90 	vmov	r2, s15
 8010900:	4b03      	ldr	r3, [pc, #12]	@ (8010910 <FixVolume+0x94>)
 8010902:	619a      	str	r2, [r3, #24]
}
 8010904:	bf00      	nop
 8010906:	3708      	adds	r7, #8
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}
 801090c:	200070c8 	.word	0x200070c8
 8010910:	2000932c 	.word	0x2000932c

08010914 <ClearLoadcellParams>:
void ClearLoadcellParams(){
 8010914:	b580      	push	{r7, lr}
 8010916:	af00      	add	r7, sp, #0
	LoadCellInstance.LastFlowValue=0;
 8010918:	4b09      	ldr	r3, [pc, #36]	@ (8010940 <ClearLoadcellParams+0x2c>)
 801091a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801091e:	461a      	mov	r2, r3
 8010920:	f04f 0300 	mov.w	r3, #0
 8010924:	6253      	str	r3, [r2, #36]	@ 0x24
	LoadCellInstance.LastVolumeValue=0;
 8010926:	4b06      	ldr	r3, [pc, #24]	@ (8010940 <ClearLoadcellParams+0x2c>)
 8010928:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801092c:	461a      	mov	r2, r3
 801092e:	f04f 0300 	mov.w	r3, #0
 8010932:	6293      	str	r3, [r2, #40]	@ 0x28
	LoadCellInstance.ClearParams();
 8010934:	4802      	ldr	r0, [pc, #8]	@ (8010940 <ClearLoadcellParams+0x2c>)
 8010936:	f7fd fda7 	bl	800e488 <_ZN8LoadCell11ClearParamsEv>
}
 801093a:	bf00      	nop
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	200070c8 	.word	0x200070c8

08010944 <HasCalibration>:
FlashManager GetFlashManager(){
	return FlashManagerInstance;
}
uint8_t HasCalibration(void){
 8010944:	b480      	push	{r7}
 8010946:	af00      	add	r7, sp, #0

	if(SystemConfig.FlowRate<2 || SystemConfig.VolumeRate<2){
 8010948:	4b0d      	ldr	r3, [pc, #52]	@ (8010980 <HasCalibration+0x3c>)
 801094a:	edd3 7a08 	vldr	s15, [r3, #32]
 801094e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8010952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801095a:	d409      	bmi.n	8010970 <HasCalibration+0x2c>
 801095c:	4b08      	ldr	r3, [pc, #32]	@ (8010980 <HasCalibration+0x3c>)
 801095e:	edd3 7a07 	vldr	s15, [r3, #28]
 8010962:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8010966:	eef4 7ac7 	vcmpe.f32	s15, s14
 801096a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801096e:	d501      	bpl.n	8010974 <HasCalibration+0x30>
		return 0;
 8010970:	2300      	movs	r3, #0
 8010972:	e000      	b.n	8010976 <HasCalibration+0x32>
	}
	return 1;
 8010974:	2301      	movs	r3, #1
}
 8010976:	4618      	mov	r0, r3
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr
 8010980:	2000932c 	.word	0x2000932c

08010984 <HasLoadcell>:
uint8_t HasLoadcell(bool read){
 8010984:	b580      	push	{r7, lr}
 8010986:	b082      	sub	sp, #8
 8010988:	af00      	add	r7, sp, #0
 801098a:	4603      	mov	r3, r0
 801098c:	71fb      	strb	r3, [r7, #7]

	if(read){
 801098e:	79fb      	ldrb	r3, [r7, #7]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d002      	beq.n	801099a <HasLoadcell+0x16>
		LoadCellInstance.ReadVolumeAndFlow();
 8010994:	480d      	ldr	r0, [pc, #52]	@ (80109cc <HasLoadcell+0x48>)
 8010996:	f7fd f88b 	bl	800dab0 <_ZN8LoadCell17ReadVolumeAndFlowEv>
	}
	if(LoadCellInstance.VolumeValue==1310680){
 801099a:	4b0c      	ldr	r3, [pc, #48]	@ (80109cc <HasLoadcell+0x48>)
 801099c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80109a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80109a4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80109d0 <HasLoadcell+0x4c>
 80109a8:	eef4 7a47 	vcmp.f32	s15, s14
 80109ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109b0:	bf0c      	ite	eq
 80109b2:	2301      	moveq	r3, #1
 80109b4:	2300      	movne	r3, #0
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d001      	beq.n	80109c0 <HasLoadcell+0x3c>
		return 0;
 80109bc:	2300      	movs	r3, #0
 80109be:	e000      	b.n	80109c2 <HasLoadcell+0x3e>
	}
	return 1;
 80109c0:	2301      	movs	r3, #1
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3708      	adds	r7, #8
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
 80109ca:	bf00      	nop
 80109cc:	200070c8 	.word	0x200070c8
 80109d0:	499ffec0 	.word	0x499ffec0

080109d4 <HasFirstEmg>:
uint8_t HasFirstEmg(bool read){
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
 80109da:	4603      	mov	r3, r0
 80109dc:	71fb      	strb	r3, [r7, #7]

	if(read){
 80109de:	79fb      	ldrb	r3, [r7, #7]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d003      	beq.n	80109ec <HasFirstEmg+0x18>
		EmgInstance.FirstEmgRead(false);
 80109e4:	2100      	movs	r1, #0
 80109e6:	480a      	ldr	r0, [pc, #40]	@ (8010a10 <HasFirstEmg+0x3c>)
 80109e8:	f7fb f804 	bl	800b9f4 <_ZN3Emg12FirstEmgReadEb>
	}
	if(EmgInstance.NonFilterFirstEmg==65535||EmgInstance.NonFilterFirstEmg==0){
 80109ec:	4b08      	ldr	r3, [pc, #32]	@ (8010a10 <HasFirstEmg+0x3c>)
 80109ee:	6a1b      	ldr	r3, [r3, #32]
 80109f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80109f4:	4293      	cmp	r3, r2
 80109f6:	d003      	beq.n	8010a00 <HasFirstEmg+0x2c>
 80109f8:	4b05      	ldr	r3, [pc, #20]	@ (8010a10 <HasFirstEmg+0x3c>)
 80109fa:	6a1b      	ldr	r3, [r3, #32]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d101      	bne.n	8010a04 <HasFirstEmg+0x30>
		return 0;
 8010a00:	2300      	movs	r3, #0
 8010a02:	e000      	b.n	8010a06 <HasFirstEmg+0x32>
	}
	return 1;
 8010a04:	2301      	movs	r3, #1
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3708      	adds	r7, #8
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	20005084 	.word	0x20005084

08010a14 <HasSecondEmg>:
uint8_t HasSecondEmg(bool read){
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	71fb      	strb	r3, [r7, #7]
	if(read){
 8010a1e:	79fb      	ldrb	r3, [r7, #7]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d003      	beq.n	8010a2c <HasSecondEmg+0x18>
		EmgInstance.SecondEmgRead(false);
 8010a24:	2100      	movs	r1, #0
 8010a26:	480a      	ldr	r0, [pc, #40]	@ (8010a50 <HasSecondEmg+0x3c>)
 8010a28:	f7fb f85c 	bl	800bae4 <_ZN3Emg13SecondEmgReadEb>
	}
	if(EmgInstance.NonFilterSecondEmg==65535||EmgInstance.NonFilterSecondEmg==0){
 8010a2c:	4b08      	ldr	r3, [pc, #32]	@ (8010a50 <HasSecondEmg+0x3c>)
 8010a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a34:	4293      	cmp	r3, r2
 8010a36:	d003      	beq.n	8010a40 <HasSecondEmg+0x2c>
 8010a38:	4b05      	ldr	r3, [pc, #20]	@ (8010a50 <HasSecondEmg+0x3c>)
 8010a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d101      	bne.n	8010a44 <HasSecondEmg+0x30>
		return 0;
 8010a40:	2300      	movs	r3, #0
 8010a42:	e000      	b.n	8010a46 <HasSecondEmg+0x32>
	}
	return 1;
 8010a44:	2301      	movs	r3, #1
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	20005084 	.word	0x20005084

08010a54 <_Z41__static_initialization_and_destruction_0v>:
 8010a54:	b580      	push	{r7, lr}
 8010a56:	af00      	add	r7, sp, #0
Emg EmgInstance;
 8010a58:	4808      	ldr	r0, [pc, #32]	@ (8010a7c <_Z41__static_initialization_and_destruction_0v+0x28>)
 8010a5a:	f7fa ff85 	bl	800b968 <_ZN3EmgC1Ev>
LoadCell LoadCellInstance;
 8010a5e:	4808      	ldr	r0, [pc, #32]	@ (8010a80 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8010a60:	f7fc ffd4 	bl	800da0c <_ZN8LoadCellC1Ev>
Communication CommunicationInstance;
 8010a64:	4807      	ldr	r0, [pc, #28]	@ (8010a84 <_Z41__static_initialization_and_destruction_0v+0x30>)
 8010a66:	f7f9 fb47 	bl	800a0f8 <_ZN13CommunicationC1Ev>
FlashManager FlashManagerInstance;
 8010a6a:	4807      	ldr	r0, [pc, #28]	@ (8010a88 <_Z41__static_initialization_and_destruction_0v+0x34>)
 8010a6c:	f7fb fb88 	bl	800c180 <_ZN12FlashManagerC1Ev>
SystemConfigStruct SystemConfig;
 8010a70:	4806      	ldr	r0, [pc, #24]	@ (8010a8c <_Z41__static_initialization_and_destruction_0v+0x38>)
 8010a72:	f7fd fe2b 	bl	800e6cc <_ZN18SystemConfigStructC1Ev>
}
 8010a76:	bf00      	nop
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	20005084 	.word	0x20005084
 8010a80:	200070c8 	.word	0x200070c8
 8010a84:	20009100 	.word	0x20009100
 8010a88:	20009120 	.word	0x20009120
 8010a8c:	2000932c 	.word	0x2000932c

08010a90 <_Z41__static_initialization_and_destruction_1v>:
 8010a90:	b580      	push	{r7, lr}
 8010a92:	af00      	add	r7, sp, #0
FlashManager FlashManagerInstance;
 8010a94:	4806      	ldr	r0, [pc, #24]	@ (8010ab0 <_Z41__static_initialization_and_destruction_1v+0x20>)
 8010a96:	f7fb fbc3 	bl	800c220 <_ZN12FlashManagerD1Ev>
Communication CommunicationInstance;
 8010a9a:	4806      	ldr	r0, [pc, #24]	@ (8010ab4 <_Z41__static_initialization_and_destruction_1v+0x24>)
 8010a9c:	f7f9 fb44 	bl	800a128 <_ZN13CommunicationD1Ev>
LoadCell LoadCellInstance;
 8010aa0:	4805      	ldr	r0, [pc, #20]	@ (8010ab8 <_Z41__static_initialization_and_destruction_1v+0x28>)
 8010aa2:	f7fc ffc3 	bl	800da2c <_ZN8LoadCellD1Ev>
Emg EmgInstance;
 8010aa6:	4805      	ldr	r0, [pc, #20]	@ (8010abc <_Z41__static_initialization_and_destruction_1v+0x2c>)
 8010aa8:	f7fa ff82 	bl	800b9b0 <_ZN3EmgD1Ev>
}
 8010aac:	bf00      	nop
 8010aae:	bd80      	pop	{r7, pc}
 8010ab0:	20009120 	.word	0x20009120
 8010ab4:	20009100 	.word	0x20009100
 8010ab8:	200070c8 	.word	0x200070c8
 8010abc:	20005084 	.word	0x20005084

08010ac0 <_GLOBAL__sub_I_sendCounter>:
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	f7ff ffc6 	bl	8010a54 <_Z41__static_initialization_and_destruction_0v>
 8010ac8:	bd80      	pop	{r7, pc}

08010aca <_GLOBAL__sub_D_sendCounter>:
 8010aca:	b580      	push	{r7, lr}
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	f7ff ffdf 	bl	8010a90 <_Z41__static_initialization_and_destruction_1v>
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <_ZdlPvj>:
 8010ad4:	f000 b800 	b.w	8010ad8 <_ZdlPv>

08010ad8 <_ZdlPv>:
 8010ad8:	f000 b88e 	b.w	8010bf8 <free>

08010adc <ceilf>:
 8010adc:	ee10 3a10 	vmov	r3, s0
 8010ae0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010ae4:	3a7f      	subs	r2, #127	@ 0x7f
 8010ae6:	2a16      	cmp	r2, #22
 8010ae8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010aec:	dc2b      	bgt.n	8010b46 <ceilf+0x6a>
 8010aee:	2a00      	cmp	r2, #0
 8010af0:	da12      	bge.n	8010b18 <ceilf+0x3c>
 8010af2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010b58 <ceilf+0x7c>
 8010af6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010afa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b02:	dd06      	ble.n	8010b12 <ceilf+0x36>
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	db24      	blt.n	8010b52 <ceilf+0x76>
 8010b08:	2900      	cmp	r1, #0
 8010b0a:	bf14      	ite	ne
 8010b0c:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 8010b10:	2300      	moveq	r3, #0
 8010b12:	ee00 3a10 	vmov	s0, r3
 8010b16:	4770      	bx	lr
 8010b18:	4910      	ldr	r1, [pc, #64]	@ (8010b5c <ceilf+0x80>)
 8010b1a:	4111      	asrs	r1, r2
 8010b1c:	420b      	tst	r3, r1
 8010b1e:	d0fa      	beq.n	8010b16 <ceilf+0x3a>
 8010b20:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010b58 <ceilf+0x7c>
 8010b24:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b28:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b30:	ddef      	ble.n	8010b12 <ceilf+0x36>
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	bfc2      	ittt	gt
 8010b36:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 8010b3a:	fa40 f202 	asrgt.w	r2, r0, r2
 8010b3e:	189b      	addgt	r3, r3, r2
 8010b40:	ea23 0301 	bic.w	r3, r3, r1
 8010b44:	e7e5      	b.n	8010b12 <ceilf+0x36>
 8010b46:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010b4a:	d3e4      	bcc.n	8010b16 <ceilf+0x3a>
 8010b4c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010b50:	4770      	bx	lr
 8010b52:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010b56:	e7dc      	b.n	8010b12 <ceilf+0x36>
 8010b58:	7149f2ca 	.word	0x7149f2ca
 8010b5c:	007fffff 	.word	0x007fffff

08010b60 <floorf>:
 8010b60:	ee10 3a10 	vmov	r3, s0
 8010b64:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010b68:	3a7f      	subs	r2, #127	@ 0x7f
 8010b6a:	2a16      	cmp	r2, #22
 8010b6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010b70:	dc2b      	bgt.n	8010bca <floorf+0x6a>
 8010b72:	2a00      	cmp	r2, #0
 8010b74:	da12      	bge.n	8010b9c <floorf+0x3c>
 8010b76:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010bdc <floorf+0x7c>
 8010b7a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b7e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b86:	dd06      	ble.n	8010b96 <floorf+0x36>
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	da24      	bge.n	8010bd6 <floorf+0x76>
 8010b8c:	2900      	cmp	r1, #0
 8010b8e:	4b14      	ldr	r3, [pc, #80]	@ (8010be0 <floorf+0x80>)
 8010b90:	bf08      	it	eq
 8010b92:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010b96:	ee00 3a10 	vmov	s0, r3
 8010b9a:	4770      	bx	lr
 8010b9c:	4911      	ldr	r1, [pc, #68]	@ (8010be4 <floorf+0x84>)
 8010b9e:	4111      	asrs	r1, r2
 8010ba0:	420b      	tst	r3, r1
 8010ba2:	d0fa      	beq.n	8010b9a <floorf+0x3a>
 8010ba4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010bdc <floorf+0x7c>
 8010ba8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010bac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb4:	ddef      	ble.n	8010b96 <floorf+0x36>
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	bfbe      	ittt	lt
 8010bba:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010bbe:	fa40 f202 	asrlt.w	r2, r0, r2
 8010bc2:	189b      	addlt	r3, r3, r2
 8010bc4:	ea23 0301 	bic.w	r3, r3, r1
 8010bc8:	e7e5      	b.n	8010b96 <floorf+0x36>
 8010bca:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010bce:	d3e4      	bcc.n	8010b9a <floorf+0x3a>
 8010bd0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010bd4:	4770      	bx	lr
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	e7dd      	b.n	8010b96 <floorf+0x36>
 8010bda:	bf00      	nop
 8010bdc:	7149f2ca 	.word	0x7149f2ca
 8010be0:	bf800000 	.word	0xbf800000
 8010be4:	007fffff 	.word	0x007fffff

08010be8 <malloc>:
 8010be8:	4b02      	ldr	r3, [pc, #8]	@ (8010bf4 <malloc+0xc>)
 8010bea:	4601      	mov	r1, r0
 8010bec:	6818      	ldr	r0, [r3, #0]
 8010bee:	f000 b82d 	b.w	8010c4c <_malloc_r>
 8010bf2:	bf00      	nop
 8010bf4:	2000005c 	.word	0x2000005c

08010bf8 <free>:
 8010bf8:	4b02      	ldr	r3, [pc, #8]	@ (8010c04 <free+0xc>)
 8010bfa:	4601      	mov	r1, r0
 8010bfc:	6818      	ldr	r0, [r3, #0]
 8010bfe:	f000 baad 	b.w	801115c <_free_r>
 8010c02:	bf00      	nop
 8010c04:	2000005c 	.word	0x2000005c

08010c08 <sbrk_aligned>:
 8010c08:	b570      	push	{r4, r5, r6, lr}
 8010c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8010c48 <sbrk_aligned+0x40>)
 8010c0c:	460c      	mov	r4, r1
 8010c0e:	6831      	ldr	r1, [r6, #0]
 8010c10:	4605      	mov	r5, r0
 8010c12:	b911      	cbnz	r1, 8010c1a <sbrk_aligned+0x12>
 8010c14:	f000 fa26 	bl	8011064 <_sbrk_r>
 8010c18:	6030      	str	r0, [r6, #0]
 8010c1a:	4621      	mov	r1, r4
 8010c1c:	4628      	mov	r0, r5
 8010c1e:	f000 fa21 	bl	8011064 <_sbrk_r>
 8010c22:	1c43      	adds	r3, r0, #1
 8010c24:	d103      	bne.n	8010c2e <sbrk_aligned+0x26>
 8010c26:	f04f 34ff 	mov.w	r4, #4294967295
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	bd70      	pop	{r4, r5, r6, pc}
 8010c2e:	1cc4      	adds	r4, r0, #3
 8010c30:	f024 0403 	bic.w	r4, r4, #3
 8010c34:	42a0      	cmp	r0, r4
 8010c36:	d0f8      	beq.n	8010c2a <sbrk_aligned+0x22>
 8010c38:	1a21      	subs	r1, r4, r0
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	f000 fa12 	bl	8011064 <_sbrk_r>
 8010c40:	3001      	adds	r0, #1
 8010c42:	d1f2      	bne.n	8010c2a <sbrk_aligned+0x22>
 8010c44:	e7ef      	b.n	8010c26 <sbrk_aligned+0x1e>
 8010c46:	bf00      	nop
 8010c48:	20009440 	.word	0x20009440

08010c4c <_malloc_r>:
 8010c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c50:	1ccd      	adds	r5, r1, #3
 8010c52:	f025 0503 	bic.w	r5, r5, #3
 8010c56:	3508      	adds	r5, #8
 8010c58:	2d0c      	cmp	r5, #12
 8010c5a:	bf38      	it	cc
 8010c5c:	250c      	movcc	r5, #12
 8010c5e:	2d00      	cmp	r5, #0
 8010c60:	4606      	mov	r6, r0
 8010c62:	db01      	blt.n	8010c68 <_malloc_r+0x1c>
 8010c64:	42a9      	cmp	r1, r5
 8010c66:	d904      	bls.n	8010c72 <_malloc_r+0x26>
 8010c68:	230c      	movs	r3, #12
 8010c6a:	6033      	str	r3, [r6, #0]
 8010c6c:	2000      	movs	r0, #0
 8010c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010d48 <_malloc_r+0xfc>
 8010c76:	f000 f869 	bl	8010d4c <__malloc_lock>
 8010c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8010c7e:	461c      	mov	r4, r3
 8010c80:	bb44      	cbnz	r4, 8010cd4 <_malloc_r+0x88>
 8010c82:	4629      	mov	r1, r5
 8010c84:	4630      	mov	r0, r6
 8010c86:	f7ff ffbf 	bl	8010c08 <sbrk_aligned>
 8010c8a:	1c43      	adds	r3, r0, #1
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	d158      	bne.n	8010d42 <_malloc_r+0xf6>
 8010c90:	f8d8 4000 	ldr.w	r4, [r8]
 8010c94:	4627      	mov	r7, r4
 8010c96:	2f00      	cmp	r7, #0
 8010c98:	d143      	bne.n	8010d22 <_malloc_r+0xd6>
 8010c9a:	2c00      	cmp	r4, #0
 8010c9c:	d04b      	beq.n	8010d36 <_malloc_r+0xea>
 8010c9e:	6823      	ldr	r3, [r4, #0]
 8010ca0:	4639      	mov	r1, r7
 8010ca2:	4630      	mov	r0, r6
 8010ca4:	eb04 0903 	add.w	r9, r4, r3
 8010ca8:	f000 f9dc 	bl	8011064 <_sbrk_r>
 8010cac:	4581      	cmp	r9, r0
 8010cae:	d142      	bne.n	8010d36 <_malloc_r+0xea>
 8010cb0:	6821      	ldr	r1, [r4, #0]
 8010cb2:	1a6d      	subs	r5, r5, r1
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	4630      	mov	r0, r6
 8010cb8:	f7ff ffa6 	bl	8010c08 <sbrk_aligned>
 8010cbc:	3001      	adds	r0, #1
 8010cbe:	d03a      	beq.n	8010d36 <_malloc_r+0xea>
 8010cc0:	6823      	ldr	r3, [r4, #0]
 8010cc2:	442b      	add	r3, r5
 8010cc4:	6023      	str	r3, [r4, #0]
 8010cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8010cca:	685a      	ldr	r2, [r3, #4]
 8010ccc:	bb62      	cbnz	r2, 8010d28 <_malloc_r+0xdc>
 8010cce:	f8c8 7000 	str.w	r7, [r8]
 8010cd2:	e00f      	b.n	8010cf4 <_malloc_r+0xa8>
 8010cd4:	6822      	ldr	r2, [r4, #0]
 8010cd6:	1b52      	subs	r2, r2, r5
 8010cd8:	d420      	bmi.n	8010d1c <_malloc_r+0xd0>
 8010cda:	2a0b      	cmp	r2, #11
 8010cdc:	d917      	bls.n	8010d0e <_malloc_r+0xc2>
 8010cde:	1961      	adds	r1, r4, r5
 8010ce0:	42a3      	cmp	r3, r4
 8010ce2:	6025      	str	r5, [r4, #0]
 8010ce4:	bf18      	it	ne
 8010ce6:	6059      	strne	r1, [r3, #4]
 8010ce8:	6863      	ldr	r3, [r4, #4]
 8010cea:	bf08      	it	eq
 8010cec:	f8c8 1000 	streq.w	r1, [r8]
 8010cf0:	5162      	str	r2, [r4, r5]
 8010cf2:	604b      	str	r3, [r1, #4]
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	f000 f82f 	bl	8010d58 <__malloc_unlock>
 8010cfa:	f104 000b 	add.w	r0, r4, #11
 8010cfe:	1d23      	adds	r3, r4, #4
 8010d00:	f020 0007 	bic.w	r0, r0, #7
 8010d04:	1ac2      	subs	r2, r0, r3
 8010d06:	bf1c      	itt	ne
 8010d08:	1a1b      	subne	r3, r3, r0
 8010d0a:	50a3      	strne	r3, [r4, r2]
 8010d0c:	e7af      	b.n	8010c6e <_malloc_r+0x22>
 8010d0e:	6862      	ldr	r2, [r4, #4]
 8010d10:	42a3      	cmp	r3, r4
 8010d12:	bf0c      	ite	eq
 8010d14:	f8c8 2000 	streq.w	r2, [r8]
 8010d18:	605a      	strne	r2, [r3, #4]
 8010d1a:	e7eb      	b.n	8010cf4 <_malloc_r+0xa8>
 8010d1c:	4623      	mov	r3, r4
 8010d1e:	6864      	ldr	r4, [r4, #4]
 8010d20:	e7ae      	b.n	8010c80 <_malloc_r+0x34>
 8010d22:	463c      	mov	r4, r7
 8010d24:	687f      	ldr	r7, [r7, #4]
 8010d26:	e7b6      	b.n	8010c96 <_malloc_r+0x4a>
 8010d28:	461a      	mov	r2, r3
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	42a3      	cmp	r3, r4
 8010d2e:	d1fb      	bne.n	8010d28 <_malloc_r+0xdc>
 8010d30:	2300      	movs	r3, #0
 8010d32:	6053      	str	r3, [r2, #4]
 8010d34:	e7de      	b.n	8010cf4 <_malloc_r+0xa8>
 8010d36:	230c      	movs	r3, #12
 8010d38:	6033      	str	r3, [r6, #0]
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	f000 f80c 	bl	8010d58 <__malloc_unlock>
 8010d40:	e794      	b.n	8010c6c <_malloc_r+0x20>
 8010d42:	6005      	str	r5, [r0, #0]
 8010d44:	e7d6      	b.n	8010cf4 <_malloc_r+0xa8>
 8010d46:	bf00      	nop
 8010d48:	20009444 	.word	0x20009444

08010d4c <__malloc_lock>:
 8010d4c:	4801      	ldr	r0, [pc, #4]	@ (8010d54 <__malloc_lock+0x8>)
 8010d4e:	f000 b9d6 	b.w	80110fe <__retarget_lock_acquire_recursive>
 8010d52:	bf00      	nop
 8010d54:	20009588 	.word	0x20009588

08010d58 <__malloc_unlock>:
 8010d58:	4801      	ldr	r0, [pc, #4]	@ (8010d60 <__malloc_unlock+0x8>)
 8010d5a:	f000 b9d1 	b.w	8011100 <__retarget_lock_release_recursive>
 8010d5e:	bf00      	nop
 8010d60:	20009588 	.word	0x20009588

08010d64 <rand>:
 8010d64:	4b16      	ldr	r3, [pc, #88]	@ (8010dc0 <rand+0x5c>)
 8010d66:	b510      	push	{r4, lr}
 8010d68:	681c      	ldr	r4, [r3, #0]
 8010d6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d6c:	b9b3      	cbnz	r3, 8010d9c <rand+0x38>
 8010d6e:	2018      	movs	r0, #24
 8010d70:	f7ff ff3a 	bl	8010be8 <malloc>
 8010d74:	4602      	mov	r2, r0
 8010d76:	6320      	str	r0, [r4, #48]	@ 0x30
 8010d78:	b920      	cbnz	r0, 8010d84 <rand+0x20>
 8010d7a:	4b12      	ldr	r3, [pc, #72]	@ (8010dc4 <rand+0x60>)
 8010d7c:	4812      	ldr	r0, [pc, #72]	@ (8010dc8 <rand+0x64>)
 8010d7e:	2152      	movs	r1, #82	@ 0x52
 8010d80:	f000 f9ce 	bl	8011120 <__assert_func>
 8010d84:	4911      	ldr	r1, [pc, #68]	@ (8010dcc <rand+0x68>)
 8010d86:	4b12      	ldr	r3, [pc, #72]	@ (8010dd0 <rand+0x6c>)
 8010d88:	e9c0 1300 	strd	r1, r3, [r0]
 8010d8c:	4b11      	ldr	r3, [pc, #68]	@ (8010dd4 <rand+0x70>)
 8010d8e:	6083      	str	r3, [r0, #8]
 8010d90:	230b      	movs	r3, #11
 8010d92:	8183      	strh	r3, [r0, #12]
 8010d94:	2100      	movs	r1, #0
 8010d96:	2001      	movs	r0, #1
 8010d98:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010d9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010d9e:	480e      	ldr	r0, [pc, #56]	@ (8010dd8 <rand+0x74>)
 8010da0:	690b      	ldr	r3, [r1, #16]
 8010da2:	694c      	ldr	r4, [r1, #20]
 8010da4:	4a0d      	ldr	r2, [pc, #52]	@ (8010ddc <rand+0x78>)
 8010da6:	4358      	muls	r0, r3
 8010da8:	fb02 0004 	mla	r0, r2, r4, r0
 8010dac:	fba3 3202 	umull	r3, r2, r3, r2
 8010db0:	3301      	adds	r3, #1
 8010db2:	eb40 0002 	adc.w	r0, r0, r2
 8010db6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010dba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010dbe:	bd10      	pop	{r4, pc}
 8010dc0:	2000005c 	.word	0x2000005c
 8010dc4:	08011da4 	.word	0x08011da4
 8010dc8:	08011dbb 	.word	0x08011dbb
 8010dcc:	abcd330e 	.word	0xabcd330e
 8010dd0:	e66d1234 	.word	0xe66d1234
 8010dd4:	0005deec 	.word	0x0005deec
 8010dd8:	5851f42d 	.word	0x5851f42d
 8010ddc:	4c957f2d 	.word	0x4c957f2d

08010de0 <std>:
 8010de0:	2300      	movs	r3, #0
 8010de2:	b510      	push	{r4, lr}
 8010de4:	4604      	mov	r4, r0
 8010de6:	e9c0 3300 	strd	r3, r3, [r0]
 8010dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010dee:	6083      	str	r3, [r0, #8]
 8010df0:	8181      	strh	r1, [r0, #12]
 8010df2:	6643      	str	r3, [r0, #100]	@ 0x64
 8010df4:	81c2      	strh	r2, [r0, #14]
 8010df6:	6183      	str	r3, [r0, #24]
 8010df8:	4619      	mov	r1, r3
 8010dfa:	2208      	movs	r2, #8
 8010dfc:	305c      	adds	r0, #92	@ 0x5c
 8010dfe:	f000 f8f4 	bl	8010fea <memset>
 8010e02:	4b0d      	ldr	r3, [pc, #52]	@ (8010e38 <std+0x58>)
 8010e04:	6263      	str	r3, [r4, #36]	@ 0x24
 8010e06:	4b0d      	ldr	r3, [pc, #52]	@ (8010e3c <std+0x5c>)
 8010e08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8010e40 <std+0x60>)
 8010e0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8010e44 <std+0x64>)
 8010e10:	6323      	str	r3, [r4, #48]	@ 0x30
 8010e12:	4b0d      	ldr	r3, [pc, #52]	@ (8010e48 <std+0x68>)
 8010e14:	6224      	str	r4, [r4, #32]
 8010e16:	429c      	cmp	r4, r3
 8010e18:	d006      	beq.n	8010e28 <std+0x48>
 8010e1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010e1e:	4294      	cmp	r4, r2
 8010e20:	d002      	beq.n	8010e28 <std+0x48>
 8010e22:	33d0      	adds	r3, #208	@ 0xd0
 8010e24:	429c      	cmp	r4, r3
 8010e26:	d105      	bne.n	8010e34 <std+0x54>
 8010e28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e30:	f000 b964 	b.w	80110fc <__retarget_lock_init_recursive>
 8010e34:	bd10      	pop	{r4, pc}
 8010e36:	bf00      	nop
 8010e38:	08010f65 	.word	0x08010f65
 8010e3c:	08010f87 	.word	0x08010f87
 8010e40:	08010fbf 	.word	0x08010fbf
 8010e44:	08010fe3 	.word	0x08010fe3
 8010e48:	20009448 	.word	0x20009448

08010e4c <stdio_exit_handler>:
 8010e4c:	4a02      	ldr	r2, [pc, #8]	@ (8010e58 <stdio_exit_handler+0xc>)
 8010e4e:	4903      	ldr	r1, [pc, #12]	@ (8010e5c <stdio_exit_handler+0x10>)
 8010e50:	4803      	ldr	r0, [pc, #12]	@ (8010e60 <stdio_exit_handler+0x14>)
 8010e52:	f000 b869 	b.w	8010f28 <_fwalk_sglue>
 8010e56:	bf00      	nop
 8010e58:	20000050 	.word	0x20000050
 8010e5c:	080112f9 	.word	0x080112f9
 8010e60:	20000060 	.word	0x20000060

08010e64 <cleanup_stdio>:
 8010e64:	6841      	ldr	r1, [r0, #4]
 8010e66:	4b0c      	ldr	r3, [pc, #48]	@ (8010e98 <cleanup_stdio+0x34>)
 8010e68:	4299      	cmp	r1, r3
 8010e6a:	b510      	push	{r4, lr}
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	d001      	beq.n	8010e74 <cleanup_stdio+0x10>
 8010e70:	f000 fa42 	bl	80112f8 <_fflush_r>
 8010e74:	68a1      	ldr	r1, [r4, #8]
 8010e76:	4b09      	ldr	r3, [pc, #36]	@ (8010e9c <cleanup_stdio+0x38>)
 8010e78:	4299      	cmp	r1, r3
 8010e7a:	d002      	beq.n	8010e82 <cleanup_stdio+0x1e>
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	f000 fa3b 	bl	80112f8 <_fflush_r>
 8010e82:	68e1      	ldr	r1, [r4, #12]
 8010e84:	4b06      	ldr	r3, [pc, #24]	@ (8010ea0 <cleanup_stdio+0x3c>)
 8010e86:	4299      	cmp	r1, r3
 8010e88:	d004      	beq.n	8010e94 <cleanup_stdio+0x30>
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e90:	f000 ba32 	b.w	80112f8 <_fflush_r>
 8010e94:	bd10      	pop	{r4, pc}
 8010e96:	bf00      	nop
 8010e98:	20009448 	.word	0x20009448
 8010e9c:	200094b0 	.word	0x200094b0
 8010ea0:	20009518 	.word	0x20009518

08010ea4 <global_stdio_init.part.0>:
 8010ea4:	b510      	push	{r4, lr}
 8010ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8010ed4 <global_stdio_init.part.0+0x30>)
 8010ea8:	4c0b      	ldr	r4, [pc, #44]	@ (8010ed8 <global_stdio_init.part.0+0x34>)
 8010eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8010edc <global_stdio_init.part.0+0x38>)
 8010eac:	601a      	str	r2, [r3, #0]
 8010eae:	4620      	mov	r0, r4
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	2104      	movs	r1, #4
 8010eb4:	f7ff ff94 	bl	8010de0 <std>
 8010eb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	2109      	movs	r1, #9
 8010ec0:	f7ff ff8e 	bl	8010de0 <std>
 8010ec4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010ec8:	2202      	movs	r2, #2
 8010eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ece:	2112      	movs	r1, #18
 8010ed0:	f7ff bf86 	b.w	8010de0 <std>
 8010ed4:	20009580 	.word	0x20009580
 8010ed8:	20009448 	.word	0x20009448
 8010edc:	08010e4d 	.word	0x08010e4d

08010ee0 <__sfp_lock_acquire>:
 8010ee0:	4801      	ldr	r0, [pc, #4]	@ (8010ee8 <__sfp_lock_acquire+0x8>)
 8010ee2:	f000 b90c 	b.w	80110fe <__retarget_lock_acquire_recursive>
 8010ee6:	bf00      	nop
 8010ee8:	20009589 	.word	0x20009589

08010eec <__sfp_lock_release>:
 8010eec:	4801      	ldr	r0, [pc, #4]	@ (8010ef4 <__sfp_lock_release+0x8>)
 8010eee:	f000 b907 	b.w	8011100 <__retarget_lock_release_recursive>
 8010ef2:	bf00      	nop
 8010ef4:	20009589 	.word	0x20009589

08010ef8 <__sinit>:
 8010ef8:	b510      	push	{r4, lr}
 8010efa:	4604      	mov	r4, r0
 8010efc:	f7ff fff0 	bl	8010ee0 <__sfp_lock_acquire>
 8010f00:	6a23      	ldr	r3, [r4, #32]
 8010f02:	b11b      	cbz	r3, 8010f0c <__sinit+0x14>
 8010f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f08:	f7ff bff0 	b.w	8010eec <__sfp_lock_release>
 8010f0c:	4b04      	ldr	r3, [pc, #16]	@ (8010f20 <__sinit+0x28>)
 8010f0e:	6223      	str	r3, [r4, #32]
 8010f10:	4b04      	ldr	r3, [pc, #16]	@ (8010f24 <__sinit+0x2c>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d1f5      	bne.n	8010f04 <__sinit+0xc>
 8010f18:	f7ff ffc4 	bl	8010ea4 <global_stdio_init.part.0>
 8010f1c:	e7f2      	b.n	8010f04 <__sinit+0xc>
 8010f1e:	bf00      	nop
 8010f20:	08010e65 	.word	0x08010e65
 8010f24:	20009580 	.word	0x20009580

08010f28 <_fwalk_sglue>:
 8010f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f2c:	4607      	mov	r7, r0
 8010f2e:	4688      	mov	r8, r1
 8010f30:	4614      	mov	r4, r2
 8010f32:	2600      	movs	r6, #0
 8010f34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f38:	f1b9 0901 	subs.w	r9, r9, #1
 8010f3c:	d505      	bpl.n	8010f4a <_fwalk_sglue+0x22>
 8010f3e:	6824      	ldr	r4, [r4, #0]
 8010f40:	2c00      	cmp	r4, #0
 8010f42:	d1f7      	bne.n	8010f34 <_fwalk_sglue+0xc>
 8010f44:	4630      	mov	r0, r6
 8010f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f4a:	89ab      	ldrh	r3, [r5, #12]
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d907      	bls.n	8010f60 <_fwalk_sglue+0x38>
 8010f50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f54:	3301      	adds	r3, #1
 8010f56:	d003      	beq.n	8010f60 <_fwalk_sglue+0x38>
 8010f58:	4629      	mov	r1, r5
 8010f5a:	4638      	mov	r0, r7
 8010f5c:	47c0      	blx	r8
 8010f5e:	4306      	orrs	r6, r0
 8010f60:	3568      	adds	r5, #104	@ 0x68
 8010f62:	e7e9      	b.n	8010f38 <_fwalk_sglue+0x10>

08010f64 <__sread>:
 8010f64:	b510      	push	{r4, lr}
 8010f66:	460c      	mov	r4, r1
 8010f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f6c:	f000 f868 	bl	8011040 <_read_r>
 8010f70:	2800      	cmp	r0, #0
 8010f72:	bfab      	itete	ge
 8010f74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010f76:	89a3      	ldrhlt	r3, [r4, #12]
 8010f78:	181b      	addge	r3, r3, r0
 8010f7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010f7e:	bfac      	ite	ge
 8010f80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010f82:	81a3      	strhlt	r3, [r4, #12]
 8010f84:	bd10      	pop	{r4, pc}

08010f86 <__swrite>:
 8010f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f8a:	461f      	mov	r7, r3
 8010f8c:	898b      	ldrh	r3, [r1, #12]
 8010f8e:	05db      	lsls	r3, r3, #23
 8010f90:	4605      	mov	r5, r0
 8010f92:	460c      	mov	r4, r1
 8010f94:	4616      	mov	r6, r2
 8010f96:	d505      	bpl.n	8010fa4 <__swrite+0x1e>
 8010f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f9c:	2302      	movs	r3, #2
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	f000 f83c 	bl	801101c <_lseek_r>
 8010fa4:	89a3      	ldrh	r3, [r4, #12]
 8010fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010faa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010fae:	81a3      	strh	r3, [r4, #12]
 8010fb0:	4632      	mov	r2, r6
 8010fb2:	463b      	mov	r3, r7
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fba:	f000 b863 	b.w	8011084 <_write_r>

08010fbe <__sseek>:
 8010fbe:	b510      	push	{r4, lr}
 8010fc0:	460c      	mov	r4, r1
 8010fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fc6:	f000 f829 	bl	801101c <_lseek_r>
 8010fca:	1c43      	adds	r3, r0, #1
 8010fcc:	89a3      	ldrh	r3, [r4, #12]
 8010fce:	bf15      	itete	ne
 8010fd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010fd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010fd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010fda:	81a3      	strheq	r3, [r4, #12]
 8010fdc:	bf18      	it	ne
 8010fde:	81a3      	strhne	r3, [r4, #12]
 8010fe0:	bd10      	pop	{r4, pc}

08010fe2 <__sclose>:
 8010fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fe6:	f000 b809 	b.w	8010ffc <_close_r>

08010fea <memset>:
 8010fea:	4402      	add	r2, r0
 8010fec:	4603      	mov	r3, r0
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d100      	bne.n	8010ff4 <memset+0xa>
 8010ff2:	4770      	bx	lr
 8010ff4:	f803 1b01 	strb.w	r1, [r3], #1
 8010ff8:	e7f9      	b.n	8010fee <memset+0x4>
	...

08010ffc <_close_r>:
 8010ffc:	b538      	push	{r3, r4, r5, lr}
 8010ffe:	4d06      	ldr	r5, [pc, #24]	@ (8011018 <_close_r+0x1c>)
 8011000:	2300      	movs	r3, #0
 8011002:	4604      	mov	r4, r0
 8011004:	4608      	mov	r0, r1
 8011006:	602b      	str	r3, [r5, #0]
 8011008:	f7f0 fd44 	bl	8001a94 <_close>
 801100c:	1c43      	adds	r3, r0, #1
 801100e:	d102      	bne.n	8011016 <_close_r+0x1a>
 8011010:	682b      	ldr	r3, [r5, #0]
 8011012:	b103      	cbz	r3, 8011016 <_close_r+0x1a>
 8011014:	6023      	str	r3, [r4, #0]
 8011016:	bd38      	pop	{r3, r4, r5, pc}
 8011018:	20009584 	.word	0x20009584

0801101c <_lseek_r>:
 801101c:	b538      	push	{r3, r4, r5, lr}
 801101e:	4d07      	ldr	r5, [pc, #28]	@ (801103c <_lseek_r+0x20>)
 8011020:	4604      	mov	r4, r0
 8011022:	4608      	mov	r0, r1
 8011024:	4611      	mov	r1, r2
 8011026:	2200      	movs	r2, #0
 8011028:	602a      	str	r2, [r5, #0]
 801102a:	461a      	mov	r2, r3
 801102c:	f7f0 fd59 	bl	8001ae2 <_lseek>
 8011030:	1c43      	adds	r3, r0, #1
 8011032:	d102      	bne.n	801103a <_lseek_r+0x1e>
 8011034:	682b      	ldr	r3, [r5, #0]
 8011036:	b103      	cbz	r3, 801103a <_lseek_r+0x1e>
 8011038:	6023      	str	r3, [r4, #0]
 801103a:	bd38      	pop	{r3, r4, r5, pc}
 801103c:	20009584 	.word	0x20009584

08011040 <_read_r>:
 8011040:	b538      	push	{r3, r4, r5, lr}
 8011042:	4d07      	ldr	r5, [pc, #28]	@ (8011060 <_read_r+0x20>)
 8011044:	4604      	mov	r4, r0
 8011046:	4608      	mov	r0, r1
 8011048:	4611      	mov	r1, r2
 801104a:	2200      	movs	r2, #0
 801104c:	602a      	str	r2, [r5, #0]
 801104e:	461a      	mov	r2, r3
 8011050:	f7f0 fce7 	bl	8001a22 <_read>
 8011054:	1c43      	adds	r3, r0, #1
 8011056:	d102      	bne.n	801105e <_read_r+0x1e>
 8011058:	682b      	ldr	r3, [r5, #0]
 801105a:	b103      	cbz	r3, 801105e <_read_r+0x1e>
 801105c:	6023      	str	r3, [r4, #0]
 801105e:	bd38      	pop	{r3, r4, r5, pc}
 8011060:	20009584 	.word	0x20009584

08011064 <_sbrk_r>:
 8011064:	b538      	push	{r3, r4, r5, lr}
 8011066:	4d06      	ldr	r5, [pc, #24]	@ (8011080 <_sbrk_r+0x1c>)
 8011068:	2300      	movs	r3, #0
 801106a:	4604      	mov	r4, r0
 801106c:	4608      	mov	r0, r1
 801106e:	602b      	str	r3, [r5, #0]
 8011070:	f7f0 fd44 	bl	8001afc <_sbrk>
 8011074:	1c43      	adds	r3, r0, #1
 8011076:	d102      	bne.n	801107e <_sbrk_r+0x1a>
 8011078:	682b      	ldr	r3, [r5, #0]
 801107a:	b103      	cbz	r3, 801107e <_sbrk_r+0x1a>
 801107c:	6023      	str	r3, [r4, #0]
 801107e:	bd38      	pop	{r3, r4, r5, pc}
 8011080:	20009584 	.word	0x20009584

08011084 <_write_r>:
 8011084:	b538      	push	{r3, r4, r5, lr}
 8011086:	4d07      	ldr	r5, [pc, #28]	@ (80110a4 <_write_r+0x20>)
 8011088:	4604      	mov	r4, r0
 801108a:	4608      	mov	r0, r1
 801108c:	4611      	mov	r1, r2
 801108e:	2200      	movs	r2, #0
 8011090:	602a      	str	r2, [r5, #0]
 8011092:	461a      	mov	r2, r3
 8011094:	f7f0 fce2 	bl	8001a5c <_write>
 8011098:	1c43      	adds	r3, r0, #1
 801109a:	d102      	bne.n	80110a2 <_write_r+0x1e>
 801109c:	682b      	ldr	r3, [r5, #0]
 801109e:	b103      	cbz	r3, 80110a2 <_write_r+0x1e>
 80110a0:	6023      	str	r3, [r4, #0]
 80110a2:	bd38      	pop	{r3, r4, r5, pc}
 80110a4:	20009584 	.word	0x20009584

080110a8 <__errno>:
 80110a8:	4b01      	ldr	r3, [pc, #4]	@ (80110b0 <__errno+0x8>)
 80110aa:	6818      	ldr	r0, [r3, #0]
 80110ac:	4770      	bx	lr
 80110ae:	bf00      	nop
 80110b0:	2000005c 	.word	0x2000005c

080110b4 <__libc_init_array>:
 80110b4:	b570      	push	{r4, r5, r6, lr}
 80110b6:	4d0d      	ldr	r5, [pc, #52]	@ (80110ec <__libc_init_array+0x38>)
 80110b8:	4c0d      	ldr	r4, [pc, #52]	@ (80110f0 <__libc_init_array+0x3c>)
 80110ba:	1b64      	subs	r4, r4, r5
 80110bc:	10a4      	asrs	r4, r4, #2
 80110be:	2600      	movs	r6, #0
 80110c0:	42a6      	cmp	r6, r4
 80110c2:	d109      	bne.n	80110d8 <__libc_init_array+0x24>
 80110c4:	4d0b      	ldr	r5, [pc, #44]	@ (80110f4 <__libc_init_array+0x40>)
 80110c6:	4c0c      	ldr	r4, [pc, #48]	@ (80110f8 <__libc_init_array+0x44>)
 80110c8:	f000 fd80 	bl	8011bcc <_init>
 80110cc:	1b64      	subs	r4, r4, r5
 80110ce:	10a4      	asrs	r4, r4, #2
 80110d0:	2600      	movs	r6, #0
 80110d2:	42a6      	cmp	r6, r4
 80110d4:	d105      	bne.n	80110e2 <__libc_init_array+0x2e>
 80110d6:	bd70      	pop	{r4, r5, r6, pc}
 80110d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80110dc:	4798      	blx	r3
 80110de:	3601      	adds	r6, #1
 80110e0:	e7ee      	b.n	80110c0 <__libc_init_array+0xc>
 80110e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80110e6:	4798      	blx	r3
 80110e8:	3601      	adds	r6, #1
 80110ea:	e7f2      	b.n	80110d2 <__libc_init_array+0x1e>
 80110ec:	08011e8c 	.word	0x08011e8c
 80110f0:	08011e8c 	.word	0x08011e8c
 80110f4:	08011e8c 	.word	0x08011e8c
 80110f8:	08011e98 	.word	0x08011e98

080110fc <__retarget_lock_init_recursive>:
 80110fc:	4770      	bx	lr

080110fe <__retarget_lock_acquire_recursive>:
 80110fe:	4770      	bx	lr

08011100 <__retarget_lock_release_recursive>:
 8011100:	4770      	bx	lr

08011102 <memcpy>:
 8011102:	440a      	add	r2, r1
 8011104:	4291      	cmp	r1, r2
 8011106:	f100 33ff 	add.w	r3, r0, #4294967295
 801110a:	d100      	bne.n	801110e <memcpy+0xc>
 801110c:	4770      	bx	lr
 801110e:	b510      	push	{r4, lr}
 8011110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011118:	4291      	cmp	r1, r2
 801111a:	d1f9      	bne.n	8011110 <memcpy+0xe>
 801111c:	bd10      	pop	{r4, pc}
	...

08011120 <__assert_func>:
 8011120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011122:	4614      	mov	r4, r2
 8011124:	461a      	mov	r2, r3
 8011126:	4b09      	ldr	r3, [pc, #36]	@ (801114c <__assert_func+0x2c>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4605      	mov	r5, r0
 801112c:	68d8      	ldr	r0, [r3, #12]
 801112e:	b14c      	cbz	r4, 8011144 <__assert_func+0x24>
 8011130:	4b07      	ldr	r3, [pc, #28]	@ (8011150 <__assert_func+0x30>)
 8011132:	9100      	str	r1, [sp, #0]
 8011134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011138:	4906      	ldr	r1, [pc, #24]	@ (8011154 <__assert_func+0x34>)
 801113a:	462b      	mov	r3, r5
 801113c:	f000 f904 	bl	8011348 <fiprintf>
 8011140:	f000 f914 	bl	801136c <abort>
 8011144:	4b04      	ldr	r3, [pc, #16]	@ (8011158 <__assert_func+0x38>)
 8011146:	461c      	mov	r4, r3
 8011148:	e7f3      	b.n	8011132 <__assert_func+0x12>
 801114a:	bf00      	nop
 801114c:	2000005c 	.word	0x2000005c
 8011150:	08011e13 	.word	0x08011e13
 8011154:	08011e20 	.word	0x08011e20
 8011158:	08011e4e 	.word	0x08011e4e

0801115c <_free_r>:
 801115c:	b538      	push	{r3, r4, r5, lr}
 801115e:	4605      	mov	r5, r0
 8011160:	2900      	cmp	r1, #0
 8011162:	d041      	beq.n	80111e8 <_free_r+0x8c>
 8011164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011168:	1f0c      	subs	r4, r1, #4
 801116a:	2b00      	cmp	r3, #0
 801116c:	bfb8      	it	lt
 801116e:	18e4      	addlt	r4, r4, r3
 8011170:	f7ff fdec 	bl	8010d4c <__malloc_lock>
 8011174:	4a1d      	ldr	r2, [pc, #116]	@ (80111ec <_free_r+0x90>)
 8011176:	6813      	ldr	r3, [r2, #0]
 8011178:	b933      	cbnz	r3, 8011188 <_free_r+0x2c>
 801117a:	6063      	str	r3, [r4, #4]
 801117c:	6014      	str	r4, [r2, #0]
 801117e:	4628      	mov	r0, r5
 8011180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011184:	f7ff bde8 	b.w	8010d58 <__malloc_unlock>
 8011188:	42a3      	cmp	r3, r4
 801118a:	d908      	bls.n	801119e <_free_r+0x42>
 801118c:	6820      	ldr	r0, [r4, #0]
 801118e:	1821      	adds	r1, r4, r0
 8011190:	428b      	cmp	r3, r1
 8011192:	bf01      	itttt	eq
 8011194:	6819      	ldreq	r1, [r3, #0]
 8011196:	685b      	ldreq	r3, [r3, #4]
 8011198:	1809      	addeq	r1, r1, r0
 801119a:	6021      	streq	r1, [r4, #0]
 801119c:	e7ed      	b.n	801117a <_free_r+0x1e>
 801119e:	461a      	mov	r2, r3
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	b10b      	cbz	r3, 80111a8 <_free_r+0x4c>
 80111a4:	42a3      	cmp	r3, r4
 80111a6:	d9fa      	bls.n	801119e <_free_r+0x42>
 80111a8:	6811      	ldr	r1, [r2, #0]
 80111aa:	1850      	adds	r0, r2, r1
 80111ac:	42a0      	cmp	r0, r4
 80111ae:	d10b      	bne.n	80111c8 <_free_r+0x6c>
 80111b0:	6820      	ldr	r0, [r4, #0]
 80111b2:	4401      	add	r1, r0
 80111b4:	1850      	adds	r0, r2, r1
 80111b6:	4283      	cmp	r3, r0
 80111b8:	6011      	str	r1, [r2, #0]
 80111ba:	d1e0      	bne.n	801117e <_free_r+0x22>
 80111bc:	6818      	ldr	r0, [r3, #0]
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	6053      	str	r3, [r2, #4]
 80111c2:	4408      	add	r0, r1
 80111c4:	6010      	str	r0, [r2, #0]
 80111c6:	e7da      	b.n	801117e <_free_r+0x22>
 80111c8:	d902      	bls.n	80111d0 <_free_r+0x74>
 80111ca:	230c      	movs	r3, #12
 80111cc:	602b      	str	r3, [r5, #0]
 80111ce:	e7d6      	b.n	801117e <_free_r+0x22>
 80111d0:	6820      	ldr	r0, [r4, #0]
 80111d2:	1821      	adds	r1, r4, r0
 80111d4:	428b      	cmp	r3, r1
 80111d6:	bf04      	itt	eq
 80111d8:	6819      	ldreq	r1, [r3, #0]
 80111da:	685b      	ldreq	r3, [r3, #4]
 80111dc:	6063      	str	r3, [r4, #4]
 80111de:	bf04      	itt	eq
 80111e0:	1809      	addeq	r1, r1, r0
 80111e2:	6021      	streq	r1, [r4, #0]
 80111e4:	6054      	str	r4, [r2, #4]
 80111e6:	e7ca      	b.n	801117e <_free_r+0x22>
 80111e8:	bd38      	pop	{r3, r4, r5, pc}
 80111ea:	bf00      	nop
 80111ec:	20009444 	.word	0x20009444

080111f0 <__sflush_r>:
 80111f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80111f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f8:	0716      	lsls	r6, r2, #28
 80111fa:	4605      	mov	r5, r0
 80111fc:	460c      	mov	r4, r1
 80111fe:	d454      	bmi.n	80112aa <__sflush_r+0xba>
 8011200:	684b      	ldr	r3, [r1, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	dc02      	bgt.n	801120c <__sflush_r+0x1c>
 8011206:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011208:	2b00      	cmp	r3, #0
 801120a:	dd48      	ble.n	801129e <__sflush_r+0xae>
 801120c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801120e:	2e00      	cmp	r6, #0
 8011210:	d045      	beq.n	801129e <__sflush_r+0xae>
 8011212:	2300      	movs	r3, #0
 8011214:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011218:	682f      	ldr	r7, [r5, #0]
 801121a:	6a21      	ldr	r1, [r4, #32]
 801121c:	602b      	str	r3, [r5, #0]
 801121e:	d030      	beq.n	8011282 <__sflush_r+0x92>
 8011220:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011222:	89a3      	ldrh	r3, [r4, #12]
 8011224:	0759      	lsls	r1, r3, #29
 8011226:	d505      	bpl.n	8011234 <__sflush_r+0x44>
 8011228:	6863      	ldr	r3, [r4, #4]
 801122a:	1ad2      	subs	r2, r2, r3
 801122c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801122e:	b10b      	cbz	r3, 8011234 <__sflush_r+0x44>
 8011230:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011232:	1ad2      	subs	r2, r2, r3
 8011234:	2300      	movs	r3, #0
 8011236:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011238:	6a21      	ldr	r1, [r4, #32]
 801123a:	4628      	mov	r0, r5
 801123c:	47b0      	blx	r6
 801123e:	1c43      	adds	r3, r0, #1
 8011240:	89a3      	ldrh	r3, [r4, #12]
 8011242:	d106      	bne.n	8011252 <__sflush_r+0x62>
 8011244:	6829      	ldr	r1, [r5, #0]
 8011246:	291d      	cmp	r1, #29
 8011248:	d82b      	bhi.n	80112a2 <__sflush_r+0xb2>
 801124a:	4a2a      	ldr	r2, [pc, #168]	@ (80112f4 <__sflush_r+0x104>)
 801124c:	40ca      	lsrs	r2, r1
 801124e:	07d6      	lsls	r6, r2, #31
 8011250:	d527      	bpl.n	80112a2 <__sflush_r+0xb2>
 8011252:	2200      	movs	r2, #0
 8011254:	6062      	str	r2, [r4, #4]
 8011256:	04d9      	lsls	r1, r3, #19
 8011258:	6922      	ldr	r2, [r4, #16]
 801125a:	6022      	str	r2, [r4, #0]
 801125c:	d504      	bpl.n	8011268 <__sflush_r+0x78>
 801125e:	1c42      	adds	r2, r0, #1
 8011260:	d101      	bne.n	8011266 <__sflush_r+0x76>
 8011262:	682b      	ldr	r3, [r5, #0]
 8011264:	b903      	cbnz	r3, 8011268 <__sflush_r+0x78>
 8011266:	6560      	str	r0, [r4, #84]	@ 0x54
 8011268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801126a:	602f      	str	r7, [r5, #0]
 801126c:	b1b9      	cbz	r1, 801129e <__sflush_r+0xae>
 801126e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011272:	4299      	cmp	r1, r3
 8011274:	d002      	beq.n	801127c <__sflush_r+0x8c>
 8011276:	4628      	mov	r0, r5
 8011278:	f7ff ff70 	bl	801115c <_free_r>
 801127c:	2300      	movs	r3, #0
 801127e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011280:	e00d      	b.n	801129e <__sflush_r+0xae>
 8011282:	2301      	movs	r3, #1
 8011284:	4628      	mov	r0, r5
 8011286:	47b0      	blx	r6
 8011288:	4602      	mov	r2, r0
 801128a:	1c50      	adds	r0, r2, #1
 801128c:	d1c9      	bne.n	8011222 <__sflush_r+0x32>
 801128e:	682b      	ldr	r3, [r5, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d0c6      	beq.n	8011222 <__sflush_r+0x32>
 8011294:	2b1d      	cmp	r3, #29
 8011296:	d001      	beq.n	801129c <__sflush_r+0xac>
 8011298:	2b16      	cmp	r3, #22
 801129a:	d11e      	bne.n	80112da <__sflush_r+0xea>
 801129c:	602f      	str	r7, [r5, #0]
 801129e:	2000      	movs	r0, #0
 80112a0:	e022      	b.n	80112e8 <__sflush_r+0xf8>
 80112a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112a6:	b21b      	sxth	r3, r3
 80112a8:	e01b      	b.n	80112e2 <__sflush_r+0xf2>
 80112aa:	690f      	ldr	r7, [r1, #16]
 80112ac:	2f00      	cmp	r7, #0
 80112ae:	d0f6      	beq.n	801129e <__sflush_r+0xae>
 80112b0:	0793      	lsls	r3, r2, #30
 80112b2:	680e      	ldr	r6, [r1, #0]
 80112b4:	bf08      	it	eq
 80112b6:	694b      	ldreq	r3, [r1, #20]
 80112b8:	600f      	str	r7, [r1, #0]
 80112ba:	bf18      	it	ne
 80112bc:	2300      	movne	r3, #0
 80112be:	eba6 0807 	sub.w	r8, r6, r7
 80112c2:	608b      	str	r3, [r1, #8]
 80112c4:	f1b8 0f00 	cmp.w	r8, #0
 80112c8:	dde9      	ble.n	801129e <__sflush_r+0xae>
 80112ca:	6a21      	ldr	r1, [r4, #32]
 80112cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80112ce:	4643      	mov	r3, r8
 80112d0:	463a      	mov	r2, r7
 80112d2:	4628      	mov	r0, r5
 80112d4:	47b0      	blx	r6
 80112d6:	2800      	cmp	r0, #0
 80112d8:	dc08      	bgt.n	80112ec <__sflush_r+0xfc>
 80112da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112e2:	81a3      	strh	r3, [r4, #12]
 80112e4:	f04f 30ff 	mov.w	r0, #4294967295
 80112e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112ec:	4407      	add	r7, r0
 80112ee:	eba8 0800 	sub.w	r8, r8, r0
 80112f2:	e7e7      	b.n	80112c4 <__sflush_r+0xd4>
 80112f4:	20400001 	.word	0x20400001

080112f8 <_fflush_r>:
 80112f8:	b538      	push	{r3, r4, r5, lr}
 80112fa:	690b      	ldr	r3, [r1, #16]
 80112fc:	4605      	mov	r5, r0
 80112fe:	460c      	mov	r4, r1
 8011300:	b913      	cbnz	r3, 8011308 <_fflush_r+0x10>
 8011302:	2500      	movs	r5, #0
 8011304:	4628      	mov	r0, r5
 8011306:	bd38      	pop	{r3, r4, r5, pc}
 8011308:	b118      	cbz	r0, 8011312 <_fflush_r+0x1a>
 801130a:	6a03      	ldr	r3, [r0, #32]
 801130c:	b90b      	cbnz	r3, 8011312 <_fflush_r+0x1a>
 801130e:	f7ff fdf3 	bl	8010ef8 <__sinit>
 8011312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d0f3      	beq.n	8011302 <_fflush_r+0xa>
 801131a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801131c:	07d0      	lsls	r0, r2, #31
 801131e:	d404      	bmi.n	801132a <_fflush_r+0x32>
 8011320:	0599      	lsls	r1, r3, #22
 8011322:	d402      	bmi.n	801132a <_fflush_r+0x32>
 8011324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011326:	f7ff feea 	bl	80110fe <__retarget_lock_acquire_recursive>
 801132a:	4628      	mov	r0, r5
 801132c:	4621      	mov	r1, r4
 801132e:	f7ff ff5f 	bl	80111f0 <__sflush_r>
 8011332:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011334:	07da      	lsls	r2, r3, #31
 8011336:	4605      	mov	r5, r0
 8011338:	d4e4      	bmi.n	8011304 <_fflush_r+0xc>
 801133a:	89a3      	ldrh	r3, [r4, #12]
 801133c:	059b      	lsls	r3, r3, #22
 801133e:	d4e1      	bmi.n	8011304 <_fflush_r+0xc>
 8011340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011342:	f7ff fedd 	bl	8011100 <__retarget_lock_release_recursive>
 8011346:	e7dd      	b.n	8011304 <_fflush_r+0xc>

08011348 <fiprintf>:
 8011348:	b40e      	push	{r1, r2, r3}
 801134a:	b503      	push	{r0, r1, lr}
 801134c:	4601      	mov	r1, r0
 801134e:	ab03      	add	r3, sp, #12
 8011350:	4805      	ldr	r0, [pc, #20]	@ (8011368 <fiprintf+0x20>)
 8011352:	f853 2b04 	ldr.w	r2, [r3], #4
 8011356:	6800      	ldr	r0, [r0, #0]
 8011358:	9301      	str	r3, [sp, #4]
 801135a:	f000 f837 	bl	80113cc <_vfiprintf_r>
 801135e:	b002      	add	sp, #8
 8011360:	f85d eb04 	ldr.w	lr, [sp], #4
 8011364:	b003      	add	sp, #12
 8011366:	4770      	bx	lr
 8011368:	2000005c 	.word	0x2000005c

0801136c <abort>:
 801136c:	b508      	push	{r3, lr}
 801136e:	2006      	movs	r0, #6
 8011370:	f000 fb8c 	bl	8011a8c <raise>
 8011374:	2001      	movs	r0, #1
 8011376:	f7f0 fb49 	bl	8001a0c <_exit>

0801137a <__sfputc_r>:
 801137a:	6893      	ldr	r3, [r2, #8]
 801137c:	3b01      	subs	r3, #1
 801137e:	2b00      	cmp	r3, #0
 8011380:	b410      	push	{r4}
 8011382:	6093      	str	r3, [r2, #8]
 8011384:	da08      	bge.n	8011398 <__sfputc_r+0x1e>
 8011386:	6994      	ldr	r4, [r2, #24]
 8011388:	42a3      	cmp	r3, r4
 801138a:	db01      	blt.n	8011390 <__sfputc_r+0x16>
 801138c:	290a      	cmp	r1, #10
 801138e:	d103      	bne.n	8011398 <__sfputc_r+0x1e>
 8011390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011394:	f000 babe 	b.w	8011914 <__swbuf_r>
 8011398:	6813      	ldr	r3, [r2, #0]
 801139a:	1c58      	adds	r0, r3, #1
 801139c:	6010      	str	r0, [r2, #0]
 801139e:	7019      	strb	r1, [r3, #0]
 80113a0:	4608      	mov	r0, r1
 80113a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113a6:	4770      	bx	lr

080113a8 <__sfputs_r>:
 80113a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113aa:	4606      	mov	r6, r0
 80113ac:	460f      	mov	r7, r1
 80113ae:	4614      	mov	r4, r2
 80113b0:	18d5      	adds	r5, r2, r3
 80113b2:	42ac      	cmp	r4, r5
 80113b4:	d101      	bne.n	80113ba <__sfputs_r+0x12>
 80113b6:	2000      	movs	r0, #0
 80113b8:	e007      	b.n	80113ca <__sfputs_r+0x22>
 80113ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113be:	463a      	mov	r2, r7
 80113c0:	4630      	mov	r0, r6
 80113c2:	f7ff ffda 	bl	801137a <__sfputc_r>
 80113c6:	1c43      	adds	r3, r0, #1
 80113c8:	d1f3      	bne.n	80113b2 <__sfputs_r+0xa>
 80113ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080113cc <_vfiprintf_r>:
 80113cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d0:	460d      	mov	r5, r1
 80113d2:	b09d      	sub	sp, #116	@ 0x74
 80113d4:	4614      	mov	r4, r2
 80113d6:	4698      	mov	r8, r3
 80113d8:	4606      	mov	r6, r0
 80113da:	b118      	cbz	r0, 80113e4 <_vfiprintf_r+0x18>
 80113dc:	6a03      	ldr	r3, [r0, #32]
 80113de:	b90b      	cbnz	r3, 80113e4 <_vfiprintf_r+0x18>
 80113e0:	f7ff fd8a 	bl	8010ef8 <__sinit>
 80113e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113e6:	07d9      	lsls	r1, r3, #31
 80113e8:	d405      	bmi.n	80113f6 <_vfiprintf_r+0x2a>
 80113ea:	89ab      	ldrh	r3, [r5, #12]
 80113ec:	059a      	lsls	r2, r3, #22
 80113ee:	d402      	bmi.n	80113f6 <_vfiprintf_r+0x2a>
 80113f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113f2:	f7ff fe84 	bl	80110fe <__retarget_lock_acquire_recursive>
 80113f6:	89ab      	ldrh	r3, [r5, #12]
 80113f8:	071b      	lsls	r3, r3, #28
 80113fa:	d501      	bpl.n	8011400 <_vfiprintf_r+0x34>
 80113fc:	692b      	ldr	r3, [r5, #16]
 80113fe:	b99b      	cbnz	r3, 8011428 <_vfiprintf_r+0x5c>
 8011400:	4629      	mov	r1, r5
 8011402:	4630      	mov	r0, r6
 8011404:	f000 fac4 	bl	8011990 <__swsetup_r>
 8011408:	b170      	cbz	r0, 8011428 <_vfiprintf_r+0x5c>
 801140a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801140c:	07dc      	lsls	r4, r3, #31
 801140e:	d504      	bpl.n	801141a <_vfiprintf_r+0x4e>
 8011410:	f04f 30ff 	mov.w	r0, #4294967295
 8011414:	b01d      	add	sp, #116	@ 0x74
 8011416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801141a:	89ab      	ldrh	r3, [r5, #12]
 801141c:	0598      	lsls	r0, r3, #22
 801141e:	d4f7      	bmi.n	8011410 <_vfiprintf_r+0x44>
 8011420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011422:	f7ff fe6d 	bl	8011100 <__retarget_lock_release_recursive>
 8011426:	e7f3      	b.n	8011410 <_vfiprintf_r+0x44>
 8011428:	2300      	movs	r3, #0
 801142a:	9309      	str	r3, [sp, #36]	@ 0x24
 801142c:	2320      	movs	r3, #32
 801142e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011432:	f8cd 800c 	str.w	r8, [sp, #12]
 8011436:	2330      	movs	r3, #48	@ 0x30
 8011438:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80115e8 <_vfiprintf_r+0x21c>
 801143c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011440:	f04f 0901 	mov.w	r9, #1
 8011444:	4623      	mov	r3, r4
 8011446:	469a      	mov	sl, r3
 8011448:	f813 2b01 	ldrb.w	r2, [r3], #1
 801144c:	b10a      	cbz	r2, 8011452 <_vfiprintf_r+0x86>
 801144e:	2a25      	cmp	r2, #37	@ 0x25
 8011450:	d1f9      	bne.n	8011446 <_vfiprintf_r+0x7a>
 8011452:	ebba 0b04 	subs.w	fp, sl, r4
 8011456:	d00b      	beq.n	8011470 <_vfiprintf_r+0xa4>
 8011458:	465b      	mov	r3, fp
 801145a:	4622      	mov	r2, r4
 801145c:	4629      	mov	r1, r5
 801145e:	4630      	mov	r0, r6
 8011460:	f7ff ffa2 	bl	80113a8 <__sfputs_r>
 8011464:	3001      	adds	r0, #1
 8011466:	f000 80a7 	beq.w	80115b8 <_vfiprintf_r+0x1ec>
 801146a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801146c:	445a      	add	r2, fp
 801146e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011470:	f89a 3000 	ldrb.w	r3, [sl]
 8011474:	2b00      	cmp	r3, #0
 8011476:	f000 809f 	beq.w	80115b8 <_vfiprintf_r+0x1ec>
 801147a:	2300      	movs	r3, #0
 801147c:	f04f 32ff 	mov.w	r2, #4294967295
 8011480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011484:	f10a 0a01 	add.w	sl, sl, #1
 8011488:	9304      	str	r3, [sp, #16]
 801148a:	9307      	str	r3, [sp, #28]
 801148c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011490:	931a      	str	r3, [sp, #104]	@ 0x68
 8011492:	4654      	mov	r4, sl
 8011494:	2205      	movs	r2, #5
 8011496:	f814 1b01 	ldrb.w	r1, [r4], #1
 801149a:	4853      	ldr	r0, [pc, #332]	@ (80115e8 <_vfiprintf_r+0x21c>)
 801149c:	f7ee fe98 	bl	80001d0 <memchr>
 80114a0:	9a04      	ldr	r2, [sp, #16]
 80114a2:	b9d8      	cbnz	r0, 80114dc <_vfiprintf_r+0x110>
 80114a4:	06d1      	lsls	r1, r2, #27
 80114a6:	bf44      	itt	mi
 80114a8:	2320      	movmi	r3, #32
 80114aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80114ae:	0713      	lsls	r3, r2, #28
 80114b0:	bf44      	itt	mi
 80114b2:	232b      	movmi	r3, #43	@ 0x2b
 80114b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80114b8:	f89a 3000 	ldrb.w	r3, [sl]
 80114bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80114be:	d015      	beq.n	80114ec <_vfiprintf_r+0x120>
 80114c0:	9a07      	ldr	r2, [sp, #28]
 80114c2:	4654      	mov	r4, sl
 80114c4:	2000      	movs	r0, #0
 80114c6:	f04f 0c0a 	mov.w	ip, #10
 80114ca:	4621      	mov	r1, r4
 80114cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114d0:	3b30      	subs	r3, #48	@ 0x30
 80114d2:	2b09      	cmp	r3, #9
 80114d4:	d94b      	bls.n	801156e <_vfiprintf_r+0x1a2>
 80114d6:	b1b0      	cbz	r0, 8011506 <_vfiprintf_r+0x13a>
 80114d8:	9207      	str	r2, [sp, #28]
 80114da:	e014      	b.n	8011506 <_vfiprintf_r+0x13a>
 80114dc:	eba0 0308 	sub.w	r3, r0, r8
 80114e0:	fa09 f303 	lsl.w	r3, r9, r3
 80114e4:	4313      	orrs	r3, r2
 80114e6:	9304      	str	r3, [sp, #16]
 80114e8:	46a2      	mov	sl, r4
 80114ea:	e7d2      	b.n	8011492 <_vfiprintf_r+0xc6>
 80114ec:	9b03      	ldr	r3, [sp, #12]
 80114ee:	1d19      	adds	r1, r3, #4
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	9103      	str	r1, [sp, #12]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	bfbb      	ittet	lt
 80114f8:	425b      	neglt	r3, r3
 80114fa:	f042 0202 	orrlt.w	r2, r2, #2
 80114fe:	9307      	strge	r3, [sp, #28]
 8011500:	9307      	strlt	r3, [sp, #28]
 8011502:	bfb8      	it	lt
 8011504:	9204      	strlt	r2, [sp, #16]
 8011506:	7823      	ldrb	r3, [r4, #0]
 8011508:	2b2e      	cmp	r3, #46	@ 0x2e
 801150a:	d10a      	bne.n	8011522 <_vfiprintf_r+0x156>
 801150c:	7863      	ldrb	r3, [r4, #1]
 801150e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011510:	d132      	bne.n	8011578 <_vfiprintf_r+0x1ac>
 8011512:	9b03      	ldr	r3, [sp, #12]
 8011514:	1d1a      	adds	r2, r3, #4
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	9203      	str	r2, [sp, #12]
 801151a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801151e:	3402      	adds	r4, #2
 8011520:	9305      	str	r3, [sp, #20]
 8011522:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80115f8 <_vfiprintf_r+0x22c>
 8011526:	7821      	ldrb	r1, [r4, #0]
 8011528:	2203      	movs	r2, #3
 801152a:	4650      	mov	r0, sl
 801152c:	f7ee fe50 	bl	80001d0 <memchr>
 8011530:	b138      	cbz	r0, 8011542 <_vfiprintf_r+0x176>
 8011532:	9b04      	ldr	r3, [sp, #16]
 8011534:	eba0 000a 	sub.w	r0, r0, sl
 8011538:	2240      	movs	r2, #64	@ 0x40
 801153a:	4082      	lsls	r2, r0
 801153c:	4313      	orrs	r3, r2
 801153e:	3401      	adds	r4, #1
 8011540:	9304      	str	r3, [sp, #16]
 8011542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011546:	4829      	ldr	r0, [pc, #164]	@ (80115ec <_vfiprintf_r+0x220>)
 8011548:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801154c:	2206      	movs	r2, #6
 801154e:	f7ee fe3f 	bl	80001d0 <memchr>
 8011552:	2800      	cmp	r0, #0
 8011554:	d03f      	beq.n	80115d6 <_vfiprintf_r+0x20a>
 8011556:	4b26      	ldr	r3, [pc, #152]	@ (80115f0 <_vfiprintf_r+0x224>)
 8011558:	bb1b      	cbnz	r3, 80115a2 <_vfiprintf_r+0x1d6>
 801155a:	9b03      	ldr	r3, [sp, #12]
 801155c:	3307      	adds	r3, #7
 801155e:	f023 0307 	bic.w	r3, r3, #7
 8011562:	3308      	adds	r3, #8
 8011564:	9303      	str	r3, [sp, #12]
 8011566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011568:	443b      	add	r3, r7
 801156a:	9309      	str	r3, [sp, #36]	@ 0x24
 801156c:	e76a      	b.n	8011444 <_vfiprintf_r+0x78>
 801156e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011572:	460c      	mov	r4, r1
 8011574:	2001      	movs	r0, #1
 8011576:	e7a8      	b.n	80114ca <_vfiprintf_r+0xfe>
 8011578:	2300      	movs	r3, #0
 801157a:	3401      	adds	r4, #1
 801157c:	9305      	str	r3, [sp, #20]
 801157e:	4619      	mov	r1, r3
 8011580:	f04f 0c0a 	mov.w	ip, #10
 8011584:	4620      	mov	r0, r4
 8011586:	f810 2b01 	ldrb.w	r2, [r0], #1
 801158a:	3a30      	subs	r2, #48	@ 0x30
 801158c:	2a09      	cmp	r2, #9
 801158e:	d903      	bls.n	8011598 <_vfiprintf_r+0x1cc>
 8011590:	2b00      	cmp	r3, #0
 8011592:	d0c6      	beq.n	8011522 <_vfiprintf_r+0x156>
 8011594:	9105      	str	r1, [sp, #20]
 8011596:	e7c4      	b.n	8011522 <_vfiprintf_r+0x156>
 8011598:	fb0c 2101 	mla	r1, ip, r1, r2
 801159c:	4604      	mov	r4, r0
 801159e:	2301      	movs	r3, #1
 80115a0:	e7f0      	b.n	8011584 <_vfiprintf_r+0x1b8>
 80115a2:	ab03      	add	r3, sp, #12
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	462a      	mov	r2, r5
 80115a8:	4b12      	ldr	r3, [pc, #72]	@ (80115f4 <_vfiprintf_r+0x228>)
 80115aa:	a904      	add	r1, sp, #16
 80115ac:	4630      	mov	r0, r6
 80115ae:	f3af 8000 	nop.w
 80115b2:	4607      	mov	r7, r0
 80115b4:	1c78      	adds	r0, r7, #1
 80115b6:	d1d6      	bne.n	8011566 <_vfiprintf_r+0x19a>
 80115b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80115ba:	07d9      	lsls	r1, r3, #31
 80115bc:	d405      	bmi.n	80115ca <_vfiprintf_r+0x1fe>
 80115be:	89ab      	ldrh	r3, [r5, #12]
 80115c0:	059a      	lsls	r2, r3, #22
 80115c2:	d402      	bmi.n	80115ca <_vfiprintf_r+0x1fe>
 80115c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80115c6:	f7ff fd9b 	bl	8011100 <__retarget_lock_release_recursive>
 80115ca:	89ab      	ldrh	r3, [r5, #12]
 80115cc:	065b      	lsls	r3, r3, #25
 80115ce:	f53f af1f 	bmi.w	8011410 <_vfiprintf_r+0x44>
 80115d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80115d4:	e71e      	b.n	8011414 <_vfiprintf_r+0x48>
 80115d6:	ab03      	add	r3, sp, #12
 80115d8:	9300      	str	r3, [sp, #0]
 80115da:	462a      	mov	r2, r5
 80115dc:	4b05      	ldr	r3, [pc, #20]	@ (80115f4 <_vfiprintf_r+0x228>)
 80115de:	a904      	add	r1, sp, #16
 80115e0:	4630      	mov	r0, r6
 80115e2:	f000 f879 	bl	80116d8 <_printf_i>
 80115e6:	e7e4      	b.n	80115b2 <_vfiprintf_r+0x1e6>
 80115e8:	08011e4f 	.word	0x08011e4f
 80115ec:	08011e59 	.word	0x08011e59
 80115f0:	00000000 	.word	0x00000000
 80115f4:	080113a9 	.word	0x080113a9
 80115f8:	08011e55 	.word	0x08011e55

080115fc <_printf_common>:
 80115fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011600:	4616      	mov	r6, r2
 8011602:	4698      	mov	r8, r3
 8011604:	688a      	ldr	r2, [r1, #8]
 8011606:	690b      	ldr	r3, [r1, #16]
 8011608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801160c:	4293      	cmp	r3, r2
 801160e:	bfb8      	it	lt
 8011610:	4613      	movlt	r3, r2
 8011612:	6033      	str	r3, [r6, #0]
 8011614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011618:	4607      	mov	r7, r0
 801161a:	460c      	mov	r4, r1
 801161c:	b10a      	cbz	r2, 8011622 <_printf_common+0x26>
 801161e:	3301      	adds	r3, #1
 8011620:	6033      	str	r3, [r6, #0]
 8011622:	6823      	ldr	r3, [r4, #0]
 8011624:	0699      	lsls	r1, r3, #26
 8011626:	bf42      	ittt	mi
 8011628:	6833      	ldrmi	r3, [r6, #0]
 801162a:	3302      	addmi	r3, #2
 801162c:	6033      	strmi	r3, [r6, #0]
 801162e:	6825      	ldr	r5, [r4, #0]
 8011630:	f015 0506 	ands.w	r5, r5, #6
 8011634:	d106      	bne.n	8011644 <_printf_common+0x48>
 8011636:	f104 0a19 	add.w	sl, r4, #25
 801163a:	68e3      	ldr	r3, [r4, #12]
 801163c:	6832      	ldr	r2, [r6, #0]
 801163e:	1a9b      	subs	r3, r3, r2
 8011640:	42ab      	cmp	r3, r5
 8011642:	dc26      	bgt.n	8011692 <_printf_common+0x96>
 8011644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011648:	6822      	ldr	r2, [r4, #0]
 801164a:	3b00      	subs	r3, #0
 801164c:	bf18      	it	ne
 801164e:	2301      	movne	r3, #1
 8011650:	0692      	lsls	r2, r2, #26
 8011652:	d42b      	bmi.n	80116ac <_printf_common+0xb0>
 8011654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011658:	4641      	mov	r1, r8
 801165a:	4638      	mov	r0, r7
 801165c:	47c8      	blx	r9
 801165e:	3001      	adds	r0, #1
 8011660:	d01e      	beq.n	80116a0 <_printf_common+0xa4>
 8011662:	6823      	ldr	r3, [r4, #0]
 8011664:	6922      	ldr	r2, [r4, #16]
 8011666:	f003 0306 	and.w	r3, r3, #6
 801166a:	2b04      	cmp	r3, #4
 801166c:	bf02      	ittt	eq
 801166e:	68e5      	ldreq	r5, [r4, #12]
 8011670:	6833      	ldreq	r3, [r6, #0]
 8011672:	1aed      	subeq	r5, r5, r3
 8011674:	68a3      	ldr	r3, [r4, #8]
 8011676:	bf0c      	ite	eq
 8011678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801167c:	2500      	movne	r5, #0
 801167e:	4293      	cmp	r3, r2
 8011680:	bfc4      	itt	gt
 8011682:	1a9b      	subgt	r3, r3, r2
 8011684:	18ed      	addgt	r5, r5, r3
 8011686:	2600      	movs	r6, #0
 8011688:	341a      	adds	r4, #26
 801168a:	42b5      	cmp	r5, r6
 801168c:	d11a      	bne.n	80116c4 <_printf_common+0xc8>
 801168e:	2000      	movs	r0, #0
 8011690:	e008      	b.n	80116a4 <_printf_common+0xa8>
 8011692:	2301      	movs	r3, #1
 8011694:	4652      	mov	r2, sl
 8011696:	4641      	mov	r1, r8
 8011698:	4638      	mov	r0, r7
 801169a:	47c8      	blx	r9
 801169c:	3001      	adds	r0, #1
 801169e:	d103      	bne.n	80116a8 <_printf_common+0xac>
 80116a0:	f04f 30ff 	mov.w	r0, #4294967295
 80116a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a8:	3501      	adds	r5, #1
 80116aa:	e7c6      	b.n	801163a <_printf_common+0x3e>
 80116ac:	18e1      	adds	r1, r4, r3
 80116ae:	1c5a      	adds	r2, r3, #1
 80116b0:	2030      	movs	r0, #48	@ 0x30
 80116b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80116b6:	4422      	add	r2, r4
 80116b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80116bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80116c0:	3302      	adds	r3, #2
 80116c2:	e7c7      	b.n	8011654 <_printf_common+0x58>
 80116c4:	2301      	movs	r3, #1
 80116c6:	4622      	mov	r2, r4
 80116c8:	4641      	mov	r1, r8
 80116ca:	4638      	mov	r0, r7
 80116cc:	47c8      	blx	r9
 80116ce:	3001      	adds	r0, #1
 80116d0:	d0e6      	beq.n	80116a0 <_printf_common+0xa4>
 80116d2:	3601      	adds	r6, #1
 80116d4:	e7d9      	b.n	801168a <_printf_common+0x8e>
	...

080116d8 <_printf_i>:
 80116d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80116dc:	7e0f      	ldrb	r7, [r1, #24]
 80116de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80116e0:	2f78      	cmp	r7, #120	@ 0x78
 80116e2:	4691      	mov	r9, r2
 80116e4:	4680      	mov	r8, r0
 80116e6:	460c      	mov	r4, r1
 80116e8:	469a      	mov	sl, r3
 80116ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80116ee:	d807      	bhi.n	8011700 <_printf_i+0x28>
 80116f0:	2f62      	cmp	r7, #98	@ 0x62
 80116f2:	d80a      	bhi.n	801170a <_printf_i+0x32>
 80116f4:	2f00      	cmp	r7, #0
 80116f6:	f000 80d1 	beq.w	801189c <_printf_i+0x1c4>
 80116fa:	2f58      	cmp	r7, #88	@ 0x58
 80116fc:	f000 80b8 	beq.w	8011870 <_printf_i+0x198>
 8011700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011708:	e03a      	b.n	8011780 <_printf_i+0xa8>
 801170a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801170e:	2b15      	cmp	r3, #21
 8011710:	d8f6      	bhi.n	8011700 <_printf_i+0x28>
 8011712:	a101      	add	r1, pc, #4	@ (adr r1, 8011718 <_printf_i+0x40>)
 8011714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011718:	08011771 	.word	0x08011771
 801171c:	08011785 	.word	0x08011785
 8011720:	08011701 	.word	0x08011701
 8011724:	08011701 	.word	0x08011701
 8011728:	08011701 	.word	0x08011701
 801172c:	08011701 	.word	0x08011701
 8011730:	08011785 	.word	0x08011785
 8011734:	08011701 	.word	0x08011701
 8011738:	08011701 	.word	0x08011701
 801173c:	08011701 	.word	0x08011701
 8011740:	08011701 	.word	0x08011701
 8011744:	08011883 	.word	0x08011883
 8011748:	080117af 	.word	0x080117af
 801174c:	0801183d 	.word	0x0801183d
 8011750:	08011701 	.word	0x08011701
 8011754:	08011701 	.word	0x08011701
 8011758:	080118a5 	.word	0x080118a5
 801175c:	08011701 	.word	0x08011701
 8011760:	080117af 	.word	0x080117af
 8011764:	08011701 	.word	0x08011701
 8011768:	08011701 	.word	0x08011701
 801176c:	08011845 	.word	0x08011845
 8011770:	6833      	ldr	r3, [r6, #0]
 8011772:	1d1a      	adds	r2, r3, #4
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	6032      	str	r2, [r6, #0]
 8011778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801177c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011780:	2301      	movs	r3, #1
 8011782:	e09c      	b.n	80118be <_printf_i+0x1e6>
 8011784:	6833      	ldr	r3, [r6, #0]
 8011786:	6820      	ldr	r0, [r4, #0]
 8011788:	1d19      	adds	r1, r3, #4
 801178a:	6031      	str	r1, [r6, #0]
 801178c:	0606      	lsls	r6, r0, #24
 801178e:	d501      	bpl.n	8011794 <_printf_i+0xbc>
 8011790:	681d      	ldr	r5, [r3, #0]
 8011792:	e003      	b.n	801179c <_printf_i+0xc4>
 8011794:	0645      	lsls	r5, r0, #25
 8011796:	d5fb      	bpl.n	8011790 <_printf_i+0xb8>
 8011798:	f9b3 5000 	ldrsh.w	r5, [r3]
 801179c:	2d00      	cmp	r5, #0
 801179e:	da03      	bge.n	80117a8 <_printf_i+0xd0>
 80117a0:	232d      	movs	r3, #45	@ 0x2d
 80117a2:	426d      	negs	r5, r5
 80117a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80117a8:	4858      	ldr	r0, [pc, #352]	@ (801190c <_printf_i+0x234>)
 80117aa:	230a      	movs	r3, #10
 80117ac:	e011      	b.n	80117d2 <_printf_i+0xfa>
 80117ae:	6821      	ldr	r1, [r4, #0]
 80117b0:	6833      	ldr	r3, [r6, #0]
 80117b2:	0608      	lsls	r0, r1, #24
 80117b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80117b8:	d402      	bmi.n	80117c0 <_printf_i+0xe8>
 80117ba:	0649      	lsls	r1, r1, #25
 80117bc:	bf48      	it	mi
 80117be:	b2ad      	uxthmi	r5, r5
 80117c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80117c2:	4852      	ldr	r0, [pc, #328]	@ (801190c <_printf_i+0x234>)
 80117c4:	6033      	str	r3, [r6, #0]
 80117c6:	bf14      	ite	ne
 80117c8:	230a      	movne	r3, #10
 80117ca:	2308      	moveq	r3, #8
 80117cc:	2100      	movs	r1, #0
 80117ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80117d2:	6866      	ldr	r6, [r4, #4]
 80117d4:	60a6      	str	r6, [r4, #8]
 80117d6:	2e00      	cmp	r6, #0
 80117d8:	db05      	blt.n	80117e6 <_printf_i+0x10e>
 80117da:	6821      	ldr	r1, [r4, #0]
 80117dc:	432e      	orrs	r6, r5
 80117de:	f021 0104 	bic.w	r1, r1, #4
 80117e2:	6021      	str	r1, [r4, #0]
 80117e4:	d04b      	beq.n	801187e <_printf_i+0x1a6>
 80117e6:	4616      	mov	r6, r2
 80117e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80117ec:	fb03 5711 	mls	r7, r3, r1, r5
 80117f0:	5dc7      	ldrb	r7, [r0, r7]
 80117f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80117f6:	462f      	mov	r7, r5
 80117f8:	42bb      	cmp	r3, r7
 80117fa:	460d      	mov	r5, r1
 80117fc:	d9f4      	bls.n	80117e8 <_printf_i+0x110>
 80117fe:	2b08      	cmp	r3, #8
 8011800:	d10b      	bne.n	801181a <_printf_i+0x142>
 8011802:	6823      	ldr	r3, [r4, #0]
 8011804:	07df      	lsls	r7, r3, #31
 8011806:	d508      	bpl.n	801181a <_printf_i+0x142>
 8011808:	6923      	ldr	r3, [r4, #16]
 801180a:	6861      	ldr	r1, [r4, #4]
 801180c:	4299      	cmp	r1, r3
 801180e:	bfde      	ittt	le
 8011810:	2330      	movle	r3, #48	@ 0x30
 8011812:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011816:	f106 36ff 	addle.w	r6, r6, #4294967295
 801181a:	1b92      	subs	r2, r2, r6
 801181c:	6122      	str	r2, [r4, #16]
 801181e:	f8cd a000 	str.w	sl, [sp]
 8011822:	464b      	mov	r3, r9
 8011824:	aa03      	add	r2, sp, #12
 8011826:	4621      	mov	r1, r4
 8011828:	4640      	mov	r0, r8
 801182a:	f7ff fee7 	bl	80115fc <_printf_common>
 801182e:	3001      	adds	r0, #1
 8011830:	d14a      	bne.n	80118c8 <_printf_i+0x1f0>
 8011832:	f04f 30ff 	mov.w	r0, #4294967295
 8011836:	b004      	add	sp, #16
 8011838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801183c:	6823      	ldr	r3, [r4, #0]
 801183e:	f043 0320 	orr.w	r3, r3, #32
 8011842:	6023      	str	r3, [r4, #0]
 8011844:	4832      	ldr	r0, [pc, #200]	@ (8011910 <_printf_i+0x238>)
 8011846:	2778      	movs	r7, #120	@ 0x78
 8011848:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801184c:	6823      	ldr	r3, [r4, #0]
 801184e:	6831      	ldr	r1, [r6, #0]
 8011850:	061f      	lsls	r7, r3, #24
 8011852:	f851 5b04 	ldr.w	r5, [r1], #4
 8011856:	d402      	bmi.n	801185e <_printf_i+0x186>
 8011858:	065f      	lsls	r7, r3, #25
 801185a:	bf48      	it	mi
 801185c:	b2ad      	uxthmi	r5, r5
 801185e:	6031      	str	r1, [r6, #0]
 8011860:	07d9      	lsls	r1, r3, #31
 8011862:	bf44      	itt	mi
 8011864:	f043 0320 	orrmi.w	r3, r3, #32
 8011868:	6023      	strmi	r3, [r4, #0]
 801186a:	b11d      	cbz	r5, 8011874 <_printf_i+0x19c>
 801186c:	2310      	movs	r3, #16
 801186e:	e7ad      	b.n	80117cc <_printf_i+0xf4>
 8011870:	4826      	ldr	r0, [pc, #152]	@ (801190c <_printf_i+0x234>)
 8011872:	e7e9      	b.n	8011848 <_printf_i+0x170>
 8011874:	6823      	ldr	r3, [r4, #0]
 8011876:	f023 0320 	bic.w	r3, r3, #32
 801187a:	6023      	str	r3, [r4, #0]
 801187c:	e7f6      	b.n	801186c <_printf_i+0x194>
 801187e:	4616      	mov	r6, r2
 8011880:	e7bd      	b.n	80117fe <_printf_i+0x126>
 8011882:	6833      	ldr	r3, [r6, #0]
 8011884:	6825      	ldr	r5, [r4, #0]
 8011886:	6961      	ldr	r1, [r4, #20]
 8011888:	1d18      	adds	r0, r3, #4
 801188a:	6030      	str	r0, [r6, #0]
 801188c:	062e      	lsls	r6, r5, #24
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	d501      	bpl.n	8011896 <_printf_i+0x1be>
 8011892:	6019      	str	r1, [r3, #0]
 8011894:	e002      	b.n	801189c <_printf_i+0x1c4>
 8011896:	0668      	lsls	r0, r5, #25
 8011898:	d5fb      	bpl.n	8011892 <_printf_i+0x1ba>
 801189a:	8019      	strh	r1, [r3, #0]
 801189c:	2300      	movs	r3, #0
 801189e:	6123      	str	r3, [r4, #16]
 80118a0:	4616      	mov	r6, r2
 80118a2:	e7bc      	b.n	801181e <_printf_i+0x146>
 80118a4:	6833      	ldr	r3, [r6, #0]
 80118a6:	1d1a      	adds	r2, r3, #4
 80118a8:	6032      	str	r2, [r6, #0]
 80118aa:	681e      	ldr	r6, [r3, #0]
 80118ac:	6862      	ldr	r2, [r4, #4]
 80118ae:	2100      	movs	r1, #0
 80118b0:	4630      	mov	r0, r6
 80118b2:	f7ee fc8d 	bl	80001d0 <memchr>
 80118b6:	b108      	cbz	r0, 80118bc <_printf_i+0x1e4>
 80118b8:	1b80      	subs	r0, r0, r6
 80118ba:	6060      	str	r0, [r4, #4]
 80118bc:	6863      	ldr	r3, [r4, #4]
 80118be:	6123      	str	r3, [r4, #16]
 80118c0:	2300      	movs	r3, #0
 80118c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80118c6:	e7aa      	b.n	801181e <_printf_i+0x146>
 80118c8:	6923      	ldr	r3, [r4, #16]
 80118ca:	4632      	mov	r2, r6
 80118cc:	4649      	mov	r1, r9
 80118ce:	4640      	mov	r0, r8
 80118d0:	47d0      	blx	sl
 80118d2:	3001      	adds	r0, #1
 80118d4:	d0ad      	beq.n	8011832 <_printf_i+0x15a>
 80118d6:	6823      	ldr	r3, [r4, #0]
 80118d8:	079b      	lsls	r3, r3, #30
 80118da:	d413      	bmi.n	8011904 <_printf_i+0x22c>
 80118dc:	68e0      	ldr	r0, [r4, #12]
 80118de:	9b03      	ldr	r3, [sp, #12]
 80118e0:	4298      	cmp	r0, r3
 80118e2:	bfb8      	it	lt
 80118e4:	4618      	movlt	r0, r3
 80118e6:	e7a6      	b.n	8011836 <_printf_i+0x15e>
 80118e8:	2301      	movs	r3, #1
 80118ea:	4632      	mov	r2, r6
 80118ec:	4649      	mov	r1, r9
 80118ee:	4640      	mov	r0, r8
 80118f0:	47d0      	blx	sl
 80118f2:	3001      	adds	r0, #1
 80118f4:	d09d      	beq.n	8011832 <_printf_i+0x15a>
 80118f6:	3501      	adds	r5, #1
 80118f8:	68e3      	ldr	r3, [r4, #12]
 80118fa:	9903      	ldr	r1, [sp, #12]
 80118fc:	1a5b      	subs	r3, r3, r1
 80118fe:	42ab      	cmp	r3, r5
 8011900:	dcf2      	bgt.n	80118e8 <_printf_i+0x210>
 8011902:	e7eb      	b.n	80118dc <_printf_i+0x204>
 8011904:	2500      	movs	r5, #0
 8011906:	f104 0619 	add.w	r6, r4, #25
 801190a:	e7f5      	b.n	80118f8 <_printf_i+0x220>
 801190c:	08011e60 	.word	0x08011e60
 8011910:	08011e71 	.word	0x08011e71

08011914 <__swbuf_r>:
 8011914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011916:	460e      	mov	r6, r1
 8011918:	4614      	mov	r4, r2
 801191a:	4605      	mov	r5, r0
 801191c:	b118      	cbz	r0, 8011926 <__swbuf_r+0x12>
 801191e:	6a03      	ldr	r3, [r0, #32]
 8011920:	b90b      	cbnz	r3, 8011926 <__swbuf_r+0x12>
 8011922:	f7ff fae9 	bl	8010ef8 <__sinit>
 8011926:	69a3      	ldr	r3, [r4, #24]
 8011928:	60a3      	str	r3, [r4, #8]
 801192a:	89a3      	ldrh	r3, [r4, #12]
 801192c:	071a      	lsls	r2, r3, #28
 801192e:	d501      	bpl.n	8011934 <__swbuf_r+0x20>
 8011930:	6923      	ldr	r3, [r4, #16]
 8011932:	b943      	cbnz	r3, 8011946 <__swbuf_r+0x32>
 8011934:	4621      	mov	r1, r4
 8011936:	4628      	mov	r0, r5
 8011938:	f000 f82a 	bl	8011990 <__swsetup_r>
 801193c:	b118      	cbz	r0, 8011946 <__swbuf_r+0x32>
 801193e:	f04f 37ff 	mov.w	r7, #4294967295
 8011942:	4638      	mov	r0, r7
 8011944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011946:	6823      	ldr	r3, [r4, #0]
 8011948:	6922      	ldr	r2, [r4, #16]
 801194a:	1a98      	subs	r0, r3, r2
 801194c:	6963      	ldr	r3, [r4, #20]
 801194e:	b2f6      	uxtb	r6, r6
 8011950:	4283      	cmp	r3, r0
 8011952:	4637      	mov	r7, r6
 8011954:	dc05      	bgt.n	8011962 <__swbuf_r+0x4e>
 8011956:	4621      	mov	r1, r4
 8011958:	4628      	mov	r0, r5
 801195a:	f7ff fccd 	bl	80112f8 <_fflush_r>
 801195e:	2800      	cmp	r0, #0
 8011960:	d1ed      	bne.n	801193e <__swbuf_r+0x2a>
 8011962:	68a3      	ldr	r3, [r4, #8]
 8011964:	3b01      	subs	r3, #1
 8011966:	60a3      	str	r3, [r4, #8]
 8011968:	6823      	ldr	r3, [r4, #0]
 801196a:	1c5a      	adds	r2, r3, #1
 801196c:	6022      	str	r2, [r4, #0]
 801196e:	701e      	strb	r6, [r3, #0]
 8011970:	6962      	ldr	r2, [r4, #20]
 8011972:	1c43      	adds	r3, r0, #1
 8011974:	429a      	cmp	r2, r3
 8011976:	d004      	beq.n	8011982 <__swbuf_r+0x6e>
 8011978:	89a3      	ldrh	r3, [r4, #12]
 801197a:	07db      	lsls	r3, r3, #31
 801197c:	d5e1      	bpl.n	8011942 <__swbuf_r+0x2e>
 801197e:	2e0a      	cmp	r6, #10
 8011980:	d1df      	bne.n	8011942 <__swbuf_r+0x2e>
 8011982:	4621      	mov	r1, r4
 8011984:	4628      	mov	r0, r5
 8011986:	f7ff fcb7 	bl	80112f8 <_fflush_r>
 801198a:	2800      	cmp	r0, #0
 801198c:	d0d9      	beq.n	8011942 <__swbuf_r+0x2e>
 801198e:	e7d6      	b.n	801193e <__swbuf_r+0x2a>

08011990 <__swsetup_r>:
 8011990:	b538      	push	{r3, r4, r5, lr}
 8011992:	4b29      	ldr	r3, [pc, #164]	@ (8011a38 <__swsetup_r+0xa8>)
 8011994:	4605      	mov	r5, r0
 8011996:	6818      	ldr	r0, [r3, #0]
 8011998:	460c      	mov	r4, r1
 801199a:	b118      	cbz	r0, 80119a4 <__swsetup_r+0x14>
 801199c:	6a03      	ldr	r3, [r0, #32]
 801199e:	b90b      	cbnz	r3, 80119a4 <__swsetup_r+0x14>
 80119a0:	f7ff faaa 	bl	8010ef8 <__sinit>
 80119a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119a8:	0719      	lsls	r1, r3, #28
 80119aa:	d422      	bmi.n	80119f2 <__swsetup_r+0x62>
 80119ac:	06da      	lsls	r2, r3, #27
 80119ae:	d407      	bmi.n	80119c0 <__swsetup_r+0x30>
 80119b0:	2209      	movs	r2, #9
 80119b2:	602a      	str	r2, [r5, #0]
 80119b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119b8:	81a3      	strh	r3, [r4, #12]
 80119ba:	f04f 30ff 	mov.w	r0, #4294967295
 80119be:	e033      	b.n	8011a28 <__swsetup_r+0x98>
 80119c0:	0758      	lsls	r0, r3, #29
 80119c2:	d512      	bpl.n	80119ea <__swsetup_r+0x5a>
 80119c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80119c6:	b141      	cbz	r1, 80119da <__swsetup_r+0x4a>
 80119c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80119cc:	4299      	cmp	r1, r3
 80119ce:	d002      	beq.n	80119d6 <__swsetup_r+0x46>
 80119d0:	4628      	mov	r0, r5
 80119d2:	f7ff fbc3 	bl	801115c <_free_r>
 80119d6:	2300      	movs	r3, #0
 80119d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80119da:	89a3      	ldrh	r3, [r4, #12]
 80119dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80119e0:	81a3      	strh	r3, [r4, #12]
 80119e2:	2300      	movs	r3, #0
 80119e4:	6063      	str	r3, [r4, #4]
 80119e6:	6923      	ldr	r3, [r4, #16]
 80119e8:	6023      	str	r3, [r4, #0]
 80119ea:	89a3      	ldrh	r3, [r4, #12]
 80119ec:	f043 0308 	orr.w	r3, r3, #8
 80119f0:	81a3      	strh	r3, [r4, #12]
 80119f2:	6923      	ldr	r3, [r4, #16]
 80119f4:	b94b      	cbnz	r3, 8011a0a <__swsetup_r+0x7a>
 80119f6:	89a3      	ldrh	r3, [r4, #12]
 80119f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80119fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a00:	d003      	beq.n	8011a0a <__swsetup_r+0x7a>
 8011a02:	4621      	mov	r1, r4
 8011a04:	4628      	mov	r0, r5
 8011a06:	f000 f883 	bl	8011b10 <__smakebuf_r>
 8011a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a0e:	f013 0201 	ands.w	r2, r3, #1
 8011a12:	d00a      	beq.n	8011a2a <__swsetup_r+0x9a>
 8011a14:	2200      	movs	r2, #0
 8011a16:	60a2      	str	r2, [r4, #8]
 8011a18:	6962      	ldr	r2, [r4, #20]
 8011a1a:	4252      	negs	r2, r2
 8011a1c:	61a2      	str	r2, [r4, #24]
 8011a1e:	6922      	ldr	r2, [r4, #16]
 8011a20:	b942      	cbnz	r2, 8011a34 <__swsetup_r+0xa4>
 8011a22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011a26:	d1c5      	bne.n	80119b4 <__swsetup_r+0x24>
 8011a28:	bd38      	pop	{r3, r4, r5, pc}
 8011a2a:	0799      	lsls	r1, r3, #30
 8011a2c:	bf58      	it	pl
 8011a2e:	6962      	ldrpl	r2, [r4, #20]
 8011a30:	60a2      	str	r2, [r4, #8]
 8011a32:	e7f4      	b.n	8011a1e <__swsetup_r+0x8e>
 8011a34:	2000      	movs	r0, #0
 8011a36:	e7f7      	b.n	8011a28 <__swsetup_r+0x98>
 8011a38:	2000005c 	.word	0x2000005c

08011a3c <_raise_r>:
 8011a3c:	291f      	cmp	r1, #31
 8011a3e:	b538      	push	{r3, r4, r5, lr}
 8011a40:	4605      	mov	r5, r0
 8011a42:	460c      	mov	r4, r1
 8011a44:	d904      	bls.n	8011a50 <_raise_r+0x14>
 8011a46:	2316      	movs	r3, #22
 8011a48:	6003      	str	r3, [r0, #0]
 8011a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a4e:	bd38      	pop	{r3, r4, r5, pc}
 8011a50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011a52:	b112      	cbz	r2, 8011a5a <_raise_r+0x1e>
 8011a54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a58:	b94b      	cbnz	r3, 8011a6e <_raise_r+0x32>
 8011a5a:	4628      	mov	r0, r5
 8011a5c:	f000 f830 	bl	8011ac0 <_getpid_r>
 8011a60:	4622      	mov	r2, r4
 8011a62:	4601      	mov	r1, r0
 8011a64:	4628      	mov	r0, r5
 8011a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a6a:	f000 b817 	b.w	8011a9c <_kill_r>
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d00a      	beq.n	8011a88 <_raise_r+0x4c>
 8011a72:	1c59      	adds	r1, r3, #1
 8011a74:	d103      	bne.n	8011a7e <_raise_r+0x42>
 8011a76:	2316      	movs	r3, #22
 8011a78:	6003      	str	r3, [r0, #0]
 8011a7a:	2001      	movs	r0, #1
 8011a7c:	e7e7      	b.n	8011a4e <_raise_r+0x12>
 8011a7e:	2100      	movs	r1, #0
 8011a80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011a84:	4620      	mov	r0, r4
 8011a86:	4798      	blx	r3
 8011a88:	2000      	movs	r0, #0
 8011a8a:	e7e0      	b.n	8011a4e <_raise_r+0x12>

08011a8c <raise>:
 8011a8c:	4b02      	ldr	r3, [pc, #8]	@ (8011a98 <raise+0xc>)
 8011a8e:	4601      	mov	r1, r0
 8011a90:	6818      	ldr	r0, [r3, #0]
 8011a92:	f7ff bfd3 	b.w	8011a3c <_raise_r>
 8011a96:	bf00      	nop
 8011a98:	2000005c 	.word	0x2000005c

08011a9c <_kill_r>:
 8011a9c:	b538      	push	{r3, r4, r5, lr}
 8011a9e:	4d07      	ldr	r5, [pc, #28]	@ (8011abc <_kill_r+0x20>)
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	4608      	mov	r0, r1
 8011aa6:	4611      	mov	r1, r2
 8011aa8:	602b      	str	r3, [r5, #0]
 8011aaa:	f7ef ff9f 	bl	80019ec <_kill>
 8011aae:	1c43      	adds	r3, r0, #1
 8011ab0:	d102      	bne.n	8011ab8 <_kill_r+0x1c>
 8011ab2:	682b      	ldr	r3, [r5, #0]
 8011ab4:	b103      	cbz	r3, 8011ab8 <_kill_r+0x1c>
 8011ab6:	6023      	str	r3, [r4, #0]
 8011ab8:	bd38      	pop	{r3, r4, r5, pc}
 8011aba:	bf00      	nop
 8011abc:	20009584 	.word	0x20009584

08011ac0 <_getpid_r>:
 8011ac0:	f7ef bf8c 	b.w	80019dc <_getpid>

08011ac4 <__swhatbuf_r>:
 8011ac4:	b570      	push	{r4, r5, r6, lr}
 8011ac6:	460c      	mov	r4, r1
 8011ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011acc:	2900      	cmp	r1, #0
 8011ace:	b096      	sub	sp, #88	@ 0x58
 8011ad0:	4615      	mov	r5, r2
 8011ad2:	461e      	mov	r6, r3
 8011ad4:	da0d      	bge.n	8011af2 <__swhatbuf_r+0x2e>
 8011ad6:	89a3      	ldrh	r3, [r4, #12]
 8011ad8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011adc:	f04f 0100 	mov.w	r1, #0
 8011ae0:	bf14      	ite	ne
 8011ae2:	2340      	movne	r3, #64	@ 0x40
 8011ae4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011ae8:	2000      	movs	r0, #0
 8011aea:	6031      	str	r1, [r6, #0]
 8011aec:	602b      	str	r3, [r5, #0]
 8011aee:	b016      	add	sp, #88	@ 0x58
 8011af0:	bd70      	pop	{r4, r5, r6, pc}
 8011af2:	466a      	mov	r2, sp
 8011af4:	f000 f848 	bl	8011b88 <_fstat_r>
 8011af8:	2800      	cmp	r0, #0
 8011afa:	dbec      	blt.n	8011ad6 <__swhatbuf_r+0x12>
 8011afc:	9901      	ldr	r1, [sp, #4]
 8011afe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011b02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011b06:	4259      	negs	r1, r3
 8011b08:	4159      	adcs	r1, r3
 8011b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b0e:	e7eb      	b.n	8011ae8 <__swhatbuf_r+0x24>

08011b10 <__smakebuf_r>:
 8011b10:	898b      	ldrh	r3, [r1, #12]
 8011b12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b14:	079d      	lsls	r5, r3, #30
 8011b16:	4606      	mov	r6, r0
 8011b18:	460c      	mov	r4, r1
 8011b1a:	d507      	bpl.n	8011b2c <__smakebuf_r+0x1c>
 8011b1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011b20:	6023      	str	r3, [r4, #0]
 8011b22:	6123      	str	r3, [r4, #16]
 8011b24:	2301      	movs	r3, #1
 8011b26:	6163      	str	r3, [r4, #20]
 8011b28:	b003      	add	sp, #12
 8011b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b2c:	ab01      	add	r3, sp, #4
 8011b2e:	466a      	mov	r2, sp
 8011b30:	f7ff ffc8 	bl	8011ac4 <__swhatbuf_r>
 8011b34:	9f00      	ldr	r7, [sp, #0]
 8011b36:	4605      	mov	r5, r0
 8011b38:	4639      	mov	r1, r7
 8011b3a:	4630      	mov	r0, r6
 8011b3c:	f7ff f886 	bl	8010c4c <_malloc_r>
 8011b40:	b948      	cbnz	r0, 8011b56 <__smakebuf_r+0x46>
 8011b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b46:	059a      	lsls	r2, r3, #22
 8011b48:	d4ee      	bmi.n	8011b28 <__smakebuf_r+0x18>
 8011b4a:	f023 0303 	bic.w	r3, r3, #3
 8011b4e:	f043 0302 	orr.w	r3, r3, #2
 8011b52:	81a3      	strh	r3, [r4, #12]
 8011b54:	e7e2      	b.n	8011b1c <__smakebuf_r+0xc>
 8011b56:	89a3      	ldrh	r3, [r4, #12]
 8011b58:	6020      	str	r0, [r4, #0]
 8011b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b5e:	81a3      	strh	r3, [r4, #12]
 8011b60:	9b01      	ldr	r3, [sp, #4]
 8011b62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011b66:	b15b      	cbz	r3, 8011b80 <__smakebuf_r+0x70>
 8011b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	f000 f81d 	bl	8011bac <_isatty_r>
 8011b72:	b128      	cbz	r0, 8011b80 <__smakebuf_r+0x70>
 8011b74:	89a3      	ldrh	r3, [r4, #12]
 8011b76:	f023 0303 	bic.w	r3, r3, #3
 8011b7a:	f043 0301 	orr.w	r3, r3, #1
 8011b7e:	81a3      	strh	r3, [r4, #12]
 8011b80:	89a3      	ldrh	r3, [r4, #12]
 8011b82:	431d      	orrs	r5, r3
 8011b84:	81a5      	strh	r5, [r4, #12]
 8011b86:	e7cf      	b.n	8011b28 <__smakebuf_r+0x18>

08011b88 <_fstat_r>:
 8011b88:	b538      	push	{r3, r4, r5, lr}
 8011b8a:	4d07      	ldr	r5, [pc, #28]	@ (8011ba8 <_fstat_r+0x20>)
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	4604      	mov	r4, r0
 8011b90:	4608      	mov	r0, r1
 8011b92:	4611      	mov	r1, r2
 8011b94:	602b      	str	r3, [r5, #0]
 8011b96:	f7ef ff89 	bl	8001aac <_fstat>
 8011b9a:	1c43      	adds	r3, r0, #1
 8011b9c:	d102      	bne.n	8011ba4 <_fstat_r+0x1c>
 8011b9e:	682b      	ldr	r3, [r5, #0]
 8011ba0:	b103      	cbz	r3, 8011ba4 <_fstat_r+0x1c>
 8011ba2:	6023      	str	r3, [r4, #0]
 8011ba4:	bd38      	pop	{r3, r4, r5, pc}
 8011ba6:	bf00      	nop
 8011ba8:	20009584 	.word	0x20009584

08011bac <_isatty_r>:
 8011bac:	b538      	push	{r3, r4, r5, lr}
 8011bae:	4d06      	ldr	r5, [pc, #24]	@ (8011bc8 <_isatty_r+0x1c>)
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	4608      	mov	r0, r1
 8011bb6:	602b      	str	r3, [r5, #0]
 8011bb8:	f7ef ff88 	bl	8001acc <_isatty>
 8011bbc:	1c43      	adds	r3, r0, #1
 8011bbe:	d102      	bne.n	8011bc6 <_isatty_r+0x1a>
 8011bc0:	682b      	ldr	r3, [r5, #0]
 8011bc2:	b103      	cbz	r3, 8011bc6 <_isatty_r+0x1a>
 8011bc4:	6023      	str	r3, [r4, #0]
 8011bc6:	bd38      	pop	{r3, r4, r5, pc}
 8011bc8:	20009584 	.word	0x20009584

08011bcc <_init>:
 8011bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bce:	bf00      	nop
 8011bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bd2:	bc08      	pop	{r3}
 8011bd4:	469e      	mov	lr, r3
 8011bd6:	4770      	bx	lr

08011bd8 <_fini>:
 8011bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bda:	bf00      	nop
 8011bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bde:	bc08      	pop	{r3}
 8011be0:	469e      	mov	lr, r3
 8011be2:	4770      	bx	lr
