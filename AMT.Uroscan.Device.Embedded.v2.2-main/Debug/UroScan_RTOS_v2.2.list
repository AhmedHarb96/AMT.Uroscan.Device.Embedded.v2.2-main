
UroScan_RTOS_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08011b50  08011b50  00012b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011df0  08011df0  000130ac  2**0
                  CONTENTS
  4 .ARM          00000008  08011df0  08011df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011df8  08011df8  000130ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08011df8  08011df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08011e04  08011e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08011e10  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000130ac  2**0
                  CONTENTS
 10 .bss          000094d4  200000b0  200000b0  000130b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20009584  20009584  000130b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000130ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002aff5  00000000  00000000  000130dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005836  00000000  00000000  0003e0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e00  00000000  00000000  00043908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001aeec  00000000  00000000  00045708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000bcd0  00000000  00000000  000605f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0006c2c4  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001741  00000000  00000000  0006c307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008a24  00000000  00000000  0006da48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c5  00000000  00000000  0007646c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011b38 	.word	0x08011b38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08011b38 	.word	0x08011b38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da0:	f000 ff00 	bl	8001ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da4:	f000 f816 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da8:	f000 f9c6 	bl	8001138 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dac:	f000 f95e 	bl	800106c <MX_DMA_Init>
  MX_SPI1_Init();
 8000db0:	f000 f86e 	bl	8000e90 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000db4:	f000 f8a2 	bl	8000efc <MX_SPI2_Init>
  MX_SPI3_Init();
 8000db8:	f000 f8d6 	bl	8000f68 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000dbc:	f000 f92c 	bl	8001018 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8000dc0:	f000 f908 	bl	8000fd4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	  SetupOS();
 8000dc4:	f00d fd02 	bl	800e7cc <SetupOS>
	  StartOS();
 8000dc8:	f00d fdfe 	bl	800e9c8 <StartOS>
	  return 0;
 8000dcc:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	@ 0x50
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0320 	add.w	r3, r7, #32
 8000dde:	2230      	movs	r2, #48	@ 0x30
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f010 f8b5 	bl	8010f52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <SystemClock_Config+0xb4>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <SystemClock_Config+0xb4>)
 8000e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <SystemClock_Config+0xb4>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <SystemClock_Config+0xb8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e8c <SystemClock_Config+0xb8>)
 8000e1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <SystemClock_Config+0xb8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e30:	2302      	movs	r3, #2
 8000e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e38:	2310      	movs	r3, #16
 8000e3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 f8ff 	bl	8003048 <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e50:	f000 f9ea 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e54:	230f      	movs	r3, #15
 8000e56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 fb62 	bl	8003538 <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e7a:	f000 f9d5 	bl	8001228 <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3750      	adds	r7, #80	@ 0x50
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40007000 	.word	0x40007000

08000e90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e94:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000e96:	4a18      	ldr	r2, [pc, #96]	@ (8000ef8 <MX_SPI1_Init+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000e9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ea0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ec0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000ec4:	2208      	movs	r2, #8
 8000ec6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000edc:	220a      	movs	r2, #10
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <MX_SPI1_Init+0x64>)
 8000ee2:	f002 fd09 	bl	80038f8 <HAL_SPI_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eec:	f000 f99c 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200000d0 	.word	0x200000d0
 8000ef8:	40013000 	.word	0x40013000

08000efc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f00:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f02:	4a18      	ldr	r2, [pc, #96]	@ (8000f64 <MX_SPI2_Init+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f06:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f30:	2208      	movs	r2, #8
 8000f32:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f40:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f48:	220a      	movs	r2, #10
 8000f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f4c:	4804      	ldr	r0, [pc, #16]	@ (8000f60 <MX_SPI2_Init+0x64>)
 8000f4e:	f002 fcd3 	bl	80038f8 <HAL_SPI_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f58:	f000 f966 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000128 	.word	0x20000128
 8000f64:	40003800 	.word	0x40003800

08000f68 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000f6e:	4a18      	ldr	r2, [pc, #96]	@ (8000fd0 <MX_SPI3_Init+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f72:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000f74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f98:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000f9c:	2210      	movs	r2, #16
 8000f9e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fac:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000fb4:	220a      	movs	r2, #10
 8000fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <MX_SPI3_Init+0x64>)
 8000fba:	f002 fc9d 	bl	80038f8 <HAL_SPI_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000fc4:	f000 f930 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000180 	.word	0x20000180
 8000fd0:	40003c00 	.word	0x40003c00

08000fd4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <MX_TIM11_Init+0x3c>)
 8000fda:	4a0e      	ldr	r2, [pc, #56]	@ (8001014 <MX_TIM11_Init+0x40>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_TIM11_Init+0x3c>)
 8000fe0:	2210      	movs	r2, #16
 8000fe2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <MX_TIM11_Init+0x3c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_TIM11_Init+0x3c>)
 8000fec:	2263      	movs	r2, #99	@ 0x63
 8000fee:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <MX_TIM11_Init+0x3c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_TIM11_Init+0x3c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_TIM11_Init+0x3c>)
 8000ffe:	f003 ff47 	bl	8004e90 <HAL_TIM_Base_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8001008:	f000 f90e 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000418 	.word	0x20000418
 8001014:	40014800 	.word	0x40014800

08001018 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 800101e:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <MX_USART1_UART_Init+0x50>)
 8001020:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 8001024:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001028:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 8001050:	f004 f9c0 	bl	80053d4 <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800105a:	f000 f8e5 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000460 	.word	0x20000460
 8001068:	40011000 	.word	0x40011000

0800106c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b2f      	ldr	r3, [pc, #188]	@ (8001134 <MX_DMA_Init+0xc8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a2e      	ldr	r2, [pc, #184]	@ (8001134 <MX_DMA_Init+0xc8>)
 800107c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b2c      	ldr	r3, [pc, #176]	@ (8001134 <MX_DMA_Init+0xc8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <MX_DMA_Init+0xc8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a27      	ldr	r2, [pc, #156]	@ (8001134 <MX_DMA_Init+0xc8>)
 8001098:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <MX_DMA_Init+0xc8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2105      	movs	r1, #5
 80010ae:	200b      	movs	r0, #11
 80010b0:	f000 feff 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010b4:	200b      	movs	r0, #11
 80010b6:	f000 ff18 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2105      	movs	r1, #5
 80010be:	200e      	movs	r0, #14
 80010c0:	f000 fef7 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010c4:	200e      	movs	r0, #14
 80010c6:	f000 ff10 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2105      	movs	r1, #5
 80010ce:	200f      	movs	r0, #15
 80010d0:	f000 feef 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010d4:	200f      	movs	r0, #15
 80010d6:	f000 ff08 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2105      	movs	r1, #5
 80010de:	2010      	movs	r0, #16
 80010e0:	f000 fee7 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010e4:	2010      	movs	r0, #16
 80010e6:	f000 ff00 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	2038      	movs	r0, #56	@ 0x38
 80010f0:	f000 fedf 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010f4:	2038      	movs	r0, #56	@ 0x38
 80010f6:	f000 fef8 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2105      	movs	r1, #5
 80010fe:	203a      	movs	r0, #58	@ 0x3a
 8001100:	f000 fed7 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001104:	203a      	movs	r0, #58	@ 0x3a
 8001106:	f000 fef0 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2105      	movs	r1, #5
 800110e:	203b      	movs	r0, #59	@ 0x3b
 8001110:	f000 fecf 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001114:	203b      	movs	r0, #59	@ 0x3b
 8001116:	f000 fee8 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2105      	movs	r1, #5
 800111e:	2046      	movs	r0, #70	@ 0x46
 8001120:	f000 fec7 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001124:	2046      	movs	r0, #70	@ 0x46
 8001126:	f000 fee0 	bl	8001eea <HAL_NVIC_EnableIRQ>

}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b32      	ldr	r3, [pc, #200]	@ (800121c <MX_GPIO_Init+0xe4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a31      	ldr	r2, [pc, #196]	@ (800121c <MX_GPIO_Init+0xe4>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <MX_GPIO_Init+0xe4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b2b      	ldr	r3, [pc, #172]	@ (800121c <MX_GPIO_Init+0xe4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a2a      	ldr	r2, [pc, #168]	@ (800121c <MX_GPIO_Init+0xe4>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b28      	ldr	r3, [pc, #160]	@ (800121c <MX_GPIO_Init+0xe4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b24      	ldr	r3, [pc, #144]	@ (800121c <MX_GPIO_Init+0xe4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a23      	ldr	r2, [pc, #140]	@ (800121c <MX_GPIO_Init+0xe4>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b21      	ldr	r3, [pc, #132]	@ (800121c <MX_GPIO_Init+0xe4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <MX_GPIO_Init+0xe4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <MX_GPIO_Init+0xe4>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <MX_GPIO_Init+0xe4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f248 0110 	movw	r1, #32784	@ 0x8010
 80011c4:	4816      	ldr	r0, [pc, #88]	@ (8001220 <MX_GPIO_Init+0xe8>)
 80011c6:	f001 ff25 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PUMP_Pin|VALVE_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f241 0103 	movw	r1, #4099	@ 0x1003
 80011d0:	4814      	ldr	r0, [pc, #80]	@ (8001224 <MX_GPIO_Init+0xec>)
 80011d2:	f001 ff1f 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI3_CS_Pin;
 80011d6:	f248 0310 	movw	r3, #32784	@ 0x8010
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	480c      	ldr	r0, [pc, #48]	@ (8001220 <MX_GPIO_Init+0xe8>)
 80011f0:	f001 fd74 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PUMP_Pin VALVE_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = PUMP_Pin|VALVE_Pin|SPI2_CS_Pin;
 80011f4:	f241 0303 	movw	r3, #4099	@ 0x1003
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_GPIO_Init+0xec>)
 800120e:	f001 fd65 	bl	8002cdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	@ 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <Error_Handler+0x8>

08001234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_MspInit+0x54>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	4a11      	ldr	r2, [pc, #68]	@ (8001288 <HAL_MspInit+0x54>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001248:	6453      	str	r3, [r2, #68]	@ 0x44
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_MspInit+0x54>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_MspInit+0x54>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <HAL_MspInit+0x54>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001264:	6413      	str	r3, [r2, #64]	@ 0x40
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <HAL_MspInit+0x54>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	210f      	movs	r1, #15
 8001276:	f06f 0001 	mvn.w	r0, #1
 800127a:	f000 fe1a 	bl	8001eb2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08e      	sub	sp, #56	@ 0x38
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a95      	ldr	r2, [pc, #596]	@ (8001500 <HAL_SPI_MspInit+0x274>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	f040 8091 	bne.w	80013d2 <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
 80012b4:	4b93      	ldr	r3, [pc, #588]	@ (8001504 <HAL_SPI_MspInit+0x278>)
 80012b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b8:	4a92      	ldr	r2, [pc, #584]	@ (8001504 <HAL_SPI_MspInit+0x278>)
 80012ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012be:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c0:	4b90      	ldr	r3, [pc, #576]	@ (8001504 <HAL_SPI_MspInit+0x278>)
 80012c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012c8:	623b      	str	r3, [r7, #32]
 80012ca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001504 <HAL_SPI_MspInit+0x278>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	4a8b      	ldr	r2, [pc, #556]	@ (8001504 <HAL_SPI_MspInit+0x278>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6313      	str	r3, [r2, #48]	@ 0x30
 80012dc:	4b89      	ldr	r3, [pc, #548]	@ (8001504 <HAL_SPI_MspInit+0x278>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012e8:	23e0      	movs	r3, #224	@ 0xe0
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012f8:	2305      	movs	r3, #5
 80012fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001300:	4619      	mov	r1, r3
 8001302:	4881      	ldr	r0, [pc, #516]	@ (8001508 <HAL_SPI_MspInit+0x27c>)
 8001304:	f001 fcea 	bl	8002cdc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001308:	4b80      	ldr	r3, [pc, #512]	@ (800150c <HAL_SPI_MspInit+0x280>)
 800130a:	4a81      	ldr	r2, [pc, #516]	@ (8001510 <HAL_SPI_MspInit+0x284>)
 800130c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800130e:	4b7f      	ldr	r3, [pc, #508]	@ (800150c <HAL_SPI_MspInit+0x280>)
 8001310:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001314:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001316:	4b7d      	ldr	r3, [pc, #500]	@ (800150c <HAL_SPI_MspInit+0x280>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800131c:	4b7b      	ldr	r3, [pc, #492]	@ (800150c <HAL_SPI_MspInit+0x280>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001322:	4b7a      	ldr	r3, [pc, #488]	@ (800150c <HAL_SPI_MspInit+0x280>)
 8001324:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001328:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800132a:	4b78      	ldr	r3, [pc, #480]	@ (800150c <HAL_SPI_MspInit+0x280>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001330:	4b76      	ldr	r3, [pc, #472]	@ (800150c <HAL_SPI_MspInit+0x280>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001336:	4b75      	ldr	r3, [pc, #468]	@ (800150c <HAL_SPI_MspInit+0x280>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800133c:	4b73      	ldr	r3, [pc, #460]	@ (800150c <HAL_SPI_MspInit+0x280>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001342:	4b72      	ldr	r3, [pc, #456]	@ (800150c <HAL_SPI_MspInit+0x280>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001348:	4870      	ldr	r0, [pc, #448]	@ (800150c <HAL_SPI_MspInit+0x280>)
 800134a:	f000 fded 	bl	8001f28 <HAL_DMA_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001354:	f7ff ff68 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a6c      	ldr	r2, [pc, #432]	@ (800150c <HAL_SPI_MspInit+0x280>)
 800135c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800135e:	4a6b      	ldr	r2, [pc, #428]	@ (800150c <HAL_SPI_MspInit+0x280>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001364:	4b6b      	ldr	r3, [pc, #428]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 8001366:	4a6c      	ldr	r2, [pc, #432]	@ (8001518 <HAL_SPI_MspInit+0x28c>)
 8001368:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800136a:	4b6a      	ldr	r3, [pc, #424]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 800136c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001370:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001372:	4b68      	ldr	r3, [pc, #416]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 8001374:	2240      	movs	r2, #64	@ 0x40
 8001376:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001378:	4b66      	ldr	r3, [pc, #408]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800137e:	4b65      	ldr	r3, [pc, #404]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 8001380:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001384:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001386:	4b63      	ldr	r3, [pc, #396]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800138c:	4b61      	ldr	r3, [pc, #388]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001392:	4b60      	ldr	r3, [pc, #384]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001398:	4b5e      	ldr	r3, [pc, #376]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800139e:	4b5d      	ldr	r3, [pc, #372]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013a4:	485b      	ldr	r0, [pc, #364]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 80013a6:	f000 fdbf 	bl	8001f28 <HAL_DMA_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80013b0:	f7ff ff3a 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a57      	ldr	r2, [pc, #348]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 80013b8:	649a      	str	r2, [r3, #72]	@ 0x48
 80013ba:	4a56      	ldr	r2, [pc, #344]	@ (8001514 <HAL_SPI_MspInit+0x288>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2105      	movs	r1, #5
 80013c4:	2023      	movs	r0, #35	@ 0x23
 80013c6:	f000 fd74 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013ca:	2023      	movs	r0, #35	@ 0x23
 80013cc:	f000 fd8d 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013d0:	e145      	b.n	800165e <HAL_SPI_MspInit+0x3d2>
  else if(hspi->Instance==SPI2)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a51      	ldr	r2, [pc, #324]	@ (800151c <HAL_SPI_MspInit+0x290>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	f040 80ab 	bne.w	8001534 <HAL_SPI_MspInit+0x2a8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	4b48      	ldr	r3, [pc, #288]	@ (8001504 <HAL_SPI_MspInit+0x278>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	4a47      	ldr	r2, [pc, #284]	@ (8001504 <HAL_SPI_MspInit+0x278>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ee:	4b45      	ldr	r3, [pc, #276]	@ (8001504 <HAL_SPI_MspInit+0x278>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	4b41      	ldr	r3, [pc, #260]	@ (8001504 <HAL_SPI_MspInit+0x278>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a40      	ldr	r2, [pc, #256]	@ (8001504 <HAL_SPI_MspInit+0x278>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b3e      	ldr	r3, [pc, #248]	@ (8001504 <HAL_SPI_MspInit+0x278>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001416:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001428:	2305      	movs	r3, #5
 800142a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	483b      	ldr	r0, [pc, #236]	@ (8001520 <HAL_SPI_MspInit+0x294>)
 8001434:	f001 fc52 	bl	8002cdc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001438:	4b3a      	ldr	r3, [pc, #232]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 800143a:	4a3b      	ldr	r2, [pc, #236]	@ (8001528 <HAL_SPI_MspInit+0x29c>)
 800143c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800143e:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001444:	4b37      	ldr	r3, [pc, #220]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144a:	4b36      	ldr	r3, [pc, #216]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001450:	4b34      	ldr	r3, [pc, #208]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 8001452:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001456:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800145e:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001464:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800146a:	4b2e      	ldr	r3, [pc, #184]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001470:	4b2c      	ldr	r3, [pc, #176]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001476:	482b      	ldr	r0, [pc, #172]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 8001478:	f000 fd56 	bl	8001f28 <HAL_DMA_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_SPI_MspInit+0x1fa>
      Error_Handler();
 8001482:	f7ff fed1 	bl	8001228 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a26      	ldr	r2, [pc, #152]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 800148a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800148c:	4a25      	ldr	r2, [pc, #148]	@ (8001524 <HAL_SPI_MspInit+0x298>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001492:	4b26      	ldr	r3, [pc, #152]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 8001494:	4a26      	ldr	r2, [pc, #152]	@ (8001530 <HAL_SPI_MspInit+0x2a4>)
 8001496:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001498:	4b24      	ldr	r3, [pc, #144]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 800149a:	2200      	movs	r2, #0
 800149c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800149e:	4b23      	ldr	r3, [pc, #140]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 80014a0:	2240      	movs	r2, #64	@ 0x40
 80014a2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a4:	4b21      	ldr	r3, [pc, #132]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014aa:	4b20      	ldr	r3, [pc, #128]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 80014ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014b0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b8:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80014be:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ca:	4b18      	ldr	r3, [pc, #96]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80014d0:	4816      	ldr	r0, [pc, #88]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 80014d2:	f000 fd29 	bl	8001f28 <HAL_DMA_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 80014dc:	f7ff fea4 	bl	8001228 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a12      	ldr	r2, [pc, #72]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 80014e4:	649a      	str	r2, [r3, #72]	@ 0x48
 80014e6:	4a11      	ldr	r2, [pc, #68]	@ (800152c <HAL_SPI_MspInit+0x2a0>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2105      	movs	r1, #5
 80014f0:	2024      	movs	r0, #36	@ 0x24
 80014f2:	f000 fcde 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80014f6:	2024      	movs	r0, #36	@ 0x24
 80014f8:	f000 fcf7 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 80014fc:	e0af      	b.n	800165e <HAL_SPI_MspInit+0x3d2>
 80014fe:	bf00      	nop
 8001500:	40013000 	.word	0x40013000
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000
 800150c:	200001d8 	.word	0x200001d8
 8001510:	40026410 	.word	0x40026410
 8001514:	20000238 	.word	0x20000238
 8001518:	40026458 	.word	0x40026458
 800151c:	40003800 	.word	0x40003800
 8001520:	40020400 	.word	0x40020400
 8001524:	20000298 	.word	0x20000298
 8001528:	40026058 	.word	0x40026058
 800152c:	200002f8 	.word	0x200002f8
 8001530:	40026070 	.word	0x40026070
  else if(hspi->Instance==SPI3)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a4b      	ldr	r2, [pc, #300]	@ (8001668 <HAL_SPI_MspInit+0x3dc>)
 800153a:	4293      	cmp	r3, r2
 800153c:	f040 808f 	bne.w	800165e <HAL_SPI_MspInit+0x3d2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	4b49      	ldr	r3, [pc, #292]	@ (800166c <HAL_SPI_MspInit+0x3e0>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001548:	4a48      	ldr	r2, [pc, #288]	@ (800166c <HAL_SPI_MspInit+0x3e0>)
 800154a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800154e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001550:	4b46      	ldr	r3, [pc, #280]	@ (800166c <HAL_SPI_MspInit+0x3e0>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4b42      	ldr	r3, [pc, #264]	@ (800166c <HAL_SPI_MspInit+0x3e0>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001564:	4a41      	ldr	r2, [pc, #260]	@ (800166c <HAL_SPI_MspInit+0x3e0>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6313      	str	r3, [r2, #48]	@ 0x30
 800156c:	4b3f      	ldr	r3, [pc, #252]	@ (800166c <HAL_SPI_MspInit+0x3e0>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001578:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800158a:	2306      	movs	r3, #6
 800158c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4836      	ldr	r0, [pc, #216]	@ (8001670 <HAL_SPI_MspInit+0x3e4>)
 8001596:	f001 fba1 	bl	8002cdc <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800159a:	4b36      	ldr	r3, [pc, #216]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 800159c:	4a36      	ldr	r2, [pc, #216]	@ (8001678 <HAL_SPI_MspInit+0x3ec>)
 800159e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80015a0:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a6:	4b33      	ldr	r3, [pc, #204]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ac:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b2:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 80015b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b8:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80015c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015cc:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d2:	4b28      	ldr	r3, [pc, #160]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80015d8:	4826      	ldr	r0, [pc, #152]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 80015da:	f000 fca5 	bl	8001f28 <HAL_DMA_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_SPI_MspInit+0x35c>
      Error_Handler();
 80015e4:	f7ff fe20 	bl	8001228 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a22      	ldr	r2, [pc, #136]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 80015ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 80015ee:	4a21      	ldr	r2, [pc, #132]	@ (8001674 <HAL_SPI_MspInit+0x3e8>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80015f4:	4b21      	ldr	r3, [pc, #132]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 80015f6:	4a22      	ldr	r2, [pc, #136]	@ (8001680 <HAL_SPI_MspInit+0x3f4>)
 80015f8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001600:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 8001602:	2240      	movs	r2, #64	@ 0x40
 8001604:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 800160e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001612:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001614:	4b19      	ldr	r3, [pc, #100]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161a:	4b18      	ldr	r3, [pc, #96]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001620:	4b16      	ldr	r3, [pc, #88]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800162c:	4b13      	ldr	r3, [pc, #76]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001632:	4812      	ldr	r0, [pc, #72]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 8001634:	f000 fc78 	bl	8001f28 <HAL_DMA_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_SPI_MspInit+0x3b6>
      Error_Handler();
 800163e:	f7ff fdf3 	bl	8001228 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a0d      	ldr	r2, [pc, #52]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 8001646:	649a      	str	r2, [r3, #72]	@ 0x48
 8001648:	4a0c      	ldr	r2, [pc, #48]	@ (800167c <HAL_SPI_MspInit+0x3f0>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2105      	movs	r1, #5
 8001652:	2033      	movs	r0, #51	@ 0x33
 8001654:	f000 fc2d 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001658:	2033      	movs	r0, #51	@ 0x33
 800165a:	f000 fc46 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3738      	adds	r7, #56	@ 0x38
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40003c00 	.word	0x40003c00
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800
 8001674:	20000358 	.word	0x20000358
 8001678:	40026010 	.word	0x40026010
 800167c:	200003b8 	.word	0x200003b8
 8001680:	40026088 	.word	0x40026088

08001684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0e      	ldr	r2, [pc, #56]	@ (80016cc <HAL_TIM_Base_MspInit+0x48>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d115      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <HAL_TIM_Base_MspInit+0x4c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	4a0c      	ldr	r2, [pc, #48]	@ (80016d0 <HAL_TIM_Base_MspInit+0x4c>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <HAL_TIM_Base_MspInit+0x4c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2105      	movs	r1, #5
 80016b6:	201a      	movs	r0, #26
 80016b8:	f000 fbfb 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016bc:	201a      	movs	r0, #26
 80016be:	f000 fc14 	bl	8001eea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40014800 	.word	0x40014800
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001824 <HAL_UART_MspInit+0x150>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	f040 8091 	bne.w	800181a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001828 <HAL_UART_MspInit+0x154>)
 80016fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001700:	4a49      	ldr	r2, [pc, #292]	@ (8001828 <HAL_UART_MspInit+0x154>)
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	6453      	str	r3, [r2, #68]	@ 0x44
 8001708:	4b47      	ldr	r3, [pc, #284]	@ (8001828 <HAL_UART_MspInit+0x154>)
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b43      	ldr	r3, [pc, #268]	@ (8001828 <HAL_UART_MspInit+0x154>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171c:	4a42      	ldr	r2, [pc, #264]	@ (8001828 <HAL_UART_MspInit+0x154>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6313      	str	r3, [r2, #48]	@ 0x30
 8001724:	4b40      	ldr	r3, [pc, #256]	@ (8001828 <HAL_UART_MspInit+0x154>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001730:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001742:	2307      	movs	r3, #7
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4837      	ldr	r0, [pc, #220]	@ (800182c <HAL_UART_MspInit+0x158>)
 800174e:	f001 fac5 	bl	8002cdc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001752:	4b37      	ldr	r3, [pc, #220]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 8001754:	4a37      	ldr	r2, [pc, #220]	@ (8001834 <HAL_UART_MspInit+0x160>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001758:	4b35      	ldr	r3, [pc, #212]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 800175a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800175e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001760:	4b33      	ldr	r3, [pc, #204]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001766:	4b32      	ldr	r3, [pc, #200]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800176c:	4b30      	ldr	r3, [pc, #192]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 800176e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001772:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001774:	4b2e      	ldr	r3, [pc, #184]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800177a:	4b2d      	ldr	r3, [pc, #180]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001786:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800178c:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001792:	4827      	ldr	r0, [pc, #156]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 8001794:	f000 fbc8 	bl	8001f28 <HAL_DMA_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800179e:	f7ff fd43 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a22      	ldr	r2, [pc, #136]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 80017a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017a8:	4a21      	ldr	r2, [pc, #132]	@ (8001830 <HAL_UART_MspInit+0x15c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <HAL_UART_MspInit+0x164>)
 80017b0:	4a22      	ldr	r2, [pc, #136]	@ (800183c <HAL_UART_MspInit+0x168>)
 80017b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80017b4:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_UART_MspInit+0x164>)
 80017b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <HAL_UART_MspInit+0x164>)
 80017be:	2240      	movs	r2, #64	@ 0x40
 80017c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <HAL_UART_MspInit+0x164>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_UART_MspInit+0x164>)
 80017ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_UART_MspInit+0x164>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d6:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <HAL_UART_MspInit+0x164>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80017dc:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_UART_MspInit+0x164>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_UART_MspInit+0x164>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <HAL_UART_MspInit+0x164>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80017ee:	4812      	ldr	r0, [pc, #72]	@ (8001838 <HAL_UART_MspInit+0x164>)
 80017f0:	f000 fb9a 	bl	8001f28 <HAL_DMA_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80017fa:	f7ff fd15 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <HAL_UART_MspInit+0x164>)
 8001802:	639a      	str	r2, [r3, #56]	@ 0x38
 8001804:	4a0c      	ldr	r2, [pc, #48]	@ (8001838 <HAL_UART_MspInit+0x164>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2105      	movs	r1, #5
 800180e:	2025      	movs	r0, #37	@ 0x25
 8001810:	f000 fb4f 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001814:	2025      	movs	r0, #37	@ 0x25
 8001816:	f000 fb68 	bl	8001eea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	@ 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40011000 	.word	0x40011000
 8001828:	40023800 	.word	0x40023800
 800182c:	40020000 	.word	0x40020000
 8001830:	200004a8 	.word	0x200004a8
 8001834:	40026440 	.word	0x40026440
 8001838:	20000508 	.word	0x20000508
 800183c:	400264b8 	.word	0x400264b8

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <NMI_Handler+0x4>

08001848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <MemManage_Handler+0x4>

08001858 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <UsageFault_Handler+0x4>

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187a:	f000 f9e5 	bl	8001c48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800187e:	f007 fa91 	bl	8008da4 <xTaskGetSchedulerState>
 8001882:	4603      	mov	r3, r0
 8001884:	2b01      	cmp	r3, #1
 8001886:	d001      	beq.n	800188c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001888:	f008 f986 	bl	8009b98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <DMA1_Stream0_IRQHandler+0x10>)
 8001896:	f000 fcdf 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000358 	.word	0x20000358

080018a4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <DMA1_Stream3_IRQHandler+0x10>)
 80018aa:	f000 fcd5 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000298 	.word	0x20000298

080018b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <DMA1_Stream4_IRQHandler+0x10>)
 80018be:	f000 fccb 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200002f8 	.word	0x200002f8

080018cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <DMA1_Stream5_IRQHandler+0x10>)
 80018d2:	f000 fcc1 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200003b8 	.word	0x200003b8

080018e0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	StartTimerTicks++;
 80018e4:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	4a03      	ldr	r2, [pc, #12]	@ (80018f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80018ee:	4803      	ldr	r0, [pc, #12]	@ (80018fc <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 80018f0:	f003 fb8e 	bl	8005010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200000cc 	.word	0x200000cc
 80018fc:	20000418 	.word	0x20000418

08001900 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <SPI1_IRQHandler+0x10>)
 8001906:	f002 fef9 	bl	80046fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200000d0 	.word	0x200000d0

08001914 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <SPI2_IRQHandler+0x10>)
 800191a:	f002 feef 	bl	80046fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000128 	.word	0x20000128

08001928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <USART1_IRQHandler+0x10>)
 800192e:	f003 fe51 	bl	80055d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000460 	.word	0x20000460

0800193c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <SPI3_IRQHandler+0x10>)
 8001942:	f002 fedb 	bl	80046fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000180 	.word	0x20000180

08001950 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <DMA2_Stream0_IRQHandler+0x10>)
 8001956:	f000 fc7f 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200001d8 	.word	0x200001d8

08001964 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <DMA2_Stream2_IRQHandler+0x10>)
 800196a:	f000 fc75 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200004a8 	.word	0x200004a8

08001978 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <DMA2_Stream3_IRQHandler+0x10>)
 800197e:	f000 fc6b 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000238 	.word	0x20000238

0800198c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <DMA2_Stream7_IRQHandler+0x10>)
 8001992:	f000 fc61 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000508 	.word	0x20000508

080019a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return 1;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_kill>:

int _kill(int pid, int sig)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ba:	f00f fb29 	bl	8011010 <__errno>
 80019be:	4603      	mov	r3, r0
 80019c0:	2216      	movs	r2, #22
 80019c2:	601a      	str	r2, [r3, #0]
  return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_exit>:

void _exit (int status)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ffe7 	bl	80019b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e2:	bf00      	nop
 80019e4:	e7fd      	b.n	80019e2 <_exit+0x12>

080019e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e00a      	b.n	8001a0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019f8:	f3af 8000 	nop.w
 80019fc:	4601      	mov	r1, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	60ba      	str	r2, [r7, #8]
 8001a04:	b2ca      	uxtb	r2, r1
 8001a06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbf0      	blt.n	80019f8 <_read+0x12>
  }

  return len;
 8001a16:	687b      	ldr	r3, [r7, #4]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e009      	b.n	8001a46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	60ba      	str	r2, [r7, #8]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dbf1      	blt.n	8001a32 <_write+0x12>
  }
  return len;
 8001a4e:	687b      	ldr	r3, [r7, #4]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_close>:

int _close(int file)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a80:	605a      	str	r2, [r3, #4]
  return 0;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_isatty>:

int _isatty(int file)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <_sbrk+0x5c>)
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <_sbrk+0x60>)
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad4:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <_sbrk+0x64>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <_sbrk+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae2:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d207      	bcs.n	8001b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af0:	f00f fa8e 	bl	8011010 <__errno>
 8001af4:	4603      	mov	r3, r0
 8001af6:	220c      	movs	r2, #12
 8001af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	e009      	b.n	8001b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a05      	ldr	r2, [pc, #20]	@ (8001b24 <_sbrk+0x64>)
 8001b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20020000 	.word	0x20020000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	20000568 	.word	0x20000568
 8001b28:	20009588 	.word	0x20009588

08001b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <SystemInit+0x20>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <SystemInit+0x20>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack     /* set stack pointer */
 8001b50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b54:	f7ff ffea 	bl	8001b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480c      	ldr	r0, [pc, #48]	@ (8001b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b5a:	490d      	ldr	r1, [pc, #52]	@ (8001b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b70:	4c0a      	ldr	r4, [pc, #40]	@ (8001b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f00f fa4d 	bl	801101c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b82:	f7ff f90b 	bl	8000d9c <main>
  bx  lr    
 8001b86:	4770      	bx	lr
 ldr   sp, =_estack     /* set stack pointer */
 8001b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b90:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001b94:	08011e10 	.word	0x08011e10
  ldr r2, =_sbss
 8001b98:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001b9c:	20009584 	.word	0x20009584

08001ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC_IRQHandler>
	...

08001ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <HAL_Init+0x40>)
 8001bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <HAL_Init+0x40>)
 8001bba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	@ (8001be4 <HAL_Init+0x40>)
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f000 f965 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd2:	200f      	movs	r0, #15
 8001bd4:	f000 f808 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd8:	f7ff fb2c 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f981 	bl	8001f0e <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f000 f945 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	@ (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000008 	.word	0x20000008
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	2000056c 	.word	0x2000056c

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	@ (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	2000056c 	.word	0x2000056c

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	@ (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	@ (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	@ (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	@ 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001e30:	f3bf 8f4f 	dsb	sy
}
 8001e34:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e36:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <__NVIC_SystemReset+0x24>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e3e:	4904      	ldr	r1, [pc, #16]	@ (8001e50 <__NVIC_SystemReset+0x24>)
 8001e40:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <__NVIC_SystemReset+0x28>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e46:	f3bf 8f4f 	dsb	sy
}
 8001e4a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <__NVIC_SystemReset+0x20>
 8001e50:	e000ed00 	.word	0xe000ed00
 8001e54:	05fa0004 	.word	0x05fa0004

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff78 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	@ (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff13 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff28 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff78 	bl	8001dc4 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff47 	bl	8001d70 <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff1b 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001f0a:	f7ff ff8f 	bl	8001e2c <__NVIC_SystemReset>

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ff9e 	bl	8001e58 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff fe9c 	bl	8001c70 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e099      	b.n	8002078 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f64:	e00f      	b.n	8001f86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f66:	f7ff fe83 	bl	8001c70 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d908      	bls.n	8001f86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e078      	b.n	8002078 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e8      	bne.n	8001f66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4b38      	ldr	r3, [pc, #224]	@ (8002080 <HAL_DMA_Init+0x158>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d107      	bne.n	8001ff0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f023 0307 	bic.w	r3, r3, #7
 8002006:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	2b04      	cmp	r3, #4
 8002018:	d117      	bne.n	800204a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00e      	beq.n	800204a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fb01 	bl	8002634 <DMA_CheckFifoParam>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2240      	movs	r2, #64	@ 0x40
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002046:	2301      	movs	r3, #1
 8002048:	e016      	b.n	8002078 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fab8 	bl	80025c8 <DMA_CalcBaseAndBitshift>
 8002058:	4603      	mov	r3, r0
 800205a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002060:	223f      	movs	r2, #63	@ 0x3f
 8002062:	409a      	lsls	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	f010803f 	.word	0xf010803f

08002084 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_DMA_Start_IT+0x26>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e040      	b.n	800212c <HAL_DMA_Start_IT+0xa8>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d12f      	bne.n	800211e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 fa4a 	bl	800256c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	223f      	movs	r2, #63	@ 0x3f
 80020de:	409a      	lsls	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0216 	orr.w	r2, r2, #22
 80020f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0208 	orr.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e005      	b.n	800212a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002126:	2302      	movs	r3, #2
 8002128:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800212a:	7dfb      	ldrb	r3, [r7, #23]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002142:	f7ff fd95 	bl	8001c70 <HAL_GetTick>
 8002146:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d008      	beq.n	8002166 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2280      	movs	r2, #128	@ 0x80
 8002158:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e052      	b.n	800220c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0216 	bic.w	r2, r2, #22
 8002174:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002184:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d103      	bne.n	8002196 <HAL_DMA_Abort+0x62>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0208 	bic.w	r2, r2, #8
 80021a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0201 	bic.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b6:	e013      	b.n	80021e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021b8:	f7ff fd5a 	bl	8001c70 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d90c      	bls.n	80021e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2203      	movs	r2, #3
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e015      	b.n	800220c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1e4      	bne.n	80021b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f2:	223f      	movs	r2, #63	@ 0x3f
 80021f4:	409a      	lsls	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d004      	beq.n	8002232 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2280      	movs	r2, #128	@ 0x80
 800222c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e00c      	b.n	800224c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2205      	movs	r2, #5
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0201 	bic.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002264:	4b8e      	ldr	r3, [pc, #568]	@ (80024a0 <HAL_DMA_IRQHandler+0x248>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a8e      	ldr	r2, [pc, #568]	@ (80024a4 <HAL_DMA_IRQHandler+0x24c>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0a9b      	lsrs	r3, r3, #10
 8002270:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002282:	2208      	movs	r2, #8
 8002284:	409a      	lsls	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d01a      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0204 	bic.w	r2, r2, #4
 80022aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b0:	2208      	movs	r2, #8
 80022b2:	409a      	lsls	r2, r3
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c8:	2201      	movs	r2, #1
 80022ca:	409a      	lsls	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d012      	beq.n	80022fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e6:	2201      	movs	r2, #1
 80022e8:	409a      	lsls	r2, r3
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f2:	f043 0202 	orr.w	r2, r3, #2
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fe:	2204      	movs	r2, #4
 8002300:	409a      	lsls	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d012      	beq.n	8002330 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00b      	beq.n	8002330 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231c:	2204      	movs	r2, #4
 800231e:	409a      	lsls	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002328:	f043 0204 	orr.w	r2, r3, #4
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002334:	2210      	movs	r2, #16
 8002336:	409a      	lsls	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d043      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d03c      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002352:	2210      	movs	r2, #16
 8002354:	409a      	lsls	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d018      	beq.n	800239a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d108      	bne.n	8002388 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d024      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4798      	blx	r3
 8002386:	e01f      	b.n	80023c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01b      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	4798      	blx	r3
 8002398:	e016      	b.n	80023c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0208 	bic.w	r2, r2, #8
 80023b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023cc:	2220      	movs	r2, #32
 80023ce:	409a      	lsls	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 808f 	beq.w	80024f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8087 	beq.w	80024f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	2220      	movs	r2, #32
 80023f0:	409a      	lsls	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d136      	bne.n	8002470 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0216 	bic.w	r2, r2, #22
 8002410:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002420:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <HAL_DMA_IRQHandler+0x1da>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0208 	bic.w	r2, r2, #8
 8002440:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002446:	223f      	movs	r2, #63	@ 0x3f
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002462:	2b00      	cmp	r3, #0
 8002464:	d07e      	beq.n	8002564 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
        }
        return;
 800246e:	e079      	b.n	8002564 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01d      	beq.n	80024ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10d      	bne.n	80024a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002490:	2b00      	cmp	r3, #0
 8002492:	d031      	beq.n	80024f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4798      	blx	r3
 800249c:	e02c      	b.n	80024f8 <HAL_DMA_IRQHandler+0x2a0>
 800249e:	bf00      	nop
 80024a0:	20000000 	.word	0x20000000
 80024a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d023      	beq.n	80024f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4798      	blx	r3
 80024b8:	e01e      	b.n	80024f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10f      	bne.n	80024e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0210 	bic.w	r2, r2, #16
 80024d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d032      	beq.n	8002566 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d022      	beq.n	8002552 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2205      	movs	r2, #5
 8002510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	3301      	adds	r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	429a      	cmp	r2, r3
 800252e:	d307      	bcc.n	8002540 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f2      	bne.n	8002524 <HAL_DMA_IRQHandler+0x2cc>
 800253e:	e000      	b.n	8002542 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002540:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
 8002562:	e000      	b.n	8002566 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002564:	bf00      	nop
    }
  }
}
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002588:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b40      	cmp	r3, #64	@ 0x40
 8002598:	d108      	bne.n	80025ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025aa:	e007      	b.n	80025bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	60da      	str	r2, [r3, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	3b10      	subs	r3, #16
 80025d8:	4a14      	ldr	r2, [pc, #80]	@ (800262c <DMA_CalcBaseAndBitshift+0x64>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025e2:	4a13      	ldr	r2, [pc, #76]	@ (8002630 <DMA_CalcBaseAndBitshift+0x68>)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d909      	bls.n	800260a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025fe:	f023 0303 	bic.w	r3, r3, #3
 8002602:	1d1a      	adds	r2, r3, #4
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	659a      	str	r2, [r3, #88]	@ 0x58
 8002608:	e007      	b.n	800261a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	aaaaaaab 	.word	0xaaaaaaab
 8002630:	08011c20 	.word	0x08011c20

08002634 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002644:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d11f      	bne.n	800268e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d856      	bhi.n	8002702 <DMA_CheckFifoParam+0xce>
 8002654:	a201      	add	r2, pc, #4	@ (adr r2, 800265c <DMA_CheckFifoParam+0x28>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	0800266d 	.word	0x0800266d
 8002660:	0800267f 	.word	0x0800267f
 8002664:	0800266d 	.word	0x0800266d
 8002668:	08002703 	.word	0x08002703
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002670:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d046      	beq.n	8002706 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267c:	e043      	b.n	8002706 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002682:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002686:	d140      	bne.n	800270a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800268c:	e03d      	b.n	800270a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002696:	d121      	bne.n	80026dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d837      	bhi.n	800270e <DMA_CheckFifoParam+0xda>
 800269e:	a201      	add	r2, pc, #4	@ (adr r2, 80026a4 <DMA_CheckFifoParam+0x70>)
 80026a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a4:	080026b5 	.word	0x080026b5
 80026a8:	080026bb 	.word	0x080026bb
 80026ac:	080026b5 	.word	0x080026b5
 80026b0:	080026cd 	.word	0x080026cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      break;
 80026b8:	e030      	b.n	800271c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d025      	beq.n	8002712 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ca:	e022      	b.n	8002712 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026d4:	d11f      	bne.n	8002716 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026da:	e01c      	b.n	8002716 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d903      	bls.n	80026ea <DMA_CheckFifoParam+0xb6>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d003      	beq.n	80026f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026e8:	e018      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
      break;
 80026ee:	e015      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00e      	beq.n	800271a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002700:	e00b      	b.n	800271a <DMA_CheckFifoParam+0xe6>
      break;
 8002702:	bf00      	nop
 8002704:	e00a      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 8002706:	bf00      	nop
 8002708:	e008      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 800270a:	bf00      	nop
 800270c:	e006      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 800270e:	bf00      	nop
 8002710:	e004      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 8002712:	bf00      	nop
 8002714:	e002      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;   
 8002716:	bf00      	nop
 8002718:	e000      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 800271a:	bf00      	nop
    }
  } 
  
  return status; 
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop

0800272c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800273e:	4b23      	ldr	r3, [pc, #140]	@ (80027cc <HAL_FLASH_Program+0xa0>)
 8002740:	7e1b      	ldrb	r3, [r3, #24]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_FLASH_Program+0x1e>
 8002746:	2302      	movs	r3, #2
 8002748:	e03b      	b.n	80027c2 <HAL_FLASH_Program+0x96>
 800274a:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <HAL_FLASH_Program+0xa0>)
 800274c:	2201      	movs	r2, #1
 800274e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002750:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002754:	f000 f870 	bl	8002838 <FLASH_WaitForLastOperation>
 8002758:	4603      	mov	r3, r0
 800275a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d12b      	bne.n	80027ba <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002768:	783b      	ldrb	r3, [r7, #0]
 800276a:	4619      	mov	r1, r3
 800276c:	68b8      	ldr	r0, [r7, #8]
 800276e:	f000 f91b 	bl	80029a8 <FLASH_Program_Byte>
 8002772:	e016      	b.n	80027a2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800277a:	883b      	ldrh	r3, [r7, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	68b8      	ldr	r0, [r7, #8]
 8002780:	f000 f8ee 	bl	8002960 <FLASH_Program_HalfWord>
 8002784:	e00d      	b.n	80027a2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d105      	bne.n	8002798 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4619      	mov	r1, r3
 8002790:	68b8      	ldr	r0, [r7, #8]
 8002792:	f000 f8c3 	bl	800291c <FLASH_Program_Word>
 8002796:	e004      	b.n	80027a2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800279c:	68b8      	ldr	r0, [r7, #8]
 800279e:	f000 f88b 	bl	80028b8 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027a2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80027a6:	f000 f847 	bl	8002838 <FLASH_WaitForLastOperation>
 80027aa:	4603      	mov	r3, r0
 80027ac:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <HAL_FLASH_Program+0xa4>)
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	4a07      	ldr	r2, [pc, #28]	@ (80027d0 <HAL_FLASH_Program+0xa4>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027ba:	4b04      	ldr	r3, [pc, #16]	@ (80027cc <HAL_FLASH_Program+0xa0>)
 80027bc:	2200      	movs	r2, #0
 80027be:	761a      	strb	r2, [r3, #24]

  return status;
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000570 	.word	0x20000570
 80027d0:	40023c00 	.word	0x40023c00

080027d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027de:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <HAL_FLASH_Unlock+0x38>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	da0b      	bge.n	80027fe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80027e6:	4b09      	ldr	r3, [pc, #36]	@ (800280c <HAL_FLASH_Unlock+0x38>)
 80027e8:	4a09      	ldr	r2, [pc, #36]	@ (8002810 <HAL_FLASH_Unlock+0x3c>)
 80027ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027ec:	4b07      	ldr	r3, [pc, #28]	@ (800280c <HAL_FLASH_Unlock+0x38>)
 80027ee:	4a09      	ldr	r2, [pc, #36]	@ (8002814 <HAL_FLASH_Unlock+0x40>)
 80027f0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_FLASH_Unlock+0x38>)
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da01      	bge.n	80027fe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80027fe:	79fb      	ldrb	r3, [r7, #7]
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40023c00 	.word	0x40023c00
 8002810:	45670123 	.word	0x45670123
 8002814:	cdef89ab 	.word	0xcdef89ab

08002818 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_FLASH_Lock+0x1c>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	4a04      	ldr	r2, [pc, #16]	@ (8002834 <HAL_FLASH_Lock+0x1c>)
 8002822:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002826:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40023c00 	.word	0x40023c00

08002838 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002844:	4b1a      	ldr	r3, [pc, #104]	@ (80028b0 <FLASH_WaitForLastOperation+0x78>)
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800284a:	f7ff fa11 	bl	8001c70 <HAL_GetTick>
 800284e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002850:	e010      	b.n	8002874 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d00c      	beq.n	8002874 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <FLASH_WaitForLastOperation+0x38>
 8002860:	f7ff fa06 	bl	8001c70 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	d201      	bcs.n	8002874 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e019      	b.n	80028a8 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002874:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <FLASH_WaitForLastOperation+0x7c>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1e8      	bne.n	8002852 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <FLASH_WaitForLastOperation+0x7c>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800288c:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <FLASH_WaitForLastOperation+0x7c>)
 800288e:	2201      	movs	r2, #1
 8002890:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002892:	4b08      	ldr	r3, [pc, #32]	@ (80028b4 <FLASH_WaitForLastOperation+0x7c>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800289e:	f000 f8a5 	bl	80029ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0

}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000570 	.word	0x20000570
 80028b4:	40023c00 	.word	0x40023c00

080028b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028c4:	4b14      	ldr	r3, [pc, #80]	@ (8002918 <FLASH_Program_DoubleWord+0x60>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	4a13      	ldr	r2, [pc, #76]	@ (8002918 <FLASH_Program_DoubleWord+0x60>)
 80028ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80028d0:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <FLASH_Program_DoubleWord+0x60>)
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	4a10      	ldr	r2, [pc, #64]	@ (8002918 <FLASH_Program_DoubleWord+0x60>)
 80028d6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80028da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002918 <FLASH_Program_DoubleWord+0x60>)
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002918 <FLASH_Program_DoubleWord+0x60>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80028ee:	f3bf 8f6f 	isb	sy
}
 80028f2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80028f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	000a      	movs	r2, r1
 8002902:	2300      	movs	r3, #0
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	3104      	adds	r1, #4
 8002908:	4613      	mov	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40023c00 	.word	0x40023c00

0800291c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002926:	4b0d      	ldr	r3, [pc, #52]	@ (800295c <FLASH_Program_Word+0x40>)
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	4a0c      	ldr	r2, [pc, #48]	@ (800295c <FLASH_Program_Word+0x40>)
 800292c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002930:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002932:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <FLASH_Program_Word+0x40>)
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	4a09      	ldr	r2, [pc, #36]	@ (800295c <FLASH_Program_Word+0x40>)
 8002938:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800293c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800293e:	4b07      	ldr	r3, [pc, #28]	@ (800295c <FLASH_Program_Word+0x40>)
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	4a06      	ldr	r2, [pc, #24]	@ (800295c <FLASH_Program_Word+0x40>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	601a      	str	r2, [r3, #0]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	40023c00 	.word	0x40023c00

08002960 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800296c:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <FLASH_Program_HalfWord+0x44>)
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	4a0c      	ldr	r2, [pc, #48]	@ (80029a4 <FLASH_Program_HalfWord+0x44>)
 8002972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002976:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002978:	4b0a      	ldr	r3, [pc, #40]	@ (80029a4 <FLASH_Program_HalfWord+0x44>)
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <FLASH_Program_HalfWord+0x44>)
 800297e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002982:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002984:	4b07      	ldr	r3, [pc, #28]	@ (80029a4 <FLASH_Program_HalfWord+0x44>)
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	4a06      	ldr	r2, [pc, #24]	@ (80029a4 <FLASH_Program_HalfWord+0x44>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	801a      	strh	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00

080029a8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029b4:	4b0c      	ldr	r3, [pc, #48]	@ (80029e8 <FLASH_Program_Byte+0x40>)
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	4a0b      	ldr	r2, [pc, #44]	@ (80029e8 <FLASH_Program_Byte+0x40>)
 80029ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80029c0:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <FLASH_Program_Byte+0x40>)
 80029c2:	4a09      	ldr	r2, [pc, #36]	@ (80029e8 <FLASH_Program_Byte+0x40>)
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029c8:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <FLASH_Program_Byte+0x40>)
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	4a06      	ldr	r2, [pc, #24]	@ (80029e8 <FLASH_Program_Byte+0x40>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	701a      	strb	r2, [r3, #0]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023c00 	.word	0x40023c00

080029ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80029f0:	4b27      	ldr	r3, [pc, #156]	@ (8002a90 <FLASH_SetErrorCode+0xa4>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80029fc:	4b25      	ldr	r3, [pc, #148]	@ (8002a94 <FLASH_SetErrorCode+0xa8>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f043 0310 	orr.w	r3, r3, #16
 8002a04:	4a23      	ldr	r2, [pc, #140]	@ (8002a94 <FLASH_SetErrorCode+0xa8>)
 8002a06:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002a08:	4b21      	ldr	r3, [pc, #132]	@ (8002a90 <FLASH_SetErrorCode+0xa4>)
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002a0e:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <FLASH_SetErrorCode+0xa4>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a94 <FLASH_SetErrorCode+0xa8>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f043 0308 	orr.w	r3, r3, #8
 8002a22:	4a1c      	ldr	r2, [pc, #112]	@ (8002a94 <FLASH_SetErrorCode+0xa8>)
 8002a24:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002a26:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <FLASH_SetErrorCode+0xa4>)
 8002a28:	2220      	movs	r2, #32
 8002a2a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002a2c:	4b18      	ldr	r3, [pc, #96]	@ (8002a90 <FLASH_SetErrorCode+0xa4>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002a38:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <FLASH_SetErrorCode+0xa8>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	4a14      	ldr	r2, [pc, #80]	@ (8002a94 <FLASH_SetErrorCode+0xa8>)
 8002a42:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002a44:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <FLASH_SetErrorCode+0xa4>)
 8002a46:	2240      	movs	r2, #64	@ 0x40
 8002a48:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002a4a:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <FLASH_SetErrorCode+0xa4>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002a56:	4b0f      	ldr	r3, [pc, #60]	@ (8002a94 <FLASH_SetErrorCode+0xa8>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f043 0302 	orr.w	r3, r3, #2
 8002a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a94 <FLASH_SetErrorCode+0xa8>)
 8002a60:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002a62:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <FLASH_SetErrorCode+0xa4>)
 8002a64:	2280      	movs	r2, #128	@ 0x80
 8002a66:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002a68:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <FLASH_SetErrorCode+0xa4>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002a74:	4b07      	ldr	r3, [pc, #28]	@ (8002a94 <FLASH_SetErrorCode+0xa8>)
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f043 0320 	orr.w	r3, r3, #32
 8002a7c:	4a05      	ldr	r2, [pc, #20]	@ (8002a94 <FLASH_SetErrorCode+0xa8>)
 8002a7e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002a80:	4b03      	ldr	r3, [pc, #12]	@ (8002a90 <FLASH_SetErrorCode+0xa4>)
 8002a82:	2202      	movs	r2, #2
 8002a84:	60da      	str	r2, [r3, #12]
  }
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40023c00 	.word	0x40023c00
 8002a94:	20000570 	.word	0x20000570

08002a98 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002aaa:	4b31      	ldr	r3, [pc, #196]	@ (8002b70 <HAL_FLASHEx_Erase+0xd8>)
 8002aac:	7e1b      	ldrb	r3, [r3, #24]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_FLASHEx_Erase+0x1e>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e058      	b.n	8002b68 <HAL_FLASHEx_Erase+0xd0>
 8002ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8002b70 <HAL_FLASHEx_Erase+0xd8>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002abc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ac0:	f7ff feba 	bl	8002838 <FLASH_WaitForLastOperation>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d148      	bne.n	8002b60 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d115      	bne.n	8002b0a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4610      	mov	r0, r2
 8002aec:	f000 f844 	bl	8002b78 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002af0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002af4:	f7ff fea0 	bl	8002838 <FLASH_WaitForLastOperation>
 8002af8:	4603      	mov	r3, r0
 8002afa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002afc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <HAL_FLASHEx_Erase+0xdc>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	4a1c      	ldr	r2, [pc, #112]	@ (8002b74 <HAL_FLASHEx_Erase+0xdc>)
 8002b02:	f023 0304 	bic.w	r3, r3, #4
 8002b06:	6113      	str	r3, [r2, #16]
 8002b08:	e028      	b.n	8002b5c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	e01c      	b.n	8002b4c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	68b8      	ldr	r0, [r7, #8]
 8002b1c:	f000 f850 	bl	8002bc0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b20:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b24:	f7ff fe88 	bl	8002838 <FLASH_WaitForLastOperation>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002b2c:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <HAL_FLASHEx_Erase+0xdc>)
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	4a10      	ldr	r2, [pc, #64]	@ (8002b74 <HAL_FLASHEx_Erase+0xdc>)
 8002b32:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002b36:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	601a      	str	r2, [r3, #0]
          break;
 8002b44:	e00a      	b.n	8002b5c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4413      	add	r3, r2
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d3da      	bcc.n	8002b12 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002b5c:	f000 f878 	bl	8002c50 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b60:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <HAL_FLASHEx_Erase+0xd8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	761a      	strb	r2, [r3, #24]

  return status;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000570 	.word	0x20000570
 8002b74:	40023c00 	.word	0x40023c00

08002b78 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b84:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <FLASH_MassErase+0x44>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	4a0c      	ldr	r2, [pc, #48]	@ (8002bbc <FLASH_MassErase+0x44>)
 8002b8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002b90:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <FLASH_MassErase+0x44>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	4a09      	ldr	r2, [pc, #36]	@ (8002bbc <FLASH_MassErase+0x44>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002b9c:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <FLASH_MassErase+0x44>)
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	4a05      	ldr	r2, [pc, #20]	@ (8002bbc <FLASH_MassErase+0x44>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bac:	6113      	str	r3, [r2, #16]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40023c00 	.word	0x40023c00

08002bc0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	e010      	b.n	8002bfe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d103      	bne.n	8002bea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002be2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e009      	b.n	8002bfe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d103      	bne.n	8002bf8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e002      	b.n	8002bfe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002bf8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bfe:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <FLASH_Erase_Sector+0x8c>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	4a12      	ldr	r2, [pc, #72]	@ (8002c4c <FLASH_Erase_Sector+0x8c>)
 8002c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002c0a:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <FLASH_Erase_Sector+0x8c>)
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	490f      	ldr	r1, [pc, #60]	@ (8002c4c <FLASH_Erase_Sector+0x8c>)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002c16:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <FLASH_Erase_Sector+0x8c>)
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c4c <FLASH_Erase_Sector+0x8c>)
 8002c1c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002c20:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <FLASH_Erase_Sector+0x8c>)
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	4a07      	ldr	r2, [pc, #28]	@ (8002c4c <FLASH_Erase_Sector+0x8c>)
 8002c2e:	f043 0302 	orr.w	r3, r3, #2
 8002c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002c34:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <FLASH_Erase_Sector+0x8c>)
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	4a04      	ldr	r2, [pc, #16]	@ (8002c4c <FLASH_Erase_Sector+0x8c>)
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3e:	6113      	str	r3, [r2, #16]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40023c00 	.word	0x40023c00

08002c50 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002c54:	4b20      	ldr	r3, [pc, #128]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d017      	beq.n	8002c90 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002c60:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002c66:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c6a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a19      	ldr	r2, [pc, #100]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002c72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b17      	ldr	r3, [pc, #92]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a16      	ldr	r2, [pc, #88]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002c7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c82:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c84:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a13      	ldr	r2, [pc, #76]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c8e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002c90:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d017      	beq.n	8002ccc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002ca2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ca6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002cae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b08      	ldr	r3, [pc, #32]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a07      	ldr	r2, [pc, #28]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002cba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cbe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cc0:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <FLASH_FlushCaches+0x88>)
 8002cc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cca:	6013      	str	r3, [r2, #0]
  }
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40023c00 	.word	0x40023c00

08002cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	@ 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	e16b      	b.n	8002fd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f040 815a 	bne.w	8002fca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d005      	beq.n	8002d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d130      	bne.n	8002d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 0201 	and.w	r2, r3, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d017      	beq.n	8002dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d123      	bne.n	8002e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	08da      	lsrs	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3208      	adds	r2, #8
 8002de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	220f      	movs	r2, #15
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	08da      	lsrs	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3208      	adds	r2, #8
 8002e1a:	69b9      	ldr	r1, [r7, #24]
 8002e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0203 	and.w	r2, r3, #3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80b4 	beq.w	8002fca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b60      	ldr	r3, [pc, #384]	@ (8002fe8 <HAL_GPIO_Init+0x30c>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	4a5f      	ldr	r2, [pc, #380]	@ (8002fe8 <HAL_GPIO_Init+0x30c>)
 8002e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e72:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe8 <HAL_GPIO_Init+0x30c>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e7e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fec <HAL_GPIO_Init+0x310>)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	3302      	adds	r3, #2
 8002e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	220f      	movs	r2, #15
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	@ (8002ff0 <HAL_GPIO_Init+0x314>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d02b      	beq.n	8002f02 <HAL_GPIO_Init+0x226>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a51      	ldr	r2, [pc, #324]	@ (8002ff4 <HAL_GPIO_Init+0x318>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d025      	beq.n	8002efe <HAL_GPIO_Init+0x222>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a50      	ldr	r2, [pc, #320]	@ (8002ff8 <HAL_GPIO_Init+0x31c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01f      	beq.n	8002efa <HAL_GPIO_Init+0x21e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8002ffc <HAL_GPIO_Init+0x320>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d019      	beq.n	8002ef6 <HAL_GPIO_Init+0x21a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4e      	ldr	r2, [pc, #312]	@ (8003000 <HAL_GPIO_Init+0x324>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_GPIO_Init+0x216>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4d      	ldr	r2, [pc, #308]	@ (8003004 <HAL_GPIO_Init+0x328>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00d      	beq.n	8002eee <HAL_GPIO_Init+0x212>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8003008 <HAL_GPIO_Init+0x32c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <HAL_GPIO_Init+0x20e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4b      	ldr	r2, [pc, #300]	@ (800300c <HAL_GPIO_Init+0x330>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_GPIO_Init+0x20a>
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	e00e      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	e00c      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002eea:	2306      	movs	r3, #6
 8002eec:	e00a      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002eee:	2305      	movs	r3, #5
 8002ef0:	e008      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	e006      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e004      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e002      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002f02:	2300      	movs	r3, #0
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	f002 0203 	and.w	r2, r2, #3
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	4093      	lsls	r3, r2
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f14:	4935      	ldr	r1, [pc, #212]	@ (8002fec <HAL_GPIO_Init+0x310>)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f22:	4b3b      	ldr	r3, [pc, #236]	@ (8003010 <HAL_GPIO_Init+0x334>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f46:	4a32      	ldr	r2, [pc, #200]	@ (8003010 <HAL_GPIO_Init+0x334>)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f4c:	4b30      	ldr	r3, [pc, #192]	@ (8003010 <HAL_GPIO_Init+0x334>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f70:	4a27      	ldr	r2, [pc, #156]	@ (8003010 <HAL_GPIO_Init+0x334>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f76:	4b26      	ldr	r3, [pc, #152]	@ (8003010 <HAL_GPIO_Init+0x334>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003010 <HAL_GPIO_Init+0x334>)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8003010 <HAL_GPIO_Init+0x334>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fc4:	4a12      	ldr	r2, [pc, #72]	@ (8003010 <HAL_GPIO_Init+0x334>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b0f      	cmp	r3, #15
 8002fd4:	f67f ae90 	bls.w	8002cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3724      	adds	r7, #36	@ 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40013800 	.word	0x40013800
 8002ff0:	40020000 	.word	0x40020000
 8002ff4:	40020400 	.word	0x40020400
 8002ff8:	40020800 	.word	0x40020800
 8002ffc:	40020c00 	.word	0x40020c00
 8003000:	40021000 	.word	0x40021000
 8003004:	40021400 	.word	0x40021400
 8003008:	40021800 	.word	0x40021800
 800300c:	40021c00 	.word	0x40021c00
 8003010:	40013c00 	.word	0x40013c00

08003014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003024:	787b      	ldrb	r3, [r7, #1]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003030:	e003      	b.n	800303a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	041a      	lsls	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	619a      	str	r2, [r3, #24]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e267      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d075      	beq.n	8003152 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003066:	4b88      	ldr	r3, [pc, #544]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b04      	cmp	r3, #4
 8003070:	d00c      	beq.n	800308c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003072:	4b85      	ldr	r3, [pc, #532]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800307a:	2b08      	cmp	r3, #8
 800307c:	d112      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307e:	4b82      	ldr	r3, [pc, #520]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003086:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800308a:	d10b      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	4b7e      	ldr	r3, [pc, #504]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05b      	beq.n	8003150 <HAL_RCC_OscConfig+0x108>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d157      	bne.n	8003150 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e242      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ac:	d106      	bne.n	80030bc <HAL_RCC_OscConfig+0x74>
 80030ae:	4b76      	ldr	r3, [pc, #472]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a75      	ldr	r2, [pc, #468]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e01d      	b.n	80030f8 <HAL_RCC_OscConfig+0xb0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x98>
 80030c6:	4b70      	ldr	r3, [pc, #448]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e00b      	b.n	80030f8 <HAL_RCC_OscConfig+0xb0>
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a68      	ldr	r2, [pc, #416]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b66      	ldr	r3, [pc, #408]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a65      	ldr	r2, [pc, #404]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d013      	beq.n	8003128 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe fdb6 	bl	8001c70 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003108:	f7fe fdb2 	bl	8001c70 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	@ 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e207      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b5b      	ldr	r3, [pc, #364]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0xc0>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe fda2 	bl	8001c70 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003130:	f7fe fd9e 	bl	8001c70 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	@ 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1f3      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	4b51      	ldr	r3, [pc, #324]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0xe8>
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d063      	beq.n	8003226 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800315e:	4b4a      	ldr	r3, [pc, #296]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316a:	4b47      	ldr	r3, [pc, #284]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003172:	2b08      	cmp	r3, #8
 8003174:	d11c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003176:	4b44      	ldr	r3, [pc, #272]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	4b41      	ldr	r3, [pc, #260]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_RCC_OscConfig+0x152>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e1c7      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319a:	4b3b      	ldr	r3, [pc, #236]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4937      	ldr	r1, [pc, #220]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ae:	e03a      	b.n	8003226 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b8:	4b34      	ldr	r3, [pc, #208]	@ (800328c <HAL_RCC_OscConfig+0x244>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fe fd57 	bl	8001c70 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c6:	f7fe fd53 	bl	8001c70 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e1a8      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e4:	4b28      	ldr	r3, [pc, #160]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4925      	ldr	r1, [pc, #148]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
 80031f8:	e015      	b.n	8003226 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fa:	4b24      	ldr	r3, [pc, #144]	@ (800328c <HAL_RCC_OscConfig+0x244>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fd36 	bl	8001c70 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003208:	f7fe fd32 	bl	8001c70 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e187      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	4b1b      	ldr	r3, [pc, #108]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d036      	beq.n	80032a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d016      	beq.n	8003268 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323a:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <HAL_RCC_OscConfig+0x248>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fe fd16 	bl	8001c70 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003248:	f7fe fd12 	bl	8001c70 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e167      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800325c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x200>
 8003266:	e01b      	b.n	80032a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003268:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <HAL_RCC_OscConfig+0x248>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7fe fcff 	bl	8001c70 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	e00e      	b.n	8003294 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003276:	f7fe fcfb 	bl	8001c70 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d907      	bls.n	8003294 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e150      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
 8003288:	40023800 	.word	0x40023800
 800328c:	42470000 	.word	0x42470000
 8003290:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003294:	4b88      	ldr	r3, [pc, #544]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ea      	bne.n	8003276 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 8097 	beq.w	80033dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b2:	4b81      	ldr	r3, [pc, #516]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10f      	bne.n	80032de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	4b7d      	ldr	r3, [pc, #500]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	4a7c      	ldr	r2, [pc, #496]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80032c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ce:	4b7a      	ldr	r3, [pc, #488]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032da:	2301      	movs	r3, #1
 80032dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032de:	4b77      	ldr	r3, [pc, #476]	@ (80034bc <HAL_RCC_OscConfig+0x474>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d118      	bne.n	800331c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ea:	4b74      	ldr	r3, [pc, #464]	@ (80034bc <HAL_RCC_OscConfig+0x474>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a73      	ldr	r2, [pc, #460]	@ (80034bc <HAL_RCC_OscConfig+0x474>)
 80032f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f6:	f7fe fcbb 	bl	8001c70 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fe:	f7fe fcb7 	bl	8001c70 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e10c      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	4b6a      	ldr	r3, [pc, #424]	@ (80034bc <HAL_RCC_OscConfig+0x474>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d106      	bne.n	8003332 <HAL_RCC_OscConfig+0x2ea>
 8003324:	4b64      	ldr	r3, [pc, #400]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	4a63      	ldr	r2, [pc, #396]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003330:	e01c      	b.n	800336c <HAL_RCC_OscConfig+0x324>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b05      	cmp	r3, #5
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x30c>
 800333a:	4b5f      	ldr	r3, [pc, #380]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333e:	4a5e      	ldr	r2, [pc, #376]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003340:	f043 0304 	orr.w	r3, r3, #4
 8003344:	6713      	str	r3, [r2, #112]	@ 0x70
 8003346:	4b5c      	ldr	r3, [pc, #368]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334a:	4a5b      	ldr	r2, [pc, #364]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6713      	str	r3, [r2, #112]	@ 0x70
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0x324>
 8003354:	4b58      	ldr	r3, [pc, #352]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003358:	4a57      	ldr	r2, [pc, #348]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003360:	4b55      	ldr	r3, [pc, #340]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003364:	4a54      	ldr	r2, [pc, #336]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003366:	f023 0304 	bic.w	r3, r3, #4
 800336a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d015      	beq.n	80033a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003374:	f7fe fc7c 	bl	8001c70 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337a:	e00a      	b.n	8003392 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7fe fc78 	bl	8001c70 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e0cb      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003392:	4b49      	ldr	r3, [pc, #292]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ee      	beq.n	800337c <HAL_RCC_OscConfig+0x334>
 800339e:	e014      	b.n	80033ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a0:	f7fe fc66 	bl	8001c70 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a6:	e00a      	b.n	80033be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a8:	f7fe fc62 	bl	8001c70 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e0b5      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033be:	4b3e      	ldr	r3, [pc, #248]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1ee      	bne.n	80033a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d0:	4b39      	ldr	r3, [pc, #228]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	4a38      	ldr	r2, [pc, #224]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80033d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80a1 	beq.w	8003528 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033e6:	4b34      	ldr	r3, [pc, #208]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d05c      	beq.n	80034ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d141      	bne.n	800347e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	4b31      	ldr	r3, [pc, #196]	@ (80034c0 <HAL_RCC_OscConfig+0x478>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe fc36 	bl	8001c70 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7fe fc32 	bl	8001c70 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e087      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341a:	4b27      	ldr	r3, [pc, #156]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	019b      	lsls	r3, r3, #6
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343c:	085b      	lsrs	r3, r3, #1
 800343e:	3b01      	subs	r3, #1
 8003440:	041b      	lsls	r3, r3, #16
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	061b      	lsls	r3, r3, #24
 800344a:	491b      	ldr	r1, [pc, #108]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003450:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_RCC_OscConfig+0x478>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7fe fc0b 	bl	8001c70 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345e:	f7fe fc07 	bl	8001c70 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e05c      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x416>
 800347c:	e054      	b.n	8003528 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <HAL_RCC_OscConfig+0x478>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe fbf4 	bl	8001c70 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fbf0 	bl	8001c70 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e045      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x444>
 80034aa:	e03d      	b.n	8003528 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d107      	bne.n	80034c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e038      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40007000 	.word	0x40007000
 80034c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003534 <HAL_RCC_OscConfig+0x4ec>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d028      	beq.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d121      	bne.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d11a      	bne.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034f4:	4013      	ands	r3, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d111      	bne.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	3b01      	subs	r3, #1
 800350e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d107      	bne.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800

08003538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0cc      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b68      	ldr	r3, [pc, #416]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d90c      	bls.n	8003574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b65      	ldr	r3, [pc, #404]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b63      	ldr	r3, [pc, #396]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0b8      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800358c:	4b59      	ldr	r3, [pc, #356]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4a58      	ldr	r2, [pc, #352]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003596:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a4:	4b53      	ldr	r3, [pc, #332]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a52      	ldr	r2, [pc, #328]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b0:	4b50      	ldr	r3, [pc, #320]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	494d      	ldr	r1, [pc, #308]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d044      	beq.n	8003658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b47      	ldr	r3, [pc, #284]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d119      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e07f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f6:	4b3f      	ldr	r3, [pc, #252]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e06f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003606:	4b3b      	ldr	r3, [pc, #236]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e067      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003616:	4b37      	ldr	r3, [pc, #220]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f023 0203 	bic.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4934      	ldr	r1, [pc, #208]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	4313      	orrs	r3, r2
 8003626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003628:	f7fe fb22 	bl	8001c70 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	e00a      	b.n	8003646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003630:	f7fe fb1e 	bl	8001c70 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e04f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	4b2b      	ldr	r3, [pc, #172]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 020c 	and.w	r2, r3, #12
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	429a      	cmp	r2, r3
 8003656:	d1eb      	bne.n	8003630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003658:	4b25      	ldr	r3, [pc, #148]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d20c      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b22      	ldr	r3, [pc, #136]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b20      	ldr	r3, [pc, #128]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e032      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800368c:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4916      	ldr	r1, [pc, #88]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036aa:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	490e      	ldr	r1, [pc, #56]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036be:	f000 f821 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80036c2:	4602      	mov	r2, r0
 80036c4:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	490a      	ldr	r1, [pc, #40]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	5ccb      	ldrb	r3, [r1, r3]
 80036d2:	fa22 f303 	lsr.w	r3, r2, r3
 80036d6:	4a09      	ldr	r2, [pc, #36]	@ (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036da:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fa82 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023c00 	.word	0x40023c00
 80036f4:	40023800 	.word	0x40023800
 80036f8:	08011c08 	.word	0x08011c08
 80036fc:	20000000 	.word	0x20000000
 8003700:	20000004 	.word	0x20000004

08003704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003708:	b090      	sub	sp, #64	@ 0x40
 800370a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800371c:	4b59      	ldr	r3, [pc, #356]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x180>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b08      	cmp	r3, #8
 8003726:	d00d      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x40>
 8003728:	2b08      	cmp	r3, #8
 800372a:	f200 80a1 	bhi.w	8003870 <HAL_RCC_GetSysClockFreq+0x16c>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x34>
 8003732:	2b04      	cmp	r3, #4
 8003734:	d003      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0x3a>
 8003736:	e09b      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003738:	4b53      	ldr	r3, [pc, #332]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x184>)
 800373a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800373c:	e09b      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800373e:	4b53      	ldr	r3, [pc, #332]	@ (800388c <HAL_RCC_GetSysClockFreq+0x188>)
 8003740:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003742:	e098      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003744:	4b4f      	ldr	r3, [pc, #316]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x180>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800374c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800374e:	4b4d      	ldr	r3, [pc, #308]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x180>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d028      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375a:	4b4a      	ldr	r3, [pc, #296]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x180>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	099b      	lsrs	r3, r3, #6
 8003760:	2200      	movs	r2, #0
 8003762:	623b      	str	r3, [r7, #32]
 8003764:	627a      	str	r2, [r7, #36]	@ 0x24
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800376c:	2100      	movs	r1, #0
 800376e:	4b47      	ldr	r3, [pc, #284]	@ (800388c <HAL_RCC_GetSysClockFreq+0x188>)
 8003770:	fb03 f201 	mul.w	r2, r3, r1
 8003774:	2300      	movs	r3, #0
 8003776:	fb00 f303 	mul.w	r3, r0, r3
 800377a:	4413      	add	r3, r2
 800377c:	4a43      	ldr	r2, [pc, #268]	@ (800388c <HAL_RCC_GetSysClockFreq+0x188>)
 800377e:	fba0 1202 	umull	r1, r2, r0, r2
 8003782:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003784:	460a      	mov	r2, r1
 8003786:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800378a:	4413      	add	r3, r2
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800378e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003790:	2200      	movs	r2, #0
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	61fa      	str	r2, [r7, #28]
 8003796:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800379a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800379e:	f7fd f985 	bl	8000aac <__aeabi_uldivmod>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4613      	mov	r3, r2
 80037a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037aa:	e053      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ac:	4b35      	ldr	r3, [pc, #212]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	2200      	movs	r2, #0
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	617a      	str	r2, [r7, #20]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037be:	f04f 0b00 	mov.w	fp, #0
 80037c2:	4652      	mov	r2, sl
 80037c4:	465b      	mov	r3, fp
 80037c6:	f04f 0000 	mov.w	r0, #0
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	0159      	lsls	r1, r3, #5
 80037d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d4:	0150      	lsls	r0, r2, #5
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	ebb2 080a 	subs.w	r8, r2, sl
 80037de:	eb63 090b 	sbc.w	r9, r3, fp
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037f6:	ebb2 0408 	subs.w	r4, r2, r8
 80037fa:	eb63 0509 	sbc.w	r5, r3, r9
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	00eb      	lsls	r3, r5, #3
 8003808:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800380c:	00e2      	lsls	r2, r4, #3
 800380e:	4614      	mov	r4, r2
 8003810:	461d      	mov	r5, r3
 8003812:	eb14 030a 	adds.w	r3, r4, sl
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	eb45 030b 	adc.w	r3, r5, fp
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800382a:	4629      	mov	r1, r5
 800382c:	028b      	lsls	r3, r1, #10
 800382e:	4621      	mov	r1, r4
 8003830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003834:	4621      	mov	r1, r4
 8003836:	028a      	lsls	r2, r1, #10
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800383e:	2200      	movs	r2, #0
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	60fa      	str	r2, [r7, #12]
 8003844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003848:	f7fd f930 	bl	8000aac <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4613      	mov	r3, r2
 8003852:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003854:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x180>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	3301      	adds	r3, #1
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003864:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800386e:	e002      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003870:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x184>)
 8003872:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003878:	4618      	mov	r0, r3
 800387a:	3740      	adds	r7, #64	@ 0x40
 800387c:	46bd      	mov	sp, r7
 800387e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800
 8003888:	00f42400 	.word	0x00f42400
 800388c:	017d7840 	.word	0x017d7840

08003890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003894:	4b03      	ldr	r3, [pc, #12]	@ (80038a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000000 	.word	0x20000000

080038a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038ac:	f7ff fff0 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	0a9b      	lsrs	r3, r3, #10
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4903      	ldr	r1, [pc, #12]	@ (80038cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40023800 	.word	0x40023800
 80038cc:	08011c18 	.word	0x08011c18

080038d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038d4:	f7ff ffdc 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	0b5b      	lsrs	r3, r3, #13
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4903      	ldr	r1, [pc, #12]	@ (80038f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40023800 	.word	0x40023800
 80038f4:	08011c18 	.word	0x08011c18

080038f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e07b      	b.n	8003a02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800391a:	d009      	beq.n	8003930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	61da      	str	r2, [r3, #28]
 8003922:	e005      	b.n	8003930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fc9e 	bl	800128c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b4:	ea42 0103 	orr.w	r1, r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	f003 0104 	and.w	r1, r3, #4
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	f003 0210 	and.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b088      	sub	sp, #32
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a1a:	f7fe f929 	bl	8001c70 <HAL_GetTick>
 8003a1e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d001      	beq.n	8003a34 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
 8003a32:	e12a      	b.n	8003c8a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_SPI_Transmit+0x36>
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e122      	b.n	8003c8a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_Transmit+0x48>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e11b      	b.n	8003c8a <HAL_SPI_Transmit+0x280>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa0:	d10f      	bne.n	8003ac2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ab0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ac0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003acc:	2b40      	cmp	r3, #64	@ 0x40
 8003ace:	d007      	beq.n	8003ae0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ae8:	d152      	bne.n	8003b90 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_SPI_Transmit+0xee>
 8003af2:	8b7b      	ldrh	r3, [r7, #26]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d145      	bne.n	8003b84 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afc:	881a      	ldrh	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b1c:	e032      	b.n	8003b84 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d112      	bne.n	8003b52 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b50:	e018      	b.n	8003b84 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b52:	f7fe f88d 	bl	8001c70 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d803      	bhi.n	8003b6a <HAL_SPI_Transmit+0x160>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d102      	bne.n	8003b70 <HAL_SPI_Transmit+0x166>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e082      	b.n	8003c8a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1c7      	bne.n	8003b1e <HAL_SPI_Transmit+0x114>
 8003b8e:	e053      	b.n	8003c38 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_SPI_Transmit+0x194>
 8003b98:	8b7b      	ldrh	r3, [r7, #26]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d147      	bne.n	8003c2e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	330c      	adds	r3, #12
 8003ba8:	7812      	ldrb	r2, [r2, #0]
 8003baa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bc4:	e033      	b.n	8003c2e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d113      	bne.n	8003bfc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	7812      	ldrb	r2, [r2, #0]
 8003be0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003bfa:	e018      	b.n	8003c2e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bfc:	f7fe f838 	bl	8001c70 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d803      	bhi.n	8003c14 <HAL_SPI_Transmit+0x20a>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d102      	bne.n	8003c1a <HAL_SPI_Transmit+0x210>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e02d      	b.n	8003c8a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1c6      	bne.n	8003bc6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	6839      	ldr	r1, [r7, #0]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f001 f8d3 	bl	8004de8 <SPI_EndRxTxTransaction>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003c88:	2300      	movs	r3, #0
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b088      	sub	sp, #32
 8003c96:	af02      	add	r7, sp, #8
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d001      	beq.n	8003cb2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e104      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cba:	d112      	bne.n	8003ce2 <HAL_SPI_Receive+0x50>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10e      	bne.n	8003ce2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ccc:	88fa      	ldrh	r2, [r7, #6]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f8f3 	bl	8003ec4 <HAL_SPI_TransmitReceive>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	e0ec      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ce2:	f7fd ffc5 	bl	8001c70 <HAL_GetTick>
 8003ce6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_Receive+0x62>
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0e1      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_SPI_Receive+0x74>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e0da      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2204      	movs	r2, #4
 8003d12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	88fa      	ldrh	r2, [r7, #6]
 8003d26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	88fa      	ldrh	r2, [r7, #6]
 8003d2c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d54:	d10f      	bne.n	8003d76 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d80:	2b40      	cmp	r3, #64	@ 0x40
 8003d82:	d007      	beq.n	8003d94 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d170      	bne.n	8003e7e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d9c:	e035      	b.n	8003e0a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d115      	bne.n	8003dd8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f103 020c 	add.w	r2, r3, #12
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dd6:	e018      	b.n	8003e0a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd8:	f7fd ff4a 	bl	8001c70 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d803      	bhi.n	8003df0 <HAL_SPI_Receive+0x15e>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d102      	bne.n	8003df6 <HAL_SPI_Receive+0x164>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e058      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1c4      	bne.n	8003d9e <HAL_SPI_Receive+0x10c>
 8003e14:	e038      	b.n	8003e88 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d113      	bne.n	8003e4c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2e:	b292      	uxth	r2, r2
 8003e30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e36:	1c9a      	adds	r2, r3, #2
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e4a:	e018      	b.n	8003e7e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e4c:	f7fd ff10 	bl	8001c70 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d803      	bhi.n	8003e64 <HAL_SPI_Receive+0x1d2>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d102      	bne.n	8003e6a <HAL_SPI_Receive+0x1d8>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e01e      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1c6      	bne.n	8003e16 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	6839      	ldr	r1, [r7, #0]
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 ff45 	bl	8004d1c <SPI_EndRxTransaction>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003eba:	2300      	movs	r3, #0
  }
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08a      	sub	sp, #40	@ 0x28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ed6:	f7fd fecb 	bl	8001c70 <HAL_GetTick>
 8003eda:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ee2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003eea:	887b      	ldrh	r3, [r7, #2]
 8003eec:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003eee:	7ffb      	ldrb	r3, [r7, #31]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d00c      	beq.n	8003f0e <HAL_SPI_TransmitReceive+0x4a>
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003efa:	d106      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x46>
 8003f04:	7ffb      	ldrb	r3, [r7, #31]
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d001      	beq.n	8003f0e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e17f      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x5c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x5c>
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e174      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_SPI_TransmitReceive+0x6e>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e16d      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d003      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2205      	movs	r2, #5
 8003f4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	887a      	ldrh	r2, [r7, #2]
 8003f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	887a      	ldrh	r2, [r7, #2]
 8003f76:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8e:	2b40      	cmp	r3, #64	@ 0x40
 8003f90:	d007      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003faa:	d17e      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_SPI_TransmitReceive+0xf6>
 8003fb4:	8afb      	ldrh	r3, [r7, #22]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d16c      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	881a      	ldrh	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	1c9a      	adds	r2, r3, #2
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fde:	e059      	b.n	8004094 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d11b      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x162>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d016      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x162>
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d113      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004002:	881a      	ldrh	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	1c9a      	adds	r2, r3, #2
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b01      	cmp	r3, #1
 8004032:	d119      	bne.n	8004068 <HAL_SPI_TransmitReceive+0x1a4>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d014      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	b292      	uxth	r2, r2
 800404a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004050:	1c9a      	adds	r2, r3, #2
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004064:	2301      	movs	r3, #1
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004068:	f7fd fe02 	bl	8001c70 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004074:	429a      	cmp	r2, r3
 8004076:	d80d      	bhi.n	8004094 <HAL_SPI_TransmitReceive+0x1d0>
 8004078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407e:	d009      	beq.n	8004094 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0bc      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1a0      	bne.n	8003fe0 <HAL_SPI_TransmitReceive+0x11c>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d19b      	bne.n	8003fe0 <HAL_SPI_TransmitReceive+0x11c>
 80040a8:	e082      	b.n	80041b0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_TransmitReceive+0x1f4>
 80040b2:	8afb      	ldrh	r3, [r7, #22]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d171      	bne.n	800419c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	7812      	ldrb	r2, [r2, #0]
 80040c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040de:	e05d      	b.n	800419c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d11c      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x264>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d017      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x264>
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d114      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d119      	bne.n	800416a <HAL_SPI_TransmitReceive+0x2a6>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d014      	beq.n	800416a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004166:	2301      	movs	r3, #1
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800416a:	f7fd fd81 	bl	8001c70 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004176:	429a      	cmp	r2, r3
 8004178:	d803      	bhi.n	8004182 <HAL_SPI_TransmitReceive+0x2be>
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d102      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x2c4>
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	2b00      	cmp	r3, #0
 8004186:	d109      	bne.n	800419c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e038      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d19c      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0x21c>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d197      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041b0:	6a3a      	ldr	r2, [r7, #32]
 80041b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fe17 	bl	8004de8 <SPI_EndRxTxTransaction>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e01d      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800420c:	2300      	movs	r3, #0
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	3728      	adds	r7, #40	@ 0x28
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d001      	beq.n	8004236 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
 8004234:	e097      	b.n	8004366 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_SPI_Transmit_DMA+0x2a>
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e08f      	b.n	8004366 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_SPI_Transmit_DMA+0x3c>
 8004250:	2302      	movs	r3, #2
 8004252:	e088      	b.n	8004366 <HAL_SPI_Transmit_DMA+0x14e>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2203      	movs	r2, #3
 8004260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	88fa      	ldrh	r2, [r7, #6]
 800427a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a2:	d10f      	bne.n	80042c4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c8:	4a29      	ldr	r2, [pc, #164]	@ (8004370 <HAL_SPI_Transmit_DMA+0x158>)
 80042ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d0:	4a28      	ldr	r2, [pc, #160]	@ (8004374 <HAL_SPI_Transmit_DMA+0x15c>)
 80042d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d8:	4a27      	ldr	r2, [pc, #156]	@ (8004378 <HAL_SPI_Transmit_DMA+0x160>)
 80042da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e0:	2200      	movs	r2, #0
 80042e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ec:	4619      	mov	r1, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042fc:	f7fd fec2 	bl	8002084 <HAL_DMA_Start_IT>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430a:	f043 0210 	orr.w	r2, r3, #16
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e023      	b.n	8004366 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004328:	2b40      	cmp	r3, #64	@ 0x40
 800432a:	d007      	beq.n	800433c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800433a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0220 	orr.w	r2, r2, #32
 8004352:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0202 	orr.w	r2, r2, #2
 8004362:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	08004b51 	.word	0x08004b51
 8004374:	08004971 	.word	0x08004971
 8004378:	08004ba5 	.word	0x08004ba5

0800437c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	d001      	beq.n	800439a <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8004396:	2302      	movs	r3, #2
 8004398:	e0a9      	b.n	80044ee <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d110      	bne.n	80043c4 <HAL_SPI_Receive_DMA+0x48>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043aa:	d10b      	bne.n	80043c4 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2204      	movs	r2, #4
 80043b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f8a2 	bl	8004504 <HAL_SPI_TransmitReceive_DMA>
 80043c0:	4603      	mov	r3, r0
 80043c2:	e094      	b.n	80044ee <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_SPI_Receive_DMA+0x54>
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e08c      	b.n	80044ee <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_SPI_Receive_DMA+0x66>
 80043de:	2302      	movs	r3, #2
 80043e0:	e085      	b.n	80044ee <HAL_SPI_Receive_DMA+0x172>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2204      	movs	r2, #4
 80043ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800442a:	d10f      	bne.n	800444c <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800443a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800444a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004450:	4a29      	ldr	r2, [pc, #164]	@ (80044f8 <HAL_SPI_Receive_DMA+0x17c>)
 8004452:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004458:	4a28      	ldr	r2, [pc, #160]	@ (80044fc <HAL_SPI_Receive_DMA+0x180>)
 800445a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004460:	4a27      	ldr	r2, [pc, #156]	@ (8004500 <HAL_SPI_Receive_DMA+0x184>)
 8004462:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004468:	2200      	movs	r2, #0
 800446a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	4619      	mov	r1, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004482:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004484:	f7fd fdfe 	bl	8002084 <HAL_DMA_Start_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004492:	f043 0210 	orr.w	r2, r3, #16
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e023      	b.n	80044ee <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b40      	cmp	r3, #64	@ 0x40
 80044b2:	d007      	beq.n	80044c4 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044c2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0220 	orr.w	r2, r2, #32
 80044da:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	08004b6d 	.word	0x08004b6d
 80044fc:	08004a19 	.word	0x08004a19
 8004500:	08004ba5 	.word	0x08004ba5

08004504 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004518:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d00c      	beq.n	8004540 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800452c:	d106      	bne.n	800453c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <HAL_SPI_TransmitReceive_DMA+0x38>
 8004536:	7dfb      	ldrb	r3, [r7, #23]
 8004538:	2b04      	cmp	r3, #4
 800453a:	d001      	beq.n	8004540 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
 800453e:	e0cf      	b.n	80046e0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800454c:	887b      	ldrh	r3, [r7, #2]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e0c4      	b.n	80046e0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_SPI_TransmitReceive_DMA+0x60>
 8004560:	2302      	movs	r3, #2
 8004562:	e0bd      	b.n	80046e0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b04      	cmp	r3, #4
 8004576:	d003      	beq.n	8004580 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2205      	movs	r2, #5
 800457c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	887a      	ldrh	r2, [r7, #2]
 8004590:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	887a      	ldrh	r2, [r7, #2]
 8004596:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	887a      	ldrh	r2, [r7, #2]
 80045a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	887a      	ldrh	r2, [r7, #2]
 80045a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d108      	bne.n	80045d4 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c6:	4a48      	ldr	r2, [pc, #288]	@ (80046e8 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80045c8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ce:	4a47      	ldr	r2, [pc, #284]	@ (80046ec <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80045d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80045d2:	e007      	b.n	80045e4 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d8:	4a45      	ldr	r2, [pc, #276]	@ (80046f0 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e0:	4a44      	ldr	r2, [pc, #272]	@ (80046f4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80045e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e8:	4a43      	ldr	r2, [pc, #268]	@ (80046f8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80045ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f0:	2200      	movs	r2, #0
 80045f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	4619      	mov	r1, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004604:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800460a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800460c:	f7fd fd3a 	bl	8002084 <HAL_DMA_Start_IT>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461a:	f043 0210 	orr.w	r2, r3, #16
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e058      	b.n	80046e0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004642:	2200      	movs	r2, #0
 8004644:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800464a:	2200      	movs	r2, #0
 800464c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004652:	2200      	movs	r2, #0
 8004654:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800465a:	2200      	movs	r2, #0
 800465c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	4619      	mov	r1, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004674:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004676:	f7fd fd05 	bl	8002084 <HAL_DMA_Start_IT>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004684:	f043 0210 	orr.w	r2, r3, #16
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e023      	b.n	80046e0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a2:	2b40      	cmp	r3, #64	@ 0x40
 80046a4:	d007      	beq.n	80046b6 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046b4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0220 	orr.w	r2, r2, #32
 80046cc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0202 	orr.w	r2, r2, #2
 80046dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	08004b6d 	.word	0x08004b6d
 80046ec:	08004a19 	.word	0x08004a19
 80046f0:	08004b89 	.word	0x08004b89
 80046f4:	08004ac1 	.word	0x08004ac1
 80046f8:	08004ba5 	.word	0x08004ba5

080046fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10e      	bne.n	800473c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d004      	beq.n	800473c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
    return;
 800473a:	e0ce      	b.n	80048da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_SPI_IRQHandler+0x5e>
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
    return;
 8004758:	e0bf      	b.n	80048da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <HAL_SPI_IRQHandler+0x7e>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d105      	bne.n	800477a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80b0 	beq.w	80048da <HAL_SPI_IRQHandler+0x1de>
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80aa 	beq.w	80048da <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	d023      	beq.n	80047d8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b03      	cmp	r3, #3
 800479a:	d011      	beq.n	80047c0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a0:	f043 0204 	orr.w	r2, r3, #4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	e00b      	b.n	80047d8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	693b      	ldr	r3, [r7, #16]
        return;
 80047d6:	e080      	b.n	80048da <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d014      	beq.n	800480c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e6:	f043 0201 	orr.w	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481a:	f043 0208 	orr.w	r2, r3, #8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004822:	2300      	movs	r3, #0
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004834:	2b00      	cmp	r3, #0
 8004836:	d04f      	beq.n	80048d8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004846:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d104      	bne.n	8004864 <HAL_SPI_IRQHandler+0x168>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d034      	beq.n	80048ce <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0203 	bic.w	r2, r2, #3
 8004872:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d011      	beq.n	80048a0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004880:	4a17      	ldr	r2, [pc, #92]	@ (80048e0 <HAL_SPI_IRQHandler+0x1e4>)
 8004882:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004888:	4618      	mov	r0, r3
 800488a:	f7fd fcc3 	bl	8002214 <HAL_DMA_Abort_IT>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004898:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d016      	beq.n	80048d6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ac:	4a0c      	ldr	r2, [pc, #48]	@ (80048e0 <HAL_SPI_IRQHandler+0x1e4>)
 80048ae:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fd fcad 	bl	8002214 <HAL_DMA_Abort_IT>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80048cc:	e003      	b.n	80048d6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f844 	bl	800495c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80048d4:	e000      	b.n	80048d8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80048d6:	bf00      	nop
    return;
 80048d8:	bf00      	nop
  }
}
 80048da:	3720      	adds	r7, #32
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	08004be5 	.word	0x08004be5

080048e4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800497e:	f7fd f977 	bl	8001c70 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004992:	d03b      	beq.n	8004a0c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0220 	bic.w	r2, r2, #32
 80049a2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0202 	bic.w	r2, r2, #2
 80049b2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	2164      	movs	r1, #100	@ 0x64
 80049b8:	6978      	ldr	r0, [r7, #20]
 80049ba:	f000 fa15 	bl	8004de8 <SPI_EndRxTxTransaction>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c8:	f043 0220 	orr.w	r2, r3, #32
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10a      	bne.n	80049ee <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2200      	movs	r2, #0
 80049f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a04:	6978      	ldr	r0, [r7, #20]
 8004a06:	f7ff ffa9 	bl	800495c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a0a:	e002      	b.n	8004a12 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004a0c:	6978      	ldr	r0, [r7, #20]
 8004a0e:	f7ff ff69 	bl	80048e4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a26:	f7fd f923 	bl	8001c70 <HAL_GetTick>
 8004a2a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a3a:	d03b      	beq.n	8004ab4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0220 	bic.w	r2, r2, #32
 8004a4a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10d      	bne.n	8004a70 <SPI_DMAReceiveCplt+0x58>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a5c:	d108      	bne.n	8004a70 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0203 	bic.w	r2, r2, #3
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	e007      	b.n	8004a80 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0201 	bic.w	r2, r2, #1
 8004a7e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	2164      	movs	r1, #100	@ 0x64
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 f949 	bl	8004d1c <SPI_EndRxTransaction>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff ff55 	bl	800495c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004ab2:	e002      	b.n	8004aba <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7ff ff1f 	bl	80048f8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ace:	f7fd f8cf 	bl	8001c70 <HAL_GetTick>
 8004ad2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ae2:	d02f      	beq.n	8004b44 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0220 	bic.w	r2, r2, #32
 8004af2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	2164      	movs	r1, #100	@ 0x64
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f975 	bl	8004de8 <SPI_EndRxTxTransaction>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b08:	f043 0220 	orr.w	r2, r3, #32
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0203 	bic.w	r2, r2, #3
 8004b1e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff ff0d 	bl	800495c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b42:	e002      	b.n	8004b4a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7ff fee1 	bl	800490c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff fede 	bl	8004920 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff feda 	bl	8004934 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fed6 	bl	8004948 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0203 	bic.w	r2, r2, #3
 8004bc0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc6:	f043 0210 	orr.w	r2, r3, #16
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff fec0 	bl	800495c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff feac 	bl	800495c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c1c:	f7fd f828 	bl	8001c70 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	4413      	add	r3, r2
 8004c2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c2c:	f7fd f820 	bl	8001c70 <HAL_GetTick>
 8004c30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c32:	4b39      	ldr	r3, [pc, #228]	@ (8004d18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	015b      	lsls	r3, r3, #5
 8004c38:	0d1b      	lsrs	r3, r3, #20
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c42:	e054      	b.n	8004cee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d050      	beq.n	8004cee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c4c:	f7fd f810 	bl	8001c70 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d902      	bls.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d13d      	bne.n	8004cde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c7a:	d111      	bne.n	8004ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c84:	d004      	beq.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c8e:	d107      	bne.n	8004ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca8:	d10f      	bne.n	8004cca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e017      	b.n	8004d0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	bf0c      	ite	eq
 8004cfe:	2301      	moveq	r3, #1
 8004d00:	2300      	movne	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d19b      	bne.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000000 	.word	0x20000000

08004d1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d30:	d111      	bne.n	8004d56 <SPI_EndRxTransaction+0x3a>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d3a:	d004      	beq.n	8004d46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d44:	d107      	bne.n	8004d56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d5e:	d12a      	bne.n	8004db6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d68:	d012      	beq.n	8004d90 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2180      	movs	r1, #128	@ 0x80
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff ff49 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d02d      	beq.n	8004ddc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d84:	f043 0220 	orr.w	r2, r3, #32
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e026      	b.n	8004dde <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2200      	movs	r2, #0
 8004d98:	2101      	movs	r1, #1
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff ff36 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01a      	beq.n	8004ddc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004daa:	f043 0220 	orr.w	r2, r3, #32
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e013      	b.n	8004dde <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f7ff ff23 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d007      	beq.n	8004ddc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd0:	f043 0220 	orr.w	r2, r3, #32
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e000      	b.n	8004dde <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff ff04 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e032      	b.n	8004e80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004e88 <SPI_EndRxTxTransaction+0xa0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004e8c <SPI_EndRxTxTransaction+0xa4>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	0d5b      	lsrs	r3, r3, #21
 8004e26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e2a:	fb02 f303 	mul.w	r3, r2, r3
 8004e2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e38:	d112      	bne.n	8004e60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2200      	movs	r2, #0
 8004e42:	2180      	movs	r1, #128	@ 0x80
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff fee1 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d016      	beq.n	8004e7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e54:	f043 0220 	orr.w	r2, r3, #32
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e00f      	b.n	8004e80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e76:	2b80      	cmp	r3, #128	@ 0x80
 8004e78:	d0f2      	beq.n	8004e60 <SPI_EndRxTxTransaction+0x78>
 8004e7a:	e000      	b.n	8004e7e <SPI_EndRxTxTransaction+0x96>
        break;
 8004e7c:	bf00      	nop
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20000000 	.word	0x20000000
 8004e8c:	165e9f81 	.word	0x165e9f81

08004e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e041      	b.n	8004f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fc fbe4 	bl	8001684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f000 f9c0 	bl	8005254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d001      	beq.n	8004f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e04e      	b.n	8004fe6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a23      	ldr	r2, [pc, #140]	@ (8004ff4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d022      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x80>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f72:	d01d      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x80>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d018      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x80>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1e      	ldr	r2, [pc, #120]	@ (8004ffc <HAL_TIM_Base_Start_IT+0xcc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d013      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x80>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005000 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00e      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x80>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a1b      	ldr	r2, [pc, #108]	@ (8005004 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d009      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x80>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a19      	ldr	r2, [pc, #100]	@ (8005008 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x80>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a18      	ldr	r2, [pc, #96]	@ (800500c <HAL_TIM_Base_Start_IT+0xdc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d111      	bne.n	8004fd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b06      	cmp	r3, #6
 8004fc0:	d010      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd2:	e007      	b.n	8004fe4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800
 8005000:	40000c00 	.word	0x40000c00
 8005004:	40010400 	.word	0x40010400
 8005008:	40014000 	.word	0x40014000
 800500c:	40001800 	.word	0x40001800

08005010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d020      	beq.n	8005074 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01b      	beq.n	8005074 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0202 	mvn.w	r2, #2
 8005044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8dc 	bl	8005218 <HAL_TIM_IC_CaptureCallback>
 8005060:	e005      	b.n	800506e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8ce 	bl	8005204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f8df 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d020      	beq.n	80050c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01b      	beq.n	80050c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0204 	mvn.w	r2, #4
 8005090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f8b6 	bl	8005218 <HAL_TIM_IC_CaptureCallback>
 80050ac:	e005      	b.n	80050ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8a8 	bl	8005204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f8b9 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d020      	beq.n	800510c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01b      	beq.n	800510c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0208 	mvn.w	r2, #8
 80050dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2204      	movs	r2, #4
 80050e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f890 	bl	8005218 <HAL_TIM_IC_CaptureCallback>
 80050f8:	e005      	b.n	8005106 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f882 	bl	8005204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f893 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b00      	cmp	r3, #0
 8005114:	d020      	beq.n	8005158 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01b      	beq.n	8005158 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0210 	mvn.w	r2, #16
 8005128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2208      	movs	r2, #8
 800512e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f86a 	bl	8005218 <HAL_TIM_IC_CaptureCallback>
 8005144:	e005      	b.n	8005152 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f85c 	bl	8005204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f86d 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00c      	beq.n	800517c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0201 	mvn.w	r2, #1
 8005174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f83a 	bl	80051f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00c      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f910 	bl	80053c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00c      	beq.n	80051c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f83e 	bl	8005240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00c      	beq.n	80051e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0220 	mvn.w	r2, #32
 80051e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f8e2 	bl	80053ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a46      	ldr	r2, [pc, #280]	@ (8005380 <TIM_Base_SetConfig+0x12c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d013      	beq.n	8005294 <TIM_Base_SetConfig+0x40>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005272:	d00f      	beq.n	8005294 <TIM_Base_SetConfig+0x40>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a43      	ldr	r2, [pc, #268]	@ (8005384 <TIM_Base_SetConfig+0x130>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00b      	beq.n	8005294 <TIM_Base_SetConfig+0x40>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a42      	ldr	r2, [pc, #264]	@ (8005388 <TIM_Base_SetConfig+0x134>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d007      	beq.n	8005294 <TIM_Base_SetConfig+0x40>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a41      	ldr	r2, [pc, #260]	@ (800538c <TIM_Base_SetConfig+0x138>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d003      	beq.n	8005294 <TIM_Base_SetConfig+0x40>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a40      	ldr	r2, [pc, #256]	@ (8005390 <TIM_Base_SetConfig+0x13c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d108      	bne.n	80052a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a35      	ldr	r2, [pc, #212]	@ (8005380 <TIM_Base_SetConfig+0x12c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d02b      	beq.n	8005306 <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b4:	d027      	beq.n	8005306 <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a32      	ldr	r2, [pc, #200]	@ (8005384 <TIM_Base_SetConfig+0x130>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d023      	beq.n	8005306 <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a31      	ldr	r2, [pc, #196]	@ (8005388 <TIM_Base_SetConfig+0x134>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01f      	beq.n	8005306 <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a30      	ldr	r2, [pc, #192]	@ (800538c <TIM_Base_SetConfig+0x138>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01b      	beq.n	8005306 <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005390 <TIM_Base_SetConfig+0x13c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d017      	beq.n	8005306 <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005394 <TIM_Base_SetConfig+0x140>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005398 <TIM_Base_SetConfig+0x144>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00f      	beq.n	8005306 <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2c      	ldr	r2, [pc, #176]	@ (800539c <TIM_Base_SetConfig+0x148>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00b      	beq.n	8005306 <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2b      	ldr	r2, [pc, #172]	@ (80053a0 <TIM_Base_SetConfig+0x14c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d007      	beq.n	8005306 <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2a      	ldr	r2, [pc, #168]	@ (80053a4 <TIM_Base_SetConfig+0x150>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d003      	beq.n	8005306 <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a29      	ldr	r2, [pc, #164]	@ (80053a8 <TIM_Base_SetConfig+0x154>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d108      	bne.n	8005318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800530c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a10      	ldr	r2, [pc, #64]	@ (8005380 <TIM_Base_SetConfig+0x12c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_Base_SetConfig+0xf8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a12      	ldr	r2, [pc, #72]	@ (8005390 <TIM_Base_SetConfig+0x13c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d103      	bne.n	8005354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b01      	cmp	r3, #1
 8005364:	d105      	bne.n	8005372 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f023 0201 	bic.w	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	611a      	str	r2, [r3, #16]
  }
}
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40010000 	.word	0x40010000
 8005384:	40000400 	.word	0x40000400
 8005388:	40000800 	.word	0x40000800
 800538c:	40000c00 	.word	0x40000c00
 8005390:	40010400 	.word	0x40010400
 8005394:	40014000 	.word	0x40014000
 8005398:	40014400 	.word	0x40014400
 800539c:	40014800 	.word	0x40014800
 80053a0:	40001800 	.word	0x40001800
 80053a4:	40001c00 	.word	0x40001c00
 80053a8:	40002000 	.word	0x40002000

080053ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e042      	b.n	800546c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fc f96a 	bl	80016d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2224      	movs	r2, #36	@ 0x24
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 ff59 	bl	80062d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800542c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800543c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800544c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	@ 0x28
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b20      	cmp	r3, #32
 8005492:	d175      	bne.n	8005580 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_UART_Transmit+0x2c>
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e06e      	b.n	8005582 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2221      	movs	r2, #33	@ 0x21
 80054ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054b2:	f7fc fbdd 	bl	8001c70 <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	88fa      	ldrh	r2, [r7, #6]
 80054c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054cc:	d108      	bne.n	80054e0 <HAL_UART_Transmit+0x6c>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	e003      	b.n	80054e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054e8:	e02e      	b.n	8005548 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2180      	movs	r1, #128	@ 0x80
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fc31 	bl	8005d5c <UART_WaitOnFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e03a      	b.n	8005582 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005520:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	3302      	adds	r3, #2
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e007      	b.n	800553a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	3301      	adds	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1cb      	bne.n	80054ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2200      	movs	r2, #0
 800555a:	2140      	movs	r1, #64	@ 0x40
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fbfd 	bl	8005d5c <UART_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e006      	b.n	8005582 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e000      	b.n	8005582 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005580:	2302      	movs	r3, #2
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	4613      	mov	r3, r2
 8005596:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d112      	bne.n	80055ca <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_UART_Receive_DMA+0x26>
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e00b      	b.n	80055cc <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	461a      	mov	r2, r3
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 fc25 	bl	8005e10 <UART_Start_Receive_DMA>
 80055c6:	4603      	mov	r3, r0
 80055c8:	e000      	b.n	80055cc <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
  }
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b0ba      	sub	sp, #232	@ 0xe8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10f      	bne.n	800563a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_UART_IRQHandler+0x66>
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fd8d 	bl	8006152 <UART_Receive_IT>
      return;
 8005638:	e25b      	b.n	8005af2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800563a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80de 	beq.w	8005800 <HAL_UART_IRQHandler+0x22c>
 8005644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005654:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80d1 	beq.w	8005800 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <HAL_UART_IRQHandler+0xae>
 800566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800566e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <HAL_UART_IRQHandler+0xd2>
 800568e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569e:	f043 0202 	orr.w	r2, r3, #2
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <HAL_UART_IRQHandler+0xf6>
 80056b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c2:	f043 0204 	orr.w	r2, r3, #4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d011      	beq.n	80056fa <HAL_UART_IRQHandler+0x126>
 80056d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d105      	bne.n	80056ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f2:	f043 0208 	orr.w	r2, r3, #8
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 81f2 	beq.w	8005ae8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_UART_IRQHandler+0x14e>
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fd18 	bl	8006152 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572c:	2b40      	cmp	r3, #64	@ 0x40
 800572e:	bf0c      	ite	eq
 8005730:	2301      	moveq	r3, #1
 8005732:	2300      	movne	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d103      	bne.n	800574e <HAL_UART_IRQHandler+0x17a>
 8005746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d04f      	beq.n	80057ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fc20 	bl	8005f94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575e:	2b40      	cmp	r3, #64	@ 0x40
 8005760:	d141      	bne.n	80057e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3314      	adds	r3, #20
 8005768:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005778:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800577c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3314      	adds	r3, #20
 800578a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800578e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005792:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800579a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1d9      	bne.n	8005762 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d013      	beq.n	80057de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ba:	4a7e      	ldr	r2, [pc, #504]	@ (80059b4 <HAL_UART_IRQHandler+0x3e0>)
 80057bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fc fd26 	bl	8002214 <HAL_DMA_Abort_IT>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d016      	beq.n	80057fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057d8:	4610      	mov	r0, r2
 80057da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057dc:	e00e      	b.n	80057fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9a8 	bl	8005b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	e00a      	b.n	80057fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f9a4 	bl	8005b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	e006      	b.n	80057fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f9a0 	bl	8005b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80057fa:	e175      	b.n	8005ae8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	bf00      	nop
    return;
 80057fe:	e173      	b.n	8005ae8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005804:	2b01      	cmp	r3, #1
 8005806:	f040 814f 	bne.w	8005aa8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 8148 	beq.w	8005aa8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8141 	beq.w	8005aa8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005826:	2300      	movs	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	60bb      	str	r3, [r7, #8]
 800583a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005846:	2b40      	cmp	r3, #64	@ 0x40
 8005848:	f040 80b6 	bne.w	80059b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005858:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8145 	beq.w	8005aec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800586a:	429a      	cmp	r2, r3
 800586c:	f080 813e 	bcs.w	8005aec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005876:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005882:	f000 8088 	beq.w	8005996 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800589c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80058b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1d9      	bne.n	8005886 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3314      	adds	r3, #20
 80058f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005908:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e1      	bne.n	80058d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3314      	adds	r3, #20
 8005914:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800591e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005924:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3314      	adds	r3, #20
 800592e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005932:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005934:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005938:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e3      	bne.n	800590e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	330c      	adds	r3, #12
 800595a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005966:	f023 0310 	bic.w	r3, r3, #16
 800596a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	330c      	adds	r3, #12
 8005974:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005978:	65ba      	str	r2, [r7, #88]	@ 0x58
 800597a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800597e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e3      	bne.n	8005954 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005990:	4618      	mov	r0, r3
 8005992:	f7fc fbcf 	bl	8002134 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f8cb 	bl	8005b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059b2:	e09b      	b.n	8005aec <HAL_UART_IRQHandler+0x518>
 80059b4:	0800605b 	.word	0x0800605b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 808e 	beq.w	8005af0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80059d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8089 	beq.w	8005af0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
 80059e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a02:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e3      	bne.n	80059de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3314      	adds	r3, #20
 8005a1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	623b      	str	r3, [r7, #32]
   return(result);
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3314      	adds	r3, #20
 8005a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e3      	bne.n	8005a16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0310 	bic.w	r3, r3, #16
 8005a72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a80:	61fa      	str	r2, [r7, #28]
 8005a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	69fa      	ldr	r2, [r7, #28]
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e3      	bne.n	8005a5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f851 	bl	8005b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aa6:	e023      	b.n	8005af0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d009      	beq.n	8005ac8 <HAL_UART_IRQHandler+0x4f4>
 8005ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fade 	bl	8006082 <UART_Transmit_IT>
    return;
 8005ac6:	e014      	b.n	8005af2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00e      	beq.n	8005af2 <HAL_UART_IRQHandler+0x51e>
 8005ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fb1e 	bl	8006122 <UART_EndTransmit_IT>
    return;
 8005ae6:	e004      	b.n	8005af2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005ae8:	bf00      	nop
 8005aea:	e002      	b.n	8005af2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005aec:	bf00      	nop
 8005aee:	e000      	b.n	8005af2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005af0:	bf00      	nop
  }
}
 8005af2:	37e8      	adds	r7, #232	@ 0xe8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b09c      	sub	sp, #112	@ 0x70
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d172      	bne.n	8005c62 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b7e:	2200      	movs	r2, #0
 8005b80:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ba2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ba4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ba8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e5      	bne.n	8005b82 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3314      	adds	r3, #20
 8005bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc8:	f023 0301 	bic.w	r3, r3, #1
 8005bcc:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3314      	adds	r3, #20
 8005bd4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005bd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005bd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e5      	bne.n	8005bb6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3314      	adds	r3, #20
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c00:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3314      	adds	r3, #20
 8005c08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e5      	bne.n	8005bea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d119      	bne.n	8005c62 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	330c      	adds	r3, #12
 8005c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f023 0310 	bic.w	r3, r3, #16
 8005c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	330c      	adds	r3, #12
 8005c4c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005c4e:	61fa      	str	r2, [r7, #28]
 8005c50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	69b9      	ldr	r1, [r7, #24]
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e5      	bne.n	8005c2e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c64:	2200      	movs	r2, #0
 8005c66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d106      	bne.n	8005c7e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c72:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c74:	4619      	mov	r1, r3
 8005c76:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005c78:	f7ff ff66 	bl	8005b48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c7c:	e002      	b.n	8005c84 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005c7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005c80:	f7ff ff44 	bl	8005b0c <HAL_UART_RxCpltCallback>
}
 8005c84:	bf00      	nop
 8005c86:	3770      	adds	r7, #112	@ 0x70
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d108      	bne.n	8005cba <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff ff48 	bl	8005b48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cb8:	e002      	b.n	8005cc0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff ff30 	bl	8005b20 <HAL_UART_RxHalfCpltCallback>
}
 8005cc0:	bf00      	nop
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce4:	2b80      	cmp	r3, #128	@ 0x80
 8005ce6:	bf0c      	ite	eq
 8005ce8:	2301      	moveq	r3, #1
 8005cea:	2300      	movne	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b21      	cmp	r3, #33	@ 0x21
 8005cfa:	d108      	bne.n	8005d0e <UART_DMAError+0x46>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2200      	movs	r2, #0
 8005d06:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005d08:	68b8      	ldr	r0, [r7, #8]
 8005d0a:	f000 f91b 	bl	8005f44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d18:	2b40      	cmp	r3, #64	@ 0x40
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2301      	moveq	r3, #1
 8005d1e:	2300      	movne	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b22      	cmp	r3, #34	@ 0x22
 8005d2e:	d108      	bne.n	8005d42 <UART_DMAError+0x7a>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005d3c:	68b8      	ldr	r0, [r7, #8]
 8005d3e:	f000 f929 	bl	8005f94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d46:	f043 0210 	orr.w	r2, r3, #16
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d4e:	68b8      	ldr	r0, [r7, #8]
 8005d50:	f7ff fef0 	bl	8005b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d54:	bf00      	nop
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d6c:	e03b      	b.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d037      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d76:	f7fb ff7b 	bl	8001c70 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	6a3a      	ldr	r2, [r7, #32]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e03a      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d023      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2b80      	cmp	r3, #128	@ 0x80
 8005da2:	d020      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b40      	cmp	r3, #64	@ 0x40
 8005da8:	d01d      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d116      	bne.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f8e0 	bl	8005f94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e00f      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4013      	ands	r3, r2
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	bf0c      	ite	eq
 8005df6:	2301      	moveq	r3, #1
 8005df8:	2300      	movne	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d0b4      	beq.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b098      	sub	sp, #96	@ 0x60
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2222      	movs	r2, #34	@ 0x22
 8005e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005f38 <UART_Start_Receive_DMA+0x128>)
 8005e3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e44:	4a3d      	ldr	r2, [pc, #244]	@ (8005f3c <UART_Start_Receive_DMA+0x12c>)
 8005e46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f40 <UART_Start_Receive_DMA+0x130>)
 8005e4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e54:	2200      	movs	r2, #0
 8005e56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005e58:	f107 0308 	add.w	r3, r7, #8
 8005e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	f7fc f908 	bl	8002084 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005e74:	2300      	movs	r3, #0
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	613b      	str	r3, [r7, #16]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d019      	beq.n	8005ec6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005eb2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005eb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e5      	bne.n	8005e92 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3314      	adds	r3, #20
 8005ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	f043 0301 	orr.w	r3, r3, #1
 8005edc:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ee6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005ee8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005eec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e5      	bne.n	8005ec6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3314      	adds	r3, #20
 8005f00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	617b      	str	r3, [r7, #20]
   return(result);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f10:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3314      	adds	r3, #20
 8005f18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6a39      	ldr	r1, [r7, #32]
 8005f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e5      	bne.n	8005efa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3760      	adds	r7, #96	@ 0x60
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	08005b61 	.word	0x08005b61
 8005f3c:	08005c8d 	.word	0x08005c8d
 8005f40:	08005cc9 	.word	0x08005cc9

08005f44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b089      	sub	sp, #36	@ 0x24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	330c      	adds	r3, #12
 8005f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	61ba      	str	r2, [r7, #24]
 8005f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6979      	ldr	r1, [r7, #20]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e5      	bne.n	8005f4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005f88:	bf00      	nop
 8005f8a:	3724      	adds	r7, #36	@ 0x24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b095      	sub	sp, #84	@ 0x54
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	330c      	adds	r3, #12
 8005fa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fbc:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e5      	bne.n	8005f9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3314      	adds	r3, #20
 8005fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f023 0301 	bic.w	r3, r3, #1
 8005fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ff0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e5      	bne.n	8005fd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006008:	2b01      	cmp	r3, #1
 800600a:	d119      	bne.n	8006040 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	60bb      	str	r3, [r7, #8]
   return(result);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f023 0310 	bic.w	r3, r3, #16
 8006022:	647b      	str	r3, [r7, #68]	@ 0x44
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800602c:	61ba      	str	r2, [r7, #24]
 800602e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6979      	ldr	r1, [r7, #20]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	613b      	str	r3, [r7, #16]
   return(result);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e5      	bne.n	800600c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800604e:	bf00      	nop
 8006050:	3754      	adds	r7, #84	@ 0x54
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006066:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fd5d 	bl	8005b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b21      	cmp	r3, #33	@ 0x21
 8006094:	d13e      	bne.n	8006114 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800609e:	d114      	bne.n	80060ca <UART_Transmit_IT+0x48>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d110      	bne.n	80060ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	1c9a      	adds	r2, r3, #2
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	621a      	str	r2, [r3, #32]
 80060c8:	e008      	b.n	80060dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	1c59      	adds	r1, r3, #1
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6211      	str	r1, [r2, #32]
 80060d4:	781a      	ldrb	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	4619      	mov	r1, r3
 80060ea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10f      	bne.n	8006110 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800610e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006110:	2300      	movs	r3, #0
 8006112:	e000      	b.n	8006116 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006114:	2302      	movs	r3, #2
  }
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006138:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff fcd8 	bl	8005af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b08c      	sub	sp, #48	@ 0x30
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b22      	cmp	r3, #34	@ 0x22
 8006164:	f040 80ae 	bne.w	80062c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006170:	d117      	bne.n	80061a2 <UART_Receive_IT+0x50>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d113      	bne.n	80061a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006182:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006190:	b29a      	uxth	r2, r3
 8006192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006194:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619a:	1c9a      	adds	r2, r3, #2
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	629a      	str	r2, [r3, #40]	@ 0x28
 80061a0:	e026      	b.n	80061f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80061a8:	2300      	movs	r3, #0
 80061aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061b4:	d007      	beq.n	80061c6 <UART_Receive_IT+0x74>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <UART_Receive_IT+0x82>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	e008      	b.n	80061e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	4619      	mov	r1, r3
 80061fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006200:	2b00      	cmp	r3, #0
 8006202:	d15d      	bne.n	80062c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0220 	bic.w	r2, r2, #32
 8006212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695a      	ldr	r2, [r3, #20]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0201 	bic.w	r2, r2, #1
 8006232:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006246:	2b01      	cmp	r3, #1
 8006248:	d135      	bne.n	80062b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	613b      	str	r3, [r7, #16]
   return(result);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f023 0310 	bic.w	r3, r3, #16
 8006266:	627b      	str	r3, [r7, #36]	@ 0x24
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	330c      	adds	r3, #12
 800626e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006270:	623a      	str	r2, [r7, #32]
 8006272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	69f9      	ldr	r1, [r7, #28]
 8006276:	6a3a      	ldr	r2, [r7, #32]
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	61bb      	str	r3, [r7, #24]
   return(result);
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e5      	bne.n	8006250 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0310 	and.w	r3, r3, #16
 800628e:	2b10      	cmp	r3, #16
 8006290:	d10a      	bne.n	80062a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff fc4a 	bl	8005b48 <HAL_UARTEx_RxEventCallback>
 80062b4:	e002      	b.n	80062bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff fc28 	bl	8005b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e002      	b.n	80062c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	e000      	b.n	80062c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062c4:	2302      	movs	r3, #2
  }
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3730      	adds	r7, #48	@ 0x30
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062d4:	b0c0      	sub	sp, #256	@ 0x100
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ec:	68d9      	ldr	r1, [r3, #12]
 80062ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	ea40 0301 	orr.w	r3, r0, r1
 80062f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	431a      	orrs	r2, r3
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	431a      	orrs	r2, r3
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006328:	f021 010c 	bic.w	r1, r1, #12
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006336:	430b      	orrs	r3, r1
 8006338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800633a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634a:	6999      	ldr	r1, [r3, #24]
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	ea40 0301 	orr.w	r3, r0, r1
 8006356:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	4b8f      	ldr	r3, [pc, #572]	@ (800659c <UART_SetConfig+0x2cc>)
 8006360:	429a      	cmp	r2, r3
 8006362:	d005      	beq.n	8006370 <UART_SetConfig+0xa0>
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b8d      	ldr	r3, [pc, #564]	@ (80065a0 <UART_SetConfig+0x2d0>)
 800636c:	429a      	cmp	r2, r3
 800636e:	d104      	bne.n	800637a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006370:	f7fd faae 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 8006374:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006378:	e003      	b.n	8006382 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800637a:	f7fd fa95 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 800637e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800638c:	f040 810c 	bne.w	80065a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006394:	2200      	movs	r2, #0
 8006396:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800639a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800639e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063a2:	4622      	mov	r2, r4
 80063a4:	462b      	mov	r3, r5
 80063a6:	1891      	adds	r1, r2, r2
 80063a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063aa:	415b      	adcs	r3, r3
 80063ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063b2:	4621      	mov	r1, r4
 80063b4:	eb12 0801 	adds.w	r8, r2, r1
 80063b8:	4629      	mov	r1, r5
 80063ba:	eb43 0901 	adc.w	r9, r3, r1
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	f04f 0300 	mov.w	r3, #0
 80063c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063d2:	4690      	mov	r8, r2
 80063d4:	4699      	mov	r9, r3
 80063d6:	4623      	mov	r3, r4
 80063d8:	eb18 0303 	adds.w	r3, r8, r3
 80063dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063e0:	462b      	mov	r3, r5
 80063e2:	eb49 0303 	adc.w	r3, r9, r3
 80063e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80063fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063fe:	460b      	mov	r3, r1
 8006400:	18db      	adds	r3, r3, r3
 8006402:	653b      	str	r3, [r7, #80]	@ 0x50
 8006404:	4613      	mov	r3, r2
 8006406:	eb42 0303 	adc.w	r3, r2, r3
 800640a:	657b      	str	r3, [r7, #84]	@ 0x54
 800640c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006410:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006414:	f7fa fb4a 	bl	8000aac <__aeabi_uldivmod>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4b61      	ldr	r3, [pc, #388]	@ (80065a4 <UART_SetConfig+0x2d4>)
 800641e:	fba3 2302 	umull	r2, r3, r3, r2
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	011c      	lsls	r4, r3, #4
 8006426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800642a:	2200      	movs	r2, #0
 800642c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006430:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006434:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006438:	4642      	mov	r2, r8
 800643a:	464b      	mov	r3, r9
 800643c:	1891      	adds	r1, r2, r2
 800643e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006440:	415b      	adcs	r3, r3
 8006442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006448:	4641      	mov	r1, r8
 800644a:	eb12 0a01 	adds.w	sl, r2, r1
 800644e:	4649      	mov	r1, r9
 8006450:	eb43 0b01 	adc.w	fp, r3, r1
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006460:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006468:	4692      	mov	sl, r2
 800646a:	469b      	mov	fp, r3
 800646c:	4643      	mov	r3, r8
 800646e:	eb1a 0303 	adds.w	r3, sl, r3
 8006472:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006476:	464b      	mov	r3, r9
 8006478:	eb4b 0303 	adc.w	r3, fp, r3
 800647c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800648c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006490:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006494:	460b      	mov	r3, r1
 8006496:	18db      	adds	r3, r3, r3
 8006498:	643b      	str	r3, [r7, #64]	@ 0x40
 800649a:	4613      	mov	r3, r2
 800649c:	eb42 0303 	adc.w	r3, r2, r3
 80064a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064aa:	f7fa faff 	bl	8000aac <__aeabi_uldivmod>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4611      	mov	r1, r2
 80064b4:	4b3b      	ldr	r3, [pc, #236]	@ (80065a4 <UART_SetConfig+0x2d4>)
 80064b6:	fba3 2301 	umull	r2, r3, r3, r1
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	2264      	movs	r2, #100	@ 0x64
 80064be:	fb02 f303 	mul.w	r3, r2, r3
 80064c2:	1acb      	subs	r3, r1, r3
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064ca:	4b36      	ldr	r3, [pc, #216]	@ (80065a4 <UART_SetConfig+0x2d4>)
 80064cc:	fba3 2302 	umull	r2, r3, r3, r2
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064d8:	441c      	add	r4, r3
 80064da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80064e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80064ec:	4642      	mov	r2, r8
 80064ee:	464b      	mov	r3, r9
 80064f0:	1891      	adds	r1, r2, r2
 80064f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80064f4:	415b      	adcs	r3, r3
 80064f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80064fc:	4641      	mov	r1, r8
 80064fe:	1851      	adds	r1, r2, r1
 8006500:	6339      	str	r1, [r7, #48]	@ 0x30
 8006502:	4649      	mov	r1, r9
 8006504:	414b      	adcs	r3, r1
 8006506:	637b      	str	r3, [r7, #52]	@ 0x34
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006514:	4659      	mov	r1, fp
 8006516:	00cb      	lsls	r3, r1, #3
 8006518:	4651      	mov	r1, sl
 800651a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800651e:	4651      	mov	r1, sl
 8006520:	00ca      	lsls	r2, r1, #3
 8006522:	4610      	mov	r0, r2
 8006524:	4619      	mov	r1, r3
 8006526:	4603      	mov	r3, r0
 8006528:	4642      	mov	r2, r8
 800652a:	189b      	adds	r3, r3, r2
 800652c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006530:	464b      	mov	r3, r9
 8006532:	460a      	mov	r2, r1
 8006534:	eb42 0303 	adc.w	r3, r2, r3
 8006538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800653c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006548:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800654c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006550:	460b      	mov	r3, r1
 8006552:	18db      	adds	r3, r3, r3
 8006554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006556:	4613      	mov	r3, r2
 8006558:	eb42 0303 	adc.w	r3, r2, r3
 800655c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800655e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006562:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006566:	f7fa faa1 	bl	8000aac <__aeabi_uldivmod>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4b0d      	ldr	r3, [pc, #52]	@ (80065a4 <UART_SetConfig+0x2d4>)
 8006570:	fba3 1302 	umull	r1, r3, r3, r2
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	2164      	movs	r1, #100	@ 0x64
 8006578:	fb01 f303 	mul.w	r3, r1, r3
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	3332      	adds	r3, #50	@ 0x32
 8006582:	4a08      	ldr	r2, [pc, #32]	@ (80065a4 <UART_SetConfig+0x2d4>)
 8006584:	fba2 2303 	umull	r2, r3, r2, r3
 8006588:	095b      	lsrs	r3, r3, #5
 800658a:	f003 0207 	and.w	r2, r3, #7
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4422      	add	r2, r4
 8006596:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006598:	e106      	b.n	80067a8 <UART_SetConfig+0x4d8>
 800659a:	bf00      	nop
 800659c:	40011000 	.word	0x40011000
 80065a0:	40011400 	.word	0x40011400
 80065a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ac:	2200      	movs	r2, #0
 80065ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80065b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065ba:	4642      	mov	r2, r8
 80065bc:	464b      	mov	r3, r9
 80065be:	1891      	adds	r1, r2, r2
 80065c0:	6239      	str	r1, [r7, #32]
 80065c2:	415b      	adcs	r3, r3
 80065c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80065c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065ca:	4641      	mov	r1, r8
 80065cc:	1854      	adds	r4, r2, r1
 80065ce:	4649      	mov	r1, r9
 80065d0:	eb43 0501 	adc.w	r5, r3, r1
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	00eb      	lsls	r3, r5, #3
 80065de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065e2:	00e2      	lsls	r2, r4, #3
 80065e4:	4614      	mov	r4, r2
 80065e6:	461d      	mov	r5, r3
 80065e8:	4643      	mov	r3, r8
 80065ea:	18e3      	adds	r3, r4, r3
 80065ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065f0:	464b      	mov	r3, r9
 80065f2:	eb45 0303 	adc.w	r3, r5, r3
 80065f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006606:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006616:	4629      	mov	r1, r5
 8006618:	008b      	lsls	r3, r1, #2
 800661a:	4621      	mov	r1, r4
 800661c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006620:	4621      	mov	r1, r4
 8006622:	008a      	lsls	r2, r1, #2
 8006624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006628:	f7fa fa40 	bl	8000aac <__aeabi_uldivmod>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4b60      	ldr	r3, [pc, #384]	@ (80067b4 <UART_SetConfig+0x4e4>)
 8006632:	fba3 2302 	umull	r2, r3, r3, r2
 8006636:	095b      	lsrs	r3, r3, #5
 8006638:	011c      	lsls	r4, r3, #4
 800663a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800663e:	2200      	movs	r2, #0
 8006640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006644:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006648:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800664c:	4642      	mov	r2, r8
 800664e:	464b      	mov	r3, r9
 8006650:	1891      	adds	r1, r2, r2
 8006652:	61b9      	str	r1, [r7, #24]
 8006654:	415b      	adcs	r3, r3
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800665c:	4641      	mov	r1, r8
 800665e:	1851      	adds	r1, r2, r1
 8006660:	6139      	str	r1, [r7, #16]
 8006662:	4649      	mov	r1, r9
 8006664:	414b      	adcs	r3, r1
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	f04f 0300 	mov.w	r3, #0
 8006670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006674:	4659      	mov	r1, fp
 8006676:	00cb      	lsls	r3, r1, #3
 8006678:	4651      	mov	r1, sl
 800667a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800667e:	4651      	mov	r1, sl
 8006680:	00ca      	lsls	r2, r1, #3
 8006682:	4610      	mov	r0, r2
 8006684:	4619      	mov	r1, r3
 8006686:	4603      	mov	r3, r0
 8006688:	4642      	mov	r2, r8
 800668a:	189b      	adds	r3, r3, r2
 800668c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006690:	464b      	mov	r3, r9
 8006692:	460a      	mov	r2, r1
 8006694:	eb42 0303 	adc.w	r3, r2, r3
 8006698:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066a8:	f04f 0200 	mov.w	r2, #0
 80066ac:	f04f 0300 	mov.w	r3, #0
 80066b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066b4:	4649      	mov	r1, r9
 80066b6:	008b      	lsls	r3, r1, #2
 80066b8:	4641      	mov	r1, r8
 80066ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066be:	4641      	mov	r1, r8
 80066c0:	008a      	lsls	r2, r1, #2
 80066c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066c6:	f7fa f9f1 	bl	8000aac <__aeabi_uldivmod>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4611      	mov	r1, r2
 80066d0:	4b38      	ldr	r3, [pc, #224]	@ (80067b4 <UART_SetConfig+0x4e4>)
 80066d2:	fba3 2301 	umull	r2, r3, r3, r1
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	2264      	movs	r2, #100	@ 0x64
 80066da:	fb02 f303 	mul.w	r3, r2, r3
 80066de:	1acb      	subs	r3, r1, r3
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	3332      	adds	r3, #50	@ 0x32
 80066e4:	4a33      	ldr	r2, [pc, #204]	@ (80067b4 <UART_SetConfig+0x4e4>)
 80066e6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066f0:	441c      	add	r4, r3
 80066f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066f6:	2200      	movs	r2, #0
 80066f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80066fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80066fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006700:	4642      	mov	r2, r8
 8006702:	464b      	mov	r3, r9
 8006704:	1891      	adds	r1, r2, r2
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	415b      	adcs	r3, r3
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006710:	4641      	mov	r1, r8
 8006712:	1851      	adds	r1, r2, r1
 8006714:	6039      	str	r1, [r7, #0]
 8006716:	4649      	mov	r1, r9
 8006718:	414b      	adcs	r3, r1
 800671a:	607b      	str	r3, [r7, #4]
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006728:	4659      	mov	r1, fp
 800672a:	00cb      	lsls	r3, r1, #3
 800672c:	4651      	mov	r1, sl
 800672e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006732:	4651      	mov	r1, sl
 8006734:	00ca      	lsls	r2, r1, #3
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	4603      	mov	r3, r0
 800673c:	4642      	mov	r2, r8
 800673e:	189b      	adds	r3, r3, r2
 8006740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006742:	464b      	mov	r3, r9
 8006744:	460a      	mov	r2, r1
 8006746:	eb42 0303 	adc.w	r3, r2, r3
 800674a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	663b      	str	r3, [r7, #96]	@ 0x60
 8006756:	667a      	str	r2, [r7, #100]	@ 0x64
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006764:	4649      	mov	r1, r9
 8006766:	008b      	lsls	r3, r1, #2
 8006768:	4641      	mov	r1, r8
 800676a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800676e:	4641      	mov	r1, r8
 8006770:	008a      	lsls	r2, r1, #2
 8006772:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006776:	f7fa f999 	bl	8000aac <__aeabi_uldivmod>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4b0d      	ldr	r3, [pc, #52]	@ (80067b4 <UART_SetConfig+0x4e4>)
 8006780:	fba3 1302 	umull	r1, r3, r3, r2
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	2164      	movs	r1, #100	@ 0x64
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	3332      	adds	r3, #50	@ 0x32
 8006792:	4a08      	ldr	r2, [pc, #32]	@ (80067b4 <UART_SetConfig+0x4e4>)
 8006794:	fba2 2303 	umull	r2, r3, r2, r3
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	f003 020f 	and.w	r2, r3, #15
 800679e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4422      	add	r2, r4
 80067a6:	609a      	str	r2, [r3, #8]
}
 80067a8:	bf00      	nop
 80067aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067ae:	46bd      	mov	sp, r7
 80067b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067b4:	51eb851f 	.word	0x51eb851f

080067b8 <__NVIC_SetPriority>:
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	6039      	str	r1, [r7, #0]
 80067c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	db0a      	blt.n	80067e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	490c      	ldr	r1, [pc, #48]	@ (8006804 <__NVIC_SetPriority+0x4c>)
 80067d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d6:	0112      	lsls	r2, r2, #4
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	440b      	add	r3, r1
 80067dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80067e0:	e00a      	b.n	80067f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	4908      	ldr	r1, [pc, #32]	@ (8006808 <__NVIC_SetPriority+0x50>)
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	3b04      	subs	r3, #4
 80067f0:	0112      	lsls	r2, r2, #4
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	440b      	add	r3, r1
 80067f6:	761a      	strb	r2, [r3, #24]
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	e000e100 	.word	0xe000e100
 8006808:	e000ed00 	.word	0xe000ed00

0800680c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006810:	2100      	movs	r1, #0
 8006812:	f06f 0004 	mvn.w	r0, #4
 8006816:	f7ff ffcf 	bl	80067b8 <__NVIC_SetPriority>
#endif
}
 800681a:	bf00      	nop
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006826:	f3ef 8305 	mrs	r3, IPSR
 800682a:	603b      	str	r3, [r7, #0]
  return(result);
 800682c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006832:	f06f 0305 	mvn.w	r3, #5
 8006836:	607b      	str	r3, [r7, #4]
 8006838:	e00c      	b.n	8006854 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800683a:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <osKernelInitialize+0x44>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d105      	bne.n	800684e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006842:	4b08      	ldr	r3, [pc, #32]	@ (8006864 <osKernelInitialize+0x44>)
 8006844:	2201      	movs	r2, #1
 8006846:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006848:	2300      	movs	r3, #0
 800684a:	607b      	str	r3, [r7, #4]
 800684c:	e002      	b.n	8006854 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800684e:	f04f 33ff 	mov.w	r3, #4294967295
 8006852:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006854:	687b      	ldr	r3, [r7, #4]
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	20000590 	.word	0x20000590

08006868 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800686e:	f3ef 8305 	mrs	r3, IPSR
 8006872:	603b      	str	r3, [r7, #0]
  return(result);
 8006874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <osKernelStart+0x1a>
    stat = osErrorISR;
 800687a:	f06f 0305 	mvn.w	r3, #5
 800687e:	607b      	str	r3, [r7, #4]
 8006880:	e010      	b.n	80068a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006882:	4b0b      	ldr	r3, [pc, #44]	@ (80068b0 <osKernelStart+0x48>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d109      	bne.n	800689e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800688a:	f7ff ffbf 	bl	800680c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800688e:	4b08      	ldr	r3, [pc, #32]	@ (80068b0 <osKernelStart+0x48>)
 8006890:	2202      	movs	r2, #2
 8006892:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006894:	f001 fe38 	bl	8008508 <vTaskStartScheduler>
      stat = osOK;
 8006898:	2300      	movs	r3, #0
 800689a:	607b      	str	r3, [r7, #4]
 800689c:	e002      	b.n	80068a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800689e:	f04f 33ff 	mov.w	r3, #4294967295
 80068a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068a4:	687b      	ldr	r3, [r7, #4]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000590 	.word	0x20000590

080068b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08e      	sub	sp, #56	@ 0x38
 80068b8:	af04      	add	r7, sp, #16
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068c4:	f3ef 8305 	mrs	r3, IPSR
 80068c8:	617b      	str	r3, [r7, #20]
  return(result);
 80068ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d17e      	bne.n	80069ce <osThreadNew+0x11a>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d07b      	beq.n	80069ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80068d6:	2380      	movs	r3, #128	@ 0x80
 80068d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80068da:	2318      	movs	r3, #24
 80068dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80068de:	2300      	movs	r3, #0
 80068e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80068e2:	f04f 33ff 	mov.w	r3, #4294967295
 80068e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d045      	beq.n	800697a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <osThreadNew+0x48>
        name = attr->name;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <osThreadNew+0x6e>
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	2b38      	cmp	r3, #56	@ 0x38
 8006914:	d805      	bhi.n	8006922 <osThreadNew+0x6e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <osThreadNew+0x72>
        return (NULL);
 8006922:	2300      	movs	r3, #0
 8006924:	e054      	b.n	80069d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	089b      	lsrs	r3, r3, #2
 8006934:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00e      	beq.n	800695c <osThreadNew+0xa8>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	2b5b      	cmp	r3, #91	@ 0x5b
 8006944:	d90a      	bls.n	800695c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800694a:	2b00      	cmp	r3, #0
 800694c:	d006      	beq.n	800695c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <osThreadNew+0xa8>
        mem = 1;
 8006956:	2301      	movs	r3, #1
 8006958:	61bb      	str	r3, [r7, #24]
 800695a:	e010      	b.n	800697e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10c      	bne.n	800697e <osThreadNew+0xca>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d108      	bne.n	800697e <osThreadNew+0xca>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <osThreadNew+0xca>
          mem = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	e001      	b.n	800697e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d110      	bne.n	80069a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800698c:	9202      	str	r2, [sp, #8]
 800698e:	9301      	str	r3, [sp, #4]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	6a3a      	ldr	r2, [r7, #32]
 8006998:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f001 fa7c 	bl	8007e98 <xTaskCreateStatic>
 80069a0:	4603      	mov	r3, r0
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	e013      	b.n	80069ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d110      	bne.n	80069ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	f107 0310 	add.w	r3, r7, #16
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f001 faca 	bl	8007f58 <xTaskCreate>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d001      	beq.n	80069ce <osThreadNew+0x11a>
            hTask = NULL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80069ce:	693b      	ldr	r3, [r7, #16]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3728      	adds	r7, #40	@ 0x28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069e4:	f3ef 8305 	mrs	r3, IPSR
 80069e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80069ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80069f0:	f06f 0305 	mvn.w	r3, #5
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	e017      	b.n	8006a28 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80069fe:	f06f 0303 	mvn.w	r3, #3
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	e010      	b.n	8006a28 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8006a06:	6938      	ldr	r0, [r7, #16]
 8006a08:	f001 fd16 	bl	8008438 <eTaskGetState>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d005      	beq.n	8006a22 <osThreadTerminate+0x4a>
      stat = osOK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8006a1a:	6938      	ldr	r0, [r7, #16]
 8006a1c:	f001 fbe2 	bl	80081e4 <vTaskDelete>
 8006a20:	e002      	b.n	8006a28 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8006a22:	f06f 0302 	mvn.w	r3, #2
 8006a26:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8006a28:	697b      	ldr	r3, [r7, #20]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b08a      	sub	sp, #40	@ 0x28
 8006a36:	af02      	add	r7, sp, #8
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a42:	f3ef 8305 	mrs	r3, IPSR
 8006a46:	613b      	str	r3, [r7, #16]
  return(result);
 8006a48:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d175      	bne.n	8006b3a <osSemaphoreNew+0x108>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d072      	beq.n	8006b3a <osSemaphoreNew+0x108>
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d86e      	bhi.n	8006b3a <osSemaphoreNew+0x108>
    mem = -1;
 8006a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d015      	beq.n	8006a94 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <osSemaphoreNew+0x4c>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	2b4f      	cmp	r3, #79	@ 0x4f
 8006a76:	d902      	bls.n	8006a7e <osSemaphoreNew+0x4c>
        mem = 1;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	61bb      	str	r3, [r7, #24]
 8006a7c:	e00c      	b.n	8006a98 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d108      	bne.n	8006a98 <osSemaphoreNew+0x66>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <osSemaphoreNew+0x66>
          mem = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	e001      	b.n	8006a98 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9e:	d04c      	beq.n	8006b3a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d128      	bne.n	8006af8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d10a      	bne.n	8006ac2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	9200      	str	r2, [sp, #0]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	2001      	movs	r0, #1
 8006aba:	f000 fa2b 	bl	8006f14 <xQueueGenericCreateStatic>
 8006abe:	61f8      	str	r0, [r7, #28]
 8006ac0:	e005      	b.n	8006ace <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	f000 faa1 	bl	800700e <xQueueGenericCreate>
 8006acc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d022      	beq.n	8006b1a <osSemaphoreNew+0xe8>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01f      	beq.n	8006b1a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006ada:	2300      	movs	r3, #0
 8006adc:	2200      	movs	r2, #0
 8006ade:	2100      	movs	r1, #0
 8006ae0:	69f8      	ldr	r0, [r7, #28]
 8006ae2:	f000 fb61 	bl	80071a8 <xQueueGenericSend>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d016      	beq.n	8006b1a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006aec:	69f8      	ldr	r0, [r7, #28]
 8006aee:	f000 ffff 	bl	8007af0 <vQueueDelete>
            hSemaphore = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	61fb      	str	r3, [r7, #28]
 8006af6:	e010      	b.n	8006b1a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d108      	bne.n	8006b10 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	461a      	mov	r2, r3
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 fadf 	bl	80070ca <xQueueCreateCountingSemaphoreStatic>
 8006b0c:	61f8      	str	r0, [r7, #28]
 8006b0e:	e004      	b.n	8006b1a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fb12 	bl	800713c <xQueueCreateCountingSemaphore>
 8006b18:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00c      	beq.n	8006b3a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <osSemaphoreNew+0xfc>
          name = attr->name;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e001      	b.n	8006b32 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006b32:	6979      	ldr	r1, [r7, #20]
 8006b34:	69f8      	ldr	r0, [r7, #28]
 8006b36:	f001 f927 	bl	8007d88 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006b3a:	69fb      	ldr	r3, [r7, #28]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3720      	adds	r7, #32
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d103      	bne.n	8006b64 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006b5c:	f06f 0303 	mvn.w	r3, #3
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	e039      	b.n	8006bd8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b64:	f3ef 8305 	mrs	r3, IPSR
 8006b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d022      	beq.n	8006bb6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006b76:	f06f 0303 	mvn.w	r3, #3
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	e02c      	b.n	8006bd8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006b82:	f107 0308 	add.w	r3, r7, #8
 8006b86:	461a      	mov	r2, r3
 8006b88:	2100      	movs	r1, #0
 8006b8a:	6938      	ldr	r0, [r7, #16]
 8006b8c:	f000 ff2e 	bl	80079ec <xQueueReceiveFromISR>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d003      	beq.n	8006b9e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006b96:	f06f 0302 	mvn.w	r3, #2
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	e01c      	b.n	8006bd8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d019      	beq.n	8006bd8 <osSemaphoreAcquire+0x94>
 8006ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8006be4 <osSemaphoreAcquire+0xa0>)
 8006ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	e010      	b.n	8006bd8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6938      	ldr	r0, [r7, #16]
 8006bba:	f000 fe07 	bl	80077cc <xQueueSemaphoreTake>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d009      	beq.n	8006bd8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006bca:	f06f 0301 	mvn.w	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	e002      	b.n	8006bd8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006bd2:	f06f 0302 	mvn.w	r3, #2
 8006bd6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006bd8:	697b      	ldr	r3, [r7, #20]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006bfe:	f06f 0303 	mvn.w	r3, #3
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e02c      	b.n	8006c60 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c06:	f3ef 8305 	mrs	r3, IPSR
 8006c0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01a      	beq.n	8006c48 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c16:	f107 0308 	add.w	r3, r7, #8
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6938      	ldr	r0, [r7, #16]
 8006c1e:	f000 fc63 	bl	80074e8 <xQueueGiveFromISR>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d003      	beq.n	8006c30 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006c28:	f06f 0302 	mvn.w	r3, #2
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	e017      	b.n	8006c60 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d014      	beq.n	8006c60 <osSemaphoreRelease+0x78>
 8006c36:	4b0d      	ldr	r3, [pc, #52]	@ (8006c6c <osSemaphoreRelease+0x84>)
 8006c38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	e00b      	b.n	8006c60 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c48:	2300      	movs	r3, #0
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	6938      	ldr	r0, [r7, #16]
 8006c50:	f000 faaa 	bl	80071a8 <xQueueGenericSend>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d002      	beq.n	8006c60 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006c5a:	f06f 0302 	mvn.w	r3, #2
 8006c5e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006c60:	697b      	ldr	r3, [r7, #20]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4a07      	ldr	r2, [pc, #28]	@ (8006c9c <vApplicationGetIdleTaskMemory+0x2c>)
 8006c80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	4a06      	ldr	r2, [pc, #24]	@ (8006ca0 <vApplicationGetIdleTaskMemory+0x30>)
 8006c86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2280      	movs	r2, #128	@ 0x80
 8006c8c:	601a      	str	r2, [r3, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20000594 	.word	0x20000594
 8006ca0:	200005f0 	.word	0x200005f0

08006ca4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4a07      	ldr	r2, [pc, #28]	@ (8006cd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006cb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	4a06      	ldr	r2, [pc, #24]	@ (8006cd4 <vApplicationGetTimerTaskMemory+0x30>)
 8006cba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cc2:	601a      	str	r2, [r3, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	200007f0 	.word	0x200007f0
 8006cd4:	2000084c 	.word	0x2000084c

08006cd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f103 0208 	add.w	r2, r3, #8
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f103 0208 	add.w	r2, r3, #8
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f103 0208 	add.w	r2, r3, #8
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]
}
 8006d6e:	bf00      	nop
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d90:	d103      	bne.n	8006d9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	e00c      	b.n	8006db4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	e002      	b.n	8006da8 <vListInsert+0x2e>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d2f6      	bcs.n	8006da2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	601a      	str	r2, [r3, #0]
}
 8006de0:	bf00      	nop
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6892      	ldr	r2, [r2, #8]
 8006e02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6852      	ldr	r2, [r2, #4]
 8006e0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d103      	bne.n	8006e20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	1e5a      	subs	r2, r3, #1
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10b      	bne.n	8006e6c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e66:	bf00      	nop
 8006e68:	bf00      	nop
 8006e6a:	e7fd      	b.n	8006e68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e6c:	f002 fe04 	bl	8009a78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e78:	68f9      	ldr	r1, [r7, #12]
 8006e7a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	441a      	add	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	68f9      	ldr	r1, [r7, #12]
 8006ea0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ea2:	fb01 f303 	mul.w	r3, r1, r3
 8006ea6:	441a      	add	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	22ff      	movs	r2, #255	@ 0xff
 8006eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	22ff      	movs	r2, #255	@ 0xff
 8006eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d114      	bne.n	8006eec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d01a      	beq.n	8006f00 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3310      	adds	r3, #16
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f001 fda8 	bl	8008a24 <xTaskRemoveFromEventList>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d012      	beq.n	8006f00 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006eda:	4b0d      	ldr	r3, [pc, #52]	@ (8006f10 <xQueueGenericReset+0xd0>)
 8006edc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	e009      	b.n	8006f00 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3310      	adds	r3, #16
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff fef1 	bl	8006cd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3324      	adds	r3, #36	@ 0x24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff feec 	bl	8006cd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f00:	f002 fdec 	bl	8009adc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f04:	2301      	movs	r3, #1
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08e      	sub	sp, #56	@ 0x38
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10b      	bne.n	8006f40 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f3a:	bf00      	nop
 8006f3c:	bf00      	nop
 8006f3e:	e7fd      	b.n	8006f3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <xQueueGenericCreateStatic+0x56>
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <xQueueGenericCreateStatic+0x5a>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <xQueueGenericCreateStatic+0x5c>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10b      	bne.n	8006f8c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	623b      	str	r3, [r7, #32]
}
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
 8006f8a:	e7fd      	b.n	8006f88 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d102      	bne.n	8006f98 <xQueueGenericCreateStatic+0x84>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <xQueueGenericCreateStatic+0x88>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e000      	b.n	8006f9e <xQueueGenericCreateStatic+0x8a>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10b      	bne.n	8006fba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	61fb      	str	r3, [r7, #28]
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop
 8006fb8:	e7fd      	b.n	8006fb6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fba:	2350      	movs	r3, #80	@ 0x50
 8006fbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b50      	cmp	r3, #80	@ 0x50
 8006fc2:	d00b      	beq.n	8006fdc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	61bb      	str	r3, [r7, #24]
}
 8006fd6:	bf00      	nop
 8006fd8:	bf00      	nop
 8006fda:	e7fd      	b.n	8006fd8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fdc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00d      	beq.n	8007004 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ff0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	68b9      	ldr	r1, [r7, #8]
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 f840 	bl	8007084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007006:	4618      	mov	r0, r3
 8007008:	3730      	adds	r7, #48	@ 0x30
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800700e:	b580      	push	{r7, lr}
 8007010:	b08a      	sub	sp, #40	@ 0x28
 8007012:	af02      	add	r7, sp, #8
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	4613      	mov	r3, r2
 800701a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10b      	bne.n	800703a <xQueueGenericCreate+0x2c>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	613b      	str	r3, [r7, #16]
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop
 8007038:	e7fd      	b.n	8007036 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	fb02 f303 	mul.w	r3, r2, r3
 8007042:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	3350      	adds	r3, #80	@ 0x50
 8007048:	4618      	mov	r0, r3
 800704a:	f002 fe37 	bl	8009cbc <pvPortMalloc>
 800704e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d011      	beq.n	800707a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	3350      	adds	r3, #80	@ 0x50
 800705e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007068:	79fa      	ldrb	r2, [r7, #7]
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	4613      	mov	r3, r2
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	68b9      	ldr	r1, [r7, #8]
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 f805 	bl	8007084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800707a:	69bb      	ldr	r3, [r7, #24]
	}
 800707c:	4618      	mov	r0, r3
 800707e:	3720      	adds	r7, #32
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d103      	bne.n	80070a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	e002      	b.n	80070a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070b2:	2101      	movs	r1, #1
 80070b4:	69b8      	ldr	r0, [r7, #24]
 80070b6:	f7ff fec3 	bl	8006e40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	78fa      	ldrb	r2, [r7, #3]
 80070be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070c2:	bf00      	nop
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b08a      	sub	sp, #40	@ 0x28
 80070ce:	af02      	add	r7, sp, #8
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10b      	bne.n	80070f4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	61bb      	str	r3, [r7, #24]
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	e7fd      	b.n	80070f0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d90b      	bls.n	8007114 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	617b      	str	r3, [r7, #20]
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	e7fd      	b.n	8007110 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007114:	2302      	movs	r3, #2
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	2100      	movs	r1, #0
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7ff fef8 	bl	8006f14 <xQueueGenericCreateStatic>
 8007124:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007132:	69fb      	ldr	r3, [r7, #28]
	}
 8007134:	4618      	mov	r0, r3
 8007136:	3720      	adds	r7, #32
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10b      	bne.n	8007164 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	613b      	str	r3, [r7, #16]
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	e7fd      	b.n	8007160 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	429a      	cmp	r2, r3
 800716a:	d90b      	bls.n	8007184 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	60fb      	str	r3, [r7, #12]
}
 800717e:	bf00      	nop
 8007180:	bf00      	nop
 8007182:	e7fd      	b.n	8007180 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007184:	2202      	movs	r2, #2
 8007186:	2100      	movs	r1, #0
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff ff40 	bl	800700e <xQueueGenericCreate>
 800718e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800719c:	697b      	ldr	r3, [r7, #20]
	}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08e      	sub	sp, #56	@ 0x38
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071b6:	2300      	movs	r3, #0
 80071b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80071be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10b      	bne.n	80071dc <xQueueGenericSend+0x34>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071d6:	bf00      	nop
 80071d8:	bf00      	nop
 80071da:	e7fd      	b.n	80071d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d103      	bne.n	80071ea <xQueueGenericSend+0x42>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <xQueueGenericSend+0x46>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <xQueueGenericSend+0x48>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10b      	bne.n	800720c <xQueueGenericSend+0x64>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007206:	bf00      	nop
 8007208:	bf00      	nop
 800720a:	e7fd      	b.n	8007208 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d103      	bne.n	800721a <xQueueGenericSend+0x72>
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007216:	2b01      	cmp	r3, #1
 8007218:	d101      	bne.n	800721e <xQueueGenericSend+0x76>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <xQueueGenericSend+0x78>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10b      	bne.n	800723c <xQueueGenericSend+0x94>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	623b      	str	r3, [r7, #32]
}
 8007236:	bf00      	nop
 8007238:	bf00      	nop
 800723a:	e7fd      	b.n	8007238 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800723c:	f001 fdb2 	bl	8008da4 <xTaskGetSchedulerState>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d102      	bne.n	800724c <xQueueGenericSend+0xa4>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <xQueueGenericSend+0xa8>
 800724c:	2301      	movs	r3, #1
 800724e:	e000      	b.n	8007252 <xQueueGenericSend+0xaa>
 8007250:	2300      	movs	r3, #0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10b      	bne.n	800726e <xQueueGenericSend+0xc6>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	61fb      	str	r3, [r7, #28]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800726e:	f002 fc03 	bl	8009a78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727a:	429a      	cmp	r2, r3
 800727c:	d302      	bcc.n	8007284 <xQueueGenericSend+0xdc>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d129      	bne.n	80072d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800728a:	f000 fc6d 	bl	8007b68 <prvCopyDataToQueue>
 800728e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	d010      	beq.n	80072ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729a:	3324      	adds	r3, #36	@ 0x24
 800729c:	4618      	mov	r0, r3
 800729e:	f001 fbc1 	bl	8008a24 <xTaskRemoveFromEventList>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d013      	beq.n	80072d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072a8:	4b3f      	ldr	r3, [pc, #252]	@ (80073a8 <xQueueGenericSend+0x200>)
 80072aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	e00a      	b.n	80072d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072c0:	4b39      	ldr	r3, [pc, #228]	@ (80073a8 <xQueueGenericSend+0x200>)
 80072c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80072d0:	f002 fc04 	bl	8009adc <vPortExitCritical>
				return pdPASS;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e063      	b.n	80073a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d103      	bne.n	80072e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072de:	f002 fbfd 	bl	8009adc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e05c      	b.n	80073a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d106      	bne.n	80072fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072ec:	f107 0314 	add.w	r3, r7, #20
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 fbfb 	bl	8008aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072f6:	2301      	movs	r3, #1
 80072f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072fa:	f002 fbef 	bl	8009adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072fe:	f001 f96b 	bl	80085d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007302:	f002 fbb9 	bl	8009a78 <vPortEnterCritical>
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800730c:	b25b      	sxtb	r3, r3
 800730e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007312:	d103      	bne.n	800731c <xQueueGenericSend+0x174>
 8007314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007322:	b25b      	sxtb	r3, r3
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d103      	bne.n	8007332 <xQueueGenericSend+0x18a>
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007332:	f002 fbd3 	bl	8009adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007336:	1d3a      	adds	r2, r7, #4
 8007338:	f107 0314 	add.w	r3, r7, #20
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f001 fbea 	bl	8008b18 <xTaskCheckForTimeOut>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d124      	bne.n	8007394 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800734a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800734c:	f000 fd04 	bl	8007d58 <prvIsQueueFull>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d018      	beq.n	8007388 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	3310      	adds	r3, #16
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	4611      	mov	r1, r2
 800735e:	4618      	mov	r0, r3
 8007360:	f001 fb0e 	bl	8008980 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007366:	f000 fc8f 	bl	8007c88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800736a:	f001 f943 	bl	80085f4 <xTaskResumeAll>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	f47f af7c 	bne.w	800726e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007376:	4b0c      	ldr	r3, [pc, #48]	@ (80073a8 <xQueueGenericSend+0x200>)
 8007378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	e772      	b.n	800726e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007388:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800738a:	f000 fc7d 	bl	8007c88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800738e:	f001 f931 	bl	80085f4 <xTaskResumeAll>
 8007392:	e76c      	b.n	800726e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007394:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007396:	f000 fc77 	bl	8007c88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800739a:	f001 f92b 	bl	80085f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800739e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3738      	adds	r7, #56	@ 0x38
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b090      	sub	sp, #64	@ 0x40
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80073be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10b      	bne.n	80073dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80073d6:	bf00      	nop
 80073d8:	bf00      	nop
 80073da:	e7fd      	b.n	80073d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d103      	bne.n	80073ea <xQueueGenericSendFromISR+0x3e>
 80073e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <xQueueGenericSendFromISR+0x42>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e000      	b.n	80073f0 <xQueueGenericSendFromISR+0x44>
 80073ee:	2300      	movs	r3, #0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10b      	bne.n	800740c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	e7fd      	b.n	8007408 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d103      	bne.n	800741a <xQueueGenericSendFromISR+0x6e>
 8007412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <xQueueGenericSendFromISR+0x72>
 800741a:	2301      	movs	r3, #1
 800741c:	e000      	b.n	8007420 <xQueueGenericSendFromISR+0x74>
 800741e:	2300      	movs	r3, #0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10b      	bne.n	800743c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	623b      	str	r3, [r7, #32]
}
 8007436:	bf00      	nop
 8007438:	bf00      	nop
 800743a:	e7fd      	b.n	8007438 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800743c:	f002 fbfc 	bl	8009c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007440:	f3ef 8211 	mrs	r2, BASEPRI
 8007444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	61fa      	str	r2, [r7, #28]
 8007456:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007458:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800745a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800745c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007464:	429a      	cmp	r2, r3
 8007466:	d302      	bcc.n	800746e <xQueueGenericSendFromISR+0xc2>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2b02      	cmp	r3, #2
 800746c:	d12f      	bne.n	80074ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800746e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007470:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007474:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007484:	f000 fb70 	bl	8007b68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007488:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800748c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007490:	d112      	bne.n	80074b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	d016      	beq.n	80074c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800749a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749c:	3324      	adds	r3, #36	@ 0x24
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 fac0 	bl	8008a24 <xTaskRemoveFromEventList>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00e      	beq.n	80074c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00b      	beq.n	80074c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	e007      	b.n	80074c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80074bc:	3301      	adds	r3, #1
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	b25a      	sxtb	r2, r3
 80074c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80074c8:	2301      	movs	r3, #1
 80074ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80074cc:	e001      	b.n	80074d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3740      	adds	r7, #64	@ 0x40
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08e      	sub	sp, #56	@ 0x38
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10b      	bne.n	8007514 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	623b      	str	r3, [r7, #32]
}
 800750e:	bf00      	nop
 8007510:	bf00      	nop
 8007512:	e7fd      	b.n	8007510 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00b      	beq.n	8007534 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	61fb      	str	r3, [r7, #28]
}
 800752e:	bf00      	nop
 8007530:	bf00      	nop
 8007532:	e7fd      	b.n	8007530 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <xQueueGiveFromISR+0x5c>
 800753c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <xQueueGiveFromISR+0x60>
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <xQueueGiveFromISR+0x62>
 8007548:	2300      	movs	r3, #0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10b      	bne.n	8007566 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	61bb      	str	r3, [r7, #24]
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	e7fd      	b.n	8007562 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007566:	f002 fb67 	bl	8009c38 <vPortValidateInterruptPriority>
	__asm volatile
 800756a:	f3ef 8211 	mrs	r2, BASEPRI
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	617a      	str	r2, [r7, #20]
 8007580:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007582:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007584:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007590:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007592:	429a      	cmp	r2, r3
 8007594:	d22b      	bcs.n	80075ee <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800759c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80075ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b0:	d112      	bne.n	80075d8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d016      	beq.n	80075e8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075bc:	3324      	adds	r3, #36	@ 0x24
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 fa30 	bl	8008a24 <xTaskRemoveFromEventList>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00e      	beq.n	80075e8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2201      	movs	r2, #1
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	e007      	b.n	80075e8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075dc:	3301      	adds	r3, #1
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	b25a      	sxtb	r2, r3
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80075e8:	2301      	movs	r3, #1
 80075ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ec:	e001      	b.n	80075f2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f383 8811 	msr	BASEPRI, r3
}
 80075fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007600:	4618      	mov	r0, r3
 8007602:	3738      	adds	r7, #56	@ 0x38
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08c      	sub	sp, #48	@ 0x30
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007614:	2300      	movs	r3, #0
 8007616:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800761c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10b      	bne.n	800763a <xQueueReceive+0x32>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	623b      	str	r3, [r7, #32]
}
 8007634:	bf00      	nop
 8007636:	bf00      	nop
 8007638:	e7fd      	b.n	8007636 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d103      	bne.n	8007648 <xQueueReceive+0x40>
 8007640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <xQueueReceive+0x44>
 8007648:	2301      	movs	r3, #1
 800764a:	e000      	b.n	800764e <xQueueReceive+0x46>
 800764c:	2300      	movs	r3, #0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10b      	bne.n	800766a <xQueueReceive+0x62>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	61fb      	str	r3, [r7, #28]
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop
 8007668:	e7fd      	b.n	8007666 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800766a:	f001 fb9b 	bl	8008da4 <xTaskGetSchedulerState>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <xQueueReceive+0x72>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <xQueueReceive+0x76>
 800767a:	2301      	movs	r3, #1
 800767c:	e000      	b.n	8007680 <xQueueReceive+0x78>
 800767e:	2300      	movs	r3, #0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10b      	bne.n	800769c <xQueueReceive+0x94>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	61bb      	str	r3, [r7, #24]
}
 8007696:	bf00      	nop
 8007698:	bf00      	nop
 800769a:	e7fd      	b.n	8007698 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800769c:	f002 f9ec 	bl	8009a78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01f      	beq.n	80076ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076ac:	68b9      	ldr	r1, [r7, #8]
 80076ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076b0:	f000 fac4 	bl	8007c3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b6:	1e5a      	subs	r2, r3, #1
 80076b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00f      	beq.n	80076e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c6:	3310      	adds	r3, #16
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 f9ab 	bl	8008a24 <xTaskRemoveFromEventList>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d007      	beq.n	80076e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076d4:	4b3c      	ldr	r3, [pc, #240]	@ (80077c8 <xQueueReceive+0x1c0>)
 80076d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076e4:	f002 f9fa 	bl	8009adc <vPortExitCritical>
				return pdPASS;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e069      	b.n	80077c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076f2:	f002 f9f3 	bl	8009adc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e062      	b.n	80077c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007700:	f107 0310 	add.w	r3, r7, #16
 8007704:	4618      	mov	r0, r3
 8007706:	f001 f9f1 	bl	8008aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800770e:	f002 f9e5 	bl	8009adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007712:	f000 ff61 	bl	80085d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007716:	f002 f9af 	bl	8009a78 <vPortEnterCritical>
 800771a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007720:	b25b      	sxtb	r3, r3
 8007722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007726:	d103      	bne.n	8007730 <xQueueReceive+0x128>
 8007728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007736:	b25b      	sxtb	r3, r3
 8007738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773c:	d103      	bne.n	8007746 <xQueueReceive+0x13e>
 800773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007746:	f002 f9c9 	bl	8009adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800774a:	1d3a      	adds	r2, r7, #4
 800774c:	f107 0310 	add.w	r3, r7, #16
 8007750:	4611      	mov	r1, r2
 8007752:	4618      	mov	r0, r3
 8007754:	f001 f9e0 	bl	8008b18 <xTaskCheckForTimeOut>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d123      	bne.n	80077a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800775e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007760:	f000 fae4 	bl	8007d2c <prvIsQueueEmpty>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d017      	beq.n	800779a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800776a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776c:	3324      	adds	r3, #36	@ 0x24
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	4611      	mov	r1, r2
 8007772:	4618      	mov	r0, r3
 8007774:	f001 f904 	bl	8008980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800777a:	f000 fa85 	bl	8007c88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800777e:	f000 ff39 	bl	80085f4 <xTaskResumeAll>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d189      	bne.n	800769c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007788:	4b0f      	ldr	r3, [pc, #60]	@ (80077c8 <xQueueReceive+0x1c0>)
 800778a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	e780      	b.n	800769c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800779a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800779c:	f000 fa74 	bl	8007c88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077a0:	f000 ff28 	bl	80085f4 <xTaskResumeAll>
 80077a4:	e77a      	b.n	800769c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077a8:	f000 fa6e 	bl	8007c88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077ac:	f000 ff22 	bl	80085f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077b2:	f000 fabb 	bl	8007d2c <prvIsQueueEmpty>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f43f af6f 	beq.w	800769c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3730      	adds	r7, #48	@ 0x30
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08e      	sub	sp, #56	@ 0x38
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80077d6:	2300      	movs	r3, #0
 80077d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80077de:	2300      	movs	r3, #0
 80077e0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10b      	bne.n	8007800 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	623b      	str	r3, [r7, #32]
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	e7fd      	b.n	80077fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00b      	beq.n	8007820 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	61fb      	str	r3, [r7, #28]
}
 800781a:	bf00      	nop
 800781c:	bf00      	nop
 800781e:	e7fd      	b.n	800781c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007820:	f001 fac0 	bl	8008da4 <xTaskGetSchedulerState>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d102      	bne.n	8007830 <xQueueSemaphoreTake+0x64>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <xQueueSemaphoreTake+0x68>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <xQueueSemaphoreTake+0x6a>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10b      	bne.n	8007852 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	61bb      	str	r3, [r7, #24]
}
 800784c:	bf00      	nop
 800784e:	bf00      	nop
 8007850:	e7fd      	b.n	800784e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007852:	f002 f911 	bl	8009a78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800785c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785e:	2b00      	cmp	r3, #0
 8007860:	d024      	beq.n	80078ac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007864:	1e5a      	subs	r2, r3, #1
 8007866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007868:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800786a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d104      	bne.n	800787c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007872:	f001 fc11 	bl	8009098 <pvTaskIncrementMutexHeldCount>
 8007876:	4602      	mov	r2, r0
 8007878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800787c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00f      	beq.n	80078a4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007886:	3310      	adds	r3, #16
 8007888:	4618      	mov	r0, r3
 800788a:	f001 f8cb 	bl	8008a24 <xTaskRemoveFromEventList>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d007      	beq.n	80078a4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007894:	4b54      	ldr	r3, [pc, #336]	@ (80079e8 <xQueueSemaphoreTake+0x21c>)
 8007896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078a4:	f002 f91a 	bl	8009adc <vPortExitCritical>
				return pdPASS;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e098      	b.n	80079de <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d112      	bne.n	80078d8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	617b      	str	r3, [r7, #20]
}
 80078ca:	bf00      	nop
 80078cc:	bf00      	nop
 80078ce:	e7fd      	b.n	80078cc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80078d0:	f002 f904 	bl	8009adc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e082      	b.n	80079de <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078de:	f107 030c 	add.w	r3, r7, #12
 80078e2:	4618      	mov	r0, r3
 80078e4:	f001 f902 	bl	8008aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078e8:	2301      	movs	r3, #1
 80078ea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078ec:	f002 f8f6 	bl	8009adc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078f0:	f000 fe72 	bl	80085d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078f4:	f002 f8c0 	bl	8009a78 <vPortEnterCritical>
 80078f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078fe:	b25b      	sxtb	r3, r3
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007904:	d103      	bne.n	800790e <xQueueSemaphoreTake+0x142>
 8007906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800790e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007910:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007914:	b25b      	sxtb	r3, r3
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d103      	bne.n	8007924 <xQueueSemaphoreTake+0x158>
 800791c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007924:	f002 f8da 	bl	8009adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007928:	463a      	mov	r2, r7
 800792a:	f107 030c 	add.w	r3, r7, #12
 800792e:	4611      	mov	r1, r2
 8007930:	4618      	mov	r0, r3
 8007932:	f001 f8f1 	bl	8008b18 <xTaskCheckForTimeOut>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d132      	bne.n	80079a2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800793c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800793e:	f000 f9f5 	bl	8007d2c <prvIsQueueEmpty>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d026      	beq.n	8007996 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d109      	bne.n	8007964 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007950:	f002 f892 	bl	8009a78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fa41 	bl	8008de0 <xTaskPriorityInherit>
 800795e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007960:	f002 f8bc 	bl	8009adc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007966:	3324      	adds	r3, #36	@ 0x24
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	4611      	mov	r1, r2
 800796c:	4618      	mov	r0, r3
 800796e:	f001 f807 	bl	8008980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007972:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007974:	f000 f988 	bl	8007c88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007978:	f000 fe3c 	bl	80085f4 <xTaskResumeAll>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	f47f af67 	bne.w	8007852 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007984:	4b18      	ldr	r3, [pc, #96]	@ (80079e8 <xQueueSemaphoreTake+0x21c>)
 8007986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	e75d      	b.n	8007852 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007996:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007998:	f000 f976 	bl	8007c88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800799c:	f000 fe2a 	bl	80085f4 <xTaskResumeAll>
 80079a0:	e757      	b.n	8007852 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80079a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079a4:	f000 f970 	bl	8007c88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079a8:	f000 fe24 	bl	80085f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079ae:	f000 f9bd 	bl	8007d2c <prvIsQueueEmpty>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f43f af4c 	beq.w	8007852 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00d      	beq.n	80079dc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80079c0:	f002 f85a 	bl	8009a78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80079c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079c6:	f000 f8b7 	bl	8007b38 <prvGetDisinheritPriorityAfterTimeout>
 80079ca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80079cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 fadc 	bl	8008f90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80079d8:	f002 f880 	bl	8009adc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3738      	adds	r7, #56	@ 0x38
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	e000ed04 	.word	0xe000ed04

080079ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08e      	sub	sp, #56	@ 0x38
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80079fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10b      	bne.n	8007a1a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	623b      	str	r3, [r7, #32]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d103      	bne.n	8007a28 <xQueueReceiveFromISR+0x3c>
 8007a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <xQueueReceiveFromISR+0x40>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <xQueueReceiveFromISR+0x42>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10b      	bne.n	8007a4a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	61fb      	str	r3, [r7, #28]
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop
 8007a48:	e7fd      	b.n	8007a46 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a4a:	f002 f8f5 	bl	8009c38 <vPortValidateInterruptPriority>
	__asm volatile
 8007a4e:	f3ef 8211 	mrs	r2, BASEPRI
 8007a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	61ba      	str	r2, [r7, #24]
 8007a64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d02f      	beq.n	8007ad6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a80:	68b9      	ldr	r1, [r7, #8]
 8007a82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a84:	f000 f8da 	bl	8007c3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8a:	1e5a      	subs	r2, r3, #1
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a98:	d112      	bne.n	8007ac0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d016      	beq.n	8007ad0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	3310      	adds	r3, #16
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 ffbc 	bl	8008a24 <xTaskRemoveFromEventList>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00e      	beq.n	8007ad0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e007      	b.n	8007ad0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	b25a      	sxtb	r2, r3
 8007aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad4:	e001      	b.n	8007ada <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007adc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f383 8811 	msr	BASEPRI, r3
}
 8007ae4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3738      	adds	r7, #56	@ 0x38
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10b      	bne.n	8007b1a <vQueueDelete+0x2a>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	60bb      	str	r3, [r7, #8]
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	e7fd      	b.n	8007b16 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 f95e 	bl	8007ddc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d102      	bne.n	8007b30 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f002 f994 	bl	8009e58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d006      	beq.n	8007b56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e001      	b.n	8007b5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
	}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b74:	2300      	movs	r3, #0
 8007b76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10d      	bne.n	8007ba2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d14d      	bne.n	8007c2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f001 f98c 	bl	8008eb0 <xTaskPriorityDisinherit>
 8007b98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	609a      	str	r2, [r3, #8]
 8007ba0:	e043      	b.n	8007c2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d119      	bne.n	8007bdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6858      	ldr	r0, [r3, #4]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	68b9      	ldr	r1, [r7, #8]
 8007bb4:	f009 fa59 	bl	801106a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc0:	441a      	add	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	685a      	ldr	r2, [r3, #4]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d32b      	bcc.n	8007c2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	605a      	str	r2, [r3, #4]
 8007bda:	e026      	b.n	8007c2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	68d8      	ldr	r0, [r3, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be4:	461a      	mov	r2, r3
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	f009 fa3f 	bl	801106a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf4:	425b      	negs	r3, r3
 8007bf6:	441a      	add	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d207      	bcs.n	8007c18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	689a      	ldr	r2, [r3, #8]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c10:	425b      	negs	r3, r3
 8007c12:	441a      	add	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d105      	bne.n	8007c2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007c32:	697b      	ldr	r3, [r7, #20]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d018      	beq.n	8007c80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c56:	441a      	add	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d303      	bcc.n	8007c70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68d9      	ldr	r1, [r3, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6838      	ldr	r0, [r7, #0]
 8007c7c:	f009 f9f5 	bl	801106a <memcpy>
	}
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c90:	f001 fef2 	bl	8009a78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c9c:	e011      	b.n	8007cc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d012      	beq.n	8007ccc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3324      	adds	r3, #36	@ 0x24
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 feba 	bl	8008a24 <xTaskRemoveFromEventList>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007cb6:	f000 ff93 	bl	8008be0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	dce9      	bgt.n	8007c9e <prvUnlockQueue+0x16>
 8007cca:	e000      	b.n	8007cce <prvUnlockQueue+0x46>
					break;
 8007ccc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	22ff      	movs	r2, #255	@ 0xff
 8007cd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007cd6:	f001 ff01 	bl	8009adc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007cda:	f001 fecd 	bl	8009a78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ce4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ce6:	e011      	b.n	8007d0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d012      	beq.n	8007d16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3310      	adds	r3, #16
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fe95 	bl	8008a24 <xTaskRemoveFromEventList>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d00:	f000 ff6e 	bl	8008be0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	dce9      	bgt.n	8007ce8 <prvUnlockQueue+0x60>
 8007d14:	e000      	b.n	8007d18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	22ff      	movs	r2, #255	@ 0xff
 8007d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d20:	f001 fedc 	bl	8009adc <vPortExitCritical>
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d34:	f001 fea0 	bl	8009a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d102      	bne.n	8007d46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d40:	2301      	movs	r3, #1
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e001      	b.n	8007d4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d4a:	f001 fec7 	bl	8009adc <vPortExitCritical>

	return xReturn;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d60:	f001 fe8a 	bl	8009a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d102      	bne.n	8007d76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d70:	2301      	movs	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	e001      	b.n	8007d7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d7a:	f001 feaf 	bl	8009adc <vPortExitCritical>

	return xReturn;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	e014      	b.n	8007dc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d98:	4a0f      	ldr	r2, [pc, #60]	@ (8007dd8 <vQueueAddToRegistry+0x50>)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10b      	bne.n	8007dbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007da4:	490c      	ldr	r1, [pc, #48]	@ (8007dd8 <vQueueAddToRegistry+0x50>)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007dae:	4a0a      	ldr	r2, [pc, #40]	@ (8007dd8 <vQueueAddToRegistry+0x50>)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	4413      	add	r3, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007dba:	e006      	b.n	8007dca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b07      	cmp	r3, #7
 8007dc6:	d9e7      	bls.n	8007d98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	20000c4c 	.word	0x20000c4c

08007ddc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	e016      	b.n	8007e18 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007dea:	4a10      	ldr	r2, [pc, #64]	@ (8007e2c <vQueueUnregisterQueue+0x50>)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	00db      	lsls	r3, r3, #3
 8007df0:	4413      	add	r3, r2
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d10b      	bne.n	8007e12 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8007e2c <vQueueUnregisterQueue+0x50>)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2100      	movs	r1, #0
 8007e00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e04:	4a09      	ldr	r2, [pc, #36]	@ (8007e2c <vQueueUnregisterQueue+0x50>)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	4413      	add	r3, r2
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	605a      	str	r2, [r3, #4]
				break;
 8007e10:	e006      	b.n	8007e20 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3301      	adds	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2b07      	cmp	r3, #7
 8007e1c:	d9e5      	bls.n	8007dea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	20000c4c 	.word	0x20000c4c

08007e30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e40:	f001 fe1a 	bl	8009a78 <vPortEnterCritical>
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e4a:	b25b      	sxtb	r3, r3
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e50:	d103      	bne.n	8007e5a <vQueueWaitForMessageRestricted+0x2a>
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e60:	b25b      	sxtb	r3, r3
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e66:	d103      	bne.n	8007e70 <vQueueWaitForMessageRestricted+0x40>
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e70:	f001 fe34 	bl	8009adc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d106      	bne.n	8007e8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	3324      	adds	r3, #36	@ 0x24
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 fda1 	bl	80089cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e8a:	6978      	ldr	r0, [r7, #20]
 8007e8c:	f7ff fefc 	bl	8007c88 <prvUnlockQueue>
	}
 8007e90:	bf00      	nop
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08e      	sub	sp, #56	@ 0x38
 8007e9c:	af04      	add	r7, sp, #16
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10b      	bne.n	8007ec4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	623b      	str	r3, [r7, #32]
}
 8007ebe:	bf00      	nop
 8007ec0:	bf00      	nop
 8007ec2:	e7fd      	b.n	8007ec0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	61fb      	str	r3, [r7, #28]
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	e7fd      	b.n	8007ede <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ee2:	235c      	movs	r3, #92	@ 0x5c
 8007ee4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	2b5c      	cmp	r3, #92	@ 0x5c
 8007eea:	d00b      	beq.n	8007f04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	61bb      	str	r3, [r7, #24]
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d01e      	beq.n	8007f4a <xTaskCreateStatic+0xb2>
 8007f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01b      	beq.n	8007f4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1e:	2202      	movs	r2, #2
 8007f20:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f24:	2300      	movs	r3, #0
 8007f26:	9303      	str	r3, [sp, #12]
 8007f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2a:	9302      	str	r3, [sp, #8]
 8007f2c:	f107 0314 	add.w	r3, r7, #20
 8007f30:	9301      	str	r3, [sp, #4]
 8007f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f850 	bl	8007fe2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f44:	f000 f8de 	bl	8008104 <prvAddNewTaskToReadyList>
 8007f48:	e001      	b.n	8007f4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f4e:	697b      	ldr	r3, [r7, #20]
	}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3728      	adds	r7, #40	@ 0x28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08c      	sub	sp, #48	@ 0x30
 8007f5c:	af04      	add	r7, sp, #16
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	4613      	mov	r3, r2
 8007f66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f68:	88fb      	ldrh	r3, [r7, #6]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 fea5 	bl	8009cbc <pvPortMalloc>
 8007f72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00e      	beq.n	8007f98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f7a:	205c      	movs	r0, #92	@ 0x5c
 8007f7c:	f001 fe9e 	bl	8009cbc <pvPortMalloc>
 8007f80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f8e:	e005      	b.n	8007f9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f90:	6978      	ldr	r0, [r7, #20]
 8007f92:	f001 ff61 	bl	8009e58 <vPortFree>
 8007f96:	e001      	b.n	8007f9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d017      	beq.n	8007fd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007faa:	88fa      	ldrh	r2, [r7, #6]
 8007fac:	2300      	movs	r3, #0
 8007fae:	9303      	str	r3, [sp, #12]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	9302      	str	r3, [sp, #8]
 8007fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 f80e 	bl	8007fe2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fc6:	69f8      	ldr	r0, [r7, #28]
 8007fc8:	f000 f89c 	bl	8008104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	61bb      	str	r3, [r7, #24]
 8007fd0:	e002      	b.n	8007fd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
	}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3720      	adds	r7, #32
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b088      	sub	sp, #32
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	607a      	str	r2, [r7, #4]
 8007fee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	21a5      	movs	r1, #165	@ 0xa5
 8007ffc:	f008 ffa9 	bl	8010f52 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800800a:	3b01      	subs	r3, #1
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f023 0307 	bic.w	r3, r3, #7
 8008018:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	f003 0307 	and.w	r3, r3, #7
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00b      	beq.n	800803c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	617b      	str	r3, [r7, #20]
}
 8008036:	bf00      	nop
 8008038:	bf00      	nop
 800803a:	e7fd      	b.n	8008038 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d01f      	beq.n	8008082 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008042:	2300      	movs	r3, #0
 8008044:	61fb      	str	r3, [r7, #28]
 8008046:	e012      	b.n	800806e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	4413      	add	r3, r2
 800804e:	7819      	ldrb	r1, [r3, #0]
 8008050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	4413      	add	r3, r2
 8008056:	3334      	adds	r3, #52	@ 0x34
 8008058:	460a      	mov	r2, r1
 800805a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	4413      	add	r3, r2
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d006      	beq.n	8008076 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	3301      	adds	r3, #1
 800806c:	61fb      	str	r3, [r7, #28]
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	2b0f      	cmp	r3, #15
 8008072:	d9e9      	bls.n	8008048 <prvInitialiseNewTask+0x66>
 8008074:	e000      	b.n	8008078 <prvInitialiseNewTask+0x96>
			{
				break;
 8008076:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008080:	e003      	b.n	800808a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800808a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808c:	2b37      	cmp	r3, #55	@ 0x37
 800808e:	d901      	bls.n	8008094 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008090:	2337      	movs	r3, #55	@ 0x37
 8008092:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008098:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800809e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a2:	2200      	movs	r2, #0
 80080a4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	3304      	adds	r3, #4
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fe fe34 	bl	8006d18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	3318      	adds	r3, #24
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fe fe2f 	bl	8006d18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	2200      	movs	r2, #0
 80080d4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	68f9      	ldr	r1, [r7, #12]
 80080e2:	69b8      	ldr	r0, [r7, #24]
 80080e4:	f001 fb9a 	bl	800981c <pxPortInitialiseStack>
 80080e8:	4602      	mov	r2, r0
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80080ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080fa:	bf00      	nop
 80080fc:	3720      	adds	r7, #32
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800810c:	f001 fcb4 	bl	8009a78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008110:	4b2d      	ldr	r3, [pc, #180]	@ (80081c8 <prvAddNewTaskToReadyList+0xc4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3301      	adds	r3, #1
 8008116:	4a2c      	ldr	r2, [pc, #176]	@ (80081c8 <prvAddNewTaskToReadyList+0xc4>)
 8008118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800811a:	4b2c      	ldr	r3, [pc, #176]	@ (80081cc <prvAddNewTaskToReadyList+0xc8>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008122:	4a2a      	ldr	r2, [pc, #168]	@ (80081cc <prvAddNewTaskToReadyList+0xc8>)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008128:	4b27      	ldr	r3, [pc, #156]	@ (80081c8 <prvAddNewTaskToReadyList+0xc4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d110      	bne.n	8008152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008130:	f000 fd7a 	bl	8008c28 <prvInitialiseTaskLists>
 8008134:	e00d      	b.n	8008152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008136:	4b26      	ldr	r3, [pc, #152]	@ (80081d0 <prvAddNewTaskToReadyList+0xcc>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d109      	bne.n	8008152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800813e:	4b23      	ldr	r3, [pc, #140]	@ (80081cc <prvAddNewTaskToReadyList+0xc8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	429a      	cmp	r2, r3
 800814a:	d802      	bhi.n	8008152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800814c:	4a1f      	ldr	r2, [pc, #124]	@ (80081cc <prvAddNewTaskToReadyList+0xc8>)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008152:	4b20      	ldr	r3, [pc, #128]	@ (80081d4 <prvAddNewTaskToReadyList+0xd0>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3301      	adds	r3, #1
 8008158:	4a1e      	ldr	r2, [pc, #120]	@ (80081d4 <prvAddNewTaskToReadyList+0xd0>)
 800815a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800815c:	4b1d      	ldr	r3, [pc, #116]	@ (80081d4 <prvAddNewTaskToReadyList+0xd0>)
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008168:	4b1b      	ldr	r3, [pc, #108]	@ (80081d8 <prvAddNewTaskToReadyList+0xd4>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d903      	bls.n	8008178 <prvAddNewTaskToReadyList+0x74>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008174:	4a18      	ldr	r2, [pc, #96]	@ (80081d8 <prvAddNewTaskToReadyList+0xd4>)
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800817c:	4613      	mov	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4a15      	ldr	r2, [pc, #84]	@ (80081dc <prvAddNewTaskToReadyList+0xd8>)
 8008186:	441a      	add	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3304      	adds	r3, #4
 800818c:	4619      	mov	r1, r3
 800818e:	4610      	mov	r0, r2
 8008190:	f7fe fdcf 	bl	8006d32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008194:	f001 fca2 	bl	8009adc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008198:	4b0d      	ldr	r3, [pc, #52]	@ (80081d0 <prvAddNewTaskToReadyList+0xcc>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00e      	beq.n	80081be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081a0:	4b0a      	ldr	r3, [pc, #40]	@ (80081cc <prvAddNewTaskToReadyList+0xc8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d207      	bcs.n	80081be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081ae:	4b0c      	ldr	r3, [pc, #48]	@ (80081e0 <prvAddNewTaskToReadyList+0xdc>)
 80081b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20001160 	.word	0x20001160
 80081cc:	20000c8c 	.word	0x20000c8c
 80081d0:	2000116c 	.word	0x2000116c
 80081d4:	2000117c 	.word	0x2000117c
 80081d8:	20001168 	.word	0x20001168
 80081dc:	20000c90 	.word	0x20000c90
 80081e0:	e000ed04 	.word	0xe000ed04

080081e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80081ec:	f001 fc44 	bl	8009a78 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d102      	bne.n	80081fc <vTaskDelete+0x18>
 80081f6:	4b2d      	ldr	r3, [pc, #180]	@ (80082ac <vTaskDelete+0xc8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	e000      	b.n	80081fe <vTaskDelete+0x1a>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3304      	adds	r3, #4
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe fdf1 	bl	8006dec <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3318      	adds	r3, #24
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fde8 	bl	8006dec <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800821c:	4b24      	ldr	r3, [pc, #144]	@ (80082b0 <vTaskDelete+0xcc>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3301      	adds	r3, #1
 8008222:	4a23      	ldr	r2, [pc, #140]	@ (80082b0 <vTaskDelete+0xcc>)
 8008224:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008226:	4b21      	ldr	r3, [pc, #132]	@ (80082ac <vTaskDelete+0xc8>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	429a      	cmp	r2, r3
 800822e:	d10b      	bne.n	8008248 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3304      	adds	r3, #4
 8008234:	4619      	mov	r1, r3
 8008236:	481f      	ldr	r0, [pc, #124]	@ (80082b4 <vTaskDelete+0xd0>)
 8008238:	f7fe fd7b 	bl	8006d32 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800823c:	4b1e      	ldr	r3, [pc, #120]	@ (80082b8 <vTaskDelete+0xd4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3301      	adds	r3, #1
 8008242:	4a1d      	ldr	r2, [pc, #116]	@ (80082b8 <vTaskDelete+0xd4>)
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	e009      	b.n	800825c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008248:	4b1c      	ldr	r3, [pc, #112]	@ (80082bc <vTaskDelete+0xd8>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3b01      	subs	r3, #1
 800824e:	4a1b      	ldr	r2, [pc, #108]	@ (80082bc <vTaskDelete+0xd8>)
 8008250:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 fd56 	bl	8008d04 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008258:	f000 fd84 	bl	8008d64 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800825c:	f001 fc3e 	bl	8009adc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008260:	4b17      	ldr	r3, [pc, #92]	@ (80082c0 <vTaskDelete+0xdc>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01c      	beq.n	80082a2 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8008268:	4b10      	ldr	r3, [pc, #64]	@ (80082ac <vTaskDelete+0xc8>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	429a      	cmp	r2, r3
 8008270:	d117      	bne.n	80082a2 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008272:	4b14      	ldr	r3, [pc, #80]	@ (80082c4 <vTaskDelete+0xe0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00b      	beq.n	8008292 <vTaskDelete+0xae>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	60bb      	str	r3, [r7, #8]
}
 800828c:	bf00      	nop
 800828e:	bf00      	nop
 8008290:	e7fd      	b.n	800828e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008292:	4b0d      	ldr	r3, [pc, #52]	@ (80082c8 <vTaskDelete+0xe4>)
 8008294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082a2:	bf00      	nop
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20000c8c 	.word	0x20000c8c
 80082b0:	2000117c 	.word	0x2000117c
 80082b4:	20001134 	.word	0x20001134
 80082b8:	20001148 	.word	0x20001148
 80082bc:	20001160 	.word	0x20001160
 80082c0:	2000116c 	.word	0x2000116c
 80082c4:	20001188 	.word	0x20001188
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08a      	sub	sp, #40	@ 0x28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80082d6:	2300      	movs	r3, #0
 80082d8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10b      	bne.n	80082f8 <vTaskDelayUntil+0x2c>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	617b      	str	r3, [r7, #20]
}
 80082f2:	bf00      	nop
 80082f4:	bf00      	nop
 80082f6:	e7fd      	b.n	80082f4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10b      	bne.n	8008316 <vTaskDelayUntil+0x4a>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	613b      	str	r3, [r7, #16]
}
 8008310:	bf00      	nop
 8008312:	bf00      	nop
 8008314:	e7fd      	b.n	8008312 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8008316:	4b2a      	ldr	r3, [pc, #168]	@ (80083c0 <vTaskDelayUntil+0xf4>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00b      	beq.n	8008336 <vTaskDelayUntil+0x6a>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	60fb      	str	r3, [r7, #12]
}
 8008330:	bf00      	nop
 8008332:	bf00      	nop
 8008334:	e7fd      	b.n	8008332 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8008336:	f000 f94f 	bl	80085d8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800833a:	4b22      	ldr	r3, [pc, #136]	@ (80083c4 <vTaskDelayUntil+0xf8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	4413      	add	r3, r2
 8008348:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6a3a      	ldr	r2, [r7, #32]
 8008350:	429a      	cmp	r2, r3
 8008352:	d20b      	bcs.n	800836c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	429a      	cmp	r2, r3
 800835c:	d211      	bcs.n	8008382 <vTaskDelayUntil+0xb6>
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	6a3b      	ldr	r3, [r7, #32]
 8008362:	429a      	cmp	r2, r3
 8008364:	d90d      	bls.n	8008382 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8008366:	2301      	movs	r3, #1
 8008368:	627b      	str	r3, [r7, #36]	@ 0x24
 800836a:	e00a      	b.n	8008382 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	69fa      	ldr	r2, [r7, #28]
 8008372:	429a      	cmp	r2, r3
 8008374:	d303      	bcc.n	800837e <vTaskDelayUntil+0xb2>
 8008376:	69fa      	ldr	r2, [r7, #28]
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	429a      	cmp	r2, r3
 800837c:	d901      	bls.n	8008382 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800837e:	2301      	movs	r3, #1
 8008380:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69fa      	ldr	r2, [r7, #28]
 8008386:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	d006      	beq.n	800839c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800838e:	69fa      	ldr	r2, [r7, #28]
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fe92 	bl	80090c0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800839c:	f000 f92a 	bl	80085f4 <xTaskResumeAll>
 80083a0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d107      	bne.n	80083b8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80083a8:	4b07      	ldr	r3, [pc, #28]	@ (80083c8 <vTaskDelayUntil+0xfc>)
 80083aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083b8:	bf00      	nop
 80083ba:	3728      	adds	r7, #40	@ 0x28
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	20001188 	.word	0x20001188
 80083c4:	20001164 	.word	0x20001164
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d018      	beq.n	8008410 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083de:	4b14      	ldr	r3, [pc, #80]	@ (8008430 <vTaskDelay+0x64>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00b      	beq.n	80083fe <vTaskDelay+0x32>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	60bb      	str	r3, [r7, #8]
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	e7fd      	b.n	80083fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80083fe:	f000 f8eb 	bl	80085d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008402:	2100      	movs	r1, #0
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fe5b 	bl	80090c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800840a:	f000 f8f3 	bl	80085f4 <xTaskResumeAll>
 800840e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d107      	bne.n	8008426 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008416:	4b07      	ldr	r3, [pc, #28]	@ (8008434 <vTaskDelay+0x68>)
 8008418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	20001188 	.word	0x20001188
 8008434:	e000ed04 	.word	0xe000ed04

08008438 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10b      	bne.n	8008462 <eTaskGetState+0x2a>
	__asm volatile
 800844a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	60bb      	str	r3, [r7, #8]
}
 800845c:	bf00      	nop
 800845e:	bf00      	nop
 8008460:	e7fd      	b.n	800845e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8008462:	4b24      	ldr	r3, [pc, #144]	@ (80084f4 <eTaskGetState+0xbc>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	429a      	cmp	r2, r3
 800846a:	d102      	bne.n	8008472 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800846c:	2300      	movs	r3, #0
 800846e:	77fb      	strb	r3, [r7, #31]
 8008470:	e03a      	b.n	80084e8 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8008472:	f001 fb01 	bl	8009a78 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800847c:	4b1e      	ldr	r3, [pc, #120]	@ (80084f8 <eTaskGetState+0xc0>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8008482:	4b1e      	ldr	r3, [pc, #120]	@ (80084fc <eTaskGetState+0xc4>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8008488:	f001 fb28 	bl	8009adc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	429a      	cmp	r2, r3
 8008492:	d003      	beq.n	800849c <eTaskGetState+0x64>
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	429a      	cmp	r2, r3
 800849a:	d102      	bne.n	80084a2 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800849c:	2302      	movs	r3, #2
 800849e:	77fb      	strb	r3, [r7, #31]
 80084a0:	e022      	b.n	80084e8 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	4a16      	ldr	r2, [pc, #88]	@ (8008500 <eTaskGetState+0xc8>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d112      	bne.n	80084d0 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10b      	bne.n	80084ca <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d102      	bne.n	80084c4 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 80084be:	2302      	movs	r3, #2
 80084c0:	77fb      	strb	r3, [r7, #31]
 80084c2:	e011      	b.n	80084e8 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 80084c4:	2303      	movs	r3, #3
 80084c6:	77fb      	strb	r3, [r7, #31]
 80084c8:	e00e      	b.n	80084e8 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80084ca:	2302      	movs	r3, #2
 80084cc:	77fb      	strb	r3, [r7, #31]
 80084ce:	e00b      	b.n	80084e8 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008504 <eTaskGetState+0xcc>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d002      	beq.n	80084de <eTaskGetState+0xa6>
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d102      	bne.n	80084e4 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80084de:	2304      	movs	r3, #4
 80084e0:	77fb      	strb	r3, [r7, #31]
 80084e2:	e001      	b.n	80084e8 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80084e4:	2301      	movs	r3, #1
 80084e6:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80084e8:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80084ea:	4618      	mov	r0, r3
 80084ec:	3720      	adds	r7, #32
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000c8c 	.word	0x20000c8c
 80084f8:	20001118 	.word	0x20001118
 80084fc:	2000111c 	.word	0x2000111c
 8008500:	2000114c 	.word	0x2000114c
 8008504:	20001134 	.word	0x20001134

08008508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08a      	sub	sp, #40	@ 0x28
 800850c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800850e:	2300      	movs	r3, #0
 8008510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008512:	2300      	movs	r3, #0
 8008514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008516:	463a      	mov	r2, r7
 8008518:	1d39      	adds	r1, r7, #4
 800851a:	f107 0308 	add.w	r3, r7, #8
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe fba6 	bl	8006c70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	9202      	str	r2, [sp, #8]
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	2300      	movs	r3, #0
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	2300      	movs	r3, #0
 8008534:	460a      	mov	r2, r1
 8008536:	4922      	ldr	r1, [pc, #136]	@ (80085c0 <vTaskStartScheduler+0xb8>)
 8008538:	4822      	ldr	r0, [pc, #136]	@ (80085c4 <vTaskStartScheduler+0xbc>)
 800853a:	f7ff fcad 	bl	8007e98 <xTaskCreateStatic>
 800853e:	4603      	mov	r3, r0
 8008540:	4a21      	ldr	r2, [pc, #132]	@ (80085c8 <vTaskStartScheduler+0xc0>)
 8008542:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008544:	4b20      	ldr	r3, [pc, #128]	@ (80085c8 <vTaskStartScheduler+0xc0>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800854c:	2301      	movs	r3, #1
 800854e:	617b      	str	r3, [r7, #20]
 8008550:	e001      	b.n	8008556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d102      	bne.n	8008562 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800855c:	f000 fe04 	bl	8009168 <xTimerCreateTimerTask>
 8008560:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d116      	bne.n	8008596 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	613b      	str	r3, [r7, #16]
}
 800857a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800857c:	4b13      	ldr	r3, [pc, #76]	@ (80085cc <vTaskStartScheduler+0xc4>)
 800857e:	f04f 32ff 	mov.w	r2, #4294967295
 8008582:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008584:	4b12      	ldr	r3, [pc, #72]	@ (80085d0 <vTaskStartScheduler+0xc8>)
 8008586:	2201      	movs	r2, #1
 8008588:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800858a:	4b12      	ldr	r3, [pc, #72]	@ (80085d4 <vTaskStartScheduler+0xcc>)
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008590:	f001 f9ce 	bl	8009930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008594:	e00f      	b.n	80085b6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859c:	d10b      	bne.n	80085b6 <vTaskStartScheduler+0xae>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	60fb      	str	r3, [r7, #12]
}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	e7fd      	b.n	80085b2 <vTaskStartScheduler+0xaa>
}
 80085b6:	bf00      	nop
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	08011b50 	.word	0x08011b50
 80085c4:	08008bf9 	.word	0x08008bf9
 80085c8:	20001184 	.word	0x20001184
 80085cc:	20001180 	.word	0x20001180
 80085d0:	2000116c 	.word	0x2000116c
 80085d4:	20001164 	.word	0x20001164

080085d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80085dc:	4b04      	ldr	r3, [pc, #16]	@ (80085f0 <vTaskSuspendAll+0x18>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3301      	adds	r3, #1
 80085e2:	4a03      	ldr	r2, [pc, #12]	@ (80085f0 <vTaskSuspendAll+0x18>)
 80085e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80085e6:	bf00      	nop
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	20001188 	.word	0x20001188

080085f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085fe:	2300      	movs	r3, #0
 8008600:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008602:	4b42      	ldr	r3, [pc, #264]	@ (800870c <xTaskResumeAll+0x118>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10b      	bne.n	8008622 <xTaskResumeAll+0x2e>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	603b      	str	r3, [r7, #0]
}
 800861c:	bf00      	nop
 800861e:	bf00      	nop
 8008620:	e7fd      	b.n	800861e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008622:	f001 fa29 	bl	8009a78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008626:	4b39      	ldr	r3, [pc, #228]	@ (800870c <xTaskResumeAll+0x118>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3b01      	subs	r3, #1
 800862c:	4a37      	ldr	r2, [pc, #220]	@ (800870c <xTaskResumeAll+0x118>)
 800862e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008630:	4b36      	ldr	r3, [pc, #216]	@ (800870c <xTaskResumeAll+0x118>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d162      	bne.n	80086fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008638:	4b35      	ldr	r3, [pc, #212]	@ (8008710 <xTaskResumeAll+0x11c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d05e      	beq.n	80086fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008640:	e02f      	b.n	80086a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008642:	4b34      	ldr	r3, [pc, #208]	@ (8008714 <xTaskResumeAll+0x120>)
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3318      	adds	r3, #24
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fbcc 	bl	8006dec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3304      	adds	r3, #4
 8008658:	4618      	mov	r0, r3
 800865a:	f7fe fbc7 	bl	8006dec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008662:	4b2d      	ldr	r3, [pc, #180]	@ (8008718 <xTaskResumeAll+0x124>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d903      	bls.n	8008672 <xTaskResumeAll+0x7e>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866e:	4a2a      	ldr	r2, [pc, #168]	@ (8008718 <xTaskResumeAll+0x124>)
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008676:	4613      	mov	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4a27      	ldr	r2, [pc, #156]	@ (800871c <xTaskResumeAll+0x128>)
 8008680:	441a      	add	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3304      	adds	r3, #4
 8008686:	4619      	mov	r1, r3
 8008688:	4610      	mov	r0, r2
 800868a:	f7fe fb52 	bl	8006d32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008692:	4b23      	ldr	r3, [pc, #140]	@ (8008720 <xTaskResumeAll+0x12c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008698:	429a      	cmp	r2, r3
 800869a:	d302      	bcc.n	80086a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800869c:	4b21      	ldr	r3, [pc, #132]	@ (8008724 <xTaskResumeAll+0x130>)
 800869e:	2201      	movs	r2, #1
 80086a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086a2:	4b1c      	ldr	r3, [pc, #112]	@ (8008714 <xTaskResumeAll+0x120>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1cb      	bne.n	8008642 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086b0:	f000 fb58 	bl	8008d64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80086b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008728 <xTaskResumeAll+0x134>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d010      	beq.n	80086e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086c0:	f000 f846 	bl	8008750 <xTaskIncrementTick>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80086ca:	4b16      	ldr	r3, [pc, #88]	@ (8008724 <xTaskResumeAll+0x130>)
 80086cc:	2201      	movs	r2, #1
 80086ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1f1      	bne.n	80086c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80086dc:	4b12      	ldr	r3, [pc, #72]	@ (8008728 <xTaskResumeAll+0x134>)
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086e2:	4b10      	ldr	r3, [pc, #64]	@ (8008724 <xTaskResumeAll+0x130>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086ea:	2301      	movs	r3, #1
 80086ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086ee:	4b0f      	ldr	r3, [pc, #60]	@ (800872c <xTaskResumeAll+0x138>)
 80086f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086fe:	f001 f9ed 	bl	8009adc <vPortExitCritical>

	return xAlreadyYielded;
 8008702:	68bb      	ldr	r3, [r7, #8]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20001188 	.word	0x20001188
 8008710:	20001160 	.word	0x20001160
 8008714:	20001120 	.word	0x20001120
 8008718:	20001168 	.word	0x20001168
 800871c:	20000c90 	.word	0x20000c90
 8008720:	20000c8c 	.word	0x20000c8c
 8008724:	20001174 	.word	0x20001174
 8008728:	20001170 	.word	0x20001170
 800872c:	e000ed04 	.word	0xe000ed04

08008730 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008736:	4b05      	ldr	r3, [pc, #20]	@ (800874c <xTaskGetTickCount+0x1c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800873c:	687b      	ldr	r3, [r7, #4]
}
 800873e:	4618      	mov	r0, r3
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	20001164 	.word	0x20001164

08008750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800875a:	4b4f      	ldr	r3, [pc, #316]	@ (8008898 <xTaskIncrementTick+0x148>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f040 8090 	bne.w	8008884 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008764:	4b4d      	ldr	r3, [pc, #308]	@ (800889c <xTaskIncrementTick+0x14c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3301      	adds	r3, #1
 800876a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800876c:	4a4b      	ldr	r2, [pc, #300]	@ (800889c <xTaskIncrementTick+0x14c>)
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d121      	bne.n	80087bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008778:	4b49      	ldr	r3, [pc, #292]	@ (80088a0 <xTaskIncrementTick+0x150>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00b      	beq.n	800879a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	603b      	str	r3, [r7, #0]
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop
 8008798:	e7fd      	b.n	8008796 <xTaskIncrementTick+0x46>
 800879a:	4b41      	ldr	r3, [pc, #260]	@ (80088a0 <xTaskIncrementTick+0x150>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	60fb      	str	r3, [r7, #12]
 80087a0:	4b40      	ldr	r3, [pc, #256]	@ (80088a4 <xTaskIncrementTick+0x154>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a3e      	ldr	r2, [pc, #248]	@ (80088a0 <xTaskIncrementTick+0x150>)
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	4a3e      	ldr	r2, [pc, #248]	@ (80088a4 <xTaskIncrementTick+0x154>)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	4b3e      	ldr	r3, [pc, #248]	@ (80088a8 <xTaskIncrementTick+0x158>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3301      	adds	r3, #1
 80087b4:	4a3c      	ldr	r2, [pc, #240]	@ (80088a8 <xTaskIncrementTick+0x158>)
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	f000 fad4 	bl	8008d64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087bc:	4b3b      	ldr	r3, [pc, #236]	@ (80088ac <xTaskIncrementTick+0x15c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d349      	bcc.n	800885a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087c6:	4b36      	ldr	r3, [pc, #216]	@ (80088a0 <xTaskIncrementTick+0x150>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d104      	bne.n	80087da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087d0:	4b36      	ldr	r3, [pc, #216]	@ (80088ac <xTaskIncrementTick+0x15c>)
 80087d2:	f04f 32ff 	mov.w	r2, #4294967295
 80087d6:	601a      	str	r2, [r3, #0]
					break;
 80087d8:	e03f      	b.n	800885a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087da:	4b31      	ldr	r3, [pc, #196]	@ (80088a0 <xTaskIncrementTick+0x150>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d203      	bcs.n	80087fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087f2:	4a2e      	ldr	r2, [pc, #184]	@ (80088ac <xTaskIncrementTick+0x15c>)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087f8:	e02f      	b.n	800885a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe faf4 	bl	8006dec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008808:	2b00      	cmp	r3, #0
 800880a:	d004      	beq.n	8008816 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	3318      	adds	r3, #24
 8008810:	4618      	mov	r0, r3
 8008812:	f7fe faeb 	bl	8006dec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800881a:	4b25      	ldr	r3, [pc, #148]	@ (80088b0 <xTaskIncrementTick+0x160>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d903      	bls.n	800882a <xTaskIncrementTick+0xda>
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008826:	4a22      	ldr	r2, [pc, #136]	@ (80088b0 <xTaskIncrementTick+0x160>)
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800882e:	4613      	mov	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4a1f      	ldr	r2, [pc, #124]	@ (80088b4 <xTaskIncrementTick+0x164>)
 8008838:	441a      	add	r2, r3
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	3304      	adds	r3, #4
 800883e:	4619      	mov	r1, r3
 8008840:	4610      	mov	r0, r2
 8008842:	f7fe fa76 	bl	8006d32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800884a:	4b1b      	ldr	r3, [pc, #108]	@ (80088b8 <xTaskIncrementTick+0x168>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008850:	429a      	cmp	r2, r3
 8008852:	d3b8      	bcc.n	80087c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008854:	2301      	movs	r3, #1
 8008856:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008858:	e7b5      	b.n	80087c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800885a:	4b17      	ldr	r3, [pc, #92]	@ (80088b8 <xTaskIncrementTick+0x168>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008860:	4914      	ldr	r1, [pc, #80]	@ (80088b4 <xTaskIncrementTick+0x164>)
 8008862:	4613      	mov	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	440b      	add	r3, r1
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d901      	bls.n	8008876 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008872:	2301      	movs	r3, #1
 8008874:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008876:	4b11      	ldr	r3, [pc, #68]	@ (80088bc <xTaskIncrementTick+0x16c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800887e:	2301      	movs	r3, #1
 8008880:	617b      	str	r3, [r7, #20]
 8008882:	e004      	b.n	800888e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008884:	4b0e      	ldr	r3, [pc, #56]	@ (80088c0 <xTaskIncrementTick+0x170>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3301      	adds	r3, #1
 800888a:	4a0d      	ldr	r2, [pc, #52]	@ (80088c0 <xTaskIncrementTick+0x170>)
 800888c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800888e:	697b      	ldr	r3, [r7, #20]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20001188 	.word	0x20001188
 800889c:	20001164 	.word	0x20001164
 80088a0:	20001118 	.word	0x20001118
 80088a4:	2000111c 	.word	0x2000111c
 80088a8:	20001178 	.word	0x20001178
 80088ac:	20001180 	.word	0x20001180
 80088b0:	20001168 	.word	0x20001168
 80088b4:	20000c90 	.word	0x20000c90
 80088b8:	20000c8c 	.word	0x20000c8c
 80088bc:	20001174 	.word	0x20001174
 80088c0:	20001170 	.word	0x20001170

080088c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088ca:	4b28      	ldr	r3, [pc, #160]	@ (800896c <vTaskSwitchContext+0xa8>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088d2:	4b27      	ldr	r3, [pc, #156]	@ (8008970 <vTaskSwitchContext+0xac>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088d8:	e042      	b.n	8008960 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80088da:	4b25      	ldr	r3, [pc, #148]	@ (8008970 <vTaskSwitchContext+0xac>)
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088e0:	4b24      	ldr	r3, [pc, #144]	@ (8008974 <vTaskSwitchContext+0xb0>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	e011      	b.n	800890c <vTaskSwitchContext+0x48>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10b      	bne.n	8008906 <vTaskSwitchContext+0x42>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
 8008902:	bf00      	nop
 8008904:	e7fd      	b.n	8008902 <vTaskSwitchContext+0x3e>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3b01      	subs	r3, #1
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	491a      	ldr	r1, [pc, #104]	@ (8008978 <vTaskSwitchContext+0xb4>)
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	440b      	add	r3, r1
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0e3      	beq.n	80088e8 <vTaskSwitchContext+0x24>
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4a13      	ldr	r2, [pc, #76]	@ (8008978 <vTaskSwitchContext+0xb4>)
 800892c:	4413      	add	r3, r2
 800892e:	60bb      	str	r3, [r7, #8]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	605a      	str	r2, [r3, #4]
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	3308      	adds	r3, #8
 8008942:	429a      	cmp	r2, r3
 8008944:	d104      	bne.n	8008950 <vTaskSwitchContext+0x8c>
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	605a      	str	r2, [r3, #4]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	4a09      	ldr	r2, [pc, #36]	@ (800897c <vTaskSwitchContext+0xb8>)
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	4a06      	ldr	r2, [pc, #24]	@ (8008974 <vTaskSwitchContext+0xb0>)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6013      	str	r3, [r2, #0]
}
 8008960:	bf00      	nop
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	20001188 	.word	0x20001188
 8008970:	20001174 	.word	0x20001174
 8008974:	20001168 	.word	0x20001168
 8008978:	20000c90 	.word	0x20000c90
 800897c:	20000c8c 	.word	0x20000c8c

08008980 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10b      	bne.n	80089a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	60fb      	str	r3, [r7, #12]
}
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
 80089a6:	e7fd      	b.n	80089a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089a8:	4b07      	ldr	r3, [pc, #28]	@ (80089c8 <vTaskPlaceOnEventList+0x48>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3318      	adds	r3, #24
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7fe f9e2 	bl	8006d7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089b6:	2101      	movs	r1, #1
 80089b8:	6838      	ldr	r0, [r7, #0]
 80089ba:	f000 fb81 	bl	80090c0 <prvAddCurrentTaskToDelayedList>
}
 80089be:	bf00      	nop
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000c8c 	.word	0x20000c8c

080089cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10b      	bne.n	80089f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	617b      	str	r3, [r7, #20]
}
 80089f0:	bf00      	nop
 80089f2:	bf00      	nop
 80089f4:	e7fd      	b.n	80089f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a20 <vTaskPlaceOnEventListRestricted+0x54>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3318      	adds	r3, #24
 80089fc:	4619      	mov	r1, r3
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7fe f997 	bl	8006d32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a10:	6879      	ldr	r1, [r7, #4]
 8008a12:	68b8      	ldr	r0, [r7, #8]
 8008a14:	f000 fb54 	bl	80090c0 <prvAddCurrentTaskToDelayedList>
	}
 8008a18:	bf00      	nop
 8008a1a:	3718      	adds	r7, #24
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	20000c8c 	.word	0x20000c8c

08008a24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10b      	bne.n	8008a52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	60fb      	str	r3, [r7, #12]
}
 8008a4c:	bf00      	nop
 8008a4e:	bf00      	nop
 8008a50:	e7fd      	b.n	8008a4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	3318      	adds	r3, #24
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe f9c8 	bl	8006dec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ad4 <xTaskRemoveFromEventList+0xb0>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d11d      	bne.n	8008aa0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	3304      	adds	r3, #4
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe f9bf 	bl	8006dec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a72:	4b19      	ldr	r3, [pc, #100]	@ (8008ad8 <xTaskRemoveFromEventList+0xb4>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d903      	bls.n	8008a82 <xTaskRemoveFromEventList+0x5e>
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7e:	4a16      	ldr	r2, [pc, #88]	@ (8008ad8 <xTaskRemoveFromEventList+0xb4>)
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4a13      	ldr	r2, [pc, #76]	@ (8008adc <xTaskRemoveFromEventList+0xb8>)
 8008a90:	441a      	add	r2, r3
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	3304      	adds	r3, #4
 8008a96:	4619      	mov	r1, r3
 8008a98:	4610      	mov	r0, r2
 8008a9a:	f7fe f94a 	bl	8006d32 <vListInsertEnd>
 8008a9e:	e005      	b.n	8008aac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	3318      	adds	r3, #24
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	480e      	ldr	r0, [pc, #56]	@ (8008ae0 <xTaskRemoveFromEventList+0xbc>)
 8008aa8:	f7fe f943 	bl	8006d32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae4 <xTaskRemoveFromEventList+0xc0>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d905      	bls.n	8008ac6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008aba:	2301      	movs	r3, #1
 8008abc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008abe:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae8 <xTaskRemoveFromEventList+0xc4>)
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	e001      	b.n	8008aca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008aca:	697b      	ldr	r3, [r7, #20]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	20001188 	.word	0x20001188
 8008ad8:	20001168 	.word	0x20001168
 8008adc:	20000c90 	.word	0x20000c90
 8008ae0:	20001120 	.word	0x20001120
 8008ae4:	20000c8c 	.word	0x20000c8c
 8008ae8:	20001174 	.word	0x20001174

08008aec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008af4:	4b06      	ldr	r3, [pc, #24]	@ (8008b10 <vTaskInternalSetTimeOutState+0x24>)
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008afc:	4b05      	ldr	r3, [pc, #20]	@ (8008b14 <vTaskInternalSetTimeOutState+0x28>)
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	605a      	str	r2, [r3, #4]
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	20001178 	.word	0x20001178
 8008b14:	20001164 	.word	0x20001164

08008b18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10b      	bne.n	8008b40 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	613b      	str	r3, [r7, #16]
}
 8008b3a:	bf00      	nop
 8008b3c:	bf00      	nop
 8008b3e:	e7fd      	b.n	8008b3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10b      	bne.n	8008b5e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	60fb      	str	r3, [r7, #12]
}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	e7fd      	b.n	8008b5a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b5e:	f000 ff8b 	bl	8009a78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b62:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd8 <xTaskCheckForTimeOut+0xc0>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7a:	d102      	bne.n	8008b82 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	61fb      	str	r3, [r7, #28]
 8008b80:	e023      	b.n	8008bca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	4b15      	ldr	r3, [pc, #84]	@ (8008bdc <xTaskCheckForTimeOut+0xc4>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d007      	beq.n	8008b9e <xTaskCheckForTimeOut+0x86>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d302      	bcc.n	8008b9e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	61fb      	str	r3, [r7, #28]
 8008b9c:	e015      	b.n	8008bca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d20b      	bcs.n	8008bc0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7ff ff99 	bl	8008aec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	61fb      	str	r3, [r7, #28]
 8008bbe:	e004      	b.n	8008bca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008bca:	f000 ff87 	bl	8009adc <vPortExitCritical>

	return xReturn;
 8008bce:	69fb      	ldr	r3, [r7, #28]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3720      	adds	r7, #32
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20001164 	.word	0x20001164
 8008bdc:	20001178 	.word	0x20001178

08008be0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008be4:	4b03      	ldr	r3, [pc, #12]	@ (8008bf4 <vTaskMissedYield+0x14>)
 8008be6:	2201      	movs	r2, #1
 8008be8:	601a      	str	r2, [r3, #0]
}
 8008bea:	bf00      	nop
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	20001174 	.word	0x20001174

08008bf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c00:	f000 f852 	bl	8008ca8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c04:	4b06      	ldr	r3, [pc, #24]	@ (8008c20 <prvIdleTask+0x28>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d9f9      	bls.n	8008c00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c0c:	4b05      	ldr	r3, [pc, #20]	@ (8008c24 <prvIdleTask+0x2c>)
 8008c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c1c:	e7f0      	b.n	8008c00 <prvIdleTask+0x8>
 8008c1e:	bf00      	nop
 8008c20:	20000c90 	.word	0x20000c90
 8008c24:	e000ed04 	.word	0xe000ed04

08008c28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c2e:	2300      	movs	r3, #0
 8008c30:	607b      	str	r3, [r7, #4]
 8008c32:	e00c      	b.n	8008c4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4a12      	ldr	r2, [pc, #72]	@ (8008c88 <prvInitialiseTaskLists+0x60>)
 8008c40:	4413      	add	r3, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe f848 	bl	8006cd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	607b      	str	r3, [r7, #4]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b37      	cmp	r3, #55	@ 0x37
 8008c52:	d9ef      	bls.n	8008c34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c54:	480d      	ldr	r0, [pc, #52]	@ (8008c8c <prvInitialiseTaskLists+0x64>)
 8008c56:	f7fe f83f 	bl	8006cd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c5a:	480d      	ldr	r0, [pc, #52]	@ (8008c90 <prvInitialiseTaskLists+0x68>)
 8008c5c:	f7fe f83c 	bl	8006cd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c60:	480c      	ldr	r0, [pc, #48]	@ (8008c94 <prvInitialiseTaskLists+0x6c>)
 8008c62:	f7fe f839 	bl	8006cd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c66:	480c      	ldr	r0, [pc, #48]	@ (8008c98 <prvInitialiseTaskLists+0x70>)
 8008c68:	f7fe f836 	bl	8006cd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c6c:	480b      	ldr	r0, [pc, #44]	@ (8008c9c <prvInitialiseTaskLists+0x74>)
 8008c6e:	f7fe f833 	bl	8006cd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c72:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca0 <prvInitialiseTaskLists+0x78>)
 8008c74:	4a05      	ldr	r2, [pc, #20]	@ (8008c8c <prvInitialiseTaskLists+0x64>)
 8008c76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c78:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca4 <prvInitialiseTaskLists+0x7c>)
 8008c7a:	4a05      	ldr	r2, [pc, #20]	@ (8008c90 <prvInitialiseTaskLists+0x68>)
 8008c7c:	601a      	str	r2, [r3, #0]
}
 8008c7e:	bf00      	nop
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000c90 	.word	0x20000c90
 8008c8c:	200010f0 	.word	0x200010f0
 8008c90:	20001104 	.word	0x20001104
 8008c94:	20001120 	.word	0x20001120
 8008c98:	20001134 	.word	0x20001134
 8008c9c:	2000114c 	.word	0x2000114c
 8008ca0:	20001118 	.word	0x20001118
 8008ca4:	2000111c 	.word	0x2000111c

08008ca8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cae:	e019      	b.n	8008ce4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008cb0:	f000 fee2 	bl	8009a78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb4:	4b10      	ldr	r3, [pc, #64]	@ (8008cf8 <prvCheckTasksWaitingTermination+0x50>)
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe f893 	bl	8006dec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cfc <prvCheckTasksWaitingTermination+0x54>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8008cfc <prvCheckTasksWaitingTermination+0x54>)
 8008cce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008d00 <prvCheckTasksWaitingTermination+0x58>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8008d00 <prvCheckTasksWaitingTermination+0x58>)
 8008cd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008cda:	f000 feff 	bl	8009adc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f810 	bl	8008d04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ce4:	4b06      	ldr	r3, [pc, #24]	@ (8008d00 <prvCheckTasksWaitingTermination+0x58>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e1      	bne.n	8008cb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cec:	bf00      	nop
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	20001134 	.word	0x20001134
 8008cfc:	20001160 	.word	0x20001160
 8008d00:	20001148 	.word	0x20001148

08008d04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d108      	bne.n	8008d28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 f89c 	bl	8009e58 <vPortFree>
				vPortFree( pxTCB );
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 f899 	bl	8009e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d26:	e019      	b.n	8008d5c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d103      	bne.n	8008d3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 f890 	bl	8009e58 <vPortFree>
	}
 8008d38:	e010      	b.n	8008d5c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d00b      	beq.n	8008d5c <prvDeleteTCB+0x58>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	60fb      	str	r3, [r7, #12]
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	e7fd      	b.n	8008d58 <prvDeleteTCB+0x54>
	}
 8008d5c:	bf00      	nop
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d9c <prvResetNextTaskUnblockTime+0x38>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d104      	bne.n	8008d7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d74:	4b0a      	ldr	r3, [pc, #40]	@ (8008da0 <prvResetNextTaskUnblockTime+0x3c>)
 8008d76:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d7c:	e008      	b.n	8008d90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d7e:	4b07      	ldr	r3, [pc, #28]	@ (8008d9c <prvResetNextTaskUnblockTime+0x38>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	4a04      	ldr	r2, [pc, #16]	@ (8008da0 <prvResetNextTaskUnblockTime+0x3c>)
 8008d8e:	6013      	str	r3, [r2, #0]
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	20001118 	.word	0x20001118
 8008da0:	20001180 	.word	0x20001180

08008da4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008daa:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd8 <xTaskGetSchedulerState+0x34>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008db2:	2301      	movs	r3, #1
 8008db4:	607b      	str	r3, [r7, #4]
 8008db6:	e008      	b.n	8008dca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008db8:	4b08      	ldr	r3, [pc, #32]	@ (8008ddc <xTaskGetSchedulerState+0x38>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	607b      	str	r3, [r7, #4]
 8008dc4:	e001      	b.n	8008dca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008dca:	687b      	ldr	r3, [r7, #4]
	}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	2000116c 	.word	0x2000116c
 8008ddc:	20001188 	.word	0x20001188

08008de0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d051      	beq.n	8008e9a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8008ea4 <xTaskPriorityInherit+0xc4>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d241      	bcs.n	8008e88 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	db06      	blt.n	8008e1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e0c:	4b25      	ldr	r3, [pc, #148]	@ (8008ea4 <xTaskPriorityInherit+0xc4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	6959      	ldr	r1, [r3, #20]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ea8 <xTaskPriorityInherit+0xc8>)
 8008e2c:	4413      	add	r3, r2
 8008e2e:	4299      	cmp	r1, r3
 8008e30:	d122      	bne.n	8008e78 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	3304      	adds	r3, #4
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fd ffd8 	bl	8006dec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e3c:	4b19      	ldr	r3, [pc, #100]	@ (8008ea4 <xTaskPriorityInherit+0xc4>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e4a:	4b18      	ldr	r3, [pc, #96]	@ (8008eac <xTaskPriorityInherit+0xcc>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d903      	bls.n	8008e5a <xTaskPriorityInherit+0x7a>
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e56:	4a15      	ldr	r2, [pc, #84]	@ (8008eac <xTaskPriorityInherit+0xcc>)
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5e:	4613      	mov	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4a10      	ldr	r2, [pc, #64]	@ (8008ea8 <xTaskPriorityInherit+0xc8>)
 8008e68:	441a      	add	r2, r3
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f7fd ff5e 	bl	8006d32 <vListInsertEnd>
 8008e76:	e004      	b.n	8008e82 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e78:	4b0a      	ldr	r3, [pc, #40]	@ (8008ea4 <xTaskPriorityInherit+0xc4>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008e82:	2301      	movs	r3, #1
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	e008      	b.n	8008e9a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ea4 <xTaskPriorityInherit+0xc4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d201      	bcs.n	8008e9a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008e96:	2301      	movs	r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
	}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	20000c8c 	.word	0x20000c8c
 8008ea8:	20000c90 	.word	0x20000c90
 8008eac:	20001168 	.word	0x20001168

08008eb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d058      	beq.n	8008f78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8008f84 <xTaskPriorityDisinherit+0xd4>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d00b      	beq.n	8008ee8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	60fb      	str	r3, [r7, #12]
}
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	e7fd      	b.n	8008ee4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10b      	bne.n	8008f08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	60bb      	str	r3, [r7, #8]
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	e7fd      	b.n	8008f04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f0c:	1e5a      	subs	r2, r3, #1
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d02c      	beq.n	8008f78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d128      	bne.n	8008f78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fd ff5e 	bl	8006dec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f48:	4b0f      	ldr	r3, [pc, #60]	@ (8008f88 <xTaskPriorityDisinherit+0xd8>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d903      	bls.n	8008f58 <xTaskPriorityDisinherit+0xa8>
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f54:	4a0c      	ldr	r2, [pc, #48]	@ (8008f88 <xTaskPriorityDisinherit+0xd8>)
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4a09      	ldr	r2, [pc, #36]	@ (8008f8c <xTaskPriorityDisinherit+0xdc>)
 8008f66:	441a      	add	r2, r3
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	f7fd fedf 	bl	8006d32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f74:	2301      	movs	r3, #1
 8008f76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f78:	697b      	ldr	r3, [r7, #20]
	}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20000c8c 	.word	0x20000c8c
 8008f88:	20001168 	.word	0x20001168
 8008f8c:	20000c90 	.word	0x20000c90

08008f90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d06c      	beq.n	8009082 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10b      	bne.n	8008fc8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	60fb      	str	r3, [r7, #12]
}
 8008fc2:	bf00      	nop
 8008fc4:	bf00      	nop
 8008fc6:	e7fd      	b.n	8008fc4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d902      	bls.n	8008fd8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	61fb      	str	r3, [r7, #28]
 8008fd6:	e002      	b.n	8008fde <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fdc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d04c      	beq.n	8009082 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d147      	bne.n	8009082 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008ff2:	4b26      	ldr	r3, [pc, #152]	@ (800908c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d10b      	bne.n	8009014 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	60bb      	str	r3, [r7, #8]
}
 800900e:	bf00      	nop
 8009010:	bf00      	nop
 8009012:	e7fd      	b.n	8009010 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009018:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	2b00      	cmp	r3, #0
 8009026:	db04      	blt.n	8009032 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	6959      	ldr	r1, [r3, #20]
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	4613      	mov	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4a13      	ldr	r2, [pc, #76]	@ (8009090 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009042:	4413      	add	r3, r2
 8009044:	4299      	cmp	r1, r3
 8009046:	d11c      	bne.n	8009082 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	3304      	adds	r3, #4
 800904c:	4618      	mov	r0, r3
 800904e:	f7fd fecd 	bl	8006dec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009056:	4b0f      	ldr	r3, [pc, #60]	@ (8009094 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	429a      	cmp	r2, r3
 800905c:	d903      	bls.n	8009066 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009062:	4a0c      	ldr	r2, [pc, #48]	@ (8009094 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4a07      	ldr	r2, [pc, #28]	@ (8009090 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009074:	441a      	add	r2, r3
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	3304      	adds	r3, #4
 800907a:	4619      	mov	r1, r3
 800907c:	4610      	mov	r0, r2
 800907e:	f7fd fe58 	bl	8006d32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009082:	bf00      	nop
 8009084:	3720      	adds	r7, #32
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20000c8c 	.word	0x20000c8c
 8009090:	20000c90 	.word	0x20000c90
 8009094:	20001168 	.word	0x20001168

08009098 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009098:	b480      	push	{r7}
 800909a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800909c:	4b07      	ldr	r3, [pc, #28]	@ (80090bc <pvTaskIncrementMutexHeldCount+0x24>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d004      	beq.n	80090ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80090a4:	4b05      	ldr	r3, [pc, #20]	@ (80090bc <pvTaskIncrementMutexHeldCount+0x24>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090aa:	3201      	adds	r2, #1
 80090ac:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80090ae:	4b03      	ldr	r3, [pc, #12]	@ (80090bc <pvTaskIncrementMutexHeldCount+0x24>)
 80090b0:	681b      	ldr	r3, [r3, #0]
	}
 80090b2:	4618      	mov	r0, r3
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	20000c8c 	.word	0x20000c8c

080090c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090ca:	4b21      	ldr	r3, [pc, #132]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x90>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090d0:	4b20      	ldr	r3, [pc, #128]	@ (8009154 <prvAddCurrentTaskToDelayedList+0x94>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3304      	adds	r3, #4
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fd fe88 	bl	8006dec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e2:	d10a      	bne.n	80090fa <prvAddCurrentTaskToDelayedList+0x3a>
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d007      	beq.n	80090fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009154 <prvAddCurrentTaskToDelayedList+0x94>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3304      	adds	r3, #4
 80090f0:	4619      	mov	r1, r3
 80090f2:	4819      	ldr	r0, [pc, #100]	@ (8009158 <prvAddCurrentTaskToDelayedList+0x98>)
 80090f4:	f7fd fe1d 	bl	8006d32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090f8:	e026      	b.n	8009148 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4413      	add	r3, r2
 8009100:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009102:	4b14      	ldr	r3, [pc, #80]	@ (8009154 <prvAddCurrentTaskToDelayedList+0x94>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	429a      	cmp	r2, r3
 8009110:	d209      	bcs.n	8009126 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009112:	4b12      	ldr	r3, [pc, #72]	@ (800915c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	4b0f      	ldr	r3, [pc, #60]	@ (8009154 <prvAddCurrentTaskToDelayedList+0x94>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3304      	adds	r3, #4
 800911c:	4619      	mov	r1, r3
 800911e:	4610      	mov	r0, r2
 8009120:	f7fd fe2b 	bl	8006d7a <vListInsert>
}
 8009124:	e010      	b.n	8009148 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009126:	4b0e      	ldr	r3, [pc, #56]	@ (8009160 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	4b0a      	ldr	r3, [pc, #40]	@ (8009154 <prvAddCurrentTaskToDelayedList+0x94>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3304      	adds	r3, #4
 8009130:	4619      	mov	r1, r3
 8009132:	4610      	mov	r0, r2
 8009134:	f7fd fe21 	bl	8006d7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009138:	4b0a      	ldr	r3, [pc, #40]	@ (8009164 <prvAddCurrentTaskToDelayedList+0xa4>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	429a      	cmp	r2, r3
 8009140:	d202      	bcs.n	8009148 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009142:	4a08      	ldr	r2, [pc, #32]	@ (8009164 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	6013      	str	r3, [r2, #0]
}
 8009148:	bf00      	nop
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20001164 	.word	0x20001164
 8009154:	20000c8c 	.word	0x20000c8c
 8009158:	2000114c 	.word	0x2000114c
 800915c:	2000111c 	.word	0x2000111c
 8009160:	20001118 	.word	0x20001118
 8009164:	20001180 	.word	0x20001180

08009168 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08a      	sub	sp, #40	@ 0x28
 800916c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800916e:	2300      	movs	r3, #0
 8009170:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009172:	f000 fb13 	bl	800979c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009176:	4b1d      	ldr	r3, [pc, #116]	@ (80091ec <xTimerCreateTimerTask+0x84>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d021      	beq.n	80091c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009182:	2300      	movs	r3, #0
 8009184:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009186:	1d3a      	adds	r2, r7, #4
 8009188:	f107 0108 	add.w	r1, r7, #8
 800918c:	f107 030c 	add.w	r3, r7, #12
 8009190:	4618      	mov	r0, r3
 8009192:	f7fd fd87 	bl	8006ca4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	9202      	str	r2, [sp, #8]
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	2302      	movs	r3, #2
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	2300      	movs	r3, #0
 80091a6:	460a      	mov	r2, r1
 80091a8:	4911      	ldr	r1, [pc, #68]	@ (80091f0 <xTimerCreateTimerTask+0x88>)
 80091aa:	4812      	ldr	r0, [pc, #72]	@ (80091f4 <xTimerCreateTimerTask+0x8c>)
 80091ac:	f7fe fe74 	bl	8007e98 <xTaskCreateStatic>
 80091b0:	4603      	mov	r3, r0
 80091b2:	4a11      	ldr	r2, [pc, #68]	@ (80091f8 <xTimerCreateTimerTask+0x90>)
 80091b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091b6:	4b10      	ldr	r3, [pc, #64]	@ (80091f8 <xTimerCreateTimerTask+0x90>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091be:	2301      	movs	r3, #1
 80091c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10b      	bne.n	80091e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	613b      	str	r3, [r7, #16]
}
 80091da:	bf00      	nop
 80091dc:	bf00      	nop
 80091de:	e7fd      	b.n	80091dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80091e0:	697b      	ldr	r3, [r7, #20]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	200011bc 	.word	0x200011bc
 80091f0:	08011b58 	.word	0x08011b58
 80091f4:	08009335 	.word	0x08009335
 80091f8:	200011c0 	.word	0x200011c0

080091fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	@ 0x28
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
 8009208:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800920a:	2300      	movs	r3, #0
 800920c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10b      	bne.n	800922c <xTimerGenericCommand+0x30>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	623b      	str	r3, [r7, #32]
}
 8009226:	bf00      	nop
 8009228:	bf00      	nop
 800922a:	e7fd      	b.n	8009228 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800922c:	4b19      	ldr	r3, [pc, #100]	@ (8009294 <xTimerGenericCommand+0x98>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d02a      	beq.n	800928a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b05      	cmp	r3, #5
 8009244:	dc18      	bgt.n	8009278 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009246:	f7ff fdad 	bl	8008da4 <xTaskGetSchedulerState>
 800924a:	4603      	mov	r3, r0
 800924c:	2b02      	cmp	r3, #2
 800924e:	d109      	bne.n	8009264 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009250:	4b10      	ldr	r3, [pc, #64]	@ (8009294 <xTimerGenericCommand+0x98>)
 8009252:	6818      	ldr	r0, [r3, #0]
 8009254:	f107 0110 	add.w	r1, r7, #16
 8009258:	2300      	movs	r3, #0
 800925a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800925c:	f7fd ffa4 	bl	80071a8 <xQueueGenericSend>
 8009260:	6278      	str	r0, [r7, #36]	@ 0x24
 8009262:	e012      	b.n	800928a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009264:	4b0b      	ldr	r3, [pc, #44]	@ (8009294 <xTimerGenericCommand+0x98>)
 8009266:	6818      	ldr	r0, [r3, #0]
 8009268:	f107 0110 	add.w	r1, r7, #16
 800926c:	2300      	movs	r3, #0
 800926e:	2200      	movs	r2, #0
 8009270:	f7fd ff9a 	bl	80071a8 <xQueueGenericSend>
 8009274:	6278      	str	r0, [r7, #36]	@ 0x24
 8009276:	e008      	b.n	800928a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009278:	4b06      	ldr	r3, [pc, #24]	@ (8009294 <xTimerGenericCommand+0x98>)
 800927a:	6818      	ldr	r0, [r3, #0]
 800927c:	f107 0110 	add.w	r1, r7, #16
 8009280:	2300      	movs	r3, #0
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	f7fe f892 	bl	80073ac <xQueueGenericSendFromISR>
 8009288:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800928c:	4618      	mov	r0, r3
 800928e:	3728      	adds	r7, #40	@ 0x28
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	200011bc 	.word	0x200011bc

08009298 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b088      	sub	sp, #32
 800929c:	af02      	add	r7, sp, #8
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a2:	4b23      	ldr	r3, [pc, #140]	@ (8009330 <prvProcessExpiredTimer+0x98>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	3304      	adds	r3, #4
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fd fd9b 	bl	8006dec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d023      	beq.n	800930c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	699a      	ldr	r2, [r3, #24]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	18d1      	adds	r1, r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	6978      	ldr	r0, [r7, #20]
 80092d2:	f000 f8d5 	bl	8009480 <prvInsertTimerInActiveList>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d020      	beq.n	800931e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092dc:	2300      	movs	r3, #0
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	2300      	movs	r3, #0
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	2100      	movs	r1, #0
 80092e6:	6978      	ldr	r0, [r7, #20]
 80092e8:	f7ff ff88 	bl	80091fc <xTimerGenericCommand>
 80092ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d114      	bne.n	800931e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	60fb      	str	r3, [r7, #12]
}
 8009306:	bf00      	nop
 8009308:	bf00      	nop
 800930a:	e7fd      	b.n	8009308 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009312:	f023 0301 	bic.w	r3, r3, #1
 8009316:	b2da      	uxtb	r2, r3
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	6978      	ldr	r0, [r7, #20]
 8009324:	4798      	blx	r3
}
 8009326:	bf00      	nop
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	200011b4 	.word	0x200011b4

08009334 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800933c:	f107 0308 	add.w	r3, r7, #8
 8009340:	4618      	mov	r0, r3
 8009342:	f000 f859 	bl	80093f8 <prvGetNextExpireTime>
 8009346:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	4619      	mov	r1, r3
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 f805 	bl	800935c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009352:	f000 f8d7 	bl	8009504 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009356:	bf00      	nop
 8009358:	e7f0      	b.n	800933c <prvTimerTask+0x8>
	...

0800935c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009366:	f7ff f937 	bl	80085d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800936a:	f107 0308 	add.w	r3, r7, #8
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f866 	bl	8009440 <prvSampleTimeNow>
 8009374:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d130      	bne.n	80093de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10a      	bne.n	8009398 <prvProcessTimerOrBlockTask+0x3c>
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	429a      	cmp	r2, r3
 8009388:	d806      	bhi.n	8009398 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800938a:	f7ff f933 	bl	80085f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800938e:	68f9      	ldr	r1, [r7, #12]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff ff81 	bl	8009298 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009396:	e024      	b.n	80093e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d008      	beq.n	80093b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800939e:	4b13      	ldr	r3, [pc, #76]	@ (80093ec <prvProcessTimerOrBlockTask+0x90>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <prvProcessTimerOrBlockTask+0x50>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <prvProcessTimerOrBlockTask+0x52>
 80093ac:	2300      	movs	r3, #0
 80093ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093b0:	4b0f      	ldr	r3, [pc, #60]	@ (80093f0 <prvProcessTimerOrBlockTask+0x94>)
 80093b2:	6818      	ldr	r0, [r3, #0]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	4619      	mov	r1, r3
 80093be:	f7fe fd37 	bl	8007e30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093c2:	f7ff f917 	bl	80085f4 <xTaskResumeAll>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10a      	bne.n	80093e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093cc:	4b09      	ldr	r3, [pc, #36]	@ (80093f4 <prvProcessTimerOrBlockTask+0x98>)
 80093ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	f3bf 8f6f 	isb	sy
}
 80093dc:	e001      	b.n	80093e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093de:	f7ff f909 	bl	80085f4 <xTaskResumeAll>
}
 80093e2:	bf00      	nop
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	200011b8 	.word	0x200011b8
 80093f0:	200011bc 	.word	0x200011bc
 80093f4:	e000ed04 	.word	0xe000ed04

080093f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009400:	4b0e      	ldr	r3, [pc, #56]	@ (800943c <prvGetNextExpireTime+0x44>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <prvGetNextExpireTime+0x16>
 800940a:	2201      	movs	r2, #1
 800940c:	e000      	b.n	8009410 <prvGetNextExpireTime+0x18>
 800940e:	2200      	movs	r2, #0
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d105      	bne.n	8009428 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800941c:	4b07      	ldr	r3, [pc, #28]	@ (800943c <prvGetNextExpireTime+0x44>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	60fb      	str	r3, [r7, #12]
 8009426:	e001      	b.n	800942c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009428:	2300      	movs	r3, #0
 800942a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800942c:	68fb      	ldr	r3, [r7, #12]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	200011b4 	.word	0x200011b4

08009440 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009448:	f7ff f972 	bl	8008730 <xTaskGetTickCount>
 800944c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800944e:	4b0b      	ldr	r3, [pc, #44]	@ (800947c <prvSampleTimeNow+0x3c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	429a      	cmp	r2, r3
 8009456:	d205      	bcs.n	8009464 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009458:	f000 f93a 	bl	80096d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	e002      	b.n	800946a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800946a:	4a04      	ldr	r2, [pc, #16]	@ (800947c <prvSampleTimeNow+0x3c>)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009470:	68fb      	ldr	r3, [r7, #12]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	200011c4 	.word	0x200011c4

08009480 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d812      	bhi.n	80094cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	1ad2      	subs	r2, r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d302      	bcc.n	80094ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094b4:	2301      	movs	r3, #1
 80094b6:	617b      	str	r3, [r7, #20]
 80094b8:	e01b      	b.n	80094f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094ba:	4b10      	ldr	r3, [pc, #64]	@ (80094fc <prvInsertTimerInActiveList+0x7c>)
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3304      	adds	r3, #4
 80094c2:	4619      	mov	r1, r3
 80094c4:	4610      	mov	r0, r2
 80094c6:	f7fd fc58 	bl	8006d7a <vListInsert>
 80094ca:	e012      	b.n	80094f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d206      	bcs.n	80094e2 <prvInsertTimerInActiveList+0x62>
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d302      	bcc.n	80094e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094dc:	2301      	movs	r3, #1
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	e007      	b.n	80094f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094e2:	4b07      	ldr	r3, [pc, #28]	@ (8009500 <prvInsertTimerInActiveList+0x80>)
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3304      	adds	r3, #4
 80094ea:	4619      	mov	r1, r3
 80094ec:	4610      	mov	r0, r2
 80094ee:	f7fd fc44 	bl	8006d7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094f2:	697b      	ldr	r3, [r7, #20]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	200011b8 	.word	0x200011b8
 8009500:	200011b4 	.word	0x200011b4

08009504 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08e      	sub	sp, #56	@ 0x38
 8009508:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800950a:	e0ce      	b.n	80096aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	da19      	bge.n	8009546 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009512:	1d3b      	adds	r3, r7, #4
 8009514:	3304      	adds	r3, #4
 8009516:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10b      	bne.n	8009536 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	61fb      	str	r3, [r7, #28]
}
 8009530:	bf00      	nop
 8009532:	bf00      	nop
 8009534:	e7fd      	b.n	8009532 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800953c:	6850      	ldr	r0, [r2, #4]
 800953e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009540:	6892      	ldr	r2, [r2, #8]
 8009542:	4611      	mov	r1, r2
 8009544:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f2c0 80ae 	blt.w	80096aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d004      	beq.n	8009564 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800955a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955c:	3304      	adds	r3, #4
 800955e:	4618      	mov	r0, r3
 8009560:	f7fd fc44 	bl	8006dec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009564:	463b      	mov	r3, r7
 8009566:	4618      	mov	r0, r3
 8009568:	f7ff ff6a 	bl	8009440 <prvSampleTimeNow>
 800956c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b09      	cmp	r3, #9
 8009572:	f200 8097 	bhi.w	80096a4 <prvProcessReceivedCommands+0x1a0>
 8009576:	a201      	add	r2, pc, #4	@ (adr r2, 800957c <prvProcessReceivedCommands+0x78>)
 8009578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957c:	080095a5 	.word	0x080095a5
 8009580:	080095a5 	.word	0x080095a5
 8009584:	080095a5 	.word	0x080095a5
 8009588:	0800961b 	.word	0x0800961b
 800958c:	0800962f 	.word	0x0800962f
 8009590:	0800967b 	.word	0x0800967b
 8009594:	080095a5 	.word	0x080095a5
 8009598:	080095a5 	.word	0x080095a5
 800959c:	0800961b 	.word	0x0800961b
 80095a0:	0800962f 	.word	0x0800962f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095aa:	f043 0301 	orr.w	r3, r3, #1
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	18d1      	adds	r1, r2, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095c4:	f7ff ff5c 	bl	8009480 <prvInsertTimerInActiveList>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d06c      	beq.n	80096a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095dc:	f003 0304 	and.w	r3, r3, #4
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d061      	beq.n	80096a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	441a      	add	r2, r3
 80095ec:	2300      	movs	r3, #0
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	2300      	movs	r3, #0
 80095f2:	2100      	movs	r1, #0
 80095f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095f6:	f7ff fe01 	bl	80091fc <xTimerGenericCommand>
 80095fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d152      	bne.n	80096a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	61bb      	str	r3, [r7, #24]
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop
 8009618:	e7fd      	b.n	8009616 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009620:	f023 0301 	bic.w	r3, r3, #1
 8009624:	b2da      	uxtb	r2, r3
 8009626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009628:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800962c:	e03d      	b.n	80096aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800962e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009634:	f043 0301 	orr.w	r3, r3, #1
 8009638:	b2da      	uxtb	r2, r3
 800963a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009644:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10b      	bne.n	8009666 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	617b      	str	r3, [r7, #20]
}
 8009660:	bf00      	nop
 8009662:	bf00      	nop
 8009664:	e7fd      	b.n	8009662 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009668:	699a      	ldr	r2, [r3, #24]
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	18d1      	adds	r1, r2, r3
 800966e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009674:	f7ff ff04 	bl	8009480 <prvInsertTimerInActiveList>
					break;
 8009678:	e017      	b.n	80096aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800967a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	2b00      	cmp	r3, #0
 8009686:	d103      	bne.n	8009690 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009688:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800968a:	f000 fbe5 	bl	8009e58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800968e:	e00c      	b.n	80096aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009692:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009696:	f023 0301 	bic.w	r3, r3, #1
 800969a:	b2da      	uxtb	r2, r3
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80096a2:	e002      	b.n	80096aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80096a4:	bf00      	nop
 80096a6:	e000      	b.n	80096aa <prvProcessReceivedCommands+0x1a6>
					break;
 80096a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096aa:	4b08      	ldr	r3, [pc, #32]	@ (80096cc <prvProcessReceivedCommands+0x1c8>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	1d39      	adds	r1, r7, #4
 80096b0:	2200      	movs	r2, #0
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fd ffa8 	bl	8007608 <xQueueReceive>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f47f af26 	bne.w	800950c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80096c0:	bf00      	nop
 80096c2:	bf00      	nop
 80096c4:	3730      	adds	r7, #48	@ 0x30
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	200011bc 	.word	0x200011bc

080096d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096d6:	e049      	b.n	800976c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096d8:	4b2e      	ldr	r3, [pc, #184]	@ (8009794 <prvSwitchTimerLists+0xc4>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e2:	4b2c      	ldr	r3, [pc, #176]	@ (8009794 <prvSwitchTimerLists+0xc4>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3304      	adds	r3, #4
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fd fb7b 	bl	8006dec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009704:	f003 0304 	and.w	r3, r3, #4
 8009708:	2b00      	cmp	r3, #0
 800970a:	d02f      	beq.n	800976c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	4413      	add	r3, r2
 8009714:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	429a      	cmp	r2, r3
 800971c:	d90e      	bls.n	800973c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800972a:	4b1a      	ldr	r3, [pc, #104]	@ (8009794 <prvSwitchTimerLists+0xc4>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3304      	adds	r3, #4
 8009732:	4619      	mov	r1, r3
 8009734:	4610      	mov	r0, r2
 8009736:	f7fd fb20 	bl	8006d7a <vListInsert>
 800973a:	e017      	b.n	800976c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800973c:	2300      	movs	r3, #0
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	2300      	movs	r3, #0
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	2100      	movs	r1, #0
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7ff fd58 	bl	80091fc <xTimerGenericCommand>
 800974c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10b      	bne.n	800976c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	603b      	str	r3, [r7, #0]
}
 8009766:	bf00      	nop
 8009768:	bf00      	nop
 800976a:	e7fd      	b.n	8009768 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800976c:	4b09      	ldr	r3, [pc, #36]	@ (8009794 <prvSwitchTimerLists+0xc4>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1b0      	bne.n	80096d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009776:	4b07      	ldr	r3, [pc, #28]	@ (8009794 <prvSwitchTimerLists+0xc4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800977c:	4b06      	ldr	r3, [pc, #24]	@ (8009798 <prvSwitchTimerLists+0xc8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a04      	ldr	r2, [pc, #16]	@ (8009794 <prvSwitchTimerLists+0xc4>)
 8009782:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009784:	4a04      	ldr	r2, [pc, #16]	@ (8009798 <prvSwitchTimerLists+0xc8>)
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	6013      	str	r3, [r2, #0]
}
 800978a:	bf00      	nop
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	200011b4 	.word	0x200011b4
 8009798:	200011b8 	.word	0x200011b8

0800979c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097a2:	f000 f969 	bl	8009a78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097a6:	4b15      	ldr	r3, [pc, #84]	@ (80097fc <prvCheckForValidListAndQueue+0x60>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d120      	bne.n	80097f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097ae:	4814      	ldr	r0, [pc, #80]	@ (8009800 <prvCheckForValidListAndQueue+0x64>)
 80097b0:	f7fd fa92 	bl	8006cd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097b4:	4813      	ldr	r0, [pc, #76]	@ (8009804 <prvCheckForValidListAndQueue+0x68>)
 80097b6:	f7fd fa8f 	bl	8006cd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097ba:	4b13      	ldr	r3, [pc, #76]	@ (8009808 <prvCheckForValidListAndQueue+0x6c>)
 80097bc:	4a10      	ldr	r2, [pc, #64]	@ (8009800 <prvCheckForValidListAndQueue+0x64>)
 80097be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097c0:	4b12      	ldr	r3, [pc, #72]	@ (800980c <prvCheckForValidListAndQueue+0x70>)
 80097c2:	4a10      	ldr	r2, [pc, #64]	@ (8009804 <prvCheckForValidListAndQueue+0x68>)
 80097c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097c6:	2300      	movs	r3, #0
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	4b11      	ldr	r3, [pc, #68]	@ (8009810 <prvCheckForValidListAndQueue+0x74>)
 80097cc:	4a11      	ldr	r2, [pc, #68]	@ (8009814 <prvCheckForValidListAndQueue+0x78>)
 80097ce:	2110      	movs	r1, #16
 80097d0:	200a      	movs	r0, #10
 80097d2:	f7fd fb9f 	bl	8006f14 <xQueueGenericCreateStatic>
 80097d6:	4603      	mov	r3, r0
 80097d8:	4a08      	ldr	r2, [pc, #32]	@ (80097fc <prvCheckForValidListAndQueue+0x60>)
 80097da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097dc:	4b07      	ldr	r3, [pc, #28]	@ (80097fc <prvCheckForValidListAndQueue+0x60>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d005      	beq.n	80097f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097e4:	4b05      	ldr	r3, [pc, #20]	@ (80097fc <prvCheckForValidListAndQueue+0x60>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	490b      	ldr	r1, [pc, #44]	@ (8009818 <prvCheckForValidListAndQueue+0x7c>)
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe facc 	bl	8007d88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097f0:	f000 f974 	bl	8009adc <vPortExitCritical>
}
 80097f4:	bf00      	nop
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	200011bc 	.word	0x200011bc
 8009800:	2000118c 	.word	0x2000118c
 8009804:	200011a0 	.word	0x200011a0
 8009808:	200011b4 	.word	0x200011b4
 800980c:	200011b8 	.word	0x200011b8
 8009810:	20001268 	.word	0x20001268
 8009814:	200011c8 	.word	0x200011c8
 8009818:	08011b60 	.word	0x08011b60

0800981c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	3b04      	subs	r3, #4
 800982c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3b04      	subs	r3, #4
 800983a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	f023 0201 	bic.w	r2, r3, #1
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3b04      	subs	r3, #4
 800984a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800984c:	4a0c      	ldr	r2, [pc, #48]	@ (8009880 <pxPortInitialiseStack+0x64>)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3b14      	subs	r3, #20
 8009856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3b04      	subs	r3, #4
 8009862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f06f 0202 	mvn.w	r2, #2
 800986a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3b20      	subs	r3, #32
 8009870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009872:	68fb      	ldr	r3, [r7, #12]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	08009885 	.word	0x08009885

08009884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800988a:	2300      	movs	r3, #0
 800988c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800988e:	4b13      	ldr	r3, [pc, #76]	@ (80098dc <prvTaskExitError+0x58>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009896:	d00b      	beq.n	80098b0 <prvTaskExitError+0x2c>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	60fb      	str	r3, [r7, #12]
}
 80098aa:	bf00      	nop
 80098ac:	bf00      	nop
 80098ae:	e7fd      	b.n	80098ac <prvTaskExitError+0x28>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	60bb      	str	r3, [r7, #8]
}
 80098c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098c4:	bf00      	nop
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d0fc      	beq.n	80098c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098cc:	bf00      	nop
 80098ce:	bf00      	nop
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	2000000c 	.word	0x2000000c

080098e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098e0:	4b07      	ldr	r3, [pc, #28]	@ (8009900 <pxCurrentTCBConst2>)
 80098e2:	6819      	ldr	r1, [r3, #0]
 80098e4:	6808      	ldr	r0, [r1, #0]
 80098e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	f380 8809 	msr	PSP, r0
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f04f 0000 	mov.w	r0, #0
 80098f6:	f380 8811 	msr	BASEPRI, r0
 80098fa:	4770      	bx	lr
 80098fc:	f3af 8000 	nop.w

08009900 <pxCurrentTCBConst2>:
 8009900:	20000c8c 	.word	0x20000c8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop

08009908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009908:	4808      	ldr	r0, [pc, #32]	@ (800992c <prvPortStartFirstTask+0x24>)
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	6800      	ldr	r0, [r0, #0]
 800990e:	f380 8808 	msr	MSP, r0
 8009912:	f04f 0000 	mov.w	r0, #0
 8009916:	f380 8814 	msr	CONTROL, r0
 800991a:	b662      	cpsie	i
 800991c:	b661      	cpsie	f
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	df00      	svc	0
 8009928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800992a:	bf00      	nop
 800992c:	e000ed08 	.word	0xe000ed08

08009930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009936:	4b47      	ldr	r3, [pc, #284]	@ (8009a54 <xPortStartScheduler+0x124>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a47      	ldr	r2, [pc, #284]	@ (8009a58 <xPortStartScheduler+0x128>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d10b      	bne.n	8009958 <xPortStartScheduler+0x28>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	613b      	str	r3, [r7, #16]
}
 8009952:	bf00      	nop
 8009954:	bf00      	nop
 8009956:	e7fd      	b.n	8009954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009958:	4b3e      	ldr	r3, [pc, #248]	@ (8009a54 <xPortStartScheduler+0x124>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a3f      	ldr	r2, [pc, #252]	@ (8009a5c <xPortStartScheduler+0x12c>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d10b      	bne.n	800997a <xPortStartScheduler+0x4a>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	60fb      	str	r3, [r7, #12]
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop
 8009978:	e7fd      	b.n	8009976 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800997a:	4b39      	ldr	r3, [pc, #228]	@ (8009a60 <xPortStartScheduler+0x130>)
 800997c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	22ff      	movs	r2, #255	@ 0xff
 800998a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	b2db      	uxtb	r3, r3
 8009992:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	b2db      	uxtb	r3, r3
 8009998:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800999c:	b2da      	uxtb	r2, r3
 800999e:	4b31      	ldr	r3, [pc, #196]	@ (8009a64 <xPortStartScheduler+0x134>)
 80099a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099a2:	4b31      	ldr	r3, [pc, #196]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099a4:	2207      	movs	r2, #7
 80099a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099a8:	e009      	b.n	80099be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80099aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099b4:	78fb      	ldrb	r3, [r7, #3]
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099be:	78fb      	ldrb	r3, [r7, #3]
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099c6:	2b80      	cmp	r3, #128	@ 0x80
 80099c8:	d0ef      	beq.n	80099aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099ca:	4b27      	ldr	r3, [pc, #156]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f1c3 0307 	rsb	r3, r3, #7
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d00b      	beq.n	80099ee <xPortStartScheduler+0xbe>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	60bb      	str	r3, [r7, #8]
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	e7fd      	b.n	80099ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	021b      	lsls	r3, r3, #8
 80099f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a00:	4a19      	ldr	r2, [pc, #100]	@ (8009a68 <xPortStartScheduler+0x138>)
 8009a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a0c:	4b17      	ldr	r3, [pc, #92]	@ (8009a6c <xPortStartScheduler+0x13c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a16      	ldr	r2, [pc, #88]	@ (8009a6c <xPortStartScheduler+0x13c>)
 8009a12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a18:	4b14      	ldr	r3, [pc, #80]	@ (8009a6c <xPortStartScheduler+0x13c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a13      	ldr	r2, [pc, #76]	@ (8009a6c <xPortStartScheduler+0x13c>)
 8009a1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a24:	f000 f8da 	bl	8009bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a28:	4b11      	ldr	r3, [pc, #68]	@ (8009a70 <xPortStartScheduler+0x140>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a2e:	f000 f8f9 	bl	8009c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a32:	4b10      	ldr	r3, [pc, #64]	@ (8009a74 <xPortStartScheduler+0x144>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a0f      	ldr	r2, [pc, #60]	@ (8009a74 <xPortStartScheduler+0x144>)
 8009a38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a3e:	f7ff ff63 	bl	8009908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a42:	f7fe ff3f 	bl	80088c4 <vTaskSwitchContext>
	prvTaskExitError();
 8009a46:	f7ff ff1d 	bl	8009884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	e000ed00 	.word	0xe000ed00
 8009a58:	410fc271 	.word	0x410fc271
 8009a5c:	410fc270 	.word	0x410fc270
 8009a60:	e000e400 	.word	0xe000e400
 8009a64:	200012b8 	.word	0x200012b8
 8009a68:	200012bc 	.word	0x200012bc
 8009a6c:	e000ed20 	.word	0xe000ed20
 8009a70:	2000000c 	.word	0x2000000c
 8009a74:	e000ef34 	.word	0xe000ef34

08009a78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	607b      	str	r3, [r7, #4]
}
 8009a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a92:	4b10      	ldr	r3, [pc, #64]	@ (8009ad4 <vPortEnterCritical+0x5c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3301      	adds	r3, #1
 8009a98:	4a0e      	ldr	r2, [pc, #56]	@ (8009ad4 <vPortEnterCritical+0x5c>)
 8009a9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ad4 <vPortEnterCritical+0x5c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d110      	bne.n	8009ac6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad8 <vPortEnterCritical+0x60>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00b      	beq.n	8009ac6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	603b      	str	r3, [r7, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	e7fd      	b.n	8009ac2 <vPortEnterCritical+0x4a>
	}
}
 8009ac6:	bf00      	nop
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	2000000c 	.word	0x2000000c
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ae2:	4b12      	ldr	r3, [pc, #72]	@ (8009b2c <vPortExitCritical+0x50>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10b      	bne.n	8009b02 <vPortExitCritical+0x26>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	607b      	str	r3, [r7, #4]
}
 8009afc:	bf00      	nop
 8009afe:	bf00      	nop
 8009b00:	e7fd      	b.n	8009afe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b02:	4b0a      	ldr	r3, [pc, #40]	@ (8009b2c <vPortExitCritical+0x50>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	4a08      	ldr	r2, [pc, #32]	@ (8009b2c <vPortExitCritical+0x50>)
 8009b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b0c:	4b07      	ldr	r3, [pc, #28]	@ (8009b2c <vPortExitCritical+0x50>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d105      	bne.n	8009b20 <vPortExitCritical+0x44>
 8009b14:	2300      	movs	r3, #0
 8009b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	f383 8811 	msr	BASEPRI, r3
}
 8009b1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	2000000c 	.word	0x2000000c

08009b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b30:	f3ef 8009 	mrs	r0, PSP
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	4b15      	ldr	r3, [pc, #84]	@ (8009b90 <pxCurrentTCBConst>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	f01e 0f10 	tst.w	lr, #16
 8009b40:	bf08      	it	eq
 8009b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	6010      	str	r0, [r2, #0]
 8009b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009b54:	f380 8811 	msr	BASEPRI, r0
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f7fe feb0 	bl	80088c4 <vTaskSwitchContext>
 8009b64:	f04f 0000 	mov.w	r0, #0
 8009b68:	f380 8811 	msr	BASEPRI, r0
 8009b6c:	bc09      	pop	{r0, r3}
 8009b6e:	6819      	ldr	r1, [r3, #0]
 8009b70:	6808      	ldr	r0, [r1, #0]
 8009b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b76:	f01e 0f10 	tst.w	lr, #16
 8009b7a:	bf08      	it	eq
 8009b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b80:	f380 8809 	msr	PSP, r0
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	f3af 8000 	nop.w

08009b90 <pxCurrentTCBConst>:
 8009b90:	20000c8c 	.word	0x20000c8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop

08009b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	607b      	str	r3, [r7, #4]
}
 8009bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009bb2:	f7fe fdcd 	bl	8008750 <xTaskIncrementTick>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bbc:	4b06      	ldr	r3, [pc, #24]	@ (8009bd8 <xPortSysTickHandler+0x40>)
 8009bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	f383 8811 	msr	BASEPRI, r3
}
 8009bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	e000ed04 	.word	0xe000ed04

08009bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009be0:	4b0b      	ldr	r3, [pc, #44]	@ (8009c10 <vPortSetupTimerInterrupt+0x34>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009be6:	4b0b      	ldr	r3, [pc, #44]	@ (8009c14 <vPortSetupTimerInterrupt+0x38>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bec:	4b0a      	ldr	r3, [pc, #40]	@ (8009c18 <vPortSetupTimerInterrupt+0x3c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8009c1c <vPortSetupTimerInterrupt+0x40>)
 8009bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf6:	099b      	lsrs	r3, r3, #6
 8009bf8:	4a09      	ldr	r2, [pc, #36]	@ (8009c20 <vPortSetupTimerInterrupt+0x44>)
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bfe:	4b04      	ldr	r3, [pc, #16]	@ (8009c10 <vPortSetupTimerInterrupt+0x34>)
 8009c00:	2207      	movs	r2, #7
 8009c02:	601a      	str	r2, [r3, #0]
}
 8009c04:	bf00      	nop
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	e000e010 	.word	0xe000e010
 8009c14:	e000e018 	.word	0xe000e018
 8009c18:	20000000 	.word	0x20000000
 8009c1c:	10624dd3 	.word	0x10624dd3
 8009c20:	e000e014 	.word	0xe000e014

08009c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009c34 <vPortEnableVFP+0x10>
 8009c28:	6801      	ldr	r1, [r0, #0]
 8009c2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009c2e:	6001      	str	r1, [r0, #0]
 8009c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c32:	bf00      	nop
 8009c34:	e000ed88 	.word	0xe000ed88

08009c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c3e:	f3ef 8305 	mrs	r3, IPSR
 8009c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b0f      	cmp	r3, #15
 8009c48:	d915      	bls.n	8009c76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c4a:	4a18      	ldr	r2, [pc, #96]	@ (8009cac <vPortValidateInterruptPriority+0x74>)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c54:	4b16      	ldr	r3, [pc, #88]	@ (8009cb0 <vPortValidateInterruptPriority+0x78>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	7afa      	ldrb	r2, [r7, #11]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d20b      	bcs.n	8009c76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	607b      	str	r3, [r7, #4]
}
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	e7fd      	b.n	8009c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c76:	4b0f      	ldr	r3, [pc, #60]	@ (8009cb4 <vPortValidateInterruptPriority+0x7c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009cb8 <vPortValidateInterruptPriority+0x80>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d90b      	bls.n	8009c9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	603b      	str	r3, [r7, #0]
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <vPortValidateInterruptPriority+0x62>
	}
 8009c9e:	bf00      	nop
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	e000e3f0 	.word	0xe000e3f0
 8009cb0:	200012b8 	.word	0x200012b8
 8009cb4:	e000ed0c 	.word	0xe000ed0c
 8009cb8:	200012bc 	.word	0x200012bc

08009cbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08a      	sub	sp, #40	@ 0x28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009cc8:	f7fe fc86 	bl	80085d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8009e40 <pvPortMalloc+0x184>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009cd4:	f000 f924 	bl	8009f20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8009e44 <pvPortMalloc+0x188>)
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4013      	ands	r3, r2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f040 8095 	bne.w	8009e10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d01e      	beq.n	8009d2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009cec:	2208      	movs	r2, #8
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d015      	beq.n	8009d2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f023 0307 	bic.w	r3, r3, #7
 8009d04:	3308      	adds	r3, #8
 8009d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f003 0307 	and.w	r3, r3, #7
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00b      	beq.n	8009d2a <pvPortMalloc+0x6e>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	617b      	str	r3, [r7, #20]
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop
 8009d28:	e7fd      	b.n	8009d26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d06f      	beq.n	8009e10 <pvPortMalloc+0x154>
 8009d30:	4b45      	ldr	r3, [pc, #276]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d86a      	bhi.n	8009e10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d3a:	4b44      	ldr	r3, [pc, #272]	@ (8009e4c <pvPortMalloc+0x190>)
 8009d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d3e:	4b43      	ldr	r3, [pc, #268]	@ (8009e4c <pvPortMalloc+0x190>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d44:	e004      	b.n	8009d50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d903      	bls.n	8009d62 <pvPortMalloc+0xa6>
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1f1      	bne.n	8009d46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d62:	4b37      	ldr	r3, [pc, #220]	@ (8009e40 <pvPortMalloc+0x184>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d051      	beq.n	8009e10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2208      	movs	r2, #8
 8009d72:	4413      	add	r3, r2
 8009d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	1ad2      	subs	r2, r2, r3
 8009d86:	2308      	movs	r3, #8
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d920      	bls.n	8009dd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4413      	add	r3, r2
 8009d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	f003 0307 	and.w	r3, r3, #7
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00b      	beq.n	8009db8 <pvPortMalloc+0xfc>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
 8009db4:	bf00      	nop
 8009db6:	e7fd      	b.n	8009db4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	1ad2      	subs	r2, r2, r3
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009dca:	69b8      	ldr	r0, [r7, #24]
 8009dcc:	f000 f90a 	bl	8009fe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	4a1b      	ldr	r2, [pc, #108]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009dde:	4b1a      	ldr	r3, [pc, #104]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e50 <pvPortMalloc+0x194>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d203      	bcs.n	8009df2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009dea:	4b17      	ldr	r3, [pc, #92]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a18      	ldr	r2, [pc, #96]	@ (8009e50 <pvPortMalloc+0x194>)
 8009df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	4b13      	ldr	r3, [pc, #76]	@ (8009e44 <pvPortMalloc+0x188>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e06:	4b13      	ldr	r3, [pc, #76]	@ (8009e54 <pvPortMalloc+0x198>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	4a11      	ldr	r2, [pc, #68]	@ (8009e54 <pvPortMalloc+0x198>)
 8009e0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e10:	f7fe fbf0 	bl	80085f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	f003 0307 	and.w	r3, r3, #7
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <pvPortMalloc+0x17a>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	60fb      	str	r3, [r7, #12]
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	e7fd      	b.n	8009e32 <pvPortMalloc+0x176>
	return pvReturn;
 8009e36:	69fb      	ldr	r3, [r7, #28]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3728      	adds	r7, #40	@ 0x28
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20004ec8 	.word	0x20004ec8
 8009e44:	20004edc 	.word	0x20004edc
 8009e48:	20004ecc 	.word	0x20004ecc
 8009e4c:	20004ec0 	.word	0x20004ec0
 8009e50:	20004ed0 	.word	0x20004ed0
 8009e54:	20004ed4 	.word	0x20004ed4

08009e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d04f      	beq.n	8009f0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e6a:	2308      	movs	r3, #8
 8009e6c:	425b      	negs	r3, r3
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	4413      	add	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	4b25      	ldr	r3, [pc, #148]	@ (8009f14 <vPortFree+0xbc>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4013      	ands	r3, r2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10b      	bne.n	8009e9e <vPortFree+0x46>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	60fb      	str	r3, [r7, #12]
}
 8009e98:	bf00      	nop
 8009e9a:	bf00      	nop
 8009e9c:	e7fd      	b.n	8009e9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00b      	beq.n	8009ebe <vPortFree+0x66>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	60bb      	str	r3, [r7, #8]
}
 8009eb8:	bf00      	nop
 8009eba:	bf00      	nop
 8009ebc:	e7fd      	b.n	8009eba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	4b14      	ldr	r3, [pc, #80]	@ (8009f14 <vPortFree+0xbc>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01e      	beq.n	8009f0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d11a      	bne.n	8009f0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8009f14 <vPortFree+0xbc>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	43db      	mvns	r3, r3
 8009ede:	401a      	ands	r2, r3
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ee4:	f7fe fb78 	bl	80085d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	4b0a      	ldr	r3, [pc, #40]	@ (8009f18 <vPortFree+0xc0>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	4a09      	ldr	r2, [pc, #36]	@ (8009f18 <vPortFree+0xc0>)
 8009ef4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ef6:	6938      	ldr	r0, [r7, #16]
 8009ef8:	f000 f874 	bl	8009fe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009efc:	4b07      	ldr	r3, [pc, #28]	@ (8009f1c <vPortFree+0xc4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3301      	adds	r3, #1
 8009f02:	4a06      	ldr	r2, [pc, #24]	@ (8009f1c <vPortFree+0xc4>)
 8009f04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f06:	f7fe fb75 	bl	80085f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f0a:	bf00      	nop
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	20004edc 	.word	0x20004edc
 8009f18:	20004ecc 	.word	0x20004ecc
 8009f1c:	20004ed8 	.word	0x20004ed8

08009f20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009f2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f2c:	4b27      	ldr	r3, [pc, #156]	@ (8009fcc <prvHeapInit+0xac>)
 8009f2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00c      	beq.n	8009f54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3307      	adds	r3, #7
 8009f3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f023 0307 	bic.w	r3, r3, #7
 8009f46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009fcc <prvHeapInit+0xac>)
 8009f50:	4413      	add	r3, r2
 8009f52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f58:	4a1d      	ldr	r2, [pc, #116]	@ (8009fd0 <prvHeapInit+0xb0>)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8009fd0 <prvHeapInit+0xb0>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	4413      	add	r3, r2
 8009f6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f6c:	2208      	movs	r2, #8
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	1a9b      	subs	r3, r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0307 	bic.w	r3, r3, #7
 8009f7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4a15      	ldr	r2, [pc, #84]	@ (8009fd4 <prvHeapInit+0xb4>)
 8009f80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f82:	4b14      	ldr	r3, [pc, #80]	@ (8009fd4 <prvHeapInit+0xb4>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2200      	movs	r2, #0
 8009f88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f8a:	4b12      	ldr	r3, [pc, #72]	@ (8009fd4 <prvHeapInit+0xb4>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	1ad2      	subs	r2, r2, r3
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd4 <prvHeapInit+0xb4>)
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	4a0a      	ldr	r2, [pc, #40]	@ (8009fd8 <prvHeapInit+0xb8>)
 8009fae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	4a09      	ldr	r2, [pc, #36]	@ (8009fdc <prvHeapInit+0xbc>)
 8009fb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fb8:	4b09      	ldr	r3, [pc, #36]	@ (8009fe0 <prvHeapInit+0xc0>)
 8009fba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009fbe:	601a      	str	r2, [r3, #0]
}
 8009fc0:	bf00      	nop
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	200012c0 	.word	0x200012c0
 8009fd0:	20004ec0 	.word	0x20004ec0
 8009fd4:	20004ec8 	.word	0x20004ec8
 8009fd8:	20004ed0 	.word	0x20004ed0
 8009fdc:	20004ecc 	.word	0x20004ecc
 8009fe0:	20004edc 	.word	0x20004edc

08009fe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fec:	4b28      	ldr	r3, [pc, #160]	@ (800a090 <prvInsertBlockIntoFreeList+0xac>)
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	e002      	b.n	8009ff8 <prvInsertBlockIntoFreeList+0x14>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d8f7      	bhi.n	8009ff2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	4413      	add	r3, r2
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	429a      	cmp	r2, r3
 800a012:	d108      	bne.n	800a026 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	441a      	add	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	441a      	add	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d118      	bne.n	800a06c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	4b15      	ldr	r3, [pc, #84]	@ (800a094 <prvInsertBlockIntoFreeList+0xb0>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	429a      	cmp	r2, r3
 800a044:	d00d      	beq.n	800a062 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	441a      	add	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	e008      	b.n	800a074 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a062:	4b0c      	ldr	r3, [pc, #48]	@ (800a094 <prvInsertBlockIntoFreeList+0xb0>)
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	e003      	b.n	800a074 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d002      	beq.n	800a082 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a082:	bf00      	nop
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	20004ec0 	.word	0x20004ec0
 800a094:	20004ec8 	.word	0x20004ec8

0800a098 <_ZN13CommunicationC1Ev>:
 *      Author: OrioN
 */

#include "../Inc/GeneralHeaders.h"

Communication::Communication() {
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	4a08      	ldr	r2, [pc, #32]	@ (800a0c4 <_ZN13CommunicationC1Ev+0x2c>)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f001 fffe 	bl	800c0ac <_ZN12FlashManagerC1Ev>
	// TODO Auto-generated constructor stub
	FMI.BackupData();
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f002 f869 	bl	800c18c <_ZN12FlashManager10BackupDataEv>

}
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	08011c30 	.word	0x08011c30

0800a0c8 <_ZN13CommunicationD1Ev>:

Communication::~Communication() {
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	4a06      	ldr	r2, [pc, #24]	@ (800a0ec <_ZN13CommunicationD1Ev+0x24>)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f002 f836 	bl	800c14c <_ZN12FlashManagerD1Ev>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	08011c30 	.word	0x08011c30

0800a0f0 <_ZN13CommunicationD0Ev>:
Communication::~Communication() {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
}
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7ff ffe5 	bl	800a0c8 <_ZN13CommunicationD1Ev>
 800a0fe:	2120      	movs	r1, #32
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f006 fc9b 	bl	8010a3c <_ZdlPvj>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4618      	mov	r0, r3
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <_ZN13Communication14ProcessCommandEPh>:

void Communication::ProcessCommand(uint8_t *command){
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
	switch(command[0]){
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b03      	cmp	r3, #3
 800a120:	d010      	beq.n	800a144 <_ZN13Communication14ProcessCommandEPh+0x34>
 800a122:	2b03      	cmp	r3, #3
 800a124:	dc13      	bgt.n	800a14e <_ZN13Communication14ProcessCommandEPh+0x3e>
 800a126:	2b01      	cmp	r3, #1
 800a128:	d002      	beq.n	800a130 <_ZN13Communication14ProcessCommandEPh+0x20>
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d005      	beq.n	800a13a <_ZN13Communication14ProcessCommandEPh+0x2a>
 800a12e:	e00e      	b.n	800a14e <_ZN13Communication14ProcessCommandEPh+0x3e>
	case RequestType::R_System:
		System(command);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f814 	bl	800a160 <_ZN13Communication6SystemEPh>
		break;
 800a138:	e00e      	b.n	800a158 <_ZN13Communication14ProcessCommandEPh+0x48>
	case RequestType::R_Command:
		Command(command);
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f8e5 	bl	800a30c <_ZN13Communication7CommandEPh>
		break;
 800a142:	e009      	b.n	800a158 <_ZN13Communication14ProcessCommandEPh+0x48>
	case RequestType::R_Configuration:
		Configuration(command);
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fcf6 	bl	800ab38 <_ZN13Communication13ConfigurationEPh>
		break;
 800a14c:	e004      	b.n	800a158 <_ZN13Communication14ProcessCommandEPh+0x48>
	default:
		ErrorResult(OperationCodes::ReadData, Errors::UndefinedProcessType);
 800a14e:	2108      	movs	r1, #8
 800a150:	2000      	movs	r0, #0
 800a152:	f004 fe1d 	bl	800ed90 <ErrorResult>
		break;
 800a156:	bf00      	nop
	}
}
 800a158:	bf00      	nop
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <_ZN13Communication6SystemEPh>:
bool pauseFlg = false;//***//
void Communication::System(uint8_t *command){
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
	if(command[0]!=RequestType::R_System) return;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	f040 80c4 	bne.w	800a2fc <_ZN13Communication6SystemEPh+0x19c>
	uint16_t calibrationWeight = 500;
 800a174:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a178:	82fb      	strh	r3, [r7, #22]
	uint16_t calibrationFlow = 12;
 800a17a:	230c      	movs	r3, #12
 800a17c:	82bb      	strh	r3, [r7, #20]
   	uint8_t data[11];
	switch (command[1])   										      //Check Function
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	3301      	adds	r3, #1
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	3b01      	subs	r3, #1
 800a186:	2b05      	cmp	r3, #5
 800a188:	f200 80aa 	bhi.w	800a2e0 <_ZN13Communication6SystemEPh+0x180>
 800a18c:	a201      	add	r2, pc, #4	@ (adr r2, 800a194 <_ZN13Communication6SystemEPh+0x34>)
 800a18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a192:	bf00      	nop
 800a194:	0800a1ad 	.word	0x0800a1ad
 800a198:	0800a25d 	.word	0x0800a25d
 800a19c:	0800a275 	.word	0x0800a275
 800a1a0:	0800a28d 	.word	0x0800a28d
 800a1a4:	0800a299 	.word	0x0800a299
 800a1a8:	0800a2bd 	.word	0x0800a2bd
	{
	   case SystemRequestType::SYSR_Status:
		   	data[0]=Statuses.FirstEmg;
 800a1ac:	4b55      	ldr	r3, [pc, #340]	@ (800a304 <_ZN13Communication6SystemEPh+0x1a4>)
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	723b      	strb	r3, [r7, #8]
		   	data[1]=Statuses.SecondEmg;
 800a1b2:	4b54      	ldr	r3, [pc, #336]	@ (800a304 <_ZN13Communication6SystemEPh+0x1a4>)
 800a1b4:	785b      	ldrb	r3, [r3, #1]
 800a1b6:	727b      	strb	r3, [r7, #9]
		   	data[2]=Statuses.Volume;
 800a1b8:	4b52      	ldr	r3, [pc, #328]	@ (800a304 <_ZN13Communication6SystemEPh+0x1a4>)
 800a1ba:	789b      	ldrb	r3, [r3, #2]
 800a1bc:	72bb      	strb	r3, [r7, #10]
		   	data[3]=Statuses.Flow;
 800a1be:	4b51      	ldr	r3, [pc, #324]	@ (800a304 <_ZN13Communication6SystemEPh+0x1a4>)
 800a1c0:	78db      	ldrb	r3, [r3, #3]
 800a1c2:	72fb      	strb	r3, [r7, #11]
		   	data[4]=Statuses.Pump;
 800a1c4:	4b4f      	ldr	r3, [pc, #316]	@ (800a304 <_ZN13Communication6SystemEPh+0x1a4>)
 800a1c6:	791b      	ldrb	r3, [r3, #4]
 800a1c8:	733b      	strb	r3, [r7, #12]
		   	data[5]=Statuses.Valve;
 800a1ca:	4b4e      	ldr	r3, [pc, #312]	@ (800a304 <_ZN13Communication6SystemEPh+0x1a4>)
 800a1cc:	795b      	ldrb	r3, [r3, #5]
 800a1ce:	737b      	strb	r3, [r7, #13]
		   	data[6]=ThreadStorage.LoadcellAverageThreadId!=NULL&&ThreadStorage.FirstEmgThreadId!=0x00;
 800a1d0:	4b4d      	ldr	r3, [pc, #308]	@ (800a308 <_ZN13Communication6SystemEPh+0x1a8>)
 800a1d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d005      	beq.n	800a1e4 <_ZN13Communication6SystemEPh+0x84>
 800a1d8:	4b4b      	ldr	r3, [pc, #300]	@ (800a308 <_ZN13Communication6SystemEPh+0x1a8>)
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <_ZN13Communication6SystemEPh+0x84>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e000      	b.n	800a1e6 <_ZN13Communication6SystemEPh+0x86>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73bb      	strb	r3, [r7, #14]
		   	data[7]=ThreadStorage.CalibrationVolumeThreadId!=NULL&&ThreadStorage.FirstEmgThreadId!=0x00;
 800a1e8:	4b47      	ldr	r3, [pc, #284]	@ (800a308 <_ZN13Communication6SystemEPh+0x1a8>)
 800a1ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d005      	beq.n	800a1fc <_ZN13Communication6SystemEPh+0x9c>
 800a1f0:	4b45      	ldr	r3, [pc, #276]	@ (800a308 <_ZN13Communication6SystemEPh+0x1a8>)
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <_ZN13Communication6SystemEPh+0x9c>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e000      	b.n	800a1fe <_ZN13Communication6SystemEPh+0x9e>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73fb      	strb	r3, [r7, #15]
		   	data[8]=ThreadStorage.CalibrationFlowThreadId!=NULL&&ThreadStorage.FirstEmgThreadId!=0x00;
 800a200:	4b41      	ldr	r3, [pc, #260]	@ (800a308 <_ZN13Communication6SystemEPh+0x1a8>)
 800a202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a206:	2b00      	cmp	r3, #0
 800a208:	d005      	beq.n	800a216 <_ZN13Communication6SystemEPh+0xb6>
 800a20a:	4b3f      	ldr	r3, [pc, #252]	@ (800a308 <_ZN13Communication6SystemEPh+0x1a8>)
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <_ZN13Communication6SystemEPh+0xb6>
 800a212:	2301      	movs	r3, #1
 800a214:	e000      	b.n	800a218 <_ZN13Communication6SystemEPh+0xb8>
 800a216:	2300      	movs	r3, #0
 800a218:	743b      	strb	r3, [r7, #16]
		   	data[9]=ThreadStorage.CleanThreadId!=NULL&&ThreadStorage.FirstEmgThreadId!=0x00;
 800a21a:	4b3b      	ldr	r3, [pc, #236]	@ (800a308 <_ZN13Communication6SystemEPh+0x1a8>)
 800a21c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a220:	2b00      	cmp	r3, #0
 800a222:	d005      	beq.n	800a230 <_ZN13Communication6SystemEPh+0xd0>
 800a224:	4b38      	ldr	r3, [pc, #224]	@ (800a308 <_ZN13Communication6SystemEPh+0x1a8>)
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <_ZN13Communication6SystemEPh+0xd0>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e000      	b.n	800a232 <_ZN13Communication6SystemEPh+0xd2>
 800a230:	2300      	movs	r3, #0
 800a232:	747b      	strb	r3, [r7, #17]
		   	data[10]=Statuses.SafeMode;
 800a234:	4b33      	ldr	r3, [pc, #204]	@ (800a304 <_ZN13Communication6SystemEPh+0x1a4>)
 800a236:	799b      	ldrb	r3, [r3, #6]
 800a238:	74bb      	strb	r3, [r7, #18]
		   	SuccessDataResult(100,SuccessDataType::SD_Status,data,11);
 800a23a:	f107 0208 	add.w	r2, r7, #8
 800a23e:	230b      	movs	r3, #11
 800a240:	2102      	movs	r1, #2
 800a242:	2064      	movs	r0, #100	@ 0x64
 800a244:	f004 fd29 	bl	800ec9a <SuccessDataResult>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	7818      	ldrb	r0, [r3, #0]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	3301      	adds	r3, #1
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	2202      	movs	r2, #2
 800a254:	4619      	mov	r1, r3
 800a256:	f004 fcf7 	bl	800ec48 <SendFeedback>
			break;
 800a25a:	e050      	b.n	800a2fe <_ZN13Communication6SystemEPh+0x19e>
	   case SystemRequestType::SYSR_Restart:
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	7818      	ldrb	r0, [r3, #0]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2202      	movs	r2, #2
 800a268:	4619      	mov	r1, r3
 800a26a:	f004 fced 	bl	800ec48 <SendFeedback>
		    HAL_NVIC_SystemReset();
 800a26e:	f7f7 fe4a 	bl	8001f06 <HAL_NVIC_SystemReset>
	        break;
 800a272:	e044      	b.n	800a2fe <_ZN13Communication6SystemEPh+0x19e>
	   case SystemRequestType::SYSR_FactoryReset:
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	7818      	ldrb	r0, [r3, #0]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	3301      	adds	r3, #1
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	2202      	movs	r2, #2
 800a280:	4619      	mov	r1, r3
 800a282:	f004 fce1 	bl	800ec48 <SendFeedback>
			HardReset();
 800a286:	f004 fbdd 	bl	800ea44 <HardReset>
		   break;
 800a28a:	e038      	b.n	800a2fe <_ZN13Communication6SystemEPh+0x19e>
	   case SystemRequestType::SYSR_MeasurementAverage:
		   	 ClearLoadcellParams();
 800a28c:	f006 fae8 	bl	8010860 <ClearLoadcellParams>
		   	 LoadcellAverage();
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 fa07 	bl	800b6a4 <_ZN13Communication15LoadcellAverageEv>
		   	 break;
 800a296:	e032      	b.n	800a2fe <_ZN13Communication6SystemEPh+0x19e>
	   case SystemRequestType::SYSR_CalibrationVolume:
		   	 ClearLoadcellParams();
 800a298:	f006 fae2 	bl	8010860 <ClearLoadcellParams>
			calibrationWeight=(command[2]<<8)+command[3];
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	3302      	adds	r3, #2
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	021b      	lsls	r3, r3, #8
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	3203      	adds	r2, #3
 800a2aa:	7812      	ldrb	r2, [r2, #0]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	82fb      	strh	r3, [r7, #22]
		   	 LoadcellVolumeCalibration(calibrationWeight);
 800a2b0:	8afb      	ldrh	r3, [r7, #22]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 fa1f 	bl	800b6f8 <_ZN13Communication25LoadcellVolumeCalibrationEt>
		   	 break;
 800a2ba:	e020      	b.n	800a2fe <_ZN13Communication6SystemEPh+0x19e>
	   case SystemRequestType::SYSR_CalibrationFlow:
		   	 ClearLoadcellParams();
 800a2bc:	f006 fad0 	bl	8010860 <ClearLoadcellParams>
			calibrationFlow=(command[2]<<8)+command[3];
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	3302      	adds	r3, #2
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	3203      	adds	r2, #3
 800a2ce:	7812      	ldrb	r2, [r2, #0]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	82bb      	strh	r3, [r7, #20]
		   	 LoadcellFlowCalibration(calibrationFlow);
 800a2d4:	8abb      	ldrh	r3, [r7, #20]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f001 fa45 	bl	800b768 <_ZN13Communication23LoadcellFlowCalibrationEt>
		   	 break;
 800a2de:	e00e      	b.n	800a2fe <_ZN13Communication6SystemEPh+0x19e>
		default:
			ErrorResult(OperationCodes::ReadData, Errors::UndefinedSystemType);
 800a2e0:	2109      	movs	r1, #9
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	f004 fd54 	bl	800ed90 <ErrorResult>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	7818      	ldrb	r0, [r3, #0]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	f004 fca7 	bl	800ec48 <SendFeedback>
			break;
 800a2fa:	e000      	b.n	800a2fe <_ZN13Communication6SystemEPh+0x19e>
	if(command[0]!=RequestType::R_System) return;
 800a2fc:	bf00      	nop
	 }
}
 800a2fe:	3718      	adds	r7, #24
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	20009320 	.word	0x20009320
 800a308:	20009138 	.word	0x20009138

0800a30c <_ZN13Communication7CommandEPh>:

void Communication::Command(uint8_t *command){
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af02      	add	r7, sp, #8
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]

	uint16_t cleanTime=0;
 800a316:	2300      	movs	r3, #0
 800a318:	81fb      	strh	r3, [r7, #14]
	if(command[0]!=RequestType::R_Command) return;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	f040 8403 	bne.w	800ab2a <_ZN13Communication7CommandEPh+0x81e>
    bool isOpenFirstEmg = command[2] & 0x04;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	3302      	adds	r3, #2
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bf14      	ite	ne
 800a332:	2301      	movne	r3, #1
 800a334:	2300      	moveq	r3, #0
 800a336:	737b      	strb	r3, [r7, #13]
    bool isOpenSecondEmg = command[2] & 0x02;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	3302      	adds	r3, #2
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	f003 0302 	and.w	r3, r3, #2
 800a342:	2b00      	cmp	r3, #0
 800a344:	bf14      	ite	ne
 800a346:	2301      	movne	r3, #1
 800a348:	2300      	moveq	r3, #0
 800a34a:	733b      	strb	r3, [r7, #12]
    bool isOpenLoadcell = command[2] & 0x01;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	3302      	adds	r3, #2
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	bf14      	ite	ne
 800a35a:	2301      	movne	r3, #1
 800a35c:	2300      	moveq	r3, #0
 800a35e:	72fb      	strb	r3, [r7, #11]
	switch (command[1])   												//Check Function
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	3301      	adds	r3, #1
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	2bff      	cmp	r3, #255	@ 0xff
 800a368:	f000 8330 	beq.w	800a9cc <_ZN13Communication7CommandEPh+0x6c0>
 800a36c:	2bff      	cmp	r3, #255	@ 0xff
 800a36e:	f300 83ce 	bgt.w	800ab0e <_ZN13Communication7CommandEPh+0x802>
 800a372:	2b1b      	cmp	r3, #27
 800a374:	dc40      	bgt.n	800a3f8 <_ZN13Communication7CommandEPh+0xec>
 800a376:	2b00      	cmp	r3, #0
 800a378:	f340 83c9 	ble.w	800ab0e <_ZN13Communication7CommandEPh+0x802>
 800a37c:	3b01      	subs	r3, #1
 800a37e:	2b1a      	cmp	r3, #26
 800a380:	f200 83c5 	bhi.w	800ab0e <_ZN13Communication7CommandEPh+0x802>
 800a384:	a201      	add	r2, pc, #4	@ (adr r2, 800a38c <_ZN13Communication7CommandEPh+0x80>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a401 	.word	0x0800a401
 800a390:	0800a467 	.word	0x0800a467
 800a394:	0800a4cd 	.word	0x0800a4cd
 800a398:	0800a5a3 	.word	0x0800a5a3
 800a39c:	0800a609 	.word	0x0800a609
 800a3a0:	0800a66f 	.word	0x0800a66f
 800a3a4:	0800a6e9 	.word	0x0800a6e9
 800a3a8:	0800a745 	.word	0x0800a745
 800a3ac:	0800a7a1 	.word	0x0800a7a1
 800a3b0:	0800a833 	.word	0x0800a833
 800a3b4:	0800a8dd 	.word	0x0800a8dd
 800a3b8:	0800a943 	.word	0x0800a943
 800a3bc:	0800aab7 	.word	0x0800aab7
 800a3c0:	0800aaa7 	.word	0x0800aaa7
 800a3c4:	0800aaaf 	.word	0x0800aaaf
 800a3c8:	0800ab0f 	.word	0x0800ab0f
 800a3cc:	0800ab0f 	.word	0x0800ab0f
 800a3d0:	0800ab0f 	.word	0x0800ab0f
 800a3d4:	0800ab0f 	.word	0x0800ab0f
 800a3d8:	0800ab0f 	.word	0x0800ab0f
 800a3dc:	0800ab0f 	.word	0x0800ab0f
 800a3e0:	0800ab0f 	.word	0x0800ab0f
 800a3e4:	0800ab0f 	.word	0x0800ab0f
 800a3e8:	0800ab0f 	.word	0x0800ab0f
 800a3ec:	0800ab0f 	.word	0x0800ab0f
 800a3f0:	0800aabf 	.word	0x0800aabf
 800a3f4:	0800aadf 	.word	0x0800aadf
 800a3f8:	2bfd      	cmp	r3, #253	@ 0xfd
 800a3fa:	f000 82d7 	beq.w	800a9ac <_ZN13Communication7CommandEPh+0x6a0>
 800a3fe:	e386      	b.n	800ab0e <_ZN13Communication7CommandEPh+0x802>
	{
		case CommandRequestType::CMDR_FirstEmg:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a400:	4ba4      	ldr	r3, [pc, #656]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a402:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a406:	2b00      	cmp	r3, #0
 800a408:	d017      	beq.n	800a43a <_ZN13Communication7CommandEPh+0x12e>
 800a40a:	4ba2      	ldr	r3, [pc, #648]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a40c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a410:	2b01      	cmp	r3, #1
 800a412:	d012      	beq.n	800a43a <_ZN13Communication7CommandEPh+0x12e>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a414:	4b9f      	ldr	r3, [pc, #636]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a416:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a41a:	2b05      	cmp	r3, #5
 800a41c:	d00d      	beq.n	800a43a <_ZN13Communication7CommandEPh+0x12e>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a41e:	2102      	movs	r1, #2
 800a420:	2000      	movs	r0, #0
 800a422:	f004 fcb5 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	7818      	ldrb	r0, [r3, #0]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	3301      	adds	r3, #1
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	2202      	movs	r2, #2
 800a432:	4619      	mov	r1, r3
 800a434:	f004 fc08 	bl	800ec48 <SendFeedback>
				return;
 800a438:	e378      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			 ToggleFirstEmg(command[2]==1);  	     //Check SubFunction
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	3302      	adds	r3, #2
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2b01      	cmp	r3, #1
 800a442:	bf0c      	ite	eq
 800a444:	2301      	moveq	r3, #1
 800a446:	2300      	movne	r3, #0
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	4619      	mov	r1, r3
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fd0f 	bl	800ae70 <_ZN13Communication14ToggleFirstEmgEb>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	7818      	ldrb	r0, [r3, #0]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	3301      	adds	r3, #1
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	2202      	movs	r2, #2
 800a45e:	4619      	mov	r1, r3
 800a460:	f004 fbf2 	bl	800ec48 <SendFeedback>
			 break;
 800a464:	e362      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_SecondEmg:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a466:	4b8b      	ldr	r3, [pc, #556]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a468:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d017      	beq.n	800a4a0 <_ZN13Communication7CommandEPh+0x194>
 800a470:	4b88      	ldr	r3, [pc, #544]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a472:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a476:	2b01      	cmp	r3, #1
 800a478:	d012      	beq.n	800a4a0 <_ZN13Communication7CommandEPh+0x194>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a47a:	4b86      	ldr	r3, [pc, #536]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a47c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a480:	2b05      	cmp	r3, #5
 800a482:	d00d      	beq.n	800a4a0 <_ZN13Communication7CommandEPh+0x194>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a484:	2102      	movs	r1, #2
 800a486:	2000      	movs	r0, #0
 800a488:	f004 fc82 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	7818      	ldrb	r0, [r3, #0]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	3301      	adds	r3, #1
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2202      	movs	r2, #2
 800a498:	4619      	mov	r1, r3
 800a49a:	f004 fbd5 	bl	800ec48 <SendFeedback>
				return;
 800a49e:	e345      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			ToggleSecondEmg(command[2]==1);    	 //Check SubFunction
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	3302      	adds	r3, #2
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	bf0c      	ite	eq
 800a4aa:	2301      	moveq	r3, #1
 800a4ac:	2300      	movne	r3, #0
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fd0a 	bl	800aecc <_ZN13Communication15ToggleSecondEmgEb>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	7818      	ldrb	r0, [r3, #0]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	f004 fbbf 	bl	800ec48 <SendFeedback>
			 break;
 800a4ca:	e32f      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_LoadcellMeasure:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a4cc:	4b71      	ldr	r3, [pc, #452]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a4ce:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d017      	beq.n	800a506 <_ZN13Communication7CommandEPh+0x1fa>
 800a4d6:	4b6f      	ldr	r3, [pc, #444]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a4d8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d012      	beq.n	800a506 <_ZN13Communication7CommandEPh+0x1fa>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a4e0:	4b6c      	ldr	r3, [pc, #432]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a4e2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a4e6:	2b05      	cmp	r3, #5
 800a4e8:	d00d      	beq.n	800a506 <_ZN13Communication7CommandEPh+0x1fa>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a4ea:	2102      	movs	r1, #2
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	f004 fc4f 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	7818      	ldrb	r0, [r3, #0]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	2202      	movs	r2, #2
 800a4fe:	4619      	mov	r1, r3
 800a500:	f004 fba2 	bl	800ec48 <SendFeedback>
				return;
 800a504:	e312      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			if(SystemConfig.VolumeAverage==0 || SystemConfig.FlowAverage==0){
 800a506:	4b63      	ldr	r3, [pc, #396]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d003      	beq.n	800a516 <_ZN13Communication7CommandEPh+0x20a>
 800a50e:	4b61      	ldr	r3, [pc, #388]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10d      	bne.n	800a532 <_ZN13Communication7CommandEPh+0x226>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotAverage);
 800a516:	2105      	movs	r1, #5
 800a518:	2000      	movs	r0, #0
 800a51a:	f004 fc39 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	7818      	ldrb	r0, [r3, #0]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	3301      	adds	r3, #1
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2202      	movs	r2, #2
 800a52a:	4619      	mov	r1, r3
 800a52c:	f004 fb8c 	bl	800ec48 <SendFeedback>
				return;
 800a530:	e2fc      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			if(SystemConfig.FlowRate<2 || SystemConfig.VolumeRate<2){
 800a532:	4b58      	ldr	r3, [pc, #352]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a534:	edd3 7a08 	vldr	s15, [r3, #32]
 800a538:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a53c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a544:	d409      	bmi.n	800a55a <_ZN13Communication7CommandEPh+0x24e>
 800a546:	4b53      	ldr	r3, [pc, #332]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a548:	edd3 7a07 	vldr	s15, [r3, #28]
 800a54c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a550:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a558:	d50d      	bpl.n	800a576 <_ZN13Communication7CommandEPh+0x26a>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotCalibration);
 800a55a:	2104      	movs	r1, #4
 800a55c:	2000      	movs	r0, #0
 800a55e:	f004 fc17 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	7818      	ldrb	r0, [r3, #0]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	3301      	adds	r3, #1
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	2202      	movs	r2, #2
 800a56e:	4619      	mov	r1, r3
 800a570:	f004 fb6a 	bl	800ec48 <SendFeedback>
				return;
 800a574:	e2da      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			 ToggleLoadCell(command[2]==1);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	3302      	adds	r3, #2
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	bf0c      	ite	eq
 800a580:	2301      	moveq	r3, #1
 800a582:	2300      	movne	r3, #0
 800a584:	b2db      	uxtb	r3, r3
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fccd 	bl	800af28 <_ZN13Communication14ToggleLoadCellEb>
			 SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	7818      	ldrb	r0, [r3, #0]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	3301      	adds	r3, #1
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	2202      	movs	r2, #2
 800a59a:	4619      	mov	r1, r3
 800a59c:	f004 fb54 	bl	800ec48 <SendFeedback>
			 break;
 800a5a0:	e2c4      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_Pump:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a5a2:	4b3c      	ldr	r3, [pc, #240]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a5a4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d017      	beq.n	800a5dc <_ZN13Communication7CommandEPh+0x2d0>
 800a5ac:	4b39      	ldr	r3, [pc, #228]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a5ae:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d012      	beq.n	800a5dc <_ZN13Communication7CommandEPh+0x2d0>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a5b6:	4b37      	ldr	r3, [pc, #220]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a5b8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a5bc:	2b05      	cmp	r3, #5
 800a5be:	d00d      	beq.n	800a5dc <_ZN13Communication7CommandEPh+0x2d0>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a5c0:	2102      	movs	r1, #2
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	f004 fbe4 	bl	800ed90 <ErrorResult>
				 SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	7818      	ldrb	r0, [r3, #0]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	f004 fb37 	bl	800ec48 <SendFeedback>
				return;
 800a5da:	e2a7      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			TogglePump(command[2]==1); 	 	 //Check SubFunction
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	3302      	adds	r3, #2
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	bf0c      	ite	eq
 800a5e6:	2301      	moveq	r3, #1
 800a5e8:	2300      	movne	r3, #0
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fdd4 	bl	800b19c <_ZN13Communication10TogglePumpEb>
			 SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	7818      	ldrb	r0, [r3, #0]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	2202      	movs	r2, #2
 800a600:	4619      	mov	r1, r3
 800a602:	f004 fb21 	bl	800ec48 <SendFeedback>
			 break;
 800a606:	e291      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_Valve:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a608:	4b22      	ldr	r3, [pc, #136]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a60a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d017      	beq.n	800a642 <_ZN13Communication7CommandEPh+0x336>
 800a612:	4b20      	ldr	r3, [pc, #128]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a614:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d012      	beq.n	800a642 <_ZN13Communication7CommandEPh+0x336>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a61c:	4b1d      	ldr	r3, [pc, #116]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a61e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a622:	2b05      	cmp	r3, #5
 800a624:	d00d      	beq.n	800a642 <_ZN13Communication7CommandEPh+0x336>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a626:	2102      	movs	r1, #2
 800a628:	2000      	movs	r0, #0
 800a62a:	f004 fbb1 	bl	800ed90 <ErrorResult>
				 SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	7818      	ldrb	r0, [r3, #0]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	3301      	adds	r3, #1
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2202      	movs	r2, #2
 800a63a:	4619      	mov	r1, r3
 800a63c:	f004 fb04 	bl	800ec48 <SendFeedback>
				return;
 800a640:	e274      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			ToggleValve(command[2]==1);   	 //Check SubFunction
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	3302      	adds	r3, #2
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	bf0c      	ite	eq
 800a64c:	2301      	moveq	r3, #1
 800a64e:	2300      	movne	r3, #0
 800a650:	b2db      	uxtb	r3, r3
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fddb 	bl	800b210 <_ZN13Communication11ToggleValveEb>
			 SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	7818      	ldrb	r0, [r3, #0]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	3301      	adds	r3, #1
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	2202      	movs	r2, #2
 800a666:	4619      	mov	r1, r3
 800a668:	f004 faee 	bl	800ec48 <SendFeedback>
			 break;
 800a66c:	e25e      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_Clean: //Check SubFunction
			if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800a66e:	4b09      	ldr	r3, [pc, #36]	@ (800a694 <_ZN13Communication7CommandEPh+0x388>)
 800a670:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00f      	beq.n	800a698 <_ZN13Communication7CommandEPh+0x38c>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a678:	2102      	movs	r1, #2
 800a67a:	2000      	movs	r0, #0
 800a67c:	f004 fb88 	bl	800ed90 <ErrorResult>
				 SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	7818      	ldrb	r0, [r3, #0]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	3301      	adds	r3, #1
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	2202      	movs	r2, #2
 800a68c:	4619      	mov	r1, r3
 800a68e:	f004 fadb 	bl	800ec48 <SendFeedback>
				return;
 800a692:	e24b      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
 800a694:	20009328 	.word	0x20009328
			}
			 cleanTime=(command[2]<<8)+command[3];
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	3302      	adds	r3, #2
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	021b      	lsls	r3, r3, #8
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	3203      	adds	r2, #3
 800a6a6:	7812      	ldrb	r2, [r2, #0]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	81fb      	strh	r3, [r7, #14]
			if(cleanTime<1){
 800a6ac:	89fb      	ldrh	r3, [r7, #14]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10d      	bne.n	800a6ce <_ZN13Communication7CommandEPh+0x3c2>
				ErrorResult(OperationCodes::ReadData, Errors::ValueShouldNotBeZero);
 800a6b2:	2106      	movs	r1, #6
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	f004 fb6b 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	7818      	ldrb	r0, [r3, #0]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	f004 fabe 	bl	800ec48 <SendFeedback>
				return;
 800a6cc:	e22e      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			 StartClean(cleanTime*1000);
 800a6ce:	89fb      	ldrh	r3, [r7, #14]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	0152      	lsls	r2, r2, #5
 800a6d4:	1ad2      	subs	r2, r2, r3
 800a6d6:	0092      	lsls	r2, r2, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	00db      	lsls	r3, r3, #3
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 ff51 	bl	800b588 <_ZN13Communication10StartCleanEt>
			 break;
 800a6e6:	e221      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_Safe: //Check SubFunction
				if(SystemConfig.systemMode!=SystemModes::EmptyMode && SystemConfig.systemMode!=SystemModes::SafeMode){
 800a6e8:	4ba4      	ldr	r3, [pc, #656]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a6ea:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d012      	beq.n	800a718 <_ZN13Communication7CommandEPh+0x40c>
 800a6f2:	4ba2      	ldr	r3, [pc, #648]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a6f4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	d00d      	beq.n	800a718 <_ZN13Communication7CommandEPh+0x40c>
					ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a6fc:	2102      	movs	r1, #2
 800a6fe:	2000      	movs	r0, #0
 800a700:	f004 fb46 	bl	800ed90 <ErrorResult>
					SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	7818      	ldrb	r0, [r3, #0]
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	3301      	adds	r3, #1
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2202      	movs	r2, #2
 800a710:	4619      	mov	r1, r3
 800a712:	f004 fa99 	bl	800ec48 <SendFeedback>
					return;
 800a716:	e209      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
				}
				ToggleSafeMode(command[2]==1);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	3302      	adds	r3, #2
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	bf0c      	ite	eq
 800a722:	2301      	moveq	r3, #1
 800a724:	2300      	movne	r3, #0
 800a726:	b2db      	uxtb	r3, r3
 800a728:	4619      	mov	r1, r3
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 ff62 	bl	800b5f4 <_ZN13Communication14ToggleSafeModeEb>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	7818      	ldrb	r0, [r3, #0]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	3301      	adds	r3, #1
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	2202      	movs	r2, #2
 800a73c:	4619      	mov	r1, r3
 800a73e:	f004 fa83 	bl	800ec48 <SendFeedback>
			 break;
 800a742:	e1f3      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_DataStream:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode && SystemConfig.systemMode!= SystemModes::TestMode){
 800a744:	4b8d      	ldr	r3, [pc, #564]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a746:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d012      	beq.n	800a774 <_ZN13Communication7CommandEPh+0x468>
 800a74e:	4b8b      	ldr	r3, [pc, #556]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a750:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a754:	2b01      	cmp	r3, #1
 800a756:	d00d      	beq.n	800a774 <_ZN13Communication7CommandEPh+0x468>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a758:	2102      	movs	r1, #2
 800a75a:	2000      	movs	r0, #0
 800a75c:	f004 fb18 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	7818      	ldrb	r0, [r3, #0]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	3301      	adds	r3, #1
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	2202      	movs	r2, #2
 800a76c:	4619      	mov	r1, r3
 800a76e:	f004 fa6b 	bl	800ec48 <SendFeedback>
				return;
 800a772:	e1db      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			ToggleDataStream(command[2]==1);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	3302      	adds	r3, #2
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	bf0c      	ite	eq
 800a77e:	2301      	moveq	r3, #1
 800a780:	2300      	movne	r3, #0
 800a782:	b2db      	uxtb	r3, r3
 800a784:	4619      	mov	r1, r3
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fd7c 	bl	800b284 <_ZN13Communication16ToggleDataStreamEb>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	7818      	ldrb	r0, [r3, #0]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	3301      	adds	r3, #1
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	2202      	movs	r2, #2
 800a798:	4619      	mov	r1, r3
 800a79a:	f004 fa55 	bl	800ec48 <SendFeedback>
			 break;
 800a79e:	e1c5      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_ReadVolume:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a7a0:	4b76      	ldr	r3, [pc, #472]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a7a2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d017      	beq.n	800a7da <_ZN13Communication7CommandEPh+0x4ce>
 800a7aa:	4b74      	ldr	r3, [pc, #464]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a7ac:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d012      	beq.n	800a7da <_ZN13Communication7CommandEPh+0x4ce>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a7b4:	4b71      	ldr	r3, [pc, #452]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a7b6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a7ba:	2b05      	cmp	r3, #5
 800a7bc:	d00d      	beq.n	800a7da <_ZN13Communication7CommandEPh+0x4ce>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a7be:	2102      	movs	r1, #2
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	f004 fae5 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	7818      	ldrb	r0, [r3, #0]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	f004 fa38 	bl	800ec48 <SendFeedback>
				return;
 800a7d8:	e1a8      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			if(SystemConfig.VolumeAverage==0 || SystemConfig.FlowAverage==0){
 800a7da:	4b68      	ldr	r3, [pc, #416]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <_ZN13Communication7CommandEPh+0x4de>
 800a7e2:	4b66      	ldr	r3, [pc, #408]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10d      	bne.n	800a806 <_ZN13Communication7CommandEPh+0x4fa>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotAverage);
 800a7ea:	2105      	movs	r1, #5
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	f004 facf 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	7818      	ldrb	r0, [r3, #0]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2202      	movs	r2, #2
 800a7fe:	4619      	mov	r1, r3
 800a800:	f004 fa22 	bl	800ec48 <SendFeedback>
				return;
 800a804:	e192      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			 ToggleReadVolume(command[2]==1);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	3302      	adds	r3, #2
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	bf0c      	ite	eq
 800a810:	2301      	moveq	r3, #1
 800a812:	2300      	movne	r3, #0
 800a814:	b2db      	uxtb	r3, r3
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fbdf 	bl	800afdc <_ZN13Communication16ToggleReadVolumeEb>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	7818      	ldrb	r0, [r3, #0]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	3301      	adds	r3, #1
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	2202      	movs	r2, #2
 800a82a:	4619      	mov	r1, r3
 800a82c:	f004 fa0c 	bl	800ec48 <SendFeedback>
			 break;
 800a830:	e17c      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_ReadFlow:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a832:	4b52      	ldr	r3, [pc, #328]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a834:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d017      	beq.n	800a86c <_ZN13Communication7CommandEPh+0x560>
 800a83c:	4b4f      	ldr	r3, [pc, #316]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a83e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a842:	2b01      	cmp	r3, #1
 800a844:	d012      	beq.n	800a86c <_ZN13Communication7CommandEPh+0x560>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a846:	4b4d      	ldr	r3, [pc, #308]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a848:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a84c:	2b05      	cmp	r3, #5
 800a84e:	d00d      	beq.n	800a86c <_ZN13Communication7CommandEPh+0x560>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a850:	2102      	movs	r1, #2
 800a852:	2000      	movs	r0, #0
 800a854:	f004 fa9c 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	7818      	ldrb	r0, [r3, #0]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	3301      	adds	r3, #1
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	2202      	movs	r2, #2
 800a864:	4619      	mov	r1, r3
 800a866:	f004 f9ef 	bl	800ec48 <SendFeedback>
				return;
 800a86a:	e15f      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			if(SystemConfig.FlowRate<2 || SystemConfig.VolumeRate<2){
 800a86c:	4b43      	ldr	r3, [pc, #268]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a86e:	edd3 7a08 	vldr	s15, [r3, #32]
 800a872:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a87e:	d409      	bmi.n	800a894 <_ZN13Communication7CommandEPh+0x588>
 800a880:	4b3e      	ldr	r3, [pc, #248]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a882:	edd3 7a07 	vldr	s15, [r3, #28]
 800a886:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a88a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a892:	d50d      	bpl.n	800a8b0 <_ZN13Communication7CommandEPh+0x5a4>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotCalibration);
 800a894:	2104      	movs	r1, #4
 800a896:	2000      	movs	r0, #0
 800a898:	f004 fa7a 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	7818      	ldrb	r0, [r3, #0]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	f004 f9cd 	bl	800ec48 <SendFeedback>
				return;
 800a8ae:	e13d      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			 ToggleReadFlow(command[2]==1);
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	3302      	adds	r3, #2
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	bf0c      	ite	eq
 800a8ba:	2301      	moveq	r3, #1
 800a8bc:	2300      	movne	r3, #0
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fbc4 	bl	800b050 <_ZN13Communication14ToggleReadFlowEb>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	7818      	ldrb	r0, [r3, #0]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	f004 f9b7 	bl	800ec48 <SendFeedback>
			 break;
 800a8da:	e127      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_ReadFirstEmg:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a8dc:	4b27      	ldr	r3, [pc, #156]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a8de:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d017      	beq.n	800a916 <_ZN13Communication7CommandEPh+0x60a>
 800a8e6:	4b25      	ldr	r3, [pc, #148]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a8e8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d012      	beq.n	800a916 <_ZN13Communication7CommandEPh+0x60a>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a8f0:	4b22      	ldr	r3, [pc, #136]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a8f2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a8f6:	2b05      	cmp	r3, #5
 800a8f8:	d00d      	beq.n	800a916 <_ZN13Communication7CommandEPh+0x60a>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a8fa:	2102      	movs	r1, #2
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f004 fa47 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	7818      	ldrb	r0, [r3, #0]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	3301      	adds	r3, #1
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2202      	movs	r2, #2
 800a90e:	4619      	mov	r1, r3
 800a910:	f004 f99a 	bl	800ec48 <SendFeedback>
				return;
 800a914:	e10a      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			 ToggleReadFirstEmg(command[2]==1);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	3302      	adds	r3, #2
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	bf0c      	ite	eq
 800a920:	2301      	moveq	r3, #1
 800a922:	2300      	movne	r3, #0
 800a924:	b2db      	uxtb	r3, r3
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fbcb 	bl	800b0c4 <_ZN13Communication18ToggleReadFirstEmgEb>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	7818      	ldrb	r0, [r3, #0]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	3301      	adds	r3, #1
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	2202      	movs	r2, #2
 800a93a:	4619      	mov	r1, r3
 800a93c:	f004 f984 	bl	800ec48 <SendFeedback>
			 break;
 800a940:	e0f4      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_ReadSecondEmg:
			if(SystemConfig.systemMode!=SystemModes::EmptyMode&&SystemConfig.systemMode!=SystemModes::TestMode
 800a942:	4b0e      	ldr	r3, [pc, #56]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a944:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d019      	beq.n	800a980 <_ZN13Communication7CommandEPh+0x674>
 800a94c:	4b0b      	ldr	r3, [pc, #44]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a94e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a952:	2b01      	cmp	r3, #1
 800a954:	d014      	beq.n	800a980 <_ZN13Communication7CommandEPh+0x674>
					&&SystemConfig.systemMode!=SystemModes::ManuelMode){
 800a956:	4b09      	ldr	r3, [pc, #36]	@ (800a97c <_ZN13Communication7CommandEPh+0x670>)
 800a958:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a95c:	2b05      	cmp	r3, #5
 800a95e:	d00f      	beq.n	800a980 <_ZN13Communication7CommandEPh+0x674>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a960:	2102      	movs	r1, #2
 800a962:	2000      	movs	r0, #0
 800a964:	f004 fa14 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	7818      	ldrb	r0, [r3, #0]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	3301      	adds	r3, #1
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	2202      	movs	r2, #2
 800a974:	4619      	mov	r1, r3
 800a976:	f004 f967 	bl	800ec48 <SendFeedback>
				return;
 800a97a:	e0d7      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
 800a97c:	20009328 	.word	0x20009328
			}
			 ToggleReadSecondEmg(command[2]==1);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	3302      	adds	r3, #2
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	2b01      	cmp	r3, #1
 800a988:	bf0c      	ite	eq
 800a98a:	2301      	moveq	r3, #1
 800a98c:	2300      	movne	r3, #0
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	4619      	mov	r1, r3
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fbcc 	bl	800b130 <_ZN13Communication19ToggleReadSecondEmgEb>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	7818      	ldrb	r0, [r3, #0]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	f004 f94f 	bl	800ec48 <SendFeedback>
			 break;
 800a9aa:	e0bf      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_StopTest:
			 cleanTime=(command[2]<<8)+command[3];
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	3302      	adds	r3, #2
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	021b      	lsls	r3, r3, #8
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	3203      	adds	r2, #3
 800a9ba:	7812      	ldrb	r2, [r2, #0]
 800a9bc:	4413      	add	r3, r2
 800a9be:	81fb      	strh	r3, [r7, #14]
			StopTest(cleanTime);
 800a9c0:	89fb      	ldrh	r3, [r7, #14]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fcd5 	bl	800b374 <_ZN13Communication8StopTestEt>
			 break;
 800a9ca:	e0af      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_StartTest:        //############################# Start Test #################
			if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800a9cc:	4b59      	ldr	r3, [pc, #356]	@ (800ab34 <_ZN13Communication7CommandEPh+0x828>)
 800a9ce:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00d      	beq.n	800a9f2 <_ZN13Communication7CommandEPh+0x6e6>
				ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800a9d6:	2102      	movs	r1, #2
 800a9d8:	2000      	movs	r0, #0
 800a9da:	f004 f9d9 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	7818      	ldrb	r0, [r3, #0]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	2202      	movs	r2, #2
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	f004 f92c 	bl	800ec48 <SendFeedback>
				return;
 800a9f0:	e09c      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			if(SystemConfig.VolumeAverage==0 || SystemConfig.FlowAverage==0){
 800a9f2:	4b50      	ldr	r3, [pc, #320]	@ (800ab34 <_ZN13Communication7CommandEPh+0x828>)
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d003      	beq.n	800aa02 <_ZN13Communication7CommandEPh+0x6f6>
 800a9fa:	4b4e      	ldr	r3, [pc, #312]	@ (800ab34 <_ZN13Communication7CommandEPh+0x828>)
 800a9fc:	695b      	ldr	r3, [r3, #20]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10d      	bne.n	800aa1e <_ZN13Communication7CommandEPh+0x712>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotAverage);
 800aa02:	2105      	movs	r1, #5
 800aa04:	2000      	movs	r0, #0
 800aa06:	f004 f9c3 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	7818      	ldrb	r0, [r3, #0]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	3301      	adds	r3, #1
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	2202      	movs	r2, #2
 800aa16:	4619      	mov	r1, r3
 800aa18:	f004 f916 	bl	800ec48 <SendFeedback>
				return;
 800aa1c:	e086      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			if(SystemConfig.FlowRate<2 || SystemConfig.VolumeRate<2){
 800aa1e:	4b45      	ldr	r3, [pc, #276]	@ (800ab34 <_ZN13Communication7CommandEPh+0x828>)
 800aa20:	edd3 7a08 	vldr	s15, [r3, #32]
 800aa24:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800aa28:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa30:	d409      	bmi.n	800aa46 <_ZN13Communication7CommandEPh+0x73a>
 800aa32:	4b40      	ldr	r3, [pc, #256]	@ (800ab34 <_ZN13Communication7CommandEPh+0x828>)
 800aa34:	edd3 7a07 	vldr	s15, [r3, #28]
 800aa38:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800aa3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa44:	d50d      	bpl.n	800aa62 <_ZN13Communication7CommandEPh+0x756>
				ErrorResult(OperationCodes::ReadData, Errors::HasNotCalibration);
 800aa46:	2104      	movs	r1, #4
 800aa48:	2000      	movs	r0, #0
 800aa4a:	f004 f9a1 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	7818      	ldrb	r0, [r3, #0]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	3301      	adds	r3, #1
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	2202      	movs	r2, #2
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	f004 f8f4 	bl	800ec48 <SendFeedback>
				return;
 800aa60:	e064      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
			}
			 cleanTime=(command[3]<<8)+command[4];
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	3303      	adds	r3, #3
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	021b      	lsls	r3, r3, #8
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	3204      	adds	r2, #4
 800aa70:	7812      	ldrb	r2, [r2, #0]
 800aa72:	4413      	add	r3, r2
 800aa74:	81fb      	strh	r3, [r7, #14]
			 SystemConfig.MinimumFlowSensiblity=command[5];
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	795a      	ldrb	r2, [r3, #5]
 800aa7a:	4b2e      	ldr	r3, [pc, #184]	@ (800ab34 <_ZN13Communication7CommandEPh+0x828>)
 800aa7c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
			 SystemConfig.WaitAfterProcessSeconds=command[6];
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	799a      	ldrb	r2, [r3, #6]
 800aa84:	4b2b      	ldr	r3, [pc, #172]	@ (800ab34 <_ZN13Communication7CommandEPh+0x828>)
 800aa86:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
			StartTest(isOpenFirstEmg, isOpenSecondEmg, isOpenLoadcell,cleanTime,command[7]);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	3307      	adds	r3, #7
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	7af8      	ldrb	r0, [r7, #11]
 800aa92:	7b3a      	ldrb	r2, [r7, #12]
 800aa94:	7b79      	ldrb	r1, [r7, #13]
 800aa96:	9301      	str	r3, [sp, #4]
 800aa98:	89fb      	ldrh	r3, [r7, #14]
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fc2e 	bl	800b300 <_ZN13Communication9StartTestEbbbth>
			 break;
 800aaa4:	e042      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>

		case CommandRequestType::CMDR_PauseTest:
			pauseTest();
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fcb8 	bl	800b41c <_ZN13Communication9pauseTestEv>
			break;
 800aaac:	e03e      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_ResumeTest:
			resumeTest();
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fc96 	bl	800b3e0 <_ZN13Communication10resumeTestEv>
			break;
 800aab4:	e03a      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_CancelTest:
			cancelTest();
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fcd6 	bl	800b468 <_ZN13Communication10cancelTestEv>
			break;
 800aabc:	e036      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>

		case CommandRequestType::CMDR_StartManPrep:
			cleanTime=(command[3]<<8)+command[4];
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	3303      	adds	r3, #3
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	021b      	lsls	r3, r3, #8
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	683a      	ldr	r2, [r7, #0]
 800aaca:	3204      	adds	r2, #4
 800aacc:	7812      	ldrb	r2, [r2, #0]
 800aace:	4413      	add	r3, r2
 800aad0:	81fb      	strh	r3, [r7, #14]
			ManualPrep(cleanTime);
 800aad2:	89fb      	ldrh	r3, [r7, #14]
 800aad4:	4619      	mov	r1, r3
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 fcfe 	bl	800b4d8 <_ZN13Communication10ManualPrepEt>
			break;
 800aadc:	e026      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
		case CommandRequestType::CMDR_StartManTest:
			cleanTime=(command[3]<<8)+command[4];  //0;
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	3303      	adds	r3, #3
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	021b      	lsls	r3, r3, #8
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	3204      	adds	r2, #4
 800aaec:	7812      	ldrb	r2, [r2, #0]
 800aaee:	4413      	add	r3, r2
 800aaf0:	81fb      	strh	r3, [r7, #14]
			StartManTest(isOpenFirstEmg, isOpenSecondEmg, isOpenLoadcell,cleanTime,command[7]);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	3307      	adds	r3, #7
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	7af8      	ldrb	r0, [r7, #11]
 800aafa:	7b3a      	ldrb	r2, [r7, #12]
 800aafc:	7b79      	ldrb	r1, [r7, #13]
 800aafe:	9301      	str	r3, [sp, #4]
 800ab00:	89fb      	ldrh	r3, [r7, #14]
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	4603      	mov	r3, r0
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fd02 	bl	800b510 <_ZN13Communication12StartManTestEbbbth>
			break;
 800ab0c:	e00e      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>

		default:
			ErrorResult(OperationCodes::ReadData, Errors::UndefinedCommandType);
 800ab0e:	210a      	movs	r1, #10
 800ab10:	2000      	movs	r0, #0
 800ab12:	f004 f93d 	bl	800ed90 <ErrorResult>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	7818      	ldrb	r0, [r3, #0]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2202      	movs	r2, #2
 800ab22:	4619      	mov	r1, r3
 800ab24:	f004 f890 	bl	800ec48 <SendFeedback>
			 break;
 800ab28:	e000      	b.n	800ab2c <_ZN13Communication7CommandEPh+0x820>
	if(command[0]!=RequestType::R_Command) return;
 800ab2a:	bf00      	nop
	}
}
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	20009328 	.word	0x20009328

0800ab38 <_ZN13Communication13ConfigurationEPh>:

void Communication::Configuration(uint8_t *command){
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
	if(command[0]!=RequestType::R_Configuration) return;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	f040 818e 	bne.w	800ae68 <_ZN13Communication13ConfigurationEPh+0x330>
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800ab4c:	4bac      	ldr	r3, [pc, #688]	@ (800ae00 <_ZN13Communication13ConfigurationEPh+0x2c8>)
 800ab4e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d004      	beq.n	800ab60 <_ZN13Communication13ConfigurationEPh+0x28>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800ab56:	2102      	movs	r1, #2
 800ab58:	2000      	movs	r0, #0
 800ab5a:	f004 f919 	bl	800ed90 <ErrorResult>
		return;
 800ab5e:	e184      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
	}
	uint16_t maxTrim = 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	81fb      	strh	r3, [r7, #14]
	uint16_t zeroPointMaxTrim = 0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	81bb      	strh	r3, [r7, #12]
	uint16_t zeroPointMinTrim = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	817b      	strh	r3, [r7, #10]
	switch (command[1])   												//Check Function
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	3b01      	subs	r3, #1
 800ab74:	2b0a      	cmp	r3, #10
 800ab76:	f200 8169 	bhi.w	800ae4c <_ZN13Communication13ConfigurationEPh+0x314>
 800ab7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab80 <_ZN13Communication13ConfigurationEPh+0x48>)
 800ab7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab80:	0800abad 	.word	0x0800abad
 800ab84:	0800abcf 	.word	0x0800abcf
 800ab88:	0800abf5 	.word	0x0800abf5
 800ab8c:	0800ac1b 	.word	0x0800ac1b
 800ab90:	0800ac41 	.word	0x0800ac41
 800ab94:	0800ac67 	.word	0x0800ac67
 800ab98:	0800ac8d 	.word	0x0800ac8d
 800ab9c:	0800acb3 	.word	0x0800acb3
 800aba0:	0800acd9 	.word	0x0800acd9
 800aba4:	0800ad7d 	.word	0x0800ad7d
 800aba8:	0800ae2b 	.word	0x0800ae2b
	{
		case ConfigurationRequestType::CFGR_ReadConfiguration:
			 SuccessDataResult(100,SuccessDataType::SD_Configuration, SystemConfig.Backup,SystemConfig.BackupLen);
 800abac:	4b94      	ldr	r3, [pc, #592]	@ (800ae00 <_ZN13Communication13ConfigurationEPh+0x2c8>)
 800abae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abb0:	4a94      	ldr	r2, [pc, #592]	@ (800ae04 <_ZN13Communication13ConfigurationEPh+0x2cc>)
 800abb2:	2101      	movs	r1, #1
 800abb4:	2064      	movs	r0, #100	@ 0x64
 800abb6:	f004 f870 	bl	800ec9a <SuccessDataResult>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	7818      	ldrb	r0, [r3, #0]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	3301      	adds	r3, #1
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2202      	movs	r2, #2
 800abc6:	4619      	mov	r1, r3
 800abc8:	f004 f83e 	bl	800ec48 <SendFeedback>
			 break;
 800abcc:	e14d      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetSendPerSecond:
			FMI.WriteSendPerSecond(command[2]);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	1d1a      	adds	r2, r3, #4
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	3302      	adds	r3, #2
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	4619      	mov	r1, r3
 800abda:	4610      	mov	r0, r2
 800abdc:	f001 fc5a 	bl	800c494 <_ZN12FlashManager18WriteSendPerSecondEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	7818      	ldrb	r0, [r3, #0]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	3301      	adds	r3, #1
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	2202      	movs	r2, #2
 800abec:	4619      	mov	r1, r3
 800abee:	f004 f82b 	bl	800ec48 <SendFeedback>
			 break;
 800abf2:	e13a      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetFirstEmgPerSecond:
			FMI.WriteFirstEmgPerSecond(command[2]);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	1d1a      	adds	r2, r3, #4
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	3302      	adds	r3, #2
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	4619      	mov	r1, r3
 800ac00:	4610      	mov	r0, r2
 800ac02:	f001 fce3 	bl	800c5cc <_ZN12FlashManager22WriteFirstEmgPerSecondEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	7818      	ldrb	r0, [r3, #0]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2202      	movs	r2, #2
 800ac12:	4619      	mov	r1, r3
 800ac14:	f004 f818 	bl	800ec48 <SendFeedback>
			 break;
 800ac18:	e127      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetSecondEmgPerSecond:
			FMI.WriteSecondEmgPerSecond(command[2]);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	1d1a      	adds	r2, r3, #4
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	3302      	adds	r3, #2
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	4619      	mov	r1, r3
 800ac26:	4610      	mov	r0, r2
 800ac28:	f001 fd6c 	bl	800c704 <_ZN12FlashManager23WriteSecondEmgPerSecondEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	7818      	ldrb	r0, [r3, #0]
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	3301      	adds	r3, #1
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	2202      	movs	r2, #2
 800ac38:	4619      	mov	r1, r3
 800ac3a:	f004 f805 	bl	800ec48 <SendFeedback>
			 break;
 800ac3e:	e114      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetVolumePerSecond:
			FMI.WriteVolumePerSecond(command[2]);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	1d1a      	adds	r2, r3, #4
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	3302      	adds	r3, #2
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	f001 fdf5 	bl	800c83c <_ZN12FlashManager20WriteVolumePerSecondEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	7818      	ldrb	r0, [r3, #0]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	2202      	movs	r2, #2
 800ac5e:	4619      	mov	r1, r3
 800ac60:	f003 fff2 	bl	800ec48 <SendFeedback>
			 break;
 800ac64:	e101      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetFlowPerSecond:
			FMI.WriteFlowPerSecond(command[2]);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	1d1a      	adds	r2, r3, #4
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	3302      	adds	r3, #2
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	4619      	mov	r1, r3
 800ac72:	4610      	mov	r0, r2
 800ac74:	f001 fe7e 	bl	800c974 <_ZN12FlashManager18WriteFlowPerSecondEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	7818      	ldrb	r0, [r3, #0]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	2202      	movs	r2, #2
 800ac84:	4619      	mov	r1, r3
 800ac86:	f003 ffdf 	bl	800ec48 <SendFeedback>
			 break;
 800ac8a:	e0ee      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetPumpMaxRunTime:
			FMI.WritePumpMaxRunTime(command[2]);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	1d1a      	adds	r2, r3, #4
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	3302      	adds	r3, #2
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	4619      	mov	r1, r3
 800ac98:	4610      	mov	r0, r2
 800ac9a:	f001 ff07 	bl	800caac <_ZN12FlashManager19WritePumpMaxRunTimeEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	7818      	ldrb	r0, [r3, #0]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	3301      	adds	r3, #1
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	2202      	movs	r2, #2
 800acaa:	4619      	mov	r1, r3
 800acac:	f003 ffcc 	bl	800ec48 <SendFeedback>
			 break;
 800acb0:	e0db      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetValveMaxRunTime:
			FMI.WriteValveMaxRunTime(command[2]);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	1d1a      	adds	r2, r3, #4
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	3302      	adds	r3, #2
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	4619      	mov	r1, r3
 800acbe:	4610      	mov	r0, r2
 800acc0:	f001 ff90 	bl	800cbe4 <_ZN12FlashManager20WriteValveMaxRunTimeEh>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	7818      	ldrb	r0, [r3, #0]
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	3301      	adds	r3, #1
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	2202      	movs	r2, #2
 800acd0:	4619      	mov	r1, r3
 800acd2:	f003 ffb9 	bl	800ec48 <SendFeedback>
			 break;
 800acd6:	e0c8      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
		 case ConfigurationRequestType::CFGR_SetCalibrationFirstEmg:
				maxTrim=(command[2]<<8)+command[3];
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	3302      	adds	r3, #2
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	021b      	lsls	r3, r3, #8
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	3203      	adds	r2, #3
 800ace6:	7812      	ldrb	r2, [r2, #0]
 800ace8:	4413      	add	r3, r2
 800acea:	81fb      	strh	r3, [r7, #14]
				zeroPointMaxTrim=(command[4]<<8)+command[5];
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	3304      	adds	r3, #4
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	021b      	lsls	r3, r3, #8
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	3205      	adds	r2, #5
 800acfa:	7812      	ldrb	r2, [r2, #0]
 800acfc:	4413      	add	r3, r2
 800acfe:	81bb      	strh	r3, [r7, #12]
				zeroPointMinTrim=(command[6]<<8)+command[7];
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	3306      	adds	r3, #6
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	021b      	lsls	r3, r3, #8
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	3207      	adds	r2, #7
 800ad0e:	7812      	ldrb	r2, [r2, #0]
 800ad10:	4413      	add	r3, r2
 800ad12:	817b      	strh	r3, [r7, #10]
				if(maxTrim<1){
 800ad14:	89fb      	ldrh	r3, [r7, #14]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10d      	bne.n	800ad36 <_ZN13Communication13ConfigurationEPh+0x1fe>
					ErrorResult(OperationCodes::ReadData, Errors::ValueShouldNotBeZero);
 800ad1a:	2106      	movs	r1, #6
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	f004 f837 	bl	800ed90 <ErrorResult>
					SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	7818      	ldrb	r0, [r3, #0]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	2202      	movs	r2, #2
 800ad2e:	4619      	mov	r1, r3
 800ad30:	f003 ff8a 	bl	800ec48 <SendFeedback>
					return;
 800ad34:	e099      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
				}
				if(zeroPointMinTrim>=zeroPointMaxTrim){
 800ad36:	897a      	ldrh	r2, [r7, #10]
 800ad38:	89bb      	ldrh	r3, [r7, #12]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d30d      	bcc.n	800ad5a <_ZN13Communication13ConfigurationEPh+0x222>
					ErrorResult(OperationCodes::ReadData, Errors::MinValueCanNotBeGreaterThanMaxValue);
 800ad3e:	2107      	movs	r1, #7
 800ad40:	2000      	movs	r0, #0
 800ad42:	f004 f825 	bl	800ed90 <ErrorResult>
					SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	7818      	ldrb	r0, [r3, #0]
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2202      	movs	r2, #2
 800ad52:	4619      	mov	r1, r3
 800ad54:	f003 ff78 	bl	800ec48 <SendFeedback>
					return;
 800ad58:	e087      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
				}
				FMI.WriteFirstEmgData(maxTrim, zeroPointMaxTrim, zeroPointMinTrim);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	1d18      	adds	r0, r3, #4
 800ad5e:	897b      	ldrh	r3, [r7, #10]
 800ad60:	89ba      	ldrh	r2, [r7, #12]
 800ad62:	89f9      	ldrh	r1, [r7, #14]
 800ad64:	f002 fa34 	bl	800d1d0 <_ZN12FlashManager17WriteFirstEmgDataEttt>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	7818      	ldrb	r0, [r3, #0]
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2202      	movs	r2, #2
 800ad74:	4619      	mov	r1, r3
 800ad76:	f003 ff67 	bl	800ec48 <SendFeedback>
			 break;
 800ad7a:	e076      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SetCalibrationSecondEmg:
			maxTrim=(command[2]<<8)+command[3];
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	3302      	adds	r3, #2
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	021b      	lsls	r3, r3, #8
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	3203      	adds	r2, #3
 800ad8a:	7812      	ldrb	r2, [r2, #0]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	81fb      	strh	r3, [r7, #14]
			zeroPointMaxTrim=(command[4]<<8)+command[5];
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	3304      	adds	r3, #4
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	3205      	adds	r2, #5
 800ad9e:	7812      	ldrb	r2, [r2, #0]
 800ada0:	4413      	add	r3, r2
 800ada2:	81bb      	strh	r3, [r7, #12]
			zeroPointMinTrim=(command[6]<<8)+command[7];
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	3306      	adds	r3, #6
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	021b      	lsls	r3, r3, #8
 800adac:	b29b      	uxth	r3, r3
 800adae:	683a      	ldr	r2, [r7, #0]
 800adb0:	3207      	adds	r2, #7
 800adb2:	7812      	ldrb	r2, [r2, #0]
 800adb4:	4413      	add	r3, r2
 800adb6:	817b      	strh	r3, [r7, #10]
			if(maxTrim<1){
 800adb8:	89fb      	ldrh	r3, [r7, #14]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10d      	bne.n	800adda <_ZN13Communication13ConfigurationEPh+0x2a2>
				ErrorResult(OperationCodes::ReadData, Errors::ValueShouldNotBeZero);
 800adbe:	2106      	movs	r1, #6
 800adc0:	2000      	movs	r0, #0
 800adc2:	f003 ffe5 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	7818      	ldrb	r0, [r3, #0]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	3301      	adds	r3, #1
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	2202      	movs	r2, #2
 800add2:	4619      	mov	r1, r3
 800add4:	f003 ff38 	bl	800ec48 <SendFeedback>
				return;
 800add8:	e047      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
			}
			if(zeroPointMinTrim>=zeroPointMaxTrim){
 800adda:	897a      	ldrh	r2, [r7, #10]
 800addc:	89bb      	ldrh	r3, [r7, #12]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d312      	bcc.n	800ae08 <_ZN13Communication13ConfigurationEPh+0x2d0>
				ErrorResult(OperationCodes::ReadData, Errors::MinValueCanNotBeGreaterThanMaxValue);
 800ade2:	2107      	movs	r1, #7
 800ade4:	2000      	movs	r0, #0
 800ade6:	f003 ffd3 	bl	800ed90 <ErrorResult>
				SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	7818      	ldrb	r0, [r3, #0]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	3301      	adds	r3, #1
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2202      	movs	r2, #2
 800adf6:	4619      	mov	r1, r3
 800adf8:	f003 ff26 	bl	800ec48 <SendFeedback>
				return;
 800adfc:	e035      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
 800adfe:	bf00      	nop
 800ae00:	20009328 	.word	0x20009328
 800ae04:	2000935d 	.word	0x2000935d
			}
			FMI.WriteSecondEmgData(maxTrim, zeroPointMaxTrim, zeroPointMinTrim);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	1d18      	adds	r0, r3, #4
 800ae0c:	897b      	ldrh	r3, [r7, #10]
 800ae0e:	89ba      	ldrh	r2, [r7, #12]
 800ae10:	89f9      	ldrh	r1, [r7, #14]
 800ae12:	f002 fb98 	bl	800d546 <_ZN12FlashManager18WriteSecondEmgDataEttt>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	7818      	ldrb	r0, [r3, #0]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	2202      	movs	r2, #2
 800ae22:	4619      	mov	r1, r3
 800ae24:	f003 ff10 	bl	800ec48 <SendFeedback>
			 break;
 800ae28:	e01f      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
		case ConfigurationRequestType::CFGR_SaveFlash:
			FMI.Update();
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f001 fa14 	bl	800c25c <_ZN12FlashManager6UpdateEv>
			FlashInitialize();
 800ae34:	f003 fe12 	bl	800ea5c <FlashInitialize>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	7818      	ldrb	r0, [r3, #0]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2202      	movs	r2, #2
 800ae44:	4619      	mov	r1, r3
 800ae46:	f003 feff 	bl	800ec48 <SendFeedback>
			break;
 800ae4a:	e00e      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
		default:
			ErrorResult(OperationCodes::ReadData, Errors::UndefinedConfigurationType);
 800ae4c:	210b      	movs	r1, #11
 800ae4e:	2000      	movs	r0, #0
 800ae50:	f003 ff9e 	bl	800ed90 <ErrorResult>
			SendFeedback(command[0], command[1], ProcessStatuses::PS_End);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	7818      	ldrb	r0, [r3, #0]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	4619      	mov	r1, r3
 800ae62:	f003 fef1 	bl	800ec48 <SendFeedback>
			 break;
 800ae66:	e000      	b.n	800ae6a <_ZN13Communication13ConfigurationEPh+0x332>
	if(command[0]!=RequestType::R_Configuration) return;
 800ae68:	bf00      	nop
	}
}
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <_ZN13Communication14ToggleFirstEmgEb>:

void Communication::ToggleFirstEmg(bool isStart){
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
	Statuses.FirstEmg=isStart;
 800ae7c:	4a0f      	ldr	r2, [pc, #60]	@ (800aebc <_ZN13Communication14ToggleFirstEmgEb+0x4c>)
 800ae7e:	78fb      	ldrb	r3, [r7, #3]
 800ae80:	7013      	strb	r3, [r2, #0]
	if(isStart){
 800ae82:	78fb      	ldrb	r3, [r7, #3]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00c      	beq.n	800aea2 <_ZN13Communication14ToggleFirstEmgEb+0x32>
		if(ThreadStorage.FirstEmgThreadId!=NULL) return;
 800ae88:	4b0d      	ldr	r3, [pc, #52]	@ (800aec0 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d111      	bne.n	800aeb4 <_ZN13Communication14ToggleFirstEmgEb+0x44>
		ThreadStorage.FirstEmgThreadId = osThreadNew(StartFirstEmgTask, NULL, &ThreadStorage.FirstEmgThreadAttr);
 800ae90:	4a0c      	ldr	r2, [pc, #48]	@ (800aec4 <_ZN13Communication14ToggleFirstEmgEb+0x54>)
 800ae92:	2100      	movs	r1, #0
 800ae94:	480c      	ldr	r0, [pc, #48]	@ (800aec8 <_ZN13Communication14ToggleFirstEmgEb+0x58>)
 800ae96:	f7fb fd0d 	bl	80068b4 <osThreadNew>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	4a08      	ldr	r2, [pc, #32]	@ (800aec0 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800ae9e:	6093      	str	r3, [r2, #8]
		return;
 800aea0:	e009      	b.n	800aeb6 <_ZN13Communication14ToggleFirstEmgEb+0x46>
	}
	osThreadTerminate(ThreadStorage.FirstEmgThreadId);
 800aea2:	4b07      	ldr	r3, [pc, #28]	@ (800aec0 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fb fd96 	bl	80069d8 <osThreadTerminate>
	ThreadStorage.FirstEmgThreadId=NULL;
 800aeac:	4b04      	ldr	r3, [pc, #16]	@ (800aec0 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	609a      	str	r2, [r3, #8]
 800aeb2:	e000      	b.n	800aeb6 <_ZN13Communication14ToggleFirstEmgEb+0x46>
		if(ThreadStorage.FirstEmgThreadId!=NULL) return;
 800aeb4:	bf00      	nop
}
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	20009320 	.word	0x20009320
 800aec0:	20009138 	.word	0x20009138
 800aec4:	20009148 	.word	0x20009148
 800aec8:	0800f901 	.word	0x0800f901

0800aecc <_ZN13Communication15ToggleSecondEmgEb>:
void Communication::ToggleSecondEmg(bool isStart){
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70fb      	strb	r3, [r7, #3]
	Statuses.SecondEmg=isStart;
 800aed8:	4a0f      	ldr	r2, [pc, #60]	@ (800af18 <_ZN13Communication15ToggleSecondEmgEb+0x4c>)
 800aeda:	78fb      	ldrb	r3, [r7, #3]
 800aedc:	7053      	strb	r3, [r2, #1]
	if(isStart){
 800aede:	78fb      	ldrb	r3, [r7, #3]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00c      	beq.n	800aefe <_ZN13Communication15ToggleSecondEmgEb+0x32>
		if(ThreadStorage.SecondEmgThreadId!=NULL) return;
 800aee4:	4b0d      	ldr	r3, [pc, #52]	@ (800af1c <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d111      	bne.n	800af10 <_ZN13Communication15ToggleSecondEmgEb+0x44>
		ThreadStorage.SecondEmgThreadId = osThreadNew(StartSecondEmgTask, NULL, &ThreadStorage.SecondEmgThreadAttr);
 800aeec:	4a0c      	ldr	r2, [pc, #48]	@ (800af20 <_ZN13Communication15ToggleSecondEmgEb+0x54>)
 800aeee:	2100      	movs	r1, #0
 800aef0:	480c      	ldr	r0, [pc, #48]	@ (800af24 <_ZN13Communication15ToggleSecondEmgEb+0x58>)
 800aef2:	f7fb fcdf 	bl	80068b4 <osThreadNew>
 800aef6:	4603      	mov	r3, r0
 800aef8:	4a08      	ldr	r2, [pc, #32]	@ (800af1c <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800aefa:	60d3      	str	r3, [r2, #12]
		return;
 800aefc:	e009      	b.n	800af12 <_ZN13Communication15ToggleSecondEmgEb+0x46>
	}
	osThreadTerminate(ThreadStorage.SecondEmgThreadId);
 800aefe:	4b07      	ldr	r3, [pc, #28]	@ (800af1c <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	4618      	mov	r0, r3
 800af04:	f7fb fd68 	bl	80069d8 <osThreadTerminate>
	ThreadStorage.SecondEmgThreadId=NULL;
 800af08:	4b04      	ldr	r3, [pc, #16]	@ (800af1c <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	60da      	str	r2, [r3, #12]
 800af0e:	e000      	b.n	800af12 <_ZN13Communication15ToggleSecondEmgEb+0x46>
		if(ThreadStorage.SecondEmgThreadId!=NULL) return;
 800af10:	bf00      	nop
}
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	20009320 	.word	0x20009320
 800af1c:	20009138 	.word	0x20009138
 800af20:	2000916c 	.word	0x2000916c
 800af24:	0800fa69 	.word	0x0800fa69

0800af28 <_ZN13Communication14ToggleLoadCellEb>:
void Communication::ToggleLoadCell(bool isStart){
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	70fb      	strb	r3, [r7, #3]
	Statuses.Volume=isStart;
 800af34:	4a22      	ldr	r2, [pc, #136]	@ (800afc0 <_ZN13Communication14ToggleLoadCellEb+0x98>)
 800af36:	78fb      	ldrb	r3, [r7, #3]
 800af38:	7093      	strb	r3, [r2, #2]
	Statuses.Flow=isStart;
 800af3a:	4a21      	ldr	r2, [pc, #132]	@ (800afc0 <_ZN13Communication14ToggleLoadCellEb+0x98>)
 800af3c:	78fb      	ldrb	r3, [r7, #3]
 800af3e:	70d3      	strb	r3, [r2, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800af40:	4b20      	ldr	r3, [pc, #128]	@ (800afc4 <_ZN13Communication14ToggleLoadCellEb+0x9c>)
 800af42:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800af46:	2b04      	cmp	r3, #4
 800af48:	d104      	bne.n	800af54 <_ZN13Communication14ToggleLoadCellEb+0x2c>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800af4a:	2102      	movs	r1, #2
 800af4c:	2000      	movs	r0, #0
 800af4e:	f003 ff1f 	bl	800ed90 <ErrorResult>
		return;
 800af52:	e031      	b.n	800afb8 <_ZN13Communication14ToggleLoadCellEb+0x90>
	}
	if(isStart){
 800af54:	78fb      	ldrb	r3, [r7, #3]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d01a      	beq.n	800af90 <_ZN13Communication14ToggleLoadCellEb+0x68>
		if(ThreadStorage.FlowThreadId!=NULL) return;
 800af5a:	4b1b      	ldr	r3, [pc, #108]	@ (800afc8 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800af5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d127      	bne.n	800afb2 <_ZN13Communication14ToggleLoadCellEb+0x8a>
		if(ThreadStorage.VolumeThreadId!=NULL) return;
 800af62:	4b19      	ldr	r3, [pc, #100]	@ (800afc8 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800af64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af66:	2b00      	cmp	r3, #0
 800af68:	d125      	bne.n	800afb6 <_ZN13Communication14ToggleLoadCellEb+0x8e>
		ClearLoadcellParams();
 800af6a:	f005 fc79 	bl	8010860 <ClearLoadcellParams>
		ThreadStorage.VolumeThreadId = osThreadNew(StartVolumeTask, NULL, &ThreadStorage.VolumeThreadAttr);
 800af6e:	4a17      	ldr	r2, [pc, #92]	@ (800afcc <_ZN13Communication14ToggleLoadCellEb+0xa4>)
 800af70:	2100      	movs	r1, #0
 800af72:	4817      	ldr	r0, [pc, #92]	@ (800afd0 <_ZN13Communication14ToggleLoadCellEb+0xa8>)
 800af74:	f7fb fc9e 	bl	80068b4 <osThreadNew>
 800af78:	4603      	mov	r3, r0
 800af7a:	4a13      	ldr	r2, [pc, #76]	@ (800afc8 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800af7c:	6593      	str	r3, [r2, #88]	@ 0x58
		ThreadStorage.FlowThreadId = osThreadNew(StartFlowTask, NULL, &ThreadStorage.FlowThreadAttr);
 800af7e:	4a15      	ldr	r2, [pc, #84]	@ (800afd4 <_ZN13Communication14ToggleLoadCellEb+0xac>)
 800af80:	2100      	movs	r1, #0
 800af82:	4815      	ldr	r0, [pc, #84]	@ (800afd8 <_ZN13Communication14ToggleLoadCellEb+0xb0>)
 800af84:	f7fb fc96 	bl	80068b4 <osThreadNew>
 800af88:	4603      	mov	r3, r0
 800af8a:	4a0f      	ldr	r2, [pc, #60]	@ (800afc8 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800af8c:	65d3      	str	r3, [r2, #92]	@ 0x5c
		return;
 800af8e:	e013      	b.n	800afb8 <_ZN13Communication14ToggleLoadCellEb+0x90>
	}
	osThreadTerminate(ThreadStorage.VolumeThreadId);
 800af90:	4b0d      	ldr	r3, [pc, #52]	@ (800afc8 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800af92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af94:	4618      	mov	r0, r3
 800af96:	f7fb fd1f 	bl	80069d8 <osThreadTerminate>
	osThreadTerminate(ThreadStorage.FlowThreadId);
 800af9a:	4b0b      	ldr	r3, [pc, #44]	@ (800afc8 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800af9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fb fd1a 	bl	80069d8 <osThreadTerminate>
	ThreadStorage.VolumeThreadId=NULL;
 800afa4:	4b08      	ldr	r3, [pc, #32]	@ (800afc8 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800afa6:	2200      	movs	r2, #0
 800afa8:	659a      	str	r2, [r3, #88]	@ 0x58
	ThreadStorage.FlowThreadId=NULL;
 800afaa:	4b07      	ldr	r3, [pc, #28]	@ (800afc8 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800afac:	2200      	movs	r2, #0
 800afae:	65da      	str	r2, [r3, #92]	@ 0x5c
 800afb0:	e002      	b.n	800afb8 <_ZN13Communication14ToggleLoadCellEb+0x90>
		if(ThreadStorage.FlowThreadId!=NULL) return;
 800afb2:	bf00      	nop
 800afb4:	e000      	b.n	800afb8 <_ZN13Communication14ToggleLoadCellEb+0x90>
		if(ThreadStorage.VolumeThreadId!=NULL) return;
 800afb6:	bf00      	nop
}
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20009320 	.word	0x20009320
 800afc4:	20009328 	.word	0x20009328
 800afc8:	20009138 	.word	0x20009138
 800afcc:	200091c4 	.word	0x200091c4
 800afd0:	0800fd49 	.word	0x0800fd49
 800afd4:	200091e8 	.word	0x200091e8
 800afd8:	0800fbd1 	.word	0x0800fbd1

0800afdc <_ZN13Communication16ToggleReadVolumeEb>:
void Communication::ToggleReadVolume(bool isStart){
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800afe8:	4b15      	ldr	r3, [pc, #84]	@ (800b040 <_ZN13Communication16ToggleReadVolumeEb+0x64>)
 800afea:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800afee:	2b04      	cmp	r3, #4
 800aff0:	d104      	bne.n	800affc <_ZN13Communication16ToggleReadVolumeEb+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800aff2:	2102      	movs	r1, #2
 800aff4:	2000      	movs	r0, #0
 800aff6:	f003 fecb 	bl	800ed90 <ErrorResult>
		return;
 800affa:	e01d      	b.n	800b038 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
	}
	if(isStart){
 800affc:	78fb      	ldrb	r3, [r7, #3]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00e      	beq.n	800b020 <_ZN13Communication16ToggleReadVolumeEb+0x44>
		if(ThreadStorage.ReadVolumeThreadId!=NULL) return;
 800b002:	4b10      	ldr	r3, [pc, #64]	@ (800b044 <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800b004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b006:	2b00      	cmp	r3, #0
 800b008:	d115      	bne.n	800b036 <_ZN13Communication16ToggleReadVolumeEb+0x5a>
		ClearLoadcellParams();
 800b00a:	f005 fc29 	bl	8010860 <ClearLoadcellParams>
		ThreadStorage.ReadVolumeThreadId = osThreadNew(StartReadVolumeTask, NULL, &ThreadStorage.VolumeThreadAttr);
 800b00e:	4a0e      	ldr	r2, [pc, #56]	@ (800b048 <_ZN13Communication16ToggleReadVolumeEb+0x6c>)
 800b010:	2100      	movs	r1, #0
 800b012:	480e      	ldr	r0, [pc, #56]	@ (800b04c <_ZN13Communication16ToggleReadVolumeEb+0x70>)
 800b014:	f7fb fc4e 	bl	80068b4 <osThreadNew>
 800b018:	4603      	mov	r3, r0
 800b01a:	4a0a      	ldr	r2, [pc, #40]	@ (800b044 <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800b01c:	6613      	str	r3, [r2, #96]	@ 0x60
		return;
 800b01e:	e00b      	b.n	800b038 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
	}
	osThreadTerminate(ThreadStorage.ReadVolumeThreadId);
 800b020:	4b08      	ldr	r3, [pc, #32]	@ (800b044 <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800b022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b024:	4618      	mov	r0, r3
 800b026:	f7fb fcd7 	bl	80069d8 <osThreadTerminate>
	ThreadStorage.ReadVolumeThreadId=NULL;
 800b02a:	4b06      	ldr	r3, [pc, #24]	@ (800b044 <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	661a      	str	r2, [r3, #96]	@ 0x60
	ClearLoadcellParams();
 800b030:	f005 fc16 	bl	8010860 <ClearLoadcellParams>
 800b034:	e000      	b.n	800b038 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
		if(ThreadStorage.ReadVolumeThreadId!=NULL) return;
 800b036:	bf00      	nop
}
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	20009328 	.word	0x20009328
 800b044:	20009138 	.word	0x20009138
 800b048:	200091c4 	.word	0x200091c4
 800b04c:	0800fdcd 	.word	0x0800fdcd

0800b050 <_ZN13Communication14ToggleReadFlowEb>:

void Communication::ToggleReadFlow(bool isStart){
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	460b      	mov	r3, r1
 800b05a:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800b05c:	4b15      	ldr	r3, [pc, #84]	@ (800b0b4 <_ZN13Communication14ToggleReadFlowEb+0x64>)
 800b05e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b062:	2b04      	cmp	r3, #4
 800b064:	d104      	bne.n	800b070 <_ZN13Communication14ToggleReadFlowEb+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b066:	2102      	movs	r1, #2
 800b068:	2000      	movs	r0, #0
 800b06a:	f003 fe91 	bl	800ed90 <ErrorResult>
		return;
 800b06e:	e01d      	b.n	800b0ac <_ZN13Communication14ToggleReadFlowEb+0x5c>
	}
	if(isStart){
 800b070:	78fb      	ldrb	r3, [r7, #3]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00e      	beq.n	800b094 <_ZN13Communication14ToggleReadFlowEb+0x44>
		if(ThreadStorage.ReadFlowThreadId!=NULL) return;
 800b076:	4b10      	ldr	r3, [pc, #64]	@ (800b0b8 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800b078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d115      	bne.n	800b0aa <_ZN13Communication14ToggleReadFlowEb+0x5a>
		ClearLoadcellParams();
 800b07e:	f005 fbef 	bl	8010860 <ClearLoadcellParams>
		ThreadStorage.ReadFlowThreadId = osThreadNew(StartReadFlowTask, NULL, &ThreadStorage.FlowThreadAttr);
 800b082:	4a0e      	ldr	r2, [pc, #56]	@ (800b0bc <_ZN13Communication14ToggleReadFlowEb+0x6c>)
 800b084:	2100      	movs	r1, #0
 800b086:	480e      	ldr	r0, [pc, #56]	@ (800b0c0 <_ZN13Communication14ToggleReadFlowEb+0x70>)
 800b088:	f7fb fc14 	bl	80068b4 <osThreadNew>
 800b08c:	4603      	mov	r3, r0
 800b08e:	4a0a      	ldr	r2, [pc, #40]	@ (800b0b8 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800b090:	6653      	str	r3, [r2, #100]	@ 0x64
		return;
 800b092:	e00b      	b.n	800b0ac <_ZN13Communication14ToggleReadFlowEb+0x5c>
	}
	osThreadTerminate(ThreadStorage.ReadFlowThreadId);
 800b094:	4b08      	ldr	r3, [pc, #32]	@ (800b0b8 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800b096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fb fc9d 	bl	80069d8 <osThreadTerminate>
	ThreadStorage.ReadFlowThreadId=NULL;
 800b09e:	4b06      	ldr	r3, [pc, #24]	@ (800b0b8 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	665a      	str	r2, [r3, #100]	@ 0x64
	ClearLoadcellParams();
 800b0a4:	f005 fbdc 	bl	8010860 <ClearLoadcellParams>
 800b0a8:	e000      	b.n	800b0ac <_ZN13Communication14ToggleReadFlowEb+0x5c>
		if(ThreadStorage.ReadFlowThreadId!=NULL) return;
 800b0aa:	bf00      	nop
}
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20009328 	.word	0x20009328
 800b0b8:	20009138 	.word	0x20009138
 800b0bc:	200091e8 	.word	0x200091e8
 800b0c0:	0800fc4d 	.word	0x0800fc4d

0800b0c4 <_ZN13Communication18ToggleReadFirstEmgEb>:

void Communication::ToggleReadFirstEmg(bool isStart){
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800b0d0:	4b13      	ldr	r3, [pc, #76]	@ (800b120 <_ZN13Communication18ToggleReadFirstEmgEb+0x5c>)
 800b0d2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b0d6:	2b04      	cmp	r3, #4
 800b0d8:	d104      	bne.n	800b0e4 <_ZN13Communication18ToggleReadFirstEmgEb+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b0da:	2102      	movs	r1, #2
 800b0dc:	2000      	movs	r0, #0
 800b0de:	f003 fe57 	bl	800ed90 <ErrorResult>
		return;
 800b0e2:	e019      	b.n	800b118 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
	}
	if(isStart){
 800b0e4:	78fb      	ldrb	r3, [r7, #3]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00c      	beq.n	800b104 <_ZN13Communication18ToggleReadFirstEmgEb+0x40>
		if(ThreadStorage.ReadFirstEmgThreadId!=NULL) return;
 800b0ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b124 <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800b0ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d111      	bne.n	800b116 <_ZN13Communication18ToggleReadFirstEmgEb+0x52>
		ThreadStorage.ReadFirstEmgThreadId = osThreadNew(StartReadFirstEmgTask, NULL, &ThreadStorage.FlowThreadAttr);
 800b0f2:	4a0d      	ldr	r2, [pc, #52]	@ (800b128 <_ZN13Communication18ToggleReadFirstEmgEb+0x64>)
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	480d      	ldr	r0, [pc, #52]	@ (800b12c <_ZN13Communication18ToggleReadFirstEmgEb+0x68>)
 800b0f8:	f7fb fbdc 	bl	80068b4 <osThreadNew>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	4a09      	ldr	r2, [pc, #36]	@ (800b124 <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800b100:	6693      	str	r3, [r2, #104]	@ 0x68
		return;
 800b102:	e009      	b.n	800b118 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
	}
	osThreadTerminate(ThreadStorage.ReadFirstEmgThreadId);
 800b104:	4b07      	ldr	r3, [pc, #28]	@ (800b124 <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800b106:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fb fc65 	bl	80069d8 <osThreadTerminate>
	ThreadStorage.ReadFirstEmgThreadId=NULL;
 800b10e:	4b05      	ldr	r3, [pc, #20]	@ (800b124 <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800b110:	2200      	movs	r2, #0
 800b112:	669a      	str	r2, [r3, #104]	@ 0x68
 800b114:	e000      	b.n	800b118 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
		if(ThreadStorage.ReadFirstEmgThreadId!=NULL) return;
 800b116:	bf00      	nop
}
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20009328 	.word	0x20009328
 800b124:	20009138 	.word	0x20009138
 800b128:	200091e8 	.word	0x200091e8
 800b12c:	0800f97d 	.word	0x0800f97d

0800b130 <_ZN13Communication19ToggleReadSecondEmgEb>:

void Communication::ToggleReadSecondEmg(bool isStart){
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	460b      	mov	r3, r1
 800b13a:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode==SystemModes::SafeMode){
 800b13c:	4b13      	ldr	r3, [pc, #76]	@ (800b18c <_ZN13Communication19ToggleReadSecondEmgEb+0x5c>)
 800b13e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b142:	2b04      	cmp	r3, #4
 800b144:	d104      	bne.n	800b150 <_ZN13Communication19ToggleReadSecondEmgEb+0x20>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b146:	2102      	movs	r1, #2
 800b148:	2000      	movs	r0, #0
 800b14a:	f003 fe21 	bl	800ed90 <ErrorResult>
		return;
 800b14e:	e019      	b.n	800b184 <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
	}
	if(isStart){
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00c      	beq.n	800b170 <_ZN13Communication19ToggleReadSecondEmgEb+0x40>
		if(ThreadStorage.ReadSecondEmgThreadId!=NULL) return;
 800b156:	4b0e      	ldr	r3, [pc, #56]	@ (800b190 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800b158:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d111      	bne.n	800b182 <_ZN13Communication19ToggleReadSecondEmgEb+0x52>
		ThreadStorage.ReadSecondEmgThreadId = osThreadNew(StartReadSecondEmgTask, NULL, &ThreadStorage.FlowThreadAttr);
 800b15e:	4a0d      	ldr	r2, [pc, #52]	@ (800b194 <_ZN13Communication19ToggleReadSecondEmgEb+0x64>)
 800b160:	2100      	movs	r1, #0
 800b162:	480d      	ldr	r0, [pc, #52]	@ (800b198 <_ZN13Communication19ToggleReadSecondEmgEb+0x68>)
 800b164:	f7fb fba6 	bl	80068b4 <osThreadNew>
 800b168:	4603      	mov	r3, r0
 800b16a:	4a09      	ldr	r2, [pc, #36]	@ (800b190 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800b16c:	66d3      	str	r3, [r2, #108]	@ 0x6c
		return;
 800b16e:	e009      	b.n	800b184 <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
	}
	osThreadTerminate(ThreadStorage.ReadSecondEmgThreadId);
 800b170:	4b07      	ldr	r3, [pc, #28]	@ (800b190 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800b172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b174:	4618      	mov	r0, r3
 800b176:	f7fb fc2f 	bl	80069d8 <osThreadTerminate>
	ThreadStorage.ReadSecondEmgThreadId=NULL;
 800b17a:	4b05      	ldr	r3, [pc, #20]	@ (800b190 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800b17c:	2200      	movs	r2, #0
 800b17e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b180:	e000      	b.n	800b184 <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
		if(ThreadStorage.ReadSecondEmgThreadId!=NULL) return;
 800b182:	bf00      	nop
}
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20009328 	.word	0x20009328
 800b190:	20009138 	.word	0x20009138
 800b194:	200091e8 	.word	0x200091e8
 800b198:	0800fae5 	.word	0x0800fae5

0800b19c <_ZN13Communication10TogglePumpEb>:

void Communication::TogglePump(bool isStart){
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	70fb      	strb	r3, [r7, #3]
	Statuses.Pump=isStart;
 800b1a8:	4a14      	ldr	r2, [pc, #80]	@ (800b1fc <_ZN13Communication10TogglePumpEb+0x60>)
 800b1aa:	78fb      	ldrb	r3, [r7, #3]
 800b1ac:	7113      	strb	r3, [r2, #4]
	if(isStart){
 800b1ae:	78fb      	ldrb	r3, [r7, #3]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d011      	beq.n	800b1d8 <_ZN13Communication10TogglePumpEb+0x3c>
		if(ThreadStorage.PumpMaxRunThreadId!=NULL) return;
 800b1b4:	4b12      	ldr	r3, [pc, #72]	@ (800b200 <_ZN13Communication10TogglePumpEb+0x64>)
 800b1b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d11b      	bne.n	800b1f4 <_ZN13Communication10TogglePumpEb+0x58>
		HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_SET);
 800b1bc:	2201      	movs	r2, #1
 800b1be:	2101      	movs	r1, #1
 800b1c0:	4810      	ldr	r0, [pc, #64]	@ (800b204 <_ZN13Communication10TogglePumpEb+0x68>)
 800b1c2:	f7f7 ff27 	bl	8003014 <HAL_GPIO_WritePin>
		ThreadStorage.PumpMaxRunThreadId = osThreadNew(StartAutoClosePumpTask, NULL, &ThreadStorage.PumpMaxRunThreadAttr);
 800b1c6:	4a10      	ldr	r2, [pc, #64]	@ (800b208 <_ZN13Communication10TogglePumpEb+0x6c>)
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	4810      	ldr	r0, [pc, #64]	@ (800b20c <_ZN13Communication10TogglePumpEb+0x70>)
 800b1cc:	f7fb fb72 	bl	80068b4 <osThreadNew>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	4a0b      	ldr	r2, [pc, #44]	@ (800b200 <_ZN13Communication10TogglePumpEb+0x64>)
 800b1d4:	6713      	str	r3, [r2, #112]	@ 0x70
		return;
 800b1d6:	e00e      	b.n	800b1f6 <_ZN13Communication10TogglePumpEb+0x5a>
	}
	HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_RESET);
 800b1d8:	2200      	movs	r2, #0
 800b1da:	2101      	movs	r1, #1
 800b1dc:	4809      	ldr	r0, [pc, #36]	@ (800b204 <_ZN13Communication10TogglePumpEb+0x68>)
 800b1de:	f7f7 ff19 	bl	8003014 <HAL_GPIO_WritePin>
	osThreadTerminate(ThreadStorage.PumpMaxRunThreadId);
 800b1e2:	4b07      	ldr	r3, [pc, #28]	@ (800b200 <_ZN13Communication10TogglePumpEb+0x64>)
 800b1e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fb fbf6 	bl	80069d8 <osThreadTerminate>
	ThreadStorage.PumpMaxRunThreadId=NULL;
 800b1ec:	4b04      	ldr	r3, [pc, #16]	@ (800b200 <_ZN13Communication10TogglePumpEb+0x64>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	671a      	str	r2, [r3, #112]	@ 0x70
 800b1f2:	e000      	b.n	800b1f6 <_ZN13Communication10TogglePumpEb+0x5a>
		if(ThreadStorage.PumpMaxRunThreadId!=NULL) return;
 800b1f4:	bf00      	nop

}
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20009320 	.word	0x20009320
 800b200:	20009138 	.word	0x20009138
 800b204:	40020400 	.word	0x40020400
 800b208:	2000920c 	.word	0x2000920c
 800b20c:	0800fec9 	.word	0x0800fec9

0800b210 <_ZN13Communication11ToggleValveEb>:

void Communication::ToggleValve(bool isStart){
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	70fb      	strb	r3, [r7, #3]
	Statuses.Valve=isStart;
 800b21c:	4a14      	ldr	r2, [pc, #80]	@ (800b270 <_ZN13Communication11ToggleValveEb+0x60>)
 800b21e:	78fb      	ldrb	r3, [r7, #3]
 800b220:	7153      	strb	r3, [r2, #5]
	if(isStart){
 800b222:	78fb      	ldrb	r3, [r7, #3]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d011      	beq.n	800b24c <_ZN13Communication11ToggleValveEb+0x3c>
		if(ThreadStorage.ValveMaxRunThreadId!=NULL) return;
 800b228:	4b12      	ldr	r3, [pc, #72]	@ (800b274 <_ZN13Communication11ToggleValveEb+0x64>)
 800b22a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d11b      	bne.n	800b268 <_ZN13Communication11ToggleValveEb+0x58>
		HAL_GPIO_WritePin(VALVE_GPIO_Port, VALVE_Pin, GPIO_PIN_SET);
 800b230:	2201      	movs	r2, #1
 800b232:	2102      	movs	r1, #2
 800b234:	4810      	ldr	r0, [pc, #64]	@ (800b278 <_ZN13Communication11ToggleValveEb+0x68>)
 800b236:	f7f7 feed 	bl	8003014 <HAL_GPIO_WritePin>
		ThreadStorage.ValveMaxRunThreadId = osThreadNew(StartAutoCloseValveTask, NULL, &ThreadStorage.ValveMaxRunThreadAttr);
 800b23a:	4a10      	ldr	r2, [pc, #64]	@ (800b27c <_ZN13Communication11ToggleValveEb+0x6c>)
 800b23c:	2100      	movs	r1, #0
 800b23e:	4810      	ldr	r0, [pc, #64]	@ (800b280 <_ZN13Communication11ToggleValveEb+0x70>)
 800b240:	f7fb fb38 	bl	80068b4 <osThreadNew>
 800b244:	4603      	mov	r3, r0
 800b246:	4a0b      	ldr	r2, [pc, #44]	@ (800b274 <_ZN13Communication11ToggleValveEb+0x64>)
 800b248:	6753      	str	r3, [r2, #116]	@ 0x74
		return;
 800b24a:	e00e      	b.n	800b26a <_ZN13Communication11ToggleValveEb+0x5a>
	}
	HAL_GPIO_WritePin(VALVE_GPIO_Port, VALVE_Pin, GPIO_PIN_RESET);
 800b24c:	2200      	movs	r2, #0
 800b24e:	2102      	movs	r1, #2
 800b250:	4809      	ldr	r0, [pc, #36]	@ (800b278 <_ZN13Communication11ToggleValveEb+0x68>)
 800b252:	f7f7 fedf 	bl	8003014 <HAL_GPIO_WritePin>
	osThreadTerminate(ThreadStorage.ValveMaxRunThreadId);
 800b256:	4b07      	ldr	r3, [pc, #28]	@ (800b274 <_ZN13Communication11ToggleValveEb+0x64>)
 800b258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fb fbbc 	bl	80069d8 <osThreadTerminate>
	ThreadStorage.ValveMaxRunThreadId=NULL;
 800b260:	4b04      	ldr	r3, [pc, #16]	@ (800b274 <_ZN13Communication11ToggleValveEb+0x64>)
 800b262:	2200      	movs	r2, #0
 800b264:	675a      	str	r2, [r3, #116]	@ 0x74
 800b266:	e000      	b.n	800b26a <_ZN13Communication11ToggleValveEb+0x5a>
		if(ThreadStorage.ValveMaxRunThreadId!=NULL) return;
 800b268:	bf00      	nop
}
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	20009320 	.word	0x20009320
 800b274:	20009138 	.word	0x20009138
 800b278:	40020400 	.word	0x40020400
 800b27c:	20009230 	.word	0x20009230
 800b280:	0800fefd 	.word	0x0800fefd

0800b284 <_ZN13Communication16ToggleDataStreamEb>:
void Communication::ToggleDataStream(bool isStart){
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	460b      	mov	r3, r1
 800b28e:	70fb      	strb	r3, [r7, #3]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode && SystemConfig.systemMode!=SystemModes::TestMode){
 800b290:	4b18      	ldr	r3, [pc, #96]	@ (800b2f4 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b292:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00e      	beq.n	800b2b8 <_ZN13Communication16ToggleDataStreamEb+0x34>
 800b29a:	4b16      	ldr	r3, [pc, #88]	@ (800b2f4 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b29c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d009      	beq.n	800b2b8 <_ZN13Communication16ToggleDataStreamEb+0x34>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b2a4:	2102      	movs	r1, #2
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	f003 fd72 	bl	800ed90 <ErrorResult>
		SendFeedback(RequestType::R_Command,CommandRequestType::CMDR_DataStream, ProcessStatuses::PS_End);
 800b2ac:	2202      	movs	r2, #2
 800b2ae:	2108      	movs	r1, #8
 800b2b0:	2002      	movs	r0, #2
 800b2b2:	f003 fcc9 	bl	800ec48 <SendFeedback>
		return;
 800b2b6:	e01a      	b.n	800b2ee <_ZN13Communication16ToggleDataStreamEb+0x6a>
	}
	SystemConfig.IsStartTest=isStart;
 800b2b8:	4a0e      	ldr	r2, [pc, #56]	@ (800b2f4 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b2ba:	78fb      	ldrb	r3, [r7, #3]
 800b2bc:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
	if(isStart&&!pauseFlg){
 800b2c0:	78fb      	ldrb	r3, [r7, #3]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00f      	beq.n	800b2e6 <_ZN13Communication16ToggleDataStreamEb+0x62>
 800b2c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b2f8 <_ZN13Communication16ToggleDataStreamEb+0x74>)
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	f083 0301 	eor.w	r3, r3, #1
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d008      	beq.n	800b2e6 <_ZN13Communication16ToggleDataStreamEb+0x62>
		SystemConfig.StartTestTime=StartTimerTicks;
 800b2d4:	4b09      	ldr	r3, [pc, #36]	@ (800b2fc <_ZN13Communication16ToggleDataStreamEb+0x78>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a06      	ldr	r2, [pc, #24]	@ (800b2f4 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b2da:	6313      	str	r3, [r2, #48]	@ 0x30
		SystemConfig.systemMode=SystemModes::TestMode;
 800b2dc:	4b05      	ldr	r3, [pc, #20]	@ (800b2f4 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
		return;
 800b2e4:	e003      	b.n	800b2ee <_ZN13Communication16ToggleDataStreamEb+0x6a>
	}
	SystemConfig.systemMode=SystemModes::EmptyMode;
 800b2e6:	4b03      	ldr	r3, [pc, #12]	@ (800b2f4 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
}
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	20009328 	.word	0x20009328
 800b2f8:	20004ee0 	.word	0x20004ee0
 800b2fc:	200000cc 	.word	0x200000cc

0800b300 <_ZN13Communication9StartTestEbbbth>:
void Communication::StartTest(bool isStartFirstEmg,bool isStartSecondEmg,bool isStartLoadcell,uint16_t cleanTime,uint8_t startHandleSeconds){
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	4608      	mov	r0, r1
 800b30a:	4611      	mov	r1, r2
 800b30c:	461a      	mov	r2, r3
 800b30e:	4603      	mov	r3, r0
 800b310:	70fb      	strb	r3, [r7, #3]
 800b312:	460b      	mov	r3, r1
 800b314:	70bb      	strb	r3, [r7, #2]
 800b316:	4613      	mov	r3, r2
 800b318:	707b      	strb	r3, [r7, #1]

	SystemConfig.CleanTime=cleanTime;
 800b31a:	4a15      	ldr	r2, [pc, #84]	@ (800b370 <_ZN13Communication9StartTestEbbbth+0x70>)
 800b31c:	8a3b      	ldrh	r3, [r7, #16]
 800b31e:	8593      	strh	r3, [r2, #44]	@ 0x2c
	StartCleanTask(NULL);
 800b320:	2000      	movs	r0, #0
 800b322:	f005 f889 	bl	8010438 <StartCleanTask>
	FixVolume();
 800b326:	f005 fa4f 	bl	80107c8 <FixVolume>
	ToggleFirstEmg(isStartFirstEmg);
 800b32a:	78fb      	ldrb	r3, [r7, #3]
 800b32c:	4619      	mov	r1, r3
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7ff fd9e 	bl	800ae70 <_ZN13Communication14ToggleFirstEmgEb>
	ToggleSecondEmg(isStartSecondEmg);
 800b334:	78bb      	ldrb	r3, [r7, #2]
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7ff fdc7 	bl	800aecc <_ZN13Communication15ToggleSecondEmgEb>
	ToggleLoadCell(isStartLoadcell);
 800b33e:	787b      	ldrb	r3, [r7, #1]
 800b340:	4619      	mov	r1, r3
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff fdf0 	bl	800af28 <_ZN13Communication14ToggleLoadCellEb>
	SystemConfig.StartHandleSeconds=startHandleSeconds;
 800b348:	4a09      	ldr	r2, [pc, #36]	@ (800b370 <_ZN13Communication9StartTestEbbbth+0x70>)
 800b34a:	7d3b      	ldrb	r3, [r7, #20]
 800b34c:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
	ToggleDataStream(true);
 800b350:	2101      	movs	r1, #1
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7ff ff96 	bl	800b284 <_ZN13Communication16ToggleDataStreamEb>
	SystemConfig.PocketIndex=0;
 800b358:	4b05      	ldr	r3, [pc, #20]	@ (800b370 <_ZN13Communication9StartTestEbbbth+0x70>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	66da      	str	r2, [r3, #108]	@ 0x6c
	SystemConfig.systemMode=SystemModes::TestMode;
 800b35e:	4b04      	ldr	r3, [pc, #16]	@ (800b370 <_ZN13Communication9StartTestEbbbth+0x70>)
 800b360:	2201      	movs	r2, #1
 800b362:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
}
 800b366:	bf00      	nop
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	20009328 	.word	0x20009328

0800b374 <_ZN13Communication8StopTestEt>:
void Communication::StopTest(uint16_t cleanTime){
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	460b      	mov	r3, r1
 800b37e:	807b      	strh	r3, [r7, #2]
	SystemConfig.CleanTime=cleanTime;
 800b380:	4a16      	ldr	r2, [pc, #88]	@ (800b3dc <_ZN13Communication8StopTestEt+0x68>)
 800b382:	887b      	ldrh	r3, [r7, #2]
 800b384:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ToggleDataStream(false);
 800b386:	2100      	movs	r1, #0
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f7ff ff7b 	bl	800b284 <_ZN13Communication16ToggleDataStreamEb>
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_StopTest, ProcessStatuses::PS_Processing);
 800b38e:	2201      	movs	r2, #1
 800b390:	21fd      	movs	r1, #253	@ 0xfd
 800b392:	2002      	movs	r0, #2
 800b394:	f003 fc58 	bl	800ec48 <SendFeedback>
	ToggleFirstEmg(false);
 800b398:	2100      	movs	r1, #0
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f7ff fd68 	bl	800ae70 <_ZN13Communication14ToggleFirstEmgEb>
	ToggleSecondEmg(false);
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7ff fd92 	bl	800aecc <_ZN13Communication15ToggleSecondEmgEb>
	ToggleLoadCell(false);
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7ff fdbc 	bl	800af28 <_ZN13Communication14ToggleLoadCellEb>
	StartCleanTask(NULL);
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	f005 f841 	bl	8010438 <StartCleanTask>
	SystemConfig.PocketIndex=0;
 800b3b6:	4b09      	ldr	r3, [pc, #36]	@ (800b3dc <_ZN13Communication8StopTestEt+0x68>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	66da      	str	r2, [r3, #108]	@ 0x6c
	SystemConfig.systemMode=SystemModes::EmptyMode;
 800b3bc:	4b07      	ldr	r3, [pc, #28]	@ (800b3dc <_ZN13Communication8StopTestEt+0x68>)
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_StopTest, ProcessStatuses::PS_End);
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	21fd      	movs	r1, #253	@ 0xfd
 800b3c8:	2002      	movs	r0, #2
 800b3ca:	f003 fc3d 	bl	800ec48 <SendFeedback>
    HAL_NVIC_SystemReset();
 800b3ce:	f7f6 fd9a 	bl	8001f06 <HAL_NVIC_SystemReset>
}
 800b3d2:	bf00      	nop
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20009328 	.word	0x20009328

0800b3e0 <_ZN13Communication10resumeTestEv>:

//**************************************** Resume/Pause FNs *******************************************//
void Communication::resumeTest(void){
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
	ToggleFirstEmg(true);
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7ff fd40 	bl	800ae70 <_ZN13Communication14ToggleFirstEmgEb>
	ToggleSecondEmg(true);
 800b3f0:	2101      	movs	r1, #1
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7ff fd6a 	bl	800aecc <_ZN13Communication15ToggleSecondEmgEb>
	ToggleLoadCell(true);
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff fd94 	bl	800af28 <_ZN13Communication14ToggleLoadCellEb>
	ToggleDataStream(true);
 800b400:	2101      	movs	r1, #1
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7ff ff3e 	bl	800b284 <_ZN13Communication16ToggleDataStreamEb>
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_ResumeTest, ProcessStatuses::PS_End);
 800b408:	2202      	movs	r2, #2
 800b40a:	210f      	movs	r1, #15
 800b40c:	2002      	movs	r0, #2
 800b40e:	f003 fc1b 	bl	800ec48 <SendFeedback>
}
 800b412:	bf00      	nop
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <_ZN13Communication9pauseTestEv>:
void Communication::pauseTest(void){
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
	pauseFlg = true;
 800b424:	4b0f      	ldr	r3, [pc, #60]	@ (800b464 <_ZN13Communication9pauseTestEv+0x48>)
 800b426:	2201      	movs	r2, #1
 800b428:	701a      	strb	r2, [r3, #0]
	ToggleDataStream(false);
 800b42a:	2100      	movs	r1, #0
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7ff ff29 	bl	800b284 <_ZN13Communication16ToggleDataStreamEb>
	ToggleFirstEmg(false);
 800b432:	2100      	movs	r1, #0
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7ff fd1b 	bl	800ae70 <_ZN13Communication14ToggleFirstEmgEb>
	ToggleSecondEmg(false);
 800b43a:	2100      	movs	r1, #0
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f7ff fd45 	bl	800aecc <_ZN13Communication15ToggleSecondEmgEb>
	ToggleLoadCell(false);
 800b442:	2100      	movs	r1, #0
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7ff fd6f 	bl	800af28 <_ZN13Communication14ToggleLoadCellEb>
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_PauseTest, ProcessStatuses::PS_End);
 800b44a:	2202      	movs	r2, #2
 800b44c:	210e      	movs	r1, #14
 800b44e:	2002      	movs	r0, #2
 800b450:	f003 fbfa 	bl	800ec48 <SendFeedback>
	vTaskDelay(100);
 800b454:	2064      	movs	r0, #100	@ 0x64
 800b456:	f7fc ffb9 	bl	80083cc <vTaskDelay>
}
 800b45a:	bf00      	nop
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	20004ee0 	.word	0x20004ee0

0800b468 <_ZN13Communication10cancelTestEv>:
void Communication::cancelTest(void){
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
	pauseFlg = false;
 800b470:	4b17      	ldr	r3, [pc, #92]	@ (800b4d0 <_ZN13Communication10cancelTestEv+0x68>)
 800b472:	2200      	movs	r2, #0
 800b474:	701a      	strb	r2, [r3, #0]
	SystemConfig.CleanTime=0;//cleanTime;
 800b476:	4b17      	ldr	r3, [pc, #92]	@ (800b4d4 <_ZN13Communication10cancelTestEv+0x6c>)
 800b478:	2200      	movs	r2, #0
 800b47a:	859a      	strh	r2, [r3, #44]	@ 0x2c
	ToggleDataStream(false);
 800b47c:	2100      	movs	r1, #0
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7ff ff00 	bl	800b284 <_ZN13Communication16ToggleDataStreamEb>
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_CancelTest, ProcessStatuses::PS_Processing);
 800b484:	2201      	movs	r2, #1
 800b486:	210d      	movs	r1, #13
 800b488:	2002      	movs	r0, #2
 800b48a:	f003 fbdd 	bl	800ec48 <SendFeedback>
	ToggleFirstEmg(false);
 800b48e:	2100      	movs	r1, #0
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff fced 	bl	800ae70 <_ZN13Communication14ToggleFirstEmgEb>
	ToggleSecondEmg(false);
 800b496:	2100      	movs	r1, #0
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7ff fd17 	bl	800aecc <_ZN13Communication15ToggleSecondEmgEb>
	ToggleLoadCell(false);
 800b49e:	2100      	movs	r1, #0
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff fd41 	bl	800af28 <_ZN13Communication14ToggleLoadCellEb>
	//StartCleanTask(NULL);
	//StartPreManualTask(NULL);
	SystemConfig.PocketIndex=0;
 800b4a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b4d4 <_ZN13Communication10cancelTestEv+0x6c>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	66da      	str	r2, [r3, #108]	@ 0x6c
	SystemConfig.systemMode=SystemModes::EmptyMode;
 800b4ac:	4b09      	ldr	r3, [pc, #36]	@ (800b4d4 <_ZN13Communication10cancelTestEv+0x6c>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_CancelTest, ProcessStatuses::PS_End);
 800b4b4:	2202      	movs	r2, #2
 800b4b6:	210d      	movs	r1, #13
 800b4b8:	2002      	movs	r0, #2
 800b4ba:	f003 fbc5 	bl	800ec48 <SendFeedback>
	vTaskDelay(100);
 800b4be:	2064      	movs	r0, #100	@ 0x64
 800b4c0:	f7fc ff84 	bl	80083cc <vTaskDelay>
    HAL_NVIC_SystemReset();
 800b4c4:	f7f6 fd1f 	bl	8001f06 <HAL_NVIC_SystemReset>
}
 800b4c8:	bf00      	nop
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	20004ee0 	.word	0x20004ee0
 800b4d4:	20009328 	.word	0x20009328

0800b4d8 <_ZN13Communication10ManualPrepEt>:
//*********************************  Manual Mode Functions **********************************//
void Communication::ManualPrep(uint16_t cleanTime){
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	807b      	strh	r3, [r7, #2]
	SystemConfig.CleanTime=cleanTime;
 800b4e4:	4a09      	ldr	r2, [pc, #36]	@ (800b50c <_ZN13Communication10ManualPrepEt+0x34>)
 800b4e6:	887b      	ldrh	r3, [r7, #2]
 800b4e8:	8593      	strh	r3, [r2, #44]	@ 0x2c
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_StartManPrep, ProcessStatuses::PS_Processing);
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	211a      	movs	r1, #26
 800b4ee:	2002      	movs	r0, #2
 800b4f0:	f003 fbaa 	bl	800ec48 <SendFeedback>
	StartCleanTask(NULL);
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	f004 ff9f 	bl	8010438 <StartCleanTask>
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_StartManPrep, ProcessStatuses::PS_End);
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	211a      	movs	r1, #26
 800b4fe:	2002      	movs	r0, #2
 800b500:	f003 fba2 	bl	800ec48 <SendFeedback>
}
 800b504:	bf00      	nop
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	20009328 	.word	0x20009328

0800b510 <_ZN13Communication12StartManTestEbbbth>:
void Communication::StartManTest(bool isStartFirstEmg,bool isStartSecondEmg,bool isStartLoadcell,uint16_t cleanTime,uint8_t startHandleSeconds){
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	4608      	mov	r0, r1
 800b51a:	4611      	mov	r1, r2
 800b51c:	461a      	mov	r2, r3
 800b51e:	4603      	mov	r3, r0
 800b520:	70fb      	strb	r3, [r7, #3]
 800b522:	460b      	mov	r3, r1
 800b524:	70bb      	strb	r3, [r7, #2]
 800b526:	4613      	mov	r3, r2
 800b528:	707b      	strb	r3, [r7, #1]
	SystemConfig.CleanTime=cleanTime;
 800b52a:	4a16      	ldr	r2, [pc, #88]	@ (800b584 <_ZN13Communication12StartManTestEbbbth+0x74>)
 800b52c:	8a3b      	ldrh	r3, [r7, #16]
 800b52e:	8593      	strh	r3, [r2, #44]	@ 0x2c
	//StartCleanTask(NULL);
	FixVolume();
 800b530:	f005 f94a 	bl	80107c8 <FixVolume>
	ToggleFirstEmg(isStartFirstEmg);
 800b534:	78fb      	ldrb	r3, [r7, #3]
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff fc99 	bl	800ae70 <_ZN13Communication14ToggleFirstEmgEb>
	ToggleSecondEmg(isStartSecondEmg);
 800b53e:	78bb      	ldrb	r3, [r7, #2]
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7ff fcc2 	bl	800aecc <_ZN13Communication15ToggleSecondEmgEb>
	ToggleLoadCell(isStartLoadcell);
 800b548:	787b      	ldrb	r3, [r7, #1]
 800b54a:	4619      	mov	r1, r3
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff fceb 	bl	800af28 <_ZN13Communication14ToggleLoadCellEb>
	SystemConfig.StartHandleSeconds=startHandleSeconds;
 800b552:	4a0c      	ldr	r2, [pc, #48]	@ (800b584 <_ZN13Communication12StartManTestEbbbth+0x74>)
 800b554:	7d3b      	ldrb	r3, [r7, #20]
 800b556:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
	ToggleDataStream(true);
 800b55a:	2101      	movs	r1, #1
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f7ff fe91 	bl	800b284 <_ZN13Communication16ToggleDataStreamEb>
	SystemConfig.PocketIndex=0;
 800b562:	4b08      	ldr	r3, [pc, #32]	@ (800b584 <_ZN13Communication12StartManTestEbbbth+0x74>)
 800b564:	2200      	movs	r2, #0
 800b566:	66da      	str	r2, [r3, #108]	@ 0x6c
	SystemConfig.systemMode=SystemModes::TestMode;
 800b568:	4b06      	ldr	r3, [pc, #24]	@ (800b584 <_ZN13Communication12StartManTestEbbbth+0x74>)
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_StartManTest, ProcessStatuses::PS_End);
 800b570:	2202      	movs	r2, #2
 800b572:	211b      	movs	r1, #27
 800b574:	2002      	movs	r0, #2
 800b576:	f003 fb67 	bl	800ec48 <SendFeedback>
}
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	20009328 	.word	0x20009328

0800b588 <_ZN13Communication10StartCleanEt>:
//******************************************************************************************//
void Communication::StartClean(uint16_t cleanTime){
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	460b      	mov	r3, r1
 800b592:	807b      	strh	r3, [r7, #2]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800b594:	4b13      	ldr	r3, [pc, #76]	@ (800b5e4 <_ZN13Communication10StartCleanEt+0x5c>)
 800b596:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d009      	beq.n	800b5b2 <_ZN13Communication10StartCleanEt+0x2a>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b59e:	2102      	movs	r1, #2
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	f003 fbf5 	bl	800ed90 <ErrorResult>
		 SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_Clean, ProcessStatuses::PS_End);
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	2106      	movs	r1, #6
 800b5aa:	2002      	movs	r0, #2
 800b5ac:	f003 fb4c 	bl	800ec48 <SendFeedback>
		return;
 800b5b0:	e015      	b.n	800b5de <_ZN13Communication10StartCleanEt+0x56>
	}
	SystemConfig.systemMode=SystemModes::CleanMode;
 800b5b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e4 <_ZN13Communication10StartCleanEt+0x5c>)
 800b5b4:	2203      	movs	r2, #3
 800b5b6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	if(ThreadStorage.CleanThreadId==NULL){
 800b5ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e8 <_ZN13Communication10StartCleanEt+0x60>)
 800b5bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10c      	bne.n	800b5de <_ZN13Communication10StartCleanEt+0x56>
		SystemConfig.CleanTime=cleanTime;
 800b5c4:	4a07      	ldr	r2, [pc, #28]	@ (800b5e4 <_ZN13Communication10StartCleanEt+0x5c>)
 800b5c6:	887b      	ldrh	r3, [r7, #2]
 800b5c8:	8593      	strh	r3, [r2, #44]	@ 0x2c
		ThreadStorage.CleanThreadId = osThreadNew(StartCleanTask, NULL, &ThreadStorage.CleanThreadAttr);
 800b5ca:	4a08      	ldr	r2, [pc, #32]	@ (800b5ec <_ZN13Communication10StartCleanEt+0x64>)
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	4808      	ldr	r0, [pc, #32]	@ (800b5f0 <_ZN13Communication10StartCleanEt+0x68>)
 800b5d0:	f7fb f970 	bl	80068b4 <osThreadNew>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	4a04      	ldr	r2, [pc, #16]	@ (800b5e8 <_ZN13Communication10StartCleanEt+0x60>)
 800b5d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
		return;
 800b5dc:	bf00      	nop
	}
}
 800b5de:	3708      	adds	r7, #8
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	20009328 	.word	0x20009328
 800b5e8:	20009138 	.word	0x20009138
 800b5ec:	200092c0 	.word	0x200092c0
 800b5f0:	08010439 	.word	0x08010439

0800b5f4 <_ZN13Communication14ToggleSafeModeEb>:

void Communication::ToggleSafeMode(bool isStart){
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	70fb      	strb	r3, [r7, #3]

	Statuses.SafeMode=isStart;
 800b600:	4a23      	ldr	r2, [pc, #140]	@ (800b690 <_ZN13Communication14ToggleSafeModeEb+0x9c>)
 800b602:	78fb      	ldrb	r3, [r7, #3]
 800b604:	7193      	strb	r3, [r2, #6]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode && SystemConfig.systemMode!=SystemModes::SafeMode){
 800b606:	4b23      	ldr	r3, [pc, #140]	@ (800b694 <_ZN13Communication14ToggleSafeModeEb+0xa0>)
 800b608:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00e      	beq.n	800b62e <_ZN13Communication14ToggleSafeModeEb+0x3a>
 800b610:	4b20      	ldr	r3, [pc, #128]	@ (800b694 <_ZN13Communication14ToggleSafeModeEb+0xa0>)
 800b612:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b616:	2b04      	cmp	r3, #4
 800b618:	d009      	beq.n	800b62e <_ZN13Communication14ToggleSafeModeEb+0x3a>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b61a:	2102      	movs	r1, #2
 800b61c:	2000      	movs	r0, #0
 800b61e:	f003 fbb7 	bl	800ed90 <ErrorResult>
		SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_Safe, ProcessStatuses::PS_End);
 800b622:	2202      	movs	r2, #2
 800b624:	2107      	movs	r1, #7
 800b626:	2002      	movs	r0, #2
 800b628:	f003 fb0e 	bl	800ec48 <SendFeedback>
		return;
 800b62c:	e02d      	b.n	800b68a <_ZN13Communication14ToggleSafeModeEb+0x96>
	}
	if(isStart){
 800b62e:	78fb      	ldrb	r3, [r7, #3]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d012      	beq.n	800b65a <_ZN13Communication14ToggleSafeModeEb+0x66>
		if(ThreadStorage.SafeModeThreadId!=NULL)return;
 800b634:	4b18      	ldr	r3, [pc, #96]	@ (800b698 <_ZN13Communication14ToggleSafeModeEb+0xa4>)
 800b636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d124      	bne.n	800b688 <_ZN13Communication14ToggleSafeModeEb+0x94>
		SystemConfig.systemMode=SystemModes::SafeMode;
 800b63e:	4b15      	ldr	r3, [pc, #84]	@ (800b694 <_ZN13Communication14ToggleSafeModeEb+0xa0>)
 800b640:	2204      	movs	r2, #4
 800b642:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
		ThreadStorage.SafeModeThreadId = osThreadNew(StartSafeModeTask, NULL, &ThreadStorage.SafeModeThreadAttr);
 800b646:	4a15      	ldr	r2, [pc, #84]	@ (800b69c <_ZN13Communication14ToggleSafeModeEb+0xa8>)
 800b648:	2100      	movs	r1, #0
 800b64a:	4815      	ldr	r0, [pc, #84]	@ (800b6a0 <_ZN13Communication14ToggleSafeModeEb+0xac>)
 800b64c:	f7fb f932 	bl	80068b4 <osThreadNew>
 800b650:	4603      	mov	r3, r0
 800b652:	4a11      	ldr	r2, [pc, #68]	@ (800b698 <_ZN13Communication14ToggleSafeModeEb+0xa4>)
 800b654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
		return;
 800b658:	e017      	b.n	800b68a <_ZN13Communication14ToggleSafeModeEb+0x96>
	}
	SystemConfig.systemMode=SystemModes::EmptyMode;
 800b65a:	4b0e      	ldr	r3, [pc, #56]	@ (800b694 <_ZN13Communication14ToggleSafeModeEb+0xa0>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	osThreadTerminate(ThreadStorage.SafeModeThreadId);
 800b662:	4b0d      	ldr	r3, [pc, #52]	@ (800b698 <_ZN13Communication14ToggleSafeModeEb+0xa4>)
 800b664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fb f9b5 	bl	80069d8 <osThreadTerminate>
	TogglePump(false);
 800b66e:	2100      	movs	r1, #0
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7ff fd93 	bl	800b19c <_ZN13Communication10TogglePumpEb>
	ToggleValve(false);
 800b676:	2100      	movs	r1, #0
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff fdc9 	bl	800b210 <_ZN13Communication11ToggleValveEb>
	ThreadStorage.SafeModeThreadId=NULL;
 800b67e:	4b06      	ldr	r3, [pc, #24]	@ (800b698 <_ZN13Communication14ToggleSafeModeEb+0xa4>)
 800b680:	2200      	movs	r2, #0
 800b682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800b686:	e000      	b.n	800b68a <_ZN13Communication14ToggleSafeModeEb+0x96>
		if(ThreadStorage.SafeModeThreadId!=NULL)return;
 800b688:	bf00      	nop
}
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	20009320 	.word	0x20009320
 800b694:	20009328 	.word	0x20009328
 800b698:	20009138 	.word	0x20009138
 800b69c:	200092e4 	.word	0x200092e4
 800b6a0:	080106c1 	.word	0x080106c1

0800b6a4 <_ZN13Communication15LoadcellAverageEv>:

void Communication::LoadcellAverage(){
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800b6ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b6e8 <_ZN13Communication15LoadcellAverageEv+0x44>)
 800b6ae:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d009      	beq.n	800b6ca <_ZN13Communication15LoadcellAverageEv+0x26>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b6b6:	2102      	movs	r1, #2
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	f003 fb69 	bl	800ed90 <ErrorResult>
		SendFeedback(RequestType::R_System, SystemRequestType::SYSR_MeasurementAverage, ProcessStatuses::PS_End);
 800b6be:	2202      	movs	r2, #2
 800b6c0:	2104      	movs	r1, #4
 800b6c2:	2001      	movs	r0, #1
 800b6c4:	f003 fac0 	bl	800ec48 <SendFeedback>
		return;
 800b6c8:	e00b      	b.n	800b6e2 <_ZN13Communication15LoadcellAverageEv+0x3e>
	}
	SystemConfig.systemMode=SystemModes::CalibrationMode;
 800b6ca:	4b07      	ldr	r3, [pc, #28]	@ (800b6e8 <_ZN13Communication15LoadcellAverageEv+0x44>)
 800b6cc:	2202      	movs	r2, #2
 800b6ce:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	ThreadStorage.LoadcellAverageThreadId = osThreadNew(StartLoadcellAverageTask, NULL, &ThreadStorage.LoadcellAverageThreadAttr);
 800b6d2:	4a06      	ldr	r2, [pc, #24]	@ (800b6ec <_ZN13Communication15LoadcellAverageEv+0x48>)
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	4806      	ldr	r0, [pc, #24]	@ (800b6f0 <_ZN13Communication15LoadcellAverageEv+0x4c>)
 800b6d8:	f7fb f8ec 	bl	80068b4 <osThreadNew>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	4a05      	ldr	r2, [pc, #20]	@ (800b6f4 <_ZN13Communication15LoadcellAverageEv+0x50>)
 800b6e0:	6793      	str	r3, [r2, #120]	@ 0x78
}
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	20009328 	.word	0x20009328
 800b6ec:	20009254 	.word	0x20009254
 800b6f0:	0800ff45 	.word	0x0800ff45
 800b6f4:	20009138 	.word	0x20009138

0800b6f8 <_ZN13Communication25LoadcellVolumeCalibrationEt>:

void Communication::LoadcellVolumeCalibration(uint16_t weight){
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	460b      	mov	r3, r1
 800b702:	807b      	strh	r3, [r7, #2]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800b704:	4b14      	ldr	r3, [pc, #80]	@ (800b758 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800b706:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d009      	beq.n	800b722 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x2a>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b70e:	2102      	movs	r1, #2
 800b710:	2000      	movs	r0, #0
 800b712:	f003 fb3d 	bl	800ed90 <ErrorResult>
		SendFeedback(RequestType::R_System, SystemRequestType::SYSR_CalibrationVolume, ProcessStatuses::PS_End);
 800b716:	2202      	movs	r2, #2
 800b718:	2105      	movs	r1, #5
 800b71a:	2001      	movs	r0, #1
 800b71c:	f003 fa94 	bl	800ec48 <SendFeedback>
		return;
 800b720:	e017      	b.n	800b752 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x5a>
	}
	SystemConfig.systemMode=SystemModes::CalibrationMode;
 800b722:	4b0d      	ldr	r3, [pc, #52]	@ (800b758 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800b724:	2202      	movs	r2, #2
 800b726:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	SystemConfig.VolumeRate=1;
 800b72a:	4b0b      	ldr	r3, [pc, #44]	@ (800b758 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800b72c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b730:	61da      	str	r2, [r3, #28]
	SystemConfig.CalibrationWeight=weight;
 800b732:	887b      	ldrh	r3, [r7, #2]
 800b734:	ee07 3a90 	vmov	s15, r3
 800b738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73c:	4b06      	ldr	r3, [pc, #24]	@ (800b758 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800b73e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	ThreadStorage.CalibrationVolumeThreadId = osThreadNew(StartCalibrationVolumeTask, NULL, &ThreadStorage.CalibrationVolumeThreadAttr);
 800b742:	4a06      	ldr	r2, [pc, #24]	@ (800b75c <_ZN13Communication25LoadcellVolumeCalibrationEt+0x64>)
 800b744:	2100      	movs	r1, #0
 800b746:	4806      	ldr	r0, [pc, #24]	@ (800b760 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x68>)
 800b748:	f7fb f8b4 	bl	80068b4 <osThreadNew>
 800b74c:	4603      	mov	r3, r0
 800b74e:	4a05      	ldr	r2, [pc, #20]	@ (800b764 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x6c>)
 800b750:	67d3      	str	r3, [r2, #124]	@ 0x7c
}
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	20009328 	.word	0x20009328
 800b75c:	20009278 	.word	0x20009278
 800b760:	080100e1 	.word	0x080100e1
 800b764:	20009138 	.word	0x20009138

0800b768 <_ZN13Communication23LoadcellFlowCalibrationEt>:

void Communication::LoadcellFlowCalibration(uint16_t flow){
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	460b      	mov	r3, r1
 800b772:	807b      	strh	r3, [r7, #2]
	if(SystemConfig.systemMode!=SystemModes::EmptyMode){
 800b774:	4b15      	ldr	r3, [pc, #84]	@ (800b7cc <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800b776:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d009      	beq.n	800b792 <_ZN13Communication23LoadcellFlowCalibrationEt+0x2a>
		ErrorResult(OperationCodes::ReadData, Errors::HasRunProcess);
 800b77e:	2102      	movs	r1, #2
 800b780:	2000      	movs	r0, #0
 800b782:	f003 fb05 	bl	800ed90 <ErrorResult>
		SendFeedback(RequestType::R_System, SystemRequestType::SYSR_CalibrationFlow, ProcessStatuses::PS_End);
 800b786:	2202      	movs	r2, #2
 800b788:	2106      	movs	r1, #6
 800b78a:	2001      	movs	r0, #1
 800b78c:	f003 fa5c 	bl	800ec48 <SendFeedback>
		return;
 800b790:	e018      	b.n	800b7c4 <_ZN13Communication23LoadcellFlowCalibrationEt+0x5c>
	}
	SystemConfig.systemMode=SystemModes::CalibrationMode;
 800b792:	4b0e      	ldr	r3, [pc, #56]	@ (800b7cc <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800b794:	2202      	movs	r2, #2
 800b796:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	SystemConfig.FlowRate=1;
 800b79a:	4b0c      	ldr	r3, [pc, #48]	@ (800b7cc <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800b79c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b7a0:	621a      	str	r2, [r3, #32]
	SystemConfig.CalibrationFlow=flow;
 800b7a2:	887b      	ldrh	r3, [r7, #2]
 800b7a4:	ee07 3a90 	vmov	s15, r3
 800b7a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ac:	4b07      	ldr	r3, [pc, #28]	@ (800b7cc <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800b7ae:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	ThreadStorage.CalibrationFlowThreadId = osThreadNew(StartCalibrationFlowTask, NULL, &ThreadStorage.CalibrationFlowThreadAttr);
 800b7b2:	4a07      	ldr	r2, [pc, #28]	@ (800b7d0 <_ZN13Communication23LoadcellFlowCalibrationEt+0x68>)
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	4807      	ldr	r0, [pc, #28]	@ (800b7d4 <_ZN13Communication23LoadcellFlowCalibrationEt+0x6c>)
 800b7b8:	f7fb f87c 	bl	80068b4 <osThreadNew>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	4a06      	ldr	r2, [pc, #24]	@ (800b7d8 <_ZN13Communication23LoadcellFlowCalibrationEt+0x70>)
 800b7c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20009328 	.word	0x20009328
 800b7d0:	2000929c 	.word	0x2000929c
 800b7d4:	08010291 	.word	0x08010291
 800b7d8:	20009138 	.word	0x20009138

0800b7dc <_ZN12FlashManageraSERKS_>:
enum FlashStatus {
	Success,
	Error,
	NotBackup
};
class FlashManager {
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	685a      	ldr	r2, [r3, #4]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	605a      	str	r2, [r3, #4]
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	689a      	ldr	r2, [r3, #8]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	609a      	str	r2, [r3, #8]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	7b1a      	ldrb	r2, [r3, #12]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	731a      	strb	r2, [r3, #12]
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	7b5a      	ldrb	r2, [r3, #13]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	735a      	strb	r2, [r3, #13]
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	7b9a      	ldrb	r2, [r3, #14]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	739a      	strb	r2, [r3, #14]
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	7bda      	ldrb	r2, [r3, #15]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	73da      	strb	r2, [r3, #15]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	7c1a      	ldrb	r2, [r3, #16]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	741a      	strb	r2, [r3, #16]
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	7c5a      	ldrb	r2, [r3, #17]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	745a      	strb	r2, [r3, #17]
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	7c9a      	ldrb	r2, [r3, #18]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	749a      	strb	r2, [r3, #18]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	7cda      	ldrb	r2, [r3, #19]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	74da      	strb	r2, [r3, #19]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	7d1a      	ldrb	r2, [r3, #20]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	751a      	strb	r2, [r3, #20]
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	7d5a      	ldrb	r2, [r3, #21]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	755a      	strb	r2, [r3, #21]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	7d9a      	ldrb	r2, [r3, #22]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	759a      	strb	r2, [r3, #22]
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	7dda      	ldrb	r2, [r3, #23]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	75da      	strb	r2, [r3, #23]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	7e1a      	ldrb	r2, [r3, #24]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	761a      	strb	r2, [r3, #24]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	7e5a      	ldrb	r2, [r3, #25]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	765a      	strb	r2, [r3, #25]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4618      	mov	r0, r3
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <_ZN13Communication15SetFlashManagerE12FlashManager>:

void Communication::SetFlashManager(FlashManager flashManager){
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
	FMI=flashManager;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	3304      	adds	r3, #4
 800b882:	6839      	ldr	r1, [r7, #0]
 800b884:	4618      	mov	r0, r3
 800b886:	f7ff ffa9 	bl	800b7dc <_ZN12FlashManageraSERKS_>
}
 800b88a:	bf00      	nop
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
	...

0800b894 <_ZN3EmgC1Ev>:
int firstEmgDataLen=0;
int secondEmgDataLen=0;



Emg::Emg() {
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	4a0e      	ldr	r2, [pc, #56]	@ (800b8d8 <_ZN3EmgC1Ev+0x44>)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800b8ae:	6393      	str	r3, [r2, #56]	@ 0x38
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	6413      	str	r3, [r2, #64]	@ 0x40
	// TODO Auto-generated constructor stub

}
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	370c      	adds	r7, #12
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	08011c40 	.word	0x08011c40

0800b8dc <_ZN3EmgD1Ev>:

Emg::~Emg() {
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	4a04      	ldr	r2, [pc, #16]	@ (800b8f8 <_ZN3EmgD1Ev+0x1c>)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	08011c40 	.word	0x08011c40

0800b8fc <_ZN3EmgD0Ev>:
Emg::~Emg() {
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
}
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff ffe9 	bl	800b8dc <_ZN3EmgD1Ev>
 800b90a:	f242 0144 	movw	r1, #8260	@ 0x2044
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f005 f894 	bl	8010a3c <_ZdlPvj>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	4618      	mov	r0, r3
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
	...

0800b920 <_ZN3Emg12FirstEmgReadEb>:
void Emg::FirstEmgRead(bool useBuffer){
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]

	FirstEmgReadFromSPI(DATA_CH0_0);
 800b92c:	2101      	movs	r1, #1
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f988 	bl	800bc44 <_ZN3Emg19FirstEmgReadFromSPIEh>
	ReadFirstEmgValueArray[0] = FirstEmgReadSPIValue[0];
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	7f1b      	ldrb	r3, [r3, #28]
 800b938:	461a      	mov	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	605a      	str	r2, [r3, #4]

	FirstEmgReadFromSPI(DATA_CH0_1);
 800b93e:	2103      	movs	r1, #3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f97f 	bl	800bc44 <_ZN3Emg19FirstEmgReadFromSPIEh>
	ReadFirstEmgValueArray[1] = FirstEmgReadSPIValue[0];
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	7f1b      	ldrb	r3, [r3, #28]
 800b94a:	461a      	mov	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	609a      	str	r2, [r3, #8]

	FirstEmgReadFromSPI(DATA_CH0_2);
 800b950:	2105      	movs	r1, #5
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f976 	bl	800bc44 <_ZN3Emg19FirstEmgReadFromSPIEh>
	ReadFirstEmgValueArray[2] = FirstEmgReadSPIValue[0];
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	7f1b      	ldrb	r3, [r3, #28]
 800b95c:	461a      	mov	r2, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	60da      	str	r2, [r3, #12]

	FirstEmgValue = (ReadFirstEmgValueArray[1] + (ReadFirstEmgValueArray[0] << 8));
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	689a      	ldr	r2, [r3, #8]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	021b      	lsls	r3, r3, #8
 800b96c:	441a      	add	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	625a      	str	r2, [r3, #36]	@ 0x24
	NonFilterFirstEmg=FirstEmgValue;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	621a      	str	r2, [r3, #32]

	uint32_t filteredValue = FirstEmgMovingAverageFilter(FirstEmgValue);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 f9c5 	bl	800bd10 <_ZN3Emg27FirstEmgMovingAverageFilterEm>
 800b986:	60f8      	str	r0, [r7, #12]
	Debugger.FirstEmg=filteredValue;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	4b1f      	ldr	r3, [pc, #124]	@ (800ba0c <_ZN3Emg12FirstEmgReadEb+0xec>)
 800b98e:	851a      	strh	r2, [r3, #40]	@ 0x28
	FirstEmgValue=filteredValue;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	625a      	str	r2, [r3, #36]	@ 0x24
	if(useBuffer){
 800b996:	78fb      	ldrb	r3, [r7, #3]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d033      	beq.n	800ba04 <_ZN3Emg12FirstEmgReadEb+0xe4>
		FirstEmgBufferLen%=1024;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a4:	425a      	negs	r2, r3
 800b9a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b9ae:	bf58      	it	pl
 800b9b0:	4253      	negpl	r3, r2
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b9b8:	6313      	str	r3, [r2, #48]	@ 0x30
	    FirstEmgBuffer[FirstEmgBufferLen]=(filteredValue >> 8) & 0xFF;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	0a19      	lsrs	r1, r3, #8
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b9c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9c6:	b2c9      	uxtb	r1, r1
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	320c      	adds	r2, #12
 800b9cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    FirstEmgBuffer[FirstEmgBufferLen+1]=(filteredValue) & 0xFF;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b9d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	b2d9      	uxtb	r1, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	320c      	adds	r2, #12
 800b9e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    FirstEmgBufferLen+=2;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b9ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ee:	3302      	adds	r3, #2
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b9f6:	6313      	str	r3, [r2, #48]	@ 0x30
	    Debugger.FirstEmgBufferLen=FirstEmgBufferLen;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b9fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba00:	4a02      	ldr	r2, [pc, #8]	@ (800ba0c <_ZN3Emg12FirstEmgReadEb+0xec>)
 800ba02:	6093      	str	r3, [r2, #8]
	}
}
 800ba04:	bf00      	nop
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	200093a0 	.word	0x200093a0

0800ba10 <_ZN3Emg13SecondEmgReadEb>:

void Emg::SecondEmgRead(bool useBuffer){
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	70fb      	strb	r3, [r7, #3]
	SecondEmgReadFromSPI(DATA_CH0_0);
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f942 	bl	800bca8 <_ZN3Emg20SecondEmgReadFromSPIEh>
	ReadSecondEmgValueArray[0] = SecondEmgReadSPIValue[0];
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	7f5b      	ldrb	r3, [r3, #29]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	611a      	str	r2, [r3, #16]

	SecondEmgReadFromSPI(DATA_CH0_1);
 800ba2e:	2103      	movs	r1, #3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 f939 	bl	800bca8 <_ZN3Emg20SecondEmgReadFromSPIEh>
	ReadSecondEmgValueArray[1] = SecondEmgReadSPIValue[0];
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	7f5b      	ldrb	r3, [r3, #29]
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	615a      	str	r2, [r3, #20]

	SecondEmgReadFromSPI(DATA_CH0_2);
 800ba40:	2105      	movs	r1, #5
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f930 	bl	800bca8 <_ZN3Emg20SecondEmgReadFromSPIEh>
	ReadSecondEmgValueArray[2] = SecondEmgReadSPIValue[0];
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	7f5b      	ldrb	r3, [r3, #29]
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	619a      	str	r2, [r3, #24]

	SecondEmgValue = (ReadSecondEmgValueArray[1] + (ReadSecondEmgValueArray[0] << 8));
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	695a      	ldr	r2, [r3, #20]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	021b      	lsls	r3, r3, #8
 800ba5c:	441a      	add	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	62da      	str	r2, [r3, #44]	@ 0x2c
	NonFilterSecondEmg=SecondEmgValue;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	629a      	str	r2, [r3, #40]	@ 0x28
	uint32_t filteredValue = SecondEmgMovingAverageFilter(SecondEmgValue);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba6e:	4619      	mov	r1, r3
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f9db 	bl	800be2c <_ZN3Emg28SecondEmgMovingAverageFilterEm>
 800ba76:	60f8      	str	r0, [r7, #12]
	Debugger.SecondEmg=filteredValue;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	4b20      	ldr	r3, [pc, #128]	@ (800bb00 <_ZN3Emg13SecondEmgReadEb+0xf0>)
 800ba7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
	SecondEmgValue=filteredValue;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	62da      	str	r2, [r3, #44]	@ 0x2c
	if(useBuffer){
 800ba86:	78fb      	ldrb	r3, [r7, #3]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d035      	beq.n	800baf8 <_ZN3Emg13SecondEmgReadEb+0xe8>
		SecondEmgBufferLen%=1024;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba94:	425a      	negs	r2, r3
 800ba96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba9a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ba9e:	bf58      	it	pl
 800baa0:	4253      	negpl	r3, r2
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800baa8:	6353      	str	r3, [r2, #52]	@ 0x34
		SecondEmgBuffer[SecondEmgBufferLen]=(filteredValue >> 8) & 0xFF;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	0a19      	lsrs	r1, r3, #8
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bab6:	b2c9      	uxtb	r1, r1
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 800babe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    SecondEmgBuffer[SecondEmgBufferLen+1]=(filteredValue) & 0xFF;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	b2d9      	uxtb	r1, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 800bad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    SecondEmgBufferLen+=2;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bae2:	3302      	adds	r3, #2
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800baea:	6353      	str	r3, [r2, #52]	@ 0x34
	    Debugger.SecondEmgBufferLen=SecondEmgBufferLen;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800baf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baf4:	4a02      	ldr	r2, [pc, #8]	@ (800bb00 <_ZN3Emg13SecondEmgReadEb+0xf0>)
 800baf6:	60d3      	str	r3, [r2, #12]
	}
}
 800baf8:	bf00      	nop
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	200093a0 	.word	0x200093a0

0800bb04 <_ZN3Emg13FirstEmgSetupEv>:

void Emg::FirstEmgSetup(void){
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
	FirstEmgWriteToSPI(EMG_PHASE_ADDRESS, EMG_PHASE_VALUE);
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	210e      	movs	r1, #14
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f839 	bl	800bb88 <_ZN3Emg18FirstEmgWriteToSPIEtt>
	FirstEmgWriteToSPI(EMG_GAIN_ADDRESS, EMG_GAIN_VALUE);
 800bb16:	2200      	movs	r2, #0
 800bb18:	2110      	movs	r1, #16
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f834 	bl	800bb88 <_ZN3Emg18FirstEmgWriteToSPIEtt>
	FirstEmgWriteToSPI(EMG_STATUS_COM_ADDRESS, EMG_STATUS_COM_VALUE);
 800bb20:	2203      	movs	r2, #3
 800bb22:	2112      	movs	r1, #18
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 f82f 	bl	800bb88 <_ZN3Emg18FirstEmgWriteToSPIEtt>
	FirstEmgWriteToSPI(EMG_CONFIG_1_ADDRESS, EMG_CONFIG_1_VALUE);
 800bb2a:	2210      	movs	r2, #16
 800bb2c:	2114      	movs	r1, #20
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f82a 	bl	800bb88 <_ZN3Emg18FirstEmgWriteToSPIEtt>
	FirstEmgWriteToSPI(EMG_CONFIG_2_ADDRESS, EMG_CONFIG_2_VALUE);
 800bb34:	220c      	movs	r2, #12
 800bb36:	2116      	movs	r1, #22
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 f825 	bl	800bb88 <_ZN3Emg18FirstEmgWriteToSPIEtt>
}
 800bb3e:	bf00      	nop
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <_ZN3Emg14SecondEmgSetupEv>:

void Emg::SecondEmgSetup(void){
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b082      	sub	sp, #8
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]

	SecondEmgWriteToSPI(EMG_PHASE_ADDRESS, EMG_PHASE_VALUE);
 800bb4e:	2200      	movs	r2, #0
 800bb50:	210e      	movs	r1, #14
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f846 	bl	800bbe4 <_ZN3Emg19SecondEmgWriteToSPIEtt>
	SecondEmgWriteToSPI(EMG_GAIN_ADDRESS, EMG_GAIN_VALUE);
 800bb58:	2200      	movs	r2, #0
 800bb5a:	2110      	movs	r1, #16
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 f841 	bl	800bbe4 <_ZN3Emg19SecondEmgWriteToSPIEtt>
	SecondEmgWriteToSPI(EMG_STATUS_COM_ADDRESS, EMG_STATUS_COM_VALUE);
 800bb62:	2203      	movs	r2, #3
 800bb64:	2112      	movs	r1, #18
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f83c 	bl	800bbe4 <_ZN3Emg19SecondEmgWriteToSPIEtt>
	SecondEmgWriteToSPI(EMG_CONFIG_1_ADDRESS, EMG_CONFIG_1_VALUE);
 800bb6c:	2210      	movs	r2, #16
 800bb6e:	2114      	movs	r1, #20
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f837 	bl	800bbe4 <_ZN3Emg19SecondEmgWriteToSPIEtt>
	SecondEmgWriteToSPI(EMG_CONFIG_2_ADDRESS, EMG_CONFIG_2_VALUE);
 800bb76:	220c      	movs	r2, #12
 800bb78:	2116      	movs	r1, #22
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f832 	bl	800bbe4 <_ZN3Emg19SecondEmgWriteToSPIEtt>
}
 800bb80:	bf00      	nop
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <_ZN3Emg18FirstEmgWriteToSPIEtt>:

void Emg::FirstEmgWriteToSPI(uint16_t emgSPIAddress, uint16_t emgValue){
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	460b      	mov	r3, r1
 800bb92:	807b      	strh	r3, [r7, #2]
 800bb94:	4613      	mov	r3, r2
 800bb96:	803b      	strh	r3, [r7, #0]
	uint8_t EmgWriteArray[2];
	EmgWriteArray[0] = emgSPIAddress;
 800bb98:	887b      	ldrh	r3, [r7, #2]
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	733b      	strb	r3, [r7, #12]
	EmgWriteArray[1] = emgValue;
 800bb9e:	883b      	ldrh	r3, [r7, #0]
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800bba4:	2200      	movs	r2, #0
 800bba6:	2110      	movs	r1, #16
 800bba8:	480b      	ldr	r0, [pc, #44]	@ (800bbd8 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x50>)
 800bbaa:	f7f7 fa33 	bl	8003014 <HAL_GPIO_WritePin>
	Debugger.FirstEmgWriteStatus=HAL_SPI_Transmit(EMG_SPI_CHANNEL, EmgWriteArray, 2, 100);
 800bbae:	f107 010c 	add.w	r1, r7, #12
 800bbb2:	2364      	movs	r3, #100	@ 0x64
 800bbb4:	2202      	movs	r2, #2
 800bbb6:	4809      	ldr	r0, [pc, #36]	@ (800bbdc <_ZN3Emg18FirstEmgWriteToSPIEtt+0x54>)
 800bbb8:	f7f7 ff27 	bl	8003a0a <HAL_SPI_Transmit>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	4b07      	ldr	r3, [pc, #28]	@ (800bbe0 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x58>)
 800bbc2:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	2110      	movs	r1, #16
 800bbca:	4803      	ldr	r0, [pc, #12]	@ (800bbd8 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x50>)
 800bbcc:	f7f7 fa22 	bl	8003014 <HAL_GPIO_WritePin>
}
 800bbd0:	bf00      	nop
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	40020000 	.word	0x40020000
 800bbdc:	200000d0 	.word	0x200000d0
 800bbe0:	200093a0 	.word	0x200093a0

0800bbe4 <_ZN3Emg19SecondEmgWriteToSPIEtt>:

void Emg::SecondEmgWriteToSPI(uint16_t emgSPIAddress, uint16_t emgValue){
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	460b      	mov	r3, r1
 800bbee:	807b      	strh	r3, [r7, #2]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	803b      	strh	r3, [r7, #0]
	uint8_t EmgWriteArray[2];
	EmgWriteArray[0] = emgSPIAddress;
 800bbf4:	887b      	ldrh	r3, [r7, #2]
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	733b      	strb	r3, [r7, #12]
	EmgWriteArray[1] = emgValue;
 800bbfa:	883b      	ldrh	r3, [r7, #0]
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800bc00:	2200      	movs	r2, #0
 800bc02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bc06:	480c      	ldr	r0, [pc, #48]	@ (800bc38 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x54>)
 800bc08:	f7f7 fa04 	bl	8003014 <HAL_GPIO_WritePin>
	Debugger.SecondEmgWriteStatus=HAL_SPI_Transmit(EMG2_SPI_CHANNEL, EmgWriteArray, 2, 100);
 800bc0c:	f107 010c 	add.w	r1, r7, #12
 800bc10:	2364      	movs	r3, #100	@ 0x64
 800bc12:	2202      	movs	r2, #2
 800bc14:	4809      	ldr	r0, [pc, #36]	@ (800bc3c <_ZN3Emg19SecondEmgWriteToSPIEtt+0x58>)
 800bc16:	f7f7 fef8 	bl	8003a0a <HAL_SPI_Transmit>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	4b08      	ldr	r3, [pc, #32]	@ (800bc40 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x5c>)
 800bc20:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800bc24:	2201      	movs	r2, #1
 800bc26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bc2a:	4803      	ldr	r0, [pc, #12]	@ (800bc38 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x54>)
 800bc2c:	f7f7 f9f2 	bl	8003014 <HAL_GPIO_WritePin>
}
 800bc30:	bf00      	nop
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	40020400 	.word	0x40020400
 800bc3c:	20000128 	.word	0x20000128
 800bc40:	200093a0 	.word	0x200093a0

0800bc44 <_ZN3Emg19FirstEmgReadFromSPIEh>:

void Emg::FirstEmgReadFromSPI(uint8_t emgValue){
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800bc50:	2200      	movs	r2, #0
 800bc52:	2110      	movs	r1, #16
 800bc54:	4811      	ldr	r0, [pc, #68]	@ (800bc9c <_ZN3Emg19FirstEmgReadFromSPIEh+0x58>)
 800bc56:	f7f7 f9dd 	bl	8003014 <HAL_GPIO_WritePin>
	Debugger.FirstEmgWriteStatus=HAL_SPI_Transmit_DMA(EMG_SPI_CHANNEL, &emgValue, 1);
 800bc5a:	1cfb      	adds	r3, r7, #3
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	4619      	mov	r1, r3
 800bc60:	480f      	ldr	r0, [pc, #60]	@ (800bca0 <_ZN3Emg19FirstEmgReadFromSPIEh+0x5c>)
 800bc62:	f7f8 fad9 	bl	8004218 <HAL_SPI_Transmit_DMA>
 800bc66:	4603      	mov	r3, r0
 800bc68:	461a      	mov	r2, r3
 800bc6a:	4b0e      	ldr	r3, [pc, #56]	@ (800bca4 <_ZN3Emg19FirstEmgReadFromSPIEh+0x60>)
 800bc6c:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	Debugger.FirstEmgReadStatus=HAL_SPI_Receive_DMA(EMG_SPI_CHANNEL, FirstEmgReadSPIValue, 1);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	331c      	adds	r3, #28
 800bc74:	2201      	movs	r2, #1
 800bc76:	4619      	mov	r1, r3
 800bc78:	4809      	ldr	r0, [pc, #36]	@ (800bca0 <_ZN3Emg19FirstEmgReadFromSPIEh+0x5c>)
 800bc7a:	f7f8 fb7f 	bl	800437c <HAL_SPI_Receive_DMA>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	461a      	mov	r2, r3
 800bc82:	4b08      	ldr	r3, [pc, #32]	@ (800bca4 <_ZN3Emg19FirstEmgReadFromSPIEh+0x60>)
 800bc84:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800bc88:	2201      	movs	r2, #1
 800bc8a:	2110      	movs	r1, #16
 800bc8c:	4803      	ldr	r0, [pc, #12]	@ (800bc9c <_ZN3Emg19FirstEmgReadFromSPIEh+0x58>)
 800bc8e:	f7f7 f9c1 	bl	8003014 <HAL_GPIO_WritePin>
}
 800bc92:	bf00      	nop
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	40020000 	.word	0x40020000
 800bca0:	200000d0 	.word	0x200000d0
 800bca4:	200093a0 	.word	0x200093a0

0800bca8 <_ZN3Emg20SecondEmgReadFromSPIEh>:

void Emg::SecondEmgReadFromSPI(uint8_t emgValue){
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bcba:	4812      	ldr	r0, [pc, #72]	@ (800bd04 <_ZN3Emg20SecondEmgReadFromSPIEh+0x5c>)
 800bcbc:	f7f7 f9aa 	bl	8003014 <HAL_GPIO_WritePin>
	Debugger.SecondEmgWriteStatus=HAL_SPI_Transmit_DMA(EMG2_SPI_CHANNEL, &emgValue, 1);
 800bcc0:	1cfb      	adds	r3, r7, #3
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	4810      	ldr	r0, [pc, #64]	@ (800bd08 <_ZN3Emg20SecondEmgReadFromSPIEh+0x60>)
 800bcc8:	f7f8 faa6 	bl	8004218 <HAL_SPI_Transmit_DMA>
 800bccc:	4603      	mov	r3, r0
 800bcce:	461a      	mov	r2, r3
 800bcd0:	4b0e      	ldr	r3, [pc, #56]	@ (800bd0c <_ZN3Emg20SecondEmgReadFromSPIEh+0x64>)
 800bcd2:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	Debugger.SecondEmgReadStatus=HAL_SPI_Receive_DMA(EMG2_SPI_CHANNEL, SecondEmgReadSPIValue, 1);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	331d      	adds	r3, #29
 800bcda:	2201      	movs	r2, #1
 800bcdc:	4619      	mov	r1, r3
 800bcde:	480a      	ldr	r0, [pc, #40]	@ (800bd08 <_ZN3Emg20SecondEmgReadFromSPIEh+0x60>)
 800bce0:	f7f8 fb4c 	bl	800437c <HAL_SPI_Receive_DMA>
 800bce4:	4603      	mov	r3, r0
 800bce6:	461a      	mov	r2, r3
 800bce8:	4b08      	ldr	r3, [pc, #32]	@ (800bd0c <_ZN3Emg20SecondEmgReadFromSPIEh+0x64>)
 800bcea:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bcf4:	4803      	ldr	r0, [pc, #12]	@ (800bd04 <_ZN3Emg20SecondEmgReadFromSPIEh+0x5c>)
 800bcf6:	f7f7 f98d 	bl	8003014 <HAL_GPIO_WritePin>
}
 800bcfa:	bf00      	nop
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	40020400 	.word	0x40020400
 800bd08:	20000128 	.word	0x20000128
 800bd0c:	200093a0 	.word	0x200093a0

0800bd10 <_ZN3Emg27FirstEmgMovingAverageFilterEm>:

uint32_t Emg::FirstEmgMovingAverageFilter(uint32_t newSample){
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
	if(SystemConfig.FirstEmgZeroMaxTrim==0) return newSample;
 800bd1a:	4b3f      	ldr	r3, [pc, #252]	@ (800be18 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x108>)
 800bd1c:	895b      	ldrh	r3, [r3, #10]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d101      	bne.n	800bd26 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x16>
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	e071      	b.n	800be0a <_ZN3Emg27FirstEmgMovingAverageFilterEm+0xfa>

	newVal=(newSample-65536)*-1;
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800bd2c:	4a3b      	ldr	r2, [pc, #236]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bd2e:	6013      	str	r3, [r2, #0]
	Debugger.FirstEmgNewVal=newVal;
 800bd30:	4b3a      	ldr	r3, [pc, #232]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	4b3a      	ldr	r3, [pc, #232]	@ (800be20 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x110>)
 800bd38:	859a      	strh	r2, [r3, #44]	@ 0x2c
	uint16_t avgTrim=(SystemConfig.FirstEmgZeroMaxTrim+SystemConfig.FirstEmgZeroMinTrim)/2;
 800bd3a:	4b37      	ldr	r3, [pc, #220]	@ (800be18 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x108>)
 800bd3c:	895b      	ldrh	r3, [r3, #10]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	4b35      	ldr	r3, [pc, #212]	@ (800be18 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x108>)
 800bd42:	899b      	ldrh	r3, [r3, #12]
 800bd44:	4413      	add	r3, r2
 800bd46:	0fda      	lsrs	r2, r3, #31
 800bd48:	4413      	add	r3, r2
 800bd4a:	105b      	asrs	r3, r3, #1
 800bd4c:	81fb      	strh	r3, [r7, #14]
	if(newVal<SystemConfig.FirstEmgZeroMaxTrim && newVal>SystemConfig.FirstEmgZeroMinTrim){
 800bd4e:	4b32      	ldr	r3, [pc, #200]	@ (800be18 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x108>)
 800bd50:	895b      	ldrh	r3, [r3, #10]
 800bd52:	461a      	mov	r2, r3
 800bd54:	4b31      	ldr	r3, [pc, #196]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d909      	bls.n	800bd70 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x60>
 800bd5c:	4b2e      	ldr	r3, [pc, #184]	@ (800be18 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x108>)
 800bd5e:	899b      	ldrh	r3, [r3, #12]
 800bd60:	461a      	mov	r2, r3
 800bd62:	4b2e      	ldr	r3, [pc, #184]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d202      	bcs.n	800bd70 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x60>
		newVal=avgTrim;
 800bd6a:	89fb      	ldrh	r3, [r7, #14]
 800bd6c:	4a2b      	ldr	r2, [pc, #172]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bd6e:	6013      	str	r3, [r2, #0]
	}
	if(newVal<avgTrim){
 800bd70:	89fa      	ldrh	r2, [r7, #14]
 800bd72:	4b2a      	ldr	r3, [pc, #168]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d907      	bls.n	800bd8a <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x7a>
		newVal=avgTrim+(avgTrim-newVal);
 800bd7a:	89fa      	ldrh	r2, [r7, #14]
 800bd7c:	89f9      	ldrh	r1, [r7, #14]
 800bd7e:	4b27      	ldr	r3, [pc, #156]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	1acb      	subs	r3, r1, r3
 800bd84:	4413      	add	r3, r2
 800bd86:	4a25      	ldr	r2, [pc, #148]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bd88:	6013      	str	r3, [r2, #0]
	}
	newVal-=avgTrim;
 800bd8a:	4b24      	ldr	r3, [pc, #144]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	89fb      	ldrh	r3, [r7, #14]
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	4a22      	ldr	r2, [pc, #136]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bd94:	6013      	str	r3, [r2, #0]
	Debugger.FirstEmgNewValAfter=newVal;
 800bd96:	4b21      	ldr	r3, [pc, #132]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	4b20      	ldr	r3, [pc, #128]	@ (800be20 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x110>)
 800bd9e:	861a      	strh	r2, [r3, #48]	@ 0x30
	if(newVal>SystemConfig.FirstEmgMaxTrim){
 800bda0:	4b1d      	ldr	r3, [pc, #116]	@ (800be18 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x108>)
 800bda2:	891b      	ldrh	r3, [r3, #8]
 800bda4:	461a      	mov	r2, r3
 800bda6:	4b1d      	ldr	r3, [pc, #116]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d204      	bcs.n	800bdb8 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0xa8>
		return LastFirstEmg;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bdb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdb6:	e028      	b.n	800be0a <_ZN3Emg27FirstEmgMovingAverageFilterEm+0xfa>
	}
	newVal=(LastFirstEmg*90+newVal*10)/100;  //newVal=(LastFirstEmg*990+newVal*10)/1000;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bdbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdc0:	225a      	movs	r2, #90	@ 0x5a
 800bdc2:	fb02 f103 	mul.w	r1, r2, r3
 800bdc6:	4b15      	ldr	r3, [pc, #84]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	4613      	mov	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	005b      	lsls	r3, r3, #1
 800bdd2:	440b      	add	r3, r1
 800bdd4:	4a13      	ldr	r2, [pc, #76]	@ (800be24 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x114>)
 800bdd6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdda:	095b      	lsrs	r3, r3, #5
 800bddc:	4a0f      	ldr	r2, [pc, #60]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bdde:	6013      	str	r3, [r2, #0]
	LastFirstEmg=newVal;
 800bde0:	4b0e      	ldr	r3, [pc, #56]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800bdea:	63d3      	str	r3, [r2, #60]	@ 0x3c
	newVal=newVal-50; //250
 800bdec:	4b0b      	ldr	r3, [pc, #44]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3b32      	subs	r3, #50	@ 0x32
 800bdf2:	4a0a      	ldr	r2, [pc, #40]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bdf4:	6013      	str	r3, [r2, #0]
	if(newVal>=66000) newVal=0;
 800bdf6:	4b09      	ldr	r3, [pc, #36]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a0b      	ldr	r2, [pc, #44]	@ (800be28 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x118>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d902      	bls.n	800be06 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0xf6>
 800be00:	4b06      	ldr	r3, [pc, #24]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be02:	2200      	movs	r2, #0
 800be04:	601a      	str	r2, [r3, #0]
	return newVal;
 800be06:	4b05      	ldr	r3, [pc, #20]	@ (800be1c <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x10c>)
 800be08:	681b      	ldr	r3, [r3, #0]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	20009328 	.word	0x20009328
 800be1c:	20004ee4 	.word	0x20004ee4
 800be20:	200093a0 	.word	0x200093a0
 800be24:	51eb851f 	.word	0x51eb851f
 800be28:	000101cf 	.word	0x000101cf

0800be2c <_ZN3Emg28SecondEmgMovingAverageFilterEm>:
uint32_t Emg::SecondEmgMovingAverageFilter(uint32_t newSample){
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
	if(SystemConfig.SecondEmgZeroMaxTrim==0) return newSample;
 800be36:	4b35      	ldr	r3, [pc, #212]	@ (800bf0c <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe0>)
 800be38:	8a1b      	ldrh	r3, [r3, #16]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d101      	bne.n	800be42 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x16>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	e05e      	b.n	800bf00 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xd4>
	uint32_t newVal=(newSample-65536)*-1;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800be48:	60fb      	str	r3, [r7, #12]
	Debugger.SecondEmgNewVal=newVal;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	4b30      	ldr	r3, [pc, #192]	@ (800bf10 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe4>)
 800be50:	85da      	strh	r2, [r3, #46]	@ 0x2e
	uint16_t avgTrim=(SystemConfig.SecondEmgZeroMaxTrim+SystemConfig.SecondEmgZeroMinTrim)/2;
 800be52:	4b2e      	ldr	r3, [pc, #184]	@ (800bf0c <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe0>)
 800be54:	8a1b      	ldrh	r3, [r3, #16]
 800be56:	461a      	mov	r2, r3
 800be58:	4b2c      	ldr	r3, [pc, #176]	@ (800bf0c <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe0>)
 800be5a:	8a5b      	ldrh	r3, [r3, #18]
 800be5c:	4413      	add	r3, r2
 800be5e:	0fda      	lsrs	r2, r3, #31
 800be60:	4413      	add	r3, r2
 800be62:	105b      	asrs	r3, r3, #1
 800be64:	817b      	strh	r3, [r7, #10]
	if(newVal<SystemConfig.SecondEmgZeroMaxTrim && newVal>SystemConfig.SecondEmgZeroMinTrim){
 800be66:	4b29      	ldr	r3, [pc, #164]	@ (800bf0c <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe0>)
 800be68:	8a1b      	ldrh	r3, [r3, #16]
 800be6a:	461a      	mov	r2, r3
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	4293      	cmp	r3, r2
 800be70:	d207      	bcs.n	800be82 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x56>
 800be72:	4b26      	ldr	r3, [pc, #152]	@ (800bf0c <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe0>)
 800be74:	8a5b      	ldrh	r3, [r3, #18]
 800be76:	461a      	mov	r2, r3
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d901      	bls.n	800be82 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x56>
		newVal=avgTrim;
 800be7e:	897b      	ldrh	r3, [r7, #10]
 800be80:	60fb      	str	r3, [r7, #12]
	}
	if(newVal<avgTrim){
 800be82:	897b      	ldrh	r3, [r7, #10]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	429a      	cmp	r2, r3
 800be88:	d205      	bcs.n	800be96 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x6a>
		newVal=avgTrim+(avgTrim-newVal);
 800be8a:	897a      	ldrh	r2, [r7, #10]
 800be8c:	8979      	ldrh	r1, [r7, #10]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	1acb      	subs	r3, r1, r3
 800be92:	4413      	add	r3, r2
 800be94:	60fb      	str	r3, [r7, #12]
	}
	newVal-=avgTrim;
 800be96:	897b      	ldrh	r3, [r7, #10]
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	60fb      	str	r3, [r7, #12]
	Debugger.SecondEmgNewValAfter=newVal;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	4b1b      	ldr	r3, [pc, #108]	@ (800bf10 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe4>)
 800bea4:	865a      	strh	r2, [r3, #50]	@ 0x32
	if(newVal>SystemConfig.SecondEmgMaxTrim){
 800bea6:	4b19      	ldr	r3, [pc, #100]	@ (800bf0c <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe0>)
 800bea8:	89db      	ldrh	r3, [r3, #14]
 800beaa:	461a      	mov	r2, r3
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	4293      	cmp	r3, r2
 800beb0:	d904      	bls.n	800bebc <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x90>
		return LastSecondEmg;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800beb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beba:	e021      	b.n	800bf00 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xd4>
	}
	newVal=(LastSecondEmg*90+newVal*10)/100;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bec4:	225a      	movs	r2, #90	@ 0x5a
 800bec6:	fb02 f103 	mul.w	r1, r2, r3
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	4613      	mov	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4413      	add	r3, r2
 800bed2:	005b      	lsls	r3, r3, #1
 800bed4:	440b      	add	r3, r1
 800bed6:	4a0f      	ldr	r2, [pc, #60]	@ (800bf14 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xe8>)
 800bed8:	fba2 2303 	umull	r2, r3, r2, r3
 800bedc:	095b      	lsrs	r3, r3, #5
 800bede:	60fb      	str	r3, [r7, #12]
	LastSecondEmg=newVal;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bee6:	461a      	mov	r2, r3
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6413      	str	r3, [r2, #64]	@ 0x40
	newVal=newVal-50; //250
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	3b32      	subs	r3, #50	@ 0x32
 800bef0:	60fb      	str	r3, [r7, #12]
	if(newVal>=66000) newVal=0;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	4a08      	ldr	r2, [pc, #32]	@ (800bf18 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xec>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d901      	bls.n	800befe <_ZN3Emg28SecondEmgMovingAverageFilterEm+0xd2>
 800befa:	2300      	movs	r3, #0
 800befc:	60fb      	str	r3, [r7, #12]
	return newVal;
 800befe:	68fb      	ldr	r3, [r7, #12]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3714      	adds	r7, #20
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	20009328 	.word	0x20009328
 800bf10:	200093a0 	.word	0x200093a0
 800bf14:	51eb851f 	.word	0x51eb851f
 800bf18:	000101cf 	.word	0x000101cf

0800bf1c <_ZN6FilterC1Ev>:
 *      Author: OrioN
 */

#include "../Inc/GeneralHeaders.h"

Filter::Filter() {
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	4a04      	ldr	r2, [pc, #16]	@ (800bf38 <_ZN6FilterC1Ev+0x1c>)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr
 800bf38:	08011c50 	.word	0x08011c50

0800bf3c <_ZN6FilterD1Ev>:

Filter::~Filter() {
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	4a04      	ldr	r2, [pc, #16]	@ (800bf58 <_ZN6FilterD1Ev+0x1c>)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr
 800bf58:	08011c50 	.word	0x08011c50

0800bf5c <_ZN6FilterD0Ev>:
Filter::~Filter() {
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
}
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff ffe9 	bl	800bf3c <_ZN6FilterD1Ev>
 800bf6a:	2104      	movs	r1, #4
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f004 fd65 	bl	8010a3c <_ZdlPvj>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4618      	mov	r0, r3
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <_ZN6Filter14MoovingAverageEPfS0_mmf>:
	previousFilteredValue = filteredValue;

	return (filteredValue < 0) ? 0 : filteredValue;
}

float32_t Filter::MoovingAverage(float32_t *dataArray, float32_t *sumData, uint32_t index, uint32_t len, float32_t nextValue){
 800bf7c:	b480      	push	{r7}
 800bf7e:	b089      	sub	sp, #36	@ 0x24
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6178      	str	r0, [r7, #20]
 800bf84:	6139      	str	r1, [r7, #16]
 800bf86:	60fa      	str	r2, [r7, #12]
 800bf88:	60bb      	str	r3, [r7, #8]
 800bf8a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (index >= len) {
 800bf8e:	68ba      	ldr	r2, [r7, #8]
 800bf90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d302      	bcc.n	800bf9c <_ZN6Filter14MoovingAverageEPfS0_mmf+0x20>
			return 0.0f;
 800bf96:	f04f 0300 	mov.w	r3, #0
 800bf9a:	e03b      	b.n	800c014 <_ZN6Filter14MoovingAverageEPfS0_mmf+0x98>
		}
		*sumData = *sumData - dataArray[index] + nextValue;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	ed93 7a00 	vldr	s14, [r3]
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	edd3 7a00 	vldr	s15, [r3]
 800bfae:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bfb2:	edd7 7a01 	vldr	s15, [r7, #4]
 800bfb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	edc3 7a00 	vstr	s15, [r3]
		*sumData = (*sumData < 1) ? 0 : *sumData;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	edd3 7a00 	vldr	s15, [r3]
 800bfc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd2:	d502      	bpl.n	800bfda <_ZN6Filter14MoovingAverageEPfS0_mmf+0x5e>
 800bfd4:	f04f 0300 	mov.w	r3, #0
 800bfd8:	e001      	b.n	800bfde <_ZN6Filter14MoovingAverageEPfS0_mmf+0x62>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	6013      	str	r3, [r2, #0]
		dataArray[index] = nextValue;
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	693a      	ldr	r2, [r7, #16]
 800bfe8:	4413      	add	r3, r2
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	601a      	str	r2, [r3, #0]
		float32_t average = (len != 0) ? *sumData / len : 0.0f;
 800bfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00a      	beq.n	800c00a <_ZN6Filter14MoovingAverageEPfS0_mmf+0x8e>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	edd3 6a00 	vldr	s13, [r3]
 800bffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffc:	ee07 3a90 	vmov	s15, r3
 800c000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c008:	e001      	b.n	800c00e <_ZN6Filter14MoovingAverageEPfS0_mmf+0x92>
 800c00a:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800c028 <_ZN6Filter14MoovingAverageEPfS0_mmf+0xac>
 800c00e:	edc7 7a07 	vstr	s15, [r7, #28]

		return average;
 800c012:	69fb      	ldr	r3, [r7, #28]
}
 800c014:	ee07 3a90 	vmov	s15, r3
 800c018:	eeb0 0a67 	vmov.f32	s0, s15
 800c01c:	3724      	adds	r7, #36	@ 0x24
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	00000000 	.word	0x00000000

0800c02c <_ZN12FlashManager8ReadDataEPhhib>:
	uint16_t ReadSecondEmgZeroPointMinTrim(void);
	uint16_t ReadSecondEmgZeroPointMaxTrim(void);
	FlashStatus Update(void);
	FlashStatus WriteData(uint8_t appendAddress,int len, uint8_t *data);
private:
	void ReadData(uint8_t *retVal, uint8_t appendAddress,int len, bool isReverse=false){
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b086      	sub	sp, #24
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	603b      	str	r3, [r7, #0]
 800c038:	4613      	mov	r3, r2
 800c03a:	71fb      	strb	r3, [r7, #7]
		if(HAL_FLASH_Unlock()==HAL_OK){
 800c03c:	f7f6 fbca 	bl	80027d4 <HAL_FLASH_Unlock>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	bf0c      	ite	eq
 800c046:	2301      	moveq	r3, #1
 800c048:	2300      	movne	r3, #0
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d028      	beq.n	800c0a2 <_ZN12FlashManager8ReadDataEPhhib+0x76>
			for (int i = 0; i < len; ++i) {
 800c050:	2300      	movs	r3, #0
 800c052:	617b      	str	r3, [r7, #20]
 800c054:	e01f      	b.n	800c096 <_ZN12FlashManager8ReadDataEPhhib+0x6a>
				uint32_t address=FlashMemAddress+appendAddress+i;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	689a      	ldr	r2, [r3, #8]
 800c05a:	79fb      	ldrb	r3, [r7, #7]
 800c05c:	441a      	add	r2, r3
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	4413      	add	r3, r2
 800c062:	613b      	str	r3, [r7, #16]
				if(isReverse){
 800c064:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00a      	beq.n	800c082 <_ZN12FlashManager8ReadDataEPhhib+0x56>
					retVal[len-i-1]=*(__IO uint8_t*) address;
 800c06c:	693a      	ldr	r2, [r7, #16]
 800c06e:	6839      	ldr	r1, [r7, #0]
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	1acb      	subs	r3, r1, r3
 800c074:	3b01      	subs	r3, #1
 800c076:	68b9      	ldr	r1, [r7, #8]
 800c078:	440b      	add	r3, r1
 800c07a:	7812      	ldrb	r2, [r2, #0]
 800c07c:	b2d2      	uxtb	r2, r2
 800c07e:	701a      	strb	r2, [r3, #0]
 800c080:	e006      	b.n	800c090 <_ZN12FlashManager8ReadDataEPhhib+0x64>
				}
				else{
					retVal[i]=*(__IO uint8_t*) address;
 800c082:	693a      	ldr	r2, [r7, #16]
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	68b9      	ldr	r1, [r7, #8]
 800c088:	440b      	add	r3, r1
 800c08a:	7812      	ldrb	r2, [r2, #0]
 800c08c:	b2d2      	uxtb	r2, r2
 800c08e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < len; ++i) {
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	3301      	adds	r3, #1
 800c094:	617b      	str	r3, [r7, #20]
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	dbdb      	blt.n	800c056 <_ZN12FlashManager8ReadDataEPhhib+0x2a>
				}
			}
			HAL_FLASH_Lock();
 800c09e:	f7f6 fbbb 	bl	8002818 <HAL_FLASH_Lock>
		}
	}
 800c0a2:	bf00      	nop
 800c0a4:	3718      	adds	r7, #24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
	...

0800c0ac <_ZN12FlashManagerC1Ev>:
 *      Author: OrioN
 */

#include "../Inc/GeneralHeaders.h"

FlashManager::FlashManager() {
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	4a22      	ldr	r2, [pc, #136]	@ (800c140 <_ZN12FlashManagerC1Ev+0x94>)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	601a      	str	r2, [r3, #0]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a21      	ldr	r2, [pc, #132]	@ (800c144 <_ZN12FlashManagerC1Ev+0x98>)
 800c0be:	609a      	str	r2, [r3, #8]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	731a      	strb	r2, [r3, #12]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2208      	movs	r2, #8
 800c0ca:	735a      	strb	r2, [r3, #13]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2210      	movs	r2, #16
 800c0d0:	739a      	strb	r2, [r3, #14]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2214      	movs	r2, #20
 800c0d6:	73da      	strb	r2, [r3, #15]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2218      	movs	r2, #24
 800c0dc:	741a      	strb	r2, [r3, #16]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	221e      	movs	r2, #30
 800c0e2:	745a      	strb	r2, [r3, #17]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2224      	movs	r2, #36	@ 0x24
 800c0e8:	749a      	strb	r2, [r3, #18]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2225      	movs	r2, #37	@ 0x25
 800c0ee:	74da      	strb	r2, [r3, #19]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2226      	movs	r2, #38	@ 0x26
 800c0f4:	751a      	strb	r2, [r3, #20]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2227      	movs	r2, #39	@ 0x27
 800c0fa:	755a      	strb	r2, [r3, #21]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2228      	movs	r2, #40	@ 0x28
 800c100:	759a      	strb	r2, [r3, #22]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2229      	movs	r2, #41	@ 0x29
 800c106:	75da      	strb	r2, [r3, #23]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	222a      	movs	r2, #42	@ 0x2a
 800c10c:	761a      	strb	r2, [r3, #24]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	222b      	movs	r2, #43	@ 0x2b
 800c112:	765a      	strb	r2, [r3, #25]
	// TODO Auto-generated constructor stub
	serialN = rand() % 1000;
 800c114:	f004 fdda 	bl	8010ccc <rand>
 800c118:	4602      	mov	r2, r0
 800c11a:	4b0b      	ldr	r3, [pc, #44]	@ (800c148 <_ZN12FlashManagerC1Ev+0x9c>)
 800c11c:	fb83 1302 	smull	r1, r3, r3, r2
 800c120:	1199      	asrs	r1, r3, #6
 800c122:	17d3      	asrs	r3, r2, #31
 800c124:	1acb      	subs	r3, r1, r3
 800c126:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c12a:	fb01 f303 	mul.w	r3, r1, r3
 800c12e:	1ad3      	subs	r3, r2, r3
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	6053      	str	r3, [r2, #4]

}
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4618      	mov	r0, r3
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	08011c60 	.word	0x08011c60
 800c144:	08020000 	.word	0x08020000
 800c148:	10624dd3 	.word	0x10624dd3

0800c14c <_ZN12FlashManagerD1Ev>:

FlashManager::~FlashManager() {
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	4a04      	ldr	r2, [pc, #16]	@ (800c168 <_ZN12FlashManagerD1Ev+0x1c>)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4618      	mov	r0, r3
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr
 800c168:	08011c60 	.word	0x08011c60

0800c16c <_ZN12FlashManagerD0Ev>:
FlashManager::~FlashManager() {
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
}
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7ff ffe9 	bl	800c14c <_ZN12FlashManagerD1Ev>
 800c17a:	211c      	movs	r1, #28
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f004 fc5d 	bl	8010a3c <_ZdlPvj>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4618      	mov	r0, r3
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <_ZN12FlashManager10BackupDataEv>:
void FlashManager::BackupData(void){
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af02      	add	r7, sp, #8
 800c192:	6078      	str	r0, [r7, #4]
	ReadData(SystemConfig.Backup,FlashMemAddress,SystemConfig.BackupLen);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	4b08      	ldr	r3, [pc, #32]	@ (800c1bc <_ZN12FlashManager10BackupDataEv+0x30>)
 800c19c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c19e:	2100      	movs	r1, #0
 800c1a0:	9100      	str	r1, [sp, #0]
 800c1a2:	4907      	ldr	r1, [pc, #28]	@ (800c1c0 <_ZN12FlashManager10BackupDataEv+0x34>)
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f7ff ff41 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
	SystemConfig.isBackup=true;
 800c1aa:	4b04      	ldr	r3, [pc, #16]	@ (800c1bc <_ZN12FlashManager10BackupDataEv+0x30>)
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 800c1b2:	bf00      	nop
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20009328 	.word	0x20009328
 800c1c0:	2000935d 	.word	0x2000935d

0800c1c4 <_ZN12FlashManager9HardResetEb>:
FlashStatus FlashManager::HardReset(bool useUnlock){
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08e      	sub	sp, #56	@ 0x38
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	70fb      	strb	r3, [r7, #3]

	if(!useUnlock){
 800c1d0:	78fb      	ldrb	r3, [r7, #3]
 800c1d2:	f083 0301 	eor.w	r3, r3, #1
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d015      	beq.n	800c208 <_ZN12FlashManager9HardResetEb+0x44>
		FLASH_EraseInitTypeDef	 FlashErase;
		uint32_t status = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	623b      	str	r3, [r7, #32]
		FlashErase.Sector = FLASH_SECTOR_5;
 800c1e0:	2305      	movs	r3, #5
 800c1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		FlashErase.Banks=FLASH_BANK_1;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	62bb      	str	r3, [r7, #40]	@ 0x28
		FlashErase.NbSectors = 1;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	633b      	str	r3, [r7, #48]	@ 0x30
		FlashErase.TypeErase    = FLASH_TYPEERASE_SECTORS;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	627b      	str	r3, [r7, #36]	@ 0x24
		FlashErase.VoltageRange = VOLTAGE_RANGE_3;
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_FLASHEx_Erase(&FlashErase, &status);
 800c1f4:	f107 0220 	add.w	r2, r7, #32
 800c1f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7f6 fc4a 	bl	8002a98 <HAL_FLASHEx_Erase>
		return FlashStatus::Success;
 800c204:	2300      	movs	r3, #0
 800c206:	e025      	b.n	800c254 <_ZN12FlashManager9HardResetEb+0x90>
	}
	if(useUnlock&&HAL_FLASH_Unlock()==HAL_OK){
 800c208:	78fb      	ldrb	r3, [r7, #3]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d006      	beq.n	800c21c <_ZN12FlashManager9HardResetEb+0x58>
 800c20e:	f7f6 fae1 	bl	80027d4 <HAL_FLASH_Unlock>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d101      	bne.n	800c21c <_ZN12FlashManager9HardResetEb+0x58>
 800c218:	2301      	movs	r3, #1
 800c21a:	e000      	b.n	800c21e <_ZN12FlashManager9HardResetEb+0x5a>
 800c21c:	2300      	movs	r3, #0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d017      	beq.n	800c252 <_ZN12FlashManager9HardResetEb+0x8e>

		FLASH_EraseInitTypeDef	 FlashErase;
		uint32_t status = 0;
 800c222:	2300      	movs	r3, #0
 800c224:	60bb      	str	r3, [r7, #8]
		FlashErase.Sector = FLASH_SECTOR_5;
 800c226:	2305      	movs	r3, #5
 800c228:	617b      	str	r3, [r7, #20]
		FlashErase.Banks=FLASH_BANK_1;
 800c22a:	2301      	movs	r3, #1
 800c22c:	613b      	str	r3, [r7, #16]
		FlashErase.NbSectors = 1;
 800c22e:	2301      	movs	r3, #1
 800c230:	61bb      	str	r3, [r7, #24]
		FlashErase.TypeErase    = FLASH_TYPEERASE_SECTORS;
 800c232:	2300      	movs	r3, #0
 800c234:	60fb      	str	r3, [r7, #12]
		FlashErase.VoltageRange = VOLTAGE_RANGE_3;
 800c236:	2302      	movs	r3, #2
 800c238:	61fb      	str	r3, [r7, #28]
		HAL_FLASHEx_Erase(&FlashErase, &status);
 800c23a:	f107 0208 	add.w	r2, r7, #8
 800c23e:	f107 030c 	add.w	r3, r7, #12
 800c242:	4611      	mov	r1, r2
 800c244:	4618      	mov	r0, r3
 800c246:	f7f6 fc27 	bl	8002a98 <HAL_FLASHEx_Erase>
		HAL_FLASH_Lock();
 800c24a:	f7f6 fae5 	bl	8002818 <HAL_FLASH_Lock>
		return FlashStatus::Success;
 800c24e:	2300      	movs	r3, #0
 800c250:	e000      	b.n	800c254 <_ZN12FlashManager9HardResetEb+0x90>
	}
	return FlashStatus::Error;
 800c252:	2301      	movs	r3, #1

}
 800c254:	4618      	mov	r0, r3
 800c256:	3738      	adds	r7, #56	@ 0x38
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <_ZN12FlashManager6UpdateEv>:
FlashStatus FlashManager::Update(void){
 800c25c:	b5b0      	push	{r4, r5, r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
	if(!SystemConfig.isBackup){
 800c264:	4b1f      	ldr	r3, [pc, #124]	@ (800c2e4 <_ZN12FlashManager6UpdateEv+0x88>)
 800c266:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800c26a:	f083 0301 	eor.w	r3, r3, #1
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b00      	cmp	r3, #0
 800c272:	d001      	beq.n	800c278 <_ZN12FlashManager6UpdateEv+0x1c>
		return FlashStatus::NotBackup;
 800c274:	2302      	movs	r3, #2
 800c276:	e031      	b.n	800c2dc <_ZN12FlashManager6UpdateEv+0x80>
	}
	if(HAL_FLASH_Unlock()==HAL_OK){
 800c278:	f7f6 faac 	bl	80027d4 <HAL_FLASH_Unlock>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	bf0c      	ite	eq
 800c282:	2301      	moveq	r3, #1
 800c284:	2300      	movne	r3, #0
 800c286:	b2db      	uxtb	r3, r3
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d026      	beq.n	800c2da <_ZN12FlashManager6UpdateEv+0x7e>
		HardReset(false);
 800c28c:	2100      	movs	r1, #0
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7ff ff98 	bl	800c1c4 <_ZN12FlashManager9HardResetEb>
		for (int i = 0; i < SystemConfig.BackupLen; ++i) {
 800c294:	2300      	movs	r3, #0
 800c296:	60fb      	str	r3, [r7, #12]
 800c298:	e016      	b.n	800c2c8 <_ZN12FlashManager6UpdateEv+0x6c>
			uint32_t address=FlashMemAddress+i;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	689a      	ldr	r2, [r3, #8]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	60bb      	str	r3, [r7, #8]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address,SystemConfig.Backup[i] );
 800c2a4:	4a0f      	ldr	r2, [pc, #60]	@ (800c2e4 <_ZN12FlashManager6UpdateEv+0x88>)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	3335      	adds	r3, #53	@ 0x35
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	461c      	mov	r4, r3
 800c2b4:	4615      	mov	r5, r2
 800c2b6:	4622      	mov	r2, r4
 800c2b8:	462b      	mov	r3, r5
 800c2ba:	68b9      	ldr	r1, [r7, #8]
 800c2bc:	2000      	movs	r0, #0
 800c2be:	f7f6 fa35 	bl	800272c <HAL_FLASH_Program>
		for (int i = 0; i < SystemConfig.BackupLen; ++i) {
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	60fb      	str	r3, [r7, #12]
 800c2c8:	4b06      	ldr	r3, [pc, #24]	@ (800c2e4 <_ZN12FlashManager6UpdateEv+0x88>)
 800c2ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	dbe3      	blt.n	800c29a <_ZN12FlashManager6UpdateEv+0x3e>
		}
		HAL_FLASH_Lock();
 800c2d2:	f7f6 faa1 	bl	8002818 <HAL_FLASH_Lock>
		return FlashStatus::Success;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e000      	b.n	800c2dc <_ZN12FlashManager6UpdateEv+0x80>
	}
	return FlashStatus::Error;
 800c2da:	2301      	movs	r3, #1
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bdb0      	pop	{r4, r5, r7, pc}
 800c2e4:	20009328 	.word	0x20009328

0800c2e8 <_ZN12FlashManager9WriteDataEhiPh>:

FlashStatus FlashManager::WriteData(uint8_t appendAddress,int len, uint8_t *data){
 800c2e8:	b480      	push	{r7}
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	607a      	str	r2, [r7, #4]
 800c2f2:	603b      	str	r3, [r7, #0]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	72fb      	strb	r3, [r7, #11]
	if(!SystemConfig.isBackup){
 800c2f8:	4b14      	ldr	r3, [pc, #80]	@ (800c34c <_ZN12FlashManager9WriteDataEhiPh+0x64>)
 800c2fa:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800c2fe:	f083 0301 	eor.w	r3, r3, #1
 800c302:	b2db      	uxtb	r3, r3
 800c304:	2b00      	cmp	r3, #0
 800c306:	d001      	beq.n	800c30c <_ZN12FlashManager9WriteDataEhiPh+0x24>
		return FlashStatus::NotBackup;
 800c308:	2302      	movs	r3, #2
 800c30a:	e018      	b.n	800c33e <_ZN12FlashManager9WriteDataEhiPh+0x56>
	}
	for (int i = 0; i < len; ++i) {
 800c30c:	2300      	movs	r3, #0
 800c30e:	617b      	str	r3, [r7, #20]
 800c310:	e010      	b.n	800c334 <_ZN12FlashManager9WriteDataEhiPh+0x4c>
		uint32_t address=appendAddress+i;
 800c312:	7afa      	ldrb	r2, [r7, #11]
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	4413      	add	r3, r2
 800c318:	613b      	str	r3, [r7, #16]
		SystemConfig.Backup[address]=data[i];
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	4413      	add	r3, r2
 800c320:	7819      	ldrb	r1, [r3, #0]
 800c322:	4a0a      	ldr	r2, [pc, #40]	@ (800c34c <_ZN12FlashManager9WriteDataEhiPh+0x64>)
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	4413      	add	r3, r2
 800c328:	3335      	adds	r3, #53	@ 0x35
 800c32a:	460a      	mov	r2, r1
 800c32c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; ++i) {
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	3301      	adds	r3, #1
 800c332:	617b      	str	r3, [r7, #20]
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	429a      	cmp	r2, r3
 800c33a:	dbea      	blt.n	800c312 <_ZN12FlashManager9WriteDataEhiPh+0x2a>
	}
	return FlashStatus::Success;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	371c      	adds	r7, #28
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	20009328 	.word	0x20009328

0800c350 <_ZN12FlashManager5SetupEv>:
void FlashManager::Setup(){
 800c350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c354:	b087      	sub	sp, #28
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
	size_t size=1;
    uint8_t data[size]={0};
	WriteData(SetupAppendAddress,size, data);
}
 800c35a:	466b      	mov	r3, sp
 800c35c:	461e      	mov	r6, r3
	size_t size=1;
 800c35e:	2301      	movs	r3, #1
 800c360:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={0};
 800c362:	6979      	ldr	r1, [r7, #20]
 800c364:	460b      	mov	r3, r1
 800c366:	3b01      	subs	r3, #1
 800c368:	613b      	str	r3, [r7, #16]
 800c36a:	2300      	movs	r3, #0
 800c36c:	4688      	mov	r8, r1
 800c36e:	4699      	mov	r9, r3
 800c370:	f04f 0200 	mov.w	r2, #0
 800c374:	f04f 0300 	mov.w	r3, #0
 800c378:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c37c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c380:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c384:	2300      	movs	r3, #0
 800c386:	460c      	mov	r4, r1
 800c388:	461d      	mov	r5, r3
 800c38a:	f04f 0200 	mov.w	r2, #0
 800c38e:	f04f 0300 	mov.w	r3, #0
 800c392:	00eb      	lsls	r3, r5, #3
 800c394:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c398:	00e2      	lsls	r2, r4, #3
 800c39a:	1dcb      	adds	r3, r1, #7
 800c39c:	08db      	lsrs	r3, r3, #3
 800c39e:	00db      	lsls	r3, r3, #3
 800c3a0:	ebad 0d03 	sub.w	sp, sp, r3
 800c3a4:	466b      	mov	r3, sp
 800c3a6:	3300      	adds	r3, #0
 800c3a8:	60fb      	str	r3, [r7, #12]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	460a      	mov	r2, r1
 800c3ae:	1e51      	subs	r1, r2, #1
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	701a      	strb	r2, [r3, #0]
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	1e4b      	subs	r3, r1, #1
 800c3b8:	e003      	b.n	800c3c2 <_ZN12FlashManager5SetupEv+0x72>
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	7011      	strb	r1, [r2, #0]
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	3201      	adds	r2, #1
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	daf9      	bge.n	800c3ba <_ZN12FlashManager5SetupEv+0x6a>
	WriteData(SetupAppendAddress,size, data);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	7c99      	ldrb	r1, [r3, #18]
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7ff ff8a 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800c3d4:	46b5      	mov	sp, r6
}
 800c3d6:	bf00      	nop
 800c3d8:	371c      	adds	r7, #28
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c3e0 <_ZN12FlashManager7IsSetupEv>:
bool FlashManager::IsSetup(){
 800c3e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3e4:	b089      	sub	sp, #36	@ 0x24
 800c3e6:	af02      	add	r7, sp, #8
 800c3e8:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,SetupAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return (value==0x00);
}
 800c3ea:	466b      	mov	r3, sp
 800c3ec:	461e      	mov	r6, r3
	BackupData();
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7ff fecc 	bl	800c18c <_ZN12FlashManager10BackupDataEv>
	size_t size=1;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800c3f8:	6979      	ldr	r1, [r7, #20]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	613b      	str	r3, [r7, #16]
 800c400:	2300      	movs	r3, #0
 800c402:	4688      	mov	r8, r1
 800c404:	4699      	mov	r9, r3
 800c406:	f04f 0200 	mov.w	r2, #0
 800c40a:	f04f 0300 	mov.w	r3, #0
 800c40e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c41a:	2300      	movs	r3, #0
 800c41c:	460c      	mov	r4, r1
 800c41e:	461d      	mov	r5, r3
 800c420:	f04f 0200 	mov.w	r2, #0
 800c424:	f04f 0300 	mov.w	r3, #0
 800c428:	00eb      	lsls	r3, r5, #3
 800c42a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c42e:	00e2      	lsls	r2, r4, #3
 800c430:	1dcb      	adds	r3, r1, #7
 800c432:	08db      	lsrs	r3, r3, #3
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	ebad 0d03 	sub.w	sp, sp, r3
 800c43a:	ab02      	add	r3, sp, #8
 800c43c:	3300      	adds	r3, #0
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	460a      	mov	r2, r1
 800c444:	1e51      	subs	r1, r2, #1
 800c446:	22ff      	movs	r2, #255	@ 0xff
 800c448:	701a      	strb	r2, [r3, #0]
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	1e4b      	subs	r3, r1, #1
 800c44e:	e003      	b.n	800c458 <_ZN12FlashManager7IsSetupEv+0x78>
 800c450:	2100      	movs	r1, #0
 800c452:	7011      	strb	r1, [r2, #0]
 800c454:	3b01      	subs	r3, #1
 800c456:	3201      	adds	r2, #1
 800c458:	2b00      	cmp	r3, #0
 800c45a:	daf9      	bge.n	800c450 <_ZN12FlashManager7IsSetupEv+0x70>
	ReadData(data,SetupAppendAddress,size, false);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	7c9a      	ldrb	r2, [r3, #18]
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	2100      	movs	r1, #0
 800c464:	9100      	str	r1, [sp, #0]
 800c466:	68f9      	ldr	r1, [r7, #12]
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7ff fddf 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c46e:	f107 030b 	add.w	r3, r7, #11
 800c472:	697a      	ldr	r2, [r7, #20]
 800c474:	68f9      	ldr	r1, [r7, #12]
 800c476:	4618      	mov	r0, r3
 800c478:	f004 fdf7 	bl	801106a <memcpy>
    return (value==0x00);
 800c47c:	7afb      	ldrb	r3, [r7, #11]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	bf0c      	ite	eq
 800c482:	2301      	moveq	r3, #1
 800c484:	2300      	movne	r3, #0
 800c486:	b2db      	uxtb	r3, r3
 800c488:	46b5      	mov	sp, r6
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	371c      	adds	r7, #28
 800c48e:	46bd      	mov	sp, r7
 800c490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c494 <_ZN12FlashManager18WriteSendPerSecondEh>:
void FlashManager::WriteSendPerSecond(uint8_t count){
 800c494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c498:	b087      	sub	sp, #28
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	460b      	mov	r3, r1
 800c4a0:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(SendPerSecondAppendAddress,size, data);
}
 800c4a2:	466b      	mov	r3, sp
 800c4a4:	461e      	mov	r6, r3
	size_t size=1;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800c4aa:	6979      	ldr	r1, [r7, #20]
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	613b      	str	r3, [r7, #16]
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	4688      	mov	r8, r1
 800c4b6:	4699      	mov	r9, r3
 800c4b8:	f04f 0200 	mov.w	r2, #0
 800c4bc:	f04f 0300 	mov.w	r3, #0
 800c4c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c4c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c4c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	460c      	mov	r4, r1
 800c4d0:	461d      	mov	r5, r3
 800c4d2:	f04f 0200 	mov.w	r2, #0
 800c4d6:	f04f 0300 	mov.w	r3, #0
 800c4da:	00eb      	lsls	r3, r5, #3
 800c4dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c4e0:	00e2      	lsls	r2, r4, #3
 800c4e2:	1dcb      	adds	r3, r1, #7
 800c4e4:	08db      	lsrs	r3, r3, #3
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	ebad 0d03 	sub.w	sp, sp, r3
 800c4ec:	466b      	mov	r3, sp
 800c4ee:	3300      	adds	r3, #0
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	460a      	mov	r2, r1
 800c4f6:	1e51      	subs	r1, r2, #1
 800c4f8:	78fa      	ldrb	r2, [r7, #3]
 800c4fa:	701a      	strb	r2, [r3, #0]
 800c4fc:	1c5a      	adds	r2, r3, #1
 800c4fe:	1e4b      	subs	r3, r1, #1
 800c500:	e003      	b.n	800c50a <_ZN12FlashManager18WriteSendPerSecondEh+0x76>
 800c502:	2100      	movs	r1, #0
 800c504:	7011      	strb	r1, [r2, #0]
 800c506:	3b01      	subs	r3, #1
 800c508:	3201      	adds	r2, #1
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	daf9      	bge.n	800c502 <_ZN12FlashManager18WriteSendPerSecondEh+0x6e>
	WriteData(SendPerSecondAppendAddress,size, data);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	7cd9      	ldrb	r1, [r3, #19]
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7ff fee6 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800c51c:	46b5      	mov	sp, r6
}
 800c51e:	bf00      	nop
 800c520:	371c      	adds	r7, #28
 800c522:	46bd      	mov	sp, r7
 800c524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c528 <_ZN12FlashManager17ReadSendPerSecondEv>:
uint8_t FlashManager::ReadSendPerSecond(){
 800c528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c52c:	b089      	sub	sp, #36	@ 0x24
 800c52e:	af02      	add	r7, sp, #8
 800c530:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0XFF};
	ReadData(data,SendPerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800c532:	466b      	mov	r3, sp
 800c534:	461e      	mov	r6, r3
	size_t size=1;
 800c536:	2301      	movs	r3, #1
 800c538:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0XFF};
 800c53a:	6979      	ldr	r1, [r7, #20]
 800c53c:	460b      	mov	r3, r1
 800c53e:	3b01      	subs	r3, #1
 800c540:	613b      	str	r3, [r7, #16]
 800c542:	2300      	movs	r3, #0
 800c544:	4688      	mov	r8, r1
 800c546:	4699      	mov	r9, r3
 800c548:	f04f 0200 	mov.w	r2, #0
 800c54c:	f04f 0300 	mov.w	r3, #0
 800c550:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c554:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c558:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c55c:	2300      	movs	r3, #0
 800c55e:	460c      	mov	r4, r1
 800c560:	461d      	mov	r5, r3
 800c562:	f04f 0200 	mov.w	r2, #0
 800c566:	f04f 0300 	mov.w	r3, #0
 800c56a:	00eb      	lsls	r3, r5, #3
 800c56c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c570:	00e2      	lsls	r2, r4, #3
 800c572:	1dcb      	adds	r3, r1, #7
 800c574:	08db      	lsrs	r3, r3, #3
 800c576:	00db      	lsls	r3, r3, #3
 800c578:	ebad 0d03 	sub.w	sp, sp, r3
 800c57c:	ab02      	add	r3, sp, #8
 800c57e:	3300      	adds	r3, #0
 800c580:	60fb      	str	r3, [r7, #12]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	460a      	mov	r2, r1
 800c586:	1e51      	subs	r1, r2, #1
 800c588:	22ff      	movs	r2, #255	@ 0xff
 800c58a:	701a      	strb	r2, [r3, #0]
 800c58c:	1c5a      	adds	r2, r3, #1
 800c58e:	1e4b      	subs	r3, r1, #1
 800c590:	e003      	b.n	800c59a <_ZN12FlashManager17ReadSendPerSecondEv+0x72>
 800c592:	2100      	movs	r1, #0
 800c594:	7011      	strb	r1, [r2, #0]
 800c596:	3b01      	subs	r3, #1
 800c598:	3201      	adds	r2, #1
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	daf9      	bge.n	800c592 <_ZN12FlashManager17ReadSendPerSecondEv+0x6a>
	ReadData(data,SendPerSecondAppendAddress,size, false);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	7cda      	ldrb	r2, [r3, #19]
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	9100      	str	r1, [sp, #0]
 800c5a8:	68f9      	ldr	r1, [r7, #12]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f7ff fd3e 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c5b0:	f107 030b 	add.w	r3, r7, #11
 800c5b4:	697a      	ldr	r2, [r7, #20]
 800c5b6:	68f9      	ldr	r1, [r7, #12]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f004 fd56 	bl	801106a <memcpy>
    return value;
 800c5be:	7afb      	ldrb	r3, [r7, #11]
 800c5c0:	46b5      	mov	sp, r6
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	371c      	adds	r7, #28
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c5cc <_ZN12FlashManager22WriteFirstEmgPerSecondEh>:
void FlashManager::WriteFirstEmgPerSecond(uint8_t count){
 800c5cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5d0:	b087      	sub	sp, #28
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(FirstEmgPerSecondAppendAddress,size, data);
}
 800c5da:	466b      	mov	r3, sp
 800c5dc:	461e      	mov	r6, r3
	size_t size=1;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800c5e2:	6979      	ldr	r1, [r7, #20]
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	613b      	str	r3, [r7, #16]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	4688      	mov	r8, r1
 800c5ee:	4699      	mov	r9, r3
 800c5f0:	f04f 0200 	mov.w	r2, #0
 800c5f4:	f04f 0300 	mov.w	r3, #0
 800c5f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c5fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c600:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c604:	2300      	movs	r3, #0
 800c606:	460c      	mov	r4, r1
 800c608:	461d      	mov	r5, r3
 800c60a:	f04f 0200 	mov.w	r2, #0
 800c60e:	f04f 0300 	mov.w	r3, #0
 800c612:	00eb      	lsls	r3, r5, #3
 800c614:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c618:	00e2      	lsls	r2, r4, #3
 800c61a:	1dcb      	adds	r3, r1, #7
 800c61c:	08db      	lsrs	r3, r3, #3
 800c61e:	00db      	lsls	r3, r3, #3
 800c620:	ebad 0d03 	sub.w	sp, sp, r3
 800c624:	466b      	mov	r3, sp
 800c626:	3300      	adds	r3, #0
 800c628:	60fb      	str	r3, [r7, #12]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	460a      	mov	r2, r1
 800c62e:	1e51      	subs	r1, r2, #1
 800c630:	78fa      	ldrb	r2, [r7, #3]
 800c632:	701a      	strb	r2, [r3, #0]
 800c634:	1c5a      	adds	r2, r3, #1
 800c636:	1e4b      	subs	r3, r1, #1
 800c638:	e003      	b.n	800c642 <_ZN12FlashManager22WriteFirstEmgPerSecondEh+0x76>
 800c63a:	2100      	movs	r1, #0
 800c63c:	7011      	strb	r1, [r2, #0]
 800c63e:	3b01      	subs	r3, #1
 800c640:	3201      	adds	r2, #1
 800c642:	2b00      	cmp	r3, #0
 800c644:	daf9      	bge.n	800c63a <_ZN12FlashManager22WriteFirstEmgPerSecondEh+0x6e>
	WriteData(FirstEmgPerSecondAppendAddress,size, data);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	7d19      	ldrb	r1, [r3, #20]
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7ff fe4a 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800c654:	46b5      	mov	sp, r6
}
 800c656:	bf00      	nop
 800c658:	371c      	adds	r7, #28
 800c65a:	46bd      	mov	sp, r7
 800c65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c660 <_ZN12FlashManager21ReadFirstEmgPerSecondEv>:
uint8_t FlashManager::ReadFirstEmgPerSecond(){
 800c660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c664:	b089      	sub	sp, #36	@ 0x24
 800c666:	af02      	add	r7, sp, #8
 800c668:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,FirstEmgPerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800c66a:	466b      	mov	r3, sp
 800c66c:	461e      	mov	r6, r3
	size_t size=1;
 800c66e:	2301      	movs	r3, #1
 800c670:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800c672:	6979      	ldr	r1, [r7, #20]
 800c674:	460b      	mov	r3, r1
 800c676:	3b01      	subs	r3, #1
 800c678:	613b      	str	r3, [r7, #16]
 800c67a:	2300      	movs	r3, #0
 800c67c:	4688      	mov	r8, r1
 800c67e:	4699      	mov	r9, r3
 800c680:	f04f 0200 	mov.w	r2, #0
 800c684:	f04f 0300 	mov.w	r3, #0
 800c688:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c68c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c690:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c694:	2300      	movs	r3, #0
 800c696:	460c      	mov	r4, r1
 800c698:	461d      	mov	r5, r3
 800c69a:	f04f 0200 	mov.w	r2, #0
 800c69e:	f04f 0300 	mov.w	r3, #0
 800c6a2:	00eb      	lsls	r3, r5, #3
 800c6a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c6a8:	00e2      	lsls	r2, r4, #3
 800c6aa:	1dcb      	adds	r3, r1, #7
 800c6ac:	08db      	lsrs	r3, r3, #3
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	ebad 0d03 	sub.w	sp, sp, r3
 800c6b4:	ab02      	add	r3, sp, #8
 800c6b6:	3300      	adds	r3, #0
 800c6b8:	60fb      	str	r3, [r7, #12]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	460a      	mov	r2, r1
 800c6be:	1e51      	subs	r1, r2, #1
 800c6c0:	22ff      	movs	r2, #255	@ 0xff
 800c6c2:	701a      	strb	r2, [r3, #0]
 800c6c4:	1c5a      	adds	r2, r3, #1
 800c6c6:	1e4b      	subs	r3, r1, #1
 800c6c8:	e003      	b.n	800c6d2 <_ZN12FlashManager21ReadFirstEmgPerSecondEv+0x72>
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	7011      	strb	r1, [r2, #0]
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	3201      	adds	r2, #1
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	daf9      	bge.n	800c6ca <_ZN12FlashManager21ReadFirstEmgPerSecondEv+0x6a>
	ReadData(data,FirstEmgPerSecondAppendAddress,size, false);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	7d1a      	ldrb	r2, [r3, #20]
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	2100      	movs	r1, #0
 800c6de:	9100      	str	r1, [sp, #0]
 800c6e0:	68f9      	ldr	r1, [r7, #12]
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7ff fca2 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c6e8:	f107 030b 	add.w	r3, r7, #11
 800c6ec:	697a      	ldr	r2, [r7, #20]
 800c6ee:	68f9      	ldr	r1, [r7, #12]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f004 fcba 	bl	801106a <memcpy>
    return value;
 800c6f6:	7afb      	ldrb	r3, [r7, #11]
 800c6f8:	46b5      	mov	sp, r6
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	371c      	adds	r7, #28
 800c6fe:	46bd      	mov	sp, r7
 800c700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c704 <_ZN12FlashManager23WriteSecondEmgPerSecondEh>:
void FlashManager::WriteSecondEmgPerSecond(uint8_t count){
 800c704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c708:	b087      	sub	sp, #28
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	460b      	mov	r3, r1
 800c710:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(SecondEmgPerSecondAppendAddress,size, data);
}
 800c712:	466b      	mov	r3, sp
 800c714:	461e      	mov	r6, r3
	size_t size=1;
 800c716:	2301      	movs	r3, #1
 800c718:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800c71a:	6979      	ldr	r1, [r7, #20]
 800c71c:	460b      	mov	r3, r1
 800c71e:	3b01      	subs	r3, #1
 800c720:	613b      	str	r3, [r7, #16]
 800c722:	2300      	movs	r3, #0
 800c724:	4688      	mov	r8, r1
 800c726:	4699      	mov	r9, r3
 800c728:	f04f 0200 	mov.w	r2, #0
 800c72c:	f04f 0300 	mov.w	r3, #0
 800c730:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c734:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c738:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c73c:	2300      	movs	r3, #0
 800c73e:	460c      	mov	r4, r1
 800c740:	461d      	mov	r5, r3
 800c742:	f04f 0200 	mov.w	r2, #0
 800c746:	f04f 0300 	mov.w	r3, #0
 800c74a:	00eb      	lsls	r3, r5, #3
 800c74c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c750:	00e2      	lsls	r2, r4, #3
 800c752:	1dcb      	adds	r3, r1, #7
 800c754:	08db      	lsrs	r3, r3, #3
 800c756:	00db      	lsls	r3, r3, #3
 800c758:	ebad 0d03 	sub.w	sp, sp, r3
 800c75c:	466b      	mov	r3, sp
 800c75e:	3300      	adds	r3, #0
 800c760:	60fb      	str	r3, [r7, #12]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	460a      	mov	r2, r1
 800c766:	1e51      	subs	r1, r2, #1
 800c768:	78fa      	ldrb	r2, [r7, #3]
 800c76a:	701a      	strb	r2, [r3, #0]
 800c76c:	1c5a      	adds	r2, r3, #1
 800c76e:	1e4b      	subs	r3, r1, #1
 800c770:	e003      	b.n	800c77a <_ZN12FlashManager23WriteSecondEmgPerSecondEh+0x76>
 800c772:	2100      	movs	r1, #0
 800c774:	7011      	strb	r1, [r2, #0]
 800c776:	3b01      	subs	r3, #1
 800c778:	3201      	adds	r2, #1
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	daf9      	bge.n	800c772 <_ZN12FlashManager23WriteSecondEmgPerSecondEh+0x6e>
	WriteData(SecondEmgPerSecondAppendAddress,size, data);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	7d59      	ldrb	r1, [r3, #21]
 800c782:	697a      	ldr	r2, [r7, #20]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7ff fdae 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800c78c:	46b5      	mov	sp, r6
}
 800c78e:	bf00      	nop
 800c790:	371c      	adds	r7, #28
 800c792:	46bd      	mov	sp, r7
 800c794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c798 <_ZN12FlashManager22ReadSecondEmgPerSecondEv>:
uint8_t FlashManager::ReadSecondEmgPerSecond(){
 800c798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c79c:	b089      	sub	sp, #36	@ 0x24
 800c79e:	af02      	add	r7, sp, #8
 800c7a0:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,SecondEmgPerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800c7a2:	466b      	mov	r3, sp
 800c7a4:	461e      	mov	r6, r3
	size_t size=1;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800c7aa:	6979      	ldr	r1, [r7, #20]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	613b      	str	r3, [r7, #16]
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	4688      	mov	r8, r1
 800c7b6:	4699      	mov	r9, r3
 800c7b8:	f04f 0200 	mov.w	r2, #0
 800c7bc:	f04f 0300 	mov.w	r3, #0
 800c7c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c7c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c7c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	461d      	mov	r5, r3
 800c7d2:	f04f 0200 	mov.w	r2, #0
 800c7d6:	f04f 0300 	mov.w	r3, #0
 800c7da:	00eb      	lsls	r3, r5, #3
 800c7dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c7e0:	00e2      	lsls	r2, r4, #3
 800c7e2:	1dcb      	adds	r3, r1, #7
 800c7e4:	08db      	lsrs	r3, r3, #3
 800c7e6:	00db      	lsls	r3, r3, #3
 800c7e8:	ebad 0d03 	sub.w	sp, sp, r3
 800c7ec:	ab02      	add	r3, sp, #8
 800c7ee:	3300      	adds	r3, #0
 800c7f0:	60fb      	str	r3, [r7, #12]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	460a      	mov	r2, r1
 800c7f6:	1e51      	subs	r1, r2, #1
 800c7f8:	22ff      	movs	r2, #255	@ 0xff
 800c7fa:	701a      	strb	r2, [r3, #0]
 800c7fc:	1c5a      	adds	r2, r3, #1
 800c7fe:	1e4b      	subs	r3, r1, #1
 800c800:	e003      	b.n	800c80a <_ZN12FlashManager22ReadSecondEmgPerSecondEv+0x72>
 800c802:	2100      	movs	r1, #0
 800c804:	7011      	strb	r1, [r2, #0]
 800c806:	3b01      	subs	r3, #1
 800c808:	3201      	adds	r2, #1
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	daf9      	bge.n	800c802 <_ZN12FlashManager22ReadSecondEmgPerSecondEv+0x6a>
	ReadData(data,SecondEmgPerSecondAppendAddress,size, false);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	7d5a      	ldrb	r2, [r3, #21]
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	2100      	movs	r1, #0
 800c816:	9100      	str	r1, [sp, #0]
 800c818:	68f9      	ldr	r1, [r7, #12]
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7ff fc06 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c820:	f107 030b 	add.w	r3, r7, #11
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	68f9      	ldr	r1, [r7, #12]
 800c828:	4618      	mov	r0, r3
 800c82a:	f004 fc1e 	bl	801106a <memcpy>
    return value;
 800c82e:	7afb      	ldrb	r3, [r7, #11]
 800c830:	46b5      	mov	sp, r6
}
 800c832:	4618      	mov	r0, r3
 800c834:	371c      	adds	r7, #28
 800c836:	46bd      	mov	sp, r7
 800c838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c83c <_ZN12FlashManager20WriteVolumePerSecondEh>:
void FlashManager::WriteVolumePerSecond(uint8_t count){
 800c83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c840:	b087      	sub	sp, #28
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
 800c846:	460b      	mov	r3, r1
 800c848:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(VolumePerSecondAppendAddress,size, data);
}
 800c84a:	466b      	mov	r3, sp
 800c84c:	461e      	mov	r6, r3
	size_t size=1;
 800c84e:	2301      	movs	r3, #1
 800c850:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800c852:	6979      	ldr	r1, [r7, #20]
 800c854:	460b      	mov	r3, r1
 800c856:	3b01      	subs	r3, #1
 800c858:	613b      	str	r3, [r7, #16]
 800c85a:	2300      	movs	r3, #0
 800c85c:	4688      	mov	r8, r1
 800c85e:	4699      	mov	r9, r3
 800c860:	f04f 0200 	mov.w	r2, #0
 800c864:	f04f 0300 	mov.w	r3, #0
 800c868:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c86c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c870:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c874:	2300      	movs	r3, #0
 800c876:	460c      	mov	r4, r1
 800c878:	461d      	mov	r5, r3
 800c87a:	f04f 0200 	mov.w	r2, #0
 800c87e:	f04f 0300 	mov.w	r3, #0
 800c882:	00eb      	lsls	r3, r5, #3
 800c884:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c888:	00e2      	lsls	r2, r4, #3
 800c88a:	1dcb      	adds	r3, r1, #7
 800c88c:	08db      	lsrs	r3, r3, #3
 800c88e:	00db      	lsls	r3, r3, #3
 800c890:	ebad 0d03 	sub.w	sp, sp, r3
 800c894:	466b      	mov	r3, sp
 800c896:	3300      	adds	r3, #0
 800c898:	60fb      	str	r3, [r7, #12]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	460a      	mov	r2, r1
 800c89e:	1e51      	subs	r1, r2, #1
 800c8a0:	78fa      	ldrb	r2, [r7, #3]
 800c8a2:	701a      	strb	r2, [r3, #0]
 800c8a4:	1c5a      	adds	r2, r3, #1
 800c8a6:	1e4b      	subs	r3, r1, #1
 800c8a8:	e003      	b.n	800c8b2 <_ZN12FlashManager20WriteVolumePerSecondEh+0x76>
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	7011      	strb	r1, [r2, #0]
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	3201      	adds	r2, #1
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	daf9      	bge.n	800c8aa <_ZN12FlashManager20WriteVolumePerSecondEh+0x6e>
	WriteData(VolumePerSecondAppendAddress,size, data);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	7d99      	ldrb	r1, [r3, #22]
 800c8ba:	697a      	ldr	r2, [r7, #20]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7ff fd12 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800c8c4:	46b5      	mov	sp, r6
}
 800c8c6:	bf00      	nop
 800c8c8:	371c      	adds	r7, #28
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c8d0 <_ZN12FlashManager19ReadVolumePerSecondEv>:
uint8_t FlashManager::ReadVolumePerSecond(){
 800c8d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8d4:	b089      	sub	sp, #36	@ 0x24
 800c8d6:	af02      	add	r7, sp, #8
 800c8d8:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,VolumePerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800c8da:	466b      	mov	r3, sp
 800c8dc:	461e      	mov	r6, r3
	size_t size=1;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800c8e2:	6979      	ldr	r1, [r7, #20]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	613b      	str	r3, [r7, #16]
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	4688      	mov	r8, r1
 800c8ee:	4699      	mov	r9, r3
 800c8f0:	f04f 0200 	mov.w	r2, #0
 800c8f4:	f04f 0300 	mov.w	r3, #0
 800c8f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c8fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c900:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c904:	2300      	movs	r3, #0
 800c906:	460c      	mov	r4, r1
 800c908:	461d      	mov	r5, r3
 800c90a:	f04f 0200 	mov.w	r2, #0
 800c90e:	f04f 0300 	mov.w	r3, #0
 800c912:	00eb      	lsls	r3, r5, #3
 800c914:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c918:	00e2      	lsls	r2, r4, #3
 800c91a:	1dcb      	adds	r3, r1, #7
 800c91c:	08db      	lsrs	r3, r3, #3
 800c91e:	00db      	lsls	r3, r3, #3
 800c920:	ebad 0d03 	sub.w	sp, sp, r3
 800c924:	ab02      	add	r3, sp, #8
 800c926:	3300      	adds	r3, #0
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	460a      	mov	r2, r1
 800c92e:	1e51      	subs	r1, r2, #1
 800c930:	22ff      	movs	r2, #255	@ 0xff
 800c932:	701a      	strb	r2, [r3, #0]
 800c934:	1c5a      	adds	r2, r3, #1
 800c936:	1e4b      	subs	r3, r1, #1
 800c938:	e003      	b.n	800c942 <_ZN12FlashManager19ReadVolumePerSecondEv+0x72>
 800c93a:	2100      	movs	r1, #0
 800c93c:	7011      	strb	r1, [r2, #0]
 800c93e:	3b01      	subs	r3, #1
 800c940:	3201      	adds	r2, #1
 800c942:	2b00      	cmp	r3, #0
 800c944:	daf9      	bge.n	800c93a <_ZN12FlashManager19ReadVolumePerSecondEv+0x6a>
	ReadData(data,VolumePerSecondAppendAddress,size, false);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	7d9a      	ldrb	r2, [r3, #22]
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2100      	movs	r1, #0
 800c94e:	9100      	str	r1, [sp, #0]
 800c950:	68f9      	ldr	r1, [r7, #12]
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff fb6a 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800c958:	f107 030b 	add.w	r3, r7, #11
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	68f9      	ldr	r1, [r7, #12]
 800c960:	4618      	mov	r0, r3
 800c962:	f004 fb82 	bl	801106a <memcpy>
    return value;
 800c966:	7afb      	ldrb	r3, [r7, #11]
 800c968:	46b5      	mov	sp, r6
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	371c      	adds	r7, #28
 800c96e:	46bd      	mov	sp, r7
 800c970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c974 <_ZN12FlashManager18WriteFlowPerSecondEh>:
void FlashManager::WriteFlowPerSecond(uint8_t count){
 800c974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c978:	b087      	sub	sp, #28
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	460b      	mov	r3, r1
 800c980:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={count};
	WriteData(FlowPerSecondAppendAddress,size, data);
}
 800c982:	466b      	mov	r3, sp
 800c984:	461e      	mov	r6, r3
	size_t size=1;
 800c986:	2301      	movs	r3, #1
 800c988:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={count};
 800c98a:	6979      	ldr	r1, [r7, #20]
 800c98c:	460b      	mov	r3, r1
 800c98e:	3b01      	subs	r3, #1
 800c990:	613b      	str	r3, [r7, #16]
 800c992:	2300      	movs	r3, #0
 800c994:	4688      	mov	r8, r1
 800c996:	4699      	mov	r9, r3
 800c998:	f04f 0200 	mov.w	r2, #0
 800c99c:	f04f 0300 	mov.w	r3, #0
 800c9a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c9a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c9a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	460c      	mov	r4, r1
 800c9b0:	461d      	mov	r5, r3
 800c9b2:	f04f 0200 	mov.w	r2, #0
 800c9b6:	f04f 0300 	mov.w	r3, #0
 800c9ba:	00eb      	lsls	r3, r5, #3
 800c9bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c9c0:	00e2      	lsls	r2, r4, #3
 800c9c2:	1dcb      	adds	r3, r1, #7
 800c9c4:	08db      	lsrs	r3, r3, #3
 800c9c6:	00db      	lsls	r3, r3, #3
 800c9c8:	ebad 0d03 	sub.w	sp, sp, r3
 800c9cc:	466b      	mov	r3, sp
 800c9ce:	3300      	adds	r3, #0
 800c9d0:	60fb      	str	r3, [r7, #12]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	460a      	mov	r2, r1
 800c9d6:	1e51      	subs	r1, r2, #1
 800c9d8:	78fa      	ldrb	r2, [r7, #3]
 800c9da:	701a      	strb	r2, [r3, #0]
 800c9dc:	1c5a      	adds	r2, r3, #1
 800c9de:	1e4b      	subs	r3, r1, #1
 800c9e0:	e003      	b.n	800c9ea <_ZN12FlashManager18WriteFlowPerSecondEh+0x76>
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	7011      	strb	r1, [r2, #0]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	3201      	adds	r2, #1
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	daf9      	bge.n	800c9e2 <_ZN12FlashManager18WriteFlowPerSecondEh+0x6e>
	WriteData(FlowPerSecondAppendAddress,size, data);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	7dd9      	ldrb	r1, [r3, #23]
 800c9f2:	697a      	ldr	r2, [r7, #20]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7ff fc76 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800c9fc:	46b5      	mov	sp, r6
}
 800c9fe:	bf00      	nop
 800ca00:	371c      	adds	r7, #28
 800ca02:	46bd      	mov	sp, r7
 800ca04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ca08 <_ZN12FlashManager17ReadFlowPerSecondEv>:
uint8_t FlashManager::ReadFlowPerSecond(){
 800ca08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca0c:	b089      	sub	sp, #36	@ 0x24
 800ca0e:	af02      	add	r7, sp, #8
 800ca10:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,FlowPerSecondAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800ca12:	466b      	mov	r3, sp
 800ca14:	461e      	mov	r6, r3
	size_t size=1;
 800ca16:	2301      	movs	r3, #1
 800ca18:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800ca1a:	6979      	ldr	r1, [r7, #20]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	613b      	str	r3, [r7, #16]
 800ca22:	2300      	movs	r3, #0
 800ca24:	4688      	mov	r8, r1
 800ca26:	4699      	mov	r9, r3
 800ca28:	f04f 0200 	mov.w	r2, #0
 800ca2c:	f04f 0300 	mov.w	r3, #0
 800ca30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ca34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ca38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	460c      	mov	r4, r1
 800ca40:	461d      	mov	r5, r3
 800ca42:	f04f 0200 	mov.w	r2, #0
 800ca46:	f04f 0300 	mov.w	r3, #0
 800ca4a:	00eb      	lsls	r3, r5, #3
 800ca4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca50:	00e2      	lsls	r2, r4, #3
 800ca52:	1dcb      	adds	r3, r1, #7
 800ca54:	08db      	lsrs	r3, r3, #3
 800ca56:	00db      	lsls	r3, r3, #3
 800ca58:	ebad 0d03 	sub.w	sp, sp, r3
 800ca5c:	ab02      	add	r3, sp, #8
 800ca5e:	3300      	adds	r3, #0
 800ca60:	60fb      	str	r3, [r7, #12]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	460a      	mov	r2, r1
 800ca66:	1e51      	subs	r1, r2, #1
 800ca68:	22ff      	movs	r2, #255	@ 0xff
 800ca6a:	701a      	strb	r2, [r3, #0]
 800ca6c:	1c5a      	adds	r2, r3, #1
 800ca6e:	1e4b      	subs	r3, r1, #1
 800ca70:	e003      	b.n	800ca7a <_ZN12FlashManager17ReadFlowPerSecondEv+0x72>
 800ca72:	2100      	movs	r1, #0
 800ca74:	7011      	strb	r1, [r2, #0]
 800ca76:	3b01      	subs	r3, #1
 800ca78:	3201      	adds	r2, #1
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	daf9      	bge.n	800ca72 <_ZN12FlashManager17ReadFlowPerSecondEv+0x6a>
	ReadData(data,FlowPerSecondAppendAddress,size, false);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	7dda      	ldrb	r2, [r3, #23]
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	2100      	movs	r1, #0
 800ca86:	9100      	str	r1, [sp, #0]
 800ca88:	68f9      	ldr	r1, [r7, #12]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f7ff face 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800ca90:	f107 030b 	add.w	r3, r7, #11
 800ca94:	697a      	ldr	r2, [r7, #20]
 800ca96:	68f9      	ldr	r1, [r7, #12]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f004 fae6 	bl	801106a <memcpy>
    return value;
 800ca9e:	7afb      	ldrb	r3, [r7, #11]
 800caa0:	46b5      	mov	sp, r6
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	371c      	adds	r7, #28
 800caa6:	46bd      	mov	sp, r7
 800caa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800caac <_ZN12FlashManager19WritePumpMaxRunTimeEh>:
void FlashManager::WritePumpMaxRunTime(uint8_t second){
 800caac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cab0:	b087      	sub	sp, #28
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
 800cab6:	460b      	mov	r3, r1
 800cab8:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={second};
	WriteData(PumpMaxRunTimeAppendAddress,size, data);
}
 800caba:	466b      	mov	r3, sp
 800cabc:	461e      	mov	r6, r3
	size_t size=1;
 800cabe:	2301      	movs	r3, #1
 800cac0:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={second};
 800cac2:	6979      	ldr	r1, [r7, #20]
 800cac4:	460b      	mov	r3, r1
 800cac6:	3b01      	subs	r3, #1
 800cac8:	613b      	str	r3, [r7, #16]
 800caca:	2300      	movs	r3, #0
 800cacc:	4688      	mov	r8, r1
 800cace:	4699      	mov	r9, r3
 800cad0:	f04f 0200 	mov.w	r2, #0
 800cad4:	f04f 0300 	mov.w	r3, #0
 800cad8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cadc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cae0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cae4:	2300      	movs	r3, #0
 800cae6:	460c      	mov	r4, r1
 800cae8:	461d      	mov	r5, r3
 800caea:	f04f 0200 	mov.w	r2, #0
 800caee:	f04f 0300 	mov.w	r3, #0
 800caf2:	00eb      	lsls	r3, r5, #3
 800caf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800caf8:	00e2      	lsls	r2, r4, #3
 800cafa:	1dcb      	adds	r3, r1, #7
 800cafc:	08db      	lsrs	r3, r3, #3
 800cafe:	00db      	lsls	r3, r3, #3
 800cb00:	ebad 0d03 	sub.w	sp, sp, r3
 800cb04:	466b      	mov	r3, sp
 800cb06:	3300      	adds	r3, #0
 800cb08:	60fb      	str	r3, [r7, #12]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	460a      	mov	r2, r1
 800cb0e:	1e51      	subs	r1, r2, #1
 800cb10:	78fa      	ldrb	r2, [r7, #3]
 800cb12:	701a      	strb	r2, [r3, #0]
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	1e4b      	subs	r3, r1, #1
 800cb18:	e003      	b.n	800cb22 <_ZN12FlashManager19WritePumpMaxRunTimeEh+0x76>
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	7011      	strb	r1, [r2, #0]
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	3201      	adds	r2, #1
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	daf9      	bge.n	800cb1a <_ZN12FlashManager19WritePumpMaxRunTimeEh+0x6e>
	WriteData(PumpMaxRunTimeAppendAddress,size, data);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	7e19      	ldrb	r1, [r3, #24]
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f7ff fbda 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800cb34:	46b5      	mov	sp, r6
}
 800cb36:	bf00      	nop
 800cb38:	371c      	adds	r7, #28
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cb40 <_ZN12FlashManager18ReadPumpMaxRunTimeEv>:
uint8_t FlashManager::ReadPumpMaxRunTime(){
 800cb40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb44:	b089      	sub	sp, #36	@ 0x24
 800cb46:	af02      	add	r7, sp, #8
 800cb48:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,PumpMaxRunTimeAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800cb4a:	466b      	mov	r3, sp
 800cb4c:	461e      	mov	r6, r3
	size_t size=1;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800cb52:	6979      	ldr	r1, [r7, #20]
 800cb54:	460b      	mov	r3, r1
 800cb56:	3b01      	subs	r3, #1
 800cb58:	613b      	str	r3, [r7, #16]
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	4688      	mov	r8, r1
 800cb5e:	4699      	mov	r9, r3
 800cb60:	f04f 0200 	mov.w	r2, #0
 800cb64:	f04f 0300 	mov.w	r3, #0
 800cb68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb74:	2300      	movs	r3, #0
 800cb76:	460c      	mov	r4, r1
 800cb78:	461d      	mov	r5, r3
 800cb7a:	f04f 0200 	mov.w	r2, #0
 800cb7e:	f04f 0300 	mov.w	r3, #0
 800cb82:	00eb      	lsls	r3, r5, #3
 800cb84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cb88:	00e2      	lsls	r2, r4, #3
 800cb8a:	1dcb      	adds	r3, r1, #7
 800cb8c:	08db      	lsrs	r3, r3, #3
 800cb8e:	00db      	lsls	r3, r3, #3
 800cb90:	ebad 0d03 	sub.w	sp, sp, r3
 800cb94:	ab02      	add	r3, sp, #8
 800cb96:	3300      	adds	r3, #0
 800cb98:	60fb      	str	r3, [r7, #12]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	460a      	mov	r2, r1
 800cb9e:	1e51      	subs	r1, r2, #1
 800cba0:	22ff      	movs	r2, #255	@ 0xff
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	1c5a      	adds	r2, r3, #1
 800cba6:	1e4b      	subs	r3, r1, #1
 800cba8:	e003      	b.n	800cbb2 <_ZN12FlashManager18ReadPumpMaxRunTimeEv+0x72>
 800cbaa:	2100      	movs	r1, #0
 800cbac:	7011      	strb	r1, [r2, #0]
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	3201      	adds	r2, #1
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	daf9      	bge.n	800cbaa <_ZN12FlashManager18ReadPumpMaxRunTimeEv+0x6a>
	ReadData(data,PumpMaxRunTimeAppendAddress,size, false);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	7e1a      	ldrb	r2, [r3, #24]
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	9100      	str	r1, [sp, #0]
 800cbc0:	68f9      	ldr	r1, [r7, #12]
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff fa32 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800cbc8:	f107 030b 	add.w	r3, r7, #11
 800cbcc:	697a      	ldr	r2, [r7, #20]
 800cbce:	68f9      	ldr	r1, [r7, #12]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f004 fa4a 	bl	801106a <memcpy>
    return value;
 800cbd6:	7afb      	ldrb	r3, [r7, #11]
 800cbd8:	46b5      	mov	sp, r6
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	371c      	adds	r7, #28
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cbe4 <_ZN12FlashManager20WriteValveMaxRunTimeEh>:
void FlashManager::WriteValveMaxRunTime(uint8_t second){
 800cbe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbe8:	b087      	sub	sp, #28
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	460b      	mov	r3, r1
 800cbf0:	70fb      	strb	r3, [r7, #3]
	size_t size=1;
    uint8_t data[size]={second};
	WriteData(ValveMaxRunTimeAppendAddress,size, data);
}
 800cbf2:	466b      	mov	r3, sp
 800cbf4:	461e      	mov	r6, r3
	size_t size=1;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	617b      	str	r3, [r7, #20]
    uint8_t data[size]={second};
 800cbfa:	6979      	ldr	r1, [r7, #20]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	3b01      	subs	r3, #1
 800cc00:	613b      	str	r3, [r7, #16]
 800cc02:	2300      	movs	r3, #0
 800cc04:	4688      	mov	r8, r1
 800cc06:	4699      	mov	r9, r3
 800cc08:	f04f 0200 	mov.w	r2, #0
 800cc0c:	f04f 0300 	mov.w	r3, #0
 800cc10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cc14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cc18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	460c      	mov	r4, r1
 800cc20:	461d      	mov	r5, r3
 800cc22:	f04f 0200 	mov.w	r2, #0
 800cc26:	f04f 0300 	mov.w	r3, #0
 800cc2a:	00eb      	lsls	r3, r5, #3
 800cc2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc30:	00e2      	lsls	r2, r4, #3
 800cc32:	1dcb      	adds	r3, r1, #7
 800cc34:	08db      	lsrs	r3, r3, #3
 800cc36:	00db      	lsls	r3, r3, #3
 800cc38:	ebad 0d03 	sub.w	sp, sp, r3
 800cc3c:	466b      	mov	r3, sp
 800cc3e:	3300      	adds	r3, #0
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	460a      	mov	r2, r1
 800cc46:	1e51      	subs	r1, r2, #1
 800cc48:	78fa      	ldrb	r2, [r7, #3]
 800cc4a:	701a      	strb	r2, [r3, #0]
 800cc4c:	1c5a      	adds	r2, r3, #1
 800cc4e:	1e4b      	subs	r3, r1, #1
 800cc50:	e003      	b.n	800cc5a <_ZN12FlashManager20WriteValveMaxRunTimeEh+0x76>
 800cc52:	2100      	movs	r1, #0
 800cc54:	7011      	strb	r1, [r2, #0]
 800cc56:	3b01      	subs	r3, #1
 800cc58:	3201      	adds	r2, #1
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	daf9      	bge.n	800cc52 <_ZN12FlashManager20WriteValveMaxRunTimeEh+0x6e>
	WriteData(ValveMaxRunTimeAppendAddress,size, data);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	7e59      	ldrb	r1, [r3, #25]
 800cc62:	697a      	ldr	r2, [r7, #20]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7ff fb3e 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800cc6c:	46b5      	mov	sp, r6
}
 800cc6e:	bf00      	nop
 800cc70:	371c      	adds	r7, #28
 800cc72:	46bd      	mov	sp, r7
 800cc74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cc78 <_ZN12FlashManager19ReadValveMaxRunTimeEv>:
uint8_t FlashManager::ReadValveMaxRunTime(){
 800cc78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc7c:	b089      	sub	sp, #36	@ 0x24
 800cc7e:	af02      	add	r7, sp, #8
 800cc80:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0xFF};
	ReadData(data,ValveMaxRunTimeAppendAddress,size, false);
	uint8_t value;
    memcpy(&value, data, size);
    return value;
}
 800cc82:	466b      	mov	r3, sp
 800cc84:	461e      	mov	r6, r3
	size_t size=1;
 800cc86:	2301      	movs	r3, #1
 800cc88:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0xFF};
 800cc8a:	6979      	ldr	r1, [r7, #20]
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	613b      	str	r3, [r7, #16]
 800cc92:	2300      	movs	r3, #0
 800cc94:	4688      	mov	r8, r1
 800cc96:	4699      	mov	r9, r3
 800cc98:	f04f 0200 	mov.w	r2, #0
 800cc9c:	f04f 0300 	mov.w	r3, #0
 800cca0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cca4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cca8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ccac:	2300      	movs	r3, #0
 800ccae:	460c      	mov	r4, r1
 800ccb0:	461d      	mov	r5, r3
 800ccb2:	f04f 0200 	mov.w	r2, #0
 800ccb6:	f04f 0300 	mov.w	r3, #0
 800ccba:	00eb      	lsls	r3, r5, #3
 800ccbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ccc0:	00e2      	lsls	r2, r4, #3
 800ccc2:	1dcb      	adds	r3, r1, #7
 800ccc4:	08db      	lsrs	r3, r3, #3
 800ccc6:	00db      	lsls	r3, r3, #3
 800ccc8:	ebad 0d03 	sub.w	sp, sp, r3
 800cccc:	ab02      	add	r3, sp, #8
 800ccce:	3300      	adds	r3, #0
 800ccd0:	60fb      	str	r3, [r7, #12]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	460a      	mov	r2, r1
 800ccd6:	1e51      	subs	r1, r2, #1
 800ccd8:	22ff      	movs	r2, #255	@ 0xff
 800ccda:	701a      	strb	r2, [r3, #0]
 800ccdc:	1c5a      	adds	r2, r3, #1
 800ccde:	1e4b      	subs	r3, r1, #1
 800cce0:	e003      	b.n	800ccea <_ZN12FlashManager19ReadValveMaxRunTimeEv+0x72>
 800cce2:	2100      	movs	r1, #0
 800cce4:	7011      	strb	r1, [r2, #0]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	3201      	adds	r2, #1
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	daf9      	bge.n	800cce2 <_ZN12FlashManager19ReadValveMaxRunTimeEv+0x6a>
	ReadData(data,ValveMaxRunTimeAppendAddress,size, false);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	7e5a      	ldrb	r2, [r3, #25]
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	9100      	str	r1, [sp, #0]
 800ccf8:	68f9      	ldr	r1, [r7, #12]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7ff f996 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800cd00:	f107 030b 	add.w	r3, r7, #11
 800cd04:	697a      	ldr	r2, [r7, #20]
 800cd06:	68f9      	ldr	r1, [r7, #12]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f004 f9ae 	bl	801106a <memcpy>
    return value;
 800cd0e:	7afb      	ldrb	r3, [r7, #11]
 800cd10:	46b5      	mov	sp, r6
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	371c      	adds	r7, #28
 800cd16:	46bd      	mov	sp, r7
 800cd18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cd1c <_ZN12FlashManager13WriteFlowRateEd>:
void FlashManager::WriteFlowRate(double_t rate){
 800cd1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd20:	b089      	sub	sp, #36	@ 0x24
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	60f8      	str	r0, [r7, #12]
 800cd26:	ed87 0b00 	vstr	d0, [r7]
	size_t size=8;
    uint8_t data[size];
    memcpy(data, &rate, size);
	WriteData(FlowRateAppendAddress,size, data);
}
 800cd2a:	466b      	mov	r3, sp
 800cd2c:	461e      	mov	r6, r3
	size_t size=8;
 800cd2e:	2308      	movs	r3, #8
 800cd30:	61fb      	str	r3, [r7, #28]
    uint8_t data[size];
 800cd32:	69f9      	ldr	r1, [r7, #28]
 800cd34:	460b      	mov	r3, r1
 800cd36:	3b01      	subs	r3, #1
 800cd38:	61bb      	str	r3, [r7, #24]
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	4688      	mov	r8, r1
 800cd3e:	4699      	mov	r9, r3
 800cd40:	f04f 0200 	mov.w	r2, #0
 800cd44:	f04f 0300 	mov.w	r3, #0
 800cd48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cd4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cd50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cd54:	2300      	movs	r3, #0
 800cd56:	460c      	mov	r4, r1
 800cd58:	461d      	mov	r5, r3
 800cd5a:	f04f 0200 	mov.w	r2, #0
 800cd5e:	f04f 0300 	mov.w	r3, #0
 800cd62:	00eb      	lsls	r3, r5, #3
 800cd64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd68:	00e2      	lsls	r2, r4, #3
 800cd6a:	1dcb      	adds	r3, r1, #7
 800cd6c:	08db      	lsrs	r3, r3, #3
 800cd6e:	00db      	lsls	r3, r3, #3
 800cd70:	ebad 0d03 	sub.w	sp, sp, r3
 800cd74:	466b      	mov	r3, sp
 800cd76:	3300      	adds	r3, #0
 800cd78:	617b      	str	r3, [r7, #20]
    memcpy(data, &rate, size);
 800cd7a:	463b      	mov	r3, r7
 800cd7c:	69fa      	ldr	r2, [r7, #28]
 800cd7e:	4619      	mov	r1, r3
 800cd80:	6978      	ldr	r0, [r7, #20]
 800cd82:	f004 f972 	bl	801106a <memcpy>
	WriteData(FlowRateAppendAddress,size, data);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	7b19      	ldrb	r1, [r3, #12]
 800cd8a:	69fa      	ldr	r2, [r7, #28]
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f7ff faaa 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800cd94:	46b5      	mov	sp, r6
}
 800cd96:	bf00      	nop
 800cd98:	3724      	adds	r7, #36	@ 0x24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cda0 <_ZN12FlashManager12ReadFlowRateEv>:
double_t FlashManager::ReadFlowRate(){
 800cda0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cda4:	b08b      	sub	sp, #44	@ 0x2c
 800cda6:	af02      	add	r7, sp, #8
 800cda8:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FlowRateAppendAddress,size, false);
    double_t value;
    memcpy(&value, data, size);
    return value;
}
 800cdaa:	466b      	mov	r3, sp
 800cdac:	461e      	mov	r6, r3
	size_t size=8;
 800cdae:	2308      	movs	r3, #8
 800cdb0:	61fb      	str	r3, [r7, #28]
	uint8_t data[size]={0};
 800cdb2:	69f9      	ldr	r1, [r7, #28]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	61bb      	str	r3, [r7, #24]
 800cdba:	2300      	movs	r3, #0
 800cdbc:	4688      	mov	r8, r1
 800cdbe:	4699      	mov	r9, r3
 800cdc0:	f04f 0200 	mov.w	r2, #0
 800cdc4:	f04f 0300 	mov.w	r3, #0
 800cdc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cdcc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cdd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	460c      	mov	r4, r1
 800cdd8:	461d      	mov	r5, r3
 800cdda:	f04f 0200 	mov.w	r2, #0
 800cdde:	f04f 0300 	mov.w	r3, #0
 800cde2:	00eb      	lsls	r3, r5, #3
 800cde4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cde8:	00e2      	lsls	r2, r4, #3
 800cdea:	1dcb      	adds	r3, r1, #7
 800cdec:	08db      	lsrs	r3, r3, #3
 800cdee:	00db      	lsls	r3, r3, #3
 800cdf0:	ebad 0d03 	sub.w	sp, sp, r3
 800cdf4:	ab02      	add	r3, sp, #8
 800cdf6:	3300      	adds	r3, #0
 800cdf8:	617b      	str	r3, [r7, #20]
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	460a      	mov	r2, r1
 800cdfe:	1e51      	subs	r1, r2, #1
 800ce00:	2200      	movs	r2, #0
 800ce02:	701a      	strb	r2, [r3, #0]
 800ce04:	1c5a      	adds	r2, r3, #1
 800ce06:	1e4b      	subs	r3, r1, #1
 800ce08:	e003      	b.n	800ce12 <_ZN12FlashManager12ReadFlowRateEv+0x72>
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	7011      	strb	r1, [r2, #0]
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	3201      	adds	r2, #1
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	daf9      	bge.n	800ce0a <_ZN12FlashManager12ReadFlowRateEv+0x6a>
	ReadData(data,FlowRateAppendAddress,size, false);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	7b1a      	ldrb	r2, [r3, #12]
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	9100      	str	r1, [sp, #0]
 800ce20:	6979      	ldr	r1, [r7, #20]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7ff f902 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800ce28:	f107 0308 	add.w	r3, r7, #8
 800ce2c:	69fa      	ldr	r2, [r7, #28]
 800ce2e:	6979      	ldr	r1, [r7, #20]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f004 f91a 	bl	801106a <memcpy>
    return value;
 800ce36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce3a:	46b5      	mov	sp, r6
 800ce3c:	ec43 2b17 	vmov	d7, r2, r3
}
 800ce40:	eeb0 0a47 	vmov.f32	s0, s14
 800ce44:	eef0 0a67 	vmov.f32	s1, s15
 800ce48:	3724      	adds	r7, #36	@ 0x24
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ce50 <_ZN12FlashManager15WriteVolumeRateEd>:

void FlashManager::WriteVolumeRate(double_t rate){
 800ce50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce54:	b089      	sub	sp, #36	@ 0x24
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	60f8      	str	r0, [r7, #12]
 800ce5a:	ed87 0b00 	vstr	d0, [r7]
	size_t size=8;
    uint8_t data[size];
    memcpy(data, &rate, size);
	WriteData(VolumeRateAppendAddress, size, data);
}
 800ce5e:	466b      	mov	r3, sp
 800ce60:	461e      	mov	r6, r3
	size_t size=8;
 800ce62:	2308      	movs	r3, #8
 800ce64:	61fb      	str	r3, [r7, #28]
    uint8_t data[size];
 800ce66:	69f9      	ldr	r1, [r7, #28]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	61bb      	str	r3, [r7, #24]
 800ce6e:	2300      	movs	r3, #0
 800ce70:	4688      	mov	r8, r1
 800ce72:	4699      	mov	r9, r3
 800ce74:	f04f 0200 	mov.w	r2, #0
 800ce78:	f04f 0300 	mov.w	r3, #0
 800ce7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ce80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ce84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ce88:	2300      	movs	r3, #0
 800ce8a:	460c      	mov	r4, r1
 800ce8c:	461d      	mov	r5, r3
 800ce8e:	f04f 0200 	mov.w	r2, #0
 800ce92:	f04f 0300 	mov.w	r3, #0
 800ce96:	00eb      	lsls	r3, r5, #3
 800ce98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ce9c:	00e2      	lsls	r2, r4, #3
 800ce9e:	1dcb      	adds	r3, r1, #7
 800cea0:	08db      	lsrs	r3, r3, #3
 800cea2:	00db      	lsls	r3, r3, #3
 800cea4:	ebad 0d03 	sub.w	sp, sp, r3
 800cea8:	466b      	mov	r3, sp
 800ceaa:	3300      	adds	r3, #0
 800ceac:	617b      	str	r3, [r7, #20]
    memcpy(data, &rate, size);
 800ceae:	463b      	mov	r3, r7
 800ceb0:	69fa      	ldr	r2, [r7, #28]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	6978      	ldr	r0, [r7, #20]
 800ceb6:	f004 f8d8 	bl	801106a <memcpy>
	WriteData(VolumeRateAppendAddress, size, data);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	7b59      	ldrb	r1, [r3, #13]
 800cebe:	69fa      	ldr	r2, [r7, #28]
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	68f8      	ldr	r0, [r7, #12]
 800cec4:	f7ff fa10 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800cec8:	46b5      	mov	sp, r6
}
 800ceca:	bf00      	nop
 800cecc:	3724      	adds	r7, #36	@ 0x24
 800cece:	46bd      	mov	sp, r7
 800ced0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ced4 <_ZN12FlashManager14ReadVolumeRateEv>:
double_t FlashManager::ReadVolumeRate(){
 800ced4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ced8:	b08b      	sub	sp, #44	@ 0x2c
 800ceda:	af02      	add	r7, sp, #8
 800cedc:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,VolumeRateAppendAddress, size, false);
    double_t value;
    memcpy(&value, data, size);
    return value;
}
 800cede:	466b      	mov	r3, sp
 800cee0:	461e      	mov	r6, r3
	size_t size=8;
 800cee2:	2308      	movs	r3, #8
 800cee4:	61fb      	str	r3, [r7, #28]
	uint8_t data[size]={0};
 800cee6:	69f9      	ldr	r1, [r7, #28]
 800cee8:	460b      	mov	r3, r1
 800ceea:	3b01      	subs	r3, #1
 800ceec:	61bb      	str	r3, [r7, #24]
 800ceee:	2300      	movs	r3, #0
 800cef0:	4688      	mov	r8, r1
 800cef2:	4699      	mov	r9, r3
 800cef4:	f04f 0200 	mov.w	r2, #0
 800cef8:	f04f 0300 	mov.w	r3, #0
 800cefc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf08:	2300      	movs	r3, #0
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	461d      	mov	r5, r3
 800cf0e:	f04f 0200 	mov.w	r2, #0
 800cf12:	f04f 0300 	mov.w	r3, #0
 800cf16:	00eb      	lsls	r3, r5, #3
 800cf18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cf1c:	00e2      	lsls	r2, r4, #3
 800cf1e:	1dcb      	adds	r3, r1, #7
 800cf20:	08db      	lsrs	r3, r3, #3
 800cf22:	00db      	lsls	r3, r3, #3
 800cf24:	ebad 0d03 	sub.w	sp, sp, r3
 800cf28:	ab02      	add	r3, sp, #8
 800cf2a:	3300      	adds	r3, #0
 800cf2c:	617b      	str	r3, [r7, #20]
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	460a      	mov	r2, r1
 800cf32:	1e51      	subs	r1, r2, #1
 800cf34:	2200      	movs	r2, #0
 800cf36:	701a      	strb	r2, [r3, #0]
 800cf38:	1c5a      	adds	r2, r3, #1
 800cf3a:	1e4b      	subs	r3, r1, #1
 800cf3c:	e003      	b.n	800cf46 <_ZN12FlashManager14ReadVolumeRateEv+0x72>
 800cf3e:	2100      	movs	r1, #0
 800cf40:	7011      	strb	r1, [r2, #0]
 800cf42:	3b01      	subs	r3, #1
 800cf44:	3201      	adds	r2, #1
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	daf9      	bge.n	800cf3e <_ZN12FlashManager14ReadVolumeRateEv+0x6a>
	ReadData(data,VolumeRateAppendAddress, size, false);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	7b5a      	ldrb	r2, [r3, #13]
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	2100      	movs	r1, #0
 800cf52:	9100      	str	r1, [sp, #0]
 800cf54:	6979      	ldr	r1, [r7, #20]
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7ff f868 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800cf5c:	f107 0308 	add.w	r3, r7, #8
 800cf60:	69fa      	ldr	r2, [r7, #28]
 800cf62:	6979      	ldr	r1, [r7, #20]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f004 f880 	bl	801106a <memcpy>
    return value;
 800cf6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf6e:	46b5      	mov	sp, r6
 800cf70:	ec43 2b17 	vmov	d7, r2, r3
}
 800cf74:	eeb0 0a47 	vmov.f32	s0, s14
 800cf78:	eef0 0a67 	vmov.f32	s1, s15
 800cf7c:	3724      	adds	r7, #36	@ 0x24
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cf84 <_ZN12FlashManager18WriteVolumeAverageEm>:

void FlashManager::WriteVolumeAverage(uint32_t avg){
 800cf84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf88:	b087      	sub	sp, #28
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
 800cf8e:	6039      	str	r1, [r7, #0]
	size_t size=4;
    uint8_t data[size];
    memcpy(data, &avg, size);
	WriteData(VolumeAverageAppendAddress, size, data);
}
 800cf90:	466b      	mov	r3, sp
 800cf92:	461e      	mov	r6, r3
	size_t size=4;
 800cf94:	2304      	movs	r3, #4
 800cf96:	617b      	str	r3, [r7, #20]
    uint8_t data[size];
 800cf98:	6979      	ldr	r1, [r7, #20]
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	613b      	str	r3, [r7, #16]
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	4688      	mov	r8, r1
 800cfa4:	4699      	mov	r9, r3
 800cfa6:	f04f 0200 	mov.w	r2, #0
 800cfaa:	f04f 0300 	mov.w	r3, #0
 800cfae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cfb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cfb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cfba:	2300      	movs	r3, #0
 800cfbc:	460c      	mov	r4, r1
 800cfbe:	461d      	mov	r5, r3
 800cfc0:	f04f 0200 	mov.w	r2, #0
 800cfc4:	f04f 0300 	mov.w	r3, #0
 800cfc8:	00eb      	lsls	r3, r5, #3
 800cfca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cfce:	00e2      	lsls	r2, r4, #3
 800cfd0:	1dcb      	adds	r3, r1, #7
 800cfd2:	08db      	lsrs	r3, r3, #3
 800cfd4:	00db      	lsls	r3, r3, #3
 800cfd6:	ebad 0d03 	sub.w	sp, sp, r3
 800cfda:	466b      	mov	r3, sp
 800cfdc:	3300      	adds	r3, #0
 800cfde:	60fb      	str	r3, [r7, #12]
    memcpy(data, &avg, size);
 800cfe0:	463b      	mov	r3, r7
 800cfe2:	697a      	ldr	r2, [r7, #20]
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f004 f83f 	bl	801106a <memcpy>
	WriteData(VolumeAverageAppendAddress, size, data);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	7bd9      	ldrb	r1, [r3, #15]
 800cff0:	697a      	ldr	r2, [r7, #20]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7ff f977 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800cffa:	46b5      	mov	sp, r6
}
 800cffc:	bf00      	nop
 800cffe:	371c      	adds	r7, #28
 800d000:	46bd      	mov	sp, r7
 800d002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d006 <_ZN12FlashManager17ReadVolumeAverageEv>:
uint32_t FlashManager::ReadVolumeAverage(){
 800d006:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d00a:	b089      	sub	sp, #36	@ 0x24
 800d00c:	af02      	add	r7, sp, #8
 800d00e:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,VolumeAverageAppendAddress,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d010:	466b      	mov	r3, sp
 800d012:	461e      	mov	r6, r3
	size_t size=4;
 800d014:	2304      	movs	r3, #4
 800d016:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d018:	6979      	ldr	r1, [r7, #20]
 800d01a:	460b      	mov	r3, r1
 800d01c:	3b01      	subs	r3, #1
 800d01e:	613b      	str	r3, [r7, #16]
 800d020:	2300      	movs	r3, #0
 800d022:	4688      	mov	r8, r1
 800d024:	4699      	mov	r9, r3
 800d026:	f04f 0200 	mov.w	r2, #0
 800d02a:	f04f 0300 	mov.w	r3, #0
 800d02e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d03a:	2300      	movs	r3, #0
 800d03c:	460c      	mov	r4, r1
 800d03e:	461d      	mov	r5, r3
 800d040:	f04f 0200 	mov.w	r2, #0
 800d044:	f04f 0300 	mov.w	r3, #0
 800d048:	00eb      	lsls	r3, r5, #3
 800d04a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d04e:	00e2      	lsls	r2, r4, #3
 800d050:	1dcb      	adds	r3, r1, #7
 800d052:	08db      	lsrs	r3, r3, #3
 800d054:	00db      	lsls	r3, r3, #3
 800d056:	ebad 0d03 	sub.w	sp, sp, r3
 800d05a:	ab02      	add	r3, sp, #8
 800d05c:	3300      	adds	r3, #0
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	460a      	mov	r2, r1
 800d064:	1e51      	subs	r1, r2, #1
 800d066:	2200      	movs	r2, #0
 800d068:	701a      	strb	r2, [r3, #0]
 800d06a:	1c5a      	adds	r2, r3, #1
 800d06c:	1e4b      	subs	r3, r1, #1
 800d06e:	e003      	b.n	800d078 <_ZN12FlashManager17ReadVolumeAverageEv+0x72>
 800d070:	2100      	movs	r1, #0
 800d072:	7011      	strb	r1, [r2, #0]
 800d074:	3b01      	subs	r3, #1
 800d076:	3201      	adds	r2, #1
 800d078:	2b00      	cmp	r3, #0
 800d07a:	daf9      	bge.n	800d070 <_ZN12FlashManager17ReadVolumeAverageEv+0x6a>
	ReadData(data,VolumeAverageAppendAddress,size, false);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	7bda      	ldrb	r2, [r3, #15]
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	2100      	movs	r1, #0
 800d084:	9100      	str	r1, [sp, #0]
 800d086:	68f9      	ldr	r1, [r7, #12]
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7fe ffcf 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d08e:	f107 0308 	add.w	r3, r7, #8
 800d092:	697a      	ldr	r2, [r7, #20]
 800d094:	68f9      	ldr	r1, [r7, #12]
 800d096:	4618      	mov	r0, r3
 800d098:	f003 ffe7 	bl	801106a <memcpy>
    return value;
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	46b5      	mov	sp, r6
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	371c      	adds	r7, #28
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d0aa <_ZN12FlashManager16WriteFlowAverageEm>:
void FlashManager::WriteFlowAverage(uint32_t avg){
 800d0aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0ae:	b087      	sub	sp, #28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
	size_t size=4;
    uint8_t data[size];
    memcpy(data, &avg, size);
	WriteData(FlowAverageAppendAddress, size, data);
}
 800d0b6:	466b      	mov	r3, sp
 800d0b8:	461e      	mov	r6, r3
	size_t size=4;
 800d0ba:	2304      	movs	r3, #4
 800d0bc:	617b      	str	r3, [r7, #20]
    uint8_t data[size];
 800d0be:	6979      	ldr	r1, [r7, #20]
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	613b      	str	r3, [r7, #16]
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	4688      	mov	r8, r1
 800d0ca:	4699      	mov	r9, r3
 800d0cc:	f04f 0200 	mov.w	r2, #0
 800d0d0:	f04f 0300 	mov.w	r3, #0
 800d0d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d0d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d0dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	460c      	mov	r4, r1
 800d0e4:	461d      	mov	r5, r3
 800d0e6:	f04f 0200 	mov.w	r2, #0
 800d0ea:	f04f 0300 	mov.w	r3, #0
 800d0ee:	00eb      	lsls	r3, r5, #3
 800d0f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d0f4:	00e2      	lsls	r2, r4, #3
 800d0f6:	1dcb      	adds	r3, r1, #7
 800d0f8:	08db      	lsrs	r3, r3, #3
 800d0fa:	00db      	lsls	r3, r3, #3
 800d0fc:	ebad 0d03 	sub.w	sp, sp, r3
 800d100:	466b      	mov	r3, sp
 800d102:	3300      	adds	r3, #0
 800d104:	60fb      	str	r3, [r7, #12]
    memcpy(data, &avg, size);
 800d106:	463b      	mov	r3, r7
 800d108:	697a      	ldr	r2, [r7, #20]
 800d10a:	4619      	mov	r1, r3
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f003 ffac 	bl	801106a <memcpy>
	WriteData(FlowAverageAppendAddress, size, data);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	7b99      	ldrb	r1, [r3, #14]
 800d116:	697a      	ldr	r2, [r7, #20]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f7ff f8e4 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800d120:	46b5      	mov	sp, r6
}
 800d122:	bf00      	nop
 800d124:	371c      	adds	r7, #28
 800d126:	46bd      	mov	sp, r7
 800d128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d12c <_ZN12FlashManager15ReadFlowAverageEv>:
uint32_t FlashManager::ReadFlowAverage(){
 800d12c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d130:	b089      	sub	sp, #36	@ 0x24
 800d132:	af02      	add	r7, sp, #8
 800d134:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FlowAverageAppendAddress,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d136:	466b      	mov	r3, sp
 800d138:	461e      	mov	r6, r3
	size_t size=4;
 800d13a:	2304      	movs	r3, #4
 800d13c:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d13e:	6979      	ldr	r1, [r7, #20]
 800d140:	460b      	mov	r3, r1
 800d142:	3b01      	subs	r3, #1
 800d144:	613b      	str	r3, [r7, #16]
 800d146:	2300      	movs	r3, #0
 800d148:	4688      	mov	r8, r1
 800d14a:	4699      	mov	r9, r3
 800d14c:	f04f 0200 	mov.w	r2, #0
 800d150:	f04f 0300 	mov.w	r3, #0
 800d154:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d158:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d15c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d160:	2300      	movs	r3, #0
 800d162:	460c      	mov	r4, r1
 800d164:	461d      	mov	r5, r3
 800d166:	f04f 0200 	mov.w	r2, #0
 800d16a:	f04f 0300 	mov.w	r3, #0
 800d16e:	00eb      	lsls	r3, r5, #3
 800d170:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d174:	00e2      	lsls	r2, r4, #3
 800d176:	1dcb      	adds	r3, r1, #7
 800d178:	08db      	lsrs	r3, r3, #3
 800d17a:	00db      	lsls	r3, r3, #3
 800d17c:	ebad 0d03 	sub.w	sp, sp, r3
 800d180:	ab02      	add	r3, sp, #8
 800d182:	3300      	adds	r3, #0
 800d184:	60fb      	str	r3, [r7, #12]
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	460a      	mov	r2, r1
 800d18a:	1e51      	subs	r1, r2, #1
 800d18c:	2200      	movs	r2, #0
 800d18e:	701a      	strb	r2, [r3, #0]
 800d190:	1c5a      	adds	r2, r3, #1
 800d192:	1e4b      	subs	r3, r1, #1
 800d194:	e003      	b.n	800d19e <_ZN12FlashManager15ReadFlowAverageEv+0x72>
 800d196:	2100      	movs	r1, #0
 800d198:	7011      	strb	r1, [r2, #0]
 800d19a:	3b01      	subs	r3, #1
 800d19c:	3201      	adds	r2, #1
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	daf9      	bge.n	800d196 <_ZN12FlashManager15ReadFlowAverageEv+0x6a>
	ReadData(data,FlowAverageAppendAddress,size, false);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	7b9a      	ldrb	r2, [r3, #14]
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	9100      	str	r1, [sp, #0]
 800d1ac:	68f9      	ldr	r1, [r7, #12]
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7fe ff3c 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d1b4:	f107 0308 	add.w	r3, r7, #8
 800d1b8:	697a      	ldr	r2, [r7, #20]
 800d1ba:	68f9      	ldr	r1, [r7, #12]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f003 ff54 	bl	801106a <memcpy>
    return value;
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	46b5      	mov	sp, r6
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	371c      	adds	r7, #28
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d1d0 <_ZN12FlashManager17WriteFirstEmgDataEttt>:
void FlashManager::WriteFirstEmgData(uint16_t maxTrim, uint16_t zeroPointMaxTrim, uint16_t zeroPointMinTrim){
 800d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d4:	b093      	sub	sp, #76	@ 0x4c
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6278      	str	r0, [r7, #36]	@ 0x24
 800d1da:	4610      	mov	r0, r2
 800d1dc:	461a      	mov	r2, r3
 800d1de:	460b      	mov	r3, r1
 800d1e0:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	843b      	strh	r3, [r7, #32]
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	83fb      	strh	r3, [r7, #30]
    memcpy(zeroPointMaxTrimData, &zeroPointMaxTrim, size);
    memcpy(zeroPointMinTrimData, &zeroPointMinTrim, size);
	WriteData(FirstEmgAppendAddress, size, maxTrimData);
	WriteData(FirstEmgAppendAddress+2, size, zeroPointMaxTrimData);
	WriteData(FirstEmgAppendAddress+4, size, zeroPointMinTrimData);
}
 800d1ea:	466b      	mov	r3, sp
 800d1ec:	461e      	mov	r6, r3
	size_t size=2;
 800d1ee:	2302      	movs	r3, #2
 800d1f0:	647b      	str	r3, [r7, #68]	@ 0x44
    uint8_t maxTrimData[size];
 800d1f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	460c      	mov	r4, r1
 800d1fe:	461d      	mov	r5, r3
 800d200:	f04f 0200 	mov.w	r2, #0
 800d204:	f04f 0300 	mov.w	r3, #0
 800d208:	00eb      	lsls	r3, r5, #3
 800d20a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d20e:	00e2      	lsls	r2, r4, #3
 800d210:	2300      	movs	r3, #0
 800d212:	6139      	str	r1, [r7, #16]
 800d214:	617b      	str	r3, [r7, #20]
 800d216:	f04f 0200 	mov.w	r2, #0
 800d21a:	f04f 0300 	mov.w	r3, #0
 800d21e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d222:	4628      	mov	r0, r5
 800d224:	00c3      	lsls	r3, r0, #3
 800d226:	4620      	mov	r0, r4
 800d228:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d22c:	4620      	mov	r0, r4
 800d22e:	00c2      	lsls	r2, r0, #3
 800d230:	1dcb      	adds	r3, r1, #7
 800d232:	08db      	lsrs	r3, r3, #3
 800d234:	00db      	lsls	r3, r3, #3
 800d236:	ebad 0d03 	sub.w	sp, sp, r3
 800d23a:	466b      	mov	r3, sp
 800d23c:	3300      	adds	r3, #0
 800d23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint8_t zeroPointMaxTrimData[size];
 800d240:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d242:	460b      	mov	r3, r1
 800d244:	3b01      	subs	r3, #1
 800d246:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d248:	2300      	movs	r3, #0
 800d24a:	60b9      	str	r1, [r7, #8]
 800d24c:	60fb      	str	r3, [r7, #12]
 800d24e:	f04f 0200 	mov.w	r2, #0
 800d252:	f04f 0300 	mov.w	r3, #0
 800d256:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d25a:	4628      	mov	r0, r5
 800d25c:	00c3      	lsls	r3, r0, #3
 800d25e:	4620      	mov	r0, r4
 800d260:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d264:	4620      	mov	r0, r4
 800d266:	00c2      	lsls	r2, r0, #3
 800d268:	2300      	movs	r3, #0
 800d26a:	6039      	str	r1, [r7, #0]
 800d26c:	607b      	str	r3, [r7, #4]
 800d26e:	f04f 0200 	mov.w	r2, #0
 800d272:	f04f 0300 	mov.w	r3, #0
 800d276:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d27a:	4628      	mov	r0, r5
 800d27c:	00c3      	lsls	r3, r0, #3
 800d27e:	4620      	mov	r0, r4
 800d280:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d284:	4620      	mov	r0, r4
 800d286:	00c2      	lsls	r2, r0, #3
 800d288:	1dcb      	adds	r3, r1, #7
 800d28a:	08db      	lsrs	r3, r3, #3
 800d28c:	00db      	lsls	r3, r3, #3
 800d28e:	ebad 0d03 	sub.w	sp, sp, r3
 800d292:	466b      	mov	r3, sp
 800d294:	3300      	adds	r3, #0
 800d296:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t zeroPointMinTrimData[size];
 800d298:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d29a:	460b      	mov	r3, r1
 800d29c:	3b01      	subs	r3, #1
 800d29e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	468a      	mov	sl, r1
 800d2a4:	469b      	mov	fp, r3
 800d2a6:	f04f 0200 	mov.w	r2, #0
 800d2aa:	f04f 0300 	mov.w	r3, #0
 800d2ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d2b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d2b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	4688      	mov	r8, r1
 800d2be:	4699      	mov	r9, r3
 800d2c0:	f04f 0200 	mov.w	r2, #0
 800d2c4:	f04f 0300 	mov.w	r3, #0
 800d2c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d2cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d2d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d2d4:	1dcb      	adds	r3, r1, #7
 800d2d6:	08db      	lsrs	r3, r3, #3
 800d2d8:	00db      	lsls	r3, r3, #3
 800d2da:	ebad 0d03 	sub.w	sp, sp, r3
 800d2de:	466b      	mov	r3, sp
 800d2e0:	3300      	adds	r3, #0
 800d2e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(maxTrimData, &maxTrim, size);
 800d2e4:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 800d2e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d2ee:	f003 febc 	bl	801106a <memcpy>
    memcpy(zeroPointMaxTrimData, &zeroPointMaxTrim, size);
 800d2f2:	f107 0320 	add.w	r3, r7, #32
 800d2f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d2fc:	f003 feb5 	bl	801106a <memcpy>
    memcpy(zeroPointMinTrimData, &zeroPointMinTrim, size);
 800d300:	f107 031e 	add.w	r3, r7, #30
 800d304:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d306:	4619      	mov	r1, r3
 800d308:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d30a:	f003 feae 	bl	801106a <memcpy>
	WriteData(FirstEmgAppendAddress, size, maxTrimData);
 800d30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d310:	7c19      	ldrb	r1, [r3, #16]
 800d312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d316:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d318:	f7fe ffe6 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
	WriteData(FirstEmgAppendAddress+2, size, zeroPointMaxTrimData);
 800d31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31e:	7c1b      	ldrb	r3, [r3, #16]
 800d320:	3302      	adds	r3, #2
 800d322:	b2d9      	uxtb	r1, r3
 800d324:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d328:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d32a:	f7fe ffdd 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
	WriteData(FirstEmgAppendAddress+4, size, zeroPointMinTrimData);
 800d32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d330:	7c1b      	ldrb	r3, [r3, #16]
 800d332:	3304      	adds	r3, #4
 800d334:	b2d9      	uxtb	r1, r3
 800d336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d33a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d33c:	f7fe ffd4 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800d340:	46b5      	mov	sp, r6
}
 800d342:	bf00      	nop
 800d344:	374c      	adds	r7, #76	@ 0x4c
 800d346:	46bd      	mov	sp, r7
 800d348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d34c <_ZN12FlashManager19ReadFirstEmgMaxTrimEv>:
uint16_t FlashManager::ReadFirstEmgMaxTrim(){
 800d34c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d350:	b089      	sub	sp, #36	@ 0x24
 800d352:	af02      	add	r7, sp, #8
 800d354:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FirstEmgAppendAddress,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d356:	466b      	mov	r3, sp
 800d358:	461e      	mov	r6, r3
	size_t size=2;
 800d35a:	2302      	movs	r3, #2
 800d35c:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d35e:	6979      	ldr	r1, [r7, #20]
 800d360:	460b      	mov	r3, r1
 800d362:	3b01      	subs	r3, #1
 800d364:	613b      	str	r3, [r7, #16]
 800d366:	2300      	movs	r3, #0
 800d368:	4688      	mov	r8, r1
 800d36a:	4699      	mov	r9, r3
 800d36c:	f04f 0200 	mov.w	r2, #0
 800d370:	f04f 0300 	mov.w	r3, #0
 800d374:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d378:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d37c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d380:	2300      	movs	r3, #0
 800d382:	460c      	mov	r4, r1
 800d384:	461d      	mov	r5, r3
 800d386:	f04f 0200 	mov.w	r2, #0
 800d38a:	f04f 0300 	mov.w	r3, #0
 800d38e:	00eb      	lsls	r3, r5, #3
 800d390:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d394:	00e2      	lsls	r2, r4, #3
 800d396:	1dcb      	adds	r3, r1, #7
 800d398:	08db      	lsrs	r3, r3, #3
 800d39a:	00db      	lsls	r3, r3, #3
 800d39c:	ebad 0d03 	sub.w	sp, sp, r3
 800d3a0:	ab02      	add	r3, sp, #8
 800d3a2:	3300      	adds	r3, #0
 800d3a4:	60fb      	str	r3, [r7, #12]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	460a      	mov	r2, r1
 800d3aa:	1e51      	subs	r1, r2, #1
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	701a      	strb	r2, [r3, #0]
 800d3b0:	1c5a      	adds	r2, r3, #1
 800d3b2:	1e4b      	subs	r3, r1, #1
 800d3b4:	e003      	b.n	800d3be <_ZN12FlashManager19ReadFirstEmgMaxTrimEv+0x72>
 800d3b6:	2100      	movs	r1, #0
 800d3b8:	7011      	strb	r1, [r2, #0]
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	3201      	adds	r2, #1
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	daf9      	bge.n	800d3b6 <_ZN12FlashManager19ReadFirstEmgMaxTrimEv+0x6a>
	ReadData(data,FirstEmgAppendAddress,size, false);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	7c1a      	ldrb	r2, [r3, #16]
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	9100      	str	r1, [sp, #0]
 800d3cc:	68f9      	ldr	r1, [r7, #12]
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f7fe fe2c 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d3d4:	f107 0308 	add.w	r3, r7, #8
 800d3d8:	697a      	ldr	r2, [r7, #20]
 800d3da:	68f9      	ldr	r1, [r7, #12]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f003 fe44 	bl	801106a <memcpy>
    return value;
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	46b5      	mov	sp, r6
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	371c      	adds	r7, #28
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d3f2 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv>:
uint16_t FlashManager::ReadFirstEmgZeroPointMaxTrim(){
 800d3f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3f6:	b089      	sub	sp, #36	@ 0x24
 800d3f8:	af02      	add	r7, sp, #8
 800d3fa:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FirstEmgAppendAddress+2,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d3fc:	466b      	mov	r3, sp
 800d3fe:	461e      	mov	r6, r3
	size_t size=2;
 800d400:	2302      	movs	r3, #2
 800d402:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d404:	6979      	ldr	r1, [r7, #20]
 800d406:	460b      	mov	r3, r1
 800d408:	3b01      	subs	r3, #1
 800d40a:	613b      	str	r3, [r7, #16]
 800d40c:	2300      	movs	r3, #0
 800d40e:	4688      	mov	r8, r1
 800d410:	4699      	mov	r9, r3
 800d412:	f04f 0200 	mov.w	r2, #0
 800d416:	f04f 0300 	mov.w	r3, #0
 800d41a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d41e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d426:	2300      	movs	r3, #0
 800d428:	460c      	mov	r4, r1
 800d42a:	461d      	mov	r5, r3
 800d42c:	f04f 0200 	mov.w	r2, #0
 800d430:	f04f 0300 	mov.w	r3, #0
 800d434:	00eb      	lsls	r3, r5, #3
 800d436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d43a:	00e2      	lsls	r2, r4, #3
 800d43c:	1dcb      	adds	r3, r1, #7
 800d43e:	08db      	lsrs	r3, r3, #3
 800d440:	00db      	lsls	r3, r3, #3
 800d442:	ebad 0d03 	sub.w	sp, sp, r3
 800d446:	ab02      	add	r3, sp, #8
 800d448:	3300      	adds	r3, #0
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	460a      	mov	r2, r1
 800d450:	1e51      	subs	r1, r2, #1
 800d452:	2200      	movs	r2, #0
 800d454:	701a      	strb	r2, [r3, #0]
 800d456:	1c5a      	adds	r2, r3, #1
 800d458:	1e4b      	subs	r3, r1, #1
 800d45a:	e003      	b.n	800d464 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv+0x72>
 800d45c:	2100      	movs	r1, #0
 800d45e:	7011      	strb	r1, [r2, #0]
 800d460:	3b01      	subs	r3, #1
 800d462:	3201      	adds	r2, #1
 800d464:	2b00      	cmp	r3, #0
 800d466:	daf9      	bge.n	800d45c <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv+0x6a>
	ReadData(data,FirstEmgAppendAddress+2,size, false);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	7c1b      	ldrb	r3, [r3, #16]
 800d46c:	3302      	adds	r3, #2
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	2100      	movs	r1, #0
 800d474:	9100      	str	r1, [sp, #0]
 800d476:	68f9      	ldr	r1, [r7, #12]
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f7fe fdd7 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d47e:	f107 0308 	add.w	r3, r7, #8
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	68f9      	ldr	r1, [r7, #12]
 800d486:	4618      	mov	r0, r3
 800d488:	f003 fdef 	bl	801106a <memcpy>
    return value;
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	b29b      	uxth	r3, r3
 800d490:	46b5      	mov	sp, r6
}
 800d492:	4618      	mov	r0, r3
 800d494:	371c      	adds	r7, #28
 800d496:	46bd      	mov	sp, r7
 800d498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d49c <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv>:
uint16_t FlashManager::ReadFirstEmgZeroPointMinTrim(){
 800d49c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4a0:	b089      	sub	sp, #36	@ 0x24
 800d4a2:	af02      	add	r7, sp, #8
 800d4a4:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,FirstEmgAppendAddress+4,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d4a6:	466b      	mov	r3, sp
 800d4a8:	461e      	mov	r6, r3
	size_t size=2;
 800d4aa:	2302      	movs	r3, #2
 800d4ac:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d4ae:	6979      	ldr	r1, [r7, #20]
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	613b      	str	r3, [r7, #16]
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	4688      	mov	r8, r1
 800d4ba:	4699      	mov	r9, r3
 800d4bc:	f04f 0200 	mov.w	r2, #0
 800d4c0:	f04f 0300 	mov.w	r3, #0
 800d4c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d4c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d4cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	461d      	mov	r5, r3
 800d4d6:	f04f 0200 	mov.w	r2, #0
 800d4da:	f04f 0300 	mov.w	r3, #0
 800d4de:	00eb      	lsls	r3, r5, #3
 800d4e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d4e4:	00e2      	lsls	r2, r4, #3
 800d4e6:	1dcb      	adds	r3, r1, #7
 800d4e8:	08db      	lsrs	r3, r3, #3
 800d4ea:	00db      	lsls	r3, r3, #3
 800d4ec:	ebad 0d03 	sub.w	sp, sp, r3
 800d4f0:	ab02      	add	r3, sp, #8
 800d4f2:	3300      	adds	r3, #0
 800d4f4:	60fb      	str	r3, [r7, #12]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	460a      	mov	r2, r1
 800d4fa:	1e51      	subs	r1, r2, #1
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	701a      	strb	r2, [r3, #0]
 800d500:	1c5a      	adds	r2, r3, #1
 800d502:	1e4b      	subs	r3, r1, #1
 800d504:	e003      	b.n	800d50e <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv+0x72>
 800d506:	2100      	movs	r1, #0
 800d508:	7011      	strb	r1, [r2, #0]
 800d50a:	3b01      	subs	r3, #1
 800d50c:	3201      	adds	r2, #1
 800d50e:	2b00      	cmp	r3, #0
 800d510:	daf9      	bge.n	800d506 <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv+0x6a>
	ReadData(data,FirstEmgAppendAddress+4,size, false);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	7c1b      	ldrb	r3, [r3, #16]
 800d516:	3304      	adds	r3, #4
 800d518:	b2da      	uxtb	r2, r3
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	2100      	movs	r1, #0
 800d51e:	9100      	str	r1, [sp, #0]
 800d520:	68f9      	ldr	r1, [r7, #12]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f7fe fd82 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d528:	f107 0308 	add.w	r3, r7, #8
 800d52c:	697a      	ldr	r2, [r7, #20]
 800d52e:	68f9      	ldr	r1, [r7, #12]
 800d530:	4618      	mov	r0, r3
 800d532:	f003 fd9a 	bl	801106a <memcpy>
    return value;
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	b29b      	uxth	r3, r3
 800d53a:	46b5      	mov	sp, r6
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	371c      	adds	r7, #28
 800d540:	46bd      	mov	sp, r7
 800d542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d546 <_ZN12FlashManager18WriteSecondEmgDataEttt>:

void FlashManager::WriteSecondEmgData(uint16_t maxTrim, uint16_t zeroPointMaxTrim, uint16_t zeroPointMinTrim){
 800d546:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54a:	b093      	sub	sp, #76	@ 0x4c
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d550:	4610      	mov	r0, r2
 800d552:	461a      	mov	r2, r3
 800d554:	460b      	mov	r3, r1
 800d556:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d558:	4603      	mov	r3, r0
 800d55a:	843b      	strh	r3, [r7, #32]
 800d55c:	4613      	mov	r3, r2
 800d55e:	83fb      	strh	r3, [r7, #30]
    memcpy(zeroPointMaxTrimData, &zeroPointMaxTrim, size);
    memcpy(zeroPointMinTrimData, &zeroPointMinTrim, size);
	WriteData(SecondEmgAppendAddress, size, maxTrimData);
	WriteData(SecondEmgAppendAddress+2, size, zeroPointMaxTrimData);
	WriteData(SecondEmgAppendAddress+4, size, zeroPointMinTrimData);
}
 800d560:	466b      	mov	r3, sp
 800d562:	461e      	mov	r6, r3
	size_t size=2;
 800d564:	2302      	movs	r3, #2
 800d566:	647b      	str	r3, [r7, #68]	@ 0x44
    uint8_t maxTrimData[size];
 800d568:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d56a:	460b      	mov	r3, r1
 800d56c:	3b01      	subs	r3, #1
 800d56e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d570:	2300      	movs	r3, #0
 800d572:	460c      	mov	r4, r1
 800d574:	461d      	mov	r5, r3
 800d576:	f04f 0200 	mov.w	r2, #0
 800d57a:	f04f 0300 	mov.w	r3, #0
 800d57e:	00eb      	lsls	r3, r5, #3
 800d580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d584:	00e2      	lsls	r2, r4, #3
 800d586:	2300      	movs	r3, #0
 800d588:	6139      	str	r1, [r7, #16]
 800d58a:	617b      	str	r3, [r7, #20]
 800d58c:	f04f 0200 	mov.w	r2, #0
 800d590:	f04f 0300 	mov.w	r3, #0
 800d594:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d598:	4628      	mov	r0, r5
 800d59a:	00c3      	lsls	r3, r0, #3
 800d59c:	4620      	mov	r0, r4
 800d59e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	00c2      	lsls	r2, r0, #3
 800d5a6:	1dcb      	adds	r3, r1, #7
 800d5a8:	08db      	lsrs	r3, r3, #3
 800d5aa:	00db      	lsls	r3, r3, #3
 800d5ac:	ebad 0d03 	sub.w	sp, sp, r3
 800d5b0:	466b      	mov	r3, sp
 800d5b2:	3300      	adds	r3, #0
 800d5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint8_t zeroPointMaxTrimData[size];
 800d5b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d5be:	2300      	movs	r3, #0
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	60fb      	str	r3, [r7, #12]
 800d5c4:	f04f 0200 	mov.w	r2, #0
 800d5c8:	f04f 0300 	mov.w	r3, #0
 800d5cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	00c3      	lsls	r3, r0, #3
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d5da:	4620      	mov	r0, r4
 800d5dc:	00c2      	lsls	r2, r0, #3
 800d5de:	2300      	movs	r3, #0
 800d5e0:	6039      	str	r1, [r7, #0]
 800d5e2:	607b      	str	r3, [r7, #4]
 800d5e4:	f04f 0200 	mov.w	r2, #0
 800d5e8:	f04f 0300 	mov.w	r3, #0
 800d5ec:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	00c3      	lsls	r3, r0, #3
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	00c2      	lsls	r2, r0, #3
 800d5fe:	1dcb      	adds	r3, r1, #7
 800d600:	08db      	lsrs	r3, r3, #3
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	ebad 0d03 	sub.w	sp, sp, r3
 800d608:	466b      	mov	r3, sp
 800d60a:	3300      	adds	r3, #0
 800d60c:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t zeroPointMinTrimData[size];
 800d60e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d610:	460b      	mov	r3, r1
 800d612:	3b01      	subs	r3, #1
 800d614:	633b      	str	r3, [r7, #48]	@ 0x30
 800d616:	2300      	movs	r3, #0
 800d618:	468a      	mov	sl, r1
 800d61a:	469b      	mov	fp, r3
 800d61c:	f04f 0200 	mov.w	r2, #0
 800d620:	f04f 0300 	mov.w	r3, #0
 800d624:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d628:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d62c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d630:	2300      	movs	r3, #0
 800d632:	4688      	mov	r8, r1
 800d634:	4699      	mov	r9, r3
 800d636:	f04f 0200 	mov.w	r2, #0
 800d63a:	f04f 0300 	mov.w	r3, #0
 800d63e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d64a:	1dcb      	adds	r3, r1, #7
 800d64c:	08db      	lsrs	r3, r3, #3
 800d64e:	00db      	lsls	r3, r3, #3
 800d650:	ebad 0d03 	sub.w	sp, sp, r3
 800d654:	466b      	mov	r3, sp
 800d656:	3300      	adds	r3, #0
 800d658:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(maxTrimData, &maxTrim, size);
 800d65a:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 800d65e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d660:	4619      	mov	r1, r3
 800d662:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d664:	f003 fd01 	bl	801106a <memcpy>
    memcpy(zeroPointMaxTrimData, &zeroPointMaxTrim, size);
 800d668:	f107 0320 	add.w	r3, r7, #32
 800d66c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d66e:	4619      	mov	r1, r3
 800d670:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d672:	f003 fcfa 	bl	801106a <memcpy>
    memcpy(zeroPointMinTrimData, &zeroPointMinTrim, size);
 800d676:	f107 031e 	add.w	r3, r7, #30
 800d67a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d67c:	4619      	mov	r1, r3
 800d67e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d680:	f003 fcf3 	bl	801106a <memcpy>
	WriteData(SecondEmgAppendAddress, size, maxTrimData);
 800d684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d686:	7c59      	ldrb	r1, [r3, #17]
 800d688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d68a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d68c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d68e:	f7fe fe2b 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
	WriteData(SecondEmgAppendAddress+2, size, zeroPointMaxTrimData);
 800d692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d694:	7c5b      	ldrb	r3, [r3, #17]
 800d696:	3302      	adds	r3, #2
 800d698:	b2d9      	uxtb	r1, r3
 800d69a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d69e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d6a0:	f7fe fe22 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
	WriteData(SecondEmgAppendAddress+4, size, zeroPointMinTrimData);
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a6:	7c5b      	ldrb	r3, [r3, #17]
 800d6a8:	3304      	adds	r3, #4
 800d6aa:	b2d9      	uxtb	r1, r3
 800d6ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d6b2:	f7fe fe19 	bl	800c2e8 <_ZN12FlashManager9WriteDataEhiPh>
 800d6b6:	46b5      	mov	sp, r6
}
 800d6b8:	bf00      	nop
 800d6ba:	374c      	adds	r7, #76	@ 0x4c
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6c2 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv>:
uint16_t FlashManager::ReadSecondEmgMaxTrim(){
 800d6c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6c6:	b089      	sub	sp, #36	@ 0x24
 800d6c8:	af02      	add	r7, sp, #8
 800d6ca:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,SecondEmgAppendAddress,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d6cc:	466b      	mov	r3, sp
 800d6ce:	461e      	mov	r6, r3
	size_t size=2;
 800d6d0:	2302      	movs	r3, #2
 800d6d2:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d6d4:	6979      	ldr	r1, [r7, #20]
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	3b01      	subs	r3, #1
 800d6da:	613b      	str	r3, [r7, #16]
 800d6dc:	2300      	movs	r3, #0
 800d6de:	4688      	mov	r8, r1
 800d6e0:	4699      	mov	r9, r3
 800d6e2:	f04f 0200 	mov.w	r2, #0
 800d6e6:	f04f 0300 	mov.w	r3, #0
 800d6ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d6ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d6f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	460c      	mov	r4, r1
 800d6fa:	461d      	mov	r5, r3
 800d6fc:	f04f 0200 	mov.w	r2, #0
 800d700:	f04f 0300 	mov.w	r3, #0
 800d704:	00eb      	lsls	r3, r5, #3
 800d706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d70a:	00e2      	lsls	r2, r4, #3
 800d70c:	1dcb      	adds	r3, r1, #7
 800d70e:	08db      	lsrs	r3, r3, #3
 800d710:	00db      	lsls	r3, r3, #3
 800d712:	ebad 0d03 	sub.w	sp, sp, r3
 800d716:	ab02      	add	r3, sp, #8
 800d718:	3300      	adds	r3, #0
 800d71a:	60fb      	str	r3, [r7, #12]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	460a      	mov	r2, r1
 800d720:	1e51      	subs	r1, r2, #1
 800d722:	2200      	movs	r2, #0
 800d724:	701a      	strb	r2, [r3, #0]
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	1e4b      	subs	r3, r1, #1
 800d72a:	e003      	b.n	800d734 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv+0x72>
 800d72c:	2100      	movs	r1, #0
 800d72e:	7011      	strb	r1, [r2, #0]
 800d730:	3b01      	subs	r3, #1
 800d732:	3201      	adds	r2, #1
 800d734:	2b00      	cmp	r3, #0
 800d736:	daf9      	bge.n	800d72c <_ZN12FlashManager20ReadSecondEmgMaxTrimEv+0x6a>
	ReadData(data,SecondEmgAppendAddress,size, false);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	7c5a      	ldrb	r2, [r3, #17]
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	2100      	movs	r1, #0
 800d740:	9100      	str	r1, [sp, #0]
 800d742:	68f9      	ldr	r1, [r7, #12]
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f7fe fc71 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d74a:	f107 0308 	add.w	r3, r7, #8
 800d74e:	697a      	ldr	r2, [r7, #20]
 800d750:	68f9      	ldr	r1, [r7, #12]
 800d752:	4618      	mov	r0, r3
 800d754:	f003 fc89 	bl	801106a <memcpy>
    return value;
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	46b5      	mov	sp, r6
}
 800d75e:	4618      	mov	r0, r3
 800d760:	371c      	adds	r7, #28
 800d762:	46bd      	mov	sp, r7
 800d764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d768 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv>:
uint16_t FlashManager::ReadSecondEmgZeroPointMaxTrim(){
 800d768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d76c:	b089      	sub	sp, #36	@ 0x24
 800d76e:	af02      	add	r7, sp, #8
 800d770:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,SecondEmgAppendAddress+2,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d772:	466b      	mov	r3, sp
 800d774:	461e      	mov	r6, r3
	size_t size=2;
 800d776:	2302      	movs	r3, #2
 800d778:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d77a:	6979      	ldr	r1, [r7, #20]
 800d77c:	460b      	mov	r3, r1
 800d77e:	3b01      	subs	r3, #1
 800d780:	613b      	str	r3, [r7, #16]
 800d782:	2300      	movs	r3, #0
 800d784:	4688      	mov	r8, r1
 800d786:	4699      	mov	r9, r3
 800d788:	f04f 0200 	mov.w	r2, #0
 800d78c:	f04f 0300 	mov.w	r3, #0
 800d790:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d794:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d798:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d79c:	2300      	movs	r3, #0
 800d79e:	460c      	mov	r4, r1
 800d7a0:	461d      	mov	r5, r3
 800d7a2:	f04f 0200 	mov.w	r2, #0
 800d7a6:	f04f 0300 	mov.w	r3, #0
 800d7aa:	00eb      	lsls	r3, r5, #3
 800d7ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d7b0:	00e2      	lsls	r2, r4, #3
 800d7b2:	1dcb      	adds	r3, r1, #7
 800d7b4:	08db      	lsrs	r3, r3, #3
 800d7b6:	00db      	lsls	r3, r3, #3
 800d7b8:	ebad 0d03 	sub.w	sp, sp, r3
 800d7bc:	ab02      	add	r3, sp, #8
 800d7be:	3300      	adds	r3, #0
 800d7c0:	60fb      	str	r3, [r7, #12]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	460a      	mov	r2, r1
 800d7c6:	1e51      	subs	r1, r2, #1
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	701a      	strb	r2, [r3, #0]
 800d7cc:	1c5a      	adds	r2, r3, #1
 800d7ce:	1e4b      	subs	r3, r1, #1
 800d7d0:	e003      	b.n	800d7da <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv+0x72>
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	7011      	strb	r1, [r2, #0]
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	3201      	adds	r2, #1
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	daf9      	bge.n	800d7d2 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv+0x6a>
	ReadData(data,SecondEmgAppendAddress+2,size, false);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	7c5b      	ldrb	r3, [r3, #17]
 800d7e2:	3302      	adds	r3, #2
 800d7e4:	b2da      	uxtb	r2, r3
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	9100      	str	r1, [sp, #0]
 800d7ec:	68f9      	ldr	r1, [r7, #12]
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7fe fc1c 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d7f4:	f107 0308 	add.w	r3, r7, #8
 800d7f8:	697a      	ldr	r2, [r7, #20]
 800d7fa:	68f9      	ldr	r1, [r7, #12]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f003 fc34 	bl	801106a <memcpy>
    return value;
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	b29b      	uxth	r3, r3
 800d806:	46b5      	mov	sp, r6
}
 800d808:	4618      	mov	r0, r3
 800d80a:	371c      	adds	r7, #28
 800d80c:	46bd      	mov	sp, r7
 800d80e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d812 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv>:
uint16_t FlashManager::ReadSecondEmgZeroPointMinTrim(){
 800d812:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d816:	b089      	sub	sp, #36	@ 0x24
 800d818:	af02      	add	r7, sp, #8
 800d81a:	6078      	str	r0, [r7, #4]
	uint8_t data[size]={0};
	ReadData(data,SecondEmgAppendAddress+4,size, false);
	uint32_t value;
    memcpy(&value, data, size);
    return value;
}
 800d81c:	466b      	mov	r3, sp
 800d81e:	461e      	mov	r6, r3
	size_t size=2;
 800d820:	2302      	movs	r3, #2
 800d822:	617b      	str	r3, [r7, #20]
	uint8_t data[size]={0};
 800d824:	6979      	ldr	r1, [r7, #20]
 800d826:	460b      	mov	r3, r1
 800d828:	3b01      	subs	r3, #1
 800d82a:	613b      	str	r3, [r7, #16]
 800d82c:	2300      	movs	r3, #0
 800d82e:	4688      	mov	r8, r1
 800d830:	4699      	mov	r9, r3
 800d832:	f04f 0200 	mov.w	r2, #0
 800d836:	f04f 0300 	mov.w	r3, #0
 800d83a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d83e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d846:	2300      	movs	r3, #0
 800d848:	460c      	mov	r4, r1
 800d84a:	461d      	mov	r5, r3
 800d84c:	f04f 0200 	mov.w	r2, #0
 800d850:	f04f 0300 	mov.w	r3, #0
 800d854:	00eb      	lsls	r3, r5, #3
 800d856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d85a:	00e2      	lsls	r2, r4, #3
 800d85c:	1dcb      	adds	r3, r1, #7
 800d85e:	08db      	lsrs	r3, r3, #3
 800d860:	00db      	lsls	r3, r3, #3
 800d862:	ebad 0d03 	sub.w	sp, sp, r3
 800d866:	ab02      	add	r3, sp, #8
 800d868:	3300      	adds	r3, #0
 800d86a:	60fb      	str	r3, [r7, #12]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	460a      	mov	r2, r1
 800d870:	1e51      	subs	r1, r2, #1
 800d872:	2200      	movs	r2, #0
 800d874:	701a      	strb	r2, [r3, #0]
 800d876:	1c5a      	adds	r2, r3, #1
 800d878:	1e4b      	subs	r3, r1, #1
 800d87a:	e003      	b.n	800d884 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv+0x72>
 800d87c:	2100      	movs	r1, #0
 800d87e:	7011      	strb	r1, [r2, #0]
 800d880:	3b01      	subs	r3, #1
 800d882:	3201      	adds	r2, #1
 800d884:	2b00      	cmp	r3, #0
 800d886:	daf9      	bge.n	800d87c <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv+0x6a>
	ReadData(data,SecondEmgAppendAddress+4,size, false);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	7c5b      	ldrb	r3, [r3, #17]
 800d88c:	3304      	adds	r3, #4
 800d88e:	b2da      	uxtb	r2, r3
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	2100      	movs	r1, #0
 800d894:	9100      	str	r1, [sp, #0]
 800d896:	68f9      	ldr	r1, [r7, #12]
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f7fe fbc7 	bl	800c02c <_ZN12FlashManager8ReadDataEPhhib>
    memcpy(&value, data, size);
 800d89e:	f107 0308 	add.w	r3, r7, #8
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	68f9      	ldr	r1, [r7, #12]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f003 fbdf 	bl	801106a <memcpy>
    return value;
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	46b5      	mov	sp, r6
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	371c      	adds	r7, #28
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d8bc <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	ed87 0a01 	vstr	s0, [r7, #4]
 800d8c6:	ed97 0a01 	vldr	s0, [r7, #4]
 800d8ca:	f003 f8bb 	bl	8010a44 <ceilf>
 800d8ce:	eef0 7a40 	vmov.f32	s15, s0
 800d8d2:	eeb0 0a67 	vmov.f32	s0, s15
 800d8d6:	3708      	adds	r7, #8
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	ed87 0a01 	vstr	s0, [r7, #4]
 800d8e6:	ed97 0a01 	vldr	s0, [r7, #4]
 800d8ea:	f003 f8ed 	bl	8010ac8 <floorf>
 800d8ee:	eef0 7a40 	vmov.f32	s15, s0
 800d8f2:	eeb0 0a67 	vmov.f32	s0, s15
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <_ZN18VolumeFilterStructC1Ev>:
	float32_t FirstVolumeMAFArray[50];  //60//20
	uint16_t FirstVolumeMAFLength;
	uint16_t Len=25;   //50;  //50//60//20;
	float PreviousHPFilteredValue;

} VolumeFilterStruct;
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2219      	movs	r2, #25
 800d908:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4618      	mov	r0, r3
 800d910:	370c      	adds	r7, #12
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr

0800d91a <_ZN16FlowFilterStructC1Ev>:
	float32_t SumFirstFlowMAFValue;
	float32_t FirstFlowMAFArray[40];
	uint16_t Len=40;         //7;    //40
	uint8_t FirstFlowMAFLength;

} FlowFilterStruct;
 800d91a:	b480      	push	{r7}
 800d91c:	b083      	sub	sp, #12
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2228      	movs	r2, #40	@ 0x28
 800d926:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4618      	mov	r0, r3
 800d92e:	370c      	adds	r7, #12
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <_ZN8LoadCellC1Ev>:
FlowFilterStruct FlowFilter;

float32_t dependedFlow=0;


LoadCell::LoadCell() {
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	4a04      	ldr	r2, [pc, #16]	@ (800d954 <_ZN8LoadCellC1Ev+0x1c>)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	4618      	mov	r0, r3
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr
 800d954:	08011c70 	.word	0x08011c70

0800d958 <_ZN8LoadCellD1Ev>:

LoadCell::~LoadCell() {
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	4a04      	ldr	r2, [pc, #16]	@ (800d974 <_ZN8LoadCellD1Ev+0x1c>)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	4618      	mov	r0, r3
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr
 800d974:	08011c70 	.word	0x08011c70

0800d978 <_ZN8LoadCellD0Ev>:
LoadCell::~LoadCell() {
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
}
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f7ff ffe9 	bl	800d958 <_ZN8LoadCellD1Ev>
 800d986:	f242 0138 	movw	r1, #8248	@ 0x2038
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f003 f856 	bl	8010a3c <_ZdlPvj>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4618      	mov	r0, r3
 800d994:	3708      	adds	r7, #8
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <_ZN8LoadCell5SetupEv>:

void LoadCell::Setup(void){
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b082      	sub	sp, #8
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
	WriteToSPI(PHASE_ADDRESS, PHASE_VALUE);
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	210e      	movs	r1, #14
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 fd72 	bl	800e490 <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(GAIN_ADDRESS, GAIN_VALUE);
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	2110      	movs	r1, #16
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 fd6d 	bl	800e490 <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(STATUS_COM_ADDRESS, STATUS_COM_VALUE);
 800d9b6:	22a3      	movs	r2, #163	@ 0xa3
 800d9b8:	2112      	movs	r1, #18
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 fd68 	bl	800e490 <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(CONFIG_1_ADDRESS, CONFIG_1_VALUE);
 800d9c0:	22f0      	movs	r2, #240	@ 0xf0
 800d9c2:	2114      	movs	r1, #20
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 fd63 	bl	800e490 <_ZN8LoadCell10WriteToSPIEtt>
	WriteToSPI(CONFIG_2_ADDRESS, CONFIG_2_VALUE);
 800d9ca:	220c      	movs	r2, #12
 800d9cc:	2116      	movs	r1, #22
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 fd5e 	bl	800e490 <_ZN8LoadCell10WriteToSPIEtt>
}
 800d9d4:	bf00      	nop
 800d9d6:	3708      	adds	r7, #8
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <_ZN8LoadCell17ReadVolumeAndFlowEv>:
void LoadCell::ReadVolumeAndFlow(void){
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b08a      	sub	sp, #40	@ 0x28
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
	VolumeValue=0;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	f04f 0300 	mov.w	r3, #0
 800d9f0:	6113      	str	r3, [r2, #16]
	uint32_t readLoadCellValue[6];

	ReadFromSPI(DATA_CH0_0,LOAD_CELL_ALL);
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	2101      	movs	r1, #1
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 fc8c 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[0] = VolumeAndFlowReadSPIValue;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800da02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da06:	60fb      	str	r3, [r7, #12]
	Debugger.LoadcellSPI.Channel1=VolumeAndFlowReadSPIValue;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800da0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da12:	461a      	mov	r2, r3
 800da14:	4b61      	ldr	r3, [pc, #388]	@ (800db9c <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800da16:	67da      	str	r2, [r3, #124]	@ 0x7c
	ReadFromSPI(DATA_CH0_1,LOAD_CELL_ALL);
 800da18:	2201      	movs	r2, #1
 800da1a:	2103      	movs	r1, #3
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 fc79 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[1] = VolumeAndFlowReadSPIValue;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800da28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da2c:	613b      	str	r3, [r7, #16]
	Debugger.LoadcellSPI.Channel2=VolumeAndFlowReadSPIValue;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800da34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da38:	461a      	mov	r2, r3
 800da3a:	4b58      	ldr	r3, [pc, #352]	@ (800db9c <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800da3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	ReadFromSPI(DATA_CH0_2,LOAD_CELL_ALL);
 800da40:	2201      	movs	r2, #1
 800da42:	2105      	movs	r1, #5
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 fc65 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[2] = VolumeAndFlowReadSPIValue;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800da50:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da54:	617b      	str	r3, [r7, #20]
	Debugger.LoadcellSPI.Channel3=VolumeAndFlowReadSPIValue;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800da5c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da60:	461a      	mov	r2, r3
 800da62:	4b4e      	ldr	r3, [pc, #312]	@ (800db9c <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800da64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	ReadFromSPI(DATA_CH1_0,LOAD_CELL_ALL);
 800da68:	2201      	movs	r2, #1
 800da6a:	2107      	movs	r1, #7
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 fc51 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[3] = VolumeAndFlowReadSPIValue;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800da78:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da7c:	61bb      	str	r3, [r7, #24]
	Debugger.LoadcellSPI.Channel4=VolumeAndFlowReadSPIValue;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800da84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da88:	461a      	mov	r2, r3
 800da8a:	4b44      	ldr	r3, [pc, #272]	@ (800db9c <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800da8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	ReadFromSPI(DATA_CH1_1,LOAD_CELL_ALL);
 800da90:	2201      	movs	r2, #1
 800da92:	2109      	movs	r1, #9
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f000 fc3d 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[4] = VolumeAndFlowReadSPIValue;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800daa0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800daa4:	61fb      	str	r3, [r7, #28]
	Debugger.LoadcellSPI.Channel5=VolumeAndFlowReadSPIValue;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800daac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dab0:	461a      	mov	r2, r3
 800dab2:	4b3a      	ldr	r3, [pc, #232]	@ (800db9c <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800dab4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

	ReadFromSPI(DATA_CH1_2,LOAD_CELL_ALL);
 800dab8:	2201      	movs	r2, #1
 800daba:	210b      	movs	r1, #11
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 fc29 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[5] = VolumeAndFlowReadSPIValue;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dac8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dacc:	623b      	str	r3, [r7, #32]
	Debugger.LoadcellSPI.Channel6=VolumeAndFlowReadSPIValue;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dad4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dad8:	461a      	mov	r2, r3
 800dada:	4b30      	ldr	r3, [pc, #192]	@ (800db9c <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800dadc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800dae0:	2300      	movs	r3, #0
 800dae2:	627b      	str	r3, [r7, #36]	@ 0x24
 800dae4:	e036      	b.n	800db54 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x178>
		VolumeValue = VolumeValue
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800daec:	ed93 7a04 	vldr	s14, [r3, #16]
				+ readLoadCellValue[4] + (readLoadCellValue[3] << 8);
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	ee07 3a90 	vmov	s15, r3
 800daf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dafa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	021b      	lsls	r3, r3, #8
 800db02:	ee07 3a90 	vmov	s15, r3
 800db06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db0a:	ee77 7a27 	vadd.f32	s15, s14, s15
		VolumeValue = VolumeValue
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db14:	edc3 7a04 	vstr	s15, [r3, #16]
		FlowValue = readLoadCellValue[1]
 800db18:	693a      	ldr	r2, [r7, #16]
				+ (readLoadCellValue[0] << 8);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	021b      	lsls	r3, r3, #8
 800db1e:	4413      	add	r3, r2
		FlowValue = readLoadCellValue[1]
 800db20:	ee07 3a90 	vmov	s15, r3
 800db24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db2e:	edc3 7a03 	vstr	s15, [r3, #12]
		FlowValue=(65536-FlowValue);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db38:	edd3 7a03 	vldr	s15, [r3, #12]
 800db3c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800dba0 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c4>
 800db40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db4a:	edc3 7a03 	vstr	s15, [r3, #12]
	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800db4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db50:	3301      	adds	r3, #1
 800db52:	627b      	str	r3, [r7, #36]	@ 0x24
 800db54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db56:	2b27      	cmp	r3, #39	@ 0x27
 800db58:	ddc5      	ble.n	800dae6 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x10a>
	}
	Debugger.ReadedVolume=VolumeValue;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db60:	691b      	ldr	r3, [r3, #16]
 800db62:	4a0e      	ldr	r2, [pc, #56]	@ (800db9c <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800db64:	6113      	str	r3, [r2, #16]
	//float32_t readedVolume=ExponantialSmoothingFilter(0.5, VolumeValue, LastReadVolumeValue);
	LastReadVolumeValue=VolumeValue;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db6c:	691b      	ldr	r3, [r3, #16]
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800db74:	6213      	str	r3, [r2, #32]

	Debugger.ReadedFlow=FlowValue;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	4a07      	ldr	r2, [pc, #28]	@ (800db9c <_ZN8LoadCell17ReadVolumeAndFlowEv+0x1c0>)
 800db80:	6153      	str	r3, [r2, #20]
	//float32_t readedFlow=ExponantialSmoothingFilter(0.5, FlowValue, LastReadFlowValue);
	LastReadFlowValue=FlowValue;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800db90:	61d3      	str	r3, [r2, #28]

}
 800db92:	bf00      	nop
 800db94:	3728      	adds	r7, #40	@ 0x28
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	200093a0 	.word	0x200093a0
 800dba0:	47800000 	.word	0x47800000

0800dba4 <_ZN8LoadCell10ReadVolumeEb>:
void LoadCell::ReadVolume(bool useBuffer){
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	460b      	mov	r3, r1
 800dbae:	70fb      	strb	r3, [r7, #3]
	VolumeValue=0;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	f04f 0300 	mov.w	r3, #0
 800dbbc:	6113      	str	r3, [r2, #16]
	uint32_t readLoadCellValue[3];

	ReadFromSPI(DATA_CH1_0,LOAD_CELL_VOLUME);
 800dbbe:	2202      	movs	r2, #2
 800dbc0:	2107      	movs	r1, #7
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 fba6 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[0] = VolumeReadSPIValue;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dbce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dbd2:	60fb      	str	r3, [r7, #12]

	ReadFromSPI(DATA_CH1_1,LOAD_CELL_VOLUME);
 800dbd4:	2202      	movs	r2, #2
 800dbd6:	2109      	movs	r1, #9
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 fb9b 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[1] = VolumeReadSPIValue;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dbe4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dbe8:	613b      	str	r3, [r7, #16]

	ReadFromSPI(DATA_CH1_2,LOAD_CELL_VOLUME);
 800dbea:	2202      	movs	r2, #2
 800dbec:	210b      	movs	r1, #11
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 fb90 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[2] = VolumeReadSPIValue;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dbfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dbfe:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800dc00:	2300      	movs	r3, #0
 800dc02:	61fb      	str	r3, [r7, #28]
 800dc04:	e01b      	b.n	800dc3e <_ZN8LoadCell10ReadVolumeEb+0x9a>
		VolumeValue = VolumeValue
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc0c:	ed93 7a04 	vldr	s14, [r3, #16]
				+ readLoadCellValue[1] + (readLoadCellValue[0] << 8);
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	ee07 3a90 	vmov	s15, r3
 800dc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	021b      	lsls	r3, r3, #8
 800dc22:	ee07 3a90 	vmov	s15, r3
 800dc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc2a:	ee77 7a27 	vadd.f32	s15, s14, s15
		VolumeValue = VolumeValue
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc34:	edc3 7a04 	vstr	s15, [r3, #16]
	for (int i = 0; i < LOADCELL_SAMPLE_NUMBER; i++) {
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	61fb      	str	r3, [r7, #28]
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	2b27      	cmp	r3, #39	@ 0x27
 800dc42:	dde0      	ble.n	800dc06 <_ZN8LoadCell10ReadVolumeEb+0x62>
	}
	float32_t newVal=CalculateRealVolumeData(VolumeValue)-2; //-1
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc4a:	edd3 7a04 	vldr	s15, [r3, #16]
 800dc4e:	eeb0 0a67 	vmov.f32	s0, s15
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 f88c 	bl	800dd70 <_ZN8LoadCell23CalculateRealVolumeDataEf>
 800dc58:	eef0 7a40 	vmov.f32	s15, s0
 800dc5c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800dc60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc64:	edc7 7a02 	vstr	s15, [r7, #8]
	if(newVal<0){
 800dc68:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc74:	d502      	bpl.n	800dc7c <_ZN8LoadCell10ReadVolumeEb+0xd8>
		newVal=0;
 800dc76:	f04f 0300 	mov.w	r3, #0
 800dc7a:	60bb      	str	r3, [r7, #8]
	//if(dependedFlow==0) newVal=0;

	/*if(newVal<MaxVolumeValue){   //
		newVal=MaxVolumeValue;     //
	}*/                            //
	MaxVolumeValue=newVal;
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800dc84:	6153      	str	r3, [r2, #20]
	Debugger.Volume=newVal;
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	4a38      	ldr	r2, [pc, #224]	@ (800dd6c <_ZN8LoadCell10ReadVolumeEb+0x1c8>)
 800dc8a:	6213      	str	r3, [r2, #32]
	if(useBuffer==false) return;
 800dc8c:	78fb      	ldrb	r3, [r7, #3]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d067      	beq.n	800dd62 <_ZN8LoadCell10ReadVolumeEb+0x1be>
	VolumeBufferLen%=1024;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	425a      	negs	r2, r3
 800dc9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dca0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800dca4:	bf58      	it	pl
 800dca6:	4253      	negpl	r3, r2
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800dcae:	6053      	str	r3, [r2, #4]
	uint8_t *array;
	array = (uint8_t*)(&newVal);
 800dcb0:	f107 0308 	add.w	r3, r7, #8
 800dcb4:	61bb      	str	r3, [r7, #24]
	VolumeBuffer[VolumeBufferLen]=array[0];
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	781a      	ldrb	r2, [r3, #0]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	ee07 2a90 	vmov	s15, r2
 800dcc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	4413      	add	r3, r2
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	edc3 7a00 	vstr	s15, [r3]
	VolumeBuffer[VolumeBufferLen+1]=array[1];
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	781a      	ldrb	r2, [r3, #0]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	3301      	adds	r3, #1
 800dce6:	ee07 2a90 	vmov	s15, r2
 800dcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	4413      	add	r3, r2
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	edc3 7a00 	vstr	s15, [r3]
	VolumeBuffer[VolumeBufferLen+2]=array[2];
 800dcfa:	69bb      	ldr	r3, [r7, #24]
 800dcfc:	3302      	adds	r3, #2
 800dcfe:	781a      	ldrb	r2, [r3, #0]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	3302      	adds	r3, #2
 800dd0a:	ee07 2a90 	vmov	s15, r2
 800dd0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4413      	add	r3, r2
 800dd18:	3304      	adds	r3, #4
 800dd1a:	edc3 7a00 	vstr	s15, [r3]
	VolumeBuffer[VolumeBufferLen+3]=array[3];
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	3303      	adds	r3, #3
 800dd22:	781a      	ldrb	r2, [r3, #0]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	3303      	adds	r3, #3
 800dd2e:	ee07 2a90 	vmov	s15, r2
 800dd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	4413      	add	r3, r2
 800dd3c:	3304      	adds	r3, #4
 800dd3e:	edc3 7a00 	vstr	s15, [r3]
	VolumeBufferLen+=4;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800dd52:	6053      	str	r3, [r2, #4]
	Debugger.VolumeBufferLen=VolumeBufferLen;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	4a03      	ldr	r2, [pc, #12]	@ (800dd6c <_ZN8LoadCell10ReadVolumeEb+0x1c8>)
 800dd5e:	6013      	str	r3, [r2, #0]
 800dd60:	e000      	b.n	800dd64 <_ZN8LoadCell10ReadVolumeEb+0x1c0>
	if(useBuffer==false) return;
 800dd62:	bf00      	nop
}
 800dd64:	3720      	adds	r7, #32
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	200093a0 	.word	0x200093a0

0800dd70 <_ZN8LoadCell23CalculateRealVolumeDataEf>:
float32_t LoadCell::CalculateRealVolumeData(float32_t volume){
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b08a      	sub	sp, #40	@ 0x28
 800dd74:	af02      	add	r7, sp, #8
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	ed87 0a00 	vstr	s0, [r7]
	float32_t newVolume = 0;
 800dd7c:	f04f 0300 	mov.w	r3, #0
 800dd80:	61fb      	str	r3, [r7, #28]
	float32_t movingVolumeData = 0;
 800dd82:	f04f 0300 	mov.w	r3, #0
 800dd86:	617b      	str	r3, [r7, #20]
	Debugger.ReadedVolume=volume;
 800dd88:	4a5a      	ldr	r2, [pc, #360]	@ (800def4 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	6113      	str	r3, [r2, #16]
	float32_t readedVolume=ExponantialSmoothingFilter(0.45, volume, LastReadVolumeValue);  //0.5
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dd94:	edd3 7a08 	vldr	s15, [r3, #32]
 800dd98:	eeb0 1a67 	vmov.f32	s2, s15
 800dd9c:	edd7 0a00 	vldr	s1, [r7]
 800dda0:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 800def8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 fb9d 	bl	800e4e4 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800ddaa:	ed87 0a04 	vstr	s0, [r7, #16]
	LastReadVolumeValue=readedVolume;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	6213      	str	r3, [r2, #32]

	VolumeFilter.FirstVolumeMAFLength++;
 800ddba:	4b50      	ldr	r3, [pc, #320]	@ (800defc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800ddbc:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	4b4d      	ldr	r3, [pc, #308]	@ (800defc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800ddc6:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
	if (VolumeFilter.FirstVolumeMAFLength
 800ddca:	4b4c      	ldr	r3, [pc, #304]	@ (800defc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800ddcc:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
			>= VolumeFilter.Len) {
 800ddd0:	4b4a      	ldr	r3, [pc, #296]	@ (800defc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800ddd2:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
	if (VolumeFilter.FirstVolumeMAFLength
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d303      	bcc.n	800dde2 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x72>
		VolumeFilter.FirstVolumeMAFLength = 0;
 800ddda:	4b48      	ldr	r3, [pc, #288]	@ (800defc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800dddc:	2200      	movs	r2, #0
 800ddde:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
	}
	float32_t diff=readedVolume-(SystemConfig.VolumeAverage);
 800dde2:	4b47      	ldr	r3, [pc, #284]	@ (800df00 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x190>)
 800dde4:	699b      	ldr	r3, [r3, #24]
 800dde6:	ee07 3a90 	vmov	s15, r3
 800ddea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddee:	ed97 7a04 	vldr	s14, [r7, #16]
 800ddf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ddf6:	edc7 7a06 	vstr	s15, [r7, #24]
	if(diff<0){
 800ddfa:	edd7 7a06 	vldr	s15, [r7, #24]
 800ddfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de06:	d502      	bpl.n	800de0e <_ZN8LoadCell23CalculateRealVolumeDataEf+0x9e>
		diff=0;
 800de08:	f04f 0300 	mov.w	r3, #0
 800de0c:	61bb      	str	r3, [r7, #24]
	}
	Debugger.DiffAverageVolumeValue=diff;
 800de0e:	4a39      	ldr	r2, [pc, #228]	@ (800def4 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	6593      	str	r3, [r2, #88]	@ 0x58

	movingVolumeData = FilterInstance.MoovingAverage(
			VolumeFilter.FirstVolumeMAFArray,
			&VolumeFilter.SumFirstVolumeMAFValue,
			VolumeFilter.FirstVolumeMAFLength,VolumeFilter.Len , diff);
 800de14:	4b39      	ldr	r3, [pc, #228]	@ (800defc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800de16:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
	movingVolumeData = FilterInstance.MoovingAverage(
 800de1a:	461a      	mov	r2, r3
			VolumeFilter.FirstVolumeMAFLength,VolumeFilter.Len , diff);
 800de1c:	4b37      	ldr	r3, [pc, #220]	@ (800defc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800de1e:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
	movingVolumeData = FilterInstance.MoovingAverage(
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	ed97 0a06 	vldr	s0, [r7, #24]
 800de28:	4613      	mov	r3, r2
 800de2a:	4a34      	ldr	r2, [pc, #208]	@ (800defc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800de2c:	4935      	ldr	r1, [pc, #212]	@ (800df04 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x194>)
 800de2e:	4836      	ldr	r0, [pc, #216]	@ (800df08 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x198>)
 800de30:	f7fe f8a4 	bl	800bf7c <_ZN6Filter14MoovingAverageEPfS0_mmf>
 800de34:	ed87 0a05 	vstr	s0, [r7, #20]
	Debugger.MovingAverageVolumeValue=movingVolumeData;
 800de38:	4a2e      	ldr	r2, [pc, #184]	@ (800def4 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	6513      	str	r3, [r2, #80]	@ 0x50
	float32_t newValue=movingVolumeData/(SystemConfig.VolumeRate); //+6
 800de3e:	4b30      	ldr	r3, [pc, #192]	@ (800df00 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x190>)
 800de40:	ed93 7a07 	vldr	s14, [r3, #28]
 800de44:	edd7 6a05 	vldr	s13, [r7, #20]
 800de48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de4c:	edc7 7a03 	vstr	s15, [r7, #12]
	newVolume=ExponantialSmoothingFilter((newValue>10?0.45:0.85), newValue,LastVolumeValue); //0.5
 800de50:	edd7 7a03 	vldr	s15, [r7, #12]
 800de54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800de58:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de60:	dd02      	ble.n	800de68 <_ZN8LoadCell23CalculateRealVolumeDataEf+0xf8>
 800de62:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800def8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>
 800de66:	e001      	b.n	800de6c <_ZN8LoadCell23CalculateRealVolumeDataEf+0xfc>
 800de68:	eddf 7a28 	vldr	s15, [pc, #160]	@ 800df0c <_ZN8LoadCell23CalculateRealVolumeDataEf+0x19c>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800de72:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800de76:	eeb0 1a47 	vmov.f32	s2, s14
 800de7a:	edd7 0a03 	vldr	s1, [r7, #12]
 800de7e:	eeb0 0a67 	vmov.f32	s0, s15
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 fb2e 	bl	800e4e4 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800de88:	ed87 0a07 	vstr	s0, [r7, #28]
	if(newValue>5){
 800de8c:	edd7 7a03 	vldr	s15, [r7, #12]
 800de90:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800de94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de9c:	dd06      	ble.n	800deac <_ZN8LoadCell23CalculateRealVolumeDataEf+0x13c>
		newVolume=ceil(newVolume);
 800de9e:	ed97 0a07 	vldr	s0, [r7, #28]
 800dea2:	f7ff fd0b 	bl	800d8bc <_ZSt4ceilf>
 800dea6:	ed87 0a07 	vstr	s0, [r7, #28]
 800deaa:	e005      	b.n	800deb8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x148>
	}
	else{
		newVolume=floor(newVolume);
 800deac:	ed97 0a07 	vldr	s0, [r7, #28]
 800deb0:	f7ff fd14 	bl	800d8dc <_ZSt5floorf>
 800deb4:	ed87 0a07 	vstr	s0, [r7, #28]
	}
	if(newVolume<0){
 800deb8:	edd7 7a07 	vldr	s15, [r7, #28]
 800debc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dec4:	d502      	bpl.n	800decc <_ZN8LoadCell23CalculateRealVolumeDataEf+0x15c>
		newVolume=0;
 800dec6:	f04f 0300 	mov.w	r3, #0
 800deca:	61fb      	str	r3, [r7, #28]
	}
	LastVolumeValue=newVolume;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ded2:	461a      	mov	r2, r3
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	6293      	str	r3, [r2, #40]	@ 0x28
	Debugger.LastVolume=LastVolumeValue;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dee0:	4a04      	ldr	r2, [pc, #16]	@ (800def4 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800dee2:	6193      	str	r3, [r2, #24]
	return newVolume;
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	ee07 3a90 	vmov	s15, r3
}
 800deea:	eeb0 0a67 	vmov.f32	s0, s15
 800deee:	3720      	adds	r7, #32
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	200093a0 	.word	0x200093a0
 800def8:	3ee66666 	.word	0x3ee66666
 800defc:	20004ef0 	.word	0x20004ef0
 800df00:	20009328 	.word	0x20009328
 800df04:	20004ef4 	.word	0x20004ef4
 800df08:	20004eec 	.word	0x20004eec
 800df0c:	3f59999a 	.word	0x3f59999a

0800df10 <_ZN8LoadCell8ReadFlowEb>:
void LoadCell::ReadFlow(bool useBuffer){
 800df10:	b580      	push	{r7, lr}
 800df12:	b08a      	sub	sp, #40	@ 0x28
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	460b      	mov	r3, r1
 800df1a:	70fb      	strb	r3, [r7, #3]
	uint32_t readLoadCellValue[6];

	ReadFromSPI(DATA_CH0_0,LOAD_CELL_FLOW);
 800df1c:	2203      	movs	r2, #3
 800df1e:	2101      	movs	r1, #1
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 f9f7 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[0] = FlowReadSPIValue;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800df2c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800df30:	60fb      	str	r3, [r7, #12]

	ReadFromSPI(DATA_CH0_1,LOAD_CELL_FLOW);
 800df32:	2203      	movs	r2, #3
 800df34:	2103      	movs	r1, #3
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 f9ec 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[1] = FlowReadSPIValue;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800df42:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800df46:	613b      	str	r3, [r7, #16]

	ReadFromSPI(DATA_CH0_2,LOAD_CELL_FLOW);
 800df48:	2203      	movs	r2, #3
 800df4a:	2105      	movs	r1, #5
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 f9e1 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[2] = FlowReadSPIValue;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800df58:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800df5c:	617b      	str	r3, [r7, #20]

	ReadFromSPI(DATA_CH1_0,LOAD_CELL_FLOW);
 800df5e:	2203      	movs	r2, #3
 800df60:	2107      	movs	r1, #7
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 f9d6 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[3] = FlowReadSPIValue;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800df6e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800df72:	61bb      	str	r3, [r7, #24]

	ReadFromSPI(DATA_CH1_1,LOAD_CELL_FLOW);
 800df74:	2203      	movs	r2, #3
 800df76:	2109      	movs	r1, #9
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f9cb 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[4] = FlowReadSPIValue;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800df84:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800df88:	61fb      	str	r3, [r7, #28]

	ReadFromSPI(DATA_CH1_2,LOAD_CELL_FLOW);
 800df8a:	2203      	movs	r2, #3
 800df8c:	210b      	movs	r1, #11
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 f9c0 	bl	800e314 <_ZN8LoadCell11ReadFromSPIEhi>
	readLoadCellValue[5] = FlowReadSPIValue;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800df9a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800df9e:	623b      	str	r3, [r7, #32]
	FlowValue = readLoadCellValue[1]
 800dfa0:	693a      	ldr	r2, [r7, #16]
			+ (readLoadCellValue[0] << 8);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	021b      	lsls	r3, r3, #8
 800dfa6:	4413      	add	r3, r2
	FlowValue = readLoadCellValue[1]
 800dfa8:	ee07 3a90 	vmov	s15, r3
 800dfac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dfb6:	edc3 7a03 	vstr	s15, [r3, #12]
	FlowValue=(65536-FlowValue);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dfc0:	edd3 7a03 	vldr	s15, [r3, #12]
 800dfc4:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800e150 <_ZN8LoadCell8ReadFlowEb+0x240>
 800dfc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dfd2:	edc3 7a03 	vstr	s15, [r3, #12]
	float32_t newVal=CalculateRealFlowData(FlowValue)-4.52;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dfdc:	edd3 7a03 	vldr	s15, [r3, #12]
 800dfe0:	eeb0 0a67 	vmov.f32	s0, s15
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f000 f8bf 	bl	800e168 <_ZN8LoadCell21CalculateRealFlowDataEf>
 800dfea:	ee10 3a10 	vmov	r3, s0
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7f2 faa2 	bl	8000538 <__aeabi_f2d>
 800dff4:	a354      	add	r3, pc, #336	@ (adr r3, 800e148 <_ZN8LoadCell8ReadFlowEb+0x238>)
 800dff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffa:	f7f2 f93d 	bl	8000278 <__aeabi_dsub>
 800dffe:	4602      	mov	r2, r0
 800e000:	460b      	mov	r3, r1
 800e002:	4610      	mov	r0, r2
 800e004:	4619      	mov	r1, r3
 800e006:	f7f2 fd01 	bl	8000a0c <__aeabi_d2f>
 800e00a:	4603      	mov	r3, r0
 800e00c:	60bb      	str	r3, [r7, #8]
	if(newVal<0) newVal=0;
 800e00e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e012:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e01a:	d502      	bpl.n	800e022 <_ZN8LoadCell8ReadFlowEb+0x112>
 800e01c:	f04f 0300 	mov.w	r3, #0
 800e020:	60bb      	str	r3, [r7, #8]
    dependedFlow=newVal;
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	4a4b      	ldr	r2, [pc, #300]	@ (800e154 <_ZN8LoadCell8ReadFlowEb+0x244>)
 800e026:	6013      	str	r3, [r2, #0]

	if(newVal>=SystemConfig.MinimumFlowSensiblity){
 800e028:	4b4b      	ldr	r3, [pc, #300]	@ (800e158 <_ZN8LoadCell8ReadFlowEb+0x248>)
 800e02a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800e02e:	ee07 3a90 	vmov	s15, r3
 800e032:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e036:	edd7 7a02 	vldr	s15, [r7, #8]
 800e03a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e042:	d80b      	bhi.n	800e05c <_ZN8LoadCell8ReadFlowEb+0x14c>
		IsFirstHandle=true;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e04a:	2201      	movs	r2, #1
 800e04c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		LastHandleProcessTime=StartTimerTicks;
 800e050:	4b42      	ldr	r3, [pc, #264]	@ (800e15c <_ZN8LoadCell8ReadFlowEb+0x24c>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800e05a:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	Debugger.Flow=newVal;
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	4a40      	ldr	r2, [pc, #256]	@ (800e160 <_ZN8LoadCell8ReadFlowEb+0x250>)
 800e060:	6253      	str	r3, [r2, #36]	@ 0x24
	if(useBuffer==false) return;
 800e062:	78fb      	ldrb	r3, [r7, #3]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d06b      	beq.n	800e140 <_ZN8LoadCell8ReadFlowEb+0x230>
	FlowBufferLen%=1024;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	425a      	negs	r2, r3
 800e072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e076:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e07a:	bf58      	it	pl
 800e07c:	4253      	negpl	r3, r2
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800e084:	6093      	str	r3, [r2, #8]
	uint8_t *array;
	array = (uint8_t*)(&newVal);
 800e086:	f107 0308 	add.w	r3, r7, #8
 800e08a:	627b      	str	r3, [r7, #36]	@ 0x24
	FlowBuffer[FlowBufferLen]=array[0];
 800e08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e08e:	781a      	ldrb	r2, [r3, #0]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	ee07 2a90 	vmov	s15, r2
 800e09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	4413      	add	r3, r2
 800e0aa:	edc3 7a00 	vstr	s15, [r3]
	FlowBuffer[FlowBufferLen+1]=array[1];
 800e0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	781a      	ldrb	r2, [r3, #0]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	ee07 2a90 	vmov	s15, r2
 800e0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	4413      	add	r3, r2
 800e0d0:	edc3 7a00 	vstr	s15, [r3]
	FlowBuffer[FlowBufferLen+2]=array[2];
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d6:	3302      	adds	r3, #2
 800e0d8:	781a      	ldrb	r2, [r3, #0]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	3302      	adds	r3, #2
 800e0e4:	ee07 2a90 	vmov	s15, r2
 800e0e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4413      	add	r3, r2
 800e0f6:	edc3 7a00 	vstr	s15, [r3]
	FlowBuffer[FlowBufferLen+3]=array[3];
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0fc:	3303      	adds	r3, #3
 800e0fe:	781a      	ldrb	r2, [r3, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	3303      	adds	r3, #3
 800e10a:	ee07 2a90 	vmov	s15, r2
 800e10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	4413      	add	r3, r2
 800e11c:	edc3 7a00 	vstr	s15, [r3]
	FlowBufferLen+=4;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	3304      	adds	r3, #4
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800e130:	6093      	str	r3, [r2, #8]
	Debugger.FlowBufferLen=FlowBufferLen;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e138:	689b      	ldr	r3, [r3, #8]
 800e13a:	4a09      	ldr	r2, [pc, #36]	@ (800e160 <_ZN8LoadCell8ReadFlowEb+0x250>)
 800e13c:	6053      	str	r3, [r2, #4]
 800e13e:	e000      	b.n	800e142 <_ZN8LoadCell8ReadFlowEb+0x232>
	if(useBuffer==false) return;
 800e140:	bf00      	nop
}
 800e142:	3728      	adds	r7, #40	@ 0x28
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	e147ae14 	.word	0xe147ae14
 800e14c:	4012147a 	.word	0x4012147a
 800e150:	47800000 	.word	0x47800000
 800e154:	2000506c 	.word	0x2000506c
 800e158:	20009328 	.word	0x20009328
 800e15c:	200000cc 	.word	0x200000cc
 800e160:	200093a0 	.word	0x200093a0
 800e164:	00000000 	.word	0x00000000

0800e168 <_ZN8LoadCell21CalculateRealFlowDataEf>:
float32_t LoadCell::CalculateRealFlowData(float32_t flow){
 800e168:	b580      	push	{r7, lr}
 800e16a:	b08a      	sub	sp, #40	@ 0x28
 800e16c:	af02      	add	r7, sp, #8
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	ed87 0a00 	vstr	s0, [r7]
	float32_t newFlow = 0;
 800e174:	f04f 0300 	mov.w	r3, #0
 800e178:	61fb      	str	r3, [r7, #28]
	float32_t movingFlowData = 0;
 800e17a:	f04f 0300 	mov.w	r3, #0
 800e17e:	617b      	str	r3, [r7, #20]

	Debugger.ReadedFlow=flow;
 800e180:	4a5d      	ldr	r2, [pc, #372]	@ (800e2f8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x190>)
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	6153      	str	r3, [r2, #20]
	float32_t readedFlow=ExponantialSmoothingFilter(0.25, flow, LastReadFlowValue) + 100; //0,4
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e18c:	edd3 7a07 	vldr	s15, [r3, #28]
 800e190:	eeb0 1a67 	vmov.f32	s2, s15
 800e194:	edd7 0a00 	vldr	s1, [r7]
 800e198:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 f9a1 	bl	800e4e4 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800e1a2:	eef0 7a40 	vmov.f32	s15, s0
 800e1a6:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800e2fc <_ZN8LoadCell21CalculateRealFlowDataEf+0x194>
 800e1aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1ae:	edc7 7a04 	vstr	s15, [r7, #16]
	LastReadFlowValue=readedFlow;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	61d3      	str	r3, [r2, #28]
	FlowFilter.FirstFlowMAFLength++;
 800e1be:	4b50      	ldr	r3, [pc, #320]	@ (800e300 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e1c0:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	4b4d      	ldr	r3, [pc, #308]	@ (800e300 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e1ca:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	float32_t diffFlow=readedFlow-(SystemConfig.FlowAverage-280);    //320 //270  //200
 800e1ce:	4b4d      	ldr	r3, [pc, #308]	@ (800e304 <_ZN8LoadCell21CalculateRealFlowDataEf+0x19c>)
 800e1d0:	695b      	ldr	r3, [r3, #20]
 800e1d2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e1d6:	ee07 3a90 	vmov	s15, r3
 800e1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1de:	ed97 7a04 	vldr	s14, [r7, #16]
 800e1e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1e6:	edc7 7a06 	vstr	s15, [r7, #24]
	if(diffFlow<0){
 800e1ea:	edd7 7a06 	vldr	s15, [r7, #24]
 800e1ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f6:	d502      	bpl.n	800e1fe <_ZN8LoadCell21CalculateRealFlowDataEf+0x96>
		diffFlow=0;
 800e1f8:	f04f 0300 	mov.w	r3, #0
 800e1fc:	61bb      	str	r3, [r7, #24]
	}
	if (FlowFilter.FirstFlowMAFLength >= FlowFilter.Len) {
 800e1fe:	4b40      	ldr	r3, [pc, #256]	@ (800e300 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e200:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800e204:	461a      	mov	r2, r3
 800e206:	4b3e      	ldr	r3, [pc, #248]	@ (800e300 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e208:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800e20c:	429a      	cmp	r2, r3
 800e20e:	db03      	blt.n	800e218 <_ZN8LoadCell21CalculateRealFlowDataEf+0xb0>
		FlowFilter.FirstFlowMAFLength = 0;
 800e210:	4b3b      	ldr	r3, [pc, #236]	@ (800e300 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e212:	2200      	movs	r2, #0
 800e214:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	}

	movingFlowData = FilterInstance.MoovingAverage(
			FlowFilter.FirstFlowMAFArray,
			&FlowFilter.SumFirstFlowMAFValue,
			FlowFilter.FirstFlowMAFLength,
 800e218:	4b39      	ldr	r3, [pc, #228]	@ (800e300 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e21a:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
	movingFlowData = FilterInstance.MoovingAverage(
 800e21e:	461a      	mov	r2, r3
			FlowFilter.Len,
 800e220:	4b37      	ldr	r3, [pc, #220]	@ (800e300 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e222:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
	movingFlowData = FilterInstance.MoovingAverage(
 800e226:	9300      	str	r3, [sp, #0]
 800e228:	ed97 0a06 	vldr	s0, [r7, #24]
 800e22c:	4613      	mov	r3, r2
 800e22e:	4a34      	ldr	r2, [pc, #208]	@ (800e300 <_ZN8LoadCell21CalculateRealFlowDataEf+0x198>)
 800e230:	4935      	ldr	r1, [pc, #212]	@ (800e308 <_ZN8LoadCell21CalculateRealFlowDataEf+0x1a0>)
 800e232:	4836      	ldr	r0, [pc, #216]	@ (800e30c <_ZN8LoadCell21CalculateRealFlowDataEf+0x1a4>)
 800e234:	f7fd fea2 	bl	800bf7c <_ZN6Filter14MoovingAverageEPfS0_mmf>
 800e238:	ed87 0a05 	vstr	s0, [r7, #20]
			diffFlow);
	float32_t newValue=movingFlowData/SystemConfig.FlowRate;
 800e23c:	4b31      	ldr	r3, [pc, #196]	@ (800e304 <_ZN8LoadCell21CalculateRealFlowDataEf+0x19c>)
 800e23e:	ed93 7a08 	vldr	s14, [r3, #32]
 800e242:	edd7 6a05 	vldr	s13, [r7, #20]
 800e246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e24a:	edc7 7a03 	vstr	s15, [r7, #12]
	newFlow=(ExponantialSmoothingFilter((newValue>4?0.25:0.85), newValue,LastFlowValue))/1.1;  //1.25//0,5  //1.6 scale ==> flow 13 max
 800e24e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e252:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800e256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25e:	dd02      	ble.n	800e266 <_ZN8LoadCell21CalculateRealFlowDataEf+0xfe>
 800e260:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800e264:	e001      	b.n	800e26a <_ZN8LoadCell21CalculateRealFlowDataEf+0x102>
 800e266:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 800e310 <_ZN8LoadCell21CalculateRealFlowDataEf+0x1a8>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e270:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800e274:	eeb0 1a47 	vmov.f32	s2, s14
 800e278:	edd7 0a03 	vldr	s1, [r7, #12]
 800e27c:	eeb0 0a67 	vmov.f32	s0, s15
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 f92f 	bl	800e4e4 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800e286:	ee10 3a10 	vmov	r3, s0
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7f2 f954 	bl	8000538 <__aeabi_f2d>
 800e290:	a317      	add	r3, pc, #92	@ (adr r3, 800e2f0 <_ZN8LoadCell21CalculateRealFlowDataEf+0x188>)
 800e292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e296:	f7f2 fad1 	bl	800083c <__aeabi_ddiv>
 800e29a:	4602      	mov	r2, r0
 800e29c:	460b      	mov	r3, r1
 800e29e:	4610      	mov	r0, r2
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	f7f2 fbb3 	bl	8000a0c <__aeabi_d2f>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	61fb      	str	r3, [r7, #28]
	if(newFlow<1.5){
 800e2aa:	edd7 7a07 	vldr	s15, [r7, #28]
 800e2ae:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e2b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ba:	d502      	bpl.n	800e2c2 <_ZN8LoadCell21CalculateRealFlowDataEf+0x15a>
		newFlow=0;
 800e2bc:	f04f 0300 	mov.w	r3, #0
 800e2c0:	61fb      	str	r3, [r7, #28]
	}
	LastFlowValue=newFlow;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	6253      	str	r3, [r2, #36]	@ 0x24
	Debugger.LastFlow=LastFlowValue;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2d6:	4a08      	ldr	r2, [pc, #32]	@ (800e2f8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x190>)
 800e2d8:	61d3      	str	r3, [r2, #28]
	return newFlow;
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	ee07 3a90 	vmov	s15, r3
}
 800e2e0:	eeb0 0a67 	vmov.f32	s0, s15
 800e2e4:	3720      	adds	r7, #32
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	f3af 8000 	nop.w
 800e2f0:	9999999a 	.word	0x9999999a
 800e2f4:	3ff19999 	.word	0x3ff19999
 800e2f8:	200093a0 	.word	0x200093a0
 800e2fc:	42c80000 	.word	0x42c80000
 800e300:	20004fc4 	.word	0x20004fc4
 800e304:	20009328 	.word	0x20009328
 800e308:	20004fc8 	.word	0x20004fc8
 800e30c:	20004eec 	.word	0x20004eec
 800e310:	3f59999a 	.word	0x3f59999a

0800e314 <_ZN8LoadCell11ReadFromSPIEhi>:
void LoadCell::ReadFromSPI(uint8_t value, int type){
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	460b      	mov	r3, r1
 800e31e:	607a      	str	r2, [r7, #4]
 800e320:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800e322:	2200      	movs	r2, #0
 800e324:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e328:	481f      	ldr	r0, [pc, #124]	@ (800e3a8 <_ZN8LoadCell11ReadFromSPIEhi+0x94>)
 800e32a:	f7f4 fe73 	bl	8003014 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(LOAD_CELL_SPI_CHANNEL, &value, 1, 100);  //, 100
 800e32e:	f107 010b 	add.w	r1, r7, #11
 800e332:	2364      	movs	r3, #100	@ 0x64
 800e334:	2201      	movs	r2, #1
 800e336:	481d      	ldr	r0, [pc, #116]	@ (800e3ac <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800e338:	f7f5 fb67 	bl	8003a0a <HAL_SPI_Transmit>
	switch(type){
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b03      	cmp	r3, #3
 800e340:	d01d      	beq.n	800e37e <_ZN8LoadCell11ReadFromSPIEhi+0x6a>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b03      	cmp	r3, #3
 800e346:	dc24      	bgt.n	800e392 <_ZN8LoadCell11ReadFromSPIEhi+0x7e>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d003      	beq.n	800e356 <_ZN8LoadCell11ReadFromSPIEhi+0x42>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2b02      	cmp	r3, #2
 800e352:	d00a      	beq.n	800e36a <_ZN8LoadCell11ReadFromSPIEhi+0x56>
		break;
		case LOAD_CELL_FLOW:
			HAL_SPI_Receive(LOAD_CELL_SPI_CHANNEL, &FlowReadSPIValue,1, 100);  //, 100
		break;
		default:
			break;
 800e354:	e01d      	b.n	800e392 <_ZN8LoadCell11ReadFromSPIEhi+0x7e>
			HAL_SPI_Receive(LOAD_CELL_SPI_CHANNEL, &VolumeAndFlowReadSPIValue,1, 100);  //, 100
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f503 5100 	add.w	r1, r3, #8192	@ 0x2000
 800e35c:	3134      	adds	r1, #52	@ 0x34
 800e35e:	2364      	movs	r3, #100	@ 0x64
 800e360:	2201      	movs	r2, #1
 800e362:	4812      	ldr	r0, [pc, #72]	@ (800e3ac <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800e364:	f7f5 fc95 	bl	8003c92 <HAL_SPI_Receive>
		break;
 800e368:	e014      	b.n	800e394 <_ZN8LoadCell11ReadFromSPIEhi+0x80>
			HAL_SPI_Receive(LOAD_CELL_SPI_CHANNEL, &VolumeReadSPIValue,1, 100);  //, 100
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f503 5100 	add.w	r1, r3, #8192	@ 0x2000
 800e370:	3135      	adds	r1, #53	@ 0x35
 800e372:	2364      	movs	r3, #100	@ 0x64
 800e374:	2201      	movs	r2, #1
 800e376:	480d      	ldr	r0, [pc, #52]	@ (800e3ac <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800e378:	f7f5 fc8b 	bl	8003c92 <HAL_SPI_Receive>
		break;
 800e37c:	e00a      	b.n	800e394 <_ZN8LoadCell11ReadFromSPIEhi+0x80>
			HAL_SPI_Receive(LOAD_CELL_SPI_CHANNEL, &FlowReadSPIValue,1, 100);  //, 100
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f503 5100 	add.w	r1, r3, #8192	@ 0x2000
 800e384:	3136      	adds	r1, #54	@ 0x36
 800e386:	2364      	movs	r3, #100	@ 0x64
 800e388:	2201      	movs	r2, #1
 800e38a:	4808      	ldr	r0, [pc, #32]	@ (800e3ac <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800e38c:	f7f5 fc81 	bl	8003c92 <HAL_SPI_Receive>
		break;
 800e390:	e000      	b.n	800e394 <_ZN8LoadCell11ReadFromSPIEhi+0x80>
			break;
 800e392:	bf00      	nop
	}
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 800e394:	2201      	movs	r2, #1
 800e396:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e39a:	4803      	ldr	r0, [pc, #12]	@ (800e3a8 <_ZN8LoadCell11ReadFromSPIEhi+0x94>)
 800e39c:	f7f4 fe3a 	bl	8003014 <HAL_GPIO_WritePin>
}
 800e3a0:	bf00      	nop
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	40020000 	.word	0x40020000
 800e3ac:	20000180 	.word	0x20000180

0800e3b0 <_ZN8LoadCell11ClearParamsEv>:
void LoadCell::ClearParams(void){
 800e3b0:	b480      	push	{r7}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
	LastHandleProcessTime=UINT32_MAX;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e3be:	461a      	mov	r2, r3
 800e3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c4:	6313      	str	r3, [r2, #48]	@ 0x30
	IsFirstHandle=false;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	VolumeValue=0;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e3d8:	461a      	mov	r2, r3
 800e3da:	f04f 0300 	mov.w	r3, #0
 800e3de:	6113      	str	r3, [r2, #16]
	FlowValue=0;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	f04f 0300 	mov.w	r3, #0
 800e3ec:	60d3      	str	r3, [r2, #12]
	LastVolumeValue=0;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	f04f 0300 	mov.w	r3, #0
 800e3fa:	6293      	str	r3, [r2, #40]	@ 0x28
	LastFlowValue=0;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e402:	461a      	mov	r2, r3
 800e404:	f04f 0300 	mov.w	r3, #0
 800e408:	6253      	str	r3, [r2, #36]	@ 0x24
	LastReadVolumeValue=0;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e410:	461a      	mov	r2, r3
 800e412:	f04f 0300 	mov.w	r3, #0
 800e416:	6213      	str	r3, [r2, #32]
	LastReadFlowValue=0;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e41e:	461a      	mov	r2, r3
 800e420:	f04f 0300 	mov.w	r3, #0
 800e424:	61d3      	str	r3, [r2, #28]
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800e426:	2300      	movs	r3, #0
 800e428:	60fb      	str	r3, [r7, #12]
 800e42a:	e009      	b.n	800e440 <_ZN8LoadCell11ClearParamsEv+0x90>
		VolumeSamples[i]=0;
 800e42c:	4a14      	ldr	r2, [pc, #80]	@ (800e480 <_ZN8LoadCell11ClearParamsEv+0xd0>)
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	4413      	add	r3, r2
 800e434:	f04f 0200 	mov.w	r2, #0
 800e438:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	3301      	adds	r3, #1
 800e43e:	60fb      	str	r3, [r7, #12]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2b0a      	cmp	r3, #10
 800e444:	ddf2      	ble.n	800e42c <_ZN8LoadCell11ClearParamsEv+0x7c>
	}
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800e446:	2300      	movs	r3, #0
 800e448:	60bb      	str	r3, [r7, #8]
 800e44a:	e009      	b.n	800e460 <_ZN8LoadCell11ClearParamsEv+0xb0>
		FlowSamples[i]=0;
 800e44c:	4a0d      	ldr	r2, [pc, #52]	@ (800e484 <_ZN8LoadCell11ClearParamsEv+0xd4>)
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	4413      	add	r3, r2
 800e454:	f04f 0200 	mov.w	r2, #0
 800e458:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	3301      	adds	r3, #1
 800e45e:	60bb      	str	r3, [r7, #8]
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	2b04      	cmp	r3, #4
 800e464:	ddf2      	ble.n	800e44c <_ZN8LoadCell11ClearParamsEv+0x9c>
	}
	FlowIndex=0;
 800e466:	4b08      	ldr	r3, [pc, #32]	@ (800e488 <_ZN8LoadCell11ClearParamsEv+0xd8>)
 800e468:	2200      	movs	r2, #0
 800e46a:	701a      	strb	r2, [r3, #0]
	VolumeIndex=0;
 800e46c:	4b07      	ldr	r3, [pc, #28]	@ (800e48c <_ZN8LoadCell11ClearParamsEv+0xdc>)
 800e46e:	2200      	movs	r2, #0
 800e470:	701a      	strb	r2, [r3, #0]
}
 800e472:	bf00      	nop
 800e474:	3714      	adds	r7, #20
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr
 800e47e:	bf00      	nop
 800e480:	20000010 	.word	0x20000010
 800e484:	2000003c 	.word	0x2000003c
 800e488:	20004ee8 	.word	0x20004ee8
 800e48c:	20004ee9 	.word	0x20004ee9

0800e490 <_ZN8LoadCell10WriteToSPIEtt>:

void LoadCell::WriteToSPI(uint16_t SPIAddress, uint16_t value){
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	460b      	mov	r3, r1
 800e49a:	807b      	strh	r3, [r7, #2]
 800e49c:	4613      	mov	r3, r2
 800e49e:	803b      	strh	r3, [r7, #0]

	uint8_t data[2];
	data[0] = SPIAddress;
 800e4a0:	887b      	ldrh	r3, [r7, #2]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 800e4a6:	883b      	ldrh	r3, [r7, #0]
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e4b2:	480a      	ldr	r0, [pc, #40]	@ (800e4dc <_ZN8LoadCell10WriteToSPIEtt+0x4c>)
 800e4b4:	f7f4 fdae 	bl	8003014 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(LOAD_CELL_SPI_CHANNEL, data, 2, 100);
 800e4b8:	f107 010c 	add.w	r1, r7, #12
 800e4bc:	2364      	movs	r3, #100	@ 0x64
 800e4be:	2202      	movs	r2, #2
 800e4c0:	4807      	ldr	r0, [pc, #28]	@ (800e4e0 <_ZN8LoadCell10WriteToSPIEtt+0x50>)
 800e4c2:	f7f5 faa2 	bl	8003a0a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e4cc:	4803      	ldr	r0, [pc, #12]	@ (800e4dc <_ZN8LoadCell10WriteToSPIEtt+0x4c>)
 800e4ce:	f7f4 fda1 	bl	8003014 <HAL_GPIO_WritePin>
}
 800e4d2:	bf00      	nop
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	40020000 	.word	0x40020000
 800e4e0:	20000180 	.word	0x20000180

0800e4e4 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>:
		}
	}
    return (sum==0)?0:sum / cnt;
}

float32_t LoadCell::ExponantialSmoothingFilter(float32_t alpha,float32_t value,float32_t lastValue){
 800e4e4:	b480      	push	{r7}
 800e4e6:	b087      	sub	sp, #28
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	ed87 0a02 	vstr	s0, [r7, #8]
 800e4f0:	edc7 0a01 	vstr	s1, [r7, #4]
 800e4f4:	ed87 1a00 	vstr	s2, [r7]
    float forecast = alpha * value + (1 - alpha) * lastValue;
 800e4f8:	ed97 7a02 	vldr	s14, [r7, #8]
 800e4fc:	edd7 7a01 	vldr	s15, [r7, #4]
 800e500:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e504:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e508:	edd7 7a02 	vldr	s15, [r7, #8]
 800e50c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e510:	edd7 7a00 	vldr	s15, [r7]
 800e514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e51c:	edc7 7a05 	vstr	s15, [r7, #20]
    return forecast;
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	ee07 3a90 	vmov	s15, r3
}
 800e526:	eeb0 0a67 	vmov.f32	s0, s15
 800e52a:	371c      	adds	r7, #28
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <_ZN8LoadCell12ClearSamplesEv>:
void LoadCell::ClearSamples(){
 800e534:	b480      	push	{r7}
 800e536:	b085      	sub	sp, #20
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800e53c:	2300      	movs	r3, #0
 800e53e:	60fb      	str	r3, [r7, #12]
 800e540:	e008      	b.n	800e554 <_ZN8LoadCell12ClearSamplesEv+0x20>
		FlowSamples[i]=-1;
 800e542:	4a13      	ldr	r2, [pc, #76]	@ (800e590 <_ZN8LoadCell12ClearSamplesEv+0x5c>)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	4413      	add	r3, r2
 800e54a:	4a12      	ldr	r2, [pc, #72]	@ (800e594 <_ZN8LoadCell12ClearSamplesEv+0x60>)
 800e54c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FLOW_WINDOW_SIZE; ++i) {
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	3301      	adds	r3, #1
 800e552:	60fb      	str	r3, [r7, #12]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2b04      	cmp	r3, #4
 800e558:	ddf3      	ble.n	800e542 <_ZN8LoadCell12ClearSamplesEv+0xe>
	}
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800e55a:	2300      	movs	r3, #0
 800e55c:	60bb      	str	r3, [r7, #8]
 800e55e:	e008      	b.n	800e572 <_ZN8LoadCell12ClearSamplesEv+0x3e>
		VolumeSamples[i]=-1;
 800e560:	4a0d      	ldr	r2, [pc, #52]	@ (800e598 <_ZN8LoadCell12ClearSamplesEv+0x64>)
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	4413      	add	r3, r2
 800e568:	4a0a      	ldr	r2, [pc, #40]	@ (800e594 <_ZN8LoadCell12ClearSamplesEv+0x60>)
 800e56a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < VOLUME_WINDOW_SIZE; ++i) {
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	3301      	adds	r3, #1
 800e570:	60bb      	str	r3, [r7, #8]
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	2b0a      	cmp	r3, #10
 800e576:	ddf3      	ble.n	800e560 <_ZN8LoadCell12ClearSamplesEv+0x2c>
	}
	VolumeIndex=0;
 800e578:	4b08      	ldr	r3, [pc, #32]	@ (800e59c <_ZN8LoadCell12ClearSamplesEv+0x68>)
 800e57a:	2200      	movs	r2, #0
 800e57c:	701a      	strb	r2, [r3, #0]
	FlowIndex=0;
 800e57e:	4b08      	ldr	r3, [pc, #32]	@ (800e5a0 <_ZN8LoadCell12ClearSamplesEv+0x6c>)
 800e580:	2200      	movs	r2, #0
 800e582:	701a      	strb	r2, [r3, #0]

}
 800e584:	bf00      	nop
 800e586:	3714      	adds	r7, #20
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr
 800e590:	2000003c 	.word	0x2000003c
 800e594:	bf800000 	.word	0xbf800000
 800e598:	20000010 	.word	0x20000010
 800e59c:	20004ee9 	.word	0x20004ee9
 800e5a0:	20004ee8 	.word	0x20004ee8

0800e5a4 <_Z41__static_initialization_and_destruction_0ii>:
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d10d      	bne.n	800e5d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d108      	bne.n	800e5d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
Filter FilterInstance;
 800e5be:	480c      	ldr	r0, [pc, #48]	@ (800e5f0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800e5c0:	f7fd fcac 	bl	800bf1c <_ZN6FilterC1Ev>
VolumeFilterStruct VolumeFilter;
 800e5c4:	480b      	ldr	r0, [pc, #44]	@ (800e5f4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800e5c6:	f7ff f999 	bl	800d8fc <_ZN18VolumeFilterStructC1Ev>
FlowFilterStruct FlowFilter;
 800e5ca:	480b      	ldr	r0, [pc, #44]	@ (800e5f8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800e5cc:	f7ff f9a5 	bl	800d91a <_ZN16FlowFilterStructC1Ev>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d107      	bne.n	800e5e6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d102      	bne.n	800e5e6 <_Z41__static_initialization_and_destruction_0ii+0x42>
Filter FilterInstance;
 800e5e0:	4803      	ldr	r0, [pc, #12]	@ (800e5f0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800e5e2:	f7fd fcab 	bl	800bf3c <_ZN6FilterD1Ev>
}
 800e5e6:	bf00      	nop
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	20004eec 	.word	0x20004eec
 800e5f4:	20004ef0 	.word	0x20004ef0
 800e5f8:	20004fc4 	.word	0x20004fc4

0800e5fc <_GLOBAL__sub_I_VolumeSamples>:
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e604:	2001      	movs	r0, #1
 800e606:	f7ff ffcd 	bl	800e5a4 <_Z41__static_initialization_and_destruction_0ii>
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <_GLOBAL__sub_D_VolumeSamples>:
 800e60c:	b580      	push	{r7, lr}
 800e60e:	af00      	add	r7, sp, #0
 800e610:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e614:	2000      	movs	r0, #0
 800e616:	f7ff ffc5 	bl	800e5a4 <_Z41__static_initialization_and_destruction_0ii>
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <_ZN18SystemConfigStructC1Ev>:
	uint8_t VolumeCalibrationSampleCount=100;
	uint8_t FlowCalibrationSampleCount=100;
	uint8_t MinimumFlowSensiblity=0;
	uint8_t WaitAfterProcessSeconds=0;
	bool IsInternalClean=false;
} SystemConfigStruct;
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2214      	movs	r2, #20
 800e628:	701a      	strb	r2, [r3, #0]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2228      	movs	r2, #40	@ 0x28
 800e62e:	705a      	strb	r2, [r3, #1]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2228      	movs	r2, #40	@ 0x28
 800e634:	709a      	strb	r2, [r3, #2]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	220a      	movs	r2, #10
 800e63a:	70da      	strb	r2, [r3, #3]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2228      	movs	r2, #40	@ 0x28
 800e640:	711a      	strb	r2, [r3, #4]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	221e      	movs	r2, #30
 800e646:	715a      	strb	r2, [r3, #5]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	221e      	movs	r2, #30
 800e64c:	719a      	strb	r2, [r3, #6]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800e654:	811a      	strh	r2, [r3, #8]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800e65c:	815a      	strh	r2, [r3, #10]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800e664:	819a      	strh	r2, [r3, #12]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800e66c:	81da      	strh	r2, [r3, #14]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800e674:	821a      	strh	r2, [r3, #16]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800e67c:	825a      	strh	r2, [r3, #18]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2200      	movs	r2, #0
 800e682:	615a      	str	r2, [r3, #20]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	619a      	str	r2, [r3, #24]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e690:	61da      	str	r2, [r3, #28]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e698:	621a      	str	r2, [r3, #32]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e6a0:	625a      	str	r2, [r3, #36]	@ 0x24
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e6a8:	629a      	str	r2, [r3, #40]	@ 0x28
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	220a      	movs	r2, #10
 800e6ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	631a      	str	r2, [r3, #48]	@ 0x30
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	222c      	movs	r2, #44	@ 0x2c
 800e6d2:	665a      	str	r2, [r3, #100]	@ 0x64
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2264      	movs	r2, #100	@ 0x64
 800e6ee:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2264      	movs	r2, #100	@ 0x64
 800e6f6:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2264      	movs	r2, #100	@ 0x64
 800e6fe:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2200      	movs	r2, #0
 800e716:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	4618      	mov	r0, r3
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr

0800e728 <_ZN12FlashManagerC1ERKS_>:
class FlashManager {
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
 800e732:	4a25      	ldr	r2, [pc, #148]	@ (800e7c8 <_ZN12FlashManagerC1ERKS_+0xa0>)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	601a      	str	r2, [r3, #0]
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	685a      	ldr	r2, [r3, #4]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	605a      	str	r2, [r3, #4]
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	689a      	ldr	r2, [r3, #8]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	609a      	str	r2, [r3, #8]
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	7b1a      	ldrb	r2, [r3, #12]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	731a      	strb	r2, [r3, #12]
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	7b5a      	ldrb	r2, [r3, #13]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	735a      	strb	r2, [r3, #13]
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	7b9a      	ldrb	r2, [r3, #14]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	739a      	strb	r2, [r3, #14]
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	7bda      	ldrb	r2, [r3, #15]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	73da      	strb	r2, [r3, #15]
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	7c1a      	ldrb	r2, [r3, #16]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	741a      	strb	r2, [r3, #16]
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	7c5a      	ldrb	r2, [r3, #17]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	745a      	strb	r2, [r3, #17]
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	7c9a      	ldrb	r2, [r3, #18]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	749a      	strb	r2, [r3, #18]
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	7cda      	ldrb	r2, [r3, #19]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	74da      	strb	r2, [r3, #19]
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	7d1a      	ldrb	r2, [r3, #20]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	751a      	strb	r2, [r3, #20]
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	7d5a      	ldrb	r2, [r3, #21]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	755a      	strb	r2, [r3, #21]
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	7d9a      	ldrb	r2, [r3, #22]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	759a      	strb	r2, [r3, #22]
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	7dda      	ldrb	r2, [r3, #23]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	75da      	strb	r2, [r3, #23]
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	7e1a      	ldrb	r2, [r3, #24]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	761a      	strb	r2, [r3, #24]
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	7e5a      	ldrb	r2, [r3, #25]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	765a      	strb	r2, [r3, #25]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	370c      	adds	r7, #12
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop
 800e7c8:	08011c60 	.word	0x08011c60

0800e7cc <SetupOS>:
/* Definitions for CommunicationSemaphoreHandle */
const osSemaphoreAttr_t communicationSemaphore_attributes = {
  .name = "CommunicationSemaphoreHandle"
};

void SetupOS(void){
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b088      	sub	sp, #32
 800e7d0:	af00      	add	r7, sp, #0
	EmgInstance.FirstEmgSetup();
 800e7d2:	480f      	ldr	r0, [pc, #60]	@ (800e810 <SetupOS+0x44>)
 800e7d4:	f7fd f996 	bl	800bb04 <_ZN3Emg13FirstEmgSetupEv>
	EmgInstance.SecondEmgSetup();
 800e7d8:	480d      	ldr	r0, [pc, #52]	@ (800e810 <SetupOS+0x44>)
 800e7da:	f7fd f9b4 	bl	800bb46 <_ZN3Emg14SecondEmgSetupEv>
	LoadCellInstance.Setup();
 800e7de:	480d      	ldr	r0, [pc, #52]	@ (800e814 <SetupOS+0x48>)
 800e7e0:	f7ff f8db 	bl	800d99a <_ZN8LoadCell5SetupEv>
	FlashInitialize();
 800e7e4:	f000 f93a 	bl	800ea5c <FlashInitialize>
	CommunicationInstance.SetFlashManager(FlashManagerInstance);
 800e7e8:	1d3b      	adds	r3, r7, #4
 800e7ea:	490b      	ldr	r1, [pc, #44]	@ (800e818 <SetupOS+0x4c>)
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7ff ff9b 	bl	800e728 <_ZN12FlashManagerC1ERKS_>
 800e7f2:	1d3b      	adds	r3, r7, #4
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	4809      	ldr	r0, [pc, #36]	@ (800e81c <SetupOS+0x50>)
 800e7f8:	f7fd f83c 	bl	800b874 <_ZN13Communication15SetFlashManagerE12FlashManager>
 800e7fc:	1d3b      	adds	r3, r7, #4
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7fd fca4 	bl	800c14c <_ZN12FlashManagerD1Ev>
	osKernelInitialize();
 800e804:	f7f8 f80c 	bl	8006820 <osKernelInitialize>
}
 800e808:	bf00      	nop
 800e80a:	3720      	adds	r7, #32
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	20005080 	.word	0x20005080
 800e814:	200070c4 	.word	0x200070c4
 800e818:	2000911c 	.word	0x2000911c
 800e81c:	200090fc 	.word	0x200090fc

0800e820 <_Z14UpdatePriorityv>:

void UpdatePriority(void){
 800e820:	b580      	push	{r7, lr}
 800e822:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 800e824:	4865      	ldr	r0, [pc, #404]	@ (800e9bc <_Z14UpdatePriorityv+0x19c>)
 800e826:	f7f6 fb83 	bl	8004f30 <HAL_TIM_Base_Start_IT>
	ThreadStorage.FirstEmgThreadAttr=normalPriority;
 800e82a:	4b65      	ldr	r3, [pc, #404]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e82c:	3310      	adds	r3, #16
 800e82e:	2224      	movs	r2, #36	@ 0x24
 800e830:	2100      	movs	r1, #0
 800e832:	4618      	mov	r0, r3
 800e834:	f002 fb8d 	bl	8010f52 <memset>
 800e838:	4b61      	ldr	r3, [pc, #388]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e83a:	4a62      	ldr	r2, [pc, #392]	@ (800e9c4 <_Z14UpdatePriorityv+0x1a4>)
 800e83c:	611a      	str	r2, [r3, #16]
 800e83e:	4b60      	ldr	r3, [pc, #384]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e844:	625a      	str	r2, [r3, #36]	@ 0x24
 800e846:	4b5e      	ldr	r3, [pc, #376]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e848:	2218      	movs	r2, #24
 800e84a:	629a      	str	r2, [r3, #40]	@ 0x28
	ThreadStorage.SecondEmgThreadAttr=normalPriority;
 800e84c:	4b5c      	ldr	r3, [pc, #368]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e84e:	3334      	adds	r3, #52	@ 0x34
 800e850:	2224      	movs	r2, #36	@ 0x24
 800e852:	2100      	movs	r1, #0
 800e854:	4618      	mov	r0, r3
 800e856:	f002 fb7c 	bl	8010f52 <memset>
 800e85a:	4b59      	ldr	r3, [pc, #356]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e85c:	4a59      	ldr	r2, [pc, #356]	@ (800e9c4 <_Z14UpdatePriorityv+0x1a4>)
 800e85e:	635a      	str	r2, [r3, #52]	@ 0x34
 800e860:	4b57      	ldr	r3, [pc, #348]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e866:	649a      	str	r2, [r3, #72]	@ 0x48
 800e868:	4b55      	ldr	r3, [pc, #340]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e86a:	2218      	movs	r2, #24
 800e86c:	64da      	str	r2, [r3, #76]	@ 0x4c
	ThreadStorage.FlowThreadAttr=normalPriority;
 800e86e:	4b54      	ldr	r3, [pc, #336]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e870:	33b0      	adds	r3, #176	@ 0xb0
 800e872:	2224      	movs	r2, #36	@ 0x24
 800e874:	2100      	movs	r1, #0
 800e876:	4618      	mov	r0, r3
 800e878:	f002 fb6b 	bl	8010f52 <memset>
 800e87c:	4b50      	ldr	r3, [pc, #320]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e87e:	4a51      	ldr	r2, [pc, #324]	@ (800e9c4 <_Z14UpdatePriorityv+0x1a4>)
 800e880:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800e884:	4b4e      	ldr	r3, [pc, #312]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e886:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e88a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 800e88e:	4b4c      	ldr	r3, [pc, #304]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e890:	2218      	movs	r2, #24
 800e892:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	ThreadStorage.VolumeThreadAttr=normalPriority;
 800e896:	4b4a      	ldr	r3, [pc, #296]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e898:	338c      	adds	r3, #140	@ 0x8c
 800e89a:	2224      	movs	r2, #36	@ 0x24
 800e89c:	2100      	movs	r1, #0
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f002 fb57 	bl	8010f52 <memset>
 800e8a4:	4b46      	ldr	r3, [pc, #280]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e8a6:	4a47      	ldr	r2, [pc, #284]	@ (800e9c4 <_Z14UpdatePriorityv+0x1a4>)
 800e8a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800e8ac:	4b44      	ldr	r3, [pc, #272]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e8ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800e8b6:	4b42      	ldr	r3, [pc, #264]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e8b8:	2218      	movs	r2, #24
 800e8ba:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	ThreadStorage.PumpMaxRunThreadAttr=normalPriority;
 800e8be:	4b40      	ldr	r3, [pc, #256]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e8c0:	33d4      	adds	r3, #212	@ 0xd4
 800e8c2:	2224      	movs	r2, #36	@ 0x24
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f002 fb43 	bl	8010f52 <memset>
 800e8cc:	4b3c      	ldr	r3, [pc, #240]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e8ce:	4a3d      	ldr	r2, [pc, #244]	@ (800e9c4 <_Z14UpdatePriorityv+0x1a4>)
 800e8d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800e8d4:	4b3a      	ldr	r3, [pc, #232]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e8d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8da:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800e8de:	4b38      	ldr	r3, [pc, #224]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e8e0:	2218      	movs	r2, #24
 800e8e2:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	ThreadStorage.ValveMaxRunThreadAttr=normalPriority;
 800e8e6:	4b36      	ldr	r3, [pc, #216]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e8e8:	33f8      	adds	r3, #248	@ 0xf8
 800e8ea:	2224      	movs	r2, #36	@ 0x24
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f002 fb2f 	bl	8010f52 <memset>
 800e8f4:	4b32      	ldr	r3, [pc, #200]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e8f6:	4a33      	ldr	r2, [pc, #204]	@ (800e9c4 <_Z14UpdatePriorityv+0x1a4>)
 800e8f8:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 800e8fc:	4b30      	ldr	r3, [pc, #192]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e8fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e902:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800e906:	4b2e      	ldr	r3, [pc, #184]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e908:	2218      	movs	r2, #24
 800e90a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	ThreadStorage.CalibrationFlowThreadAttr=normalPriority;
 800e90e:	4b2c      	ldr	r3, [pc, #176]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e910:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e914:	2224      	movs	r2, #36	@ 0x24
 800e916:	2100      	movs	r1, #0
 800e918:	4618      	mov	r0, r3
 800e91a:	f002 fb1a 	bl	8010f52 <memset>
 800e91e:	4b28      	ldr	r3, [pc, #160]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e920:	4a28      	ldr	r2, [pc, #160]	@ (800e9c4 <_Z14UpdatePriorityv+0x1a4>)
 800e922:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 800e926:	4b26      	ldr	r3, [pc, #152]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e928:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e92c:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 800e930:	4b23      	ldr	r3, [pc, #140]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e932:	2218      	movs	r2, #24
 800e934:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
	ThreadStorage.CalibrationVolumeThreadAttr=normalPriority;
 800e938:	4b21      	ldr	r3, [pc, #132]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e93a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800e93e:	2224      	movs	r2, #36	@ 0x24
 800e940:	2100      	movs	r1, #0
 800e942:	4618      	mov	r0, r3
 800e944:	f002 fb05 	bl	8010f52 <memset>
 800e948:	4b1d      	ldr	r3, [pc, #116]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e94a:	4a1e      	ldr	r2, [pc, #120]	@ (800e9c4 <_Z14UpdatePriorityv+0x1a4>)
 800e94c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800e950:	4b1b      	ldr	r3, [pc, #108]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e956:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 800e95a:	4b19      	ldr	r3, [pc, #100]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e95c:	2218      	movs	r2, #24
 800e95e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	ThreadStorage.CleanThreadAttr=normalPriority;
 800e962:	4b17      	ldr	r3, [pc, #92]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e964:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800e968:	2224      	movs	r2, #36	@ 0x24
 800e96a:	2100      	movs	r1, #0
 800e96c:	4618      	mov	r0, r3
 800e96e:	f002 faf0 	bl	8010f52 <memset>
 800e972:	4b13      	ldr	r3, [pc, #76]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e974:	4a13      	ldr	r2, [pc, #76]	@ (800e9c4 <_Z14UpdatePriorityv+0x1a4>)
 800e976:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 800e97a:	4b11      	ldr	r3, [pc, #68]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e97c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e980:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 800e984:	4b0e      	ldr	r3, [pc, #56]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e986:	2218      	movs	r2, #24
 800e988:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
	ThreadStorage.SafeModeThreadAttr=normalPriority;
 800e98c:	4b0c      	ldr	r3, [pc, #48]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e98e:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800e992:	2224      	movs	r2, #36	@ 0x24
 800e994:	2100      	movs	r1, #0
 800e996:	4618      	mov	r0, r3
 800e998:	f002 fadb 	bl	8010f52 <memset>
 800e99c:	4b08      	ldr	r3, [pc, #32]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e99e:	4a09      	ldr	r2, [pc, #36]	@ (800e9c4 <_Z14UpdatePriorityv+0x1a4>)
 800e9a0:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 800e9a4:	4b06      	ldr	r3, [pc, #24]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e9a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9aa:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
 800e9ae:	4b04      	ldr	r3, [pc, #16]	@ (800e9c0 <_Z14UpdatePriorityv+0x1a0>)
 800e9b0:	2218      	movs	r2, #24
 800e9b2:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
}
 800e9b6:	bf00      	nop
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	20000418 	.word	0x20000418
 800e9c0:	20009138 	.word	0x20009138
 800e9c4:	08011b68 	.word	0x08011b68

0800e9c8 <StartOS>:

void StartOS(void){
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
	UpdatePriority();
 800e9ce:	f7ff ff27 	bl	800e820 <_Z14UpdatePriorityv>
		uartData[0]=(cnt & 0xFF00)>>8;
		uartData[1]=(cnt & 0x00FF);
		WriteUart(uartData, 2);
	}
	*/
	HAL_Delay( 1000 );
 800e9d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e9d6:	f7f3 f957 	bl	8001c88 <HAL_Delay>
   	uint8_t data[4];
   	data[0]=HasCalibration();//HasCalibration
 800e9da:	f001 ff59 	bl	8010890 <HasCalibration>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	713b      	strb	r3, [r7, #4]
   	data[1]=HasLoadcell(true);//HasLoadcell
 800e9e2:	2001      	movs	r0, #1
 800e9e4:	f001 ff74 	bl	80108d0 <HasLoadcell>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	717b      	strb	r3, [r7, #5]
   	data[2]=HasFirstEmg(true);//HasFirstEmg
 800e9ec:	2001      	movs	r0, #1
 800e9ee:	f001 ff97 	bl	8010920 <HasFirstEmg>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	71bb      	strb	r3, [r7, #6]
   	data[3]=HasSecondEmg(true);//HasSecondEmg
 800e9f6:	2001      	movs	r0, #1
 800e9f8:	f001 ffb2 	bl	8010960 <HasSecondEmg>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	71fb      	strb	r3, [r7, #7]
	SuccessDataResult(0, SuccessDataType::SD_Start, data, 4);
 800ea00:	1d3a      	adds	r2, r7, #4
 800ea02:	2304      	movs	r3, #4
 800ea04:	21ff      	movs	r1, #255	@ 0xff
 800ea06:	2000      	movs	r0, #0
 800ea08:	f000 f947 	bl	800ec9a <SuccessDataResult>
	SendFeedback(0,0,0);
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	2100      	movs	r1, #0
 800ea10:	2000      	movs	r0, #0
 800ea12:	f000 f919 	bl	800ec48 <SendFeedback>

	ThreadStorage.ReadUARTThreadId=osThreadNew(StartReadUARTTask, NULL, &highPriority);
 800ea16:	4a08      	ldr	r2, [pc, #32]	@ (800ea38 <StartOS+0x70>)
 800ea18:	2100      	movs	r1, #0
 800ea1a:	4808      	ldr	r0, [pc, #32]	@ (800ea3c <StartOS+0x74>)
 800ea1c:	f7f7 ff4a 	bl	80068b4 <osThreadNew>
 800ea20:	4603      	mov	r3, r0
 800ea22:	4a07      	ldr	r2, [pc, #28]	@ (800ea40 <StartOS+0x78>)
 800ea24:	6053      	str	r3, [r2, #4]
	osKernelStart();
 800ea26:	f7f7 ff1f 	bl	8006868 <osKernelStart>
    HAL_NVIC_SystemReset();
 800ea2a:	f7f3 fa6c 	bl	8001f06 <HAL_NVIC_SystemReset>
}
 800ea2e:	bf00      	nop
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	08011c9c 	.word	0x08011c9c
 800ea3c:	0800edcd 	.word	0x0800edcd
 800ea40:	20009138 	.word	0x20009138

0800ea44 <HardReset>:

void HardReset(void){
 800ea44:	b580      	push	{r7, lr}
 800ea46:	af00      	add	r7, sp, #0
	FlashManagerInstance.HardReset(true);
 800ea48:	2101      	movs	r1, #1
 800ea4a:	4803      	ldr	r0, [pc, #12]	@ (800ea58 <HardReset+0x14>)
 800ea4c:	f7fd fbba 	bl	800c1c4 <_ZN12FlashManager9HardResetEb>
    HAL_NVIC_SystemReset();
 800ea50:	f7f3 fa59 	bl	8001f06 <HAL_NVIC_SystemReset>
}
 800ea54:	bf00      	nop
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	2000911c 	.word	0x2000911c

0800ea5c <FlashInitialize>:
void FlashInitialize(void){
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	af00      	add	r7, sp, #0
	if(!FlashManagerInstance.IsSetup()){
 800ea60:	4877      	ldr	r0, [pc, #476]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ea62:	f7fd fcbd 	bl	800c3e0 <_ZN12FlashManager7IsSetupEv>
 800ea66:	4603      	mov	r3, r0
 800ea68:	f083 0301 	eor.w	r3, r3, #1
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d065      	beq.n	800eb3e <FlashInitialize+0xe2>
		FlashManagerInstance.WriteSendPerSecond(SystemConfig.SendPerSecond);
 800ea72:	4b74      	ldr	r3, [pc, #464]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	4619      	mov	r1, r3
 800ea78:	4871      	ldr	r0, [pc, #452]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ea7a:	f7fd fd0b 	bl	800c494 <_ZN12FlashManager18WriteSendPerSecondEh>
		FlashManagerInstance.WriteFirstEmgPerSecond(SystemConfig.FirstEmgPerSecond);
 800ea7e:	4b71      	ldr	r3, [pc, #452]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ea80:	785b      	ldrb	r3, [r3, #1]
 800ea82:	4619      	mov	r1, r3
 800ea84:	486e      	ldr	r0, [pc, #440]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ea86:	f7fd fda1 	bl	800c5cc <_ZN12FlashManager22WriteFirstEmgPerSecondEh>
		FlashManagerInstance.WriteSecondEmgPerSecond(SystemConfig.SecondEmgPerSecond);
 800ea8a:	4b6e      	ldr	r3, [pc, #440]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ea8c:	789b      	ldrb	r3, [r3, #2]
 800ea8e:	4619      	mov	r1, r3
 800ea90:	486b      	ldr	r0, [pc, #428]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ea92:	f7fd fe37 	bl	800c704 <_ZN12FlashManager23WriteSecondEmgPerSecondEh>
		FlashManagerInstance.WriteVolumePerSecond(SystemConfig.VolumePerSecond);
 800ea96:	4b6b      	ldr	r3, [pc, #428]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ea98:	78db      	ldrb	r3, [r3, #3]
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	4868      	ldr	r0, [pc, #416]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ea9e:	f7fd fecd 	bl	800c83c <_ZN12FlashManager20WriteVolumePerSecondEh>
		FlashManagerInstance.WriteFlowPerSecond(SystemConfig.FlowPerSecond);
 800eaa2:	4b68      	ldr	r3, [pc, #416]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eaa4:	791b      	ldrb	r3, [r3, #4]
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	4865      	ldr	r0, [pc, #404]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eaaa:	f7fd ff63 	bl	800c974 <_ZN12FlashManager18WriteFlowPerSecondEh>
		FlashManagerInstance.WritePumpMaxRunTime(SystemConfig.PumpMaxRunSecond);
 800eaae:	4b65      	ldr	r3, [pc, #404]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eab0:	795b      	ldrb	r3, [r3, #5]
 800eab2:	4619      	mov	r1, r3
 800eab4:	4862      	ldr	r0, [pc, #392]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eab6:	f7fd fff9 	bl	800caac <_ZN12FlashManager19WritePumpMaxRunTimeEh>
		FlashManagerInstance.WriteValveMaxRunTime(SystemConfig.ValveMaxRunSecond);
 800eaba:	4b62      	ldr	r3, [pc, #392]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eabc:	799b      	ldrb	r3, [r3, #6]
 800eabe:	4619      	mov	r1, r3
 800eac0:	485f      	ldr	r0, [pc, #380]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eac2:	f7fe f88f 	bl	800cbe4 <_ZN12FlashManager20WriteValveMaxRunTimeEh>
		FlashManagerInstance.WriteFlowRate(SystemConfig.FlowRate);
 800eac6:	4b5f      	ldr	r3, [pc, #380]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eac8:	6a1b      	ldr	r3, [r3, #32]
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7f1 fd34 	bl	8000538 <__aeabi_f2d>
 800ead0:	4602      	mov	r2, r0
 800ead2:	460b      	mov	r3, r1
 800ead4:	ec43 2b10 	vmov	d0, r2, r3
 800ead8:	4859      	ldr	r0, [pc, #356]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eada:	f7fe f91f 	bl	800cd1c <_ZN12FlashManager13WriteFlowRateEd>
		FlashManagerInstance.WriteVolumeRate(SystemConfig.VolumeRate);
 800eade:	4b59      	ldr	r3, [pc, #356]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eae0:	69db      	ldr	r3, [r3, #28]
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7f1 fd28 	bl	8000538 <__aeabi_f2d>
 800eae8:	4602      	mov	r2, r0
 800eaea:	460b      	mov	r3, r1
 800eaec:	ec43 2b10 	vmov	d0, r2, r3
 800eaf0:	4853      	ldr	r0, [pc, #332]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eaf2:	f7fe f9ad 	bl	800ce50 <_ZN12FlashManager15WriteVolumeRateEd>
		FlashManagerInstance.WriteFlowAverage(SystemConfig.FlowAverage);
 800eaf6:	4b53      	ldr	r3, [pc, #332]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eaf8:	695b      	ldr	r3, [r3, #20]
 800eafa:	4619      	mov	r1, r3
 800eafc:	4850      	ldr	r0, [pc, #320]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eafe:	f7fe fad4 	bl	800d0aa <_ZN12FlashManager16WriteFlowAverageEm>
		FlashManagerInstance.WriteVolumeAverage(SystemConfig.VolumeAverage);
 800eb02:	4b50      	ldr	r3, [pc, #320]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb04:	699b      	ldr	r3, [r3, #24]
 800eb06:	4619      	mov	r1, r3
 800eb08:	484d      	ldr	r0, [pc, #308]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eb0a:	f7fe fa3b 	bl	800cf84 <_ZN12FlashManager18WriteVolumeAverageEm>
		FlashManagerInstance.WriteFirstEmgData(
 800eb0e:	4b4d      	ldr	r3, [pc, #308]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb10:	8919      	ldrh	r1, [r3, #8]
 800eb12:	4b4c      	ldr	r3, [pc, #304]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb14:	895a      	ldrh	r2, [r3, #10]
 800eb16:	4b4b      	ldr	r3, [pc, #300]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb18:	899b      	ldrh	r3, [r3, #12]
 800eb1a:	4849      	ldr	r0, [pc, #292]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eb1c:	f7fe fb58 	bl	800d1d0 <_ZN12FlashManager17WriteFirstEmgDataEttt>
				SystemConfig.FirstEmgMaxTrim,
				SystemConfig.FirstEmgZeroMaxTrim,
				SystemConfig.FirstEmgZeroMinTrim);
		FlashManagerInstance.WriteSecondEmgData(
 800eb20:	4b48      	ldr	r3, [pc, #288]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb22:	89d9      	ldrh	r1, [r3, #14]
 800eb24:	4b47      	ldr	r3, [pc, #284]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb26:	8a1a      	ldrh	r2, [r3, #16]
 800eb28:	4b46      	ldr	r3, [pc, #280]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb2a:	8a5b      	ldrh	r3, [r3, #18]
 800eb2c:	4844      	ldr	r0, [pc, #272]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eb2e:	f7fe fd0a 	bl	800d546 <_ZN12FlashManager18WriteSecondEmgDataEttt>
				SystemConfig.SecondEmgMaxTrim,
				SystemConfig.SecondEmgZeroMaxTrim,
				SystemConfig.SecondEmgZeroMinTrim);
		FlashManagerInstance.Setup();
 800eb32:	4843      	ldr	r0, [pc, #268]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eb34:	f7fd fc0c 	bl	800c350 <_ZN12FlashManager5SetupEv>
		FlashManagerInstance.Update();
 800eb38:	4841      	ldr	r0, [pc, #260]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eb3a:	f7fd fb8f 	bl	800c25c <_ZN12FlashManager6UpdateEv>
	}
	//FlashManagerInstance.WriteFirstEmgData(0,0,0);
	//FlashManagerInstance.WriteSecondEmgData(0,0,0);
	//FlashManagerInstance.Update();
	SystemConfig.SendPerSecond=FlashManagerInstance.ReadSendPerSecond();
 800eb3e:	4840      	ldr	r0, [pc, #256]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eb40:	f7fd fcf2 	bl	800c528 <_ZN12FlashManager17ReadSendPerSecondEv>
 800eb44:	4603      	mov	r3, r0
 800eb46:	461a      	mov	r2, r3
 800eb48:	4b3e      	ldr	r3, [pc, #248]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb4a:	701a      	strb	r2, [r3, #0]
	SystemConfig.FirstEmgPerSecond=FlashManagerInstance.ReadFirstEmgPerSecond();
 800eb4c:	483c      	ldr	r0, [pc, #240]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eb4e:	f7fd fd87 	bl	800c660 <_ZN12FlashManager21ReadFirstEmgPerSecondEv>
 800eb52:	4603      	mov	r3, r0
 800eb54:	461a      	mov	r2, r3
 800eb56:	4b3b      	ldr	r3, [pc, #236]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb58:	705a      	strb	r2, [r3, #1]
	SystemConfig.SecondEmgPerSecond=FlashManagerInstance.ReadSecondEmgPerSecond();
 800eb5a:	4839      	ldr	r0, [pc, #228]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eb5c:	f7fd fe1c 	bl	800c798 <_ZN12FlashManager22ReadSecondEmgPerSecondEv>
 800eb60:	4603      	mov	r3, r0
 800eb62:	461a      	mov	r2, r3
 800eb64:	4b37      	ldr	r3, [pc, #220]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb66:	709a      	strb	r2, [r3, #2]
	SystemConfig.VolumePerSecond=FlashManagerInstance.ReadVolumePerSecond();
 800eb68:	4835      	ldr	r0, [pc, #212]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eb6a:	f7fd feb1 	bl	800c8d0 <_ZN12FlashManager19ReadVolumePerSecondEv>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	461a      	mov	r2, r3
 800eb72:	4b34      	ldr	r3, [pc, #208]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb74:	70da      	strb	r2, [r3, #3]
	SystemConfig.FlowPerSecond=FlashManagerInstance.ReadFlowPerSecond();
 800eb76:	4832      	ldr	r0, [pc, #200]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eb78:	f7fd ff46 	bl	800ca08 <_ZN12FlashManager17ReadFlowPerSecondEv>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	461a      	mov	r2, r3
 800eb80:	4b30      	ldr	r3, [pc, #192]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb82:	711a      	strb	r2, [r3, #4]
	SystemConfig.PumpMaxRunSecond=FlashManagerInstance.ReadPumpMaxRunTime();
 800eb84:	482e      	ldr	r0, [pc, #184]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eb86:	f7fd ffdb 	bl	800cb40 <_ZN12FlashManager18ReadPumpMaxRunTimeEv>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	4b2d      	ldr	r3, [pc, #180]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb90:	715a      	strb	r2, [r3, #5]
	SystemConfig.ValveMaxRunSecond=FlashManagerInstance.ReadValveMaxRunTime();
 800eb92:	482b      	ldr	r0, [pc, #172]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eb94:	f7fe f870 	bl	800cc78 <_ZN12FlashManager19ReadValveMaxRunTimeEv>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	4b29      	ldr	r3, [pc, #164]	@ (800ec44 <FlashInitialize+0x1e8>)
 800eb9e:	719a      	strb	r2, [r3, #6]
	SystemConfig.FlowRate=FlashManagerInstance.ReadFlowRate();
 800eba0:	4827      	ldr	r0, [pc, #156]	@ (800ec40 <FlashInitialize+0x1e4>)
 800eba2:	f7fe f8fd 	bl	800cda0 <_ZN12FlashManager12ReadFlowRateEv>
 800eba6:	ec53 2b10 	vmov	r2, r3, d0
 800ebaa:	4610      	mov	r0, r2
 800ebac:	4619      	mov	r1, r3
 800ebae:	f7f1 ff2d 	bl	8000a0c <__aeabi_d2f>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	4a23      	ldr	r2, [pc, #140]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ebb6:	6213      	str	r3, [r2, #32]
	SystemConfig.VolumeRate=FlashManagerInstance.ReadVolumeRate();
 800ebb8:	4821      	ldr	r0, [pc, #132]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ebba:	f7fe f98b 	bl	800ced4 <_ZN12FlashManager14ReadVolumeRateEv>
 800ebbe:	ec53 2b10 	vmov	r2, r3, d0
 800ebc2:	4610      	mov	r0, r2
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	f7f1 ff21 	bl	8000a0c <__aeabi_d2f>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	4a1d      	ldr	r2, [pc, #116]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ebce:	61d3      	str	r3, [r2, #28]
	SystemConfig.FlowAverage=FlashManagerInstance.ReadFlowAverage();
 800ebd0:	481b      	ldr	r0, [pc, #108]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ebd2:	f7fe faab 	bl	800d12c <_ZN12FlashManager15ReadFlowAverageEv>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	4a1a      	ldr	r2, [pc, #104]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ebda:	6153      	str	r3, [r2, #20]
	SystemConfig.VolumeAverage=FlashManagerInstance.ReadVolumeAverage();
 800ebdc:	4818      	ldr	r0, [pc, #96]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ebde:	f7fe fa12 	bl	800d006 <_ZN12FlashManager17ReadVolumeAverageEv>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	4a17      	ldr	r2, [pc, #92]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ebe6:	6193      	str	r3, [r2, #24]
	SystemConfig.FirstEmgMaxTrim=FlashManagerInstance.ReadFirstEmgMaxTrim();
 800ebe8:	4815      	ldr	r0, [pc, #84]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ebea:	f7fe fbaf 	bl	800d34c <_ZN12FlashManager19ReadFirstEmgMaxTrimEv>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	4b14      	ldr	r3, [pc, #80]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ebf4:	811a      	strh	r2, [r3, #8]
	SystemConfig.FirstEmgZeroMaxTrim=FlashManagerInstance.ReadFirstEmgZeroPointMaxTrim();
 800ebf6:	4812      	ldr	r0, [pc, #72]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ebf8:	f7fe fbfb 	bl	800d3f2 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	461a      	mov	r2, r3
 800ec00:	4b10      	ldr	r3, [pc, #64]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ec02:	815a      	strh	r2, [r3, #10]
	SystemConfig.FirstEmgZeroMinTrim=FlashManagerInstance.ReadFirstEmgZeroPointMinTrim();
 800ec04:	480e      	ldr	r0, [pc, #56]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ec06:	f7fe fc49 	bl	800d49c <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ec10:	819a      	strh	r2, [r3, #12]
	SystemConfig.SecondEmgMaxTrim=FlashManagerInstance.ReadSecondEmgMaxTrim();
 800ec12:	480b      	ldr	r0, [pc, #44]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ec14:	f7fe fd55 	bl	800d6c2 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	4b09      	ldr	r3, [pc, #36]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ec1e:	81da      	strh	r2, [r3, #14]
	SystemConfig.SecondEmgZeroMaxTrim=FlashManagerInstance.ReadSecondEmgZeroPointMaxTrim();
 800ec20:	4807      	ldr	r0, [pc, #28]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ec22:	f7fe fda1 	bl	800d768 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv>
 800ec26:	4603      	mov	r3, r0
 800ec28:	461a      	mov	r2, r3
 800ec2a:	4b06      	ldr	r3, [pc, #24]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ec2c:	821a      	strh	r2, [r3, #16]
	SystemConfig.SecondEmgZeroMinTrim=FlashManagerInstance.ReadSecondEmgZeroPointMinTrim();
 800ec2e:	4804      	ldr	r0, [pc, #16]	@ (800ec40 <FlashInitialize+0x1e4>)
 800ec30:	f7fe fdef 	bl	800d812 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv>
 800ec34:	4603      	mov	r3, r0
 800ec36:	461a      	mov	r2, r3
 800ec38:	4b02      	ldr	r3, [pc, #8]	@ (800ec44 <FlashInitialize+0x1e8>)
 800ec3a:	825a      	strh	r2, [r3, #18]
}
 800ec3c:	bf00      	nop
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	2000911c 	.word	0x2000911c
 800ec44:	20009328 	.word	0x20009328

0800ec48 <SendFeedback>:
void SuccessResult(void){
	uint8_t data[1]={0x01};
	WriteUart(data, 1);
}

void SendFeedback(uint8_t processType,uint8_t subType, uint8_t status){
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	4603      	mov	r3, r0
 800ec50:	71fb      	strb	r3, [r7, #7]
 800ec52:	460b      	mov	r3, r1
 800ec54:	71bb      	strb	r3, [r7, #6]
 800ec56:	4613      	mov	r3, r2
 800ec58:	717b      	strb	r3, [r7, #5]
	uint8_t uartData[6]={0};
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	60bb      	str	r3, [r7, #8]
 800ec5e:	2300      	movs	r3, #0
 800ec60:	81bb      	strh	r3, [r7, #12]
	uint16_t xLen=3;
 800ec62:	2303      	movs	r3, #3
 800ec64:	81fb      	strh	r3, [r7, #14]
	uartData[0]=0x04;
 800ec66:	2304      	movs	r3, #4
 800ec68:	723b      	strb	r3, [r7, #8]
	uartData[1]=(xLen & 0xFF00)>>8;
 800ec6a:	89fb      	ldrh	r3, [r7, #14]
 800ec6c:	0a1b      	lsrs	r3, r3, #8
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	b2db      	uxtb	r3, r3
 800ec72:	727b      	strb	r3, [r7, #9]
	uartData[2]=(xLen & 0x00FF);
 800ec74:	89fb      	ldrh	r3, [r7, #14]
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	72bb      	strb	r3, [r7, #10]
	uartData[3]=processType;
 800ec7a:	79fb      	ldrb	r3, [r7, #7]
 800ec7c:	72fb      	strb	r3, [r7, #11]
	uartData[4]=subType;
 800ec7e:	79bb      	ldrb	r3, [r7, #6]
 800ec80:	733b      	strb	r3, [r7, #12]
	uartData[5]=status;
 800ec82:	797b      	ldrb	r3, [r7, #5]
 800ec84:	737b      	strb	r3, [r7, #13]
	WriteUart(uartData, 6);
 800ec86:	f107 0308 	add.w	r3, r7, #8
 800ec8a:	2106      	movs	r1, #6
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f000 f8f7 	bl	800ee80 <WriteUart>
}
 800ec92:	bf00      	nop
 800ec94:	3710      	adds	r7, #16
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <SuccessDataResult>:
void SuccessDataResult(uint8_t percent,uint8_t dataType,uint8_t *data,int len){
 800ec9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec9e:	b089      	sub	sp, #36	@ 0x24
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60ba      	str	r2, [r7, #8]
 800eca4:	607b      	str	r3, [r7, #4]
 800eca6:	4603      	mov	r3, r0
 800eca8:	73fb      	strb	r3, [r7, #15]
 800ecaa:	460b      	mov	r3, r1
 800ecac:	73bb      	strb	r3, [r7, #14]
	uartData[5]=dataType;
	for (int i = 6; i < len+6; ++i) {
		uartData[i]=data[i-6];
	}
	WriteUart(uartData, len+6);
}
 800ecae:	466b      	mov	r3, sp
 800ecb0:	461e      	mov	r6, r3
	uint8_t uartData[len+6]={0};
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	1d99      	adds	r1, r3, #6
 800ecb6:	1e4b      	subs	r3, r1, #1
 800ecb8:	61bb      	str	r3, [r7, #24]
 800ecba:	460a      	mov	r2, r1
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	4690      	mov	r8, r2
 800ecc0:	4699      	mov	r9, r3
 800ecc2:	f04f 0200 	mov.w	r2, #0
 800ecc6:	f04f 0300 	mov.w	r3, #0
 800ecca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ecce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ecd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ecd6:	460a      	mov	r2, r1
 800ecd8:	2300      	movs	r3, #0
 800ecda:	4614      	mov	r4, r2
 800ecdc:	461d      	mov	r5, r3
 800ecde:	f04f 0200 	mov.w	r2, #0
 800ece2:	f04f 0300 	mov.w	r3, #0
 800ece6:	00eb      	lsls	r3, r5, #3
 800ece8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ecec:	00e2      	lsls	r2, r4, #3
 800ecee:	460b      	mov	r3, r1
 800ecf0:	3307      	adds	r3, #7
 800ecf2:	08db      	lsrs	r3, r3, #3
 800ecf4:	00db      	lsls	r3, r3, #3
 800ecf6:	ebad 0d03 	sub.w	sp, sp, r3
 800ecfa:	466b      	mov	r3, sp
 800ecfc:	3300      	adds	r3, #0
 800ecfe:	617b      	str	r3, [r7, #20]
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	3901      	subs	r1, #1
 800ed04:	2200      	movs	r2, #0
 800ed06:	701a      	strb	r2, [r3, #0]
 800ed08:	1c5a      	adds	r2, r3, #1
 800ed0a:	1e4b      	subs	r3, r1, #1
 800ed0c:	e003      	b.n	800ed16 <SuccessDataResult+0x7c>
 800ed0e:	2100      	movs	r1, #0
 800ed10:	7011      	strb	r1, [r2, #0]
 800ed12:	3b01      	subs	r3, #1
 800ed14:	3201      	adds	r2, #1
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	daf9      	bge.n	800ed0e <SuccessDataResult+0x74>
	uint16_t xLen=len+3;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	3303      	adds	r3, #3
 800ed20:	827b      	strh	r3, [r7, #18]
	uartData[0]=0x02;
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	2202      	movs	r2, #2
 800ed26:	701a      	strb	r2, [r3, #0]
	uartData[1]=(xLen & 0xFF00)>>8;
 800ed28:	8a7b      	ldrh	r3, [r7, #18]
 800ed2a:	0a1b      	lsrs	r3, r3, #8
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	b2da      	uxtb	r2, r3
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	705a      	strb	r2, [r3, #1]
	uartData[2]=(xLen & 0x00FF);
 800ed34:	8a7b      	ldrh	r3, [r7, #18]
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	709a      	strb	r2, [r3, #2]
	uartData[3]=1;
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	70da      	strb	r2, [r3, #3]
	uartData[4]=percent;
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	7bfa      	ldrb	r2, [r7, #15]
 800ed46:	711a      	strb	r2, [r3, #4]
	uartData[5]=dataType;
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	7bba      	ldrb	r2, [r7, #14]
 800ed4c:	715a      	strb	r2, [r3, #5]
	for (int i = 6; i < len+6; ++i) {
 800ed4e:	2306      	movs	r3, #6
 800ed50:	61fb      	str	r3, [r7, #28]
 800ed52:	e00c      	b.n	800ed6e <SuccessDataResult+0xd4>
		uartData[i]=data[i-6];
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	3b06      	subs	r3, #6
 800ed58:	68ba      	ldr	r2, [r7, #8]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	7819      	ldrb	r1, [r3, #0]
 800ed5e:	697a      	ldr	r2, [r7, #20]
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	4413      	add	r3, r2
 800ed64:	460a      	mov	r2, r1
 800ed66:	701a      	strb	r2, [r3, #0]
	for (int i = 6; i < len+6; ++i) {
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	61fb      	str	r3, [r7, #28]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	3305      	adds	r3, #5
 800ed72:	69fa      	ldr	r2, [r7, #28]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	dded      	ble.n	800ed54 <SuccessDataResult+0xba>
	WriteUart(uartData, len+6);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	3306      	adds	r3, #6
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	6978      	ldr	r0, [r7, #20]
 800ed80:	f000 f87e 	bl	800ee80 <WriteUart>
 800ed84:	46b5      	mov	sp, r6
}
 800ed86:	bf00      	nop
 800ed88:	3724      	adds	r7, #36	@ 0x24
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ed90 <ErrorResult>:
	uartData[5]=opCode;
	uartData[6]=(errorCode>>8) & 0xFF;
	uartData[7]=errorCode & 0xFF;
	WriteUart(uartData, 8);
}
void ErrorResult(uint8_t opCode,uint16_t errorCode){
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	4603      	mov	r3, r0
 800ed98:	460a      	mov	r2, r1
 800ed9a:	71fb      	strb	r3, [r7, #7]
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	80bb      	strh	r3, [r7, #4]
	uint8_t data[4];
	data[0]=0x00;
 800eda0:	2300      	movs	r3, #0
 800eda2:	733b      	strb	r3, [r7, #12]
	data[1]=opCode;
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	737b      	strb	r3, [r7, #13]
	data[2]=(errorCode>>8) & 0xFF;
 800eda8:	88bb      	ldrh	r3, [r7, #4]
 800edaa:	0a1b      	lsrs	r3, r3, #8
 800edac:	b29b      	uxth	r3, r3
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	73bb      	strb	r3, [r7, #14]
	data[3]=errorCode & 0xFF;
 800edb2:	88bb      	ldrh	r3, [r7, #4]
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	73fb      	strb	r3, [r7, #15]
	WriteUart(data, 4);
 800edb8:	f107 030c 	add.w	r3, r7, #12
 800edbc:	2104      	movs	r1, #4
 800edbe:	4618      	mov	r0, r3
 800edc0:	f000 f85e 	bl	800ee80 <WriteUart>
}
 800edc4:	bf00      	nop
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <StartReadUARTTask>:
void StartReadUARTTask(void *argument){
 800edcc:	b580      	push	{r7, lr}
 800edce:	b086      	sub	sp, #24
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 50 / portTICK_PERIOD_MS;
 800edd4:	2332      	movs	r3, #50	@ 0x32
 800edd6:	617b      	str	r3, [r7, #20]
	//osStatus_t communicationSemaphoreVal;
	ThreadStorage.CommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &communicationSemaphore_attributes);
 800edd8:	4a23      	ldr	r2, [pc, #140]	@ (800ee68 <StartReadUARTTask+0x9c>)
 800edda:	2101      	movs	r1, #1
 800eddc:	2001      	movs	r0, #1
 800edde:	f7f7 fe28 	bl	8006a32 <osSemaphoreNew>
 800ede2:	4603      	mov	r3, r0
 800ede4:	4a21      	ldr	r2, [pc, #132]	@ (800ee6c <StartReadUARTTask+0xa0>)
 800ede6:	f8c2 31e0 	str.w	r3, [r2, #480]	@ 0x1e0
	ThreadStorage.SendUARTThreadId=osThreadNew(StartSendUARTTask, NULL, &normalPriority);
 800edea:	4a21      	ldr	r2, [pc, #132]	@ (800ee70 <StartReadUARTTask+0xa4>)
 800edec:	2100      	movs	r1, #0
 800edee:	4821      	ldr	r0, [pc, #132]	@ (800ee74 <StartReadUARTTask+0xa8>)
 800edf0:	f7f7 fd60 	bl	80068b4 <osThreadNew>
 800edf4:	4603      	mov	r3, r0
 800edf6:	4a1d      	ldr	r2, [pc, #116]	@ (800ee6c <StartReadUARTTask+0xa0>)
 800edf8:	6013      	str	r3, [r2, #0]
	//bool retryStatus=false;
    uint8_t data[8];
	for(;;){
		//uint16_t newPos = __HAL_DMA_GET_COUNTER(huart1.hdmarx);
		//if(newPos>0){
			HAL_StatusTypeDef status=HAL_UART_Receive_DMA(&huart1, data, 8);
 800edfa:	f107 0308 	add.w	r3, r7, #8
 800edfe:	2208      	movs	r2, #8
 800ee00:	4619      	mov	r1, r3
 800ee02:	481d      	ldr	r0, [pc, #116]	@ (800ee78 <StartReadUARTTask+0xac>)
 800ee04:	f7f6 fbc1 	bl	800558a <HAL_UART_Receive_DMA>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	74fb      	strb	r3, [r7, #19]
			if (status == HAL_OK&&(data[0]==1||data[0]==2||data[0]==3)) {
 800ee0c:	7cfb      	ldrb	r3, [r7, #19]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d115      	bne.n	800ee3e <StartReadUARTTask+0x72>
 800ee12:	7a3b      	ldrb	r3, [r7, #8]
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d005      	beq.n	800ee24 <StartReadUARTTask+0x58>
 800ee18:	7a3b      	ldrb	r3, [r7, #8]
 800ee1a:	2b02      	cmp	r3, #2
 800ee1c:	d002      	beq.n	800ee24 <StartReadUARTTask+0x58>
 800ee1e:	7a3b      	ldrb	r3, [r7, #8]
 800ee20:	2b03      	cmp	r3, #3
 800ee22:	d10c      	bne.n	800ee3e <StartReadUARTTask+0x72>
				SendFeedback(data[0], data[1], ProcessStatuses::PS_Processing);
 800ee24:	7a3b      	ldrb	r3, [r7, #8]
 800ee26:	7a79      	ldrb	r1, [r7, #9]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7ff ff0c 	bl	800ec48 <SendFeedback>
				CommunicationInstance.ProcessCommand(data);
 800ee30:	f107 0308 	add.w	r3, r7, #8
 800ee34:	4619      	mov	r1, r3
 800ee36:	4811      	ldr	r0, [pc, #68]	@ (800ee7c <StartReadUARTTask+0xb0>)
 800ee38:	f7fb f96a 	bl	800a110 <_ZN13Communication14ProcessCommandEPh>
 800ee3c:	e00f      	b.n	800ee5e <StartReadUARTTask+0x92>
	        }
			else if(status != HAL_TIMEOUT && status != HAL_BUSY && status != HAL_OK){
 800ee3e:	7cfb      	ldrb	r3, [r7, #19]
 800ee40:	2b03      	cmp	r3, #3
 800ee42:	d00c      	beq.n	800ee5e <StartReadUARTTask+0x92>
 800ee44:	7cfb      	ldrb	r3, [r7, #19]
 800ee46:	2b02      	cmp	r3, #2
 800ee48:	d009      	beq.n	800ee5e <StartReadUARTTask+0x92>
 800ee4a:	7cfb      	ldrb	r3, [r7, #19]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d006      	beq.n	800ee5e <StartReadUARTTask+0x92>
				SuccessDataResult(100, SuccessDataType::SD_RepeatAgain, data, 8);
 800ee50:	f107 0208 	add.w	r2, r7, #8
 800ee54:	2308      	movs	r3, #8
 800ee56:	21fe      	movs	r1, #254	@ 0xfe
 800ee58:	2064      	movs	r0, #100	@ 0x64
 800ee5a:	f7ff ff1e 	bl	800ec9a <SuccessDataResult>
	        }
		//}
		vTaskDelay(xDelay);
 800ee5e:	2032      	movs	r0, #50	@ 0x32
 800ee60:	f7f9 fab4 	bl	80083cc <vTaskDelay>
					HAL_UART_Receive(&huart1, xData, sizeof(len),HAL_MAX_DELAY);
					SuccessDataResult(100, SuccessDataType::SD_RepeatAgain, xData, sizeof(len));
				}
			vTaskDelay(xDelay);
		}*/
	}
 800ee64:	e7c9      	b.n	800edfa <StartReadUARTTask+0x2e>
 800ee66:	bf00      	nop
 800ee68:	08011d00 	.word	0x08011d00
 800ee6c:	20009138 	.word	0x20009138
 800ee70:	08011c78 	.word	0x08011c78
 800ee74:	0800eed5 	.word	0x0800eed5
 800ee78:	20000460 	.word	0x20000460
 800ee7c:	200090fc 	.word	0x200090fc

0800ee80 <WriteUart>:
}
void WriteUart(uint8_t *data,int len){
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
	  uint8_t count=0;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	73fb      	strb	r3, [r7, #15]
	  HAL_StatusTypeDef status=HAL_UART_Transmit(&huart1, data,len ,HAL_MAX_DELAY);
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	b29a      	uxth	r2, r3
 800ee92:	f04f 33ff 	mov.w	r3, #4294967295
 800ee96:	6879      	ldr	r1, [r7, #4]
 800ee98:	480d      	ldr	r0, [pc, #52]	@ (800eed0 <WriteUart+0x50>)
 800ee9a:	f7f6 faeb 	bl	8005474 <HAL_UART_Transmit>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	73bb      	strb	r3, [r7, #14]
	  if(status!=HAL_OK && count<5)
 800eea2:	7bbb      	ldrb	r3, [r7, #14]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d00f      	beq.n	800eec8 <WriteUart+0x48>
 800eea8:	7bfb      	ldrb	r3, [r7, #15]
 800eeaa:	2b04      	cmp	r3, #4
 800eeac:	d80c      	bhi.n	800eec8 <WriteUart+0x48>
	  {
		  status=HAL_UART_Transmit(&huart1, data,len ,HAL_MAX_DELAY);
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	f04f 33ff 	mov.w	r3, #4294967295
 800eeb6:	6879      	ldr	r1, [r7, #4]
 800eeb8:	4805      	ldr	r0, [pc, #20]	@ (800eed0 <WriteUart+0x50>)
 800eeba:	f7f6 fadb 	bl	8005474 <HAL_UART_Transmit>
 800eebe:	4603      	mov	r3, r0
 800eec0:	73bb      	strb	r3, [r7, #14]
		  count++;
 800eec2:	7bfb      	ldrb	r3, [r7, #15]
 800eec4:	3301      	adds	r3, #1
 800eec6:	73fb      	strb	r3, [r7, #15]
	  }
	  /*if(status==HAL_OK){
		  uint8_t nl = 0x0A;
		  HAL_UART_Transmit(&huart1, &nl, 1, HAL_MAX_DELAY);
	  }*/
}
 800eec8:	bf00      	nop
 800eeca:	3710      	adds	r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	20000460 	.word	0x20000460

0800eed4 <StartSendUARTTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSendUARTTask */
void StartSendUARTTask(void *argument)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800eeda:	b086      	sub	sp, #24
 800eedc:	af00      	add	r7, sp, #0
 800eede:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800eee2:	f843 0c54 	str.w	r0, [r3, #-84]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  // uint8_t data[] = "SendTask\r\n";
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800eee6:	f7f9 fc23 	bl	8008730 <xTaskGetTickCount>
 800eeea:	4603      	mov	r3, r0
 800eeec:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800eef0:	f102 020c 	add.w	r2, r2, #12
 800eef4:	6013      	str	r3, [r2, #0]
	const TickType_t xFrequency = (1000/SystemConfig.SendPerSecond);
 800eef6:	4bb1      	ldr	r3, [pc, #708]	@ (800f1bc <StartSendUARTTask+0x2e8>)
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	461a      	mov	r2, r3
 800eefc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ef00:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef04:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800ef08:	f102 021c 	add.w	r2, r2, #28
 800ef0c:	6013      	str	r3, [r2, #0]
	osStatus_t volumeSemaphoreVal;
	osStatus_t flowSemaphoreVal;
	osStatus_t communicationSemaphoreVal;
  for(;;)
  {
	  uint16_t totalLen=12;
 800ef0e:	230c      	movs	r3, #12
 800ef10:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800ef14:	f102 0216 	add.w	r2, r2, #22
 800ef18:	8013      	strh	r3, [r2, #0]
	  uint8_t allData[4096];
	  firstEmgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FirstEmgSemaphoreHandle,xFrequency/10);
 800ef1a:	4ba9      	ldr	r3, [pc, #676]	@ (800f1c0 <StartSendUARTTask+0x2ec>)
 800ef1c:	f8d3 21d0 	ldr.w	r2, [r3, #464]	@ 0x1d0
 800ef20:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800ef24:	f103 031c 	add.w	r3, r3, #28
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	49a6      	ldr	r1, [pc, #664]	@ (800f1c4 <StartSendUARTTask+0x2f0>)
 800ef2c:	fba1 1303 	umull	r1, r3, r1, r3
 800ef30:	08db      	lsrs	r3, r3, #3
 800ef32:	4619      	mov	r1, r3
 800ef34:	4610      	mov	r0, r2
 800ef36:	f7f7 fe05 	bl	8006b44 <osSemaphoreAcquire>
 800ef3a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800ef3e:	f103 0318 	add.w	r3, r3, #24
 800ef42:	6018      	str	r0, [r3, #0]
	  if(firstEmgSemaphoreVal==osOK){
 800ef44:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800ef48:	f103 0318 	add.w	r3, r3, #24
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	f040 80b1 	bne.w	800f0b6 <StartSendUARTTask+0x1e2>
		  int xLen=EmgInstance.FirstEmgBufferLen;
 800ef54:	4b9c      	ldr	r3, [pc, #624]	@ (800f1c8 <StartSendUARTTask+0x2f4>)
 800ef56:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ef5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef5c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800ef60:	f102 0214 	add.w	r2, r2, #20
 800ef64:	6013      	str	r3, [r2, #0]
		  if(xLen>0){
 800ef66:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800ef6a:	f103 0314 	add.w	r3, r3, #20
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	f340 809a 	ble.w	800f0aa <StartSendUARTTask+0x1d6>
			  allData[totalLen]=1;
 800ef76:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800ef7a:	f103 0316 	add.w	r3, r3, #22
 800ef7e:	881b      	ldrh	r3, [r3, #0]
 800ef80:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800ef84:	4413      	add	r3, r2
 800ef86:	2201      	movs	r2, #1
 800ef88:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800ef8c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800ef90:	f103 0316 	add.w	r3, r3, #22
 800ef94:	881b      	ldrh	r3, [r3, #0]
 800ef96:	3301      	adds	r3, #1
 800ef98:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800ef9c:	f102 0216 	add.w	r2, r2, #22
 800efa0:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=(xLen & 0xFF00)>>8;
 800efa2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800efa6:	f103 0314 	add.w	r3, r3, #20
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	121a      	asrs	r2, r3, #8
 800efae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800efb2:	f103 0316 	add.w	r3, r3, #22
 800efb6:	881b      	ldrh	r3, [r3, #0]
 800efb8:	b2d2      	uxtb	r2, r2
 800efba:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800efbe:	440b      	add	r3, r1
 800efc0:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800efc4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800efc8:	f103 0316 	add.w	r3, r3, #22
 800efcc:	881b      	ldrh	r3, [r3, #0]
 800efce:	3301      	adds	r3, #1
 800efd0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800efd4:	f102 0216 	add.w	r2, r2, #22
 800efd8:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=xLen & 0xFF;
 800efda:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800efde:	f103 0316 	add.w	r3, r3, #22
 800efe2:	881b      	ldrh	r3, [r3, #0]
 800efe4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800efe8:	f102 0214 	add.w	r2, r2, #20
 800efec:	6812      	ldr	r2, [r2, #0]
 800efee:	b2d2      	uxtb	r2, r2
 800eff0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800eff4:	440b      	add	r3, r1
 800eff6:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800effa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800effe:	f103 0316 	add.w	r3, r3, #22
 800f002:	881b      	ldrh	r3, [r3, #0]
 800f004:	3301      	adds	r3, #1
 800f006:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f00a:	f102 0216 	add.w	r2, r2, #22
 800f00e:	8013      	strh	r3, [r2, #0]
			   for (int i=0;i < xLen; ++i) {
 800f010:	2300      	movs	r3, #0
 800f012:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f016:	f102 0210 	add.w	r2, r2, #16
 800f01a:	6013      	str	r3, [r2, #0]
 800f01c:	e033      	b.n	800f086 <StartSendUARTTask+0x1b2>
				   allData[totalLen]=EmgInstance.FirstEmgBuffer[i];
 800f01e:	4a6a      	ldr	r2, [pc, #424]	@ (800f1c8 <StartSendUARTTask+0x2f4>)
 800f020:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f024:	f103 0310 	add.w	r3, r3, #16
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	330c      	adds	r3, #12
 800f02c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f030:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f034:	f103 0316 	add.w	r3, r3, #22
 800f038:	881b      	ldrh	r3, [r3, #0]
 800f03a:	b2d2      	uxtb	r2, r2
 800f03c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f040:	440b      	add	r3, r1
 800f042:	f803 2c4c 	strb.w	r2, [r3, #-76]
				   totalLen++;
 800f046:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f04a:	f103 0316 	add.w	r3, r3, #22
 800f04e:	881b      	ldrh	r3, [r3, #0]
 800f050:	3301      	adds	r3, #1
 800f052:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f056:	f102 0216 	add.w	r2, r2, #22
 800f05a:	8013      	strh	r3, [r2, #0]
				   EmgInstance.FirstEmgBuffer[i]=0;
 800f05c:	4a5a      	ldr	r2, [pc, #360]	@ (800f1c8 <StartSendUARTTask+0x2f4>)
 800f05e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f062:	f103 0310 	add.w	r3, r3, #16
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	330c      	adds	r3, #12
 800f06a:	2100      	movs	r1, #0
 800f06c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			   for (int i=0;i < xLen; ++i) {
 800f070:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f074:	f103 0310 	add.w	r3, r3, #16
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	3301      	adds	r3, #1
 800f07c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f080:	f102 0210 	add.w	r2, r2, #16
 800f084:	6013      	str	r3, [r2, #0]
 800f086:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f08a:	f103 0310 	add.w	r3, r3, #16
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f094:	f103 0314 	add.w	r3, r3, #20
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	429a      	cmp	r2, r3
 800f09c:	dbbf      	blt.n	800f01e <StartSendUARTTask+0x14a>
			   }
			   EmgInstance.FirstEmgBufferLen=0;
 800f09e:	4b4a      	ldr	r3, [pc, #296]	@ (800f1c8 <StartSendUARTTask+0x2f4>)
 800f0a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	6313      	str	r3, [r2, #48]	@ 0x30
		  }
		  osSemaphoreRelease(ThreadStorage.FirstEmgSemaphoreHandle);
 800f0aa:	4b45      	ldr	r3, [pc, #276]	@ (800f1c0 <StartSendUARTTask+0x2ec>)
 800f0ac:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7f7 fd99 	bl	8006be8 <osSemaphoreRelease>
	  }
	  secondEmgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.SecondEmgSemaphoreHandle, xFrequency/10);
 800f0b6:	4b42      	ldr	r3, [pc, #264]	@ (800f1c0 <StartSendUARTTask+0x2ec>)
 800f0b8:	f8d3 21d4 	ldr.w	r2, [r3, #468]	@ 0x1d4
 800f0bc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f0c0:	f103 031c 	add.w	r3, r3, #28
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	493f      	ldr	r1, [pc, #252]	@ (800f1c4 <StartSendUARTTask+0x2f0>)
 800f0c8:	fba1 1303 	umull	r1, r3, r1, r3
 800f0cc:	08db      	lsrs	r3, r3, #3
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	4610      	mov	r0, r2
 800f0d2:	f7f7 fd37 	bl	8006b44 <osSemaphoreAcquire>
 800f0d6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f0da:	f103 0310 	add.w	r3, r3, #16
 800f0de:	6018      	str	r0, [r3, #0]
	  if(secondEmgSemaphoreVal==osOK){
 800f0e0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f0e4:	f103 0310 	add.w	r3, r3, #16
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	f040 80bc 	bne.w	800f268 <StartSendUARTTask+0x394>
		  int xLen=EmgInstance.SecondEmgBufferLen;
 800f0f0:	4b35      	ldr	r3, [pc, #212]	@ (800f1c8 <StartSendUARTTask+0x2f4>)
 800f0f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f0f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0f8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f0fc:	f102 020c 	add.w	r2, r2, #12
 800f100:	6013      	str	r3, [r2, #0]
		  if(xLen>0){
 800f102:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f106:	f103 030c 	add.w	r3, r3, #12
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	f340 80a5 	ble.w	800f25c <StartSendUARTTask+0x388>
			  allData[totalLen]=2;
 800f112:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f116:	f103 0316 	add.w	r3, r3, #22
 800f11a:	881b      	ldrh	r3, [r3, #0]
 800f11c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f120:	4413      	add	r3, r2
 800f122:	2202      	movs	r2, #2
 800f124:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f128:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f12c:	f103 0316 	add.w	r3, r3, #22
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	3301      	adds	r3, #1
 800f134:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f138:	f102 0216 	add.w	r2, r2, #22
 800f13c:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=(xLen & 0xFF00)>>8;
 800f13e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f142:	f103 030c 	add.w	r3, r3, #12
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	121a      	asrs	r2, r3, #8
 800f14a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f14e:	f103 0316 	add.w	r3, r3, #22
 800f152:	881b      	ldrh	r3, [r3, #0]
 800f154:	b2d2      	uxtb	r2, r2
 800f156:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f15a:	440b      	add	r3, r1
 800f15c:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f160:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f164:	f103 0316 	add.w	r3, r3, #22
 800f168:	881b      	ldrh	r3, [r3, #0]
 800f16a:	3301      	adds	r3, #1
 800f16c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f170:	f102 0216 	add.w	r2, r2, #22
 800f174:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=xLen & 0xFF;
 800f176:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f17a:	f103 0316 	add.w	r3, r3, #22
 800f17e:	881b      	ldrh	r3, [r3, #0]
 800f180:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f184:	f102 020c 	add.w	r2, r2, #12
 800f188:	6812      	ldr	r2, [r2, #0]
 800f18a:	b2d2      	uxtb	r2, r2
 800f18c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f190:	440b      	add	r3, r1
 800f192:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f196:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f19a:	f103 0316 	add.w	r3, r3, #22
 800f19e:	881b      	ldrh	r3, [r3, #0]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f1a6:	f102 0216 	add.w	r2, r2, #22
 800f1aa:	8013      	strh	r3, [r2, #0]
			   for (int i=0;i < xLen; ++i) {
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f1b2:	f102 020c 	add.w	r2, r2, #12
 800f1b6:	6013      	str	r3, [r2, #0]
 800f1b8:	e03e      	b.n	800f238 <StartSendUARTTask+0x364>
 800f1ba:	bf00      	nop
 800f1bc:	20009328 	.word	0x20009328
 800f1c0:	20009138 	.word	0x20009138
 800f1c4:	cccccccd 	.word	0xcccccccd
 800f1c8:	20005080 	.word	0x20005080
				   allData[totalLen]=EmgInstance.SecondEmgBuffer[i];
 800f1cc:	4ad1      	ldr	r2, [pc, #836]	@ (800f514 <StartSendUARTTask+0x640>)
 800f1ce:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f1d2:	f103 030c 	add.w	r3, r3, #12
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800f1dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f1e0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f1e4:	f103 0316 	add.w	r3, r3, #22
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	b2d2      	uxtb	r2, r2
 800f1ec:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f1f0:	440b      	add	r3, r1
 800f1f2:	f803 2c4c 	strb.w	r2, [r3, #-76]
				   totalLen++;
 800f1f6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f1fa:	f103 0316 	add.w	r3, r3, #22
 800f1fe:	881b      	ldrh	r3, [r3, #0]
 800f200:	3301      	adds	r3, #1
 800f202:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f206:	f102 0216 	add.w	r2, r2, #22
 800f20a:	8013      	strh	r3, [r2, #0]
				   EmgInstance.SecondEmgBuffer[i]=0;
 800f20c:	4ac1      	ldr	r2, [pc, #772]	@ (800f514 <StartSendUARTTask+0x640>)
 800f20e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f212:	f103 030c 	add.w	r3, r3, #12
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800f21c:	2100      	movs	r1, #0
 800f21e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			   for (int i=0;i < xLen; ++i) {
 800f222:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f226:	f103 030c 	add.w	r3, r3, #12
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	3301      	adds	r3, #1
 800f22e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f232:	f102 020c 	add.w	r2, r2, #12
 800f236:	6013      	str	r3, [r2, #0]
 800f238:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f23c:	f103 030c 	add.w	r3, r3, #12
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f246:	f103 030c 	add.w	r3, r3, #12
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	dbbd      	blt.n	800f1cc <StartSendUARTTask+0x2f8>
			   }
			   EmgInstance.SecondEmgBufferLen=0;
 800f250:	4bb0      	ldr	r3, [pc, #704]	@ (800f514 <StartSendUARTTask+0x640>)
 800f252:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f256:	461a      	mov	r2, r3
 800f258:	2300      	movs	r3, #0
 800f25a:	6353      	str	r3, [r2, #52]	@ 0x34
		  }
		  osSemaphoreRelease(ThreadStorage.SecondEmgSemaphoreHandle);
 800f25c:	4bae      	ldr	r3, [pc, #696]	@ (800f518 <StartSendUARTTask+0x644>)
 800f25e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800f262:	4618      	mov	r0, r3
 800f264:	f7f7 fcc0 	bl	8006be8 <osSemaphoreRelease>
	  }
	  volumeSemaphoreVal = osSemaphoreAcquire(ThreadStorage.VolumeSemaphoreHandle, xFrequency/10);
 800f268:	4bab      	ldr	r3, [pc, #684]	@ (800f518 <StartSendUARTTask+0x644>)
 800f26a:	f8d3 21dc 	ldr.w	r2, [r3, #476]	@ 0x1dc
 800f26e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f272:	f103 031c 	add.w	r3, r3, #28
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	49a8      	ldr	r1, [pc, #672]	@ (800f51c <StartSendUARTTask+0x648>)
 800f27a:	fba1 1303 	umull	r1, r3, r1, r3
 800f27e:	08db      	lsrs	r3, r3, #3
 800f280:	4619      	mov	r1, r3
 800f282:	4610      	mov	r0, r2
 800f284:	f7f7 fc5e 	bl	8006b44 <osSemaphoreAcquire>
 800f288:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f28c:	f103 0308 	add.w	r3, r3, #8
 800f290:	6018      	str	r0, [r3, #0]
	  if(volumeSemaphoreVal==osOK){
 800f292:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f296:	f103 0308 	add.w	r3, r3, #8
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	f040 80ba 	bne.w	800f416 <StartSendUARTTask+0x542>
		  int xLen=LoadCellInstance.VolumeBufferLen;
 800f2a2:	4b9f      	ldr	r3, [pc, #636]	@ (800f520 <StartSendUARTTask+0x64c>)
 800f2a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f2ae:	f102 0204 	add.w	r2, r2, #4
 800f2b2:	6013      	str	r3, [r2, #0]
		  if(xLen>0){
 800f2b4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f2b8:	f103 0304 	add.w	r3, r3, #4
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	f340 80a3 	ble.w	800f40a <StartSendUARTTask+0x536>
			  allData[totalLen]=3;
 800f2c4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f2c8:	f103 0316 	add.w	r3, r3, #22
 800f2cc:	881b      	ldrh	r3, [r3, #0]
 800f2ce:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f2d2:	4413      	add	r3, r2
 800f2d4:	2203      	movs	r2, #3
 800f2d6:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f2da:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f2de:	f103 0316 	add.w	r3, r3, #22
 800f2e2:	881b      	ldrh	r3, [r3, #0]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f2ea:	f102 0216 	add.w	r2, r2, #22
 800f2ee:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=(xLen & 0xFF00)>>8;
 800f2f0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f2f4:	f103 0304 	add.w	r3, r3, #4
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	121a      	asrs	r2, r3, #8
 800f2fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f300:	f103 0316 	add.w	r3, r3, #22
 800f304:	881b      	ldrh	r3, [r3, #0]
 800f306:	b2d2      	uxtb	r2, r2
 800f308:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f30c:	440b      	add	r3, r1
 800f30e:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f312:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f316:	f103 0316 	add.w	r3, r3, #22
 800f31a:	881b      	ldrh	r3, [r3, #0]
 800f31c:	3301      	adds	r3, #1
 800f31e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f322:	f102 0216 	add.w	r2, r2, #22
 800f326:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=xLen & 0xFF;
 800f328:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f32c:	f103 0316 	add.w	r3, r3, #22
 800f330:	881b      	ldrh	r3, [r3, #0]
 800f332:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f336:	f102 0204 	add.w	r2, r2, #4
 800f33a:	6812      	ldr	r2, [r2, #0]
 800f33c:	b2d2      	uxtb	r2, r2
 800f33e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f342:	440b      	add	r3, r1
 800f344:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f348:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f34c:	f103 0316 	add.w	r3, r3, #22
 800f350:	881b      	ldrh	r3, [r3, #0]
 800f352:	3301      	adds	r3, #1
 800f354:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f358:	f102 0216 	add.w	r2, r2, #22
 800f35c:	8013      	strh	r3, [r2, #0]
			   for (int i=0;i < xLen; ++i) {
 800f35e:	2300      	movs	r3, #0
 800f360:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f364:	f102 0208 	add.w	r2, r2, #8
 800f368:	6013      	str	r3, [r2, #0]
 800f36a:	e03c      	b.n	800f3e6 <StartSendUARTTask+0x512>
				   allData[totalLen]=LoadCellInstance.VolumeBuffer[i];
 800f36c:	4a6c      	ldr	r2, [pc, #432]	@ (800f520 <StartSendUARTTask+0x64c>)
 800f36e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f372:	f103 0308 	add.w	r3, r3, #8
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	009b      	lsls	r3, r3, #2
 800f37a:	4413      	add	r3, r2
 800f37c:	3304      	adds	r3, #4
 800f37e:	edd3 7a00 	vldr	s15, [r3]
 800f382:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f386:	f103 0316 	add.w	r3, r3, #22
 800f38a:	881b      	ldrh	r3, [r3, #0]
 800f38c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f390:	edc7 7a00 	vstr	s15, [r7]
 800f394:	783a      	ldrb	r2, [r7, #0]
 800f396:	b2d2      	uxtb	r2, r2
 800f398:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f39c:	440b      	add	r3, r1
 800f39e:	f803 2c4c 	strb.w	r2, [r3, #-76]
				   totalLen++;
 800f3a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f3a6:	f103 0316 	add.w	r3, r3, #22
 800f3aa:	881b      	ldrh	r3, [r3, #0]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f3b2:	f102 0216 	add.w	r2, r2, #22
 800f3b6:	8013      	strh	r3, [r2, #0]
				   LoadCellInstance.VolumeBuffer[i]=0;
 800f3b8:	4a59      	ldr	r2, [pc, #356]	@ (800f520 <StartSendUARTTask+0x64c>)
 800f3ba:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f3be:	f103 0308 	add.w	r3, r3, #8
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	009b      	lsls	r3, r3, #2
 800f3c6:	4413      	add	r3, r2
 800f3c8:	3304      	adds	r3, #4
 800f3ca:	f04f 0200 	mov.w	r2, #0
 800f3ce:	601a      	str	r2, [r3, #0]
			   for (int i=0;i < xLen; ++i) {
 800f3d0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f3d4:	f103 0308 	add.w	r3, r3, #8
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f3e0:	f102 0208 	add.w	r2, r2, #8
 800f3e4:	6013      	str	r3, [r2, #0]
 800f3e6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f3ea:	f103 0308 	add.w	r3, r3, #8
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f3f4:	f103 0304 	add.w	r3, r3, #4
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	dbb6      	blt.n	800f36c <StartSendUARTTask+0x498>
			   }
			   LoadCellInstance.VolumeBufferLen=0;
 800f3fe:	4b48      	ldr	r3, [pc, #288]	@ (800f520 <StartSendUARTTask+0x64c>)
 800f400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f404:	461a      	mov	r2, r3
 800f406:	2300      	movs	r3, #0
 800f408:	6053      	str	r3, [r2, #4]
		  }
		  osSemaphoreRelease(ThreadStorage.VolumeSemaphoreHandle);
 800f40a:	4b43      	ldr	r3, [pc, #268]	@ (800f518 <StartSendUARTTask+0x644>)
 800f40c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800f410:	4618      	mov	r0, r3
 800f412:	f7f7 fbe9 	bl	8006be8 <osSemaphoreRelease>
	  }
	  flowSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FlowSemaphoreHandle, xFrequency/10);
 800f416:	4b40      	ldr	r3, [pc, #256]	@ (800f518 <StartSendUARTTask+0x644>)
 800f418:	f8d3 21d8 	ldr.w	r2, [r3, #472]	@ 0x1d8
 800f41c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f420:	f103 031c 	add.w	r3, r3, #28
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	493d      	ldr	r1, [pc, #244]	@ (800f51c <StartSendUARTTask+0x648>)
 800f428:	fba1 1303 	umull	r1, r3, r1, r3
 800f42c:	08db      	lsrs	r3, r3, #3
 800f42e:	4619      	mov	r1, r3
 800f430:	4610      	mov	r0, r2
 800f432:	f7f7 fb87 	bl	8006b44 <osSemaphoreAcquire>
 800f436:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f43a:	6018      	str	r0, [r3, #0]
	  if(flowSemaphoreVal==osOK){
 800f43c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	f040 80c5 	bne.w	800f5d2 <StartSendUARTTask+0x6fe>
		  int xLen=LoadCellInstance.FlowBufferLen;
 800f448:	4b35      	ldr	r3, [pc, #212]	@ (800f520 <StartSendUARTTask+0x64c>)
 800f44a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800f454:	f102 021c 	add.w	r2, r2, #28
 800f458:	6013      	str	r3, [r2, #0]
		  if(xLen>0){
 800f45a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f45e:	f103 031c 	add.w	r3, r3, #28
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	f340 80ae 	ble.w	800f5c6 <StartSendUARTTask+0x6f2>
			  allData[totalLen]=4;
 800f46a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f46e:	f103 0316 	add.w	r3, r3, #22
 800f472:	881b      	ldrh	r3, [r3, #0]
 800f474:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f478:	4413      	add	r3, r2
 800f47a:	2204      	movs	r2, #4
 800f47c:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f480:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f484:	f103 0316 	add.w	r3, r3, #22
 800f488:	881b      	ldrh	r3, [r3, #0]
 800f48a:	3301      	adds	r3, #1
 800f48c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f490:	f102 0216 	add.w	r2, r2, #22
 800f494:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=(xLen & 0xFF00)>>8;
 800f496:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f49a:	f103 031c 	add.w	r3, r3, #28
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	121a      	asrs	r2, r3, #8
 800f4a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f4a6:	f103 0316 	add.w	r3, r3, #22
 800f4aa:	881b      	ldrh	r3, [r3, #0]
 800f4ac:	b2d2      	uxtb	r2, r2
 800f4ae:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f4b2:	440b      	add	r3, r1
 800f4b4:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f4b8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f4bc:	f103 0316 	add.w	r3, r3, #22
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f4c8:	f102 0216 	add.w	r2, r2, #22
 800f4cc:	8013      	strh	r3, [r2, #0]
			  allData[totalLen]=xLen & 0xFF;
 800f4ce:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f4d2:	f103 0316 	add.w	r3, r3, #22
 800f4d6:	881b      	ldrh	r3, [r3, #0]
 800f4d8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800f4dc:	f102 021c 	add.w	r2, r2, #28
 800f4e0:	6812      	ldr	r2, [r2, #0]
 800f4e2:	b2d2      	uxtb	r2, r2
 800f4e4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f4e8:	440b      	add	r3, r1
 800f4ea:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  totalLen++;
 800f4ee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f4f2:	f103 0316 	add.w	r3, r3, #22
 800f4f6:	881b      	ldrh	r3, [r3, #0]
 800f4f8:	3301      	adds	r3, #1
 800f4fa:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f4fe:	f102 0216 	add.w	r2, r2, #22
 800f502:	8013      	strh	r3, [r2, #0]
			   for (int i=0;i < xLen; ++i) {
 800f504:	2300      	movs	r3, #0
 800f506:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f50a:	f102 0204 	add.w	r2, r2, #4
 800f50e:	6013      	str	r3, [r2, #0]
 800f510:	e047      	b.n	800f5a2 <StartSendUARTTask+0x6ce>
 800f512:	bf00      	nop
 800f514:	20005080 	.word	0x20005080
 800f518:	20009138 	.word	0x20009138
 800f51c:	cccccccd 	.word	0xcccccccd
 800f520:	200070c4 	.word	0x200070c4
				   allData[totalLen]=LoadCellInstance.FlowBuffer[i];
 800f524:	4ab7      	ldr	r2, [pc, #732]	@ (800f804 <StartSendUARTTask+0x930>)
 800f526:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f52a:	f103 0304 	add.w	r3, r3, #4
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	4413      	add	r3, r2
 800f538:	edd3 7a00 	vldr	s15, [r3]
 800f53c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f540:	f103 0316 	add.w	r3, r3, #22
 800f544:	881b      	ldrh	r3, [r3, #0]
 800f546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f54a:	edc7 7a00 	vstr	s15, [r7]
 800f54e:	783a      	ldrb	r2, [r7, #0]
 800f550:	b2d2      	uxtb	r2, r2
 800f552:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f556:	440b      	add	r3, r1
 800f558:	f803 2c4c 	strb.w	r2, [r3, #-76]
				   totalLen++;
 800f55c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f560:	f103 0316 	add.w	r3, r3, #22
 800f564:	881b      	ldrh	r3, [r3, #0]
 800f566:	3301      	adds	r3, #1
 800f568:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f56c:	f102 0216 	add.w	r2, r2, #22
 800f570:	8013      	strh	r3, [r2, #0]
				   LoadCellInstance.FlowBuffer[i]=0;
 800f572:	4aa4      	ldr	r2, [pc, #656]	@ (800f804 <StartSendUARTTask+0x930>)
 800f574:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f578:	f103 0304 	add.w	r3, r3, #4
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	4413      	add	r3, r2
 800f586:	f04f 0200 	mov.w	r2, #0
 800f58a:	601a      	str	r2, [r3, #0]
			   for (int i=0;i < xLen; ++i) {
 800f58c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f590:	f103 0304 	add.w	r3, r3, #4
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	3301      	adds	r3, #1
 800f598:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f59c:	f102 0204 	add.w	r2, r2, #4
 800f5a0:	6013      	str	r3, [r2, #0]
 800f5a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f5a6:	f103 0304 	add.w	r3, r3, #4
 800f5aa:	681a      	ldr	r2, [r3, #0]
 800f5ac:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f5b0:	f103 031c 	add.w	r3, r3, #28
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	dbb4      	blt.n	800f524 <StartSendUARTTask+0x650>
			   }
			   LoadCellInstance.FlowBufferLen=0;
 800f5ba:	4b92      	ldr	r3, [pc, #584]	@ (800f804 <StartSendUARTTask+0x930>)
 800f5bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	6093      	str	r3, [r2, #8]
		  }
		  osSemaphoreRelease(ThreadStorage.FlowSemaphoreHandle);
 800f5c6:	4b90      	ldr	r3, [pc, #576]	@ (800f808 <StartSendUARTTask+0x934>)
 800f5c8:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7f7 fb0b 	bl	8006be8 <osSemaphoreRelease>
	  }
	  if(totalLen>11){
 800f5d2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f5d6:	f103 0316 	add.w	r3, r3, #22
 800f5da:	881b      	ldrh	r3, [r3, #0]
 800f5dc:	2b0b      	cmp	r3, #11
 800f5de:	f240 8176 	bls.w	800f8ce <StartSendUARTTask+0x9fa>
		  uint16_t len=totalLen-3;
 800f5e2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f5e6:	f103 0316 	add.w	r3, r3, #22
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	3b03      	subs	r3, #3
 800f5ee:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800f5f2:	f102 021a 	add.w	r2, r2, #26
 800f5f6:	8013      	strh	r3, [r2, #0]
		  allData[0]=3;
 800f5f8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f5fc:	2203      	movs	r2, #3
 800f5fe:	f803 2c4c 	strb.w	r2, [r3, #-76]
		  allData[1]=(len & 0xFF00)>>8;
 800f602:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f606:	f103 031a 	add.w	r3, r3, #26
 800f60a:	881b      	ldrh	r3, [r3, #0]
 800f60c:	0a1b      	lsrs	r3, r3, #8
 800f60e:	b29b      	uxth	r3, r3
 800f610:	b2da      	uxtb	r2, r3
 800f612:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f616:	f803 2c4b 	strb.w	r2, [r3, #-75]
		  allData[2]=len & 0xFF;
 800f61a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f61e:	f103 031a 	add.w	r3, r3, #26
 800f622:	881b      	ldrh	r3, [r3, #0]
 800f624:	b2da      	uxtb	r2, r3
 800f626:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f62a:	f803 2c4a 	strb.w	r2, [r3, #-74]
		  allData[3]=(SystemConfig.PocketIndex & 0xFF000000) >> 24;
 800f62e:	4b77      	ldr	r3, [pc, #476]	@ (800f80c <StartSendUARTTask+0x938>)
 800f630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f632:	0e1b      	lsrs	r3, r3, #24
 800f634:	b2da      	uxtb	r2, r3
 800f636:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f63a:	f803 2c49 	strb.w	r2, [r3, #-73]
		  allData[4]=(SystemConfig.PocketIndex & 0x00FF0000) >> 16;
 800f63e:	4b73      	ldr	r3, [pc, #460]	@ (800f80c <StartSendUARTTask+0x938>)
 800f640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f642:	141b      	asrs	r3, r3, #16
 800f644:	b2da      	uxtb	r2, r3
 800f646:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f64a:	f803 2c48 	strb.w	r2, [r3, #-72]
		  allData[5]=(SystemConfig.PocketIndex & 0x0000FF00) >> 8;
 800f64e:	4b6f      	ldr	r3, [pc, #444]	@ (800f80c <StartSendUARTTask+0x938>)
 800f650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f652:	121b      	asrs	r3, r3, #8
 800f654:	b2da      	uxtb	r2, r3
 800f656:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f65a:	f803 2c47 	strb.w	r2, [r3, #-71]
		  allData[6]=(SystemConfig.PocketIndex & 0x000000FF);
 800f65e:	4b6b      	ldr	r3, [pc, #428]	@ (800f80c <StartSendUARTTask+0x938>)
 800f660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f662:	b2da      	uxtb	r2, r3
 800f664:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f668:	f803 2c46 	strb.w	r2, [r3, #-70]
		  uint32_t time=(StartTimerTicks-SystemConfig.StartTestTime)/10;
 800f66c:	4b68      	ldr	r3, [pc, #416]	@ (800f810 <StartSendUARTTask+0x93c>)
 800f66e:	681a      	ldr	r2, [r3, #0]
 800f670:	4b66      	ldr	r3, [pc, #408]	@ (800f80c <StartSendUARTTask+0x938>)
 800f672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f674:	1ad3      	subs	r3, r2, r3
 800f676:	4a67      	ldr	r2, [pc, #412]	@ (800f814 <StartSendUARTTask+0x940>)
 800f678:	fba2 2303 	umull	r2, r3, r2, r3
 800f67c:	08db      	lsrs	r3, r3, #3
 800f67e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800f682:	f102 0214 	add.w	r2, r2, #20
 800f686:	6013      	str	r3, [r2, #0]
		  allData[7]=(time & 0xFF000000) >> 24;
 800f688:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f68c:	f103 0314 	add.w	r3, r3, #20
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	0e1b      	lsrs	r3, r3, #24
 800f694:	b2da      	uxtb	r2, r3
 800f696:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f69a:	f803 2c45 	strb.w	r2, [r3, #-69]
		  allData[8]=(time & 0x00FF0000) >> 16;
 800f69e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f6a2:	f103 0314 	add.w	r3, r3, #20
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	0c1b      	lsrs	r3, r3, #16
 800f6aa:	b2da      	uxtb	r2, r3
 800f6ac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6b0:	f803 2c44 	strb.w	r2, [r3, #-68]
		  allData[9]=(time & 0x0000FF00) >> 8;
 800f6b4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f6b8:	f103 0314 	add.w	r3, r3, #20
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	0a1b      	lsrs	r3, r3, #8
 800f6c0:	b2da      	uxtb	r2, r3
 800f6c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6c6:	f803 2c43 	strb.w	r2, [r3, #-67]
		  allData[10]=(time & 0x000000FF);
 800f6ca:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f6ce:	f103 0314 	add.w	r3, r3, #20
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	b2da      	uxtb	r2, r3
 800f6d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6da:	f803 2c42 	strb.w	r2, [r3, #-66]
		  uint8_t status=0;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f6e4:	f102 0203 	add.w	r2, r2, #3
 800f6e8:	7013      	strb	r3, [r2, #0]
		  if(HasCalibration()){
 800f6ea:	f001 f8d1 	bl	8010890 <HasCalibration>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	bf14      	ite	ne
 800f6f4:	2301      	movne	r3, #1
 800f6f6:	2300      	moveq	r3, #0
 800f6f8:	b2db      	uxtb	r3, r3
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00a      	beq.n	800f714 <StartSendUARTTask+0x840>
			  status+=1;
 800f6fe:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f702:	f103 0303 	add.w	r3, r3, #3
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	3301      	adds	r3, #1
 800f70a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f70e:	f102 0203 	add.w	r2, r2, #3
 800f712:	7013      	strb	r3, [r2, #0]
		  }
		  if(HasLoadcell(false)){
 800f714:	2000      	movs	r0, #0
 800f716:	f001 f8db 	bl	80108d0 <HasLoadcell>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	bf14      	ite	ne
 800f720:	2301      	movne	r3, #1
 800f722:	2300      	moveq	r3, #0
 800f724:	b2db      	uxtb	r3, r3
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00a      	beq.n	800f740 <StartSendUARTTask+0x86c>
			  status+=2;
 800f72a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f72e:	f103 0303 	add.w	r3, r3, #3
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	3302      	adds	r3, #2
 800f736:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f73a:	f102 0203 	add.w	r2, r2, #3
 800f73e:	7013      	strb	r3, [r2, #0]
		  }
		  if(HasFirstEmg(false)){
 800f740:	2000      	movs	r0, #0
 800f742:	f001 f8ed 	bl	8010920 <HasFirstEmg>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	bf14      	ite	ne
 800f74c:	2301      	movne	r3, #1
 800f74e:	2300      	moveq	r3, #0
 800f750:	b2db      	uxtb	r3, r3
 800f752:	2b00      	cmp	r3, #0
 800f754:	d00a      	beq.n	800f76c <StartSendUARTTask+0x898>
			  status+=4;
 800f756:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f75a:	f103 0303 	add.w	r3, r3, #3
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	3304      	adds	r3, #4
 800f762:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f766:	f102 0203 	add.w	r2, r2, #3
 800f76a:	7013      	strb	r3, [r2, #0]
		  }
		  if(HasSecondEmg(false)){
 800f76c:	2000      	movs	r0, #0
 800f76e:	f001 f8f7 	bl	8010960 <HasSecondEmg>
 800f772:	4603      	mov	r3, r0
 800f774:	2b00      	cmp	r3, #0
 800f776:	bf14      	ite	ne
 800f778:	2301      	movne	r3, #1
 800f77a:	2300      	moveq	r3, #0
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d00a      	beq.n	800f798 <StartSendUARTTask+0x8c4>
			  status+=8;
 800f782:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f786:	f103 0303 	add.w	r3, r3, #3
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	3308      	adds	r3, #8
 800f78e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f792:	f102 0203 	add.w	r2, r2, #3
 800f796:	7013      	strb	r3, [r2, #0]
		  }
		  allData[11]=status;
 800f798:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f79c:	461a      	mov	r2, r3
 800f79e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f7a2:	f103 0303 	add.w	r3, r3, #3
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	f802 3c41 	strb.w	r3, [r2, #-65]
		  if(SystemConfig.IsStartTest){
 800f7ac:	4b17      	ldr	r3, [pc, #92]	@ (800f80c <StartSendUARTTask+0x938>)
 800f7ae:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	f000 8086 	beq.w	800f8c4 <StartSendUARTTask+0x9f0>
			  if(SystemConfig.StartHandleSeconds>0&&SystemConfig.StartHandleSeconds*1000<time&&LoadCellInstance.IsFirstHandle==false){
 800f7b8:	4b14      	ldr	r3, [pc, #80]	@ (800f80c <StartSendUARTTask+0x938>)
 800f7ba:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d019      	beq.n	800f7f6 <StartSendUARTTask+0x922>
 800f7c2:	4b12      	ldr	r3, [pc, #72]	@ (800f80c <StartSendUARTTask+0x938>)
 800f7c4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f7ce:	fb02 f303 	mul.w	r3, r2, r3
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f7d8:	f103 0314 	add.w	r3, r3, #20
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d909      	bls.n	800f7f6 <StartSendUARTTask+0x922>
 800f7e2:	4b08      	ldr	r3, [pc, #32]	@ (800f804 <StartSendUARTTask+0x930>)
 800f7e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f7e8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d101      	bne.n	800f7f6 <StartSendUARTTask+0x922>
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	e000      	b.n	800f7f8 <StartSendUARTTask+0x924>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d00f      	beq.n	800f81c <StartSendUARTTask+0x948>
				  //SystemConfig.IsInternalClean=true;
				  //CommunicationInstance.StopTest(5000);
				  CommunicationInstance.cancelTest();
 800f7fc:	4806      	ldr	r0, [pc, #24]	@ (800f818 <StartSendUARTTask+0x944>)
 800f7fe:	f7fb fe33 	bl	800b468 <_ZN13Communication10cancelTestEv>
				continue;
 800f802:	e070      	b.n	800f8e6 <StartSendUARTTask+0xa12>
 800f804:	200070c4 	.word	0x200070c4
 800f808:	20009138 	.word	0x20009138
 800f80c:	20009328 	.word	0x20009328
 800f810:	200000cc 	.word	0x200000cc
 800f814:	cccccccd 	.word	0xcccccccd
 800f818:	200090fc 	.word	0x200090fc
			  }
			  if(SystemConfig.WaitAfterProcessSeconds>0&&SystemConfig.WaitAfterProcessSeconds*10000<StartTimerTicks-LoadCellInstance.LastHandleProcessTime&&LoadCellInstance.IsFirstHandle==true){
 800f81c:	4b33      	ldr	r3, [pc, #204]	@ (800f8ec <StartSendUARTTask+0xa18>)
 800f81e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800f822:	2b00      	cmp	r3, #0
 800f824:	d01b      	beq.n	800f85e <StartSendUARTTask+0x98a>
 800f826:	4b31      	ldr	r3, [pc, #196]	@ (800f8ec <StartSendUARTTask+0xa18>)
 800f828:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800f82c:	461a      	mov	r2, r3
 800f82e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f832:	fb02 f303 	mul.w	r3, r2, r3
 800f836:	4619      	mov	r1, r3
 800f838:	4b2d      	ldr	r3, [pc, #180]	@ (800f8f0 <StartSendUARTTask+0xa1c>)
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	4b2d      	ldr	r3, [pc, #180]	@ (800f8f4 <StartSendUARTTask+0xa20>)
 800f83e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f844:	1ad3      	subs	r3, r2, r3
 800f846:	4299      	cmp	r1, r3
 800f848:	d209      	bcs.n	800f85e <StartSendUARTTask+0x98a>
 800f84a:	4b2a      	ldr	r3, [pc, #168]	@ (800f8f4 <StartSendUARTTask+0xa20>)
 800f84c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f850:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f854:	b2db      	uxtb	r3, r3
 800f856:	2b01      	cmp	r3, #1
 800f858:	d101      	bne.n	800f85e <StartSendUARTTask+0x98a>
 800f85a:	2301      	movs	r3, #1
 800f85c:	e000      	b.n	800f860 <StartSendUARTTask+0x98c>
 800f85e:	2300      	movs	r3, #0
 800f860:	2b00      	cmp	r3, #0
 800f862:	d009      	beq.n	800f878 <StartSendUARTTask+0x9a4>
				  SystemConfig.IsInternalClean=true;
 800f864:	4b21      	ldr	r3, [pc, #132]	@ (800f8ec <StartSendUARTTask+0xa18>)
 800f866:	2201      	movs	r2, #1
 800f868:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
				  CommunicationInstance.StopTest(5000);
 800f86c:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f870:	4821      	ldr	r0, [pc, #132]	@ (800f8f8 <StartSendUARTTask+0xa24>)
 800f872:	f7fb fd7f 	bl	800b374 <_ZN13Communication8StopTestEt>
				  //CommunicationInstance.cancelTest();
				continue;
 800f876:	e036      	b.n	800f8e6 <StartSendUARTTask+0xa12>
			  }
			  communicationSemaphoreVal = osSemaphoreAcquire(ThreadStorage.CommunicationSemaphoreHandle, 1000);
 800f878:	4b20      	ldr	r3, [pc, #128]	@ (800f8fc <StartSendUARTTask+0xa28>)
 800f87a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800f87e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f882:	4618      	mov	r0, r3
 800f884:	f7f7 f95e 	bl	8006b44 <osSemaphoreAcquire>
 800f888:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f88c:	f103 0310 	add.w	r3, r3, #16
 800f890:	6018      	str	r0, [r3, #0]
			  if(communicationSemaphoreVal==osOK){
 800f892:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f896:	f103 0310 	add.w	r3, r3, #16
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d111      	bne.n	800f8c4 <StartSendUARTTask+0x9f0>
				  WriteUart(allData,totalLen);
 800f8a0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f8a4:	f103 0316 	add.w	r3, r3, #22
 800f8a8:	881a      	ldrh	r2, [r3, #0]
 800f8aa:	f107 0318 	add.w	r3, r7, #24
 800f8ae:	3b0c      	subs	r3, #12
 800f8b0:	4611      	mov	r1, r2
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7ff fae4 	bl	800ee80 <WriteUart>
				  osSemaphoreRelease(ThreadStorage.CommunicationSemaphoreHandle);
 800f8b8:	4b10      	ldr	r3, [pc, #64]	@ (800f8fc <StartSendUARTTask+0xa28>)
 800f8ba:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7f7 f992 	bl	8006be8 <osSemaphoreRelease>
			  }
		  }
		SystemConfig.PocketIndex++;
 800f8c4:	4b09      	ldr	r3, [pc, #36]	@ (800f8ec <StartSendUARTTask+0xa18>)
 800f8c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	4a08      	ldr	r2, [pc, #32]	@ (800f8ec <StartSendUARTTask+0xa18>)
 800f8cc:	66d3      	str	r3, [r2, #108]	@ 0x6c
	  }
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800f8ce:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f8d2:	f103 030c 	add.w	r3, r3, #12
 800f8d6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f8da:	f102 021c 	add.w	r2, r2, #28
 800f8de:	6811      	ldr	r1, [r2, #0]
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7f8 fcf3 	bl	80082cc <vTaskDelayUntil>
  }
 800f8e6:	f7ff bb12 	b.w	800ef0e <StartSendUARTTask+0x3a>
 800f8ea:	bf00      	nop
 800f8ec:	20009328 	.word	0x20009328
 800f8f0:	200000cc 	.word	0x200000cc
 800f8f4:	200070c4 	.word	0x200070c4
 800f8f8:	200090fc 	.word	0x200090fc
 800f8fc:	20009138 	.word	0x20009138

0800f900 <StartFirstEmgTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFirstEmgTask */
void StartFirstEmgTask(void *argument)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b084      	sub	sp, #16
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.FirstEmgPerSecond) / portTICK_PERIOD_MS;
 800f908:	4b17      	ldr	r3, [pc, #92]	@ (800f968 <StartFirstEmgTask+0x68>)
 800f90a:	785b      	ldrb	r3, [r3, #1]
 800f90c:	461a      	mov	r2, r3
 800f90e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f912:	fb93 f3f2 	sdiv	r3, r3, r2
 800f916:	60fb      	str	r3, [r7, #12]
	ThreadStorage.FirstEmgSemaphoreHandle = osSemaphoreNew(1, 1, &firstEmgSemaphore_attributes);
 800f918:	4a14      	ldr	r2, [pc, #80]	@ (800f96c <StartFirstEmgTask+0x6c>)
 800f91a:	2101      	movs	r1, #1
 800f91c:	2001      	movs	r0, #1
 800f91e:	f7f7 f888 	bl	8006a32 <osSemaphoreNew>
 800f922:	4603      	mov	r3, r0
 800f924:	4a12      	ldr	r2, [pc, #72]	@ (800f970 <StartFirstEmgTask+0x70>)
 800f926:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
	osStatus_t emgSemaphoreVal;
	for(;;)
	{
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FirstEmgSemaphoreHandle, 1000);
 800f92a:	4b11      	ldr	r3, [pc, #68]	@ (800f970 <StartFirstEmgTask+0x70>)
 800f92c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800f930:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f934:	4618      	mov	r0, r3
 800f936:	f7f7 f905 	bl	8006b44 <osSemaphoreAcquire>
 800f93a:	60b8      	str	r0, [r7, #8]
		if(emgSemaphoreVal==osOK){
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1f3      	bne.n	800f92a <StartFirstEmgTask+0x2a>
			firstEmgCounter++;
 800f942:	4b0c      	ldr	r3, [pc, #48]	@ (800f974 <StartFirstEmgTask+0x74>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	3301      	adds	r3, #1
 800f948:	4a0a      	ldr	r2, [pc, #40]	@ (800f974 <StartFirstEmgTask+0x74>)
 800f94a:	6013      	str	r3, [r2, #0]
			EmgInstance.FirstEmgRead(true);
 800f94c:	2101      	movs	r1, #1
 800f94e:	480a      	ldr	r0, [pc, #40]	@ (800f978 <StartFirstEmgTask+0x78>)
 800f950:	f7fb ffe6 	bl	800b920 <_ZN3Emg12FirstEmgReadEb>
			osSemaphoreRelease(ThreadStorage.FirstEmgSemaphoreHandle);
 800f954:	4b06      	ldr	r3, [pc, #24]	@ (800f970 <StartFirstEmgTask+0x70>)
 800f956:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7f7 f944 	bl	8006be8 <osSemaphoreRelease>
			vTaskDelay( xDelay );
 800f960:	68f8      	ldr	r0, [r7, #12]
 800f962:	f7f8 fd33 	bl	80083cc <vTaskDelay>
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FirstEmgSemaphoreHandle, 1000);
 800f966:	e7e0      	b.n	800f92a <StartFirstEmgTask+0x2a>
 800f968:	20009328 	.word	0x20009328
 800f96c:	08011cc0 	.word	0x08011cc0
 800f970:	20009138 	.word	0x20009138
 800f974:	20005070 	.word	0x20005070
 800f978:	20005080 	.word	0x20005080

0800f97c <StartReadFirstEmgTask>:
	}
  /* USER CODE END 5 */
}

void StartReadFirstEmgTask(void *argument)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b08a      	sub	sp, #40	@ 0x28
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.FirstEmgPerSecond) / portTICK_PERIOD_MS;
 800f984:	4b32      	ldr	r3, [pc, #200]	@ (800fa50 <StartReadFirstEmgTask+0xd4>)
 800f986:	785b      	ldrb	r3, [r3, #1]
 800f988:	461a      	mov	r2, r3
 800f98a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f98e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f992:	627b      	str	r3, [r7, #36]	@ 0x24
	ThreadStorage.FirstEmgSemaphoreHandle = osSemaphoreNew(1, 1, &firstEmgSemaphore_attributes);
 800f994:	4a2f      	ldr	r2, [pc, #188]	@ (800fa54 <StartReadFirstEmgTask+0xd8>)
 800f996:	2101      	movs	r1, #1
 800f998:	2001      	movs	r0, #1
 800f99a:	f7f7 f84a 	bl	8006a32 <osSemaphoreNew>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	4a2d      	ldr	r2, [pc, #180]	@ (800fa58 <StartReadFirstEmgTask+0xdc>)
 800f9a2:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
	osStatus_t emgSemaphoreVal;
	uint8_t data[8];
	SystemConfig.StartTestTime=StartTimerTicks;
 800f9a6:	4b2d      	ldr	r3, [pc, #180]	@ (800fa5c <StartReadFirstEmgTask+0xe0>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a29      	ldr	r2, [pc, #164]	@ (800fa50 <StartReadFirstEmgTask+0xd4>)
 800f9ac:	6313      	str	r3, [r2, #48]	@ 0x30
	for(;;)
	{
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FirstEmgSemaphoreHandle, 1000);
 800f9ae:	4b2a      	ldr	r3, [pc, #168]	@ (800fa58 <StartReadFirstEmgTask+0xdc>)
 800f9b0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800f9b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7f7 f8c3 	bl	8006b44 <osSemaphoreAcquire>
 800f9be:	6238      	str	r0, [r7, #32]
		if(emgSemaphoreVal==osOK){
 800f9c0:	6a3b      	ldr	r3, [r7, #32]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d140      	bne.n	800fa48 <StartReadFirstEmgTask+0xcc>
			EmgInstance.FirstEmgRead(false);
 800f9c6:	2100      	movs	r1, #0
 800f9c8:	4825      	ldr	r0, [pc, #148]	@ (800fa60 <StartReadFirstEmgTask+0xe4>)
 800f9ca:	f7fb ffa9 	bl	800b920 <_ZN3Emg12FirstEmgReadEb>
			float32_t emgValue=EmgInstance.FirstEmgValue;
 800f9ce:	4b24      	ldr	r3, [pc, #144]	@ (800fa60 <StartReadFirstEmgTask+0xe4>)
 800f9d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9d2:	ee07 3a90 	vmov	s15, r3
 800f9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9da:	edc7 7a03 	vstr	s15, [r7, #12]
			uint8_t *emgArray;
			emgArray = (uint8_t*)(&emgValue );
 800f9de:	f107 030c 	add.w	r3, r7, #12
 800f9e2:	61fb      	str	r3, [r7, #28]
			uint32_t time=(StartTimerTicks-SystemConfig.StartTestTime)/10;
 800f9e4:	4b1d      	ldr	r3, [pc, #116]	@ (800fa5c <StartReadFirstEmgTask+0xe0>)
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	4b19      	ldr	r3, [pc, #100]	@ (800fa50 <StartReadFirstEmgTask+0xd4>)
 800f9ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9ec:	1ad3      	subs	r3, r2, r3
 800f9ee:	4a1d      	ldr	r2, [pc, #116]	@ (800fa64 <StartReadFirstEmgTask+0xe8>)
 800f9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800f9f4:	08db      	lsrs	r3, r3, #3
 800f9f6:	61bb      	str	r3, [r7, #24]
			data[0]=(time & 0xFF000000) >> 24;
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	0e1b      	lsrs	r3, r3, #24
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	743b      	strb	r3, [r7, #16]
			data[1]=(time & 0x00FF0000) >> 16;
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	0c1b      	lsrs	r3, r3, #16
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	747b      	strb	r3, [r7, #17]
			data[2]=(time & 0x0000FF00) >> 8;
 800fa08:	69bb      	ldr	r3, [r7, #24]
 800fa0a:	0a1b      	lsrs	r3, r3, #8
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	74bb      	strb	r3, [r7, #18]
			data[3]=(time & 0x000000FF);
 800fa10:	69bb      	ldr	r3, [r7, #24]
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	74fb      	strb	r3, [r7, #19]
			data[4]=emgArray[0];
 800fa16:	69fb      	ldr	r3, [r7, #28]
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	753b      	strb	r3, [r7, #20]
			data[5]=emgArray[1];
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	785b      	ldrb	r3, [r3, #1]
 800fa20:	757b      	strb	r3, [r7, #21]
			data[6]=emgArray[2];
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	789b      	ldrb	r3, [r3, #2]
 800fa26:	75bb      	strb	r3, [r7, #22]
			data[7]=emgArray[3];
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	78db      	ldrb	r3, [r3, #3]
 800fa2c:	75fb      	strb	r3, [r7, #23]
			//WriteUart(emgArray, 4);
			SuccessDataResult(0, SuccessDataType::SD_FirstEmg, data, 8);
 800fa2e:	f107 0210 	add.w	r2, r7, #16
 800fa32:	2308      	movs	r3, #8
 800fa34:	210a      	movs	r1, #10
 800fa36:	2000      	movs	r0, #0
 800fa38:	f7ff f92f 	bl	800ec9a <SuccessDataResult>
			osSemaphoreRelease(ThreadStorage.FirstEmgSemaphoreHandle);
 800fa3c:	4b06      	ldr	r3, [pc, #24]	@ (800fa58 <StartReadFirstEmgTask+0xdc>)
 800fa3e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7f7 f8d0 	bl	8006be8 <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800fa48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fa4a:	f7f8 fcbf 	bl	80083cc <vTaskDelay>
	}
 800fa4e:	e7ae      	b.n	800f9ae <StartReadFirstEmgTask+0x32>
 800fa50:	20009328 	.word	0x20009328
 800fa54:	08011cc0 	.word	0x08011cc0
 800fa58:	20009138 	.word	0x20009138
 800fa5c:	200000cc 	.word	0x200000cc
 800fa60:	20005080 	.word	0x20005080
 800fa64:	cccccccd 	.word	0xcccccccd

0800fa68 <StartSecondEmgTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSecondEmgTask */
void StartSecondEmgTask(void *argument)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.SecondEmgPerSecond) / portTICK_PERIOD_MS;
 800fa70:	4b17      	ldr	r3, [pc, #92]	@ (800fad0 <StartSecondEmgTask+0x68>)
 800fa72:	789b      	ldrb	r3, [r3, #2]
 800fa74:	461a      	mov	r2, r3
 800fa76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa7e:	60fb      	str	r3, [r7, #12]
	ThreadStorage.SecondEmgSemaphoreHandle = osSemaphoreNew(1, 1, &secondEmgSemaphore_attributes);
 800fa80:	4a14      	ldr	r2, [pc, #80]	@ (800fad4 <StartSecondEmgTask+0x6c>)
 800fa82:	2101      	movs	r1, #1
 800fa84:	2001      	movs	r0, #1
 800fa86:	f7f6 ffd4 	bl	8006a32 <osSemaphoreNew>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	4a12      	ldr	r2, [pc, #72]	@ (800fad8 <StartSecondEmgTask+0x70>)
 800fa8e:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
	osStatus_t emgSemaphoreVal;
	for(;;)
	{
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.SecondEmgSemaphoreHandle, 1000);
 800fa92:	4b11      	ldr	r3, [pc, #68]	@ (800fad8 <StartSecondEmgTask+0x70>)
 800fa94:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800fa98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7f7 f851 	bl	8006b44 <osSemaphoreAcquire>
 800faa2:	60b8      	str	r0, [r7, #8]
		if(emgSemaphoreVal==osOK){
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d10e      	bne.n	800fac8 <StartSecondEmgTask+0x60>
			secondEmgCounter++;
 800faaa:	4b0c      	ldr	r3, [pc, #48]	@ (800fadc <StartSecondEmgTask+0x74>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	3301      	adds	r3, #1
 800fab0:	4a0a      	ldr	r2, [pc, #40]	@ (800fadc <StartSecondEmgTask+0x74>)
 800fab2:	6013      	str	r3, [r2, #0]
			EmgInstance.SecondEmgRead(true);
 800fab4:	2101      	movs	r1, #1
 800fab6:	480a      	ldr	r0, [pc, #40]	@ (800fae0 <StartSecondEmgTask+0x78>)
 800fab8:	f7fb ffaa 	bl	800ba10 <_ZN3Emg13SecondEmgReadEb>
			osSemaphoreRelease(ThreadStorage.SecondEmgSemaphoreHandle);
 800fabc:	4b06      	ldr	r3, [pc, #24]	@ (800fad8 <StartSecondEmgTask+0x70>)
 800fabe:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7f7 f890 	bl	8006be8 <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800fac8:	68f8      	ldr	r0, [r7, #12]
 800faca:	f7f8 fc7f 	bl	80083cc <vTaskDelay>
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.SecondEmgSemaphoreHandle, 1000);
 800face:	e7e0      	b.n	800fa92 <StartSecondEmgTask+0x2a>
 800fad0:	20009328 	.word	0x20009328
 800fad4:	08011cd0 	.word	0x08011cd0
 800fad8:	20009138 	.word	0x20009138
 800fadc:	20005074 	.word	0x20005074
 800fae0:	20005080 	.word	0x20005080

0800fae4 <StartReadSecondEmgTask>:
	}
  /* USER CODE END 5 */
}

void StartReadSecondEmgTask(void *argument)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b08a      	sub	sp, #40	@ 0x28
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.SecondEmgPerSecond) / portTICK_PERIOD_MS;
 800faec:	4b32      	ldr	r3, [pc, #200]	@ (800fbb8 <StartReadSecondEmgTask+0xd4>)
 800faee:	789b      	ldrb	r3, [r3, #2]
 800faf0:	461a      	mov	r2, r3
 800faf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800faf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800fafa:	627b      	str	r3, [r7, #36]	@ 0x24
	ThreadStorage.SecondEmgSemaphoreHandle = osSemaphoreNew(1, 1, &secondEmgSemaphore_attributes);
 800fafc:	4a2f      	ldr	r2, [pc, #188]	@ (800fbbc <StartReadSecondEmgTask+0xd8>)
 800fafe:	2101      	movs	r1, #1
 800fb00:	2001      	movs	r0, #1
 800fb02:	f7f6 ff96 	bl	8006a32 <osSemaphoreNew>
 800fb06:	4603      	mov	r3, r0
 800fb08:	4a2d      	ldr	r2, [pc, #180]	@ (800fbc0 <StartReadSecondEmgTask+0xdc>)
 800fb0a:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
	osStatus_t emgSemaphoreVal;
	uint8_t data[8];
	SystemConfig.StartTestTime=StartTimerTicks;
 800fb0e:	4b2d      	ldr	r3, [pc, #180]	@ (800fbc4 <StartReadSecondEmgTask+0xe0>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	4a29      	ldr	r2, [pc, #164]	@ (800fbb8 <StartReadSecondEmgTask+0xd4>)
 800fb14:	6313      	str	r3, [r2, #48]	@ 0x30
	for(;;)
	{
		emgSemaphoreVal = osSemaphoreAcquire(ThreadStorage.SecondEmgSemaphoreHandle, 1000);
 800fb16:	4b2a      	ldr	r3, [pc, #168]	@ (800fbc0 <StartReadSecondEmgTask+0xdc>)
 800fb18:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800fb1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7f7 f80f 	bl	8006b44 <osSemaphoreAcquire>
 800fb26:	6238      	str	r0, [r7, #32]
		if(emgSemaphoreVal==osOK){
 800fb28:	6a3b      	ldr	r3, [r7, #32]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d140      	bne.n	800fbb0 <StartReadSecondEmgTask+0xcc>
			EmgInstance.SecondEmgRead(false);
 800fb2e:	2100      	movs	r1, #0
 800fb30:	4825      	ldr	r0, [pc, #148]	@ (800fbc8 <StartReadSecondEmgTask+0xe4>)
 800fb32:	f7fb ff6d 	bl	800ba10 <_ZN3Emg13SecondEmgReadEb>
			float32_t emgValue=EmgInstance.SecondEmgValue;
 800fb36:	4b24      	ldr	r3, [pc, #144]	@ (800fbc8 <StartReadSecondEmgTask+0xe4>)
 800fb38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb3a:	ee07 3a90 	vmov	s15, r3
 800fb3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb42:	edc7 7a03 	vstr	s15, [r7, #12]
			uint8_t *emgArray;
			emgArray = (uint8_t*)(&emgValue );
 800fb46:	f107 030c 	add.w	r3, r7, #12
 800fb4a:	61fb      	str	r3, [r7, #28]
			uint32_t time=(StartTimerTicks-SystemConfig.StartTestTime)/10;
 800fb4c:	4b1d      	ldr	r3, [pc, #116]	@ (800fbc4 <StartReadSecondEmgTask+0xe0>)
 800fb4e:	681a      	ldr	r2, [r3, #0]
 800fb50:	4b19      	ldr	r3, [pc, #100]	@ (800fbb8 <StartReadSecondEmgTask+0xd4>)
 800fb52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb54:	1ad3      	subs	r3, r2, r3
 800fb56:	4a1d      	ldr	r2, [pc, #116]	@ (800fbcc <StartReadSecondEmgTask+0xe8>)
 800fb58:	fba2 2303 	umull	r2, r3, r2, r3
 800fb5c:	08db      	lsrs	r3, r3, #3
 800fb5e:	61bb      	str	r3, [r7, #24]
			data[0]=(time & 0xFF000000) >> 24;
 800fb60:	69bb      	ldr	r3, [r7, #24]
 800fb62:	0e1b      	lsrs	r3, r3, #24
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	743b      	strb	r3, [r7, #16]
			data[1]=(time & 0x00FF0000) >> 16;
 800fb68:	69bb      	ldr	r3, [r7, #24]
 800fb6a:	0c1b      	lsrs	r3, r3, #16
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	747b      	strb	r3, [r7, #17]
			data[2]=(time & 0x0000FF00) >> 8;
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	0a1b      	lsrs	r3, r3, #8
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	74bb      	strb	r3, [r7, #18]
			data[3]=(time & 0x000000FF);
 800fb78:	69bb      	ldr	r3, [r7, #24]
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	74fb      	strb	r3, [r7, #19]
			data[4]=emgArray[0];
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	753b      	strb	r3, [r7, #20]
			data[5]=emgArray[1];
 800fb84:	69fb      	ldr	r3, [r7, #28]
 800fb86:	785b      	ldrb	r3, [r3, #1]
 800fb88:	757b      	strb	r3, [r7, #21]
			data[6]=emgArray[2];
 800fb8a:	69fb      	ldr	r3, [r7, #28]
 800fb8c:	789b      	ldrb	r3, [r3, #2]
 800fb8e:	75bb      	strb	r3, [r7, #22]
			data[7]=emgArray[3];
 800fb90:	69fb      	ldr	r3, [r7, #28]
 800fb92:	78db      	ldrb	r3, [r3, #3]
 800fb94:	75fb      	strb	r3, [r7, #23]
			SuccessDataResult(0, SuccessDataType::SD_SecondEmg, data, 8);
 800fb96:	f107 0210 	add.w	r2, r7, #16
 800fb9a:	2308      	movs	r3, #8
 800fb9c:	210b      	movs	r1, #11
 800fb9e:	2000      	movs	r0, #0
 800fba0:	f7ff f87b 	bl	800ec9a <SuccessDataResult>
			osSemaphoreRelease(ThreadStorage.SecondEmgSemaphoreHandle);
 800fba4:	4b06      	ldr	r3, [pc, #24]	@ (800fbc0 <StartReadSecondEmgTask+0xdc>)
 800fba6:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7f7 f81c 	bl	8006be8 <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800fbb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fbb2:	f7f8 fc0b 	bl	80083cc <vTaskDelay>
	}
 800fbb6:	e7ae      	b.n	800fb16 <StartReadSecondEmgTask+0x32>
 800fbb8:	20009328 	.word	0x20009328
 800fbbc:	08011cd0 	.word	0x08011cd0
 800fbc0:	20009138 	.word	0x20009138
 800fbc4:	200000cc 	.word	0x200000cc
 800fbc8:	20005080 	.word	0x20005080
 800fbcc:	cccccccd 	.word	0xcccccccd

0800fbd0 <StartFlowTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000/SystemConfig.FlowPerSecond) / portTICK_PERIOD_MS;
 800fbd8:	4b17      	ldr	r3, [pc, #92]	@ (800fc38 <StartFlowTask+0x68>)
 800fbda:	791b      	ldrb	r3, [r3, #4]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbe2:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbe6:	60fb      	str	r3, [r7, #12]
	ThreadStorage.FlowSemaphoreHandle = osSemaphoreNew(1, 1, &flowSemaphore_attributes);
 800fbe8:	4a14      	ldr	r2, [pc, #80]	@ (800fc3c <StartFlowTask+0x6c>)
 800fbea:	2101      	movs	r1, #1
 800fbec:	2001      	movs	r0, #1
 800fbee:	f7f6 ff20 	bl	8006a32 <osSemaphoreNew>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	4a12      	ldr	r2, [pc, #72]	@ (800fc40 <StartFlowTask+0x70>)
 800fbf6:	f8c2 31d8 	str.w	r3, [r2, #472]	@ 0x1d8
	osStatus_t flowSemaphoreVal;
	for(;;)
	{
		flowSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FlowSemaphoreHandle, 1000);
 800fbfa:	4b11      	ldr	r3, [pc, #68]	@ (800fc40 <StartFlowTask+0x70>)
 800fbfc:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800fc00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7f6 ff9d 	bl	8006b44 <osSemaphoreAcquire>
 800fc0a:	60b8      	str	r0, [r7, #8]
		if(flowSemaphoreVal==osOK){
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d10e      	bne.n	800fc30 <StartFlowTask+0x60>
			flowCounter++;
 800fc12:	4b0c      	ldr	r3, [pc, #48]	@ (800fc44 <StartFlowTask+0x74>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	3301      	adds	r3, #1
 800fc18:	4a0a      	ldr	r2, [pc, #40]	@ (800fc44 <StartFlowTask+0x74>)
 800fc1a:	6013      	str	r3, [r2, #0]
			LoadCellInstance.ReadFlow(true);
 800fc1c:	2101      	movs	r1, #1
 800fc1e:	480a      	ldr	r0, [pc, #40]	@ (800fc48 <StartFlowTask+0x78>)
 800fc20:	f7fe f976 	bl	800df10 <_ZN8LoadCell8ReadFlowEb>
			osSemaphoreRelease(ThreadStorage.FlowSemaphoreHandle);
 800fc24:	4b06      	ldr	r3, [pc, #24]	@ (800fc40 <StartFlowTask+0x70>)
 800fc26:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7f6 ffdc 	bl	8006be8 <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f7f8 fbcb 	bl	80083cc <vTaskDelay>
		flowSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FlowSemaphoreHandle, 1000);
 800fc36:	e7e0      	b.n	800fbfa <StartFlowTask+0x2a>
 800fc38:	20009328 	.word	0x20009328
 800fc3c:	08011ce0 	.word	0x08011ce0
 800fc40:	20009138 	.word	0x20009138
 800fc44:	20005078 	.word	0x20005078
 800fc48:	200070c4 	.word	0x200070c4

0800fc4c <StartReadFlowTask>:
	}
  /* USER CODE END 5 */
}
void StartReadFlowTask(void *argument)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b08e      	sub	sp, #56	@ 0x38
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	LoadCellInstance.ClearSamples();
 800fc54:	4838      	ldr	r0, [pc, #224]	@ (800fd38 <StartReadFlowTask+0xec>)
 800fc56:	f7fe fc6d 	bl	800e534 <_ZN8LoadCell12ClearSamplesEv>
	const TickType_t xDelay = (1000/SystemConfig.FlowPerSecond) / portTICK_PERIOD_MS;
 800fc5a:	4b38      	ldr	r3, [pc, #224]	@ (800fd3c <StartReadFlowTask+0xf0>)
 800fc5c:	791b      	ldrb	r3, [r3, #4]
 800fc5e:	461a      	mov	r2, r3
 800fc60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc64:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc68:	637b      	str	r3, [r7, #52]	@ 0x34
	ThreadStorage.FlowSemaphoreHandle = osSemaphoreNew(1, 1, &flowSemaphore_attributes);
 800fc6a:	4a35      	ldr	r2, [pc, #212]	@ (800fd40 <StartReadFlowTask+0xf4>)
 800fc6c:	2101      	movs	r1, #1
 800fc6e:	2001      	movs	r0, #1
 800fc70:	f7f6 fedf 	bl	8006a32 <osSemaphoreNew>
 800fc74:	4603      	mov	r3, r0
 800fc76:	4a33      	ldr	r2, [pc, #204]	@ (800fd44 <StartReadFlowTask+0xf8>)
 800fc78:	f8c2 31d8 	str.w	r3, [r2, #472]	@ 0x1d8
	osStatus_t flowSemaphoreVal;
	float32_t avg=SystemConfig.FlowAverage;
 800fc7c:	4b2f      	ldr	r3, [pc, #188]	@ (800fd3c <StartReadFlowTask+0xf0>)
 800fc7e:	695b      	ldr	r3, [r3, #20]
 800fc80:	ee07 3a90 	vmov	s15, r3
 800fc84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc88:	edc7 7a08 	vstr	s15, [r7, #32]
	uint8_t *avgArray;
	avgArray = (uint8_t*)(&avg );
 800fc8c:	f107 0320 	add.w	r3, r7, #32
 800fc90:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t data[12];
	data[0]=avgArray[0];
 800fc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	753b      	strb	r3, [r7, #20]
	data[1]=avgArray[1];
 800fc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc9a:	785b      	ldrb	r3, [r3, #1]
 800fc9c:	757b      	strb	r3, [r7, #21]
	data[2]=avgArray[2];
 800fc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca0:	789b      	ldrb	r3, [r3, #2]
 800fca2:	75bb      	strb	r3, [r7, #22]
	data[3]=avgArray[3];
 800fca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca6:	78db      	ldrb	r3, [r3, #3]
 800fca8:	75fb      	strb	r3, [r7, #23]
	for(;;)
	{
		flowSemaphoreVal = osSemaphoreAcquire(ThreadStorage.FlowSemaphoreHandle, 1000);
 800fcaa:	4b26      	ldr	r3, [pc, #152]	@ (800fd44 <StartReadFlowTask+0xf8>)
 800fcac:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800fcb0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7f6 ff45 	bl	8006b44 <osSemaphoreAcquire>
 800fcba:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(flowSemaphoreVal==osOK){
 800fcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d136      	bne.n	800fd30 <StartReadFlowTask+0xe4>
			LoadCellInstance.ReadFlow(false);
 800fcc2:	2100      	movs	r1, #0
 800fcc4:	481c      	ldr	r0, [pc, #112]	@ (800fd38 <StartReadFlowTask+0xec>)
 800fcc6:	f7fe f923 	bl	800df10 <_ZN8LoadCell8ReadFlowEb>
			float32_t rate=SystemConfig.FlowRate;
 800fcca:	4b1c      	ldr	r3, [pc, #112]	@ (800fd3c <StartReadFlowTask+0xf0>)
 800fccc:	6a1b      	ldr	r3, [r3, #32]
 800fcce:	613b      	str	r3, [r7, #16]
			uint8_t *rateArray;
			rateArray = (uint8_t*)(&rate );
 800fcd0:	f107 0310 	add.w	r3, r7, #16
 800fcd4:	62bb      	str	r3, [r7, #40]	@ 0x28
			float32_t flow=LoadCellInstance.LastReadFlowValue;
 800fcd6:	4b18      	ldr	r3, [pc, #96]	@ (800fd38 <StartReadFlowTask+0xec>)
 800fcd8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fcdc:	69db      	ldr	r3, [r3, #28]
 800fcde:	60fb      	str	r3, [r7, #12]
			uint8_t *flowArray;
			flowArray = (uint8_t*)(&flow );
 800fce0:	f107 030c 	add.w	r3, r7, #12
 800fce4:	627b      	str	r3, [r7, #36]	@ 0x24
			data[4]=rateArray[0];
 800fce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	763b      	strb	r3, [r7, #24]
			data[5]=rateArray[1];
 800fcec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcee:	785b      	ldrb	r3, [r3, #1]
 800fcf0:	767b      	strb	r3, [r7, #25]
			data[6]=rateArray[2];
 800fcf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcf4:	789b      	ldrb	r3, [r3, #2]
 800fcf6:	76bb      	strb	r3, [r7, #26]
			data[7]=rateArray[3];
 800fcf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcfa:	78db      	ldrb	r3, [r3, #3]
 800fcfc:	76fb      	strb	r3, [r7, #27]
			data[8]=flowArray[0];
 800fcfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	773b      	strb	r3, [r7, #28]
			data[9]=flowArray[1];
 800fd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd06:	785b      	ldrb	r3, [r3, #1]
 800fd08:	777b      	strb	r3, [r7, #29]
			data[10]=flowArray[2];
 800fd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd0c:	789b      	ldrb	r3, [r3, #2]
 800fd0e:	77bb      	strb	r3, [r7, #30]
			data[11]=flowArray[3];
 800fd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd12:	78db      	ldrb	r3, [r3, #3]
 800fd14:	77fb      	strb	r3, [r7, #31]
			SuccessDataResult(0, SuccessDataType::SD_Flow, data, 12);
 800fd16:	f107 0214 	add.w	r2, r7, #20
 800fd1a:	230c      	movs	r3, #12
 800fd1c:	2105      	movs	r1, #5
 800fd1e:	2000      	movs	r0, #0
 800fd20:	f7fe ffbb 	bl	800ec9a <SuccessDataResult>
			osSemaphoreRelease(ThreadStorage.FlowSemaphoreHandle);
 800fd24:	4b07      	ldr	r3, [pc, #28]	@ (800fd44 <StartReadFlowTask+0xf8>)
 800fd26:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7f6 ff5c 	bl	8006be8 <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800fd30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fd32:	f7f8 fb4b 	bl	80083cc <vTaskDelay>
	}
 800fd36:	e7b8      	b.n	800fcaa <StartReadFlowTask+0x5e>
 800fd38:	200070c4 	.word	0x200070c4
 800fd3c:	20009328 	.word	0x20009328
 800fd40:	08011ce0 	.word	0x08011ce0
 800fd44:	20009138 	.word	0x20009138

0800fd48 <StartVolumeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartVolumeTask */
void StartVolumeTask(void *argument)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	LoadCellInstance.ClearSamples();
 800fd50:	4819      	ldr	r0, [pc, #100]	@ (800fdb8 <StartVolumeTask+0x70>)
 800fd52:	f7fe fbef 	bl	800e534 <_ZN8LoadCell12ClearSamplesEv>
	const TickType_t xDelay = (1000/SystemConfig.VolumePerSecond) / portTICK_PERIOD_MS;
 800fd56:	4b19      	ldr	r3, [pc, #100]	@ (800fdbc <StartVolumeTask+0x74>)
 800fd58:	78db      	ldrb	r3, [r3, #3]
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd60:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd64:	60fb      	str	r3, [r7, #12]
	ThreadStorage.VolumeSemaphoreHandle = osSemaphoreNew(1, 1, &volumeSemaphore_attributes);
 800fd66:	4a16      	ldr	r2, [pc, #88]	@ (800fdc0 <StartVolumeTask+0x78>)
 800fd68:	2101      	movs	r1, #1
 800fd6a:	2001      	movs	r0, #1
 800fd6c:	f7f6 fe61 	bl	8006a32 <osSemaphoreNew>
 800fd70:	4603      	mov	r3, r0
 800fd72:	4a14      	ldr	r2, [pc, #80]	@ (800fdc4 <StartVolumeTask+0x7c>)
 800fd74:	f8c2 31dc 	str.w	r3, [r2, #476]	@ 0x1dc
	osStatus_t volumeSemaphoreVal;
	for(;;)
	{
		volumeSemaphoreVal = osSemaphoreAcquire(ThreadStorage.VolumeSemaphoreHandle, 1000);
 800fd78:	4b12      	ldr	r3, [pc, #72]	@ (800fdc4 <StartVolumeTask+0x7c>)
 800fd7a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800fd7e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7f6 fede 	bl	8006b44 <osSemaphoreAcquire>
 800fd88:	60b8      	str	r0, [r7, #8]
		if(volumeSemaphoreVal==osOK){
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d1f3      	bne.n	800fd78 <StartVolumeTask+0x30>
			volumeCounter++;
 800fd90:	4b0d      	ldr	r3, [pc, #52]	@ (800fdc8 <StartVolumeTask+0x80>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	3301      	adds	r3, #1
 800fd96:	4a0c      	ldr	r2, [pc, #48]	@ (800fdc8 <StartVolumeTask+0x80>)
 800fd98:	6013      	str	r3, [r2, #0]
			LoadCellInstance.ReadVolume(true);
 800fd9a:	2101      	movs	r1, #1
 800fd9c:	4806      	ldr	r0, [pc, #24]	@ (800fdb8 <StartVolumeTask+0x70>)
 800fd9e:	f7fd ff01 	bl	800dba4 <_ZN8LoadCell10ReadVolumeEb>
			osSemaphoreRelease(ThreadStorage.VolumeSemaphoreHandle);
 800fda2:	4b08      	ldr	r3, [pc, #32]	@ (800fdc4 <StartVolumeTask+0x7c>)
 800fda4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7f6 ff1d 	bl	8006be8 <osSemaphoreRelease>
			vTaskDelay( xDelay );
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f7f8 fb0c 	bl	80083cc <vTaskDelay>
		volumeSemaphoreVal = osSemaphoreAcquire(ThreadStorage.VolumeSemaphoreHandle, 1000);
 800fdb4:	e7e0      	b.n	800fd78 <StartVolumeTask+0x30>
 800fdb6:	bf00      	nop
 800fdb8:	200070c4 	.word	0x200070c4
 800fdbc:	20009328 	.word	0x20009328
 800fdc0:	08011cf0 	.word	0x08011cf0
 800fdc4:	20009138 	.word	0x20009138
 800fdc8:	2000507c 	.word	0x2000507c

0800fdcc <StartReadVolumeTask>:
	}
  /* USER CODE END 5 */
}

void StartReadVolumeTask(void *argument)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b08e      	sub	sp, #56	@ 0x38
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	LoadCellInstance.ClearSamples();
 800fdd4:	4838      	ldr	r0, [pc, #224]	@ (800feb8 <StartReadVolumeTask+0xec>)
 800fdd6:	f7fe fbad 	bl	800e534 <_ZN8LoadCell12ClearSamplesEv>
	const TickType_t xDelay = (1000/SystemConfig.VolumePerSecond) / portTICK_PERIOD_MS;
 800fdda:	4b38      	ldr	r3, [pc, #224]	@ (800febc <StartReadVolumeTask+0xf0>)
 800fddc:	78db      	ldrb	r3, [r3, #3]
 800fdde:	461a      	mov	r2, r3
 800fde0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fde4:	fb93 f3f2 	sdiv	r3, r3, r2
 800fde8:	637b      	str	r3, [r7, #52]	@ 0x34
	ThreadStorage.VolumeSemaphoreHandle = osSemaphoreNew(1, 1, &volumeSemaphore_attributes);
 800fdea:	4a35      	ldr	r2, [pc, #212]	@ (800fec0 <StartReadVolumeTask+0xf4>)
 800fdec:	2101      	movs	r1, #1
 800fdee:	2001      	movs	r0, #1
 800fdf0:	f7f6 fe1f 	bl	8006a32 <osSemaphoreNew>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	4a33      	ldr	r2, [pc, #204]	@ (800fec4 <StartReadVolumeTask+0xf8>)
 800fdf8:	f8c2 31dc 	str.w	r3, [r2, #476]	@ 0x1dc
	osStatus_t volumeSemaphoreVal;
	float32_t avg=SystemConfig.VolumeAverage;
 800fdfc:	4b2f      	ldr	r3, [pc, #188]	@ (800febc <StartReadVolumeTask+0xf0>)
 800fdfe:	699b      	ldr	r3, [r3, #24]
 800fe00:	ee07 3a90 	vmov	s15, r3
 800fe04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe08:	edc7 7a08 	vstr	s15, [r7, #32]
	uint8_t *avgArray;
	avgArray = (uint8_t*)(&avg );
 800fe0c:	f107 0320 	add.w	r3, r7, #32
 800fe10:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t data[12];
	data[0]=avgArray[0];
 800fe12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	753b      	strb	r3, [r7, #20]
	data[1]=avgArray[1];
 800fe18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe1a:	785b      	ldrb	r3, [r3, #1]
 800fe1c:	757b      	strb	r3, [r7, #21]
	data[2]=avgArray[2];
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe20:	789b      	ldrb	r3, [r3, #2]
 800fe22:	75bb      	strb	r3, [r7, #22]
	data[3]=avgArray[3];
 800fe24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe26:	78db      	ldrb	r3, [r3, #3]
 800fe28:	75fb      	strb	r3, [r7, #23]
	for(;;)
	{
		volumeSemaphoreVal = osSemaphoreAcquire(ThreadStorage.VolumeSemaphoreHandle, 1000);
 800fe2a:	4b26      	ldr	r3, [pc, #152]	@ (800fec4 <StartReadVolumeTask+0xf8>)
 800fe2c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800fe30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7f6 fe85 	bl	8006b44 <osSemaphoreAcquire>
 800fe3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(volumeSemaphoreVal==osOK){
 800fe3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d136      	bne.n	800feb0 <StartReadVolumeTask+0xe4>
			LoadCellInstance.ReadVolume(false);
 800fe42:	2100      	movs	r1, #0
 800fe44:	481c      	ldr	r0, [pc, #112]	@ (800feb8 <StartReadVolumeTask+0xec>)
 800fe46:	f7fd fead 	bl	800dba4 <_ZN8LoadCell10ReadVolumeEb>
			float32_t rate=SystemConfig.VolumeRate;
 800fe4a:	4b1c      	ldr	r3, [pc, #112]	@ (800febc <StartReadVolumeTask+0xf0>)
 800fe4c:	69db      	ldr	r3, [r3, #28]
 800fe4e:	613b      	str	r3, [r7, #16]
			uint8_t *rateArray;
			rateArray = (uint8_t*)(&rate );
 800fe50:	f107 0310 	add.w	r3, r7, #16
 800fe54:	62bb      	str	r3, [r7, #40]	@ 0x28
			float32_t volume=LoadCellInstance.LastReadVolumeValue;
 800fe56:	4b18      	ldr	r3, [pc, #96]	@ (800feb8 <StartReadVolumeTask+0xec>)
 800fe58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fe5c:	6a1b      	ldr	r3, [r3, #32]
 800fe5e:	60fb      	str	r3, [r7, #12]
			uint8_t *volumeArray;
			volumeArray = (uint8_t*)(&volume );
 800fe60:	f107 030c 	add.w	r3, r7, #12
 800fe64:	627b      	str	r3, [r7, #36]	@ 0x24
			data[4]=rateArray[0];
 800fe66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	763b      	strb	r3, [r7, #24]
			data[5]=rateArray[1];
 800fe6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe6e:	785b      	ldrb	r3, [r3, #1]
 800fe70:	767b      	strb	r3, [r7, #25]
			data[6]=rateArray[2];
 800fe72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe74:	789b      	ldrb	r3, [r3, #2]
 800fe76:	76bb      	strb	r3, [r7, #26]
			data[7]=rateArray[3];
 800fe78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe7a:	78db      	ldrb	r3, [r3, #3]
 800fe7c:	76fb      	strb	r3, [r7, #27]
			data[8]=volumeArray[0];
 800fe7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	773b      	strb	r3, [r7, #28]
			data[9]=volumeArray[1];
 800fe84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe86:	785b      	ldrb	r3, [r3, #1]
 800fe88:	777b      	strb	r3, [r7, #29]
			data[10]=volumeArray[2];
 800fe8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe8c:	789b      	ldrb	r3, [r3, #2]
 800fe8e:	77bb      	strb	r3, [r7, #30]
			data[11]=volumeArray[3];
 800fe90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe92:	78db      	ldrb	r3, [r3, #3]
 800fe94:	77fb      	strb	r3, [r7, #31]
			SuccessDataResult(0, SuccessDataType::SD_Volume, data, 12);
 800fe96:	f107 0214 	add.w	r2, r7, #20
 800fe9a:	230c      	movs	r3, #12
 800fe9c:	2104      	movs	r1, #4
 800fe9e:	2000      	movs	r0, #0
 800fea0:	f7fe fefb 	bl	800ec9a <SuccessDataResult>
			osSemaphoreRelease(ThreadStorage.VolumeSemaphoreHandle);
 800fea4:	4b07      	ldr	r3, [pc, #28]	@ (800fec4 <StartReadVolumeTask+0xf8>)
 800fea6:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800feaa:	4618      	mov	r0, r3
 800feac:	f7f6 fe9c 	bl	8006be8 <osSemaphoreRelease>
		}
		vTaskDelay( xDelay );
 800feb0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800feb2:	f7f8 fa8b 	bl	80083cc <vTaskDelay>
	}
 800feb6:	e7b8      	b.n	800fe2a <StartReadVolumeTask+0x5e>
 800feb8:	200070c4 	.word	0x200070c4
 800febc:	20009328 	.word	0x20009328
 800fec0:	08011cf0 	.word	0x08011cf0
 800fec4:	20009138 	.word	0x20009138

0800fec8 <StartAutoClosePumpTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAutoClosePumpTask */
void StartAutoClosePumpTask(void *argument)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000*SystemConfig.PumpMaxRunSecond) / portTICK_PERIOD_MS;
 800fed0:	4b08      	ldr	r3, [pc, #32]	@ (800fef4 <StartAutoClosePumpTask+0x2c>)
 800fed2:	795b      	ldrb	r3, [r3, #5]
 800fed4:	461a      	mov	r2, r3
 800fed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800feda:	fb02 f303 	mul.w	r3, r2, r3
 800fede:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		vTaskDelay( xDelay );
 800fee0:	68f8      	ldr	r0, [r7, #12]
 800fee2:	f7f8 fa73 	bl	80083cc <vTaskDelay>
		CommunicationInstance.TogglePump(false);
 800fee6:	2100      	movs	r1, #0
 800fee8:	4803      	ldr	r0, [pc, #12]	@ (800fef8 <StartAutoClosePumpTask+0x30>)
 800feea:	f7fb f957 	bl	800b19c <_ZN13Communication10TogglePumpEb>
		vTaskDelay( xDelay );
 800feee:	bf00      	nop
 800fef0:	e7f6      	b.n	800fee0 <StartAutoClosePumpTask+0x18>
 800fef2:	bf00      	nop
 800fef4:	20009328 	.word	0x20009328
 800fef8:	200090fc 	.word	0x200090fc

0800fefc <StartAutoCloseValveTask>:
	}
  /* USER CODE END 5 */
}
void StartAutoCloseValveTask(void *argument)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const TickType_t xDelay = (1000*SystemConfig.ValveMaxRunSecond) / portTICK_PERIOD_MS;
 800ff04:	4b0c      	ldr	r3, [pc, #48]	@ (800ff38 <StartAutoCloseValveTask+0x3c>)
 800ff06:	799b      	ldrb	r3, [r3, #6]
 800ff08:	461a      	mov	r2, r3
 800ff0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff0e:	fb02 f303 	mul.w	r3, r2, r3
 800ff12:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		vTaskDelay( xDelay );
 800ff14:	68f8      	ldr	r0, [r7, #12]
 800ff16:	f7f8 fa59 	bl	80083cc <vTaskDelay>
		CommunicationInstance.ToggleValve(false);
 800ff1a:	2100      	movs	r1, #0
 800ff1c:	4807      	ldr	r0, [pc, #28]	@ (800ff3c <StartAutoCloseValveTask+0x40>)
 800ff1e:	f7fb f977 	bl	800b210 <_ZN13Communication11ToggleValveEb>
		osThreadTerminate(ThreadStorage.ValveMaxRunThreadId);
 800ff22:	4b07      	ldr	r3, [pc, #28]	@ (800ff40 <StartAutoCloseValveTask+0x44>)
 800ff24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7f6 fd56 	bl	80069d8 <osThreadTerminate>
		ThreadStorage.ValveMaxRunThreadId=NULL;
 800ff2c:	4b04      	ldr	r3, [pc, #16]	@ (800ff40 <StartAutoCloseValveTask+0x44>)
 800ff2e:	2200      	movs	r2, #0
 800ff30:	675a      	str	r2, [r3, #116]	@ 0x74
		vTaskDelay( xDelay );
 800ff32:	bf00      	nop
 800ff34:	e7ee      	b.n	800ff14 <StartAutoCloseValveTask+0x18>
 800ff36:	bf00      	nop
 800ff38:	20009328 	.word	0x20009328
 800ff3c:	200090fc 	.word	0x200090fc
 800ff40:	20009138 	.word	0x20009138

0800ff44 <StartLoadcellAverageTask>:
	}
  /* USER CODE END 5 */
}
void StartLoadcellAverageTask(void *argument){
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b08c      	sub	sp, #48	@ 0x30
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 800ff4c:	2364      	movs	r3, #100	@ 0x64
 800ff4e:	623b      	str	r3, [r7, #32]
	float32_t sumFlow = 0;
 800ff50:	f04f 0300 	mov.w	r3, #0
 800ff54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float32_t sumVolume = 0;
 800ff56:	f04f 0300 	mov.w	r3, #0
 800ff5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t instanceCount=0;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t jumpCount=50;
 800ff60:	2332      	movs	r3, #50	@ 0x32
 800ff62:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t percent=0;
 800ff66:	2300      	movs	r3, #0
 800ff68:	77fb      	strb	r3, [r7, #31]
	uint8_t data[8];
	LoadCellInstance.ClearSamples();
 800ff6a:	4856      	ldr	r0, [pc, #344]	@ (80100c4 <StartLoadcellAverageTask+0x180>)
 800ff6c:	f7fe fae2 	bl	800e534 <_ZN8LoadCell12ClearSamplesEv>
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 800ff70:	4854      	ldr	r0, [pc, #336]	@ (80100c4 <StartLoadcellAverageTask+0x180>)
 800ff72:	f7fd fd33 	bl	800d9dc <_ZN8LoadCell17ReadVolumeAndFlowEv>
		if(jumpCount>0){
 800ff76:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d008      	beq.n	800ff90 <StartLoadcellAverageTask+0x4c>
			jumpCount--;
 800ff7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ff82:	3b01      	subs	r3, #1
 800ff84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			vTaskDelay( xDelay );
 800ff88:	2064      	movs	r0, #100	@ 0x64
 800ff8a:	f7f8 fa1f 	bl	80083cc <vTaskDelay>
			continue;
 800ff8e:	e098      	b.n	80100c2 <StartLoadcellAverageTask+0x17e>
		}
		sumFlow+=LoadCellInstance.FlowValue;
 800ff90:	4b4c      	ldr	r3, [pc, #304]	@ (80100c4 <StartLoadcellAverageTask+0x180>)
 800ff92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ff96:	edd3 7a03 	vldr	s15, [r3, #12]
 800ff9a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800ff9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffa2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		sumVolume+=LoadCellInstance.VolumeValue;
 800ffa6:	4b47      	ldr	r3, [pc, #284]	@ (80100c4 <StartLoadcellAverageTask+0x180>)
 800ffa8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ffac:	edd3 7a04 	vldr	s15, [r3, #16]
 800ffb0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ffb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffb8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		uint8_t *volumeArray;
		volumeArray = (uint8_t*)(&LoadCellInstance.VolumeValue );
 800ffbc:	4b42      	ldr	r3, [pc, #264]	@ (80100c8 <StartLoadcellAverageTask+0x184>)
 800ffbe:	61bb      	str	r3, [r7, #24]
		uint8_t *flowArray;
		flowArray = (uint8_t*)(&LoadCellInstance.FlowValue );
 800ffc0:	4b42      	ldr	r3, [pc, #264]	@ (80100cc <StartLoadcellAverageTask+0x188>)
 800ffc2:	617b      	str	r3, [r7, #20]
		data[0]=volumeArray[0];
 800ffc4:	69bb      	ldr	r3, [r7, #24]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	733b      	strb	r3, [r7, #12]
		data[1]=volumeArray[1];
 800ffca:	69bb      	ldr	r3, [r7, #24]
 800ffcc:	785b      	ldrb	r3, [r3, #1]
 800ffce:	737b      	strb	r3, [r7, #13]
		data[2]=volumeArray[2];
 800ffd0:	69bb      	ldr	r3, [r7, #24]
 800ffd2:	789b      	ldrb	r3, [r3, #2]
 800ffd4:	73bb      	strb	r3, [r7, #14]
		data[3]=volumeArray[3];
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	78db      	ldrb	r3, [r3, #3]
 800ffda:	73fb      	strb	r3, [r7, #15]
		data[4]=flowArray[0];
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	743b      	strb	r3, [r7, #16]
		data[5]=flowArray[1];
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	785b      	ldrb	r3, [r3, #1]
 800ffe6:	747b      	strb	r3, [r7, #17]
		data[6]=flowArray[2];
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	789b      	ldrb	r3, [r3, #2]
 800ffec:	74bb      	strb	r3, [r7, #18]
		data[7]=flowArray[3];
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	78db      	ldrb	r3, [r3, #3]
 800fff2:	74fb      	strb	r3, [r7, #19]
		instanceCount++;
 800fff4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fff6:	3301      	adds	r3, #1
 800fff8:	84fb      	strh	r3, [r7, #38]	@ 0x26
		percent=((instanceCount*100)/SystemConfig.AverageSampleCount)-1;
 800fffa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fffc:	2264      	movs	r2, #100	@ 0x64
 800fffe:	fb02 f303 	mul.w	r3, r2, r3
 8010002:	4a33      	ldr	r2, [pc, #204]	@ (80100d0 <StartLoadcellAverageTask+0x18c>)
 8010004:	f892 2071 	ldrb.w	r2, [r2, #113]	@ 0x71
 8010008:	fb93 f3f2 	sdiv	r3, r3, r2
 801000c:	b2db      	uxtb	r3, r3
 801000e:	3b01      	subs	r3, #1
 8010010:	77fb      	strb	r3, [r7, #31]
		Debugger.AveragePercent=percent;
 8010012:	4a30      	ldr	r2, [pc, #192]	@ (80100d4 <StartLoadcellAverageTask+0x190>)
 8010014:	7ffb      	ldrb	r3, [r7, #31]
 8010016:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
		SuccessDataResult(percent, SuccessDataType::SD_MeasurementAverage, data, 8);
 801001a:	f107 020c 	add.w	r2, r7, #12
 801001e:	7ff8      	ldrb	r0, [r7, #31]
 8010020:	2308      	movs	r3, #8
 8010022:	2106      	movs	r1, #6
 8010024:	f7fe fe39 	bl	800ec9a <SuccessDataResult>
		if(instanceCount>=SystemConfig.AverageSampleCount){
 8010028:	4b29      	ldr	r3, [pc, #164]	@ (80100d0 <StartLoadcellAverageTask+0x18c>)
 801002a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 801002e:	461a      	mov	r2, r3
 8010030:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010032:	4293      	cmp	r3, r2
 8010034:	d342      	bcc.n	80100bc <StartLoadcellAverageTask+0x178>
			SystemConfig.VolumeAverage=sumVolume/instanceCount;
 8010036:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010038:	ee07 3a90 	vmov	s15, r3
 801003c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010040:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8010044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801004c:	ee17 2a90 	vmov	r2, s15
 8010050:	4b1f      	ldr	r3, [pc, #124]	@ (80100d0 <StartLoadcellAverageTask+0x18c>)
 8010052:	619a      	str	r2, [r3, #24]
			SystemConfig.FlowAverage=sumFlow/(instanceCount-1);
 8010054:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010056:	3b01      	subs	r3, #1
 8010058:	ee07 3a90 	vmov	s15, r3
 801005c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010060:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8010064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801006c:	ee17 2a90 	vmov	r2, s15
 8010070:	4b17      	ldr	r3, [pc, #92]	@ (80100d0 <StartLoadcellAverageTask+0x18c>)
 8010072:	615a      	str	r2, [r3, #20]
			FlashManagerInstance.WriteVolumeAverage(SystemConfig.VolumeAverage);
 8010074:	4b16      	ldr	r3, [pc, #88]	@ (80100d0 <StartLoadcellAverageTask+0x18c>)
 8010076:	699b      	ldr	r3, [r3, #24]
 8010078:	4619      	mov	r1, r3
 801007a:	4817      	ldr	r0, [pc, #92]	@ (80100d8 <StartLoadcellAverageTask+0x194>)
 801007c:	f7fc ff82 	bl	800cf84 <_ZN12FlashManager18WriteVolumeAverageEm>
			FlashManagerInstance.WriteFlowAverage(SystemConfig.FlowAverage);
 8010080:	4b13      	ldr	r3, [pc, #76]	@ (80100d0 <StartLoadcellAverageTask+0x18c>)
 8010082:	695b      	ldr	r3, [r3, #20]
 8010084:	4619      	mov	r1, r3
 8010086:	4814      	ldr	r0, [pc, #80]	@ (80100d8 <StartLoadcellAverageTask+0x194>)
 8010088:	f7fd f80f 	bl	800d0aa <_ZN12FlashManager16WriteFlowAverageEm>
			SuccessDataResult(100, SuccessDataType::SD_MeasurementAverage, data, 8);
 801008c:	f107 020c 	add.w	r2, r7, #12
 8010090:	2308      	movs	r3, #8
 8010092:	2106      	movs	r1, #6
 8010094:	2064      	movs	r0, #100	@ 0x64
 8010096:	f7fe fe00 	bl	800ec9a <SuccessDataResult>
			SendFeedback(RequestType::R_System, SystemRequestType::SYSR_MeasurementAverage, ProcessStatuses::PS_End);
 801009a:	2202      	movs	r2, #2
 801009c:	2104      	movs	r1, #4
 801009e:	2001      	movs	r0, #1
 80100a0:	f7fe fdd2 	bl	800ec48 <SendFeedback>
			SystemConfig.systemMode=SystemModes::EmptyMode;
 80100a4:	4b0a      	ldr	r3, [pc, #40]	@ (80100d0 <StartLoadcellAverageTask+0x18c>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			osThreadTerminate(ThreadStorage.LoadcellAverageThreadId);
 80100ac:	4b0b      	ldr	r3, [pc, #44]	@ (80100dc <StartLoadcellAverageTask+0x198>)
 80100ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7f6 fc91 	bl	80069d8 <osThreadTerminate>
			ThreadStorage.LoadcellAverageThreadId=NULL;
 80100b6:	4b09      	ldr	r3, [pc, #36]	@ (80100dc <StartLoadcellAverageTask+0x198>)
 80100b8:	2200      	movs	r2, #0
 80100ba:	679a      	str	r2, [r3, #120]	@ 0x78
		}
		vTaskDelay( xDelay );
 80100bc:	2064      	movs	r0, #100	@ 0x64
 80100be:	f7f8 f985 	bl	80083cc <vTaskDelay>
	}
 80100c2:	e755      	b.n	800ff70 <StartLoadcellAverageTask+0x2c>
 80100c4:	200070c4 	.word	0x200070c4
 80100c8:	200090d4 	.word	0x200090d4
 80100cc:	200090d0 	.word	0x200090d0
 80100d0:	20009328 	.word	0x20009328
 80100d4:	200093a0 	.word	0x200093a0
 80100d8:	2000911c 	.word	0x2000911c
 80100dc:	20009138 	.word	0x20009138

080100e0 <StartCalibrationVolumeTask>:
}
void StartCalibrationVolumeTask(void *argument){
 80100e0:	b5b0      	push	{r4, r5, r7, lr}
 80100e2:	b08a      	sub	sp, #40	@ 0x28
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 80100e8:	2364      	movs	r3, #100	@ 0x64
 80100ea:	61fb      	str	r3, [r7, #28]
	float32_t sumVolume = 0;
 80100ec:	f04f 0300 	mov.w	r3, #0
 80100f0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t instanceCount=0;
 80100f2:	2300      	movs	r3, #0
 80100f4:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint8_t jumpCount=50;
 80100f6:	2332      	movs	r3, #50	@ 0x32
 80100f8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t percent=0;
 80100fc:	2300      	movs	r3, #0
 80100fe:	76fb      	strb	r3, [r7, #27]
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 8010100:	485e      	ldr	r0, [pc, #376]	@ (801027c <StartCalibrationVolumeTask+0x19c>)
 8010102:	f7fd fc6b 	bl	800d9dc <_ZN8LoadCell17ReadVolumeAndFlowEv>
		if(jumpCount>0){
 8010106:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801010a:	2b00      	cmp	r3, #0
 801010c:	d008      	beq.n	8010120 <StartCalibrationVolumeTask+0x40>
			jumpCount--;
 801010e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010112:	3b01      	subs	r3, #1
 8010114:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			vTaskDelay( xDelay );
 8010118:	2064      	movs	r0, #100	@ 0x64
 801011a:	f7f8 f957 	bl	80083cc <vTaskDelay>
			continue;
 801011e:	e0ac      	b.n	801027a <StartCalibrationVolumeTask+0x19a>
		}
		float32_t diff =LoadCellInstance.VolumeValue-SystemConfig.VolumeAverage;
 8010120:	4b56      	ldr	r3, [pc, #344]	@ (801027c <StartCalibrationVolumeTask+0x19c>)
 8010122:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010126:	ed93 7a04 	vldr	s14, [r3, #16]
 801012a:	4b55      	ldr	r3, [pc, #340]	@ (8010280 <StartCalibrationVolumeTask+0x1a0>)
 801012c:	699b      	ldr	r3, [r3, #24]
 801012e:	ee07 3a90 	vmov	s15, r3
 8010132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010136:	ee77 7a67 	vsub.f32	s15, s14, s15
 801013a:	edc7 7a05 	vstr	s15, [r7, #20]
		if(diff<1){
 801013e:	edd7 7a05 	vldr	s15, [r7, #20]
 8010142:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010146:	eef4 7ac7 	vcmpe.f32	s15, s14
 801014a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801014e:	d503      	bpl.n	8010158 <StartCalibrationVolumeTask+0x78>
			vTaskDelay( xDelay );
 8010150:	2064      	movs	r0, #100	@ 0x64
 8010152:	f7f8 f93b 	bl	80083cc <vTaskDelay>
			continue;
 8010156:	e090      	b.n	801027a <StartCalibrationVolumeTask+0x19a>
		}
		sumVolume+=diff;
 8010158:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 801015c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010164:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float32_t rate=(sumVolume/instanceCount)/SystemConfig.CalibrationWeight;
 8010168:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801016a:	ee07 3a90 	vmov	s15, r3
 801016e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010172:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8010176:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801017a:	4b41      	ldr	r3, [pc, #260]	@ (8010280 <StartCalibrationVolumeTask+0x1a0>)
 801017c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8010180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010184:	edc7 7a03 	vstr	s15, [r7, #12]
		Debugger.VolumeRate=rate;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	4618      	mov	r0, r3
 801018c:	f7f0 f9d4 	bl	8000538 <__aeabi_f2d>
 8010190:	4602      	mov	r2, r0
 8010192:	460b      	mov	r3, r1
 8010194:	493b      	ldr	r1, [pc, #236]	@ (8010284 <StartCalibrationVolumeTask+0x1a4>)
 8010196:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uint8_t *rateArray;
		rateArray = (uint8_t*)(&rate );
 801019a:	f107 030c 	add.w	r3, r7, #12
 801019e:	613b      	str	r3, [r7, #16]
		instanceCount++;
 80101a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80101a2:	3301      	adds	r3, #1
 80101a4:	847b      	strh	r3, [r7, #34]	@ 0x22
		percent=((instanceCount*100)/SystemConfig.VolumeCalibrationSampleCount)-1;
 80101a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80101a8:	2264      	movs	r2, #100	@ 0x64
 80101aa:	fb02 f303 	mul.w	r3, r2, r3
 80101ae:	4a34      	ldr	r2, [pc, #208]	@ (8010280 <StartCalibrationVolumeTask+0x1a0>)
 80101b0:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 80101b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80101b8:	b2db      	uxtb	r3, r3
 80101ba:	3b01      	subs	r3, #1
 80101bc:	76fb      	strb	r3, [r7, #27]
		Debugger.AveragePercent=percent;
 80101be:	4a31      	ldr	r2, [pc, #196]	@ (8010284 <StartCalibrationVolumeTask+0x1a4>)
 80101c0:	7efb      	ldrb	r3, [r7, #27]
 80101c2:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
		SuccessDataResult(percent, SuccessDataType::SD_VolumeCalibration, rateArray, 4);
 80101c6:	7ef8      	ldrb	r0, [r7, #27]
 80101c8:	2304      	movs	r3, #4
 80101ca:	693a      	ldr	r2, [r7, #16]
 80101cc:	2108      	movs	r1, #8
 80101ce:	f7fe fd64 	bl	800ec9a <SuccessDataResult>
		if(instanceCount>=SystemConfig.VolumeCalibrationSampleCount){
 80101d2:	4b2b      	ldr	r3, [pc, #172]	@ (8010280 <StartCalibrationVolumeTask+0x1a0>)
 80101d4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80101d8:	461a      	mov	r2, r3
 80101da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80101dc:	4293      	cmp	r3, r2
 80101de:	d349      	bcc.n	8010274 <StartCalibrationVolumeTask+0x194>
			SystemConfig.VolumeRate=((double_t)sumVolume/(double_t)instanceCount)/SystemConfig.CalibrationWeight;
 80101e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80101e2:	f7f0 f9a9 	bl	8000538 <__aeabi_f2d>
 80101e6:	4604      	mov	r4, r0
 80101e8:	460d      	mov	r5, r1
 80101ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7f0 f981 	bl	80004f4 <__aeabi_ui2d>
 80101f2:	4602      	mov	r2, r0
 80101f4:	460b      	mov	r3, r1
 80101f6:	4620      	mov	r0, r4
 80101f8:	4629      	mov	r1, r5
 80101fa:	f7f0 fb1f 	bl	800083c <__aeabi_ddiv>
 80101fe:	4602      	mov	r2, r0
 8010200:	460b      	mov	r3, r1
 8010202:	4614      	mov	r4, r2
 8010204:	461d      	mov	r5, r3
 8010206:	4b1e      	ldr	r3, [pc, #120]	@ (8010280 <StartCalibrationVolumeTask+0x1a0>)
 8010208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801020a:	4618      	mov	r0, r3
 801020c:	f7f0 f994 	bl	8000538 <__aeabi_f2d>
 8010210:	4602      	mov	r2, r0
 8010212:	460b      	mov	r3, r1
 8010214:	4620      	mov	r0, r4
 8010216:	4629      	mov	r1, r5
 8010218:	f7f0 fb10 	bl	800083c <__aeabi_ddiv>
 801021c:	4602      	mov	r2, r0
 801021e:	460b      	mov	r3, r1
 8010220:	4610      	mov	r0, r2
 8010222:	4619      	mov	r1, r3
 8010224:	f7f0 fbf2 	bl	8000a0c <__aeabi_d2f>
 8010228:	4603      	mov	r3, r0
 801022a:	4a15      	ldr	r2, [pc, #84]	@ (8010280 <StartCalibrationVolumeTask+0x1a0>)
 801022c:	61d3      	str	r3, [r2, #28]
			FlashManagerInstance.WriteVolumeRate(SystemConfig.VolumeRate);
 801022e:	4b14      	ldr	r3, [pc, #80]	@ (8010280 <StartCalibrationVolumeTask+0x1a0>)
 8010230:	69db      	ldr	r3, [r3, #28]
 8010232:	4618      	mov	r0, r3
 8010234:	f7f0 f980 	bl	8000538 <__aeabi_f2d>
 8010238:	4602      	mov	r2, r0
 801023a:	460b      	mov	r3, r1
 801023c:	ec43 2b10 	vmov	d0, r2, r3
 8010240:	4811      	ldr	r0, [pc, #68]	@ (8010288 <StartCalibrationVolumeTask+0x1a8>)
 8010242:	f7fc fe05 	bl	800ce50 <_ZN12FlashManager15WriteVolumeRateEd>
			SuccessDataResult(100, SuccessDataType::SD_VolumeCalibration, rateArray, 4);
 8010246:	2304      	movs	r3, #4
 8010248:	693a      	ldr	r2, [r7, #16]
 801024a:	2108      	movs	r1, #8
 801024c:	2064      	movs	r0, #100	@ 0x64
 801024e:	f7fe fd24 	bl	800ec9a <SuccessDataResult>
			SendFeedback(RequestType::R_System, SystemRequestType::SYSR_CalibrationVolume, ProcessStatuses::PS_End);
 8010252:	2202      	movs	r2, #2
 8010254:	2105      	movs	r1, #5
 8010256:	2001      	movs	r0, #1
 8010258:	f7fe fcf6 	bl	800ec48 <SendFeedback>
			SystemConfig.systemMode=SystemModes::EmptyMode;
 801025c:	4b08      	ldr	r3, [pc, #32]	@ (8010280 <StartCalibrationVolumeTask+0x1a0>)
 801025e:	2200      	movs	r2, #0
 8010260:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			osThreadTerminate(ThreadStorage.CalibrationVolumeThreadId);
 8010264:	4b09      	ldr	r3, [pc, #36]	@ (801028c <StartCalibrationVolumeTask+0x1ac>)
 8010266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010268:	4618      	mov	r0, r3
 801026a:	f7f6 fbb5 	bl	80069d8 <osThreadTerminate>
			ThreadStorage.CalibrationVolumeThreadId=NULL;
 801026e:	4b07      	ldr	r3, [pc, #28]	@ (801028c <StartCalibrationVolumeTask+0x1ac>)
 8010270:	2200      	movs	r2, #0
 8010272:	67da      	str	r2, [r3, #124]	@ 0x7c
		}
		vTaskDelay( xDelay );
 8010274:	2064      	movs	r0, #100	@ 0x64
 8010276:	f7f8 f8a9 	bl	80083cc <vTaskDelay>
	}
 801027a:	e741      	b.n	8010100 <StartCalibrationVolumeTask+0x20>
 801027c:	200070c4 	.word	0x200070c4
 8010280:	20009328 	.word	0x20009328
 8010284:	200093a0 	.word	0x200093a0
 8010288:	2000911c 	.word	0x2000911c
 801028c:	20009138 	.word	0x20009138

08010290 <StartCalibrationFlowTask>:
}
void StartCalibrationFlowTask(void *argument){
 8010290:	b580      	push	{r7, lr}
 8010292:	b08a      	sub	sp, #40	@ 0x28
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 8010298:	2364      	movs	r3, #100	@ 0x64
 801029a:	61fb      	str	r3, [r7, #28]
	float32_t maxFlow=1;
 801029c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80102a0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t instanceCount=0;
 80102a2:	2300      	movs	r3, #0
 80102a4:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint8_t jumpCount=50;
 80102a6:	2332      	movs	r3, #50	@ 0x32
 80102a8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t percent=0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	76fb      	strb	r3, [r7, #27]
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 80102b0:	485c      	ldr	r0, [pc, #368]	@ (8010424 <StartCalibrationFlowTask+0x194>)
 80102b2:	f7fd fb93 	bl	800d9dc <_ZN8LoadCell17ReadVolumeAndFlowEv>
		if(jumpCount>0){
 80102b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d008      	beq.n	80102d0 <StartCalibrationFlowTask+0x40>
			jumpCount--;
 80102be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80102c2:	3b01      	subs	r3, #1
 80102c4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			vTaskDelay( xDelay );
 80102c8:	2064      	movs	r0, #100	@ 0x64
 80102ca:	f7f8 f87f 	bl	80083cc <vTaskDelay>
 80102ce:	e7ef      	b.n	80102b0 <StartCalibrationFlowTask+0x20>
			continue;
		}
		if(SystemConfig.FlowAverage>LoadCellInstance.FlowValue){
 80102d0:	4b55      	ldr	r3, [pc, #340]	@ (8010428 <StartCalibrationFlowTask+0x198>)
 80102d2:	695b      	ldr	r3, [r3, #20]
 80102d4:	ee07 3a90 	vmov	s15, r3
 80102d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80102dc:	4b51      	ldr	r3, [pc, #324]	@ (8010424 <StartCalibrationFlowTask+0x194>)
 80102de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80102e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80102e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80102ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ee:	bfcc      	ite	gt
 80102f0:	2301      	movgt	r3, #1
 80102f2:	2300      	movle	r3, #0
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d00a      	beq.n	8010310 <StartCalibrationFlowTask+0x80>
			LoadCellInstance.FlowValue=SystemConfig.FlowAverage;
 80102fa:	4b4b      	ldr	r3, [pc, #300]	@ (8010428 <StartCalibrationFlowTask+0x198>)
 80102fc:	695b      	ldr	r3, [r3, #20]
 80102fe:	ee07 3a90 	vmov	s15, r3
 8010302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010306:	4b47      	ldr	r3, [pc, #284]	@ (8010424 <StartCalibrationFlowTask+0x194>)
 8010308:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801030c:	edc3 7a03 	vstr	s15, [r3, #12]
		}
		uint32_t flow=LoadCellInstance.FlowValue-SystemConfig.FlowAverage;
 8010310:	4b44      	ldr	r3, [pc, #272]	@ (8010424 <StartCalibrationFlowTask+0x194>)
 8010312:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010316:	ed93 7a03 	vldr	s14, [r3, #12]
 801031a:	4b43      	ldr	r3, [pc, #268]	@ (8010428 <StartCalibrationFlowTask+0x198>)
 801031c:	695b      	ldr	r3, [r3, #20]
 801031e:	ee07 3a90 	vmov	s15, r3
 8010322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010326:	ee77 7a67 	vsub.f32	s15, s14, s15
 801032a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801032e:	ee17 3a90 	vmov	r3, s15
 8010332:	617b      	str	r3, [r7, #20]
		if(flow>maxFlow){
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	ee07 3a90 	vmov	s15, r3
 801033a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801033e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8010342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801034a:	d506      	bpl.n	801035a <StartCalibrationFlowTask+0xca>
			maxFlow=flow;
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	ee07 3a90 	vmov	s15, r3
 8010352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010356:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		}
		float32_t rate=maxFlow/SystemConfig.CalibrationFlow;
 801035a:	4b33      	ldr	r3, [pc, #204]	@ (8010428 <StartCalibrationFlowTask+0x198>)
 801035c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8010360:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010368:	edc7 7a03 	vstr	s15, [r7, #12]
		Debugger.FlowRate=rate;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	4618      	mov	r0, r3
 8010370:	f7f0 f8e2 	bl	8000538 <__aeabi_f2d>
 8010374:	4602      	mov	r2, r0
 8010376:	460b      	mov	r3, r1
 8010378:	492c      	ldr	r1, [pc, #176]	@ (801042c <StartCalibrationFlowTask+0x19c>)
 801037a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		instanceCount++;
 801037e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010380:	3301      	adds	r3, #1
 8010382:	847b      	strh	r3, [r7, #34]	@ 0x22
		uint8_t *rateArray;
		rateArray = (uint8_t*)(&rate );
 8010384:	f107 030c 	add.w	r3, r7, #12
 8010388:	613b      	str	r3, [r7, #16]
		percent=((instanceCount*100)/SystemConfig.FlowCalibrationSampleCount)-1;
 801038a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801038c:	2264      	movs	r2, #100	@ 0x64
 801038e:	fb02 f303 	mul.w	r3, r2, r3
 8010392:	4a25      	ldr	r2, [pc, #148]	@ (8010428 <StartCalibrationFlowTask+0x198>)
 8010394:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 8010398:	fb93 f3f2 	sdiv	r3, r3, r2
 801039c:	b2db      	uxtb	r3, r3
 801039e:	3b01      	subs	r3, #1
 80103a0:	76fb      	strb	r3, [r7, #27]
		SuccessDataResult(percent, SuccessDataType::SD_FlowCalibration, rateArray, 4);
 80103a2:	7ef8      	ldrb	r0, [r7, #27]
 80103a4:	2304      	movs	r3, #4
 80103a6:	693a      	ldr	r2, [r7, #16]
 80103a8:	2109      	movs	r1, #9
 80103aa:	f7fe fc76 	bl	800ec9a <SuccessDataResult>
		if(instanceCount>SystemConfig.FlowCalibrationSampleCount){
 80103ae:	4b1e      	ldr	r3, [pc, #120]	@ (8010428 <StartCalibrationFlowTask+0x198>)
 80103b0:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80103b4:	461a      	mov	r2, r3
 80103b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d92e      	bls.n	801041a <StartCalibrationFlowTask+0x18a>
			SystemConfig.FlowRate=(double_t)maxFlow/SystemConfig.CalibrationFlow;
 80103bc:	4b1a      	ldr	r3, [pc, #104]	@ (8010428 <StartCalibrationFlowTask+0x198>)
 80103be:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80103c2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80103c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80103ca:	4b17      	ldr	r3, [pc, #92]	@ (8010428 <StartCalibrationFlowTask+0x198>)
 80103cc:	edc3 7a08 	vstr	s15, [r3, #32]
			FlashManagerInstance.WriteFlowRate(SystemConfig.FlowRate);
 80103d0:	4b15      	ldr	r3, [pc, #84]	@ (8010428 <StartCalibrationFlowTask+0x198>)
 80103d2:	6a1b      	ldr	r3, [r3, #32]
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7f0 f8af 	bl	8000538 <__aeabi_f2d>
 80103da:	4602      	mov	r2, r0
 80103dc:	460b      	mov	r3, r1
 80103de:	ec43 2b10 	vmov	d0, r2, r3
 80103e2:	4813      	ldr	r0, [pc, #76]	@ (8010430 <StartCalibrationFlowTask+0x1a0>)
 80103e4:	f7fc fc9a 	bl	800cd1c <_ZN12FlashManager13WriteFlowRateEd>
			SystemConfig.systemMode=SystemModes::EmptyMode;
 80103e8:	4b0f      	ldr	r3, [pc, #60]	@ (8010428 <StartCalibrationFlowTask+0x198>)
 80103ea:	2200      	movs	r2, #0
 80103ec:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			SuccessDataResult(100, SuccessDataType::SD_FlowCalibration, rateArray, 4);
 80103f0:	2304      	movs	r3, #4
 80103f2:	693a      	ldr	r2, [r7, #16]
 80103f4:	2109      	movs	r1, #9
 80103f6:	2064      	movs	r0, #100	@ 0x64
 80103f8:	f7fe fc4f 	bl	800ec9a <SuccessDataResult>
			SendFeedback(RequestType::R_System, SystemRequestType::SYSR_CalibrationFlow, ProcessStatuses::PS_End);
 80103fc:	2202      	movs	r2, #2
 80103fe:	2106      	movs	r1, #6
 8010400:	2001      	movs	r0, #1
 8010402:	f7fe fc21 	bl	800ec48 <SendFeedback>
			osThreadTerminate(ThreadStorage.CalibrationFlowThreadId);
 8010406:	4b0b      	ldr	r3, [pc, #44]	@ (8010434 <StartCalibrationFlowTask+0x1a4>)
 8010408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801040c:	4618      	mov	r0, r3
 801040e:	f7f6 fae3 	bl	80069d8 <osThreadTerminate>
			ThreadStorage.CalibrationFlowThreadId=NULL;
 8010412:	4b08      	ldr	r3, [pc, #32]	@ (8010434 <StartCalibrationFlowTask+0x1a4>)
 8010414:	2200      	movs	r2, #0
 8010416:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		}
		vTaskDelay( xDelay );
 801041a:	2064      	movs	r0, #100	@ 0x64
 801041c:	f7f7 ffd6 	bl	80083cc <vTaskDelay>
	}
 8010420:	e746      	b.n	80102b0 <StartCalibrationFlowTask+0x20>
 8010422:	bf00      	nop
 8010424:	200070c4 	.word	0x200070c4
 8010428:	20009328 	.word	0x20009328
 801042c:	200093a0 	.word	0x200093a0
 8010430:	2000911c 	.word	0x2000911c
 8010434:	20009138 	.word	0x20009138

08010438 <StartCleanTask>:
}
void StartCleanTask(void *argument){
 8010438:	b580      	push	{r7, lr}
 801043a:	b086      	sub	sp, #24
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
 8010440:	2364      	movs	r3, #100	@ 0x64
 8010442:	613b      	str	r3, [r7, #16]
	uint16_t clearedCount=0;
 8010444:	2300      	movs	r3, #0
 8010446:	82fb      	strh	r3, [r7, #22]
	volatile uint8_t type=0;
 8010448:	2300      	movs	r3, #0
 801044a:	73fb      	strb	r3, [r7, #15]
	LoadCellInstance.ClearSamples();
 801044c:	4897      	ldr	r0, [pc, #604]	@ (80106ac <StartCleanTask+0x274>)
 801044e:	f7fe f871 	bl	800e534 <_ZN8LoadCell12ClearSamplesEv>
	CommunicationInstance.TogglePump(true);
 8010452:	2101      	movs	r1, #1
 8010454:	4896      	ldr	r0, [pc, #600]	@ (80106b0 <StartCleanTask+0x278>)
 8010456:	f7fa fea1 	bl	800b19c <_ZN13Communication10TogglePumpEb>
	if(ThreadStorage.PumpMaxRunThreadId!=NULL&&ThreadStorage.PumpMaxRunThreadId!=0x00){
 801045a:	4b96      	ldr	r3, [pc, #600]	@ (80106b4 <StartCleanTask+0x27c>)
 801045c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801045e:	2b00      	cmp	r3, #0
 8010460:	d00b      	beq.n	801047a <StartCleanTask+0x42>
 8010462:	4b94      	ldr	r3, [pc, #592]	@ (80106b4 <StartCleanTask+0x27c>)
 8010464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010466:	2b00      	cmp	r3, #0
 8010468:	d007      	beq.n	801047a <StartCleanTask+0x42>
		osThreadTerminate(ThreadStorage.PumpMaxRunThreadId);
 801046a:	4b92      	ldr	r3, [pc, #584]	@ (80106b4 <StartCleanTask+0x27c>)
 801046c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801046e:	4618      	mov	r0, r3
 8010470:	f7f6 fab2 	bl	80069d8 <osThreadTerminate>
		ThreadStorage.PumpMaxRunThreadId=NULL;
 8010474:	4b8f      	ldr	r3, [pc, #572]	@ (80106b4 <StartCleanTask+0x27c>)
 8010476:	2200      	movs	r2, #0
 8010478:	671a      	str	r2, [r3, #112]	@ 0x70
	}
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 801047a:	488c      	ldr	r0, [pc, #560]	@ (80106ac <StartCleanTask+0x274>)
 801047c:	f7fd faae 	bl	800d9dc <_ZN8LoadCell17ReadVolumeAndFlowEv>
		Debugger.ReadedVolume=LoadCellInstance.VolumeValue;
 8010480:	4b8a      	ldr	r3, [pc, #552]	@ (80106ac <StartCleanTask+0x274>)
 8010482:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010486:	691b      	ldr	r3, [r3, #16]
 8010488:	4a8b      	ldr	r2, [pc, #556]	@ (80106b8 <StartCleanTask+0x280>)
 801048a:	6113      	str	r3, [r2, #16]
		if(LoadCellInstance.VolumeValue>LoadCellInstance.VolumeValue){
 801048c:	4b87      	ldr	r3, [pc, #540]	@ (80106ac <StartCleanTask+0x274>)
 801048e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010492:	ed93 7a04 	vldr	s14, [r3, #16]
 8010496:	4b85      	ldr	r3, [pc, #532]	@ (80106ac <StartCleanTask+0x274>)
 8010498:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801049c:	edd3 7a04 	vldr	s15, [r3, #16]
 80104a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80104a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a8:	bfcc      	ite	gt
 80104aa:	2301      	movgt	r3, #1
 80104ac:	2300      	movle	r3, #0
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d012      	beq.n	80104da <StartCleanTask+0xa2>
			Debugger.DiffVolumeValue=LoadCellInstance.VolumeValue-(SystemConfig.VolumeAverage+500);
 80104b4:	4b7d      	ldr	r3, [pc, #500]	@ (80106ac <StartCleanTask+0x274>)
 80104b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80104ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80104be:	4b7f      	ldr	r3, [pc, #508]	@ (80106bc <StartCleanTask+0x284>)
 80104c0:	699b      	ldr	r3, [r3, #24]
 80104c2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80104c6:	ee07 3a90 	vmov	s15, r3
 80104ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104d2:	4b79      	ldr	r3, [pc, #484]	@ (80106b8 <StartCleanTask+0x280>)
 80104d4:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
 80104d8:	e012      	b.n	8010500 <StartCleanTask+0xc8>
		}else{
			Debugger.DiffVolumeValue=(SystemConfig.VolumeAverage+10000)-LoadCellInstance.VolumeValue;
 80104da:	4b78      	ldr	r3, [pc, #480]	@ (80106bc <StartCleanTask+0x284>)
 80104dc:	699b      	ldr	r3, [r3, #24]
 80104de:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80104e2:	3310      	adds	r3, #16
 80104e4:	ee07 3a90 	vmov	s15, r3
 80104e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80104ec:	4b6f      	ldr	r3, [pc, #444]	@ (80106ac <StartCleanTask+0x274>)
 80104ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80104f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80104f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104fa:	4b6f      	ldr	r3, [pc, #444]	@ (80106b8 <StartCleanTask+0x280>)
 80104fc:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
		}
		Debugger.DiffVolumeValue=LoadCellInstance.VolumeValue-(SystemConfig.VolumeAverage+10000);
 8010500:	4b6a      	ldr	r3, [pc, #424]	@ (80106ac <StartCleanTask+0x274>)
 8010502:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010506:	ed93 7a04 	vldr	s14, [r3, #16]
 801050a:	4b6c      	ldr	r3, [pc, #432]	@ (80106bc <StartCleanTask+0x284>)
 801050c:	699b      	ldr	r3, [r3, #24]
 801050e:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8010512:	3310      	adds	r3, #16
 8010514:	ee07 3a90 	vmov	s15, r3
 8010518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801051c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010520:	4b65      	ldr	r3, [pc, #404]	@ (80106b8 <StartCleanTask+0x280>)
 8010522:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
		Debugger.CleanType=type;
 8010526:	7bfb      	ldrb	r3, [r7, #15]
 8010528:	b2da      	uxtb	r2, r3
 801052a:	4b63      	ldr	r3, [pc, #396]	@ (80106b8 <StartCleanTask+0x280>)
 801052c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
		if(type==0||type==2){
 8010530:	7bfb      	ldrb	r3, [r7, #15]
 8010532:	b2db      	uxtb	r3, r3
 8010534:	2b00      	cmp	r3, #0
 8010536:	d003      	beq.n	8010540 <StartCleanTask+0x108>
 8010538:	7bfb      	ldrb	r3, [r7, #15]
 801053a:	b2db      	uxtb	r3, r3
 801053c:	2b02      	cmp	r3, #2
 801053e:	d101      	bne.n	8010544 <StartCleanTask+0x10c>
 8010540:	2301      	movs	r3, #1
 8010542:	e000      	b.n	8010546 <StartCleanTask+0x10e>
 8010544:	2300      	movs	r3, #0
 8010546:	2b00      	cmp	r3, #0
 8010548:	d047      	beq.n	80105da <StartCleanTask+0x1a2>
			if(SystemConfig.VolumeAverage+10000>LoadCellInstance.VolumeValue){
 801054a:	4b5c      	ldr	r3, [pc, #368]	@ (80106bc <StartCleanTask+0x284>)
 801054c:	699b      	ldr	r3, [r3, #24]
 801054e:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8010552:	3310      	adds	r3, #16
 8010554:	ee07 3a90 	vmov	s15, r3
 8010558:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801055c:	4b53      	ldr	r3, [pc, #332]	@ (80106ac <StartCleanTask+0x274>)
 801055e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010562:	edd3 7a04 	vldr	s15, [r3, #16]
 8010566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801056e:	bfcc      	ite	gt
 8010570:	2301      	movgt	r3, #1
 8010572:	2300      	movle	r3, #0
 8010574:	b2db      	uxtb	r3, r3
 8010576:	2b00      	cmp	r3, #0
 8010578:	d002      	beq.n	8010580 <StartCleanTask+0x148>
				clearedCount++;
 801057a:	8afb      	ldrh	r3, [r7, #22]
 801057c:	3301      	adds	r3, #1
 801057e:	82fb      	strh	r3, [r7, #22]
			}
			if(clearedCount>5){
 8010580:	8afb      	ldrh	r3, [r7, #22]
 8010582:	2b05      	cmp	r3, #5
 8010584:	d97f      	bls.n	8010686 <StartCleanTask+0x24e>
				if(type==0){
 8010586:	7bfb      	ldrb	r3, [r7, #15]
 8010588:	b2db      	uxtb	r3, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	bf0c      	ite	eq
 801058e:	2301      	moveq	r3, #1
 8010590:	2300      	movne	r3, #0
 8010592:	b2db      	uxtb	r3, r3
 8010594:	2b00      	cmp	r3, #0
 8010596:	d014      	beq.n	80105c2 <StartCleanTask+0x18a>
					CommunicationInstance.ToggleValve(true);
 8010598:	2101      	movs	r1, #1
 801059a:	4845      	ldr	r0, [pc, #276]	@ (80106b0 <StartCleanTask+0x278>)
 801059c:	f7fa fe38 	bl	800b210 <_ZN13Communication11ToggleValveEb>
					if(SystemConfig.IsInternalClean){
 80105a0:	4b46      	ldr	r3, [pc, #280]	@ (80106bc <StartCleanTask+0x284>)
 80105a2:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d005      	beq.n	80105b6 <StartCleanTask+0x17e>
						HAL_Delay(SystemConfig.CleanTime);
 80105aa:	4b44      	ldr	r3, [pc, #272]	@ (80106bc <StartCleanTask+0x284>)
 80105ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7f1 fb6a 	bl	8001c88 <HAL_Delay>
 80105b4:	e009      	b.n	80105ca <StartCleanTask+0x192>
					}
					else{
						vTaskDelay( SystemConfig.CleanTime );
 80105b6:	4b41      	ldr	r3, [pc, #260]	@ (80106bc <StartCleanTask+0x284>)
 80105b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7f7 ff06 	bl	80083cc <vTaskDelay>
 80105c0:	e003      	b.n	80105ca <StartCleanTask+0x192>
					}
				}else{
					CommunicationInstance.TogglePump(false);
 80105c2:	2100      	movs	r1, #0
 80105c4:	483a      	ldr	r0, [pc, #232]	@ (80106b0 <StartCleanTask+0x278>)
 80105c6:	f7fa fde9 	bl	800b19c <_ZN13Communication10TogglePumpEb>
				}
				type++;
 80105ca:	7bfb      	ldrb	r3, [r7, #15]
 80105cc:	b2db      	uxtb	r3, r3
 80105ce:	3301      	adds	r3, #1
 80105d0:	b2db      	uxtb	r3, r3
 80105d2:	73fb      	strb	r3, [r7, #15]
				clearedCount=0;
 80105d4:	2300      	movs	r3, #0
 80105d6:	82fb      	strh	r3, [r7, #22]
 80105d8:	e055      	b.n	8010686 <StartCleanTask+0x24e>
			}
		}
		else if(type==1){
 80105da:	7bfb      	ldrb	r3, [r7, #15]
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	2b01      	cmp	r3, #1
 80105e0:	bf0c      	ite	eq
 80105e2:	2301      	moveq	r3, #1
 80105e4:	2300      	movne	r3, #0
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d01d      	beq.n	8010628 <StartCleanTask+0x1f0>
			CommunicationInstance.ToggleValve(false);
 80105ec:	2100      	movs	r1, #0
 80105ee:	4830      	ldr	r0, [pc, #192]	@ (80106b0 <StartCleanTask+0x278>)
 80105f0:	f7fa fe0e 	bl	800b210 <_ZN13Communication11ToggleValveEb>
			CommunicationInstance.TogglePump(true);
 80105f4:	2101      	movs	r1, #1
 80105f6:	482e      	ldr	r0, [pc, #184]	@ (80106b0 <StartCleanTask+0x278>)
 80105f8:	f7fa fdd0 	bl	800b19c <_ZN13Communication10TogglePumpEb>
			if(ThreadStorage.PumpMaxRunThreadId!=NULL&&ThreadStorage.PumpMaxRunThreadId!=0x00){
 80105fc:	4b2d      	ldr	r3, [pc, #180]	@ (80106b4 <StartCleanTask+0x27c>)
 80105fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010600:	2b00      	cmp	r3, #0
 8010602:	d00b      	beq.n	801061c <StartCleanTask+0x1e4>
 8010604:	4b2b      	ldr	r3, [pc, #172]	@ (80106b4 <StartCleanTask+0x27c>)
 8010606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010608:	2b00      	cmp	r3, #0
 801060a:	d007      	beq.n	801061c <StartCleanTask+0x1e4>
				osThreadTerminate(ThreadStorage.PumpMaxRunThreadId);
 801060c:	4b29      	ldr	r3, [pc, #164]	@ (80106b4 <StartCleanTask+0x27c>)
 801060e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010610:	4618      	mov	r0, r3
 8010612:	f7f6 f9e1 	bl	80069d8 <osThreadTerminate>
				ThreadStorage.PumpMaxRunThreadId=NULL;
 8010616:	4b27      	ldr	r3, [pc, #156]	@ (80106b4 <StartCleanTask+0x27c>)
 8010618:	2200      	movs	r2, #0
 801061a:	671a      	str	r2, [r3, #112]	@ 0x70
			}
			type++;
 801061c:	7bfb      	ldrb	r3, [r7, #15]
 801061e:	b2db      	uxtb	r3, r3
 8010620:	3301      	adds	r3, #1
 8010622:	b2db      	uxtb	r3, r3
 8010624:	73fb      	strb	r3, [r7, #15]
 8010626:	e02e      	b.n	8010686 <StartCleanTask+0x24e>
		}
		else if(type==3){
 8010628:	7bfb      	ldrb	r3, [r7, #15]
 801062a:	b2db      	uxtb	r3, r3
 801062c:	2b03      	cmp	r3, #3
 801062e:	bf0c      	ite	eq
 8010630:	2301      	moveq	r3, #1
 8010632:	2300      	movne	r3, #0
 8010634:	b2db      	uxtb	r3, r3
 8010636:	2b00      	cmp	r3, #0
 8010638:	d025      	beq.n	8010686 <StartCleanTask+0x24e>
			if(!SystemConfig.IsInternalClean){
 801063a:	4b20      	ldr	r3, [pc, #128]	@ (80106bc <StartCleanTask+0x284>)
 801063c:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8010640:	f083 0301 	eor.w	r3, r3, #1
 8010644:	b2db      	uxtb	r3, r3
 8010646:	2b00      	cmp	r3, #0
 8010648:	d004      	beq.n	8010654 <StartCleanTask+0x21c>
				SendFeedback(RequestType::R_Command, CommandRequestType::CMDR_Clean, ProcessStatuses::PS_End);
 801064a:	2202      	movs	r2, #2
 801064c:	2106      	movs	r1, #6
 801064e:	2002      	movs	r0, #2
 8010650:	f7fe fafa 	bl	800ec48 <SendFeedback>
			}
			SystemConfig.systemMode=SystemModes::EmptyMode;
 8010654:	4b19      	ldr	r3, [pc, #100]	@ (80106bc <StartCleanTask+0x284>)
 8010656:	2200      	movs	r2, #0
 8010658:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			if(ThreadStorage.CleanThreadId!=0x00&&ThreadStorage.CleanThreadId!=NULL){
 801065c:	4b15      	ldr	r3, [pc, #84]	@ (80106b4 <StartCleanTask+0x27c>)
 801065e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010662:	2b00      	cmp	r3, #0
 8010664:	d01c      	beq.n	80106a0 <StartCleanTask+0x268>
 8010666:	4b13      	ldr	r3, [pc, #76]	@ (80106b4 <StartCleanTask+0x27c>)
 8010668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801066c:	2b00      	cmp	r3, #0
 801066e:	d017      	beq.n	80106a0 <StartCleanTask+0x268>
				osThreadTerminate(ThreadStorage.CleanThreadId);
 8010670:	4b10      	ldr	r3, [pc, #64]	@ (80106b4 <StartCleanTask+0x27c>)
 8010672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010676:	4618      	mov	r0, r3
 8010678:	f7f6 f9ae 	bl	80069d8 <osThreadTerminate>
				ThreadStorage.CleanThreadId=NULL;
 801067c:	4b0d      	ldr	r3, [pc, #52]	@ (80106b4 <StartCleanTask+0x27c>)
 801067e:	2200      	movs	r2, #0
 8010680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			}
			break;
 8010684:	e00c      	b.n	80106a0 <StartCleanTask+0x268>
		}
		if(SystemConfig.IsInternalClean){
 8010686:	4b0d      	ldr	r3, [pc, #52]	@ (80106bc <StartCleanTask+0x284>)
 8010688:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 801068c:	2b00      	cmp	r3, #0
 801068e:	d003      	beq.n	8010698 <StartCleanTask+0x260>
			HAL_Delay(xDelay);
 8010690:	2064      	movs	r0, #100	@ 0x64
 8010692:	f7f1 faf9 	bl	8001c88 <HAL_Delay>
 8010696:	e6f0      	b.n	801047a <StartCleanTask+0x42>
		}
		else{
			vTaskDelay( xDelay );
 8010698:	2064      	movs	r0, #100	@ 0x64
 801069a:	f7f7 fe97 	bl	80083cc <vTaskDelay>
		LoadCellInstance.ReadVolumeAndFlow();
 801069e:	e6ec      	b.n	801047a <StartCleanTask+0x42>
			break;
 80106a0:	bf00      	nop
		}
	}
}
 80106a2:	bf00      	nop
 80106a4:	3718      	adds	r7, #24
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	200070c4 	.word	0x200070c4
 80106b0:	200090fc 	.word	0x200090fc
 80106b4:	20009138 	.word	0x20009138
 80106b8:	200093a0 	.word	0x200093a0
 80106bc:	20009328 	.word	0x20009328

080106c0 <StartSafeModeTask>:

void StartSafeModeTask(void *argument){
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b086      	sub	sp, #24
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 1000 / portTICK_PERIOD_MS;
 80106c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80106cc:	613b      	str	r3, [r7, #16]
	const TickType_t xDelay2 = 100 / portTICK_PERIOD_MS;
 80106ce:	2364      	movs	r3, #100	@ 0x64
 80106d0:	60fb      	str	r3, [r7, #12]
	uint8_t type=0;
 80106d2:	2300      	movs	r3, #0
 80106d4:	75fb      	strb	r3, [r7, #23]
	uint8_t clearedCount=0;
 80106d6:	2300      	movs	r3, #0
 80106d8:	75bb      	strb	r3, [r7, #22]
	for(;;)
	{
		LoadCellInstance.ReadVolumeAndFlow();
 80106da:	4837      	ldr	r0, [pc, #220]	@ (80107b8 <StartSafeModeTask+0xf8>)
 80106dc:	f7fd f97e 	bl	800d9dc <_ZN8LoadCell17ReadVolumeAndFlowEv>
		if(type==0){
 80106e0:	7dfb      	ldrb	r3, [r7, #23]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d12b      	bne.n	801073e <StartSafeModeTask+0x7e>
			if(SystemConfig.VolumeAverage+5000<LoadCellInstance.VolumeValue){
 80106e6:	4b35      	ldr	r3, [pc, #212]	@ (80107bc <StartSafeModeTask+0xfc>)
 80106e8:	699b      	ldr	r3, [r3, #24]
 80106ea:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80106ee:	3308      	adds	r3, #8
 80106f0:	ee07 3a90 	vmov	s15, r3
 80106f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80106f8:	4b2f      	ldr	r3, [pc, #188]	@ (80107b8 <StartSafeModeTask+0xf8>)
 80106fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80106fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8010702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801070a:	bf4c      	ite	mi
 801070c:	2301      	movmi	r3, #1
 801070e:	2300      	movpl	r3, #0
 8010710:	b2db      	uxtb	r3, r3
 8010712:	2b00      	cmp	r3, #0
 8010714:	d00e      	beq.n	8010734 <StartSafeModeTask+0x74>
				CommunicationInstance.TogglePump(true);
 8010716:	2101      	movs	r1, #1
 8010718:	4829      	ldr	r0, [pc, #164]	@ (80107c0 <StartSafeModeTask+0x100>)
 801071a:	f7fa fd3f 	bl	800b19c <_ZN13Communication10TogglePumpEb>
				osThreadTerminate(ThreadStorage.PumpMaxRunThreadId);
 801071e:	4b29      	ldr	r3, [pc, #164]	@ (80107c4 <StartSafeModeTask+0x104>)
 8010720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010722:	4618      	mov	r0, r3
 8010724:	f7f6 f958 	bl	80069d8 <osThreadTerminate>
				ThreadStorage.PumpMaxRunThreadId=NULL;
 8010728:	4b26      	ldr	r3, [pc, #152]	@ (80107c4 <StartSafeModeTask+0x104>)
 801072a:	2200      	movs	r2, #0
 801072c:	671a      	str	r2, [r3, #112]	@ 0x70
				type++;
 801072e:	7dfb      	ldrb	r3, [r7, #23]
 8010730:	3301      	adds	r3, #1
 8010732:	75fb      	strb	r3, [r7, #23]
			}
			vTaskDelay( xDelay );
 8010734:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010738:	f7f7 fe48 	bl	80083cc <vTaskDelay>
 801073c:	e7cd      	b.n	80106da <StartSafeModeTask+0x1a>
		}
		else if(type==1){
 801073e:	7dfb      	ldrb	r3, [r7, #23]
 8010740:	2b01      	cmp	r3, #1
 8010742:	d1ca      	bne.n	80106da <StartSafeModeTask+0x1a>
			if(SystemConfig.VolumeAverage>LoadCellInstance.VolumeValue|| SystemConfig.VolumeAverage+5000>=LoadCellInstance.VolumeValue){
 8010744:	4b1d      	ldr	r3, [pc, #116]	@ (80107bc <StartSafeModeTask+0xfc>)
 8010746:	699b      	ldr	r3, [r3, #24]
 8010748:	ee07 3a90 	vmov	s15, r3
 801074c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010750:	4b19      	ldr	r3, [pc, #100]	@ (80107b8 <StartSafeModeTask+0xf8>)
 8010752:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010756:	edd3 7a04 	vldr	s15, [r3, #16]
 801075a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801075e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010762:	dc12      	bgt.n	801078a <StartSafeModeTask+0xca>
 8010764:	4b15      	ldr	r3, [pc, #84]	@ (80107bc <StartSafeModeTask+0xfc>)
 8010766:	699b      	ldr	r3, [r3, #24]
 8010768:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 801076c:	3308      	adds	r3, #8
 801076e:	ee07 3a90 	vmov	s15, r3
 8010772:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010776:	4b10      	ldr	r3, [pc, #64]	@ (80107b8 <StartSafeModeTask+0xf8>)
 8010778:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801077c:	edd3 7a04 	vldr	s15, [r3, #16]
 8010780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010788:	db01      	blt.n	801078e <StartSafeModeTask+0xce>
 801078a:	2301      	movs	r3, #1
 801078c:	e000      	b.n	8010790 <StartSafeModeTask+0xd0>
 801078e:	2300      	movs	r3, #0
 8010790:	2b00      	cmp	r3, #0
 8010792:	d002      	beq.n	801079a <StartSafeModeTask+0xda>
				clearedCount++;
 8010794:	7dbb      	ldrb	r3, [r7, #22]
 8010796:	3301      	adds	r3, #1
 8010798:	75bb      	strb	r3, [r7, #22]
			}
			if(clearedCount>3){
 801079a:	7dbb      	ldrb	r3, [r7, #22]
 801079c:	2b03      	cmp	r3, #3
 801079e:	d907      	bls.n	80107b0 <StartSafeModeTask+0xf0>
				CommunicationInstance.TogglePump(false);
 80107a0:	2100      	movs	r1, #0
 80107a2:	4807      	ldr	r0, [pc, #28]	@ (80107c0 <StartSafeModeTask+0x100>)
 80107a4:	f7fa fcfa 	bl	800b19c <_ZN13Communication10TogglePumpEb>
				type=0;
 80107a8:	2300      	movs	r3, #0
 80107aa:	75fb      	strb	r3, [r7, #23]
				clearedCount=0;
 80107ac:	2300      	movs	r3, #0
 80107ae:	75bb      	strb	r3, [r7, #22]
			}
			vTaskDelay( xDelay2 );
 80107b0:	2064      	movs	r0, #100	@ 0x64
 80107b2:	f7f7 fe0b 	bl	80083cc <vTaskDelay>
		LoadCellInstance.ReadVolumeAndFlow();
 80107b6:	e790      	b.n	80106da <StartSafeModeTask+0x1a>
 80107b8:	200070c4 	.word	0x200070c4
 80107bc:	20009328 	.word	0x20009328
 80107c0:	200090fc 	.word	0x200090fc
 80107c4:	20009138 	.word	0x20009138

080107c8 <FixVolume>:
		}
	}
}
void FixVolume(void){
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
	ClearLoadcellParams();
 80107ce:	f000 f847 	bl	8010860 <ClearLoadcellParams>
	uint8_t i=0;
 80107d2:	2300      	movs	r3, #0
 80107d4:	71fb      	strb	r3, [r7, #7]
	float32_t maxReaded=0;
 80107d6:	f04f 0300 	mov.w	r3, #0
 80107da:	603b      	str	r3, [r7, #0]
	while(i<10){
 80107dc:	e01f      	b.n	801081e <FixVolume+0x56>
		HAL_Delay(10);
 80107de:	200a      	movs	r0, #10
 80107e0:	f7f1 fa52 	bl	8001c88 <HAL_Delay>
		LoadCellInstance.ReadVolume(false);
 80107e4:	2100      	movs	r1, #0
 80107e6:	481c      	ldr	r0, [pc, #112]	@ (8010858 <FixVolume+0x90>)
 80107e8:	f7fd f9dc 	bl	800dba4 <_ZN8LoadCell10ReadVolumeEb>
		if(LoadCellInstance.LastReadVolumeValue>maxReaded){
 80107ec:	4b1a      	ldr	r3, [pc, #104]	@ (8010858 <FixVolume+0x90>)
 80107ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80107f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80107f6:	ed97 7a00 	vldr	s14, [r7]
 80107fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80107fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010802:	bf4c      	ite	mi
 8010804:	2301      	movmi	r3, #1
 8010806:	2300      	movpl	r3, #0
 8010808:	b2db      	uxtb	r3, r3
 801080a:	2b00      	cmp	r3, #0
 801080c:	d004      	beq.n	8010818 <FixVolume+0x50>
			maxReaded=LoadCellInstance.LastReadVolumeValue;
 801080e:	4b12      	ldr	r3, [pc, #72]	@ (8010858 <FixVolume+0x90>)
 8010810:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010814:	6a1b      	ldr	r3, [r3, #32]
 8010816:	603b      	str	r3, [r7, #0]
		}
		i++;
 8010818:	79fb      	ldrb	r3, [r7, #7]
 801081a:	3301      	adds	r3, #1
 801081c:	71fb      	strb	r3, [r7, #7]
	while(i<10){
 801081e:	79fb      	ldrb	r3, [r7, #7]
 8010820:	2b09      	cmp	r3, #9
 8010822:	d9dc      	bls.n	80107de <FixVolume+0x16>
	}
	if(maxReaded>SystemConfig.VolumeAverage){
 8010824:	4b0d      	ldr	r3, [pc, #52]	@ (801085c <FixVolume+0x94>)
 8010826:	699b      	ldr	r3, [r3, #24]
 8010828:	ee07 3a90 	vmov	s15, r3
 801082c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010830:	ed97 7a00 	vldr	s14, [r7]
 8010834:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801083c:	dc00      	bgt.n	8010840 <FixVolume+0x78>
		SystemConfig.VolumeAverage=maxReaded;
	}
}
 801083e:	e007      	b.n	8010850 <FixVolume+0x88>
		SystemConfig.VolumeAverage=maxReaded;
 8010840:	edd7 7a00 	vldr	s15, [r7]
 8010844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010848:	ee17 2a90 	vmov	r2, s15
 801084c:	4b03      	ldr	r3, [pc, #12]	@ (801085c <FixVolume+0x94>)
 801084e:	619a      	str	r2, [r3, #24]
}
 8010850:	bf00      	nop
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	200070c4 	.word	0x200070c4
 801085c:	20009328 	.word	0x20009328

08010860 <ClearLoadcellParams>:
void ClearLoadcellParams(){
 8010860:	b580      	push	{r7, lr}
 8010862:	af00      	add	r7, sp, #0
	LoadCellInstance.LastFlowValue=0;
 8010864:	4b09      	ldr	r3, [pc, #36]	@ (801088c <ClearLoadcellParams+0x2c>)
 8010866:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801086a:	461a      	mov	r2, r3
 801086c:	f04f 0300 	mov.w	r3, #0
 8010870:	6253      	str	r3, [r2, #36]	@ 0x24
	LoadCellInstance.LastVolumeValue=0;
 8010872:	4b06      	ldr	r3, [pc, #24]	@ (801088c <ClearLoadcellParams+0x2c>)
 8010874:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010878:	461a      	mov	r2, r3
 801087a:	f04f 0300 	mov.w	r3, #0
 801087e:	6293      	str	r3, [r2, #40]	@ 0x28
	LoadCellInstance.ClearParams();
 8010880:	4802      	ldr	r0, [pc, #8]	@ (801088c <ClearLoadcellParams+0x2c>)
 8010882:	f7fd fd95 	bl	800e3b0 <_ZN8LoadCell11ClearParamsEv>
}
 8010886:	bf00      	nop
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	200070c4 	.word	0x200070c4

08010890 <HasCalibration>:
FlashManager GetFlashManager(){
	return FlashManagerInstance;
}
uint8_t HasCalibration(void){
 8010890:	b480      	push	{r7}
 8010892:	af00      	add	r7, sp, #0

	if(SystemConfig.FlowRate<2 || SystemConfig.VolumeRate<2){
 8010894:	4b0d      	ldr	r3, [pc, #52]	@ (80108cc <HasCalibration+0x3c>)
 8010896:	edd3 7a08 	vldr	s15, [r3, #32]
 801089a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801089e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80108a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a6:	d409      	bmi.n	80108bc <HasCalibration+0x2c>
 80108a8:	4b08      	ldr	r3, [pc, #32]	@ (80108cc <HasCalibration+0x3c>)
 80108aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80108ae:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80108b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80108b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ba:	d501      	bpl.n	80108c0 <HasCalibration+0x30>
		return 0;
 80108bc:	2300      	movs	r3, #0
 80108be:	e000      	b.n	80108c2 <HasCalibration+0x32>
	}
	return 1;
 80108c0:	2301      	movs	r3, #1
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr
 80108cc:	20009328 	.word	0x20009328

080108d0 <HasLoadcell>:
uint8_t HasLoadcell(bool read){
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	4603      	mov	r3, r0
 80108d8:	71fb      	strb	r3, [r7, #7]

	if(read){
 80108da:	79fb      	ldrb	r3, [r7, #7]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d002      	beq.n	80108e6 <HasLoadcell+0x16>
		LoadCellInstance.ReadVolumeAndFlow();
 80108e0:	480d      	ldr	r0, [pc, #52]	@ (8010918 <HasLoadcell+0x48>)
 80108e2:	f7fd f87b 	bl	800d9dc <_ZN8LoadCell17ReadVolumeAndFlowEv>
	}
	if(LoadCellInstance.VolumeValue==1310680){
 80108e6:	4b0c      	ldr	r3, [pc, #48]	@ (8010918 <HasLoadcell+0x48>)
 80108e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80108ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80108f0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 801091c <HasLoadcell+0x4c>
 80108f4:	eef4 7a47 	vcmp.f32	s15, s14
 80108f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108fc:	bf0c      	ite	eq
 80108fe:	2301      	moveq	r3, #1
 8010900:	2300      	movne	r3, #0
 8010902:	b2db      	uxtb	r3, r3
 8010904:	2b00      	cmp	r3, #0
 8010906:	d001      	beq.n	801090c <HasLoadcell+0x3c>
		return 0;
 8010908:	2300      	movs	r3, #0
 801090a:	e000      	b.n	801090e <HasLoadcell+0x3e>
	}
	return 1;
 801090c:	2301      	movs	r3, #1
}
 801090e:	4618      	mov	r0, r3
 8010910:	3708      	adds	r7, #8
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
 8010916:	bf00      	nop
 8010918:	200070c4 	.word	0x200070c4
 801091c:	499ffec0 	.word	0x499ffec0

08010920 <HasFirstEmg>:
uint8_t HasFirstEmg(bool read){
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	4603      	mov	r3, r0
 8010928:	71fb      	strb	r3, [r7, #7]

	if(read){
 801092a:	79fb      	ldrb	r3, [r7, #7]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d003      	beq.n	8010938 <HasFirstEmg+0x18>
		EmgInstance.FirstEmgRead(false);
 8010930:	2100      	movs	r1, #0
 8010932:	480a      	ldr	r0, [pc, #40]	@ (801095c <HasFirstEmg+0x3c>)
 8010934:	f7fa fff4 	bl	800b920 <_ZN3Emg12FirstEmgReadEb>
	}
	if(EmgInstance.NonFilterFirstEmg==65535||EmgInstance.NonFilterFirstEmg==0){
 8010938:	4b08      	ldr	r3, [pc, #32]	@ (801095c <HasFirstEmg+0x3c>)
 801093a:	6a1b      	ldr	r3, [r3, #32]
 801093c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010940:	4293      	cmp	r3, r2
 8010942:	d003      	beq.n	801094c <HasFirstEmg+0x2c>
 8010944:	4b05      	ldr	r3, [pc, #20]	@ (801095c <HasFirstEmg+0x3c>)
 8010946:	6a1b      	ldr	r3, [r3, #32]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d101      	bne.n	8010950 <HasFirstEmg+0x30>
		return 0;
 801094c:	2300      	movs	r3, #0
 801094e:	e000      	b.n	8010952 <HasFirstEmg+0x32>
	}
	return 1;
 8010950:	2301      	movs	r3, #1
}
 8010952:	4618      	mov	r0, r3
 8010954:	3708      	adds	r7, #8
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	20005080 	.word	0x20005080

08010960 <HasSecondEmg>:
uint8_t HasSecondEmg(bool read){
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	4603      	mov	r3, r0
 8010968:	71fb      	strb	r3, [r7, #7]
	if(read){
 801096a:	79fb      	ldrb	r3, [r7, #7]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d003      	beq.n	8010978 <HasSecondEmg+0x18>
		EmgInstance.SecondEmgRead(false);
 8010970:	2100      	movs	r1, #0
 8010972:	480a      	ldr	r0, [pc, #40]	@ (801099c <HasSecondEmg+0x3c>)
 8010974:	f7fb f84c 	bl	800ba10 <_ZN3Emg13SecondEmgReadEb>
	}
	if(EmgInstance.NonFilterSecondEmg==65535||EmgInstance.NonFilterSecondEmg==0){
 8010978:	4b08      	ldr	r3, [pc, #32]	@ (801099c <HasSecondEmg+0x3c>)
 801097a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801097c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010980:	4293      	cmp	r3, r2
 8010982:	d003      	beq.n	801098c <HasSecondEmg+0x2c>
 8010984:	4b05      	ldr	r3, [pc, #20]	@ (801099c <HasSecondEmg+0x3c>)
 8010986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010988:	2b00      	cmp	r3, #0
 801098a:	d101      	bne.n	8010990 <HasSecondEmg+0x30>
		return 0;
 801098c:	2300      	movs	r3, #0
 801098e:	e000      	b.n	8010992 <HasSecondEmg+0x32>
	}
	return 1;
 8010990:	2301      	movs	r3, #1
}
 8010992:	4618      	mov	r0, r3
 8010994:	3708      	adds	r7, #8
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	20005080 	.word	0x20005080

080109a0 <_Z41__static_initialization_and_destruction_0ii>:
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	6039      	str	r1, [r7, #0]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	d113      	bne.n	80109d8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80109b6:	4293      	cmp	r3, r2
 80109b8:	d10e      	bne.n	80109d8 <_Z41__static_initialization_and_destruction_0ii+0x38>
Emg EmgInstance;
 80109ba:	4813      	ldr	r0, [pc, #76]	@ (8010a08 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80109bc:	f7fa ff6a 	bl	800b894 <_ZN3EmgC1Ev>
LoadCell LoadCellInstance;
 80109c0:	4812      	ldr	r0, [pc, #72]	@ (8010a0c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80109c2:	f7fc ffb9 	bl	800d938 <_ZN8LoadCellC1Ev>
Communication CommunicationInstance;
 80109c6:	4812      	ldr	r0, [pc, #72]	@ (8010a10 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80109c8:	f7f9 fb66 	bl	800a098 <_ZN13CommunicationC1Ev>
FlashManager FlashManagerInstance;
 80109cc:	4811      	ldr	r0, [pc, #68]	@ (8010a14 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80109ce:	f7fb fb6d 	bl	800c0ac <_ZN12FlashManagerC1Ev>
SystemConfigStruct SystemConfig;
 80109d2:	4811      	ldr	r0, [pc, #68]	@ (8010a18 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80109d4:	f7fd fe22 	bl	800e61c <_ZN18SystemConfigStructC1Ev>
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d110      	bne.n	8010a00 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d10b      	bne.n	8010a00 <_Z41__static_initialization_and_destruction_0ii+0x60>
FlashManager FlashManagerInstance;
 80109e8:	480a      	ldr	r0, [pc, #40]	@ (8010a14 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80109ea:	f7fb fbaf 	bl	800c14c <_ZN12FlashManagerD1Ev>
Communication CommunicationInstance;
 80109ee:	4808      	ldr	r0, [pc, #32]	@ (8010a10 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80109f0:	f7f9 fb6a 	bl	800a0c8 <_ZN13CommunicationD1Ev>
LoadCell LoadCellInstance;
 80109f4:	4805      	ldr	r0, [pc, #20]	@ (8010a0c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80109f6:	f7fc ffaf 	bl	800d958 <_ZN8LoadCellD1Ev>
Emg EmgInstance;
 80109fa:	4803      	ldr	r0, [pc, #12]	@ (8010a08 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80109fc:	f7fa ff6e 	bl	800b8dc <_ZN3EmgD1Ev>
}
 8010a00:	bf00      	nop
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	20005080 	.word	0x20005080
 8010a0c:	200070c4 	.word	0x200070c4
 8010a10:	200090fc 	.word	0x200090fc
 8010a14:	2000911c 	.word	0x2000911c
 8010a18:	20009328 	.word	0x20009328

08010a1c <_GLOBAL__sub_I_sendCounter>:
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010a24:	2001      	movs	r0, #1
 8010a26:	f7ff ffbb 	bl	80109a0 <_Z41__static_initialization_and_destruction_0ii>
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <_GLOBAL__sub_D_sendCounter>:
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010a34:	2000      	movs	r0, #0
 8010a36:	f7ff ffb3 	bl	80109a0 <_Z41__static_initialization_and_destruction_0ii>
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <_ZdlPvj>:
 8010a3c:	f000 b800 	b.w	8010a40 <_ZdlPv>

08010a40 <_ZdlPv>:
 8010a40:	f000 b88e 	b.w	8010b60 <free>

08010a44 <ceilf>:
 8010a44:	ee10 3a10 	vmov	r3, s0
 8010a48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010a4c:	3a7f      	subs	r2, #127	@ 0x7f
 8010a4e:	2a16      	cmp	r2, #22
 8010a50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010a54:	dc2a      	bgt.n	8010aac <ceilf+0x68>
 8010a56:	2a00      	cmp	r2, #0
 8010a58:	da11      	bge.n	8010a7e <ceilf+0x3a>
 8010a5a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010ac0 <ceilf+0x7c>
 8010a5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010a62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a6a:	dd05      	ble.n	8010a78 <ceilf+0x34>
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	db23      	blt.n	8010ab8 <ceilf+0x74>
 8010a70:	2900      	cmp	r1, #0
 8010a72:	bf18      	it	ne
 8010a74:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 8010a78:	ee00 3a10 	vmov	s0, r3
 8010a7c:	4770      	bx	lr
 8010a7e:	4911      	ldr	r1, [pc, #68]	@ (8010ac4 <ceilf+0x80>)
 8010a80:	4111      	asrs	r1, r2
 8010a82:	420b      	tst	r3, r1
 8010a84:	d0fa      	beq.n	8010a7c <ceilf+0x38>
 8010a86:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010ac0 <ceilf+0x7c>
 8010a8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010a8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a96:	ddef      	ble.n	8010a78 <ceilf+0x34>
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	bfc2      	ittt	gt
 8010a9c:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 8010aa0:	fa40 f202 	asrgt.w	r2, r0, r2
 8010aa4:	189b      	addgt	r3, r3, r2
 8010aa6:	ea23 0301 	bic.w	r3, r3, r1
 8010aaa:	e7e5      	b.n	8010a78 <ceilf+0x34>
 8010aac:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010ab0:	d3e4      	bcc.n	8010a7c <ceilf+0x38>
 8010ab2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ab6:	4770      	bx	lr
 8010ab8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010abc:	e7dc      	b.n	8010a78 <ceilf+0x34>
 8010abe:	bf00      	nop
 8010ac0:	7149f2ca 	.word	0x7149f2ca
 8010ac4:	007fffff 	.word	0x007fffff

08010ac8 <floorf>:
 8010ac8:	ee10 3a10 	vmov	r3, s0
 8010acc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010ad0:	3a7f      	subs	r2, #127	@ 0x7f
 8010ad2:	2a16      	cmp	r2, #22
 8010ad4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010ad8:	dc2b      	bgt.n	8010b32 <floorf+0x6a>
 8010ada:	2a00      	cmp	r2, #0
 8010adc:	da12      	bge.n	8010b04 <floorf+0x3c>
 8010ade:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010b44 <floorf+0x7c>
 8010ae2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010ae6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aee:	dd06      	ble.n	8010afe <floorf+0x36>
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	da24      	bge.n	8010b3e <floorf+0x76>
 8010af4:	2900      	cmp	r1, #0
 8010af6:	4b14      	ldr	r3, [pc, #80]	@ (8010b48 <floorf+0x80>)
 8010af8:	bf08      	it	eq
 8010afa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010afe:	ee00 3a10 	vmov	s0, r3
 8010b02:	4770      	bx	lr
 8010b04:	4911      	ldr	r1, [pc, #68]	@ (8010b4c <floorf+0x84>)
 8010b06:	4111      	asrs	r1, r2
 8010b08:	420b      	tst	r3, r1
 8010b0a:	d0fa      	beq.n	8010b02 <floorf+0x3a>
 8010b0c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010b44 <floorf+0x7c>
 8010b10:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b1c:	ddef      	ble.n	8010afe <floorf+0x36>
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	bfbe      	ittt	lt
 8010b22:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010b26:	fa40 f202 	asrlt.w	r2, r0, r2
 8010b2a:	189b      	addlt	r3, r3, r2
 8010b2c:	ea23 0301 	bic.w	r3, r3, r1
 8010b30:	e7e5      	b.n	8010afe <floorf+0x36>
 8010b32:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010b36:	d3e4      	bcc.n	8010b02 <floorf+0x3a>
 8010b38:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010b3c:	4770      	bx	lr
 8010b3e:	2300      	movs	r3, #0
 8010b40:	e7dd      	b.n	8010afe <floorf+0x36>
 8010b42:	bf00      	nop
 8010b44:	7149f2ca 	.word	0x7149f2ca
 8010b48:	bf800000 	.word	0xbf800000
 8010b4c:	007fffff 	.word	0x007fffff

08010b50 <malloc>:
 8010b50:	4b02      	ldr	r3, [pc, #8]	@ (8010b5c <malloc+0xc>)
 8010b52:	4601      	mov	r1, r0
 8010b54:	6818      	ldr	r0, [r3, #0]
 8010b56:	f000 b82d 	b.w	8010bb4 <_malloc_r>
 8010b5a:	bf00      	nop
 8010b5c:	2000005c 	.word	0x2000005c

08010b60 <free>:
 8010b60:	4b02      	ldr	r3, [pc, #8]	@ (8010b6c <free+0xc>)
 8010b62:	4601      	mov	r1, r0
 8010b64:	6818      	ldr	r0, [r3, #0]
 8010b66:	f000 baad 	b.w	80110c4 <_free_r>
 8010b6a:	bf00      	nop
 8010b6c:	2000005c 	.word	0x2000005c

08010b70 <sbrk_aligned>:
 8010b70:	b570      	push	{r4, r5, r6, lr}
 8010b72:	4e0f      	ldr	r6, [pc, #60]	@ (8010bb0 <sbrk_aligned+0x40>)
 8010b74:	460c      	mov	r4, r1
 8010b76:	6831      	ldr	r1, [r6, #0]
 8010b78:	4605      	mov	r5, r0
 8010b7a:	b911      	cbnz	r1, 8010b82 <sbrk_aligned+0x12>
 8010b7c:	f000 fa26 	bl	8010fcc <_sbrk_r>
 8010b80:	6030      	str	r0, [r6, #0]
 8010b82:	4621      	mov	r1, r4
 8010b84:	4628      	mov	r0, r5
 8010b86:	f000 fa21 	bl	8010fcc <_sbrk_r>
 8010b8a:	1c43      	adds	r3, r0, #1
 8010b8c:	d103      	bne.n	8010b96 <sbrk_aligned+0x26>
 8010b8e:	f04f 34ff 	mov.w	r4, #4294967295
 8010b92:	4620      	mov	r0, r4
 8010b94:	bd70      	pop	{r4, r5, r6, pc}
 8010b96:	1cc4      	adds	r4, r0, #3
 8010b98:	f024 0403 	bic.w	r4, r4, #3
 8010b9c:	42a0      	cmp	r0, r4
 8010b9e:	d0f8      	beq.n	8010b92 <sbrk_aligned+0x22>
 8010ba0:	1a21      	subs	r1, r4, r0
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	f000 fa12 	bl	8010fcc <_sbrk_r>
 8010ba8:	3001      	adds	r0, #1
 8010baa:	d1f2      	bne.n	8010b92 <sbrk_aligned+0x22>
 8010bac:	e7ef      	b.n	8010b8e <sbrk_aligned+0x1e>
 8010bae:	bf00      	nop
 8010bb0:	20009438 	.word	0x20009438

08010bb4 <_malloc_r>:
 8010bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bb8:	1ccd      	adds	r5, r1, #3
 8010bba:	f025 0503 	bic.w	r5, r5, #3
 8010bbe:	3508      	adds	r5, #8
 8010bc0:	2d0c      	cmp	r5, #12
 8010bc2:	bf38      	it	cc
 8010bc4:	250c      	movcc	r5, #12
 8010bc6:	2d00      	cmp	r5, #0
 8010bc8:	4606      	mov	r6, r0
 8010bca:	db01      	blt.n	8010bd0 <_malloc_r+0x1c>
 8010bcc:	42a9      	cmp	r1, r5
 8010bce:	d904      	bls.n	8010bda <_malloc_r+0x26>
 8010bd0:	230c      	movs	r3, #12
 8010bd2:	6033      	str	r3, [r6, #0]
 8010bd4:	2000      	movs	r0, #0
 8010bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010cb0 <_malloc_r+0xfc>
 8010bde:	f000 f869 	bl	8010cb4 <__malloc_lock>
 8010be2:	f8d8 3000 	ldr.w	r3, [r8]
 8010be6:	461c      	mov	r4, r3
 8010be8:	bb44      	cbnz	r4, 8010c3c <_malloc_r+0x88>
 8010bea:	4629      	mov	r1, r5
 8010bec:	4630      	mov	r0, r6
 8010bee:	f7ff ffbf 	bl	8010b70 <sbrk_aligned>
 8010bf2:	1c43      	adds	r3, r0, #1
 8010bf4:	4604      	mov	r4, r0
 8010bf6:	d158      	bne.n	8010caa <_malloc_r+0xf6>
 8010bf8:	f8d8 4000 	ldr.w	r4, [r8]
 8010bfc:	4627      	mov	r7, r4
 8010bfe:	2f00      	cmp	r7, #0
 8010c00:	d143      	bne.n	8010c8a <_malloc_r+0xd6>
 8010c02:	2c00      	cmp	r4, #0
 8010c04:	d04b      	beq.n	8010c9e <_malloc_r+0xea>
 8010c06:	6823      	ldr	r3, [r4, #0]
 8010c08:	4639      	mov	r1, r7
 8010c0a:	4630      	mov	r0, r6
 8010c0c:	eb04 0903 	add.w	r9, r4, r3
 8010c10:	f000 f9dc 	bl	8010fcc <_sbrk_r>
 8010c14:	4581      	cmp	r9, r0
 8010c16:	d142      	bne.n	8010c9e <_malloc_r+0xea>
 8010c18:	6821      	ldr	r1, [r4, #0]
 8010c1a:	1a6d      	subs	r5, r5, r1
 8010c1c:	4629      	mov	r1, r5
 8010c1e:	4630      	mov	r0, r6
 8010c20:	f7ff ffa6 	bl	8010b70 <sbrk_aligned>
 8010c24:	3001      	adds	r0, #1
 8010c26:	d03a      	beq.n	8010c9e <_malloc_r+0xea>
 8010c28:	6823      	ldr	r3, [r4, #0]
 8010c2a:	442b      	add	r3, r5
 8010c2c:	6023      	str	r3, [r4, #0]
 8010c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8010c32:	685a      	ldr	r2, [r3, #4]
 8010c34:	bb62      	cbnz	r2, 8010c90 <_malloc_r+0xdc>
 8010c36:	f8c8 7000 	str.w	r7, [r8]
 8010c3a:	e00f      	b.n	8010c5c <_malloc_r+0xa8>
 8010c3c:	6822      	ldr	r2, [r4, #0]
 8010c3e:	1b52      	subs	r2, r2, r5
 8010c40:	d420      	bmi.n	8010c84 <_malloc_r+0xd0>
 8010c42:	2a0b      	cmp	r2, #11
 8010c44:	d917      	bls.n	8010c76 <_malloc_r+0xc2>
 8010c46:	1961      	adds	r1, r4, r5
 8010c48:	42a3      	cmp	r3, r4
 8010c4a:	6025      	str	r5, [r4, #0]
 8010c4c:	bf18      	it	ne
 8010c4e:	6059      	strne	r1, [r3, #4]
 8010c50:	6863      	ldr	r3, [r4, #4]
 8010c52:	bf08      	it	eq
 8010c54:	f8c8 1000 	streq.w	r1, [r8]
 8010c58:	5162      	str	r2, [r4, r5]
 8010c5a:	604b      	str	r3, [r1, #4]
 8010c5c:	4630      	mov	r0, r6
 8010c5e:	f000 f82f 	bl	8010cc0 <__malloc_unlock>
 8010c62:	f104 000b 	add.w	r0, r4, #11
 8010c66:	1d23      	adds	r3, r4, #4
 8010c68:	f020 0007 	bic.w	r0, r0, #7
 8010c6c:	1ac2      	subs	r2, r0, r3
 8010c6e:	bf1c      	itt	ne
 8010c70:	1a1b      	subne	r3, r3, r0
 8010c72:	50a3      	strne	r3, [r4, r2]
 8010c74:	e7af      	b.n	8010bd6 <_malloc_r+0x22>
 8010c76:	6862      	ldr	r2, [r4, #4]
 8010c78:	42a3      	cmp	r3, r4
 8010c7a:	bf0c      	ite	eq
 8010c7c:	f8c8 2000 	streq.w	r2, [r8]
 8010c80:	605a      	strne	r2, [r3, #4]
 8010c82:	e7eb      	b.n	8010c5c <_malloc_r+0xa8>
 8010c84:	4623      	mov	r3, r4
 8010c86:	6864      	ldr	r4, [r4, #4]
 8010c88:	e7ae      	b.n	8010be8 <_malloc_r+0x34>
 8010c8a:	463c      	mov	r4, r7
 8010c8c:	687f      	ldr	r7, [r7, #4]
 8010c8e:	e7b6      	b.n	8010bfe <_malloc_r+0x4a>
 8010c90:	461a      	mov	r2, r3
 8010c92:	685b      	ldr	r3, [r3, #4]
 8010c94:	42a3      	cmp	r3, r4
 8010c96:	d1fb      	bne.n	8010c90 <_malloc_r+0xdc>
 8010c98:	2300      	movs	r3, #0
 8010c9a:	6053      	str	r3, [r2, #4]
 8010c9c:	e7de      	b.n	8010c5c <_malloc_r+0xa8>
 8010c9e:	230c      	movs	r3, #12
 8010ca0:	6033      	str	r3, [r6, #0]
 8010ca2:	4630      	mov	r0, r6
 8010ca4:	f000 f80c 	bl	8010cc0 <__malloc_unlock>
 8010ca8:	e794      	b.n	8010bd4 <_malloc_r+0x20>
 8010caa:	6005      	str	r5, [r0, #0]
 8010cac:	e7d6      	b.n	8010c5c <_malloc_r+0xa8>
 8010cae:	bf00      	nop
 8010cb0:	2000943c 	.word	0x2000943c

08010cb4 <__malloc_lock>:
 8010cb4:	4801      	ldr	r0, [pc, #4]	@ (8010cbc <__malloc_lock+0x8>)
 8010cb6:	f000 b9d6 	b.w	8011066 <__retarget_lock_acquire_recursive>
 8010cba:	bf00      	nop
 8010cbc:	20009580 	.word	0x20009580

08010cc0 <__malloc_unlock>:
 8010cc0:	4801      	ldr	r0, [pc, #4]	@ (8010cc8 <__malloc_unlock+0x8>)
 8010cc2:	f000 b9d1 	b.w	8011068 <__retarget_lock_release_recursive>
 8010cc6:	bf00      	nop
 8010cc8:	20009580 	.word	0x20009580

08010ccc <rand>:
 8010ccc:	4b16      	ldr	r3, [pc, #88]	@ (8010d28 <rand+0x5c>)
 8010cce:	b510      	push	{r4, lr}
 8010cd0:	681c      	ldr	r4, [r3, #0]
 8010cd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cd4:	b9b3      	cbnz	r3, 8010d04 <rand+0x38>
 8010cd6:	2018      	movs	r0, #24
 8010cd8:	f7ff ff3a 	bl	8010b50 <malloc>
 8010cdc:	4602      	mov	r2, r0
 8010cde:	6320      	str	r0, [r4, #48]	@ 0x30
 8010ce0:	b920      	cbnz	r0, 8010cec <rand+0x20>
 8010ce2:	4b12      	ldr	r3, [pc, #72]	@ (8010d2c <rand+0x60>)
 8010ce4:	4812      	ldr	r0, [pc, #72]	@ (8010d30 <rand+0x64>)
 8010ce6:	2152      	movs	r1, #82	@ 0x52
 8010ce8:	f000 f9ce 	bl	8011088 <__assert_func>
 8010cec:	4911      	ldr	r1, [pc, #68]	@ (8010d34 <rand+0x68>)
 8010cee:	4b12      	ldr	r3, [pc, #72]	@ (8010d38 <rand+0x6c>)
 8010cf0:	e9c0 1300 	strd	r1, r3, [r0]
 8010cf4:	4b11      	ldr	r3, [pc, #68]	@ (8010d3c <rand+0x70>)
 8010cf6:	6083      	str	r3, [r0, #8]
 8010cf8:	230b      	movs	r3, #11
 8010cfa:	8183      	strh	r3, [r0, #12]
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	2001      	movs	r0, #1
 8010d00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010d04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010d06:	480e      	ldr	r0, [pc, #56]	@ (8010d40 <rand+0x74>)
 8010d08:	690b      	ldr	r3, [r1, #16]
 8010d0a:	694c      	ldr	r4, [r1, #20]
 8010d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8010d44 <rand+0x78>)
 8010d0e:	4358      	muls	r0, r3
 8010d10:	fb02 0004 	mla	r0, r2, r4, r0
 8010d14:	fba3 3202 	umull	r3, r2, r3, r2
 8010d18:	3301      	adds	r3, #1
 8010d1a:	eb40 0002 	adc.w	r0, r0, r2
 8010d1e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010d22:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010d26:	bd10      	pop	{r4, pc}
 8010d28:	2000005c 	.word	0x2000005c
 8010d2c:	08011d10 	.word	0x08011d10
 8010d30:	08011d27 	.word	0x08011d27
 8010d34:	abcd330e 	.word	0xabcd330e
 8010d38:	e66d1234 	.word	0xe66d1234
 8010d3c:	0005deec 	.word	0x0005deec
 8010d40:	5851f42d 	.word	0x5851f42d
 8010d44:	4c957f2d 	.word	0x4c957f2d

08010d48 <std>:
 8010d48:	2300      	movs	r3, #0
 8010d4a:	b510      	push	{r4, lr}
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8010d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d56:	6083      	str	r3, [r0, #8]
 8010d58:	8181      	strh	r1, [r0, #12]
 8010d5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8010d5c:	81c2      	strh	r2, [r0, #14]
 8010d5e:	6183      	str	r3, [r0, #24]
 8010d60:	4619      	mov	r1, r3
 8010d62:	2208      	movs	r2, #8
 8010d64:	305c      	adds	r0, #92	@ 0x5c
 8010d66:	f000 f8f4 	bl	8010f52 <memset>
 8010d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010da0 <std+0x58>)
 8010d6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8010d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8010da4 <std+0x5c>)
 8010d70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010d72:	4b0d      	ldr	r3, [pc, #52]	@ (8010da8 <std+0x60>)
 8010d74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010d76:	4b0d      	ldr	r3, [pc, #52]	@ (8010dac <std+0x64>)
 8010d78:	6323      	str	r3, [r4, #48]	@ 0x30
 8010d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8010db0 <std+0x68>)
 8010d7c:	6224      	str	r4, [r4, #32]
 8010d7e:	429c      	cmp	r4, r3
 8010d80:	d006      	beq.n	8010d90 <std+0x48>
 8010d82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010d86:	4294      	cmp	r4, r2
 8010d88:	d002      	beq.n	8010d90 <std+0x48>
 8010d8a:	33d0      	adds	r3, #208	@ 0xd0
 8010d8c:	429c      	cmp	r4, r3
 8010d8e:	d105      	bne.n	8010d9c <std+0x54>
 8010d90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d98:	f000 b964 	b.w	8011064 <__retarget_lock_init_recursive>
 8010d9c:	bd10      	pop	{r4, pc}
 8010d9e:	bf00      	nop
 8010da0:	08010ecd 	.word	0x08010ecd
 8010da4:	08010eef 	.word	0x08010eef
 8010da8:	08010f27 	.word	0x08010f27
 8010dac:	08010f4b 	.word	0x08010f4b
 8010db0:	20009440 	.word	0x20009440

08010db4 <stdio_exit_handler>:
 8010db4:	4a02      	ldr	r2, [pc, #8]	@ (8010dc0 <stdio_exit_handler+0xc>)
 8010db6:	4903      	ldr	r1, [pc, #12]	@ (8010dc4 <stdio_exit_handler+0x10>)
 8010db8:	4803      	ldr	r0, [pc, #12]	@ (8010dc8 <stdio_exit_handler+0x14>)
 8010dba:	f000 b869 	b.w	8010e90 <_fwalk_sglue>
 8010dbe:	bf00      	nop
 8010dc0:	20000050 	.word	0x20000050
 8010dc4:	08011261 	.word	0x08011261
 8010dc8:	20000060 	.word	0x20000060

08010dcc <cleanup_stdio>:
 8010dcc:	6841      	ldr	r1, [r0, #4]
 8010dce:	4b0c      	ldr	r3, [pc, #48]	@ (8010e00 <cleanup_stdio+0x34>)
 8010dd0:	4299      	cmp	r1, r3
 8010dd2:	b510      	push	{r4, lr}
 8010dd4:	4604      	mov	r4, r0
 8010dd6:	d001      	beq.n	8010ddc <cleanup_stdio+0x10>
 8010dd8:	f000 fa42 	bl	8011260 <_fflush_r>
 8010ddc:	68a1      	ldr	r1, [r4, #8]
 8010dde:	4b09      	ldr	r3, [pc, #36]	@ (8010e04 <cleanup_stdio+0x38>)
 8010de0:	4299      	cmp	r1, r3
 8010de2:	d002      	beq.n	8010dea <cleanup_stdio+0x1e>
 8010de4:	4620      	mov	r0, r4
 8010de6:	f000 fa3b 	bl	8011260 <_fflush_r>
 8010dea:	68e1      	ldr	r1, [r4, #12]
 8010dec:	4b06      	ldr	r3, [pc, #24]	@ (8010e08 <cleanup_stdio+0x3c>)
 8010dee:	4299      	cmp	r1, r3
 8010df0:	d004      	beq.n	8010dfc <cleanup_stdio+0x30>
 8010df2:	4620      	mov	r0, r4
 8010df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010df8:	f000 ba32 	b.w	8011260 <_fflush_r>
 8010dfc:	bd10      	pop	{r4, pc}
 8010dfe:	bf00      	nop
 8010e00:	20009440 	.word	0x20009440
 8010e04:	200094a8 	.word	0x200094a8
 8010e08:	20009510 	.word	0x20009510

08010e0c <global_stdio_init.part.0>:
 8010e0c:	b510      	push	{r4, lr}
 8010e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8010e3c <global_stdio_init.part.0+0x30>)
 8010e10:	4c0b      	ldr	r4, [pc, #44]	@ (8010e40 <global_stdio_init.part.0+0x34>)
 8010e12:	4a0c      	ldr	r2, [pc, #48]	@ (8010e44 <global_stdio_init.part.0+0x38>)
 8010e14:	601a      	str	r2, [r3, #0]
 8010e16:	4620      	mov	r0, r4
 8010e18:	2200      	movs	r2, #0
 8010e1a:	2104      	movs	r1, #4
 8010e1c:	f7ff ff94 	bl	8010d48 <std>
 8010e20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010e24:	2201      	movs	r2, #1
 8010e26:	2109      	movs	r1, #9
 8010e28:	f7ff ff8e 	bl	8010d48 <std>
 8010e2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010e30:	2202      	movs	r2, #2
 8010e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e36:	2112      	movs	r1, #18
 8010e38:	f7ff bf86 	b.w	8010d48 <std>
 8010e3c:	20009578 	.word	0x20009578
 8010e40:	20009440 	.word	0x20009440
 8010e44:	08010db5 	.word	0x08010db5

08010e48 <__sfp_lock_acquire>:
 8010e48:	4801      	ldr	r0, [pc, #4]	@ (8010e50 <__sfp_lock_acquire+0x8>)
 8010e4a:	f000 b90c 	b.w	8011066 <__retarget_lock_acquire_recursive>
 8010e4e:	bf00      	nop
 8010e50:	20009581 	.word	0x20009581

08010e54 <__sfp_lock_release>:
 8010e54:	4801      	ldr	r0, [pc, #4]	@ (8010e5c <__sfp_lock_release+0x8>)
 8010e56:	f000 b907 	b.w	8011068 <__retarget_lock_release_recursive>
 8010e5a:	bf00      	nop
 8010e5c:	20009581 	.word	0x20009581

08010e60 <__sinit>:
 8010e60:	b510      	push	{r4, lr}
 8010e62:	4604      	mov	r4, r0
 8010e64:	f7ff fff0 	bl	8010e48 <__sfp_lock_acquire>
 8010e68:	6a23      	ldr	r3, [r4, #32]
 8010e6a:	b11b      	cbz	r3, 8010e74 <__sinit+0x14>
 8010e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e70:	f7ff bff0 	b.w	8010e54 <__sfp_lock_release>
 8010e74:	4b04      	ldr	r3, [pc, #16]	@ (8010e88 <__sinit+0x28>)
 8010e76:	6223      	str	r3, [r4, #32]
 8010e78:	4b04      	ldr	r3, [pc, #16]	@ (8010e8c <__sinit+0x2c>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1f5      	bne.n	8010e6c <__sinit+0xc>
 8010e80:	f7ff ffc4 	bl	8010e0c <global_stdio_init.part.0>
 8010e84:	e7f2      	b.n	8010e6c <__sinit+0xc>
 8010e86:	bf00      	nop
 8010e88:	08010dcd 	.word	0x08010dcd
 8010e8c:	20009578 	.word	0x20009578

08010e90 <_fwalk_sglue>:
 8010e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e94:	4607      	mov	r7, r0
 8010e96:	4688      	mov	r8, r1
 8010e98:	4614      	mov	r4, r2
 8010e9a:	2600      	movs	r6, #0
 8010e9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ea0:	f1b9 0901 	subs.w	r9, r9, #1
 8010ea4:	d505      	bpl.n	8010eb2 <_fwalk_sglue+0x22>
 8010ea6:	6824      	ldr	r4, [r4, #0]
 8010ea8:	2c00      	cmp	r4, #0
 8010eaa:	d1f7      	bne.n	8010e9c <_fwalk_sglue+0xc>
 8010eac:	4630      	mov	r0, r6
 8010eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eb2:	89ab      	ldrh	r3, [r5, #12]
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d907      	bls.n	8010ec8 <_fwalk_sglue+0x38>
 8010eb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	d003      	beq.n	8010ec8 <_fwalk_sglue+0x38>
 8010ec0:	4629      	mov	r1, r5
 8010ec2:	4638      	mov	r0, r7
 8010ec4:	47c0      	blx	r8
 8010ec6:	4306      	orrs	r6, r0
 8010ec8:	3568      	adds	r5, #104	@ 0x68
 8010eca:	e7e9      	b.n	8010ea0 <_fwalk_sglue+0x10>

08010ecc <__sread>:
 8010ecc:	b510      	push	{r4, lr}
 8010ece:	460c      	mov	r4, r1
 8010ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ed4:	f000 f868 	bl	8010fa8 <_read_r>
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	bfab      	itete	ge
 8010edc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010ede:	89a3      	ldrhlt	r3, [r4, #12]
 8010ee0:	181b      	addge	r3, r3, r0
 8010ee2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010ee6:	bfac      	ite	ge
 8010ee8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010eea:	81a3      	strhlt	r3, [r4, #12]
 8010eec:	bd10      	pop	{r4, pc}

08010eee <__swrite>:
 8010eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef2:	461f      	mov	r7, r3
 8010ef4:	898b      	ldrh	r3, [r1, #12]
 8010ef6:	05db      	lsls	r3, r3, #23
 8010ef8:	4605      	mov	r5, r0
 8010efa:	460c      	mov	r4, r1
 8010efc:	4616      	mov	r6, r2
 8010efe:	d505      	bpl.n	8010f0c <__swrite+0x1e>
 8010f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f04:	2302      	movs	r3, #2
 8010f06:	2200      	movs	r2, #0
 8010f08:	f000 f83c 	bl	8010f84 <_lseek_r>
 8010f0c:	89a3      	ldrh	r3, [r4, #12]
 8010f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010f16:	81a3      	strh	r3, [r4, #12]
 8010f18:	4632      	mov	r2, r6
 8010f1a:	463b      	mov	r3, r7
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f22:	f000 b863 	b.w	8010fec <_write_r>

08010f26 <__sseek>:
 8010f26:	b510      	push	{r4, lr}
 8010f28:	460c      	mov	r4, r1
 8010f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f2e:	f000 f829 	bl	8010f84 <_lseek_r>
 8010f32:	1c43      	adds	r3, r0, #1
 8010f34:	89a3      	ldrh	r3, [r4, #12]
 8010f36:	bf15      	itete	ne
 8010f38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010f3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010f3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010f42:	81a3      	strheq	r3, [r4, #12]
 8010f44:	bf18      	it	ne
 8010f46:	81a3      	strhne	r3, [r4, #12]
 8010f48:	bd10      	pop	{r4, pc}

08010f4a <__sclose>:
 8010f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f4e:	f000 b809 	b.w	8010f64 <_close_r>

08010f52 <memset>:
 8010f52:	4402      	add	r2, r0
 8010f54:	4603      	mov	r3, r0
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d100      	bne.n	8010f5c <memset+0xa>
 8010f5a:	4770      	bx	lr
 8010f5c:	f803 1b01 	strb.w	r1, [r3], #1
 8010f60:	e7f9      	b.n	8010f56 <memset+0x4>
	...

08010f64 <_close_r>:
 8010f64:	b538      	push	{r3, r4, r5, lr}
 8010f66:	4d06      	ldr	r5, [pc, #24]	@ (8010f80 <_close_r+0x1c>)
 8010f68:	2300      	movs	r3, #0
 8010f6a:	4604      	mov	r4, r0
 8010f6c:	4608      	mov	r0, r1
 8010f6e:	602b      	str	r3, [r5, #0]
 8010f70:	f7f0 fd72 	bl	8001a58 <_close>
 8010f74:	1c43      	adds	r3, r0, #1
 8010f76:	d102      	bne.n	8010f7e <_close_r+0x1a>
 8010f78:	682b      	ldr	r3, [r5, #0]
 8010f7a:	b103      	cbz	r3, 8010f7e <_close_r+0x1a>
 8010f7c:	6023      	str	r3, [r4, #0]
 8010f7e:	bd38      	pop	{r3, r4, r5, pc}
 8010f80:	2000957c 	.word	0x2000957c

08010f84 <_lseek_r>:
 8010f84:	b538      	push	{r3, r4, r5, lr}
 8010f86:	4d07      	ldr	r5, [pc, #28]	@ (8010fa4 <_lseek_r+0x20>)
 8010f88:	4604      	mov	r4, r0
 8010f8a:	4608      	mov	r0, r1
 8010f8c:	4611      	mov	r1, r2
 8010f8e:	2200      	movs	r2, #0
 8010f90:	602a      	str	r2, [r5, #0]
 8010f92:	461a      	mov	r2, r3
 8010f94:	f7f0 fd87 	bl	8001aa6 <_lseek>
 8010f98:	1c43      	adds	r3, r0, #1
 8010f9a:	d102      	bne.n	8010fa2 <_lseek_r+0x1e>
 8010f9c:	682b      	ldr	r3, [r5, #0]
 8010f9e:	b103      	cbz	r3, 8010fa2 <_lseek_r+0x1e>
 8010fa0:	6023      	str	r3, [r4, #0]
 8010fa2:	bd38      	pop	{r3, r4, r5, pc}
 8010fa4:	2000957c 	.word	0x2000957c

08010fa8 <_read_r>:
 8010fa8:	b538      	push	{r3, r4, r5, lr}
 8010faa:	4d07      	ldr	r5, [pc, #28]	@ (8010fc8 <_read_r+0x20>)
 8010fac:	4604      	mov	r4, r0
 8010fae:	4608      	mov	r0, r1
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	602a      	str	r2, [r5, #0]
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	f7f0 fd15 	bl	80019e6 <_read>
 8010fbc:	1c43      	adds	r3, r0, #1
 8010fbe:	d102      	bne.n	8010fc6 <_read_r+0x1e>
 8010fc0:	682b      	ldr	r3, [r5, #0]
 8010fc2:	b103      	cbz	r3, 8010fc6 <_read_r+0x1e>
 8010fc4:	6023      	str	r3, [r4, #0]
 8010fc6:	bd38      	pop	{r3, r4, r5, pc}
 8010fc8:	2000957c 	.word	0x2000957c

08010fcc <_sbrk_r>:
 8010fcc:	b538      	push	{r3, r4, r5, lr}
 8010fce:	4d06      	ldr	r5, [pc, #24]	@ (8010fe8 <_sbrk_r+0x1c>)
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	4604      	mov	r4, r0
 8010fd4:	4608      	mov	r0, r1
 8010fd6:	602b      	str	r3, [r5, #0]
 8010fd8:	f7f0 fd72 	bl	8001ac0 <_sbrk>
 8010fdc:	1c43      	adds	r3, r0, #1
 8010fde:	d102      	bne.n	8010fe6 <_sbrk_r+0x1a>
 8010fe0:	682b      	ldr	r3, [r5, #0]
 8010fe2:	b103      	cbz	r3, 8010fe6 <_sbrk_r+0x1a>
 8010fe4:	6023      	str	r3, [r4, #0]
 8010fe6:	bd38      	pop	{r3, r4, r5, pc}
 8010fe8:	2000957c 	.word	0x2000957c

08010fec <_write_r>:
 8010fec:	b538      	push	{r3, r4, r5, lr}
 8010fee:	4d07      	ldr	r5, [pc, #28]	@ (801100c <_write_r+0x20>)
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	4608      	mov	r0, r1
 8010ff4:	4611      	mov	r1, r2
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	602a      	str	r2, [r5, #0]
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	f7f0 fd10 	bl	8001a20 <_write>
 8011000:	1c43      	adds	r3, r0, #1
 8011002:	d102      	bne.n	801100a <_write_r+0x1e>
 8011004:	682b      	ldr	r3, [r5, #0]
 8011006:	b103      	cbz	r3, 801100a <_write_r+0x1e>
 8011008:	6023      	str	r3, [r4, #0]
 801100a:	bd38      	pop	{r3, r4, r5, pc}
 801100c:	2000957c 	.word	0x2000957c

08011010 <__errno>:
 8011010:	4b01      	ldr	r3, [pc, #4]	@ (8011018 <__errno+0x8>)
 8011012:	6818      	ldr	r0, [r3, #0]
 8011014:	4770      	bx	lr
 8011016:	bf00      	nop
 8011018:	2000005c 	.word	0x2000005c

0801101c <__libc_init_array>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	4d0d      	ldr	r5, [pc, #52]	@ (8011054 <__libc_init_array+0x38>)
 8011020:	4c0d      	ldr	r4, [pc, #52]	@ (8011058 <__libc_init_array+0x3c>)
 8011022:	1b64      	subs	r4, r4, r5
 8011024:	10a4      	asrs	r4, r4, #2
 8011026:	2600      	movs	r6, #0
 8011028:	42a6      	cmp	r6, r4
 801102a:	d109      	bne.n	8011040 <__libc_init_array+0x24>
 801102c:	4d0b      	ldr	r5, [pc, #44]	@ (801105c <__libc_init_array+0x40>)
 801102e:	4c0c      	ldr	r4, [pc, #48]	@ (8011060 <__libc_init_array+0x44>)
 8011030:	f000 fd82 	bl	8011b38 <_init>
 8011034:	1b64      	subs	r4, r4, r5
 8011036:	10a4      	asrs	r4, r4, #2
 8011038:	2600      	movs	r6, #0
 801103a:	42a6      	cmp	r6, r4
 801103c:	d105      	bne.n	801104a <__libc_init_array+0x2e>
 801103e:	bd70      	pop	{r4, r5, r6, pc}
 8011040:	f855 3b04 	ldr.w	r3, [r5], #4
 8011044:	4798      	blx	r3
 8011046:	3601      	adds	r6, #1
 8011048:	e7ee      	b.n	8011028 <__libc_init_array+0xc>
 801104a:	f855 3b04 	ldr.w	r3, [r5], #4
 801104e:	4798      	blx	r3
 8011050:	3601      	adds	r6, #1
 8011052:	e7f2      	b.n	801103a <__libc_init_array+0x1e>
 8011054:	08011df8 	.word	0x08011df8
 8011058:	08011df8 	.word	0x08011df8
 801105c:	08011df8 	.word	0x08011df8
 8011060:	08011e04 	.word	0x08011e04

08011064 <__retarget_lock_init_recursive>:
 8011064:	4770      	bx	lr

08011066 <__retarget_lock_acquire_recursive>:
 8011066:	4770      	bx	lr

08011068 <__retarget_lock_release_recursive>:
 8011068:	4770      	bx	lr

0801106a <memcpy>:
 801106a:	440a      	add	r2, r1
 801106c:	4291      	cmp	r1, r2
 801106e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011072:	d100      	bne.n	8011076 <memcpy+0xc>
 8011074:	4770      	bx	lr
 8011076:	b510      	push	{r4, lr}
 8011078:	f811 4b01 	ldrb.w	r4, [r1], #1
 801107c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011080:	4291      	cmp	r1, r2
 8011082:	d1f9      	bne.n	8011078 <memcpy+0xe>
 8011084:	bd10      	pop	{r4, pc}
	...

08011088 <__assert_func>:
 8011088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801108a:	4614      	mov	r4, r2
 801108c:	461a      	mov	r2, r3
 801108e:	4b09      	ldr	r3, [pc, #36]	@ (80110b4 <__assert_func+0x2c>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	4605      	mov	r5, r0
 8011094:	68d8      	ldr	r0, [r3, #12]
 8011096:	b954      	cbnz	r4, 80110ae <__assert_func+0x26>
 8011098:	4b07      	ldr	r3, [pc, #28]	@ (80110b8 <__assert_func+0x30>)
 801109a:	461c      	mov	r4, r3
 801109c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80110a0:	9100      	str	r1, [sp, #0]
 80110a2:	462b      	mov	r3, r5
 80110a4:	4905      	ldr	r1, [pc, #20]	@ (80110bc <__assert_func+0x34>)
 80110a6:	f000 f903 	bl	80112b0 <fiprintf>
 80110aa:	f000 f913 	bl	80112d4 <abort>
 80110ae:	4b04      	ldr	r3, [pc, #16]	@ (80110c0 <__assert_func+0x38>)
 80110b0:	e7f4      	b.n	801109c <__assert_func+0x14>
 80110b2:	bf00      	nop
 80110b4:	2000005c 	.word	0x2000005c
 80110b8:	08011dba 	.word	0x08011dba
 80110bc:	08011d8c 	.word	0x08011d8c
 80110c0:	08011d7f 	.word	0x08011d7f

080110c4 <_free_r>:
 80110c4:	b538      	push	{r3, r4, r5, lr}
 80110c6:	4605      	mov	r5, r0
 80110c8:	2900      	cmp	r1, #0
 80110ca:	d041      	beq.n	8011150 <_free_r+0x8c>
 80110cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110d0:	1f0c      	subs	r4, r1, #4
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	bfb8      	it	lt
 80110d6:	18e4      	addlt	r4, r4, r3
 80110d8:	f7ff fdec 	bl	8010cb4 <__malloc_lock>
 80110dc:	4a1d      	ldr	r2, [pc, #116]	@ (8011154 <_free_r+0x90>)
 80110de:	6813      	ldr	r3, [r2, #0]
 80110e0:	b933      	cbnz	r3, 80110f0 <_free_r+0x2c>
 80110e2:	6063      	str	r3, [r4, #4]
 80110e4:	6014      	str	r4, [r2, #0]
 80110e6:	4628      	mov	r0, r5
 80110e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110ec:	f7ff bde8 	b.w	8010cc0 <__malloc_unlock>
 80110f0:	42a3      	cmp	r3, r4
 80110f2:	d908      	bls.n	8011106 <_free_r+0x42>
 80110f4:	6820      	ldr	r0, [r4, #0]
 80110f6:	1821      	adds	r1, r4, r0
 80110f8:	428b      	cmp	r3, r1
 80110fa:	bf01      	itttt	eq
 80110fc:	6819      	ldreq	r1, [r3, #0]
 80110fe:	685b      	ldreq	r3, [r3, #4]
 8011100:	1809      	addeq	r1, r1, r0
 8011102:	6021      	streq	r1, [r4, #0]
 8011104:	e7ed      	b.n	80110e2 <_free_r+0x1e>
 8011106:	461a      	mov	r2, r3
 8011108:	685b      	ldr	r3, [r3, #4]
 801110a:	b10b      	cbz	r3, 8011110 <_free_r+0x4c>
 801110c:	42a3      	cmp	r3, r4
 801110e:	d9fa      	bls.n	8011106 <_free_r+0x42>
 8011110:	6811      	ldr	r1, [r2, #0]
 8011112:	1850      	adds	r0, r2, r1
 8011114:	42a0      	cmp	r0, r4
 8011116:	d10b      	bne.n	8011130 <_free_r+0x6c>
 8011118:	6820      	ldr	r0, [r4, #0]
 801111a:	4401      	add	r1, r0
 801111c:	1850      	adds	r0, r2, r1
 801111e:	4283      	cmp	r3, r0
 8011120:	6011      	str	r1, [r2, #0]
 8011122:	d1e0      	bne.n	80110e6 <_free_r+0x22>
 8011124:	6818      	ldr	r0, [r3, #0]
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	6053      	str	r3, [r2, #4]
 801112a:	4408      	add	r0, r1
 801112c:	6010      	str	r0, [r2, #0]
 801112e:	e7da      	b.n	80110e6 <_free_r+0x22>
 8011130:	d902      	bls.n	8011138 <_free_r+0x74>
 8011132:	230c      	movs	r3, #12
 8011134:	602b      	str	r3, [r5, #0]
 8011136:	e7d6      	b.n	80110e6 <_free_r+0x22>
 8011138:	6820      	ldr	r0, [r4, #0]
 801113a:	1821      	adds	r1, r4, r0
 801113c:	428b      	cmp	r3, r1
 801113e:	bf04      	itt	eq
 8011140:	6819      	ldreq	r1, [r3, #0]
 8011142:	685b      	ldreq	r3, [r3, #4]
 8011144:	6063      	str	r3, [r4, #4]
 8011146:	bf04      	itt	eq
 8011148:	1809      	addeq	r1, r1, r0
 801114a:	6021      	streq	r1, [r4, #0]
 801114c:	6054      	str	r4, [r2, #4]
 801114e:	e7ca      	b.n	80110e6 <_free_r+0x22>
 8011150:	bd38      	pop	{r3, r4, r5, pc}
 8011152:	bf00      	nop
 8011154:	2000943c 	.word	0x2000943c

08011158 <__sflush_r>:
 8011158:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801115c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011160:	0716      	lsls	r6, r2, #28
 8011162:	4605      	mov	r5, r0
 8011164:	460c      	mov	r4, r1
 8011166:	d454      	bmi.n	8011212 <__sflush_r+0xba>
 8011168:	684b      	ldr	r3, [r1, #4]
 801116a:	2b00      	cmp	r3, #0
 801116c:	dc02      	bgt.n	8011174 <__sflush_r+0x1c>
 801116e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011170:	2b00      	cmp	r3, #0
 8011172:	dd48      	ble.n	8011206 <__sflush_r+0xae>
 8011174:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011176:	2e00      	cmp	r6, #0
 8011178:	d045      	beq.n	8011206 <__sflush_r+0xae>
 801117a:	2300      	movs	r3, #0
 801117c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011180:	682f      	ldr	r7, [r5, #0]
 8011182:	6a21      	ldr	r1, [r4, #32]
 8011184:	602b      	str	r3, [r5, #0]
 8011186:	d030      	beq.n	80111ea <__sflush_r+0x92>
 8011188:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801118a:	89a3      	ldrh	r3, [r4, #12]
 801118c:	0759      	lsls	r1, r3, #29
 801118e:	d505      	bpl.n	801119c <__sflush_r+0x44>
 8011190:	6863      	ldr	r3, [r4, #4]
 8011192:	1ad2      	subs	r2, r2, r3
 8011194:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011196:	b10b      	cbz	r3, 801119c <__sflush_r+0x44>
 8011198:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801119a:	1ad2      	subs	r2, r2, r3
 801119c:	2300      	movs	r3, #0
 801119e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80111a0:	6a21      	ldr	r1, [r4, #32]
 80111a2:	4628      	mov	r0, r5
 80111a4:	47b0      	blx	r6
 80111a6:	1c43      	adds	r3, r0, #1
 80111a8:	89a3      	ldrh	r3, [r4, #12]
 80111aa:	d106      	bne.n	80111ba <__sflush_r+0x62>
 80111ac:	6829      	ldr	r1, [r5, #0]
 80111ae:	291d      	cmp	r1, #29
 80111b0:	d82b      	bhi.n	801120a <__sflush_r+0xb2>
 80111b2:	4a2a      	ldr	r2, [pc, #168]	@ (801125c <__sflush_r+0x104>)
 80111b4:	410a      	asrs	r2, r1
 80111b6:	07d6      	lsls	r6, r2, #31
 80111b8:	d427      	bmi.n	801120a <__sflush_r+0xb2>
 80111ba:	2200      	movs	r2, #0
 80111bc:	6062      	str	r2, [r4, #4]
 80111be:	04d9      	lsls	r1, r3, #19
 80111c0:	6922      	ldr	r2, [r4, #16]
 80111c2:	6022      	str	r2, [r4, #0]
 80111c4:	d504      	bpl.n	80111d0 <__sflush_r+0x78>
 80111c6:	1c42      	adds	r2, r0, #1
 80111c8:	d101      	bne.n	80111ce <__sflush_r+0x76>
 80111ca:	682b      	ldr	r3, [r5, #0]
 80111cc:	b903      	cbnz	r3, 80111d0 <__sflush_r+0x78>
 80111ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80111d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80111d2:	602f      	str	r7, [r5, #0]
 80111d4:	b1b9      	cbz	r1, 8011206 <__sflush_r+0xae>
 80111d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80111da:	4299      	cmp	r1, r3
 80111dc:	d002      	beq.n	80111e4 <__sflush_r+0x8c>
 80111de:	4628      	mov	r0, r5
 80111e0:	f7ff ff70 	bl	80110c4 <_free_r>
 80111e4:	2300      	movs	r3, #0
 80111e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80111e8:	e00d      	b.n	8011206 <__sflush_r+0xae>
 80111ea:	2301      	movs	r3, #1
 80111ec:	4628      	mov	r0, r5
 80111ee:	47b0      	blx	r6
 80111f0:	4602      	mov	r2, r0
 80111f2:	1c50      	adds	r0, r2, #1
 80111f4:	d1c9      	bne.n	801118a <__sflush_r+0x32>
 80111f6:	682b      	ldr	r3, [r5, #0]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d0c6      	beq.n	801118a <__sflush_r+0x32>
 80111fc:	2b1d      	cmp	r3, #29
 80111fe:	d001      	beq.n	8011204 <__sflush_r+0xac>
 8011200:	2b16      	cmp	r3, #22
 8011202:	d11e      	bne.n	8011242 <__sflush_r+0xea>
 8011204:	602f      	str	r7, [r5, #0]
 8011206:	2000      	movs	r0, #0
 8011208:	e022      	b.n	8011250 <__sflush_r+0xf8>
 801120a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801120e:	b21b      	sxth	r3, r3
 8011210:	e01b      	b.n	801124a <__sflush_r+0xf2>
 8011212:	690f      	ldr	r7, [r1, #16]
 8011214:	2f00      	cmp	r7, #0
 8011216:	d0f6      	beq.n	8011206 <__sflush_r+0xae>
 8011218:	0793      	lsls	r3, r2, #30
 801121a:	680e      	ldr	r6, [r1, #0]
 801121c:	bf08      	it	eq
 801121e:	694b      	ldreq	r3, [r1, #20]
 8011220:	600f      	str	r7, [r1, #0]
 8011222:	bf18      	it	ne
 8011224:	2300      	movne	r3, #0
 8011226:	eba6 0807 	sub.w	r8, r6, r7
 801122a:	608b      	str	r3, [r1, #8]
 801122c:	f1b8 0f00 	cmp.w	r8, #0
 8011230:	dde9      	ble.n	8011206 <__sflush_r+0xae>
 8011232:	6a21      	ldr	r1, [r4, #32]
 8011234:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011236:	4643      	mov	r3, r8
 8011238:	463a      	mov	r2, r7
 801123a:	4628      	mov	r0, r5
 801123c:	47b0      	blx	r6
 801123e:	2800      	cmp	r0, #0
 8011240:	dc08      	bgt.n	8011254 <__sflush_r+0xfc>
 8011242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801124a:	81a3      	strh	r3, [r4, #12]
 801124c:	f04f 30ff 	mov.w	r0, #4294967295
 8011250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011254:	4407      	add	r7, r0
 8011256:	eba8 0800 	sub.w	r8, r8, r0
 801125a:	e7e7      	b.n	801122c <__sflush_r+0xd4>
 801125c:	dfbffffe 	.word	0xdfbffffe

08011260 <_fflush_r>:
 8011260:	b538      	push	{r3, r4, r5, lr}
 8011262:	690b      	ldr	r3, [r1, #16]
 8011264:	4605      	mov	r5, r0
 8011266:	460c      	mov	r4, r1
 8011268:	b913      	cbnz	r3, 8011270 <_fflush_r+0x10>
 801126a:	2500      	movs	r5, #0
 801126c:	4628      	mov	r0, r5
 801126e:	bd38      	pop	{r3, r4, r5, pc}
 8011270:	b118      	cbz	r0, 801127a <_fflush_r+0x1a>
 8011272:	6a03      	ldr	r3, [r0, #32]
 8011274:	b90b      	cbnz	r3, 801127a <_fflush_r+0x1a>
 8011276:	f7ff fdf3 	bl	8010e60 <__sinit>
 801127a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d0f3      	beq.n	801126a <_fflush_r+0xa>
 8011282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011284:	07d0      	lsls	r0, r2, #31
 8011286:	d404      	bmi.n	8011292 <_fflush_r+0x32>
 8011288:	0599      	lsls	r1, r3, #22
 801128a:	d402      	bmi.n	8011292 <_fflush_r+0x32>
 801128c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801128e:	f7ff feea 	bl	8011066 <__retarget_lock_acquire_recursive>
 8011292:	4628      	mov	r0, r5
 8011294:	4621      	mov	r1, r4
 8011296:	f7ff ff5f 	bl	8011158 <__sflush_r>
 801129a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801129c:	07da      	lsls	r2, r3, #31
 801129e:	4605      	mov	r5, r0
 80112a0:	d4e4      	bmi.n	801126c <_fflush_r+0xc>
 80112a2:	89a3      	ldrh	r3, [r4, #12]
 80112a4:	059b      	lsls	r3, r3, #22
 80112a6:	d4e1      	bmi.n	801126c <_fflush_r+0xc>
 80112a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112aa:	f7ff fedd 	bl	8011068 <__retarget_lock_release_recursive>
 80112ae:	e7dd      	b.n	801126c <_fflush_r+0xc>

080112b0 <fiprintf>:
 80112b0:	b40e      	push	{r1, r2, r3}
 80112b2:	b503      	push	{r0, r1, lr}
 80112b4:	4601      	mov	r1, r0
 80112b6:	ab03      	add	r3, sp, #12
 80112b8:	4805      	ldr	r0, [pc, #20]	@ (80112d0 <fiprintf+0x20>)
 80112ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80112be:	6800      	ldr	r0, [r0, #0]
 80112c0:	9301      	str	r3, [sp, #4]
 80112c2:	f000 f837 	bl	8011334 <_vfiprintf_r>
 80112c6:	b002      	add	sp, #8
 80112c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80112cc:	b003      	add	sp, #12
 80112ce:	4770      	bx	lr
 80112d0:	2000005c 	.word	0x2000005c

080112d4 <abort>:
 80112d4:	b508      	push	{r3, lr}
 80112d6:	2006      	movs	r0, #6
 80112d8:	f000 fb8e 	bl	80119f8 <raise>
 80112dc:	2001      	movs	r0, #1
 80112de:	f7f0 fb77 	bl	80019d0 <_exit>

080112e2 <__sfputc_r>:
 80112e2:	6893      	ldr	r3, [r2, #8]
 80112e4:	3b01      	subs	r3, #1
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	b410      	push	{r4}
 80112ea:	6093      	str	r3, [r2, #8]
 80112ec:	da08      	bge.n	8011300 <__sfputc_r+0x1e>
 80112ee:	6994      	ldr	r4, [r2, #24]
 80112f0:	42a3      	cmp	r3, r4
 80112f2:	db01      	blt.n	80112f8 <__sfputc_r+0x16>
 80112f4:	290a      	cmp	r1, #10
 80112f6:	d103      	bne.n	8011300 <__sfputc_r+0x1e>
 80112f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112fc:	f000 bac0 	b.w	8011880 <__swbuf_r>
 8011300:	6813      	ldr	r3, [r2, #0]
 8011302:	1c58      	adds	r0, r3, #1
 8011304:	6010      	str	r0, [r2, #0]
 8011306:	7019      	strb	r1, [r3, #0]
 8011308:	4608      	mov	r0, r1
 801130a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801130e:	4770      	bx	lr

08011310 <__sfputs_r>:
 8011310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011312:	4606      	mov	r6, r0
 8011314:	460f      	mov	r7, r1
 8011316:	4614      	mov	r4, r2
 8011318:	18d5      	adds	r5, r2, r3
 801131a:	42ac      	cmp	r4, r5
 801131c:	d101      	bne.n	8011322 <__sfputs_r+0x12>
 801131e:	2000      	movs	r0, #0
 8011320:	e007      	b.n	8011332 <__sfputs_r+0x22>
 8011322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011326:	463a      	mov	r2, r7
 8011328:	4630      	mov	r0, r6
 801132a:	f7ff ffda 	bl	80112e2 <__sfputc_r>
 801132e:	1c43      	adds	r3, r0, #1
 8011330:	d1f3      	bne.n	801131a <__sfputs_r+0xa>
 8011332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011334 <_vfiprintf_r>:
 8011334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011338:	460d      	mov	r5, r1
 801133a:	b09d      	sub	sp, #116	@ 0x74
 801133c:	4614      	mov	r4, r2
 801133e:	4698      	mov	r8, r3
 8011340:	4606      	mov	r6, r0
 8011342:	b118      	cbz	r0, 801134c <_vfiprintf_r+0x18>
 8011344:	6a03      	ldr	r3, [r0, #32]
 8011346:	b90b      	cbnz	r3, 801134c <_vfiprintf_r+0x18>
 8011348:	f7ff fd8a 	bl	8010e60 <__sinit>
 801134c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801134e:	07d9      	lsls	r1, r3, #31
 8011350:	d405      	bmi.n	801135e <_vfiprintf_r+0x2a>
 8011352:	89ab      	ldrh	r3, [r5, #12]
 8011354:	059a      	lsls	r2, r3, #22
 8011356:	d402      	bmi.n	801135e <_vfiprintf_r+0x2a>
 8011358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801135a:	f7ff fe84 	bl	8011066 <__retarget_lock_acquire_recursive>
 801135e:	89ab      	ldrh	r3, [r5, #12]
 8011360:	071b      	lsls	r3, r3, #28
 8011362:	d501      	bpl.n	8011368 <_vfiprintf_r+0x34>
 8011364:	692b      	ldr	r3, [r5, #16]
 8011366:	b99b      	cbnz	r3, 8011390 <_vfiprintf_r+0x5c>
 8011368:	4629      	mov	r1, r5
 801136a:	4630      	mov	r0, r6
 801136c:	f000 fac6 	bl	80118fc <__swsetup_r>
 8011370:	b170      	cbz	r0, 8011390 <_vfiprintf_r+0x5c>
 8011372:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011374:	07dc      	lsls	r4, r3, #31
 8011376:	d504      	bpl.n	8011382 <_vfiprintf_r+0x4e>
 8011378:	f04f 30ff 	mov.w	r0, #4294967295
 801137c:	b01d      	add	sp, #116	@ 0x74
 801137e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011382:	89ab      	ldrh	r3, [r5, #12]
 8011384:	0598      	lsls	r0, r3, #22
 8011386:	d4f7      	bmi.n	8011378 <_vfiprintf_r+0x44>
 8011388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801138a:	f7ff fe6d 	bl	8011068 <__retarget_lock_release_recursive>
 801138e:	e7f3      	b.n	8011378 <_vfiprintf_r+0x44>
 8011390:	2300      	movs	r3, #0
 8011392:	9309      	str	r3, [sp, #36]	@ 0x24
 8011394:	2320      	movs	r3, #32
 8011396:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801139a:	f8cd 800c 	str.w	r8, [sp, #12]
 801139e:	2330      	movs	r3, #48	@ 0x30
 80113a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011550 <_vfiprintf_r+0x21c>
 80113a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80113a8:	f04f 0901 	mov.w	r9, #1
 80113ac:	4623      	mov	r3, r4
 80113ae:	469a      	mov	sl, r3
 80113b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113b4:	b10a      	cbz	r2, 80113ba <_vfiprintf_r+0x86>
 80113b6:	2a25      	cmp	r2, #37	@ 0x25
 80113b8:	d1f9      	bne.n	80113ae <_vfiprintf_r+0x7a>
 80113ba:	ebba 0b04 	subs.w	fp, sl, r4
 80113be:	d00b      	beq.n	80113d8 <_vfiprintf_r+0xa4>
 80113c0:	465b      	mov	r3, fp
 80113c2:	4622      	mov	r2, r4
 80113c4:	4629      	mov	r1, r5
 80113c6:	4630      	mov	r0, r6
 80113c8:	f7ff ffa2 	bl	8011310 <__sfputs_r>
 80113cc:	3001      	adds	r0, #1
 80113ce:	f000 80a7 	beq.w	8011520 <_vfiprintf_r+0x1ec>
 80113d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113d4:	445a      	add	r2, fp
 80113d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80113d8:	f89a 3000 	ldrb.w	r3, [sl]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	f000 809f 	beq.w	8011520 <_vfiprintf_r+0x1ec>
 80113e2:	2300      	movs	r3, #0
 80113e4:	f04f 32ff 	mov.w	r2, #4294967295
 80113e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113ec:	f10a 0a01 	add.w	sl, sl, #1
 80113f0:	9304      	str	r3, [sp, #16]
 80113f2:	9307      	str	r3, [sp, #28]
 80113f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80113f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80113fa:	4654      	mov	r4, sl
 80113fc:	2205      	movs	r2, #5
 80113fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011402:	4853      	ldr	r0, [pc, #332]	@ (8011550 <_vfiprintf_r+0x21c>)
 8011404:	f7ee fee4 	bl	80001d0 <memchr>
 8011408:	9a04      	ldr	r2, [sp, #16]
 801140a:	b9d8      	cbnz	r0, 8011444 <_vfiprintf_r+0x110>
 801140c:	06d1      	lsls	r1, r2, #27
 801140e:	bf44      	itt	mi
 8011410:	2320      	movmi	r3, #32
 8011412:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011416:	0713      	lsls	r3, r2, #28
 8011418:	bf44      	itt	mi
 801141a:	232b      	movmi	r3, #43	@ 0x2b
 801141c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011420:	f89a 3000 	ldrb.w	r3, [sl]
 8011424:	2b2a      	cmp	r3, #42	@ 0x2a
 8011426:	d015      	beq.n	8011454 <_vfiprintf_r+0x120>
 8011428:	9a07      	ldr	r2, [sp, #28]
 801142a:	4654      	mov	r4, sl
 801142c:	2000      	movs	r0, #0
 801142e:	f04f 0c0a 	mov.w	ip, #10
 8011432:	4621      	mov	r1, r4
 8011434:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011438:	3b30      	subs	r3, #48	@ 0x30
 801143a:	2b09      	cmp	r3, #9
 801143c:	d94b      	bls.n	80114d6 <_vfiprintf_r+0x1a2>
 801143e:	b1b0      	cbz	r0, 801146e <_vfiprintf_r+0x13a>
 8011440:	9207      	str	r2, [sp, #28]
 8011442:	e014      	b.n	801146e <_vfiprintf_r+0x13a>
 8011444:	eba0 0308 	sub.w	r3, r0, r8
 8011448:	fa09 f303 	lsl.w	r3, r9, r3
 801144c:	4313      	orrs	r3, r2
 801144e:	9304      	str	r3, [sp, #16]
 8011450:	46a2      	mov	sl, r4
 8011452:	e7d2      	b.n	80113fa <_vfiprintf_r+0xc6>
 8011454:	9b03      	ldr	r3, [sp, #12]
 8011456:	1d19      	adds	r1, r3, #4
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	9103      	str	r1, [sp, #12]
 801145c:	2b00      	cmp	r3, #0
 801145e:	bfbb      	ittet	lt
 8011460:	425b      	neglt	r3, r3
 8011462:	f042 0202 	orrlt.w	r2, r2, #2
 8011466:	9307      	strge	r3, [sp, #28]
 8011468:	9307      	strlt	r3, [sp, #28]
 801146a:	bfb8      	it	lt
 801146c:	9204      	strlt	r2, [sp, #16]
 801146e:	7823      	ldrb	r3, [r4, #0]
 8011470:	2b2e      	cmp	r3, #46	@ 0x2e
 8011472:	d10a      	bne.n	801148a <_vfiprintf_r+0x156>
 8011474:	7863      	ldrb	r3, [r4, #1]
 8011476:	2b2a      	cmp	r3, #42	@ 0x2a
 8011478:	d132      	bne.n	80114e0 <_vfiprintf_r+0x1ac>
 801147a:	9b03      	ldr	r3, [sp, #12]
 801147c:	1d1a      	adds	r2, r3, #4
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	9203      	str	r2, [sp, #12]
 8011482:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011486:	3402      	adds	r4, #2
 8011488:	9305      	str	r3, [sp, #20]
 801148a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011560 <_vfiprintf_r+0x22c>
 801148e:	7821      	ldrb	r1, [r4, #0]
 8011490:	2203      	movs	r2, #3
 8011492:	4650      	mov	r0, sl
 8011494:	f7ee fe9c 	bl	80001d0 <memchr>
 8011498:	b138      	cbz	r0, 80114aa <_vfiprintf_r+0x176>
 801149a:	9b04      	ldr	r3, [sp, #16]
 801149c:	eba0 000a 	sub.w	r0, r0, sl
 80114a0:	2240      	movs	r2, #64	@ 0x40
 80114a2:	4082      	lsls	r2, r0
 80114a4:	4313      	orrs	r3, r2
 80114a6:	3401      	adds	r4, #1
 80114a8:	9304      	str	r3, [sp, #16]
 80114aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114ae:	4829      	ldr	r0, [pc, #164]	@ (8011554 <_vfiprintf_r+0x220>)
 80114b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80114b4:	2206      	movs	r2, #6
 80114b6:	f7ee fe8b 	bl	80001d0 <memchr>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	d03f      	beq.n	801153e <_vfiprintf_r+0x20a>
 80114be:	4b26      	ldr	r3, [pc, #152]	@ (8011558 <_vfiprintf_r+0x224>)
 80114c0:	bb1b      	cbnz	r3, 801150a <_vfiprintf_r+0x1d6>
 80114c2:	9b03      	ldr	r3, [sp, #12]
 80114c4:	3307      	adds	r3, #7
 80114c6:	f023 0307 	bic.w	r3, r3, #7
 80114ca:	3308      	adds	r3, #8
 80114cc:	9303      	str	r3, [sp, #12]
 80114ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114d0:	443b      	add	r3, r7
 80114d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80114d4:	e76a      	b.n	80113ac <_vfiprintf_r+0x78>
 80114d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80114da:	460c      	mov	r4, r1
 80114dc:	2001      	movs	r0, #1
 80114de:	e7a8      	b.n	8011432 <_vfiprintf_r+0xfe>
 80114e0:	2300      	movs	r3, #0
 80114e2:	3401      	adds	r4, #1
 80114e4:	9305      	str	r3, [sp, #20]
 80114e6:	4619      	mov	r1, r3
 80114e8:	f04f 0c0a 	mov.w	ip, #10
 80114ec:	4620      	mov	r0, r4
 80114ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114f2:	3a30      	subs	r2, #48	@ 0x30
 80114f4:	2a09      	cmp	r2, #9
 80114f6:	d903      	bls.n	8011500 <_vfiprintf_r+0x1cc>
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d0c6      	beq.n	801148a <_vfiprintf_r+0x156>
 80114fc:	9105      	str	r1, [sp, #20]
 80114fe:	e7c4      	b.n	801148a <_vfiprintf_r+0x156>
 8011500:	fb0c 2101 	mla	r1, ip, r1, r2
 8011504:	4604      	mov	r4, r0
 8011506:	2301      	movs	r3, #1
 8011508:	e7f0      	b.n	80114ec <_vfiprintf_r+0x1b8>
 801150a:	ab03      	add	r3, sp, #12
 801150c:	9300      	str	r3, [sp, #0]
 801150e:	462a      	mov	r2, r5
 8011510:	4b12      	ldr	r3, [pc, #72]	@ (801155c <_vfiprintf_r+0x228>)
 8011512:	a904      	add	r1, sp, #16
 8011514:	4630      	mov	r0, r6
 8011516:	f3af 8000 	nop.w
 801151a:	4607      	mov	r7, r0
 801151c:	1c78      	adds	r0, r7, #1
 801151e:	d1d6      	bne.n	80114ce <_vfiprintf_r+0x19a>
 8011520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011522:	07d9      	lsls	r1, r3, #31
 8011524:	d405      	bmi.n	8011532 <_vfiprintf_r+0x1fe>
 8011526:	89ab      	ldrh	r3, [r5, #12]
 8011528:	059a      	lsls	r2, r3, #22
 801152a:	d402      	bmi.n	8011532 <_vfiprintf_r+0x1fe>
 801152c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801152e:	f7ff fd9b 	bl	8011068 <__retarget_lock_release_recursive>
 8011532:	89ab      	ldrh	r3, [r5, #12]
 8011534:	065b      	lsls	r3, r3, #25
 8011536:	f53f af1f 	bmi.w	8011378 <_vfiprintf_r+0x44>
 801153a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801153c:	e71e      	b.n	801137c <_vfiprintf_r+0x48>
 801153e:	ab03      	add	r3, sp, #12
 8011540:	9300      	str	r3, [sp, #0]
 8011542:	462a      	mov	r2, r5
 8011544:	4b05      	ldr	r3, [pc, #20]	@ (801155c <_vfiprintf_r+0x228>)
 8011546:	a904      	add	r1, sp, #16
 8011548:	4630      	mov	r0, r6
 801154a:	f000 f879 	bl	8011640 <_printf_i>
 801154e:	e7e4      	b.n	801151a <_vfiprintf_r+0x1e6>
 8011550:	08011dbb 	.word	0x08011dbb
 8011554:	08011dc5 	.word	0x08011dc5
 8011558:	00000000 	.word	0x00000000
 801155c:	08011311 	.word	0x08011311
 8011560:	08011dc1 	.word	0x08011dc1

08011564 <_printf_common>:
 8011564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011568:	4616      	mov	r6, r2
 801156a:	4698      	mov	r8, r3
 801156c:	688a      	ldr	r2, [r1, #8]
 801156e:	690b      	ldr	r3, [r1, #16]
 8011570:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011574:	4293      	cmp	r3, r2
 8011576:	bfb8      	it	lt
 8011578:	4613      	movlt	r3, r2
 801157a:	6033      	str	r3, [r6, #0]
 801157c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011580:	4607      	mov	r7, r0
 8011582:	460c      	mov	r4, r1
 8011584:	b10a      	cbz	r2, 801158a <_printf_common+0x26>
 8011586:	3301      	adds	r3, #1
 8011588:	6033      	str	r3, [r6, #0]
 801158a:	6823      	ldr	r3, [r4, #0]
 801158c:	0699      	lsls	r1, r3, #26
 801158e:	bf42      	ittt	mi
 8011590:	6833      	ldrmi	r3, [r6, #0]
 8011592:	3302      	addmi	r3, #2
 8011594:	6033      	strmi	r3, [r6, #0]
 8011596:	6825      	ldr	r5, [r4, #0]
 8011598:	f015 0506 	ands.w	r5, r5, #6
 801159c:	d106      	bne.n	80115ac <_printf_common+0x48>
 801159e:	f104 0a19 	add.w	sl, r4, #25
 80115a2:	68e3      	ldr	r3, [r4, #12]
 80115a4:	6832      	ldr	r2, [r6, #0]
 80115a6:	1a9b      	subs	r3, r3, r2
 80115a8:	42ab      	cmp	r3, r5
 80115aa:	dc26      	bgt.n	80115fa <_printf_common+0x96>
 80115ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80115b0:	6822      	ldr	r2, [r4, #0]
 80115b2:	3b00      	subs	r3, #0
 80115b4:	bf18      	it	ne
 80115b6:	2301      	movne	r3, #1
 80115b8:	0692      	lsls	r2, r2, #26
 80115ba:	d42b      	bmi.n	8011614 <_printf_common+0xb0>
 80115bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80115c0:	4641      	mov	r1, r8
 80115c2:	4638      	mov	r0, r7
 80115c4:	47c8      	blx	r9
 80115c6:	3001      	adds	r0, #1
 80115c8:	d01e      	beq.n	8011608 <_printf_common+0xa4>
 80115ca:	6823      	ldr	r3, [r4, #0]
 80115cc:	6922      	ldr	r2, [r4, #16]
 80115ce:	f003 0306 	and.w	r3, r3, #6
 80115d2:	2b04      	cmp	r3, #4
 80115d4:	bf02      	ittt	eq
 80115d6:	68e5      	ldreq	r5, [r4, #12]
 80115d8:	6833      	ldreq	r3, [r6, #0]
 80115da:	1aed      	subeq	r5, r5, r3
 80115dc:	68a3      	ldr	r3, [r4, #8]
 80115de:	bf0c      	ite	eq
 80115e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115e4:	2500      	movne	r5, #0
 80115e6:	4293      	cmp	r3, r2
 80115e8:	bfc4      	itt	gt
 80115ea:	1a9b      	subgt	r3, r3, r2
 80115ec:	18ed      	addgt	r5, r5, r3
 80115ee:	2600      	movs	r6, #0
 80115f0:	341a      	adds	r4, #26
 80115f2:	42b5      	cmp	r5, r6
 80115f4:	d11a      	bne.n	801162c <_printf_common+0xc8>
 80115f6:	2000      	movs	r0, #0
 80115f8:	e008      	b.n	801160c <_printf_common+0xa8>
 80115fa:	2301      	movs	r3, #1
 80115fc:	4652      	mov	r2, sl
 80115fe:	4641      	mov	r1, r8
 8011600:	4638      	mov	r0, r7
 8011602:	47c8      	blx	r9
 8011604:	3001      	adds	r0, #1
 8011606:	d103      	bne.n	8011610 <_printf_common+0xac>
 8011608:	f04f 30ff 	mov.w	r0, #4294967295
 801160c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011610:	3501      	adds	r5, #1
 8011612:	e7c6      	b.n	80115a2 <_printf_common+0x3e>
 8011614:	18e1      	adds	r1, r4, r3
 8011616:	1c5a      	adds	r2, r3, #1
 8011618:	2030      	movs	r0, #48	@ 0x30
 801161a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801161e:	4422      	add	r2, r4
 8011620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011624:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011628:	3302      	adds	r3, #2
 801162a:	e7c7      	b.n	80115bc <_printf_common+0x58>
 801162c:	2301      	movs	r3, #1
 801162e:	4622      	mov	r2, r4
 8011630:	4641      	mov	r1, r8
 8011632:	4638      	mov	r0, r7
 8011634:	47c8      	blx	r9
 8011636:	3001      	adds	r0, #1
 8011638:	d0e6      	beq.n	8011608 <_printf_common+0xa4>
 801163a:	3601      	adds	r6, #1
 801163c:	e7d9      	b.n	80115f2 <_printf_common+0x8e>
	...

08011640 <_printf_i>:
 8011640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011644:	7e0f      	ldrb	r7, [r1, #24]
 8011646:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011648:	2f78      	cmp	r7, #120	@ 0x78
 801164a:	4691      	mov	r9, r2
 801164c:	4680      	mov	r8, r0
 801164e:	460c      	mov	r4, r1
 8011650:	469a      	mov	sl, r3
 8011652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011656:	d807      	bhi.n	8011668 <_printf_i+0x28>
 8011658:	2f62      	cmp	r7, #98	@ 0x62
 801165a:	d80a      	bhi.n	8011672 <_printf_i+0x32>
 801165c:	2f00      	cmp	r7, #0
 801165e:	f000 80d2 	beq.w	8011806 <_printf_i+0x1c6>
 8011662:	2f58      	cmp	r7, #88	@ 0x58
 8011664:	f000 80b9 	beq.w	80117da <_printf_i+0x19a>
 8011668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801166c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011670:	e03a      	b.n	80116e8 <_printf_i+0xa8>
 8011672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011676:	2b15      	cmp	r3, #21
 8011678:	d8f6      	bhi.n	8011668 <_printf_i+0x28>
 801167a:	a101      	add	r1, pc, #4	@ (adr r1, 8011680 <_printf_i+0x40>)
 801167c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011680:	080116d9 	.word	0x080116d9
 8011684:	080116ed 	.word	0x080116ed
 8011688:	08011669 	.word	0x08011669
 801168c:	08011669 	.word	0x08011669
 8011690:	08011669 	.word	0x08011669
 8011694:	08011669 	.word	0x08011669
 8011698:	080116ed 	.word	0x080116ed
 801169c:	08011669 	.word	0x08011669
 80116a0:	08011669 	.word	0x08011669
 80116a4:	08011669 	.word	0x08011669
 80116a8:	08011669 	.word	0x08011669
 80116ac:	080117ed 	.word	0x080117ed
 80116b0:	08011717 	.word	0x08011717
 80116b4:	080117a7 	.word	0x080117a7
 80116b8:	08011669 	.word	0x08011669
 80116bc:	08011669 	.word	0x08011669
 80116c0:	0801180f 	.word	0x0801180f
 80116c4:	08011669 	.word	0x08011669
 80116c8:	08011717 	.word	0x08011717
 80116cc:	08011669 	.word	0x08011669
 80116d0:	08011669 	.word	0x08011669
 80116d4:	080117af 	.word	0x080117af
 80116d8:	6833      	ldr	r3, [r6, #0]
 80116da:	1d1a      	adds	r2, r3, #4
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	6032      	str	r2, [r6, #0]
 80116e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80116e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80116e8:	2301      	movs	r3, #1
 80116ea:	e09d      	b.n	8011828 <_printf_i+0x1e8>
 80116ec:	6833      	ldr	r3, [r6, #0]
 80116ee:	6820      	ldr	r0, [r4, #0]
 80116f0:	1d19      	adds	r1, r3, #4
 80116f2:	6031      	str	r1, [r6, #0]
 80116f4:	0606      	lsls	r6, r0, #24
 80116f6:	d501      	bpl.n	80116fc <_printf_i+0xbc>
 80116f8:	681d      	ldr	r5, [r3, #0]
 80116fa:	e003      	b.n	8011704 <_printf_i+0xc4>
 80116fc:	0645      	lsls	r5, r0, #25
 80116fe:	d5fb      	bpl.n	80116f8 <_printf_i+0xb8>
 8011700:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011704:	2d00      	cmp	r5, #0
 8011706:	da03      	bge.n	8011710 <_printf_i+0xd0>
 8011708:	232d      	movs	r3, #45	@ 0x2d
 801170a:	426d      	negs	r5, r5
 801170c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011710:	4859      	ldr	r0, [pc, #356]	@ (8011878 <_printf_i+0x238>)
 8011712:	230a      	movs	r3, #10
 8011714:	e011      	b.n	801173a <_printf_i+0xfa>
 8011716:	6821      	ldr	r1, [r4, #0]
 8011718:	6833      	ldr	r3, [r6, #0]
 801171a:	0608      	lsls	r0, r1, #24
 801171c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011720:	d402      	bmi.n	8011728 <_printf_i+0xe8>
 8011722:	0649      	lsls	r1, r1, #25
 8011724:	bf48      	it	mi
 8011726:	b2ad      	uxthmi	r5, r5
 8011728:	2f6f      	cmp	r7, #111	@ 0x6f
 801172a:	4853      	ldr	r0, [pc, #332]	@ (8011878 <_printf_i+0x238>)
 801172c:	6033      	str	r3, [r6, #0]
 801172e:	bf14      	ite	ne
 8011730:	230a      	movne	r3, #10
 8011732:	2308      	moveq	r3, #8
 8011734:	2100      	movs	r1, #0
 8011736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801173a:	6866      	ldr	r6, [r4, #4]
 801173c:	60a6      	str	r6, [r4, #8]
 801173e:	2e00      	cmp	r6, #0
 8011740:	bfa2      	ittt	ge
 8011742:	6821      	ldrge	r1, [r4, #0]
 8011744:	f021 0104 	bicge.w	r1, r1, #4
 8011748:	6021      	strge	r1, [r4, #0]
 801174a:	b90d      	cbnz	r5, 8011750 <_printf_i+0x110>
 801174c:	2e00      	cmp	r6, #0
 801174e:	d04b      	beq.n	80117e8 <_printf_i+0x1a8>
 8011750:	4616      	mov	r6, r2
 8011752:	fbb5 f1f3 	udiv	r1, r5, r3
 8011756:	fb03 5711 	mls	r7, r3, r1, r5
 801175a:	5dc7      	ldrb	r7, [r0, r7]
 801175c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011760:	462f      	mov	r7, r5
 8011762:	42bb      	cmp	r3, r7
 8011764:	460d      	mov	r5, r1
 8011766:	d9f4      	bls.n	8011752 <_printf_i+0x112>
 8011768:	2b08      	cmp	r3, #8
 801176a:	d10b      	bne.n	8011784 <_printf_i+0x144>
 801176c:	6823      	ldr	r3, [r4, #0]
 801176e:	07df      	lsls	r7, r3, #31
 8011770:	d508      	bpl.n	8011784 <_printf_i+0x144>
 8011772:	6923      	ldr	r3, [r4, #16]
 8011774:	6861      	ldr	r1, [r4, #4]
 8011776:	4299      	cmp	r1, r3
 8011778:	bfde      	ittt	le
 801177a:	2330      	movle	r3, #48	@ 0x30
 801177c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011780:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011784:	1b92      	subs	r2, r2, r6
 8011786:	6122      	str	r2, [r4, #16]
 8011788:	f8cd a000 	str.w	sl, [sp]
 801178c:	464b      	mov	r3, r9
 801178e:	aa03      	add	r2, sp, #12
 8011790:	4621      	mov	r1, r4
 8011792:	4640      	mov	r0, r8
 8011794:	f7ff fee6 	bl	8011564 <_printf_common>
 8011798:	3001      	adds	r0, #1
 801179a:	d14a      	bne.n	8011832 <_printf_i+0x1f2>
 801179c:	f04f 30ff 	mov.w	r0, #4294967295
 80117a0:	b004      	add	sp, #16
 80117a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117a6:	6823      	ldr	r3, [r4, #0]
 80117a8:	f043 0320 	orr.w	r3, r3, #32
 80117ac:	6023      	str	r3, [r4, #0]
 80117ae:	4833      	ldr	r0, [pc, #204]	@ (801187c <_printf_i+0x23c>)
 80117b0:	2778      	movs	r7, #120	@ 0x78
 80117b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80117b6:	6823      	ldr	r3, [r4, #0]
 80117b8:	6831      	ldr	r1, [r6, #0]
 80117ba:	061f      	lsls	r7, r3, #24
 80117bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80117c0:	d402      	bmi.n	80117c8 <_printf_i+0x188>
 80117c2:	065f      	lsls	r7, r3, #25
 80117c4:	bf48      	it	mi
 80117c6:	b2ad      	uxthmi	r5, r5
 80117c8:	6031      	str	r1, [r6, #0]
 80117ca:	07d9      	lsls	r1, r3, #31
 80117cc:	bf44      	itt	mi
 80117ce:	f043 0320 	orrmi.w	r3, r3, #32
 80117d2:	6023      	strmi	r3, [r4, #0]
 80117d4:	b11d      	cbz	r5, 80117de <_printf_i+0x19e>
 80117d6:	2310      	movs	r3, #16
 80117d8:	e7ac      	b.n	8011734 <_printf_i+0xf4>
 80117da:	4827      	ldr	r0, [pc, #156]	@ (8011878 <_printf_i+0x238>)
 80117dc:	e7e9      	b.n	80117b2 <_printf_i+0x172>
 80117de:	6823      	ldr	r3, [r4, #0]
 80117e0:	f023 0320 	bic.w	r3, r3, #32
 80117e4:	6023      	str	r3, [r4, #0]
 80117e6:	e7f6      	b.n	80117d6 <_printf_i+0x196>
 80117e8:	4616      	mov	r6, r2
 80117ea:	e7bd      	b.n	8011768 <_printf_i+0x128>
 80117ec:	6833      	ldr	r3, [r6, #0]
 80117ee:	6825      	ldr	r5, [r4, #0]
 80117f0:	6961      	ldr	r1, [r4, #20]
 80117f2:	1d18      	adds	r0, r3, #4
 80117f4:	6030      	str	r0, [r6, #0]
 80117f6:	062e      	lsls	r6, r5, #24
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	d501      	bpl.n	8011800 <_printf_i+0x1c0>
 80117fc:	6019      	str	r1, [r3, #0]
 80117fe:	e002      	b.n	8011806 <_printf_i+0x1c6>
 8011800:	0668      	lsls	r0, r5, #25
 8011802:	d5fb      	bpl.n	80117fc <_printf_i+0x1bc>
 8011804:	8019      	strh	r1, [r3, #0]
 8011806:	2300      	movs	r3, #0
 8011808:	6123      	str	r3, [r4, #16]
 801180a:	4616      	mov	r6, r2
 801180c:	e7bc      	b.n	8011788 <_printf_i+0x148>
 801180e:	6833      	ldr	r3, [r6, #0]
 8011810:	1d1a      	adds	r2, r3, #4
 8011812:	6032      	str	r2, [r6, #0]
 8011814:	681e      	ldr	r6, [r3, #0]
 8011816:	6862      	ldr	r2, [r4, #4]
 8011818:	2100      	movs	r1, #0
 801181a:	4630      	mov	r0, r6
 801181c:	f7ee fcd8 	bl	80001d0 <memchr>
 8011820:	b108      	cbz	r0, 8011826 <_printf_i+0x1e6>
 8011822:	1b80      	subs	r0, r0, r6
 8011824:	6060      	str	r0, [r4, #4]
 8011826:	6863      	ldr	r3, [r4, #4]
 8011828:	6123      	str	r3, [r4, #16]
 801182a:	2300      	movs	r3, #0
 801182c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011830:	e7aa      	b.n	8011788 <_printf_i+0x148>
 8011832:	6923      	ldr	r3, [r4, #16]
 8011834:	4632      	mov	r2, r6
 8011836:	4649      	mov	r1, r9
 8011838:	4640      	mov	r0, r8
 801183a:	47d0      	blx	sl
 801183c:	3001      	adds	r0, #1
 801183e:	d0ad      	beq.n	801179c <_printf_i+0x15c>
 8011840:	6823      	ldr	r3, [r4, #0]
 8011842:	079b      	lsls	r3, r3, #30
 8011844:	d413      	bmi.n	801186e <_printf_i+0x22e>
 8011846:	68e0      	ldr	r0, [r4, #12]
 8011848:	9b03      	ldr	r3, [sp, #12]
 801184a:	4298      	cmp	r0, r3
 801184c:	bfb8      	it	lt
 801184e:	4618      	movlt	r0, r3
 8011850:	e7a6      	b.n	80117a0 <_printf_i+0x160>
 8011852:	2301      	movs	r3, #1
 8011854:	4632      	mov	r2, r6
 8011856:	4649      	mov	r1, r9
 8011858:	4640      	mov	r0, r8
 801185a:	47d0      	blx	sl
 801185c:	3001      	adds	r0, #1
 801185e:	d09d      	beq.n	801179c <_printf_i+0x15c>
 8011860:	3501      	adds	r5, #1
 8011862:	68e3      	ldr	r3, [r4, #12]
 8011864:	9903      	ldr	r1, [sp, #12]
 8011866:	1a5b      	subs	r3, r3, r1
 8011868:	42ab      	cmp	r3, r5
 801186a:	dcf2      	bgt.n	8011852 <_printf_i+0x212>
 801186c:	e7eb      	b.n	8011846 <_printf_i+0x206>
 801186e:	2500      	movs	r5, #0
 8011870:	f104 0619 	add.w	r6, r4, #25
 8011874:	e7f5      	b.n	8011862 <_printf_i+0x222>
 8011876:	bf00      	nop
 8011878:	08011dcc 	.word	0x08011dcc
 801187c:	08011ddd 	.word	0x08011ddd

08011880 <__swbuf_r>:
 8011880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011882:	460e      	mov	r6, r1
 8011884:	4614      	mov	r4, r2
 8011886:	4605      	mov	r5, r0
 8011888:	b118      	cbz	r0, 8011892 <__swbuf_r+0x12>
 801188a:	6a03      	ldr	r3, [r0, #32]
 801188c:	b90b      	cbnz	r3, 8011892 <__swbuf_r+0x12>
 801188e:	f7ff fae7 	bl	8010e60 <__sinit>
 8011892:	69a3      	ldr	r3, [r4, #24]
 8011894:	60a3      	str	r3, [r4, #8]
 8011896:	89a3      	ldrh	r3, [r4, #12]
 8011898:	071a      	lsls	r2, r3, #28
 801189a:	d501      	bpl.n	80118a0 <__swbuf_r+0x20>
 801189c:	6923      	ldr	r3, [r4, #16]
 801189e:	b943      	cbnz	r3, 80118b2 <__swbuf_r+0x32>
 80118a0:	4621      	mov	r1, r4
 80118a2:	4628      	mov	r0, r5
 80118a4:	f000 f82a 	bl	80118fc <__swsetup_r>
 80118a8:	b118      	cbz	r0, 80118b2 <__swbuf_r+0x32>
 80118aa:	f04f 37ff 	mov.w	r7, #4294967295
 80118ae:	4638      	mov	r0, r7
 80118b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118b2:	6823      	ldr	r3, [r4, #0]
 80118b4:	6922      	ldr	r2, [r4, #16]
 80118b6:	1a98      	subs	r0, r3, r2
 80118b8:	6963      	ldr	r3, [r4, #20]
 80118ba:	b2f6      	uxtb	r6, r6
 80118bc:	4283      	cmp	r3, r0
 80118be:	4637      	mov	r7, r6
 80118c0:	dc05      	bgt.n	80118ce <__swbuf_r+0x4e>
 80118c2:	4621      	mov	r1, r4
 80118c4:	4628      	mov	r0, r5
 80118c6:	f7ff fccb 	bl	8011260 <_fflush_r>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	d1ed      	bne.n	80118aa <__swbuf_r+0x2a>
 80118ce:	68a3      	ldr	r3, [r4, #8]
 80118d0:	3b01      	subs	r3, #1
 80118d2:	60a3      	str	r3, [r4, #8]
 80118d4:	6823      	ldr	r3, [r4, #0]
 80118d6:	1c5a      	adds	r2, r3, #1
 80118d8:	6022      	str	r2, [r4, #0]
 80118da:	701e      	strb	r6, [r3, #0]
 80118dc:	6962      	ldr	r2, [r4, #20]
 80118de:	1c43      	adds	r3, r0, #1
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d004      	beq.n	80118ee <__swbuf_r+0x6e>
 80118e4:	89a3      	ldrh	r3, [r4, #12]
 80118e6:	07db      	lsls	r3, r3, #31
 80118e8:	d5e1      	bpl.n	80118ae <__swbuf_r+0x2e>
 80118ea:	2e0a      	cmp	r6, #10
 80118ec:	d1df      	bne.n	80118ae <__swbuf_r+0x2e>
 80118ee:	4621      	mov	r1, r4
 80118f0:	4628      	mov	r0, r5
 80118f2:	f7ff fcb5 	bl	8011260 <_fflush_r>
 80118f6:	2800      	cmp	r0, #0
 80118f8:	d0d9      	beq.n	80118ae <__swbuf_r+0x2e>
 80118fa:	e7d6      	b.n	80118aa <__swbuf_r+0x2a>

080118fc <__swsetup_r>:
 80118fc:	b538      	push	{r3, r4, r5, lr}
 80118fe:	4b29      	ldr	r3, [pc, #164]	@ (80119a4 <__swsetup_r+0xa8>)
 8011900:	4605      	mov	r5, r0
 8011902:	6818      	ldr	r0, [r3, #0]
 8011904:	460c      	mov	r4, r1
 8011906:	b118      	cbz	r0, 8011910 <__swsetup_r+0x14>
 8011908:	6a03      	ldr	r3, [r0, #32]
 801190a:	b90b      	cbnz	r3, 8011910 <__swsetup_r+0x14>
 801190c:	f7ff faa8 	bl	8010e60 <__sinit>
 8011910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011914:	0719      	lsls	r1, r3, #28
 8011916:	d422      	bmi.n	801195e <__swsetup_r+0x62>
 8011918:	06da      	lsls	r2, r3, #27
 801191a:	d407      	bmi.n	801192c <__swsetup_r+0x30>
 801191c:	2209      	movs	r2, #9
 801191e:	602a      	str	r2, [r5, #0]
 8011920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011924:	81a3      	strh	r3, [r4, #12]
 8011926:	f04f 30ff 	mov.w	r0, #4294967295
 801192a:	e033      	b.n	8011994 <__swsetup_r+0x98>
 801192c:	0758      	lsls	r0, r3, #29
 801192e:	d512      	bpl.n	8011956 <__swsetup_r+0x5a>
 8011930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011932:	b141      	cbz	r1, 8011946 <__swsetup_r+0x4a>
 8011934:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011938:	4299      	cmp	r1, r3
 801193a:	d002      	beq.n	8011942 <__swsetup_r+0x46>
 801193c:	4628      	mov	r0, r5
 801193e:	f7ff fbc1 	bl	80110c4 <_free_r>
 8011942:	2300      	movs	r3, #0
 8011944:	6363      	str	r3, [r4, #52]	@ 0x34
 8011946:	89a3      	ldrh	r3, [r4, #12]
 8011948:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801194c:	81a3      	strh	r3, [r4, #12]
 801194e:	2300      	movs	r3, #0
 8011950:	6063      	str	r3, [r4, #4]
 8011952:	6923      	ldr	r3, [r4, #16]
 8011954:	6023      	str	r3, [r4, #0]
 8011956:	89a3      	ldrh	r3, [r4, #12]
 8011958:	f043 0308 	orr.w	r3, r3, #8
 801195c:	81a3      	strh	r3, [r4, #12]
 801195e:	6923      	ldr	r3, [r4, #16]
 8011960:	b94b      	cbnz	r3, 8011976 <__swsetup_r+0x7a>
 8011962:	89a3      	ldrh	r3, [r4, #12]
 8011964:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801196c:	d003      	beq.n	8011976 <__swsetup_r+0x7a>
 801196e:	4621      	mov	r1, r4
 8011970:	4628      	mov	r0, r5
 8011972:	f000 f883 	bl	8011a7c <__smakebuf_r>
 8011976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801197a:	f013 0201 	ands.w	r2, r3, #1
 801197e:	d00a      	beq.n	8011996 <__swsetup_r+0x9a>
 8011980:	2200      	movs	r2, #0
 8011982:	60a2      	str	r2, [r4, #8]
 8011984:	6962      	ldr	r2, [r4, #20]
 8011986:	4252      	negs	r2, r2
 8011988:	61a2      	str	r2, [r4, #24]
 801198a:	6922      	ldr	r2, [r4, #16]
 801198c:	b942      	cbnz	r2, 80119a0 <__swsetup_r+0xa4>
 801198e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011992:	d1c5      	bne.n	8011920 <__swsetup_r+0x24>
 8011994:	bd38      	pop	{r3, r4, r5, pc}
 8011996:	0799      	lsls	r1, r3, #30
 8011998:	bf58      	it	pl
 801199a:	6962      	ldrpl	r2, [r4, #20]
 801199c:	60a2      	str	r2, [r4, #8]
 801199e:	e7f4      	b.n	801198a <__swsetup_r+0x8e>
 80119a0:	2000      	movs	r0, #0
 80119a2:	e7f7      	b.n	8011994 <__swsetup_r+0x98>
 80119a4:	2000005c 	.word	0x2000005c

080119a8 <_raise_r>:
 80119a8:	291f      	cmp	r1, #31
 80119aa:	b538      	push	{r3, r4, r5, lr}
 80119ac:	4605      	mov	r5, r0
 80119ae:	460c      	mov	r4, r1
 80119b0:	d904      	bls.n	80119bc <_raise_r+0x14>
 80119b2:	2316      	movs	r3, #22
 80119b4:	6003      	str	r3, [r0, #0]
 80119b6:	f04f 30ff 	mov.w	r0, #4294967295
 80119ba:	bd38      	pop	{r3, r4, r5, pc}
 80119bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80119be:	b112      	cbz	r2, 80119c6 <_raise_r+0x1e>
 80119c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119c4:	b94b      	cbnz	r3, 80119da <_raise_r+0x32>
 80119c6:	4628      	mov	r0, r5
 80119c8:	f000 f830 	bl	8011a2c <_getpid_r>
 80119cc:	4622      	mov	r2, r4
 80119ce:	4601      	mov	r1, r0
 80119d0:	4628      	mov	r0, r5
 80119d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119d6:	f000 b817 	b.w	8011a08 <_kill_r>
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d00a      	beq.n	80119f4 <_raise_r+0x4c>
 80119de:	1c59      	adds	r1, r3, #1
 80119e0:	d103      	bne.n	80119ea <_raise_r+0x42>
 80119e2:	2316      	movs	r3, #22
 80119e4:	6003      	str	r3, [r0, #0]
 80119e6:	2001      	movs	r0, #1
 80119e8:	e7e7      	b.n	80119ba <_raise_r+0x12>
 80119ea:	2100      	movs	r1, #0
 80119ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80119f0:	4620      	mov	r0, r4
 80119f2:	4798      	blx	r3
 80119f4:	2000      	movs	r0, #0
 80119f6:	e7e0      	b.n	80119ba <_raise_r+0x12>

080119f8 <raise>:
 80119f8:	4b02      	ldr	r3, [pc, #8]	@ (8011a04 <raise+0xc>)
 80119fa:	4601      	mov	r1, r0
 80119fc:	6818      	ldr	r0, [r3, #0]
 80119fe:	f7ff bfd3 	b.w	80119a8 <_raise_r>
 8011a02:	bf00      	nop
 8011a04:	2000005c 	.word	0x2000005c

08011a08 <_kill_r>:
 8011a08:	b538      	push	{r3, r4, r5, lr}
 8011a0a:	4d07      	ldr	r5, [pc, #28]	@ (8011a28 <_kill_r+0x20>)
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	4604      	mov	r4, r0
 8011a10:	4608      	mov	r0, r1
 8011a12:	4611      	mov	r1, r2
 8011a14:	602b      	str	r3, [r5, #0]
 8011a16:	f7ef ffcb 	bl	80019b0 <_kill>
 8011a1a:	1c43      	adds	r3, r0, #1
 8011a1c:	d102      	bne.n	8011a24 <_kill_r+0x1c>
 8011a1e:	682b      	ldr	r3, [r5, #0]
 8011a20:	b103      	cbz	r3, 8011a24 <_kill_r+0x1c>
 8011a22:	6023      	str	r3, [r4, #0]
 8011a24:	bd38      	pop	{r3, r4, r5, pc}
 8011a26:	bf00      	nop
 8011a28:	2000957c 	.word	0x2000957c

08011a2c <_getpid_r>:
 8011a2c:	f7ef bfb8 	b.w	80019a0 <_getpid>

08011a30 <__swhatbuf_r>:
 8011a30:	b570      	push	{r4, r5, r6, lr}
 8011a32:	460c      	mov	r4, r1
 8011a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a38:	2900      	cmp	r1, #0
 8011a3a:	b096      	sub	sp, #88	@ 0x58
 8011a3c:	4615      	mov	r5, r2
 8011a3e:	461e      	mov	r6, r3
 8011a40:	da0d      	bge.n	8011a5e <__swhatbuf_r+0x2e>
 8011a42:	89a3      	ldrh	r3, [r4, #12]
 8011a44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011a48:	f04f 0100 	mov.w	r1, #0
 8011a4c:	bf14      	ite	ne
 8011a4e:	2340      	movne	r3, #64	@ 0x40
 8011a50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011a54:	2000      	movs	r0, #0
 8011a56:	6031      	str	r1, [r6, #0]
 8011a58:	602b      	str	r3, [r5, #0]
 8011a5a:	b016      	add	sp, #88	@ 0x58
 8011a5c:	bd70      	pop	{r4, r5, r6, pc}
 8011a5e:	466a      	mov	r2, sp
 8011a60:	f000 f848 	bl	8011af4 <_fstat_r>
 8011a64:	2800      	cmp	r0, #0
 8011a66:	dbec      	blt.n	8011a42 <__swhatbuf_r+0x12>
 8011a68:	9901      	ldr	r1, [sp, #4]
 8011a6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011a6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011a72:	4259      	negs	r1, r3
 8011a74:	4159      	adcs	r1, r3
 8011a76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011a7a:	e7eb      	b.n	8011a54 <__swhatbuf_r+0x24>

08011a7c <__smakebuf_r>:
 8011a7c:	898b      	ldrh	r3, [r1, #12]
 8011a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a80:	079d      	lsls	r5, r3, #30
 8011a82:	4606      	mov	r6, r0
 8011a84:	460c      	mov	r4, r1
 8011a86:	d507      	bpl.n	8011a98 <__smakebuf_r+0x1c>
 8011a88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011a8c:	6023      	str	r3, [r4, #0]
 8011a8e:	6123      	str	r3, [r4, #16]
 8011a90:	2301      	movs	r3, #1
 8011a92:	6163      	str	r3, [r4, #20]
 8011a94:	b003      	add	sp, #12
 8011a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a98:	ab01      	add	r3, sp, #4
 8011a9a:	466a      	mov	r2, sp
 8011a9c:	f7ff ffc8 	bl	8011a30 <__swhatbuf_r>
 8011aa0:	9f00      	ldr	r7, [sp, #0]
 8011aa2:	4605      	mov	r5, r0
 8011aa4:	4639      	mov	r1, r7
 8011aa6:	4630      	mov	r0, r6
 8011aa8:	f7ff f884 	bl	8010bb4 <_malloc_r>
 8011aac:	b948      	cbnz	r0, 8011ac2 <__smakebuf_r+0x46>
 8011aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ab2:	059a      	lsls	r2, r3, #22
 8011ab4:	d4ee      	bmi.n	8011a94 <__smakebuf_r+0x18>
 8011ab6:	f023 0303 	bic.w	r3, r3, #3
 8011aba:	f043 0302 	orr.w	r3, r3, #2
 8011abe:	81a3      	strh	r3, [r4, #12]
 8011ac0:	e7e2      	b.n	8011a88 <__smakebuf_r+0xc>
 8011ac2:	89a3      	ldrh	r3, [r4, #12]
 8011ac4:	6020      	str	r0, [r4, #0]
 8011ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011aca:	81a3      	strh	r3, [r4, #12]
 8011acc:	9b01      	ldr	r3, [sp, #4]
 8011ace:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011ad2:	b15b      	cbz	r3, 8011aec <__smakebuf_r+0x70>
 8011ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ad8:	4630      	mov	r0, r6
 8011ada:	f000 f81d 	bl	8011b18 <_isatty_r>
 8011ade:	b128      	cbz	r0, 8011aec <__smakebuf_r+0x70>
 8011ae0:	89a3      	ldrh	r3, [r4, #12]
 8011ae2:	f023 0303 	bic.w	r3, r3, #3
 8011ae6:	f043 0301 	orr.w	r3, r3, #1
 8011aea:	81a3      	strh	r3, [r4, #12]
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	431d      	orrs	r5, r3
 8011af0:	81a5      	strh	r5, [r4, #12]
 8011af2:	e7cf      	b.n	8011a94 <__smakebuf_r+0x18>

08011af4 <_fstat_r>:
 8011af4:	b538      	push	{r3, r4, r5, lr}
 8011af6:	4d07      	ldr	r5, [pc, #28]	@ (8011b14 <_fstat_r+0x20>)
 8011af8:	2300      	movs	r3, #0
 8011afa:	4604      	mov	r4, r0
 8011afc:	4608      	mov	r0, r1
 8011afe:	4611      	mov	r1, r2
 8011b00:	602b      	str	r3, [r5, #0]
 8011b02:	f7ef ffb5 	bl	8001a70 <_fstat>
 8011b06:	1c43      	adds	r3, r0, #1
 8011b08:	d102      	bne.n	8011b10 <_fstat_r+0x1c>
 8011b0a:	682b      	ldr	r3, [r5, #0]
 8011b0c:	b103      	cbz	r3, 8011b10 <_fstat_r+0x1c>
 8011b0e:	6023      	str	r3, [r4, #0]
 8011b10:	bd38      	pop	{r3, r4, r5, pc}
 8011b12:	bf00      	nop
 8011b14:	2000957c 	.word	0x2000957c

08011b18 <_isatty_r>:
 8011b18:	b538      	push	{r3, r4, r5, lr}
 8011b1a:	4d06      	ldr	r5, [pc, #24]	@ (8011b34 <_isatty_r+0x1c>)
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	4604      	mov	r4, r0
 8011b20:	4608      	mov	r0, r1
 8011b22:	602b      	str	r3, [r5, #0]
 8011b24:	f7ef ffb4 	bl	8001a90 <_isatty>
 8011b28:	1c43      	adds	r3, r0, #1
 8011b2a:	d102      	bne.n	8011b32 <_isatty_r+0x1a>
 8011b2c:	682b      	ldr	r3, [r5, #0]
 8011b2e:	b103      	cbz	r3, 8011b32 <_isatty_r+0x1a>
 8011b30:	6023      	str	r3, [r4, #0]
 8011b32:	bd38      	pop	{r3, r4, r5, pc}
 8011b34:	2000957c 	.word	0x2000957c

08011b38 <_init>:
 8011b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b3a:	bf00      	nop
 8011b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b3e:	bc08      	pop	{r3}
 8011b40:	469e      	mov	lr, r3
 8011b42:	4770      	bx	lr

08011b44 <_fini>:
 8011b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b46:	bf00      	nop
 8011b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b4a:	bc08      	pop	{r3}
 8011b4c:	469e      	mov	lr, r3
 8011b4e:	4770      	bx	lr
