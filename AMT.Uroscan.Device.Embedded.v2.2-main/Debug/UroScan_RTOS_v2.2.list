
UroScan_RTOS_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08011c04  08011c04  00012c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ea4  08011ea4  000130ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011ea4  08011ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011eac  08011eac  000130ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08011eac  08011eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08011eb8  08011eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08011ec4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000130ac  2**0
                  CONTENTS
 10 .bss          0000945c  200000b0  200000b0  000130b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000950c  2000950c  000130b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000130ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002af91  00000000  00000000  000130dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057b0  00000000  00000000  0003e06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e10  00000000  00000000  00043820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a7af  00000000  00000000  00045630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000bcc9  00000000  00000000  0005fddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0006baa8  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000174d  00000000  00000000  0006baeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008a70  00000000  00000000  0006d238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00075ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011bec 	.word	0x08011bec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08011bec 	.word	0x08011bec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b988 	b.w	8000e14 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	468e      	mov	lr, r1
 8000b24:	4604      	mov	r4, r0
 8000b26:	4688      	mov	r8, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14a      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d962      	bls.n	8000bf8 <__udivmoddi4+0xdc>
 8000b32:	fab2 f682 	clz	r6, r2
 8000b36:	b14e      	cbz	r6, 8000b4c <__udivmoddi4+0x30>
 8000b38:	f1c6 0320 	rsb	r3, r6, #32
 8000b3c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b40:	fa20 f303 	lsr.w	r3, r0, r3
 8000b44:	40b7      	lsls	r7, r6
 8000b46:	ea43 0808 	orr.w	r8, r3, r8
 8000b4a:	40b4      	lsls	r4, r6
 8000b4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b50:	fa1f fc87 	uxth.w	ip, r7
 8000b54:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b58:	0c23      	lsrs	r3, r4, #16
 8000b5a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b62:	fb01 f20c 	mul.w	r2, r1, ip
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0x62>
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b70:	f080 80ea 	bcs.w	8000d48 <__udivmoddi4+0x22c>
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f240 80e7 	bls.w	8000d48 <__udivmoddi4+0x22c>
 8000b7a:	3902      	subs	r1, #2
 8000b7c:	443b      	add	r3, r7
 8000b7e:	1a9a      	subs	r2, r3, r2
 8000b80:	b2a3      	uxth	r3, r4
 8000b82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b92:	459c      	cmp	ip, r3
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0x8e>
 8000b96:	18fb      	adds	r3, r7, r3
 8000b98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b9c:	f080 80d6 	bcs.w	8000d4c <__udivmoddi4+0x230>
 8000ba0:	459c      	cmp	ip, r3
 8000ba2:	f240 80d3 	bls.w	8000d4c <__udivmoddi4+0x230>
 8000ba6:	443b      	add	r3, r7
 8000ba8:	3802      	subs	r0, #2
 8000baa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bae:	eba3 030c 	sub.w	r3, r3, ip
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	b11d      	cbz	r5, 8000bbe <__udivmoddi4+0xa2>
 8000bb6:	40f3      	lsrs	r3, r6
 8000bb8:	2200      	movs	r2, #0
 8000bba:	e9c5 3200 	strd	r3, r2, [r5]
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d905      	bls.n	8000bd2 <__udivmoddi4+0xb6>
 8000bc6:	b10d      	cbz	r5, 8000bcc <__udivmoddi4+0xb0>
 8000bc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4608      	mov	r0, r1
 8000bd0:	e7f5      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bd2:	fab3 f183 	clz	r1, r3
 8000bd6:	2900      	cmp	r1, #0
 8000bd8:	d146      	bne.n	8000c68 <__udivmoddi4+0x14c>
 8000bda:	4573      	cmp	r3, lr
 8000bdc:	d302      	bcc.n	8000be4 <__udivmoddi4+0xc8>
 8000bde:	4282      	cmp	r2, r0
 8000be0:	f200 8105 	bhi.w	8000dee <__udivmoddi4+0x2d2>
 8000be4:	1a84      	subs	r4, r0, r2
 8000be6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bea:	2001      	movs	r0, #1
 8000bec:	4690      	mov	r8, r2
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d0e5      	beq.n	8000bbe <__udivmoddi4+0xa2>
 8000bf2:	e9c5 4800 	strd	r4, r8, [r5]
 8000bf6:	e7e2      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	f000 8090 	beq.w	8000d1e <__udivmoddi4+0x202>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	f040 80a4 	bne.w	8000d50 <__udivmoddi4+0x234>
 8000c08:	1a8a      	subs	r2, r1, r2
 8000c0a:	0c03      	lsrs	r3, r0, #16
 8000c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c10:	b280      	uxth	r0, r0
 8000c12:	b2bc      	uxth	r4, r7
 8000c14:	2101      	movs	r1, #1
 8000c16:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c1a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c22:	fb04 f20c 	mul.w	r2, r4, ip
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x11e>
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x11c>
 8000c32:	429a      	cmp	r2, r3
 8000c34:	f200 80e0 	bhi.w	8000df8 <__udivmoddi4+0x2dc>
 8000c38:	46c4      	mov	ip, r8
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c40:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c44:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c48:	fb02 f404 	mul.w	r4, r2, r4
 8000c4c:	429c      	cmp	r4, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x144>
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x142>
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	f200 80ca 	bhi.w	8000df2 <__udivmoddi4+0x2d6>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	1b1b      	subs	r3, r3, r4
 8000c62:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c66:	e7a5      	b.n	8000bb4 <__udivmoddi4+0x98>
 8000c68:	f1c1 0620 	rsb	r6, r1, #32
 8000c6c:	408b      	lsls	r3, r1
 8000c6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c72:	431f      	orrs	r7, r3
 8000c74:	fa0e f401 	lsl.w	r4, lr, r1
 8000c78:	fa20 f306 	lsr.w	r3, r0, r6
 8000c7c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c80:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c84:	4323      	orrs	r3, r4
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	fa1f fc87 	uxth.w	ip, r7
 8000c8e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c92:	0c1c      	lsrs	r4, r3, #16
 8000c94:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c98:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c9c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x1a0>
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cae:	f080 809c 	bcs.w	8000dea <__udivmoddi4+0x2ce>
 8000cb2:	45a6      	cmp	lr, r4
 8000cb4:	f240 8099 	bls.w	8000dea <__udivmoddi4+0x2ce>
 8000cb8:	3802      	subs	r0, #2
 8000cba:	443c      	add	r4, r7
 8000cbc:	eba4 040e 	sub.w	r4, r4, lr
 8000cc0:	fa1f fe83 	uxth.w	lr, r3
 8000cc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ccc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cd0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cd4:	45a4      	cmp	ip, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x1ce>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cde:	f080 8082 	bcs.w	8000de6 <__udivmoddi4+0x2ca>
 8000ce2:	45a4      	cmp	ip, r4
 8000ce4:	d97f      	bls.n	8000de6 <__udivmoddi4+0x2ca>
 8000ce6:	3b02      	subs	r3, #2
 8000ce8:	443c      	add	r4, r7
 8000cea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cee:	eba4 040c 	sub.w	r4, r4, ip
 8000cf2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cf6:	4564      	cmp	r4, ip
 8000cf8:	4673      	mov	r3, lr
 8000cfa:	46e1      	mov	r9, ip
 8000cfc:	d362      	bcc.n	8000dc4 <__udivmoddi4+0x2a8>
 8000cfe:	d05f      	beq.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d00:	b15d      	cbz	r5, 8000d1a <__udivmoddi4+0x1fe>
 8000d02:	ebb8 0203 	subs.w	r2, r8, r3
 8000d06:	eb64 0409 	sbc.w	r4, r4, r9
 8000d0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d12:	431e      	orrs	r6, r3
 8000d14:	40cc      	lsrs	r4, r1
 8000d16:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	e74f      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000d1e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d22:	0c01      	lsrs	r1, r0, #16
 8000d24:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d28:	b280      	uxth	r0, r0
 8000d2a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4638      	mov	r0, r7
 8000d32:	463c      	mov	r4, r7
 8000d34:	46b8      	mov	r8, r7
 8000d36:	46be      	mov	lr, r7
 8000d38:	2620      	movs	r6, #32
 8000d3a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d3e:	eba2 0208 	sub.w	r2, r2, r8
 8000d42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d46:	e766      	b.n	8000c16 <__udivmoddi4+0xfa>
 8000d48:	4601      	mov	r1, r0
 8000d4a:	e718      	b.n	8000b7e <__udivmoddi4+0x62>
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	e72c      	b.n	8000baa <__udivmoddi4+0x8e>
 8000d50:	f1c6 0220 	rsb	r2, r6, #32
 8000d54:	fa2e f302 	lsr.w	r3, lr, r2
 8000d58:	40b7      	lsls	r7, r6
 8000d5a:	40b1      	lsls	r1, r6
 8000d5c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d64:	430a      	orrs	r2, r1
 8000d66:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d6a:	b2bc      	uxth	r4, r7
 8000d6c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d70:	0c11      	lsrs	r1, r2, #16
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb08 f904 	mul.w	r9, r8, r4
 8000d7a:	40b0      	lsls	r0, r6
 8000d7c:	4589      	cmp	r9, r1
 8000d7e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d82:	b280      	uxth	r0, r0
 8000d84:	d93e      	bls.n	8000e04 <__udivmoddi4+0x2e8>
 8000d86:	1879      	adds	r1, r7, r1
 8000d88:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d8c:	d201      	bcs.n	8000d92 <__udivmoddi4+0x276>
 8000d8e:	4589      	cmp	r9, r1
 8000d90:	d81f      	bhi.n	8000dd2 <__udivmoddi4+0x2b6>
 8000d92:	eba1 0109 	sub.w	r1, r1, r9
 8000d96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9a:	fb09 f804 	mul.w	r8, r9, r4
 8000d9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da2:	b292      	uxth	r2, r2
 8000da4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da8:	4542      	cmp	r2, r8
 8000daa:	d229      	bcs.n	8000e00 <__udivmoddi4+0x2e4>
 8000dac:	18ba      	adds	r2, r7, r2
 8000dae:	f109 31ff 	add.w	r1, r9, #4294967295
 8000db2:	d2c4      	bcs.n	8000d3e <__udivmoddi4+0x222>
 8000db4:	4542      	cmp	r2, r8
 8000db6:	d2c2      	bcs.n	8000d3e <__udivmoddi4+0x222>
 8000db8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dbc:	443a      	add	r2, r7
 8000dbe:	e7be      	b.n	8000d3e <__udivmoddi4+0x222>
 8000dc0:	45f0      	cmp	r8, lr
 8000dc2:	d29d      	bcs.n	8000d00 <__udivmoddi4+0x1e4>
 8000dc4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dc8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dcc:	3801      	subs	r0, #1
 8000dce:	46e1      	mov	r9, ip
 8000dd0:	e796      	b.n	8000d00 <__udivmoddi4+0x1e4>
 8000dd2:	eba7 0909 	sub.w	r9, r7, r9
 8000dd6:	4449      	add	r1, r9
 8000dd8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ddc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000de0:	fb09 f804 	mul.w	r8, r9, r4
 8000de4:	e7db      	b.n	8000d9e <__udivmoddi4+0x282>
 8000de6:	4673      	mov	r3, lr
 8000de8:	e77f      	b.n	8000cea <__udivmoddi4+0x1ce>
 8000dea:	4650      	mov	r0, sl
 8000dec:	e766      	b.n	8000cbc <__udivmoddi4+0x1a0>
 8000dee:	4608      	mov	r0, r1
 8000df0:	e6fd      	b.n	8000bee <__udivmoddi4+0xd2>
 8000df2:	443b      	add	r3, r7
 8000df4:	3a02      	subs	r2, #2
 8000df6:	e733      	b.n	8000c60 <__udivmoddi4+0x144>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	443b      	add	r3, r7
 8000dfe:	e71c      	b.n	8000c3a <__udivmoddi4+0x11e>
 8000e00:	4649      	mov	r1, r9
 8000e02:	e79c      	b.n	8000d3e <__udivmoddi4+0x222>
 8000e04:	eba1 0109 	sub.w	r1, r1, r9
 8000e08:	46c4      	mov	ip, r8
 8000e0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0e:	fb09 f804 	mul.w	r8, r9, r4
 8000e12:	e7c4      	b.n	8000d9e <__udivmoddi4+0x282>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f000 ff00 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f816 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f000 f9c6 	bl	80011b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e28:	f000 f95e 	bl	80010e8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000e2c:	f000 f86e 	bl	8000f0c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e30:	f000 f8a2 	bl	8000f78 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000e34:	f000 f8d6 	bl	8000fe4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000e38:	f000 f92c 	bl	8001094 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8000e3c:	f000 f908 	bl	8001050 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	  SetupOS();
 8000e40:	f00d fd2a 	bl	800e898 <SetupOS>
	  StartOS();
 8000e44:	f00d fe26 	bl	800ea94 <StartOS>
	  return 0;
 8000e48:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b094      	sub	sp, #80	@ 0x50
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0320 	add.w	r3, r7, #32
 8000e5a:	2230      	movs	r2, #48	@ 0x30
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f010 f8d3 	bl	801100a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <SystemClock_Config+0xb4>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	4a21      	ldr	r2, [pc, #132]	@ (8000f04 <SystemClock_Config+0xb4>)
 8000e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <SystemClock_Config+0xb4>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <SystemClock_Config+0xb8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1b      	ldr	r2, [pc, #108]	@ (8000f08 <SystemClock_Config+0xb8>)
 8000e9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <SystemClock_Config+0xb8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	f107 0320 	add.w	r3, r7, #32
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 f8ff 	bl	80030c4 <HAL_RCC_OscConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ecc:	f000 f9ea 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 fb62 	bl	80035b4 <HAL_RCC_ClockConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ef6:	f000 f9d5 	bl	80012a4 <Error_Handler>
  }
}
 8000efa:	bf00      	nop
 8000efc:	3750      	adds	r7, #80	@ 0x50
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40007000 	.word	0x40007000

08000f0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f10:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f12:	4a18      	ldr	r2, [pc, #96]	@ (8000f74 <MX_SPI1_Init+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f16:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f40:	2208      	movs	r2, #8
 8000f42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f50:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f58:	220a      	movs	r2, #10
 8000f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f5e:	f002 fd09 	bl	8003974 <HAL_SPI_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f68:	f000 f99c 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200000d0 	.word	0x200000d0
 8000f74:	40013000 	.word	0x40013000

08000f78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000f7e:	4a18      	ldr	r2, [pc, #96]	@ (8000fe0 <MX_SPI2_Init+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f82:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000f84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fac:	2208      	movs	r2, #8
 8000fae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fc4:	220a      	movs	r2, #10
 8000fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fca:	f002 fcd3 	bl	8003974 <HAL_SPI_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fd4:	f000 f966 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000128 	.word	0x20000128
 8000fe0:	40003800 	.word	0x40003800

08000fe4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_SPI3_Init+0x64>)
 8000fea:	4a18      	ldr	r2, [pc, #96]	@ (800104c <MX_SPI3_Init+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fee:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <MX_SPI3_Init+0x64>)
 8000ff0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ff4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_SPI3_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_SPI3_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_SPI3_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_SPI3_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_SPI3_Init+0x64>)
 8001010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001014:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_SPI3_Init+0x64>)
 8001018:	2210      	movs	r2, #16
 800101a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <MX_SPI3_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_SPI3_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001028:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <MX_SPI3_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_SPI3_Init+0x64>)
 8001030:	220a      	movs	r2, #10
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	@ (8001048 <MX_SPI3_Init+0x64>)
 8001036:	f002 fc9d 	bl	8003974 <HAL_SPI_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001040:	f000 f930 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000180 	.word	0x20000180
 800104c:	40003c00 	.word	0x40003c00

08001050 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <MX_TIM11_Init+0x3c>)
 8001056:	4a0e      	ldr	r2, [pc, #56]	@ (8001090 <MX_TIM11_Init+0x40>)
 8001058:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16;
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_TIM11_Init+0x3c>)
 800105c:	2210      	movs	r2, #16
 800105e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <MX_TIM11_Init+0x3c>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_TIM11_Init+0x3c>)
 8001068:	2263      	movs	r2, #99	@ 0x63
 800106a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b07      	ldr	r3, [pc, #28]	@ (800108c <MX_TIM11_Init+0x3c>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_TIM11_Init+0x3c>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_TIM11_Init+0x3c>)
 800107a:	f003 ff53 	bl	8004f24 <HAL_TIM_Base_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8001084:	f000 f90e 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000418 	.word	0x20000418
 8001090:	40014800 	.word	0x40014800

08001094 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <MX_USART1_UART_Init+0x50>)
 800109c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010a0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80010a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010cc:	f004 f9cc 	bl	8005468 <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010d6:	f000 f8e5 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000460 	.word	0x20000460
 80010e4:	40011000 	.word	0x40011000

080010e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b2f      	ldr	r3, [pc, #188]	@ (80011b0 <MX_DMA_Init+0xc8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a2e      	ldr	r2, [pc, #184]	@ (80011b0 <MX_DMA_Init+0xc8>)
 80010f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b2c      	ldr	r3, [pc, #176]	@ (80011b0 <MX_DMA_Init+0xc8>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <MX_DMA_Init+0xc8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a27      	ldr	r2, [pc, #156]	@ (80011b0 <MX_DMA_Init+0xc8>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <MX_DMA_Init+0xc8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2105      	movs	r1, #5
 800112a:	200b      	movs	r0, #11
 800112c:	f000 feff 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001130:	200b      	movs	r0, #11
 8001132:	f000 ff18 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	200e      	movs	r0, #14
 800113c:	f000 fef7 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001140:	200e      	movs	r0, #14
 8001142:	f000 ff10 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2105      	movs	r1, #5
 800114a:	200f      	movs	r0, #15
 800114c:	f000 feef 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001150:	200f      	movs	r0, #15
 8001152:	f000 ff08 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2105      	movs	r1, #5
 800115a:	2010      	movs	r0, #16
 800115c:	f000 fee7 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001160:	2010      	movs	r0, #16
 8001162:	f000 ff00 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2038      	movs	r0, #56	@ 0x38
 800116c:	f000 fedf 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001170:	2038      	movs	r0, #56	@ 0x38
 8001172:	f000 fef8 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2105      	movs	r1, #5
 800117a:	203a      	movs	r0, #58	@ 0x3a
 800117c:	f000 fed7 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001180:	203a      	movs	r0, #58	@ 0x3a
 8001182:	f000 fef0 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2105      	movs	r1, #5
 800118a:	203b      	movs	r0, #59	@ 0x3b
 800118c:	f000 fecf 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001190:	203b      	movs	r0, #59	@ 0x3b
 8001192:	f000 fee8 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2105      	movs	r1, #5
 800119a:	2046      	movs	r0, #70	@ 0x46
 800119c:	f000 fec7 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80011a0:	2046      	movs	r0, #70	@ 0x46
 80011a2:	f000 fee0 	bl	8001f66 <HAL_NVIC_EnableIRQ>

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <MX_GPIO_Init+0xe4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a31      	ldr	r2, [pc, #196]	@ (8001298 <MX_GPIO_Init+0xe4>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <MX_GPIO_Init+0xe4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <MX_GPIO_Init+0xe4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001298 <MX_GPIO_Init+0xe4>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <MX_GPIO_Init+0xe4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <MX_GPIO_Init+0xe4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a23      	ldr	r2, [pc, #140]	@ (8001298 <MX_GPIO_Init+0xe4>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <MX_GPIO_Init+0xe4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <MX_GPIO_Init+0xe4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a1c      	ldr	r2, [pc, #112]	@ (8001298 <MX_GPIO_Init+0xe4>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <MX_GPIO_Init+0xe4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f248 0110 	movw	r1, #32784	@ 0x8010
 8001240:	4816      	ldr	r0, [pc, #88]	@ (800129c <MX_GPIO_Init+0xe8>)
 8001242:	f001 ff25 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PUMP_Pin|VALVE_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	f241 0103 	movw	r1, #4099	@ 0x1003
 800124c:	4814      	ldr	r0, [pc, #80]	@ (80012a0 <MX_GPIO_Init+0xec>)
 800124e:	f001 ff1f 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI3_CS_Pin;
 8001252:	f248 0310 	movw	r3, #32784	@ 0x8010
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	480c      	ldr	r0, [pc, #48]	@ (800129c <MX_GPIO_Init+0xe8>)
 800126c:	f001 fd74 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUMP_Pin VALVE_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = PUMP_Pin|VALVE_Pin|SPI2_CS_Pin;
 8001270:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <MX_GPIO_Init+0xec>)
 800128a:	f001 fd65 	bl	8002d58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	@ 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020400 	.word	0x40020400

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <Error_Handler+0x8>

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_MspInit+0x54>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	4a11      	ldr	r2, [pc, #68]	@ (8001304 <HAL_MspInit+0x54>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <HAL_MspInit+0x54>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <HAL_MspInit+0x54>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <HAL_MspInit+0x54>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <HAL_MspInit+0x54>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	210f      	movs	r1, #15
 80012f2:	f06f 0001 	mvn.w	r0, #1
 80012f6:	f000 fe1a 	bl	8001f2e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	@ 0x38
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a95      	ldr	r2, [pc, #596]	@ (800157c <HAL_SPI_MspInit+0x274>)
 8001326:	4293      	cmp	r3, r2
 8001328:	f040 8091 	bne.w	800144e <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
 8001330:	4b93      	ldr	r3, [pc, #588]	@ (8001580 <HAL_SPI_MspInit+0x278>)
 8001332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001334:	4a92      	ldr	r2, [pc, #584]	@ (8001580 <HAL_SPI_MspInit+0x278>)
 8001336:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800133a:	6453      	str	r3, [r2, #68]	@ 0x44
 800133c:	4b90      	ldr	r3, [pc, #576]	@ (8001580 <HAL_SPI_MspInit+0x278>)
 800133e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001344:	623b      	str	r3, [r7, #32]
 8001346:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	4b8c      	ldr	r3, [pc, #560]	@ (8001580 <HAL_SPI_MspInit+0x278>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	4a8b      	ldr	r2, [pc, #556]	@ (8001580 <HAL_SPI_MspInit+0x278>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6313      	str	r3, [r2, #48]	@ 0x30
 8001358:	4b89      	ldr	r3, [pc, #548]	@ (8001580 <HAL_SPI_MspInit+0x278>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001364:	23e0      	movs	r3, #224	@ 0xe0
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001374:	2305      	movs	r3, #5
 8001376:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	4881      	ldr	r0, [pc, #516]	@ (8001584 <HAL_SPI_MspInit+0x27c>)
 8001380:	f001 fcea 	bl	8002d58 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001384:	4b80      	ldr	r3, [pc, #512]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 8001386:	4a81      	ldr	r2, [pc, #516]	@ (800158c <HAL_SPI_MspInit+0x284>)
 8001388:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800138a:	4b7f      	ldr	r3, [pc, #508]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 800138c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001390:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001392:	4b7d      	ldr	r3, [pc, #500]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001398:	4b7b      	ldr	r3, [pc, #492]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800139e:	4b7a      	ldr	r3, [pc, #488]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 80013a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013a4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013a6:	4b78      	ldr	r3, [pc, #480]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ac:	4b76      	ldr	r3, [pc, #472]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013b2:	4b75      	ldr	r3, [pc, #468]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013b8:	4b73      	ldr	r3, [pc, #460]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013be:	4b72      	ldr	r3, [pc, #456]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013c4:	4870      	ldr	r0, [pc, #448]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 80013c6:	f000 fded 	bl	8001fa4 <HAL_DMA_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80013d0:	f7ff ff68 	bl	80012a4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a6c      	ldr	r2, [pc, #432]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 80013d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013da:	4a6b      	ldr	r2, [pc, #428]	@ (8001588 <HAL_SPI_MspInit+0x280>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 80013e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001594 <HAL_SPI_MspInit+0x28c>)
 80013e4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 80013e8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013ec:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ee:	4b68      	ldr	r3, [pc, #416]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 80013f0:	2240      	movs	r2, #64	@ 0x40
 80013f2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f4:	4b66      	ldr	r3, [pc, #408]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013fa:	4b65      	ldr	r3, [pc, #404]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 80013fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001400:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001402:	4b63      	ldr	r3, [pc, #396]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001408:	4b61      	ldr	r3, [pc, #388]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800140e:	4b60      	ldr	r3, [pc, #384]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001414:	4b5e      	ldr	r3, [pc, #376]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800141a:	4b5d      	ldr	r3, [pc, #372]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001420:	485b      	ldr	r0, [pc, #364]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 8001422:	f000 fdbf 	bl	8001fa4 <HAL_DMA_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800142c:	f7ff ff3a 	bl	80012a4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a57      	ldr	r2, [pc, #348]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 8001434:	649a      	str	r2, [r3, #72]	@ 0x48
 8001436:	4a56      	ldr	r2, [pc, #344]	@ (8001590 <HAL_SPI_MspInit+0x288>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2105      	movs	r1, #5
 8001440:	2023      	movs	r0, #35	@ 0x23
 8001442:	f000 fd74 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001446:	2023      	movs	r0, #35	@ 0x23
 8001448:	f000 fd8d 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800144c:	e145      	b.n	80016da <HAL_SPI_MspInit+0x3d2>
  else if(hspi->Instance==SPI2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a51      	ldr	r2, [pc, #324]	@ (8001598 <HAL_SPI_MspInit+0x290>)
 8001454:	4293      	cmp	r3, r2
 8001456:	f040 80ab 	bne.w	80015b0 <HAL_SPI_MspInit+0x2a8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	4b48      	ldr	r3, [pc, #288]	@ (8001580 <HAL_SPI_MspInit+0x278>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	4a47      	ldr	r2, [pc, #284]	@ (8001580 <HAL_SPI_MspInit+0x278>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001468:	6413      	str	r3, [r2, #64]	@ 0x40
 800146a:	4b45      	ldr	r3, [pc, #276]	@ (8001580 <HAL_SPI_MspInit+0x278>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	4b41      	ldr	r3, [pc, #260]	@ (8001580 <HAL_SPI_MspInit+0x278>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a40      	ldr	r2, [pc, #256]	@ (8001580 <HAL_SPI_MspInit+0x278>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b3e      	ldr	r3, [pc, #248]	@ (8001580 <HAL_SPI_MspInit+0x278>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001492:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014a4:	2305      	movs	r3, #5
 80014a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ac:	4619      	mov	r1, r3
 80014ae:	483b      	ldr	r0, [pc, #236]	@ (800159c <HAL_SPI_MspInit+0x294>)
 80014b0:	f001 fc52 	bl	8002d58 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80014b4:	4b3a      	ldr	r3, [pc, #232]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 80014b6:	4a3b      	ldr	r2, [pc, #236]	@ (80015a4 <HAL_SPI_MspInit+0x29c>)
 80014b8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80014ba:	4b39      	ldr	r3, [pc, #228]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c0:	4b37      	ldr	r3, [pc, #220]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c6:	4b36      	ldr	r3, [pc, #216]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014cc:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 80014ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014d2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014d4:	4b32      	ldr	r3, [pc, #200]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014da:	4b31      	ldr	r3, [pc, #196]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80014e0:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014e6:	4b2e      	ldr	r3, [pc, #184]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ec:	4b2c      	ldr	r3, [pc, #176]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80014f2:	482b      	ldr	r0, [pc, #172]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 80014f4:	f000 fd56 	bl	8001fa4 <HAL_DMA_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_SPI_MspInit+0x1fa>
      Error_Handler();
 80014fe:	f7ff fed1 	bl	80012a4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a26      	ldr	r2, [pc, #152]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 8001506:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001508:	4a25      	ldr	r2, [pc, #148]	@ (80015a0 <HAL_SPI_MspInit+0x298>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800150e:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 8001510:	4a26      	ldr	r2, [pc, #152]	@ (80015ac <HAL_SPI_MspInit+0x2a4>)
 8001512:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001514:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 8001516:	2200      	movs	r2, #0
 8001518:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800151a:	4b23      	ldr	r3, [pc, #140]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 800151c:	2240      	movs	r2, #64	@ 0x40
 800151e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001520:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001526:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 8001528:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800152c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001534:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800154c:	4816      	ldr	r0, [pc, #88]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 800154e:	f000 fd29 	bl	8001fa4 <HAL_DMA_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_SPI_MspInit+0x254>
      Error_Handler();
 8001558:	f7ff fea4 	bl	80012a4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 8001560:	649a      	str	r2, [r3, #72]	@ 0x48
 8001562:	4a11      	ldr	r2, [pc, #68]	@ (80015a8 <HAL_SPI_MspInit+0x2a0>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2105      	movs	r1, #5
 800156c:	2024      	movs	r0, #36	@ 0x24
 800156e:	f000 fcde 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001572:	2024      	movs	r0, #36	@ 0x24
 8001574:	f000 fcf7 	bl	8001f66 <HAL_NVIC_EnableIRQ>
}
 8001578:	e0af      	b.n	80016da <HAL_SPI_MspInit+0x3d2>
 800157a:	bf00      	nop
 800157c:	40013000 	.word	0x40013000
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000
 8001588:	200001d8 	.word	0x200001d8
 800158c:	40026410 	.word	0x40026410
 8001590:	20000238 	.word	0x20000238
 8001594:	40026458 	.word	0x40026458
 8001598:	40003800 	.word	0x40003800
 800159c:	40020400 	.word	0x40020400
 80015a0:	20000298 	.word	0x20000298
 80015a4:	40026058 	.word	0x40026058
 80015a8:	200002f8 	.word	0x200002f8
 80015ac:	40026070 	.word	0x40026070
  else if(hspi->Instance==SPI3)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a4b      	ldr	r2, [pc, #300]	@ (80016e4 <HAL_SPI_MspInit+0x3dc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	f040 808f 	bne.w	80016da <HAL_SPI_MspInit+0x3d2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	4b49      	ldr	r3, [pc, #292]	@ (80016e8 <HAL_SPI_MspInit+0x3e0>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	4a48      	ldr	r2, [pc, #288]	@ (80016e8 <HAL_SPI_MspInit+0x3e0>)
 80015c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80015cc:	4b46      	ldr	r3, [pc, #280]	@ (80016e8 <HAL_SPI_MspInit+0x3e0>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	4b42      	ldr	r3, [pc, #264]	@ (80016e8 <HAL_SPI_MspInit+0x3e0>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e0:	4a41      	ldr	r2, [pc, #260]	@ (80016e8 <HAL_SPI_MspInit+0x3e0>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e8:	4b3f      	ldr	r3, [pc, #252]	@ (80016e8 <HAL_SPI_MspInit+0x3e0>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015f4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001606:	2306      	movs	r3, #6
 8001608:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	4836      	ldr	r0, [pc, #216]	@ (80016ec <HAL_SPI_MspInit+0x3e4>)
 8001612:	f001 fba1 	bl	8002d58 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001616:	4b36      	ldr	r3, [pc, #216]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 8001618:	4a36      	ldr	r2, [pc, #216]	@ (80016f4 <HAL_SPI_MspInit+0x3ec>)
 800161a:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800161c:	4b34      	ldr	r3, [pc, #208]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001622:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001628:	4b31      	ldr	r3, [pc, #196]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800162e:	4b30      	ldr	r3, [pc, #192]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 8001630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001634:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001636:	4b2e      	ldr	r3, [pc, #184]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800163c:	4b2c      	ldr	r3, [pc, #176]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001642:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001648:	4b29      	ldr	r3, [pc, #164]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 800164a:	2200      	movs	r2, #0
 800164c:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800164e:	4b28      	ldr	r3, [pc, #160]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001654:	4826      	ldr	r0, [pc, #152]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 8001656:	f000 fca5 	bl	8001fa4 <HAL_DMA_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_SPI_MspInit+0x35c>
      Error_Handler();
 8001660:	f7ff fe20 	bl	80012a4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a22      	ldr	r2, [pc, #136]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 8001668:	64da      	str	r2, [r3, #76]	@ 0x4c
 800166a:	4a21      	ldr	r2, [pc, #132]	@ (80016f0 <HAL_SPI_MspInit+0x3e8>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001670:	4b21      	ldr	r3, [pc, #132]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 8001672:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <HAL_SPI_MspInit+0x3f4>)
 8001674:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001676:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800167c:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 800167e:	2240      	movs	r2, #64	@ 0x40
 8001680:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001682:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001688:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 800168a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800168e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001690:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001696:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800169c:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a8:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80016ae:	4812      	ldr	r0, [pc, #72]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 80016b0:	f000 fc78 	bl	8001fa4 <HAL_DMA_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_SPI_MspInit+0x3b6>
      Error_Handler();
 80016ba:	f7ff fdf3 	bl	80012a4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a0d      	ldr	r2, [pc, #52]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 80016c2:	649a      	str	r2, [r3, #72]	@ 0x48
 80016c4:	4a0c      	ldr	r2, [pc, #48]	@ (80016f8 <HAL_SPI_MspInit+0x3f0>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2105      	movs	r1, #5
 80016ce:	2033      	movs	r0, #51	@ 0x33
 80016d0:	f000 fc2d 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80016d4:	2033      	movs	r0, #51	@ 0x33
 80016d6:	f000 fc46 	bl	8001f66 <HAL_NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3738      	adds	r7, #56	@ 0x38
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40003c00 	.word	0x40003c00
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020800 	.word	0x40020800
 80016f0:	20000358 	.word	0x20000358
 80016f4:	40026010 	.word	0x40026010
 80016f8:	200003b8 	.word	0x200003b8
 80016fc:	40026088 	.word	0x40026088

08001700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0e      	ldr	r2, [pc, #56]	@ (8001748 <HAL_TIM_Base_MspInit+0x48>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d115      	bne.n	800173e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <HAL_TIM_Base_MspInit+0x4c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171a:	4a0c      	ldr	r2, [pc, #48]	@ (800174c <HAL_TIM_Base_MspInit+0x4c>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001720:	6453      	str	r3, [r2, #68]	@ 0x44
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_TIM_Base_MspInit+0x4c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2105      	movs	r1, #5
 8001732:	201a      	movs	r0, #26
 8001734:	f000 fbfb 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001738:	201a      	movs	r0, #26
 800173a:	f000 fc14 	bl	8001f66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40014800 	.word	0x40014800
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	@ 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a4c      	ldr	r2, [pc, #304]	@ (80018a0 <HAL_UART_MspInit+0x150>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f040 8091 	bne.w	8001896 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	4b4a      	ldr	r3, [pc, #296]	@ (80018a4 <HAL_UART_MspInit+0x154>)
 800177a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177c:	4a49      	ldr	r2, [pc, #292]	@ (80018a4 <HAL_UART_MspInit+0x154>)
 800177e:	f043 0310 	orr.w	r3, r3, #16
 8001782:	6453      	str	r3, [r2, #68]	@ 0x44
 8001784:	4b47      	ldr	r3, [pc, #284]	@ (80018a4 <HAL_UART_MspInit+0x154>)
 8001786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	4b43      	ldr	r3, [pc, #268]	@ (80018a4 <HAL_UART_MspInit+0x154>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001798:	4a42      	ldr	r2, [pc, #264]	@ (80018a4 <HAL_UART_MspInit+0x154>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a0:	4b40      	ldr	r3, [pc, #256]	@ (80018a4 <HAL_UART_MspInit+0x154>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017ac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017be:	2307      	movs	r3, #7
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	4837      	ldr	r0, [pc, #220]	@ (80018a8 <HAL_UART_MspInit+0x158>)
 80017ca:	f001 fac5 	bl	8002d58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80017ce:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 80017d0:	4a37      	ldr	r2, [pc, #220]	@ (80018b0 <HAL_UART_MspInit+0x160>)
 80017d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80017d4:	4b35      	ldr	r3, [pc, #212]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 80017d6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017da:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017dc:	4b33      	ldr	r3, [pc, #204]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e2:	4b32      	ldr	r3, [pc, #200]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017e8:	4b30      	ldr	r3, [pc, #192]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 80017ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017f0:	4b2e      	ldr	r3, [pc, #184]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f6:	4b2d      	ldr	r3, [pc, #180]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017fc:	4b2b      	ldr	r3, [pc, #172]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001802:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001808:	4b28      	ldr	r3, [pc, #160]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800180e:	4827      	ldr	r0, [pc, #156]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 8001810:	f000 fbc8 	bl	8001fa4 <HAL_DMA_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800181a:	f7ff fd43 	bl	80012a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a22      	ldr	r2, [pc, #136]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 8001822:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001824:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <HAL_UART_MspInit+0x15c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800182a:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 800182c:	4a22      	ldr	r2, [pc, #136]	@ (80018b8 <HAL_UART_MspInit+0x168>)
 800182e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001830:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 8001832:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001836:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001838:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 800183a:	2240      	movs	r2, #64	@ 0x40
 800183c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183e:	4b1d      	ldr	r3, [pc, #116]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 8001840:	2200      	movs	r2, #0
 8001842:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001844:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 8001846:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800184a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001858:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800186a:	4812      	ldr	r0, [pc, #72]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 800186c:	f000 fb9a 	bl	8001fa4 <HAL_DMA_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001876:	f7ff fd15 	bl	80012a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 800187e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001880:	4a0c      	ldr	r2, [pc, #48]	@ (80018b4 <HAL_UART_MspInit+0x164>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	2025      	movs	r0, #37	@ 0x25
 800188c:	f000 fb4f 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001890:	2025      	movs	r0, #37	@ 0x25
 8001892:	f000 fb68 	bl	8001f66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40011000 	.word	0x40011000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	200004a8 	.word	0x200004a8
 80018b0:	40026440 	.word	0x40026440
 80018b4:	20000508 	.word	0x20000508
 80018b8:	400264b8 	.word	0x400264b8

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <NMI_Handler+0x4>

080018c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <MemManage_Handler+0x4>

080018d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f6:	f000 f9e5 	bl	8001cc4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018fa:	f007 fa9d 	bl	8008e38 <xTaskGetSchedulerState>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b01      	cmp	r3, #1
 8001902:	d001      	beq.n	8001908 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001904:	f008 f998 	bl	8009c38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <DMA1_Stream0_IRQHandler+0x10>)
 8001912:	f000 fcdf 	bl	80022d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000358 	.word	0x20000358

08001920 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <DMA1_Stream3_IRQHandler+0x10>)
 8001926:	f000 fcd5 	bl	80022d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000298 	.word	0x20000298

08001934 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <DMA1_Stream4_IRQHandler+0x10>)
 800193a:	f000 fccb 	bl	80022d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200002f8 	.word	0x200002f8

08001948 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <DMA1_Stream5_IRQHandler+0x10>)
 800194e:	f000 fcc1 	bl	80022d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200003b8 	.word	0x200003b8

0800195c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	StartTimerTicks++;
 8001960:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	4a03      	ldr	r2, [pc, #12]	@ (8001974 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001968:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800196a:	4803      	ldr	r0, [pc, #12]	@ (8001978 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 800196c:	f003 fb9a 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200000cc 	.word	0x200000cc
 8001978:	20000418 	.word	0x20000418

0800197c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <SPI1_IRQHandler+0x10>)
 8001982:	f002 fef9 	bl	8004778 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200000d0 	.word	0x200000d0

08001990 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <SPI2_IRQHandler+0x10>)
 8001996:	f002 feef 	bl	8004778 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000128 	.word	0x20000128

080019a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <USART1_IRQHandler+0x10>)
 80019aa:	f003 fe5d 	bl	8005668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000460 	.word	0x20000460

080019b8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <SPI3_IRQHandler+0x10>)
 80019be:	f002 fedb 	bl	8004778 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000180 	.word	0x20000180

080019cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <DMA2_Stream0_IRQHandler+0x10>)
 80019d2:	f000 fc7f 	bl	80022d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200001d8 	.word	0x200001d8

080019e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019e4:	4802      	ldr	r0, [pc, #8]	@ (80019f0 <DMA2_Stream2_IRQHandler+0x10>)
 80019e6:	f000 fc75 	bl	80022d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200004a8 	.word	0x200004a8

080019f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019f8:	4802      	ldr	r0, [pc, #8]	@ (8001a04 <DMA2_Stream3_IRQHandler+0x10>)
 80019fa:	f000 fc6b 	bl	80022d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000238 	.word	0x20000238

08001a08 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a0c:	4802      	ldr	r0, [pc, #8]	@ (8001a18 <DMA2_Stream7_IRQHandler+0x10>)
 8001a0e:	f000 fc61 	bl	80022d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000508 	.word	0x20000508

08001a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_kill>:

int _kill(int pid, int sig)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a36:	f00f fb47 	bl	80110c8 <__errno>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2216      	movs	r2, #22
 8001a3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_exit>:

void _exit (int status)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ffe7 	bl	8001a2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a5e:	bf00      	nop
 8001a60:	e7fd      	b.n	8001a5e <_exit+0x12>

08001a62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e00a      	b.n	8001a8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a74:	f3af 8000 	nop.w
 8001a78:	4601      	mov	r1, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	60ba      	str	r2, [r7, #8]
 8001a80:	b2ca      	uxtb	r2, r1
 8001a82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dbf0      	blt.n	8001a74 <_read+0x12>
  }

  return len;
 8001a92:	687b      	ldr	r3, [r7, #4]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e009      	b.n	8001ac2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	60ba      	str	r2, [r7, #8]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	dbf1      	blt.n	8001aae <_write+0x12>
  }
  return len;
 8001aca:	687b      	ldr	r3, [r7, #4]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_close>:

int _close(int file)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001afc:	605a      	str	r2, [r3, #4]
  return 0;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_isatty>:

int _isatty(int file)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4a14      	ldr	r2, [pc, #80]	@ (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b50:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b58:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b6c:	f00f faac 	bl	80110c8 <__errno>
 8001b70:	4603      	mov	r3, r0
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ba0 <_sbrk+0x64>)
 8001b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20020000 	.word	0x20020000
 8001b9c:	00000400 	.word	0x00000400
 8001ba0:	20000568 	.word	0x20000568
 8001ba4:	20009510 	.word	0x20009510

08001ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <SystemInit+0x20>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bb2:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <SystemInit+0x20>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <Reset_Handler>:
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c04 <LoopFillZerobss+0xe>
 8001bd0:	f7ff ffea 	bl	8001ba8 <SystemInit>
 8001bd4:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <LoopFillZerobss+0x12>)
 8001bd6:	490d      	ldr	r1, [pc, #52]	@ (8001c0c <LoopFillZerobss+0x16>)
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <LoopFillZerobss+0x1a>)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:
 8001bde:	58d4      	ldr	r4, [r2, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:
 8001be4:	18c4      	adds	r4, r0, r3
 8001be6:	428c      	cmp	r4, r1
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <LoopFillZerobss+0x1e>)
 8001bec:	4c0a      	ldr	r4, [pc, #40]	@ (8001c18 <LoopFillZerobss+0x22>)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:
 8001bf6:	42a2      	cmp	r2, r4
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>
 8001bfa:	f00f fa6b 	bl	80110d4 <__libc_init_array>
 8001bfe:	f7ff f90b 	bl	8000e18 <main>
 8001c02:	4770      	bx	lr
 8001c04:	20020000 	.word	0x20020000
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	200000ac 	.word	0x200000ac
 8001c10:	08011ec4 	.word	0x08011ec4
 8001c14:	200000b0 	.word	0x200000b0
 8001c18:	2000950c 	.word	0x2000950c

08001c1c <ADC_IRQHandler>:
 8001c1c:	e7fe      	b.n	8001c1c <ADC_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c24:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	@ (8001c60 <HAL_Init+0x40>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	@ (8001c60 <HAL_Init+0x40>)
 8001c36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <HAL_Init+0x40>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f965 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	200f      	movs	r0, #15
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fb2c 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f981 	bl	8001f8a <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 f945 	bl	8001f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	@ (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	2000056c 	.word	0x2000056c

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	2000056c 	.word	0x2000056c

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	@ (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	@ (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	@ (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	@ 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	@ 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001eac:	f3bf 8f4f 	dsb	sy
}
 8001eb0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <__NVIC_SystemReset+0x24>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001eba:	4904      	ldr	r1, [pc, #16]	@ (8001ecc <__NVIC_SystemReset+0x24>)
 8001ebc:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <__NVIC_SystemReset+0x28>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec2:	f3bf 8f4f 	dsb	sy
}
 8001ec6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <__NVIC_SystemReset+0x20>
 8001ecc:	e000ed00 	.word	0xe000ed00
 8001ed0:	05fa0004 	.word	0x05fa0004

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	@ (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f7ff ff78 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	@ (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff13 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff28 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff78 	bl	8001e40 <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff47 	bl	8001dec <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff1b 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001f86:	f7ff ff8f 	bl	8001ea8 <__NVIC_SystemReset>

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ff9e 	bl	8001ed4 <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff fe9c 	bl	8001cec <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e099      	b.n	80020f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe0:	e00f      	b.n	8002002 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe2:	f7ff fe83 	bl	8001cec <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d908      	bls.n	8002002 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e078      	b.n	80020f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e8      	bne.n	8001fe2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4b38      	ldr	r3, [pc, #224]	@ (80020fc <HAL_DMA_Init+0x158>)
 800201c:	4013      	ands	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	2b04      	cmp	r3, #4
 800205a:	d107      	bne.n	800206c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	4313      	orrs	r3, r2
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f023 0307 	bic.w	r3, r3, #7
 8002082:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	2b04      	cmp	r3, #4
 8002094:	d117      	bne.n	80020c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4313      	orrs	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00e      	beq.n	80020c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fb01 	bl	80026b0 <DMA_CheckFifoParam>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2240      	movs	r2, #64	@ 0x40
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020c2:	2301      	movs	r3, #1
 80020c4:	e016      	b.n	80020f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fab8 	bl	8002644 <DMA_CalcBaseAndBitshift>
 80020d4:	4603      	mov	r3, r0
 80020d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	223f      	movs	r2, #63	@ 0x3f
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	f010803f 	.word	0xf010803f

08002100 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_DMA_Start_IT+0x26>
 8002122:	2302      	movs	r3, #2
 8002124:	e040      	b.n	80021a8 <HAL_DMA_Start_IT+0xa8>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b01      	cmp	r3, #1
 8002138:	d12f      	bne.n	800219a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fa4a 	bl	80025e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002158:	223f      	movs	r2, #63	@ 0x3f
 800215a:	409a      	lsls	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0216 	orr.w	r2, r2, #22
 800216e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0208 	orr.w	r2, r2, #8
 8002186:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e005      	b.n	80021a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021a2:	2302      	movs	r3, #2
 80021a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021be:	f7ff fd95 	bl	8001cec <HAL_GetTick>
 80021c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d008      	beq.n	80021e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2280      	movs	r2, #128	@ 0x80
 80021d4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e052      	b.n	8002288 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0216 	bic.w	r2, r2, #22
 80021f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002200:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <HAL_DMA_Abort+0x62>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0208 	bic.w	r2, r2, #8
 8002220:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002232:	e013      	b.n	800225c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002234:	f7ff fd5a 	bl	8001cec <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b05      	cmp	r3, #5
 8002240:	d90c      	bls.n	800225c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2203      	movs	r2, #3
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e015      	b.n	8002288 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1e4      	bne.n	8002234 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226e:	223f      	movs	r2, #63	@ 0x3f
 8002270:	409a      	lsls	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d004      	beq.n	80022ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2280      	movs	r2, #128	@ 0x80
 80022a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00c      	b.n	80022c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2205      	movs	r2, #5
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0201 	bic.w	r2, r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022e0:	4b8e      	ldr	r3, [pc, #568]	@ (800251c <HAL_DMA_IRQHandler+0x248>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a8e      	ldr	r2, [pc, #568]	@ (8002520 <HAL_DMA_IRQHandler+0x24c>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0a9b      	lsrs	r3, r3, #10
 80022ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fe:	2208      	movs	r2, #8
 8002300:	409a      	lsls	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d01a      	beq.n	8002340 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0204 	bic.w	r2, r2, #4
 8002326:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	2208      	movs	r2, #8
 800232e:	409a      	lsls	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002344:	2201      	movs	r2, #1
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d012      	beq.n	8002376 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	2201      	movs	r2, #1
 8002364:	409a      	lsls	r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236e:	f043 0202 	orr.w	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237a:	2204      	movs	r2, #4
 800237c:	409a      	lsls	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d012      	beq.n	80023ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00b      	beq.n	80023ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002398:	2204      	movs	r2, #4
 800239a:	409a      	lsls	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b0:	2210      	movs	r2, #16
 80023b2:	409a      	lsls	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d043      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03c      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ce:	2210      	movs	r2, #16
 80023d0:	409a      	lsls	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d018      	beq.n	8002416 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d108      	bne.n	8002404 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d024      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4798      	blx	r3
 8002402:	e01f      	b.n	8002444 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01b      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
 8002414:	e016      	b.n	8002444 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d107      	bne.n	8002434 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0208 	bic.w	r2, r2, #8
 8002432:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002448:	2220      	movs	r2, #32
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 808f 	beq.w	8002574 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8087 	beq.w	8002574 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246a:	2220      	movs	r2, #32
 800246c:	409a      	lsls	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b05      	cmp	r3, #5
 800247c:	d136      	bne.n	80024ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0216 	bic.w	r2, r2, #22
 800248c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800249c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <HAL_DMA_IRQHandler+0x1da>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0208 	bic.w	r2, r2, #8
 80024bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c2:	223f      	movs	r2, #63	@ 0x3f
 80024c4:	409a      	lsls	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d07e      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
        }
        return;
 80024ea:	e079      	b.n	80025e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01d      	beq.n	8002536 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250c:	2b00      	cmp	r3, #0
 800250e:	d031      	beq.n	8002574 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
 8002518:	e02c      	b.n	8002574 <HAL_DMA_IRQHandler+0x2a0>
 800251a:	bf00      	nop
 800251c:	20000000 	.word	0x20000000
 8002520:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002528:	2b00      	cmp	r3, #0
 800252a:	d023      	beq.n	8002574 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
 8002534:	e01e      	b.n	8002574 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10f      	bne.n	8002564 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0210 	bic.w	r2, r2, #16
 8002552:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002578:	2b00      	cmp	r3, #0
 800257a:	d032      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d022      	beq.n	80025ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2205      	movs	r2, #5
 800258c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d307      	bcc.n	80025bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f2      	bne.n	80025a0 <HAL_DMA_IRQHandler+0x2cc>
 80025ba:	e000      	b.n	80025be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	4798      	blx	r3
 80025de:	e000      	b.n	80025e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025e0:	bf00      	nop
    }
  }
}
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002604:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b40      	cmp	r3, #64	@ 0x40
 8002614:	d108      	bne.n	8002628 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002626:	e007      	b.n	8002638 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	60da      	str	r2, [r3, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	3b10      	subs	r3, #16
 8002654:	4a14      	ldr	r2, [pc, #80]	@ (80026a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800265e:	4a13      	ldr	r2, [pc, #76]	@ (80026ac <DMA_CalcBaseAndBitshift+0x68>)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d909      	bls.n	8002686 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	1d1a      	adds	r2, r3, #4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	659a      	str	r2, [r3, #88]	@ 0x58
 8002684:	e007      	b.n	8002696 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	aaaaaaab 	.word	0xaaaaaaab
 80026ac:	08011cd4 	.word	0x08011cd4

080026b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d11f      	bne.n	800270a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d856      	bhi.n	800277e <DMA_CheckFifoParam+0xce>
 80026d0:	a201      	add	r2, pc, #4	@ (adr r2, 80026d8 <DMA_CheckFifoParam+0x28>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	080026e9 	.word	0x080026e9
 80026dc:	080026fb 	.word	0x080026fb
 80026e0:	080026e9 	.word	0x080026e9
 80026e4:	0800277f 	.word	0x0800277f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d046      	beq.n	8002782 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f8:	e043      	b.n	8002782 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002702:	d140      	bne.n	8002786 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002708:	e03d      	b.n	8002786 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002712:	d121      	bne.n	8002758 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d837      	bhi.n	800278a <DMA_CheckFifoParam+0xda>
 800271a:	a201      	add	r2, pc, #4	@ (adr r2, 8002720 <DMA_CheckFifoParam+0x70>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	08002731 	.word	0x08002731
 8002724:	08002737 	.word	0x08002737
 8002728:	08002731 	.word	0x08002731
 800272c:	08002749 	.word	0x08002749
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      break;
 8002734:	e030      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d025      	beq.n	800278e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002746:	e022      	b.n	800278e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002750:	d11f      	bne.n	8002792 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002756:	e01c      	b.n	8002792 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d903      	bls.n	8002766 <DMA_CheckFifoParam+0xb6>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d003      	beq.n	800276c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002764:	e018      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
      break;
 800276a:	e015      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00e      	beq.n	8002796 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      break;
 800277c:	e00b      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 800277e:	bf00      	nop
 8002780:	e00a      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 8002782:	bf00      	nop
 8002784:	e008      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 8002786:	bf00      	nop
 8002788:	e006      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 800278a:	bf00      	nop
 800278c:	e004      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 800278e:	bf00      	nop
 8002790:	e002      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;   
 8002792:	bf00      	nop
 8002794:	e000      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 8002796:	bf00      	nop
    }
  } 
  
  return status; 
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop

080027a8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027ba:	4b23      	ldr	r3, [pc, #140]	@ (8002848 <HAL_FLASH_Program+0xa0>)
 80027bc:	7e1b      	ldrb	r3, [r3, #24]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_FLASH_Program+0x1e>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e03b      	b.n	800283e <HAL_FLASH_Program+0x96>
 80027c6:	4b20      	ldr	r3, [pc, #128]	@ (8002848 <HAL_FLASH_Program+0xa0>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80027d0:	f000 f870 	bl	80028b4 <FLASH_WaitForLastOperation>
 80027d4:	4603      	mov	r3, r0
 80027d6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d12b      	bne.n	8002836 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80027e4:	783b      	ldrb	r3, [r7, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	68b8      	ldr	r0, [r7, #8]
 80027ea:	f000 f91b 	bl	8002a24 <FLASH_Program_Byte>
 80027ee:	e016      	b.n	800281e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d105      	bne.n	8002802 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80027f6:	883b      	ldrh	r3, [r7, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	68b8      	ldr	r0, [r7, #8]
 80027fc:	f000 f8ee 	bl	80029dc <FLASH_Program_HalfWord>
 8002800:	e00d      	b.n	800281e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d105      	bne.n	8002814 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	4619      	mov	r1, r3
 800280c:	68b8      	ldr	r0, [r7, #8]
 800280e:	f000 f8c3 	bl	8002998 <FLASH_Program_Word>
 8002812:	e004      	b.n	800281e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002818:	68b8      	ldr	r0, [r7, #8]
 800281a:	f000 f88b 	bl	8002934 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800281e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002822:	f000 f847 	bl	80028b4 <FLASH_WaitForLastOperation>
 8002826:	4603      	mov	r3, r0
 8002828:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800282a:	4b08      	ldr	r3, [pc, #32]	@ (800284c <HAL_FLASH_Program+0xa4>)
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	4a07      	ldr	r2, [pc, #28]	@ (800284c <HAL_FLASH_Program+0xa4>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002836:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <HAL_FLASH_Program+0xa0>)
 8002838:	2200      	movs	r2, #0
 800283a:	761a      	strb	r2, [r3, #24]

  return status;
 800283c:	7dfb      	ldrb	r3, [r7, #23]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000570 	.word	0x20000570
 800284c:	40023c00 	.word	0x40023c00

08002850 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800285a:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <HAL_FLASH_Unlock+0x38>)
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	da0b      	bge.n	800287a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002862:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <HAL_FLASH_Unlock+0x38>)
 8002864:	4a09      	ldr	r2, [pc, #36]	@ (800288c <HAL_FLASH_Unlock+0x3c>)
 8002866:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002868:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <HAL_FLASH_Unlock+0x38>)
 800286a:	4a09      	ldr	r2, [pc, #36]	@ (8002890 <HAL_FLASH_Unlock+0x40>)
 800286c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_FLASH_Unlock+0x38>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	da01      	bge.n	800287a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800287a:	79fb      	ldrb	r3, [r7, #7]
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40023c00 	.word	0x40023c00
 800288c:	45670123 	.word	0x45670123
 8002890:	cdef89ab 	.word	0xcdef89ab

08002894 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002898:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <HAL_FLASH_Lock+0x1c>)
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	4a04      	ldr	r2, [pc, #16]	@ (80028b0 <HAL_FLASH_Lock+0x1c>)
 800289e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028a2:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40023c00 	.word	0x40023c00

080028b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80028c0:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <FLASH_WaitForLastOperation+0x78>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80028c6:	f7ff fa11 	bl	8001cec <HAL_GetTick>
 80028ca:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80028cc:	e010      	b.n	80028f0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d00c      	beq.n	80028f0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <FLASH_WaitForLastOperation+0x38>
 80028dc:	f7ff fa06 	bl	8001cec <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d201      	bcs.n	80028f0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e019      	b.n	8002924 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80028f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002930 <FLASH_WaitForLastOperation+0x7c>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1e8      	bne.n	80028ce <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80028fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <FLASH_WaitForLastOperation+0x7c>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002908:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <FLASH_WaitForLastOperation+0x7c>)
 800290a:	2201      	movs	r2, #1
 800290c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <FLASH_WaitForLastOperation+0x7c>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800291a:	f000 f8a5 	bl	8002a68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0

}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000570 	.word	0x20000570
 8002930:	40023c00 	.word	0x40023c00

08002934 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002940:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <FLASH_Program_DoubleWord+0x60>)
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	4a13      	ldr	r2, [pc, #76]	@ (8002994 <FLASH_Program_DoubleWord+0x60>)
 8002946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800294a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <FLASH_Program_DoubleWord+0x60>)
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	4a10      	ldr	r2, [pc, #64]	@ (8002994 <FLASH_Program_DoubleWord+0x60>)
 8002952:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002956:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002958:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <FLASH_Program_DoubleWord+0x60>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	4a0d      	ldr	r2, [pc, #52]	@ (8002994 <FLASH_Program_DoubleWord+0x60>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800296a:	f3bf 8f6f 	isb	sy
}
 800296e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002970:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	000a      	movs	r2, r1
 800297e:	2300      	movs	r3, #0
 8002980:	68f9      	ldr	r1, [r7, #12]
 8002982:	3104      	adds	r1, #4
 8002984:	4613      	mov	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40023c00 	.word	0x40023c00

08002998 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029a2:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <FLASH_Program_Word+0x40>)
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	4a0c      	ldr	r2, [pc, #48]	@ (80029d8 <FLASH_Program_Word+0x40>)
 80029a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80029ae:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <FLASH_Program_Word+0x40>)
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <FLASH_Program_Word+0x40>)
 80029b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029ba:	4b07      	ldr	r3, [pc, #28]	@ (80029d8 <FLASH_Program_Word+0x40>)
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	4a06      	ldr	r2, [pc, #24]	@ (80029d8 <FLASH_Program_Word+0x40>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	601a      	str	r2, [r3, #0]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	40023c00 	.word	0x40023c00

080029dc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <FLASH_Program_HalfWord+0x44>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002a20 <FLASH_Program_HalfWord+0x44>)
 80029ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <FLASH_Program_HalfWord+0x44>)
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	4a09      	ldr	r2, [pc, #36]	@ (8002a20 <FLASH_Program_HalfWord+0x44>)
 80029fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a00:	4b07      	ldr	r3, [pc, #28]	@ (8002a20 <FLASH_Program_HalfWord+0x44>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	4a06      	ldr	r2, [pc, #24]	@ (8002a20 <FLASH_Program_HalfWord+0x44>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	887a      	ldrh	r2, [r7, #2]
 8002a10:	801a      	strh	r2, [r3, #0]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40023c00 	.word	0x40023c00

08002a24 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a30:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <FLASH_Program_Byte+0x40>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	4a0b      	ldr	r2, [pc, #44]	@ (8002a64 <FLASH_Program_Byte+0x40>)
 8002a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	@ (8002a64 <FLASH_Program_Byte+0x40>)
 8002a3e:	4a09      	ldr	r2, [pc, #36]	@ (8002a64 <FLASH_Program_Byte+0x40>)
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a44:	4b07      	ldr	r3, [pc, #28]	@ (8002a64 <FLASH_Program_Byte+0x40>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	4a06      	ldr	r2, [pc, #24]	@ (8002a64 <FLASH_Program_Byte+0x40>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	701a      	strb	r2, [r3, #0]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023c00 	.word	0x40023c00

08002a68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002a6c:	4b27      	ldr	r3, [pc, #156]	@ (8002b0c <FLASH_SetErrorCode+0xa4>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a78:	4b25      	ldr	r3, [pc, #148]	@ (8002b10 <FLASH_SetErrorCode+0xa8>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f043 0310 	orr.w	r3, r3, #16
 8002a80:	4a23      	ldr	r2, [pc, #140]	@ (8002b10 <FLASH_SetErrorCode+0xa8>)
 8002a82:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002a84:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <FLASH_SetErrorCode+0xa4>)
 8002a86:	2210      	movs	r2, #16
 8002a88:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002a8a:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <FLASH_SetErrorCode+0xa4>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002a96:	4b1e      	ldr	r3, [pc, #120]	@ (8002b10 <FLASH_SetErrorCode+0xa8>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f043 0308 	orr.w	r3, r3, #8
 8002a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002b10 <FLASH_SetErrorCode+0xa8>)
 8002aa0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <FLASH_SetErrorCode+0xa4>)
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002aa8:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <FLASH_SetErrorCode+0xa4>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002ab4:	4b16      	ldr	r3, [pc, #88]	@ (8002b10 <FLASH_SetErrorCode+0xa8>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	4a14      	ldr	r2, [pc, #80]	@ (8002b10 <FLASH_SetErrorCode+0xa8>)
 8002abe:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002ac0:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <FLASH_SetErrorCode+0xa4>)
 8002ac2:	2240      	movs	r2, #64	@ 0x40
 8002ac4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002ac6:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <FLASH_SetErrorCode+0xa4>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d008      	beq.n	8002ae4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b10 <FLASH_SetErrorCode+0xa8>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	4a0d      	ldr	r2, [pc, #52]	@ (8002b10 <FLASH_SetErrorCode+0xa8>)
 8002adc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002ade:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <FLASH_SetErrorCode+0xa4>)
 8002ae0:	2280      	movs	r2, #128	@ 0x80
 8002ae2:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002ae4:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <FLASH_SetErrorCode+0xa4>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002af0:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <FLASH_SetErrorCode+0xa8>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	f043 0320 	orr.w	r3, r3, #32
 8002af8:	4a05      	ldr	r2, [pc, #20]	@ (8002b10 <FLASH_SetErrorCode+0xa8>)
 8002afa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002afc:	4b03      	ldr	r3, [pc, #12]	@ (8002b0c <FLASH_SetErrorCode+0xa4>)
 8002afe:	2202      	movs	r2, #2
 8002b00:	60da      	str	r2, [r3, #12]
  }
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40023c00 	.word	0x40023c00
 8002b10:	20000570 	.word	0x20000570

08002b14 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b26:	4b31      	ldr	r3, [pc, #196]	@ (8002bec <HAL_FLASHEx_Erase+0xd8>)
 8002b28:	7e1b      	ldrb	r3, [r3, #24]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_FLASHEx_Erase+0x1e>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e058      	b.n	8002be4 <HAL_FLASHEx_Erase+0xd0>
 8002b32:	4b2e      	ldr	r3, [pc, #184]	@ (8002bec <HAL_FLASHEx_Erase+0xd8>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b38:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b3c:	f7ff feba 	bl	80028b4 <FLASH_WaitForLastOperation>
 8002b40:	4603      	mov	r3, r0
 8002b42:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d148      	bne.n	8002bdc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b50:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d115      	bne.n	8002b86 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4619      	mov	r1, r3
 8002b66:	4610      	mov	r0, r2
 8002b68:	f000 f844 	bl	8002bf4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b6c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b70:	f7ff fea0 	bl	80028b4 <FLASH_WaitForLastOperation>
 8002b74:	4603      	mov	r3, r0
 8002b76:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002b78:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <HAL_FLASHEx_Erase+0xdc>)
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf0 <HAL_FLASHEx_Erase+0xdc>)
 8002b7e:	f023 0304 	bic.w	r3, r3, #4
 8002b82:	6113      	str	r3, [r2, #16]
 8002b84:	e028      	b.n	8002bd8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	e01c      	b.n	8002bc8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	68b8      	ldr	r0, [r7, #8]
 8002b98:	f000 f850 	bl	8002c3c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b9c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ba0:	f7ff fe88 	bl	80028b4 <FLASH_WaitForLastOperation>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002ba8:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <HAL_FLASHEx_Erase+0xdc>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	4a10      	ldr	r2, [pc, #64]	@ (8002bf0 <HAL_FLASHEx_Erase+0xdc>)
 8002bae:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002bb2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	601a      	str	r2, [r3, #0]
          break;
 8002bc0:	e00a      	b.n	8002bd8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d3da      	bcc.n	8002b8e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002bd8:	f000 f878 	bl	8002ccc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002bdc:	4b03      	ldr	r3, [pc, #12]	@ (8002bec <HAL_FLASHEx_Erase+0xd8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	761a      	strb	r2, [r3, #24]

  return status;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000570 	.word	0x20000570
 8002bf0:	40023c00 	.word	0x40023c00

08002bf4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c00:	4b0d      	ldr	r3, [pc, #52]	@ (8002c38 <FLASH_MassErase+0x44>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	4a0c      	ldr	r2, [pc, #48]	@ (8002c38 <FLASH_MassErase+0x44>)
 8002c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <FLASH_MassErase+0x44>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	4a09      	ldr	r2, [pc, #36]	@ (8002c38 <FLASH_MassErase+0x44>)
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002c18:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <FLASH_MassErase+0x44>)
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	4313      	orrs	r3, r2
 8002c22:	4a05      	ldr	r2, [pc, #20]	@ (8002c38 <FLASH_MassErase+0x44>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c28:	6113      	str	r3, [r2, #16]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023c00 	.word	0x40023c00

08002c3c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e010      	b.n	8002c7a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d103      	bne.n	8002c66 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002c5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e009      	b.n	8002c7a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d103      	bne.n	8002c74 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e002      	b.n	8002c7a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002c74:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c7a:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <FLASH_Erase_Sector+0x8c>)
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	4a12      	ldr	r2, [pc, #72]	@ (8002cc8 <FLASH_Erase_Sector+0x8c>)
 8002c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002c86:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <FLASH_Erase_Sector+0x8c>)
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	490f      	ldr	r1, [pc, #60]	@ (8002cc8 <FLASH_Erase_Sector+0x8c>)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002c92:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <FLASH_Erase_Sector+0x8c>)
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc8 <FLASH_Erase_Sector+0x8c>)
 8002c98:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002c9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <FLASH_Erase_Sector+0x8c>)
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	4a07      	ldr	r2, [pc, #28]	@ (8002cc8 <FLASH_Erase_Sector+0x8c>)
 8002caa:	f043 0302 	orr.w	r3, r3, #2
 8002cae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002cb0:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <FLASH_Erase_Sector+0x8c>)
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	4a04      	ldr	r2, [pc, #16]	@ (8002cc8 <FLASH_Erase_Sector+0x8c>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cba:	6113      	str	r3, [r2, #16]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40023c00 	.word	0x40023c00

08002ccc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002cd0:	4b20      	ldr	r3, [pc, #128]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d017      	beq.n	8002d0c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002ce2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ce6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a19      	ldr	r2, [pc, #100]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002cee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a16      	ldr	r2, [pc, #88]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002cfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cfe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d00:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a13      	ldr	r2, [pc, #76]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d0a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d017      	beq.n	8002d48 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002d18:	4b0e      	ldr	r3, [pc, #56]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002d1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d22:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0a      	ldr	r2, [pc, #40]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002d2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a07      	ldr	r2, [pc, #28]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002d36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d3a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d3c:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a04      	ldr	r2, [pc, #16]	@ (8002d54 <FLASH_FlushCaches+0x88>)
 8002d42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d46:	6013      	str	r3, [r2, #0]
  }
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40023c00 	.word	0x40023c00

08002d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	@ 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	e16b      	b.n	800304c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d74:	2201      	movs	r2, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	f040 815a 	bne.w	8003046 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d005      	beq.n	8002daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d130      	bne.n	8002e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	2203      	movs	r2, #3
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002de0:	2201      	movs	r2, #1
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f003 0201 	and.w	r2, r3, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d017      	beq.n	8002e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d123      	bne.n	8002e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	08da      	lsrs	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3208      	adds	r2, #8
 8002e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	220f      	movs	r2, #15
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	08da      	lsrs	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3208      	adds	r2, #8
 8002e96:	69b9      	ldr	r1, [r7, #24]
 8002e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0203 	and.w	r2, r3, #3
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80b4 	beq.w	8003046 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	4b60      	ldr	r3, [pc, #384]	@ (8003064 <HAL_GPIO_Init+0x30c>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	4a5f      	ldr	r2, [pc, #380]	@ (8003064 <HAL_GPIO_Init+0x30c>)
 8002ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eee:	4b5d      	ldr	r3, [pc, #372]	@ (8003064 <HAL_GPIO_Init+0x30c>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002efa:	4a5b      	ldr	r2, [pc, #364]	@ (8003068 <HAL_GPIO_Init+0x310>)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	3302      	adds	r3, #2
 8002f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	220f      	movs	r2, #15
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a52      	ldr	r2, [pc, #328]	@ (800306c <HAL_GPIO_Init+0x314>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d02b      	beq.n	8002f7e <HAL_GPIO_Init+0x226>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a51      	ldr	r2, [pc, #324]	@ (8003070 <HAL_GPIO_Init+0x318>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d025      	beq.n	8002f7a <HAL_GPIO_Init+0x222>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a50      	ldr	r2, [pc, #320]	@ (8003074 <HAL_GPIO_Init+0x31c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01f      	beq.n	8002f76 <HAL_GPIO_Init+0x21e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4f      	ldr	r2, [pc, #316]	@ (8003078 <HAL_GPIO_Init+0x320>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d019      	beq.n	8002f72 <HAL_GPIO_Init+0x21a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4e      	ldr	r2, [pc, #312]	@ (800307c <HAL_GPIO_Init+0x324>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <HAL_GPIO_Init+0x216>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4d      	ldr	r2, [pc, #308]	@ (8003080 <HAL_GPIO_Init+0x328>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00d      	beq.n	8002f6a <HAL_GPIO_Init+0x212>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4c      	ldr	r2, [pc, #304]	@ (8003084 <HAL_GPIO_Init+0x32c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <HAL_GPIO_Init+0x20e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4b      	ldr	r2, [pc, #300]	@ (8003088 <HAL_GPIO_Init+0x330>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_GPIO_Init+0x20a>
 8002f5e:	2307      	movs	r3, #7
 8002f60:	e00e      	b.n	8002f80 <HAL_GPIO_Init+0x228>
 8002f62:	2308      	movs	r3, #8
 8002f64:	e00c      	b.n	8002f80 <HAL_GPIO_Init+0x228>
 8002f66:	2306      	movs	r3, #6
 8002f68:	e00a      	b.n	8002f80 <HAL_GPIO_Init+0x228>
 8002f6a:	2305      	movs	r3, #5
 8002f6c:	e008      	b.n	8002f80 <HAL_GPIO_Init+0x228>
 8002f6e:	2304      	movs	r3, #4
 8002f70:	e006      	b.n	8002f80 <HAL_GPIO_Init+0x228>
 8002f72:	2303      	movs	r3, #3
 8002f74:	e004      	b.n	8002f80 <HAL_GPIO_Init+0x228>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e002      	b.n	8002f80 <HAL_GPIO_Init+0x228>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <HAL_GPIO_Init+0x228>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	f002 0203 	and.w	r2, r2, #3
 8002f86:	0092      	lsls	r2, r2, #2
 8002f88:	4093      	lsls	r3, r2
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f90:	4935      	ldr	r1, [pc, #212]	@ (8003068 <HAL_GPIO_Init+0x310>)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	089b      	lsrs	r3, r3, #2
 8002f96:	3302      	adds	r3, #2
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800308c <HAL_GPIO_Init+0x334>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fc2:	4a32      	ldr	r2, [pc, #200]	@ (800308c <HAL_GPIO_Init+0x334>)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc8:	4b30      	ldr	r3, [pc, #192]	@ (800308c <HAL_GPIO_Init+0x334>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fec:	4a27      	ldr	r2, [pc, #156]	@ (800308c <HAL_GPIO_Init+0x334>)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ff2:	4b26      	ldr	r3, [pc, #152]	@ (800308c <HAL_GPIO_Init+0x334>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003016:	4a1d      	ldr	r2, [pc, #116]	@ (800308c <HAL_GPIO_Init+0x334>)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800301c:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <HAL_GPIO_Init+0x334>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003040:	4a12      	ldr	r2, [pc, #72]	@ (800308c <HAL_GPIO_Init+0x334>)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3301      	adds	r3, #1
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	2b0f      	cmp	r3, #15
 8003050:	f67f ae90 	bls.w	8002d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003054:	bf00      	nop
 8003056:	bf00      	nop
 8003058:	3724      	adds	r7, #36	@ 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	40013800 	.word	0x40013800
 800306c:	40020000 	.word	0x40020000
 8003070:	40020400 	.word	0x40020400
 8003074:	40020800 	.word	0x40020800
 8003078:	40020c00 	.word	0x40020c00
 800307c:	40021000 	.word	0x40021000
 8003080:	40021400 	.word	0x40021400
 8003084:	40021800 	.word	0x40021800
 8003088:	40021c00 	.word	0x40021c00
 800308c:	40013c00 	.word	0x40013c00

08003090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	807b      	strh	r3, [r7, #2]
 800309c:	4613      	mov	r3, r2
 800309e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a0:	787b      	ldrb	r3, [r7, #1]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030ac:	e003      	b.n	80030b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	041a      	lsls	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	619a      	str	r2, [r3, #24]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e267      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d075      	beq.n	80031ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030e2:	4b88      	ldr	r3, [pc, #544]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d00c      	beq.n	8003108 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ee:	4b85      	ldr	r3, [pc, #532]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d112      	bne.n	8003120 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fa:	4b82      	ldr	r3, [pc, #520]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003106:	d10b      	bne.n	8003120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	4b7e      	ldr	r3, [pc, #504]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d05b      	beq.n	80031cc <HAL_RCC_OscConfig+0x108>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d157      	bne.n	80031cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e242      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003128:	d106      	bne.n	8003138 <HAL_RCC_OscConfig+0x74>
 800312a:	4b76      	ldr	r3, [pc, #472]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a75      	ldr	r2, [pc, #468]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e01d      	b.n	8003174 <HAL_RCC_OscConfig+0xb0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0x98>
 8003142:	4b70      	ldr	r3, [pc, #448]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6f      	ldr	r2, [pc, #444]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b6d      	ldr	r3, [pc, #436]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6c      	ldr	r2, [pc, #432]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e00b      	b.n	8003174 <HAL_RCC_OscConfig+0xb0>
 800315c:	4b69      	ldr	r3, [pc, #420]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a68      	ldr	r2, [pc, #416]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4b66      	ldr	r3, [pc, #408]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a65      	ldr	r2, [pc, #404]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 800316e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe fdb6 	bl	8001cec <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003184:	f7fe fdb2 	bl	8001cec <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	@ 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e207      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b5b      	ldr	r3, [pc, #364]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0xc0>
 80031a2:	e014      	b.n	80031ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe fda2 	bl	8001cec <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ac:	f7fe fd9e 	bl	8001cec <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	@ 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e1f3      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	4b51      	ldr	r3, [pc, #324]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0xe8>
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d063      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031da:	4b4a      	ldr	r3, [pc, #296]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e6:	4b47      	ldr	r3, [pc, #284]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d11c      	bne.n	800322c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f2:	4b44      	ldr	r3, [pc, #272]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d116      	bne.n	800322c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	4b41      	ldr	r3, [pc, #260]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <HAL_RCC_OscConfig+0x152>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e1c7      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003216:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4937      	ldr	r1, [pc, #220]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	e03a      	b.n	80032a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003234:	4b34      	ldr	r3, [pc, #208]	@ (8003308 <HAL_RCC_OscConfig+0x244>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7fe fd57 	bl	8001cec <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003242:	f7fe fd53 	bl	8001cec <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e1a8      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003254:	4b2b      	ldr	r3, [pc, #172]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003260:	4b28      	ldr	r3, [pc, #160]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4925      	ldr	r1, [pc, #148]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]
 8003274:	e015      	b.n	80032a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003276:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <HAL_RCC_OscConfig+0x244>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe fd36 	bl	8001cec <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003284:	f7fe fd32 	bl	8001cec <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e187      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	4b1b      	ldr	r3, [pc, #108]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d036      	beq.n	800331c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <HAL_RCC_OscConfig+0x248>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fe fd16 	bl	8001cec <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c4:	f7fe fd12 	bl	8001cec <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e167      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <HAL_RCC_OscConfig+0x240>)
 80032d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x200>
 80032e2:	e01b      	b.n	800331c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e4:	4b09      	ldr	r3, [pc, #36]	@ (800330c <HAL_RCC_OscConfig+0x248>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ea:	f7fe fcff 	bl	8001cec <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	e00e      	b.n	8003310 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f2:	f7fe fcfb 	bl	8001cec <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d907      	bls.n	8003310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e150      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
 8003304:	40023800 	.word	0x40023800
 8003308:	42470000 	.word	0x42470000
 800330c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003310:	4b88      	ldr	r3, [pc, #544]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1ea      	bne.n	80032f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8097 	beq.w	8003458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332e:	4b81      	ldr	r3, [pc, #516]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	4b7d      	ldr	r3, [pc, #500]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	4a7c      	ldr	r2, [pc, #496]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003348:	6413      	str	r3, [r2, #64]	@ 0x40
 800334a:	4b7a      	ldr	r3, [pc, #488]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	4b77      	ldr	r3, [pc, #476]	@ (8003538 <HAL_RCC_OscConfig+0x474>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d118      	bne.n	8003398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003366:	4b74      	ldr	r3, [pc, #464]	@ (8003538 <HAL_RCC_OscConfig+0x474>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a73      	ldr	r2, [pc, #460]	@ (8003538 <HAL_RCC_OscConfig+0x474>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fe fcbb 	bl	8001cec <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337a:	f7fe fcb7 	bl	8001cec <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e10c      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	4b6a      	ldr	r3, [pc, #424]	@ (8003538 <HAL_RCC_OscConfig+0x474>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x2ea>
 80033a0:	4b64      	ldr	r3, [pc, #400]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	4a63      	ldr	r2, [pc, #396]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ac:	e01c      	b.n	80033e8 <HAL_RCC_OscConfig+0x324>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x30c>
 80033b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ce:	e00b      	b.n	80033e8 <HAL_RCC_OscConfig+0x324>
 80033d0:	4b58      	ldr	r3, [pc, #352]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d4:	4a57      	ldr	r2, [pc, #348]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	6713      	str	r3, [r2, #112]	@ 0x70
 80033dc:	4b55      	ldr	r3, [pc, #340]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e0:	4a54      	ldr	r2, [pc, #336]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80033e2:	f023 0304 	bic.w	r3, r3, #4
 80033e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d015      	beq.n	800341c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f0:	f7fe fc7c 	bl	8001cec <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f6:	e00a      	b.n	800340e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fe fc78 	bl	8001cec <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e0cb      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	4b49      	ldr	r3, [pc, #292]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ee      	beq.n	80033f8 <HAL_RCC_OscConfig+0x334>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341c:	f7fe fc66 	bl	8001cec <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003422:	e00a      	b.n	800343a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003424:	f7fe fc62 	bl	8001cec <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0b5      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343a:	4b3e      	ldr	r3, [pc, #248]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1ee      	bne.n	8003424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003446:	7dfb      	ldrb	r3, [r7, #23]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344c:	4b39      	ldr	r3, [pc, #228]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	4a38      	ldr	r2, [pc, #224]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003456:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80a1 	beq.w	80035a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003462:	4b34      	ldr	r3, [pc, #208]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b08      	cmp	r3, #8
 800346c:	d05c      	beq.n	8003528 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d141      	bne.n	80034fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b31      	ldr	r3, [pc, #196]	@ (800353c <HAL_RCC_OscConfig+0x478>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe fc36 	bl	8001cec <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7fe fc32 	bl	8001cec <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e087      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	4b27      	ldr	r3, [pc, #156]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	3b01      	subs	r3, #1
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	061b      	lsls	r3, r3, #24
 80034c6:	491b      	ldr	r1, [pc, #108]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034cc:	4b1b      	ldr	r3, [pc, #108]	@ (800353c <HAL_RCC_OscConfig+0x478>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fe fc0b 	bl	8001cec <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034da:	f7fe fc07 	bl	8001cec <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e05c      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ec:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x416>
 80034f8:	e054      	b.n	80035a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b10      	ldr	r3, [pc, #64]	@ (800353c <HAL_RCC_OscConfig+0x478>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe fbf4 	bl	8001cec <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe fbf0 	bl	8001cec <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e045      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <HAL_RCC_OscConfig+0x470>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x444>
 8003526:	e03d      	b.n	80035a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d107      	bne.n	8003540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e038      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
 8003534:	40023800 	.word	0x40023800
 8003538:	40007000 	.word	0x40007000
 800353c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003540:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <HAL_RCC_OscConfig+0x4ec>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d028      	beq.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d121      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d11a      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003578:	4293      	cmp	r3, r2
 800357a:	d111      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	3b01      	subs	r3, #1
 800358a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0cc      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b68      	ldr	r3, [pc, #416]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d90c      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b65      	ldr	r3, [pc, #404]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b63      	ldr	r3, [pc, #396]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0b8      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003608:	4b59      	ldr	r3, [pc, #356]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a58      	ldr	r2, [pc, #352]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003620:	4b53      	ldr	r3, [pc, #332]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a52      	ldr	r2, [pc, #328]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800362a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b50      	ldr	r3, [pc, #320]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	494d      	ldr	r1, [pc, #308]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d044      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b47      	ldr	r3, [pc, #284]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d119      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e07f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d003      	beq.n	8003672 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366e:	2b03      	cmp	r3, #3
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003672:	4b3f      	ldr	r3, [pc, #252]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003682:	4b3b      	ldr	r3, [pc, #236]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e067      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003692:	4b37      	ldr	r3, [pc, #220]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 0203 	bic.w	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4934      	ldr	r1, [pc, #208]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a4:	f7fe fb22 	bl	8001cec <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7fe fb1e 	bl	8001cec <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e04f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 020c 	and.w	r2, r3, #12
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1eb      	bne.n	80036ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d4:	4b25      	ldr	r3, [pc, #148]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d20c      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b22      	ldr	r3, [pc, #136]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b20      	ldr	r3, [pc, #128]	@ (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e032      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4916      	ldr	r1, [pc, #88]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003726:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	490e      	ldr	r1, [pc, #56]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373a:	f000 f821 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	490a      	ldr	r1, [pc, #40]	@ (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a09      	ldr	r2, [pc, #36]	@ (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003756:	4b09      	ldr	r3, [pc, #36]	@ (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe fa82 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023c00 	.word	0x40023c00
 8003770:	40023800 	.word	0x40023800
 8003774:	08011cbc 	.word	0x08011cbc
 8003778:	20000000 	.word	0x20000000
 800377c:	20000004 	.word	0x20000004

08003780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003784:	b090      	sub	sp, #64	@ 0x40
 8003786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003798:	4b59      	ldr	r3, [pc, #356]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d00d      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x40>
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	f200 80a1 	bhi.w	80038ec <HAL_RCC_GetSysClockFreq+0x16c>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x34>
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x3a>
 80037b2:	e09b      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4b53      	ldr	r3, [pc, #332]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x184>)
 80037b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037b8:	e09b      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ba:	4b53      	ldr	r3, [pc, #332]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x188>)
 80037bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037be:	e098      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d028      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	099b      	lsrs	r3, r3, #6
 80037dc:	2200      	movs	r2, #0
 80037de:	623b      	str	r3, [r7, #32]
 80037e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037e8:	2100      	movs	r1, #0
 80037ea:	4b47      	ldr	r3, [pc, #284]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ec:	fb03 f201 	mul.w	r2, r3, r1
 80037f0:	2300      	movs	r3, #0
 80037f2:	fb00 f303 	mul.w	r3, r0, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	4a43      	ldr	r2, [pc, #268]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x188>)
 80037fa:	fba0 1202 	umull	r1, r2, r0, r2
 80037fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003800:	460a      	mov	r2, r1
 8003802:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003806:	4413      	add	r3, r2
 8003808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380c:	2200      	movs	r2, #0
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	61fa      	str	r2, [r7, #28]
 8003812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003816:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800381a:	f7fd f967 	bl	8000aec <__aeabi_uldivmod>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4613      	mov	r3, r2
 8003824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003826:	e053      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003828:	4b35      	ldr	r3, [pc, #212]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	099b      	lsrs	r3, r3, #6
 800382e:	2200      	movs	r2, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	617a      	str	r2, [r7, #20]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800383a:	f04f 0b00 	mov.w	fp, #0
 800383e:	4652      	mov	r2, sl
 8003840:	465b      	mov	r3, fp
 8003842:	f04f 0000 	mov.w	r0, #0
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	0159      	lsls	r1, r3, #5
 800384c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003850:	0150      	lsls	r0, r2, #5
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	ebb2 080a 	subs.w	r8, r2, sl
 800385a:	eb63 090b 	sbc.w	r9, r3, fp
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800386a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800386e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003872:	ebb2 0408 	subs.w	r4, r2, r8
 8003876:	eb63 0509 	sbc.w	r5, r3, r9
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	00eb      	lsls	r3, r5, #3
 8003884:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003888:	00e2      	lsls	r2, r4, #3
 800388a:	4614      	mov	r4, r2
 800388c:	461d      	mov	r5, r3
 800388e:	eb14 030a 	adds.w	r3, r4, sl
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	eb45 030b 	adc.w	r3, r5, fp
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038a6:	4629      	mov	r1, r5
 80038a8:	028b      	lsls	r3, r1, #10
 80038aa:	4621      	mov	r1, r4
 80038ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038b0:	4621      	mov	r1, r4
 80038b2:	028a      	lsls	r2, r1, #10
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ba:	2200      	movs	r2, #0
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	60fa      	str	r2, [r7, #12]
 80038c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038c4:	f7fd f912 	bl	8000aec <__aeabi_uldivmod>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4613      	mov	r3, r2
 80038ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x180>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	3301      	adds	r3, #1
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80038e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4b05      	ldr	r3, [pc, #20]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x184>)
 80038ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3740      	adds	r7, #64	@ 0x40
 80038f8:	46bd      	mov	sp, r7
 80038fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	00f42400 	.word	0x00f42400
 8003908:	017d7840 	.word	0x017d7840

0800390c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003910:	4b03      	ldr	r3, [pc, #12]	@ (8003920 <HAL_RCC_GetHCLKFreq+0x14>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000000 	.word	0x20000000

08003924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003928:	f7ff fff0 	bl	800390c <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	0a9b      	lsrs	r3, r3, #10
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4903      	ldr	r1, [pc, #12]	@ (8003948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	08011ccc 	.word	0x08011ccc

0800394c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003950:	f7ff ffdc 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	@ (800396c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	0b5b      	lsrs	r3, r3, #13
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4903      	ldr	r1, [pc, #12]	@ (8003970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	08011ccc 	.word	0x08011ccc

08003974 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07b      	b.n	8003a7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	2b00      	cmp	r3, #0
 800398c:	d108      	bne.n	80039a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003996:	d009      	beq.n	80039ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	61da      	str	r2, [r3, #28]
 800399e:	e005      	b.n	80039ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fc9e 	bl	8001308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a30:	ea42 0103 	orr.w	r1, r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	f003 0104 	and.w	r1, r3, #4
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	f003 0210 	and.w	r2, r3, #16
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b088      	sub	sp, #32
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a96:	f7fe f929 	bl	8001cec <HAL_GetTick>
 8003a9a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d001      	beq.n	8003ab0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
 8003aae:	e12a      	b.n	8003d06 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_SPI_Transmit+0x36>
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e122      	b.n	8003d06 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_SPI_Transmit+0x48>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e11b      	b.n	8003d06 <HAL_SPI_Transmit+0x280>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2203      	movs	r2, #3
 8003ada:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	88fa      	ldrh	r2, [r7, #6]
 8003aee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	88fa      	ldrh	r2, [r7, #6]
 8003af4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b1c:	d10f      	bne.n	8003b3e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b48:	2b40      	cmp	r3, #64	@ 0x40
 8003b4a:	d007      	beq.n	8003b5c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b64:	d152      	bne.n	8003c0c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_SPI_Transmit+0xee>
 8003b6e:	8b7b      	ldrh	r3, [r7, #26]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d145      	bne.n	8003c00 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b78:	881a      	ldrh	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	1c9a      	adds	r2, r3, #2
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b98:	e032      	b.n	8003c00 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d112      	bne.n	8003bce <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bac:	881a      	ldrh	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb8:	1c9a      	adds	r2, r3, #2
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003bcc:	e018      	b.n	8003c00 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bce:	f7fe f88d 	bl	8001cec <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d803      	bhi.n	8003be6 <HAL_SPI_Transmit+0x160>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d102      	bne.n	8003bec <HAL_SPI_Transmit+0x166>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e082      	b.n	8003d06 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1c7      	bne.n	8003b9a <HAL_SPI_Transmit+0x114>
 8003c0a:	e053      	b.n	8003cb4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_SPI_Transmit+0x194>
 8003c14:	8b7b      	ldrh	r3, [r7, #26]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d147      	bne.n	8003caa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c40:	e033      	b.n	8003caa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d113      	bne.n	8003c78 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c76:	e018      	b.n	8003caa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c78:	f7fe f838 	bl	8001cec <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d803      	bhi.n	8003c90 <HAL_SPI_Transmit+0x20a>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8e:	d102      	bne.n	8003c96 <HAL_SPI_Transmit+0x210>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e02d      	b.n	8003d06 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1c6      	bne.n	8003c42 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	6839      	ldr	r1, [r7, #0]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f001 f8df 	bl	8004e7c <SPI_EndRxTxTransaction>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b088      	sub	sp, #32
 8003d12:	af02      	add	r7, sp, #8
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e104      	b.n	8003f38 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d36:	d112      	bne.n	8003d5e <HAL_SPI_Receive+0x50>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10e      	bne.n	8003d5e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2204      	movs	r2, #4
 8003d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f8f3 	bl	8003f40 <HAL_SPI_TransmitReceive>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	e0ec      	b.n	8003f38 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d5e:	f7fd ffc5 	bl	8001cec <HAL_GetTick>
 8003d62:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_SPI_Receive+0x62>
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0e1      	b.n	8003f38 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_SPI_Receive+0x74>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e0da      	b.n	8003f38 <HAL_SPI_Receive+0x22a>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	88fa      	ldrh	r2, [r7, #6]
 8003da2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	88fa      	ldrh	r2, [r7, #6]
 8003da8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd0:	d10f      	bne.n	8003df2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003de0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003df0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfc:	2b40      	cmp	r3, #64	@ 0x40
 8003dfe:	d007      	beq.n	8003e10 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d170      	bne.n	8003efa <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e18:	e035      	b.n	8003e86 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d115      	bne.n	8003e54 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f103 020c 	add.w	r2, r3, #12
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e34:	7812      	ldrb	r2, [r2, #0]
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e52:	e018      	b.n	8003e86 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e54:	f7fd ff4a 	bl	8001cec <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d803      	bhi.n	8003e6c <HAL_SPI_Receive+0x15e>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	d102      	bne.n	8003e72 <HAL_SPI_Receive+0x164>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e058      	b.n	8003f38 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1c4      	bne.n	8003e1a <HAL_SPI_Receive+0x10c>
 8003e90:	e038      	b.n	8003f04 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d113      	bne.n	8003ec8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eaa:	b292      	uxth	r2, r2
 8003eac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb2:	1c9a      	adds	r2, r3, #2
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ec6:	e018      	b.n	8003efa <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec8:	f7fd ff10 	bl	8001cec <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d803      	bhi.n	8003ee0 <HAL_SPI_Receive+0x1d2>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d102      	bne.n	8003ee6 <HAL_SPI_Receive+0x1d8>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e01e      	b.n	8003f38 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1c6      	bne.n	8003e92 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	6839      	ldr	r1, [r7, #0]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 ff51 	bl	8004db0 <SPI_EndRxTransaction>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003f36:	2300      	movs	r3, #0
  }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f52:	f7fd fecb 	bl	8001cec <HAL_GetTick>
 8003f56:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f5e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003f66:	887b      	ldrh	r3, [r7, #2]
 8003f68:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f6a:	7ffb      	ldrb	r3, [r7, #31]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d00c      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0x4a>
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f76:	d106      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x46>
 8003f80:	7ffb      	ldrb	r3, [r7, #31]
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d001      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003f86:	2302      	movs	r3, #2
 8003f88:	e17f      	b.n	800428a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x5c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x5c>
 8003f96:	887b      	ldrh	r3, [r7, #2]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e174      	b.n	800428a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_SPI_TransmitReceive+0x6e>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e16d      	b.n	800428a <HAL_SPI_TransmitReceive+0x34a>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d003      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2205      	movs	r2, #5
 8003fc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	887a      	ldrh	r2, [r7, #2]
 8003fda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	887a      	ldrh	r2, [r7, #2]
 8003ff2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400a:	2b40      	cmp	r3, #64	@ 0x40
 800400c:	d007      	beq.n	800401e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004026:	d17e      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_SPI_TransmitReceive+0xf6>
 8004030:	8afb      	ldrh	r3, [r7, #22]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d16c      	bne.n	8004110 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	881a      	ldrh	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004046:	1c9a      	adds	r2, r3, #2
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800405a:	e059      	b.n	8004110 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d11b      	bne.n	80040a2 <HAL_SPI_TransmitReceive+0x162>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d016      	beq.n	80040a2 <HAL_SPI_TransmitReceive+0x162>
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	2b01      	cmp	r3, #1
 8004078:	d113      	bne.n	80040a2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407e:	881a      	ldrh	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	1c9a      	adds	r2, r3, #2
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d119      	bne.n	80040e4 <HAL_SPI_TransmitReceive+0x1a4>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d014      	beq.n	80040e4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c4:	b292      	uxth	r2, r2
 80040c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040cc:	1c9a      	adds	r2, r3, #2
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040e0:	2301      	movs	r3, #1
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040e4:	f7fd fe02 	bl	8001cec <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d80d      	bhi.n	8004110 <HAL_SPI_TransmitReceive+0x1d0>
 80040f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d009      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e0bc      	b.n	800428a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1a0      	bne.n	800405c <HAL_SPI_TransmitReceive+0x11c>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d19b      	bne.n	800405c <HAL_SPI_TransmitReceive+0x11c>
 8004124:	e082      	b.n	800422c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_SPI_TransmitReceive+0x1f4>
 800412e:	8afb      	ldrh	r3, [r7, #22]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d171      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	7812      	ldrb	r2, [r2, #0]
 8004140:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800415a:	e05d      	b.n	8004218 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d11c      	bne.n	80041a4 <HAL_SPI_TransmitReceive+0x264>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d017      	beq.n	80041a4 <HAL_SPI_TransmitReceive+0x264>
 8004174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004176:	2b01      	cmp	r3, #1
 8004178:	d114      	bne.n	80041a4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d119      	bne.n	80041e6 <HAL_SPI_TransmitReceive+0x2a6>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d014      	beq.n	80041e6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041e2:	2301      	movs	r3, #1
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041e6:	f7fd fd81 	bl	8001cec <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d803      	bhi.n	80041fe <HAL_SPI_TransmitReceive+0x2be>
 80041f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d102      	bne.n	8004204 <HAL_SPI_TransmitReceive+0x2c4>
 80041fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e038      	b.n	800428a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d19c      	bne.n	800415c <HAL_SPI_TransmitReceive+0x21c>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d197      	bne.n	800415c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800422c:	6a3a      	ldr	r2, [r7, #32]
 800422e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fe23 	bl	8004e7c <SPI_EndRxTxTransaction>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e01d      	b.n	800428a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004256:	2300      	movs	r3, #0
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004288:	2300      	movs	r3, #0
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3728      	adds	r7, #40	@ 0x28
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	4613      	mov	r3, r2
 80042a0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d001      	beq.n	80042b2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
 80042b0:	e097      	b.n	80043e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_SPI_Transmit_DMA+0x2a>
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e08f      	b.n	80043e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_SPI_Transmit_DMA+0x3c>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e088      	b.n	80043e2 <HAL_SPI_Transmit_DMA+0x14e>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2203      	movs	r2, #3
 80042dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	88fa      	ldrh	r2, [r7, #6]
 80042f6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800431e:	d10f      	bne.n	8004340 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800432e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800433e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004344:	4a29      	ldr	r2, [pc, #164]	@ (80043ec <HAL_SPI_Transmit_DMA+0x158>)
 8004346:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800434c:	4a28      	ldr	r2, [pc, #160]	@ (80043f0 <HAL_SPI_Transmit_DMA+0x15c>)
 800434e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004354:	4a27      	ldr	r2, [pc, #156]	@ (80043f4 <HAL_SPI_Transmit_DMA+0x160>)
 8004356:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435c:	2200      	movs	r2, #0
 800435e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	4619      	mov	r1, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004376:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004378:	f7fd fec2 	bl	8002100 <HAL_DMA_Start_IT>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004386:	f043 0210 	orr.w	r2, r3, #16
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e023      	b.n	80043e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a4:	2b40      	cmp	r3, #64	@ 0x40
 80043a6:	d007      	beq.n	80043b8 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043b6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0220 	orr.w	r2, r2, #32
 80043ce:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0202 	orr.w	r2, r2, #2
 80043de:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	08004be5 	.word	0x08004be5
 80043f0:	08004a05 	.word	0x08004a05
 80043f4:	08004c39 	.word	0x08004c39

080043f8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8004412:	2302      	movs	r3, #2
 8004414:	e0a9      	b.n	800456a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d110      	bne.n	8004440 <HAL_SPI_Receive_DMA+0x48>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004426:	d10b      	bne.n	8004440 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2204      	movs	r2, #4
 800442c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f8a2 	bl	8004580 <HAL_SPI_TransmitReceive_DMA>
 800443c:	4603      	mov	r3, r0
 800443e:	e094      	b.n	800456a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_SPI_Receive_DMA+0x54>
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e08c      	b.n	800456a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_SPI_Receive_DMA+0x66>
 800445a:	2302      	movs	r3, #2
 800445c:	e085      	b.n	800456a <HAL_SPI_Receive_DMA+0x172>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2204      	movs	r2, #4
 800446a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a6:	d10f      	bne.n	80044c8 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044cc:	4a29      	ldr	r2, [pc, #164]	@ (8004574 <HAL_SPI_Receive_DMA+0x17c>)
 80044ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d4:	4a28      	ldr	r2, [pc, #160]	@ (8004578 <HAL_SPI_Receive_DMA+0x180>)
 80044d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044dc:	4a27      	ldr	r2, [pc, #156]	@ (800457c <HAL_SPI_Receive_DMA+0x184>)
 80044de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e4:	2200      	movs	r2, #0
 80044e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	4619      	mov	r1, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004500:	f7fd fdfe 	bl	8002100 <HAL_DMA_Start_IT>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450e:	f043 0210 	orr.w	r2, r3, #16
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e023      	b.n	800456a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452c:	2b40      	cmp	r3, #64	@ 0x40
 800452e:	d007      	beq.n	8004540 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800453e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0220 	orr.w	r2, r2, #32
 8004556:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	08004c01 	.word	0x08004c01
 8004578:	08004aad 	.word	0x08004aad
 800457c:	08004c39 	.word	0x08004c39

08004580 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004594:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800459c:	7dfb      	ldrb	r3, [r7, #23]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d00c      	beq.n	80045bc <HAL_SPI_TransmitReceive_DMA+0x3c>
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045a8:	d106      	bne.n	80045b8 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <HAL_SPI_TransmitReceive_DMA+0x38>
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d001      	beq.n	80045bc <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
 80045ba:	e0cf      	b.n	800475c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_SPI_TransmitReceive_DMA+0x4e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_SPI_TransmitReceive_DMA+0x4e>
 80045c8:	887b      	ldrh	r3, [r7, #2]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e0c4      	b.n	800475c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_SPI_TransmitReceive_DMA+0x60>
 80045dc:	2302      	movs	r3, #2
 80045de:	e0bd      	b.n	800475c <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d003      	beq.n	80045fc <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2205      	movs	r2, #5
 80045f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	887a      	ldrh	r2, [r7, #2]
 800460c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	887a      	ldrh	r2, [r7, #2]
 8004612:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	887a      	ldrh	r2, [r7, #2]
 800461e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b04      	cmp	r3, #4
 800463c:	d108      	bne.n	8004650 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004642:	4a48      	ldr	r2, [pc, #288]	@ (8004764 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8004644:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464a:	4a47      	ldr	r2, [pc, #284]	@ (8004768 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800464c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800464e:	e007      	b.n	8004660 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004654:	4a45      	ldr	r2, [pc, #276]	@ (800476c <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8004656:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465c:	4a44      	ldr	r2, [pc, #272]	@ (8004770 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800465e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004664:	4a43      	ldr	r2, [pc, #268]	@ (8004774 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004666:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466c:	2200      	movs	r2, #0
 800466e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	330c      	adds	r3, #12
 800467a:	4619      	mov	r1, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004680:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004686:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004688:	f7fd fd3a 	bl	8002100 <HAL_DMA_Start_IT>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004696:	f043 0210 	orr.w	r2, r3, #16
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e058      	b.n	800475c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0201 	orr.w	r2, r2, #1
 80046b8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046be:	2200      	movs	r2, #0
 80046c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046c6:	2200      	movs	r2, #0
 80046c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ce:	2200      	movs	r2, #0
 80046d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d6:	2200      	movs	r2, #0
 80046d8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e2:	4619      	mov	r1, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80046f2:	f7fd fd05 	bl	8002100 <HAL_DMA_Start_IT>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00b      	beq.n	8004714 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004700:	f043 0210 	orr.w	r2, r3, #16
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e023      	b.n	800475c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471e:	2b40      	cmp	r3, #64	@ 0x40
 8004720:	d007      	beq.n	8004732 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004730:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0220 	orr.w	r2, r2, #32
 8004748:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0202 	orr.w	r2, r2, #2
 8004758:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	08004c01 	.word	0x08004c01
 8004768:	08004aad 	.word	0x08004aad
 800476c:	08004c1d 	.word	0x08004c1d
 8004770:	08004b55 	.word	0x08004b55
 8004774:	08004c39 	.word	0x08004c39

08004778 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	099b      	lsrs	r3, r3, #6
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10f      	bne.n	80047bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	099b      	lsrs	r3, r3, #6
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d004      	beq.n	80047bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	4798      	blx	r3
    return;
 80047ba:	e0d7      	b.n	800496c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_SPI_IRQHandler+0x66>
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	09db      	lsrs	r3, r3, #7
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d004      	beq.n	80047de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	4798      	blx	r3
    return;
 80047dc:	e0c6      	b.n	800496c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10c      	bne.n	8004804 <HAL_SPI_IRQHandler+0x8c>
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	099b      	lsrs	r3, r3, #6
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80b4 	beq.w	800496c <HAL_SPI_IRQHandler+0x1f4>
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80ad 	beq.w	800496c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	099b      	lsrs	r3, r3, #6
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d023      	beq.n	8004866 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b03      	cmp	r3, #3
 8004828:	d011      	beq.n	800484e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482e:	f043 0204 	orr.w	r2, r3, #4
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	e00b      	b.n	8004866 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	693b      	ldr	r3, [r7, #16]
        return;
 8004864:	e082      	b.n	800496c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d014      	beq.n	800489c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004876:	f043 0201 	orr.w	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00c      	beq.n	80048c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ac:	f043 0208 	orr.w	r2, r3, #8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048b4:	2300      	movs	r3, #0
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d04f      	beq.n	800496a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d104      	bne.n	80048f6 <HAL_SPI_IRQHandler+0x17e>
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d034      	beq.n	8004960 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0203 	bic.w	r2, r2, #3
 8004904:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d011      	beq.n	8004932 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004912:	4a18      	ldr	r2, [pc, #96]	@ (8004974 <HAL_SPI_IRQHandler+0x1fc>)
 8004914:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491a:	4618      	mov	r0, r3
 800491c:	f7fd fcb8 	bl	8002290 <HAL_DMA_Abort_IT>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004936:	2b00      	cmp	r3, #0
 8004938:	d016      	beq.n	8004968 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800493e:	4a0d      	ldr	r2, [pc, #52]	@ (8004974 <HAL_SPI_IRQHandler+0x1fc>)
 8004940:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004946:	4618      	mov	r0, r3
 8004948:	f7fd fca2 	bl	8002290 <HAL_DMA_Abort_IT>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004956:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800495e:	e003      	b.n	8004968 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f845 	bl	80049f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004966:	e000      	b.n	800496a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004968:	bf00      	nop
    return;
 800496a:	bf00      	nop
  }
}
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	08004c79 	.word	0x08004c79

08004978 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a10:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a12:	f7fd f96b 	bl	8001cec <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a26:	d03b      	beq.n	8004aa0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0220 	bic.w	r2, r2, #32
 8004a36:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0202 	bic.w	r2, r2, #2
 8004a46:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	2164      	movs	r1, #100	@ 0x64
 8004a4c:	6978      	ldr	r0, [r7, #20]
 8004a4e:	f000 fa15 	bl	8004e7c <SPI_EndRxTxTransaction>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2200      	movs	r2, #0
 8004a86:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a98:	6978      	ldr	r0, [r7, #20]
 8004a9a:	f7ff ffa9 	bl	80049f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a9e:	e002      	b.n	8004aa6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004aa0:	6978      	ldr	r0, [r7, #20]
 8004aa2:	f7ff ff69 	bl	8004978 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aba:	f7fd f917 	bl	8001cec <HAL_GetTick>
 8004abe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ace:	d03b      	beq.n	8004b48 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0220 	bic.w	r2, r2, #32
 8004ade:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10d      	bne.n	8004b04 <SPI_DMAReceiveCplt+0x58>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004af0:	d108      	bne.n	8004b04 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0203 	bic.w	r2, r2, #3
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	e007      	b.n	8004b14 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	2164      	movs	r1, #100	@ 0x64
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f949 	bl	8004db0 <SPI_EndRxTransaction>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff ff55 	bl	80049f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b46:	e002      	b.n	8004b4e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7ff ff1f 	bl	800498c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b60:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b62:	f7fd f8c3 	bl	8001cec <HAL_GetTick>
 8004b66:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b76:	d02f      	beq.n	8004bd8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0220 	bic.w	r2, r2, #32
 8004b86:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	2164      	movs	r1, #100	@ 0x64
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f975 	bl	8004e7c <SPI_EndRxTxTransaction>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0203 	bic.w	r2, r2, #3
 8004bb2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7ff ff0d 	bl	80049f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004bd6:	e002      	b.n	8004bde <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff fee1 	bl	80049a0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff fede 	bl	80049b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7ff feda 	bl	80049c8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f7ff fed6 	bl	80049dc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0203 	bic.w	r2, r2, #3
 8004c54:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5a:	f043 0210 	orr.w	r2, r3, #16
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff fec0 	bl	80049f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f7ff feac 	bl	80049f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cb0:	f7fd f81c 	bl	8001cec <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cc0:	f7fd f814 	bl	8001cec <HAL_GetTick>
 8004cc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cc6:	4b39      	ldr	r3, [pc, #228]	@ (8004dac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	015b      	lsls	r3, r3, #5
 8004ccc:	0d1b      	lsrs	r3, r3, #20
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	fb02 f303 	mul.w	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cd6:	e054      	b.n	8004d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d050      	beq.n	8004d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ce0:	f7fd f804 	bl	8001cec <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d902      	bls.n	8004cf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d13d      	bne.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d0e:	d111      	bne.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d18:	d004      	beq.n	8004d24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d22:	d107      	bne.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d3c:	d10f      	bne.n	8004d5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e017      	b.n	8004da2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d19b      	bne.n	8004cd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3720      	adds	r7, #32
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000000 	.word	0x20000000

08004db0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dc4:	d111      	bne.n	8004dea <SPI_EndRxTransaction+0x3a>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dce:	d004      	beq.n	8004dda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd8:	d107      	bne.n	8004dea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004de8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004df2:	d12a      	bne.n	8004e4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfc:	d012      	beq.n	8004e24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2180      	movs	r1, #128	@ 0x80
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7ff ff49 	bl	8004ca0 <SPI_WaitFlagStateUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d02d      	beq.n	8004e70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e18:	f043 0220 	orr.w	r2, r3, #32
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e026      	b.n	8004e72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7ff ff36 	bl	8004ca0 <SPI_WaitFlagStateUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01a      	beq.n	8004e70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e013      	b.n	8004e72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2101      	movs	r1, #1
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f7ff ff23 	bl	8004ca0 <SPI_WaitFlagStateUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e000      	b.n	8004e72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	2102      	movs	r1, #2
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff ff04 	bl	8004ca0 <SPI_WaitFlagStateUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea2:	f043 0220 	orr.w	r2, r3, #32
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e032      	b.n	8004f14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004eae:	4b1b      	ldr	r3, [pc, #108]	@ (8004f1c <SPI_EndRxTxTransaction+0xa0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f20 <SPI_EndRxTxTransaction+0xa4>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	0d5b      	lsrs	r3, r3, #21
 8004eba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ecc:	d112      	bne.n	8004ef4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2180      	movs	r1, #128	@ 0x80
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f7ff fee1 	bl	8004ca0 <SPI_WaitFlagStateUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d016      	beq.n	8004f12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e00f      	b.n	8004f14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f0a:	2b80      	cmp	r3, #128	@ 0x80
 8004f0c:	d0f2      	beq.n	8004ef4 <SPI_EndRxTxTransaction+0x78>
 8004f0e:	e000      	b.n	8004f12 <SPI_EndRxTxTransaction+0x96>
        break;
 8004f10:	bf00      	nop
  }

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	165e9f81 	.word	0x165e9f81

08004f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e041      	b.n	8004fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fc fbd8 	bl	8001700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f000 f9c0 	bl	80052e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d001      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e04e      	b.n	800507a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a23      	ldr	r2, [pc, #140]	@ (8005088 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d022      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005006:	d01d      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1f      	ldr	r2, [pc, #124]	@ (800508c <HAL_TIM_Base_Start_IT+0xc8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d018      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1e      	ldr	r2, [pc, #120]	@ (8005090 <HAL_TIM_Base_Start_IT+0xcc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d013      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1c      	ldr	r2, [pc, #112]	@ (8005094 <HAL_TIM_Base_Start_IT+0xd0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00e      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1b      	ldr	r2, [pc, #108]	@ (8005098 <HAL_TIM_Base_Start_IT+0xd4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d009      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a19      	ldr	r2, [pc, #100]	@ (800509c <HAL_TIM_Base_Start_IT+0xd8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a18      	ldr	r2, [pc, #96]	@ (80050a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d111      	bne.n	8005068 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b06      	cmp	r3, #6
 8005054:	d010      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0201 	orr.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005066:	e007      	b.n	8005078 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40010000 	.word	0x40010000
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40010400 	.word	0x40010400
 800509c:	40014000 	.word	0x40014000
 80050a0:	40001800 	.word	0x40001800

080050a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d020      	beq.n	8005108 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01b      	beq.n	8005108 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0202 	mvn.w	r2, #2
 80050d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f8dc 	bl	80052ac <HAL_TIM_IC_CaptureCallback>
 80050f4:	e005      	b.n	8005102 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8ce 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f8df 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d020      	beq.n	8005154 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01b      	beq.n	8005154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0204 	mvn.w	r2, #4
 8005124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f8b6 	bl	80052ac <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f8a8 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f8b9 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d020      	beq.n	80051a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01b      	beq.n	80051a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0208 	mvn.w	r2, #8
 8005170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2204      	movs	r2, #4
 8005176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f890 	bl	80052ac <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f882 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f893 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d020      	beq.n	80051ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01b      	beq.n	80051ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0210 	mvn.w	r2, #16
 80051bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2208      	movs	r2, #8
 80051c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f86a 	bl	80052ac <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f85c 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f86d 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00c      	beq.n	8005210 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0201 	mvn.w	r2, #1
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f83a 	bl	8005284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00c      	beq.n	8005234 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800522c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f910 	bl	8005454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f83e 	bl	80052d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0220 	mvn.w	r2, #32
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8e2 	bl	8005440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a46      	ldr	r2, [pc, #280]	@ (8005414 <TIM_Base_SetConfig+0x12c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d013      	beq.n	8005328 <TIM_Base_SetConfig+0x40>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005306:	d00f      	beq.n	8005328 <TIM_Base_SetConfig+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a43      	ldr	r2, [pc, #268]	@ (8005418 <TIM_Base_SetConfig+0x130>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00b      	beq.n	8005328 <TIM_Base_SetConfig+0x40>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a42      	ldr	r2, [pc, #264]	@ (800541c <TIM_Base_SetConfig+0x134>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_Base_SetConfig+0x40>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a41      	ldr	r2, [pc, #260]	@ (8005420 <TIM_Base_SetConfig+0x138>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_Base_SetConfig+0x40>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a40      	ldr	r2, [pc, #256]	@ (8005424 <TIM_Base_SetConfig+0x13c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d108      	bne.n	800533a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a35      	ldr	r2, [pc, #212]	@ (8005414 <TIM_Base_SetConfig+0x12c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d02b      	beq.n	800539a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005348:	d027      	beq.n	800539a <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a32      	ldr	r2, [pc, #200]	@ (8005418 <TIM_Base_SetConfig+0x130>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d023      	beq.n	800539a <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a31      	ldr	r2, [pc, #196]	@ (800541c <TIM_Base_SetConfig+0x134>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01f      	beq.n	800539a <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a30      	ldr	r2, [pc, #192]	@ (8005420 <TIM_Base_SetConfig+0x138>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01b      	beq.n	800539a <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a2f      	ldr	r2, [pc, #188]	@ (8005424 <TIM_Base_SetConfig+0x13c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d017      	beq.n	800539a <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a2e      	ldr	r2, [pc, #184]	@ (8005428 <TIM_Base_SetConfig+0x140>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d013      	beq.n	800539a <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a2d      	ldr	r2, [pc, #180]	@ (800542c <TIM_Base_SetConfig+0x144>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00f      	beq.n	800539a <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a2c      	ldr	r2, [pc, #176]	@ (8005430 <TIM_Base_SetConfig+0x148>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00b      	beq.n	800539a <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a2b      	ldr	r2, [pc, #172]	@ (8005434 <TIM_Base_SetConfig+0x14c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d007      	beq.n	800539a <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2a      	ldr	r2, [pc, #168]	@ (8005438 <TIM_Base_SetConfig+0x150>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d003      	beq.n	800539a <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a29      	ldr	r2, [pc, #164]	@ (800543c <TIM_Base_SetConfig+0x154>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d108      	bne.n	80053ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a10      	ldr	r2, [pc, #64]	@ (8005414 <TIM_Base_SetConfig+0x12c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_Base_SetConfig+0xf8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a12      	ldr	r2, [pc, #72]	@ (8005424 <TIM_Base_SetConfig+0x13c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d103      	bne.n	80053e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d105      	bne.n	8005406 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f023 0201 	bic.w	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	611a      	str	r2, [r3, #16]
  }
}
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40010000 	.word	0x40010000
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40010400 	.word	0x40010400
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800
 8005434:	40001800 	.word	0x40001800
 8005438:	40001c00 	.word	0x40001c00
 800543c:	40002000 	.word	0x40002000

08005440 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e042      	b.n	8005500 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fc f95e 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2224      	movs	r2, #36	@ 0x24
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 ff59 	bl	8006364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	@ 0x28
 800550c:	af02      	add	r7, sp, #8
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b20      	cmp	r3, #32
 8005526:	d175      	bne.n	8005614 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <HAL_UART_Transmit+0x2c>
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e06e      	b.n	8005616 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2221      	movs	r2, #33	@ 0x21
 8005542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005546:	f7fc fbd1 	bl	8001cec <HAL_GetTick>
 800554a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	88fa      	ldrh	r2, [r7, #6]
 8005550:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005560:	d108      	bne.n	8005574 <HAL_UART_Transmit+0x6c>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d104      	bne.n	8005574 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	e003      	b.n	800557c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005578:	2300      	movs	r3, #0
 800557a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800557c:	e02e      	b.n	80055dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2200      	movs	r2, #0
 8005586:	2180      	movs	r1, #128	@ 0x80
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 fc31 	bl	8005df0 <UART_WaitOnFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e03a      	b.n	8005616 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10b      	bne.n	80055be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	3302      	adds	r3, #2
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	e007      	b.n	80055ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	781a      	ldrb	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	3301      	adds	r3, #1
 80055cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1cb      	bne.n	800557e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2200      	movs	r2, #0
 80055ee:	2140      	movs	r1, #64	@ 0x40
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 fbfd 	bl	8005df0 <UART_WaitOnFlagUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e006      	b.n	8005616 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e000      	b.n	8005616 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005614:	2302      	movs	r3, #2
  }
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	4613      	mov	r3, r2
 800562a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b20      	cmp	r3, #32
 8005636:	d112      	bne.n	800565e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_UART_Receive_DMA+0x26>
 800563e:	88fb      	ldrh	r3, [r7, #6]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e00b      	b.n	8005660 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	461a      	mov	r2, r3
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 fc25 	bl	8005ea4 <UART_Start_Receive_DMA>
 800565a:	4603      	mov	r3, r0
 800565c:	e000      	b.n	8005660 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800565e:	2302      	movs	r3, #2
  }
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b0ba      	sub	sp, #232	@ 0xe8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800568e:	2300      	movs	r3, #0
 8005690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005694:	2300      	movs	r3, #0
 8005696:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800569a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80056a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10f      	bne.n	80056ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <HAL_UART_IRQHandler+0x66>
 80056ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fd8d 	bl	80061e6 <UART_Receive_IT>
      return;
 80056cc:	e25b      	b.n	8005b86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 80de 	beq.w	8005894 <HAL_UART_IRQHandler+0x22c>
 80056d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d106      	bne.n	80056f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80d1 	beq.w	8005894 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00b      	beq.n	8005716 <HAL_UART_IRQHandler+0xae>
 80056fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005706:	2b00      	cmp	r3, #0
 8005708:	d005      	beq.n	8005716 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	f043 0201 	orr.w	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00b      	beq.n	800573a <HAL_UART_IRQHandler+0xd2>
 8005722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d005      	beq.n	800573a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005732:	f043 0202 	orr.w	r2, r3, #2
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800573a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00b      	beq.n	800575e <HAL_UART_IRQHandler+0xf6>
 8005746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d005      	beq.n	800575e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005756:	f043 0204 	orr.w	r2, r3, #4
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d011      	beq.n	800578e <HAL_UART_IRQHandler+0x126>
 800576a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d105      	bne.n	8005782 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005786:	f043 0208 	orr.w	r2, r3, #8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 81f2 	beq.w	8005b7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_UART_IRQHandler+0x14e>
 80057a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fd18 	bl	80061e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c0:	2b40      	cmp	r3, #64	@ 0x40
 80057c2:	bf0c      	ite	eq
 80057c4:	2301      	moveq	r3, #1
 80057c6:	2300      	movne	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d103      	bne.n	80057e2 <HAL_UART_IRQHandler+0x17a>
 80057da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d04f      	beq.n	8005882 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fc20 	bl	8006028 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f2:	2b40      	cmp	r3, #64	@ 0x40
 80057f4:	d141      	bne.n	800587a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3314      	adds	r3, #20
 80057fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800580c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3314      	adds	r3, #20
 800581e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005822:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005826:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800582e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800583a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1d9      	bne.n	80057f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d013      	beq.n	8005872 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a48 <HAL_UART_IRQHandler+0x3e0>)
 8005850:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005856:	4618      	mov	r0, r3
 8005858:	f7fc fd1a 	bl	8002290 <HAL_DMA_Abort_IT>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d016      	beq.n	8005890 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800586c:	4610      	mov	r0, r2
 800586e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	e00e      	b.n	8005890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f9a8 	bl	8005bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	e00a      	b.n	8005890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9a4 	bl	8005bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005880:	e006      	b.n	8005890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f9a0 	bl	8005bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800588e:	e175      	b.n	8005b7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005890:	bf00      	nop
    return;
 8005892:	e173      	b.n	8005b7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005898:	2b01      	cmp	r3, #1
 800589a:	f040 814f 	bne.w	8005b3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 8148 	beq.w	8005b3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8141 	beq.w	8005b3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058ba:	2300      	movs	r3, #0
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058da:	2b40      	cmp	r3, #64	@ 0x40
 80058dc:	f040 80b6 	bne.w	8005a4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 8145 	beq.w	8005b80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058fe:	429a      	cmp	r2, r3
 8005900:	f080 813e 	bcs.w	8005b80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800590a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005916:	f000 8088 	beq.w	8005a2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	330c      	adds	r3, #12
 8005920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005930:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	330c      	adds	r3, #12
 8005942:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005946:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800594a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005952:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800595e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1d9      	bne.n	800591a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3314      	adds	r3, #20
 800596c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3314      	adds	r3, #20
 8005986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800598a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800598e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005992:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800599c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e1      	bne.n	8005966 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3314      	adds	r3, #20
 80059a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3314      	adds	r3, #20
 80059c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e3      	bne.n	80059a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059fa:	f023 0310 	bic.w	r3, r3, #16
 80059fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e3      	bne.n	80059e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fc fbc3 	bl	80021b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f8cb 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a46:	e09b      	b.n	8005b80 <HAL_UART_IRQHandler+0x518>
 8005a48:	080060ef 	.word	0x080060ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 808e 	beq.w	8005b84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8089 	beq.w	8005b84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a96:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e3      	bne.n	8005a72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3314      	adds	r3, #20
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	f023 0301 	bic.w	r3, r3, #1
 8005ac0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3314      	adds	r3, #20
 8005aca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ace:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e3      	bne.n	8005aaa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0310 	bic.w	r3, r3, #16
 8005b06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	330c      	adds	r3, #12
 8005b10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b14:	61fa      	str	r2, [r7, #28]
 8005b16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	69b9      	ldr	r1, [r7, #24]
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	617b      	str	r3, [r7, #20]
   return(result);
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e3      	bne.n	8005af0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b32:	4619      	mov	r1, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f851 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b3a:	e023      	b.n	8005b84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d009      	beq.n	8005b5c <HAL_UART_IRQHandler+0x4f4>
 8005b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fade 	bl	8006116 <UART_Transmit_IT>
    return;
 8005b5a:	e014      	b.n	8005b86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00e      	beq.n	8005b86 <HAL_UART_IRQHandler+0x51e>
 8005b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fb1e 	bl	80061b6 <UART_EndTransmit_IT>
    return;
 8005b7a:	e004      	b.n	8005b86 <HAL_UART_IRQHandler+0x51e>
    return;
 8005b7c:	bf00      	nop
 8005b7e:	e002      	b.n	8005b86 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b80:	bf00      	nop
 8005b82:	e000      	b.n	8005b86 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b84:	bf00      	nop
  }
}
 8005b86:	37e8      	adds	r7, #232	@ 0xe8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b09c      	sub	sp, #112	@ 0x70
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c00:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d172      	bne.n	8005cf6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c12:	2200      	movs	r2, #0
 8005c14:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	330c      	adds	r3, #12
 8005c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	330c      	adds	r3, #12
 8005c34:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005c36:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c38:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e5      	bne.n	8005c16 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3314      	adds	r3, #20
 8005c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5c:	f023 0301 	bic.w	r3, r3, #1
 8005c60:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3314      	adds	r3, #20
 8005c68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005c6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e5      	bne.n	8005c4a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3314      	adds	r3, #20
 8005c84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c94:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e5      	bne.n	8005c7e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d119      	bne.n	8005cf6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f023 0310 	bic.w	r3, r3, #16
 8005cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ce2:	61fa      	str	r2, [r7, #28]
 8005ce4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	69b9      	ldr	r1, [r7, #24]
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	617b      	str	r3, [r7, #20]
   return(result);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e5      	bne.n	8005cc2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d106      	bne.n	8005d12 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d0c:	f7ff ff66 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d10:	e002      	b.n	8005d18 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005d12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d14:	f7ff ff44 	bl	8005ba0 <HAL_UART_RxCpltCallback>
}
 8005d18:	bf00      	nop
 8005d1a:	3770      	adds	r7, #112	@ 0x70
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d108      	bne.n	8005d4e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d40:	085b      	lsrs	r3, r3, #1
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	4619      	mov	r1, r3
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7ff ff48 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d4c:	e002      	b.n	8005d54 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f7ff ff30 	bl	8005bb4 <HAL_UART_RxHalfCpltCallback>
}
 8005d54:	bf00      	nop
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d78:	2b80      	cmp	r3, #128	@ 0x80
 8005d7a:	bf0c      	ite	eq
 8005d7c:	2301      	moveq	r3, #1
 8005d7e:	2300      	movne	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b21      	cmp	r3, #33	@ 0x21
 8005d8e:	d108      	bne.n	8005da2 <UART_DMAError+0x46>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005d9c:	68b8      	ldr	r0, [r7, #8]
 8005d9e:	f000 f91b 	bl	8005fd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dac:	2b40      	cmp	r3, #64	@ 0x40
 8005dae:	bf0c      	ite	eq
 8005db0:	2301      	moveq	r3, #1
 8005db2:	2300      	movne	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b22      	cmp	r3, #34	@ 0x22
 8005dc2:	d108      	bne.n	8005dd6 <UART_DMAError+0x7a>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005dd0:	68b8      	ldr	r0, [r7, #8]
 8005dd2:	f000 f929 	bl	8006028 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dda:	f043 0210 	orr.w	r2, r3, #16
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005de2:	68b8      	ldr	r0, [r7, #8]
 8005de4:	f7ff fef0 	bl	8005bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de8:	bf00      	nop
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e00:	e03b      	b.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d037      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0a:	f7fb ff6f 	bl	8001cec <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	6a3a      	ldr	r2, [r7, #32]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d302      	bcc.n	8005e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e03a      	b.n	8005e9a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d023      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b80      	cmp	r3, #128	@ 0x80
 8005e36:	d020      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b40      	cmp	r3, #64	@ 0x40
 8005e3c:	d01d      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d116      	bne.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 f8e0 	bl	8006028 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2208      	movs	r2, #8
 8005e6c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e00f      	b.n	8005e9a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4013      	ands	r3, r2
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	bf0c      	ite	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	2300      	movne	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d0b4      	beq.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b098      	sub	sp, #96	@ 0x60
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	88fa      	ldrh	r2, [r7, #6]
 8005ebc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2222      	movs	r2, #34	@ 0x22
 8005ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed0:	4a3e      	ldr	r2, [pc, #248]	@ (8005fcc <UART_Start_Receive_DMA+0x128>)
 8005ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed8:	4a3d      	ldr	r2, [pc, #244]	@ (8005fd0 <UART_Start_Receive_DMA+0x12c>)
 8005eda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8005fd4 <UART_Start_Receive_DMA+0x130>)
 8005ee2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee8:	2200      	movs	r2, #0
 8005eea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005eec:	f107 0308 	add.w	r3, r7, #8
 8005ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	f7fc f8fc 	bl	8002100 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f08:	2300      	movs	r3, #0
 8005f0a:	613b      	str	r3, [r7, #16]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d019      	beq.n	8005f5a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	330c      	adds	r3, #12
 8005f2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	330c      	adds	r3, #12
 8005f44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f46:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005f48:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005f4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e5      	bne.n	8005f26 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	f043 0301 	orr.w	r3, r3, #1
 8005f70:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3314      	adds	r3, #20
 8005f78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f7a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005f80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e5      	bne.n	8005f5a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3314      	adds	r3, #20
 8005f94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3314      	adds	r3, #20
 8005fac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005fae:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6a39      	ldr	r1, [r7, #32]
 8005fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e5      	bne.n	8005f8e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3760      	adds	r7, #96	@ 0x60
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	08005bf5 	.word	0x08005bf5
 8005fd0:	08005d21 	.word	0x08005d21
 8005fd4:	08005d5d 	.word	0x08005d5d

08005fd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b089      	sub	sp, #36	@ 0x24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	330c      	adds	r3, #12
 8005fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	330c      	adds	r3, #12
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	61ba      	str	r2, [r7, #24]
 8006002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6979      	ldr	r1, [r7, #20]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	613b      	str	r3, [r7, #16]
   return(result);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e5      	bne.n	8005fe0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800601c:	bf00      	nop
 800601e:	3724      	adds	r7, #36	@ 0x24
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006028:	b480      	push	{r7}
 800602a:	b095      	sub	sp, #84	@ 0x54
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006042:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	330c      	adds	r3, #12
 800604e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006050:	643a      	str	r2, [r7, #64]	@ 0x40
 8006052:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006056:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800605e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e5      	bne.n	8006030 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3314      	adds	r3, #20
 800606a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	61fb      	str	r3, [r7, #28]
   return(result);
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3314      	adds	r3, #20
 8006082:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006084:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006086:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800608a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e5      	bne.n	8006064 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609c:	2b01      	cmp	r3, #1
 800609e:	d119      	bne.n	80060d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	330c      	adds	r3, #12
 80060a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f023 0310 	bic.w	r3, r3, #16
 80060b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	330c      	adds	r3, #12
 80060be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060c0:	61ba      	str	r2, [r7, #24]
 80060c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6979      	ldr	r1, [r7, #20]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	613b      	str	r3, [r7, #16]
   return(result);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e5      	bne.n	80060a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060e2:	bf00      	nop
 80060e4:	3754      	adds	r7, #84	@ 0x54
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff fd5d 	bl	8005bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b21      	cmp	r3, #33	@ 0x21
 8006128:	d13e      	bne.n	80061a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006132:	d114      	bne.n	800615e <UART_Transmit_IT+0x48>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d110      	bne.n	800615e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006150:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	1c9a      	adds	r2, r3, #2
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	621a      	str	r2, [r3, #32]
 800615c:	e008      	b.n	8006170 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	1c59      	adds	r1, r3, #1
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6211      	str	r1, [r2, #32]
 8006168:	781a      	ldrb	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29b      	uxth	r3, r3
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	4619      	mov	r1, r3
 800617e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10f      	bne.n	80061a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006192:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	e000      	b.n	80061aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061a8:	2302      	movs	r3, #2
  }
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff fcd8 	bl	8005b8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b08c      	sub	sp, #48	@ 0x30
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b22      	cmp	r3, #34	@ 0x22
 80061f8:	f040 80ae 	bne.w	8006358 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006204:	d117      	bne.n	8006236 <UART_Receive_IT+0x50>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d113      	bne.n	8006236 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006216:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006224:	b29a      	uxth	r2, r3
 8006226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006228:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	1c9a      	adds	r2, r3, #2
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	629a      	str	r2, [r3, #40]	@ 0x28
 8006234:	e026      	b.n	8006284 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800623c:	2300      	movs	r3, #0
 800623e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006248:	d007      	beq.n	800625a <UART_Receive_IT+0x74>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <UART_Receive_IT+0x82>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	e008      	b.n	800627a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006274:	b2da      	uxtb	r2, r3
 8006276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006278:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29b      	uxth	r3, r3
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	4619      	mov	r1, r3
 8006292:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006294:	2b00      	cmp	r3, #0
 8006296:	d15d      	bne.n	8006354 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0220 	bic.w	r2, r2, #32
 80062a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695a      	ldr	r2, [r3, #20]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0201 	bic.w	r2, r2, #1
 80062c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d135      	bne.n	800634a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	613b      	str	r3, [r7, #16]
   return(result);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f023 0310 	bic.w	r3, r3, #16
 80062fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	330c      	adds	r3, #12
 8006302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006304:	623a      	str	r2, [r7, #32]
 8006306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	69f9      	ldr	r1, [r7, #28]
 800630a:	6a3a      	ldr	r2, [r7, #32]
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	61bb      	str	r3, [r7, #24]
   return(result);
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e5      	bne.n	80062e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0310 	and.w	r3, r3, #16
 8006322:	2b10      	cmp	r3, #16
 8006324:	d10a      	bne.n	800633c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fc4a 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
 8006348:	e002      	b.n	8006350 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff fc28 	bl	8005ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	e002      	b.n	800635a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e000      	b.n	800635a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006358:	2302      	movs	r3, #2
  }
}
 800635a:	4618      	mov	r0, r3
 800635c:	3730      	adds	r7, #48	@ 0x30
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006368:	b0c0      	sub	sp, #256	@ 0x100
 800636a:	af00      	add	r7, sp, #0
 800636c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800637c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006380:	68d9      	ldr	r1, [r3, #12]
 8006382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	ea40 0301 	orr.w	r3, r0, r1
 800638c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	431a      	orrs	r2, r3
 800639c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	431a      	orrs	r2, r3
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80063bc:	f021 010c 	bic.w	r1, r1, #12
 80063c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063ca:	430b      	orrs	r3, r1
 80063cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063de:	6999      	ldr	r1, [r3, #24]
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	ea40 0301 	orr.w	r3, r0, r1
 80063ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4b8f      	ldr	r3, [pc, #572]	@ (8006630 <UART_SetConfig+0x2cc>)
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d005      	beq.n	8006404 <UART_SetConfig+0xa0>
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006634 <UART_SetConfig+0x2d0>)
 8006400:	429a      	cmp	r2, r3
 8006402:	d104      	bne.n	800640e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006404:	f7fd faa2 	bl	800394c <HAL_RCC_GetPCLK2Freq>
 8006408:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800640c:	e003      	b.n	8006416 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800640e:	f7fd fa89 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8006412:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006420:	f040 810c 	bne.w	800663c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006428:	2200      	movs	r2, #0
 800642a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800642e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006432:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006436:	4622      	mov	r2, r4
 8006438:	462b      	mov	r3, r5
 800643a:	1891      	adds	r1, r2, r2
 800643c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800643e:	415b      	adcs	r3, r3
 8006440:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006442:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006446:	4621      	mov	r1, r4
 8006448:	eb12 0801 	adds.w	r8, r2, r1
 800644c:	4629      	mov	r1, r5
 800644e:	eb43 0901 	adc.w	r9, r3, r1
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800645e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006466:	4690      	mov	r8, r2
 8006468:	4699      	mov	r9, r3
 800646a:	4623      	mov	r3, r4
 800646c:	eb18 0303 	adds.w	r3, r8, r3
 8006470:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006474:	462b      	mov	r3, r5
 8006476:	eb49 0303 	adc.w	r3, r9, r3
 800647a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800647e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800648a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800648e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006492:	460b      	mov	r3, r1
 8006494:	18db      	adds	r3, r3, r3
 8006496:	653b      	str	r3, [r7, #80]	@ 0x50
 8006498:	4613      	mov	r3, r2
 800649a:	eb42 0303 	adc.w	r3, r2, r3
 800649e:	657b      	str	r3, [r7, #84]	@ 0x54
 80064a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80064a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80064a8:	f7fa fb20 	bl	8000aec <__aeabi_uldivmod>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4b61      	ldr	r3, [pc, #388]	@ (8006638 <UART_SetConfig+0x2d4>)
 80064b2:	fba3 2302 	umull	r2, r3, r3, r2
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	011c      	lsls	r4, r3, #4
 80064ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80064c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80064cc:	4642      	mov	r2, r8
 80064ce:	464b      	mov	r3, r9
 80064d0:	1891      	adds	r1, r2, r2
 80064d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80064d4:	415b      	adcs	r3, r3
 80064d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80064dc:	4641      	mov	r1, r8
 80064de:	eb12 0a01 	adds.w	sl, r2, r1
 80064e2:	4649      	mov	r1, r9
 80064e4:	eb43 0b01 	adc.w	fp, r3, r1
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064fc:	4692      	mov	sl, r2
 80064fe:	469b      	mov	fp, r3
 8006500:	4643      	mov	r3, r8
 8006502:	eb1a 0303 	adds.w	r3, sl, r3
 8006506:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800650a:	464b      	mov	r3, r9
 800650c:	eb4b 0303 	adc.w	r3, fp, r3
 8006510:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006520:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006524:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006528:	460b      	mov	r3, r1
 800652a:	18db      	adds	r3, r3, r3
 800652c:	643b      	str	r3, [r7, #64]	@ 0x40
 800652e:	4613      	mov	r3, r2
 8006530:	eb42 0303 	adc.w	r3, r2, r3
 8006534:	647b      	str	r3, [r7, #68]	@ 0x44
 8006536:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800653a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800653e:	f7fa fad5 	bl	8000aec <__aeabi_uldivmod>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4611      	mov	r1, r2
 8006548:	4b3b      	ldr	r3, [pc, #236]	@ (8006638 <UART_SetConfig+0x2d4>)
 800654a:	fba3 2301 	umull	r2, r3, r3, r1
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	2264      	movs	r2, #100	@ 0x64
 8006552:	fb02 f303 	mul.w	r3, r2, r3
 8006556:	1acb      	subs	r3, r1, r3
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800655e:	4b36      	ldr	r3, [pc, #216]	@ (8006638 <UART_SetConfig+0x2d4>)
 8006560:	fba3 2302 	umull	r2, r3, r3, r2
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800656c:	441c      	add	r4, r3
 800656e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006572:	2200      	movs	r2, #0
 8006574:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006578:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800657c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006580:	4642      	mov	r2, r8
 8006582:	464b      	mov	r3, r9
 8006584:	1891      	adds	r1, r2, r2
 8006586:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006588:	415b      	adcs	r3, r3
 800658a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800658c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006590:	4641      	mov	r1, r8
 8006592:	1851      	adds	r1, r2, r1
 8006594:	6339      	str	r1, [r7, #48]	@ 0x30
 8006596:	4649      	mov	r1, r9
 8006598:	414b      	adcs	r3, r1
 800659a:	637b      	str	r3, [r7, #52]	@ 0x34
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80065a8:	4659      	mov	r1, fp
 80065aa:	00cb      	lsls	r3, r1, #3
 80065ac:	4651      	mov	r1, sl
 80065ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065b2:	4651      	mov	r1, sl
 80065b4:	00ca      	lsls	r2, r1, #3
 80065b6:	4610      	mov	r0, r2
 80065b8:	4619      	mov	r1, r3
 80065ba:	4603      	mov	r3, r0
 80065bc:	4642      	mov	r2, r8
 80065be:	189b      	adds	r3, r3, r2
 80065c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065c4:	464b      	mov	r3, r9
 80065c6:	460a      	mov	r2, r1
 80065c8:	eb42 0303 	adc.w	r3, r2, r3
 80065cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065e4:	460b      	mov	r3, r1
 80065e6:	18db      	adds	r3, r3, r3
 80065e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ea:	4613      	mov	r3, r2
 80065ec:	eb42 0303 	adc.w	r3, r2, r3
 80065f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80065fa:	f7fa fa77 	bl	8000aec <__aeabi_uldivmod>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4b0d      	ldr	r3, [pc, #52]	@ (8006638 <UART_SetConfig+0x2d4>)
 8006604:	fba3 1302 	umull	r1, r3, r3, r2
 8006608:	095b      	lsrs	r3, r3, #5
 800660a:	2164      	movs	r1, #100	@ 0x64
 800660c:	fb01 f303 	mul.w	r3, r1, r3
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	3332      	adds	r3, #50	@ 0x32
 8006616:	4a08      	ldr	r2, [pc, #32]	@ (8006638 <UART_SetConfig+0x2d4>)
 8006618:	fba2 2303 	umull	r2, r3, r2, r3
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	f003 0207 	and.w	r2, r3, #7
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4422      	add	r2, r4
 800662a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800662c:	e106      	b.n	800683c <UART_SetConfig+0x4d8>
 800662e:	bf00      	nop
 8006630:	40011000 	.word	0x40011000
 8006634:	40011400 	.word	0x40011400
 8006638:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800663c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006640:	2200      	movs	r2, #0
 8006642:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006646:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800664a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800664e:	4642      	mov	r2, r8
 8006650:	464b      	mov	r3, r9
 8006652:	1891      	adds	r1, r2, r2
 8006654:	6239      	str	r1, [r7, #32]
 8006656:	415b      	adcs	r3, r3
 8006658:	627b      	str	r3, [r7, #36]	@ 0x24
 800665a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800665e:	4641      	mov	r1, r8
 8006660:	1854      	adds	r4, r2, r1
 8006662:	4649      	mov	r1, r9
 8006664:	eb43 0501 	adc.w	r5, r3, r1
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	f04f 0300 	mov.w	r3, #0
 8006670:	00eb      	lsls	r3, r5, #3
 8006672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006676:	00e2      	lsls	r2, r4, #3
 8006678:	4614      	mov	r4, r2
 800667a:	461d      	mov	r5, r3
 800667c:	4643      	mov	r3, r8
 800667e:	18e3      	adds	r3, r4, r3
 8006680:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006684:	464b      	mov	r3, r9
 8006686:	eb45 0303 	adc.w	r3, r5, r3
 800668a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800668e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800669a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800669e:	f04f 0200 	mov.w	r2, #0
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066aa:	4629      	mov	r1, r5
 80066ac:	008b      	lsls	r3, r1, #2
 80066ae:	4621      	mov	r1, r4
 80066b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066b4:	4621      	mov	r1, r4
 80066b6:	008a      	lsls	r2, r1, #2
 80066b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80066bc:	f7fa fa16 	bl	8000aec <__aeabi_uldivmod>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4b60      	ldr	r3, [pc, #384]	@ (8006848 <UART_SetConfig+0x4e4>)
 80066c6:	fba3 2302 	umull	r2, r3, r3, r2
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	011c      	lsls	r4, r3, #4
 80066ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80066dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80066e0:	4642      	mov	r2, r8
 80066e2:	464b      	mov	r3, r9
 80066e4:	1891      	adds	r1, r2, r2
 80066e6:	61b9      	str	r1, [r7, #24]
 80066e8:	415b      	adcs	r3, r3
 80066ea:	61fb      	str	r3, [r7, #28]
 80066ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066f0:	4641      	mov	r1, r8
 80066f2:	1851      	adds	r1, r2, r1
 80066f4:	6139      	str	r1, [r7, #16]
 80066f6:	4649      	mov	r1, r9
 80066f8:	414b      	adcs	r3, r1
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006708:	4659      	mov	r1, fp
 800670a:	00cb      	lsls	r3, r1, #3
 800670c:	4651      	mov	r1, sl
 800670e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006712:	4651      	mov	r1, sl
 8006714:	00ca      	lsls	r2, r1, #3
 8006716:	4610      	mov	r0, r2
 8006718:	4619      	mov	r1, r3
 800671a:	4603      	mov	r3, r0
 800671c:	4642      	mov	r2, r8
 800671e:	189b      	adds	r3, r3, r2
 8006720:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006724:	464b      	mov	r3, r9
 8006726:	460a      	mov	r2, r1
 8006728:	eb42 0303 	adc.w	r3, r2, r3
 800672c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	67bb      	str	r3, [r7, #120]	@ 0x78
 800673a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006748:	4649      	mov	r1, r9
 800674a:	008b      	lsls	r3, r1, #2
 800674c:	4641      	mov	r1, r8
 800674e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006752:	4641      	mov	r1, r8
 8006754:	008a      	lsls	r2, r1, #2
 8006756:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800675a:	f7fa f9c7 	bl	8000aec <__aeabi_uldivmod>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4611      	mov	r1, r2
 8006764:	4b38      	ldr	r3, [pc, #224]	@ (8006848 <UART_SetConfig+0x4e4>)
 8006766:	fba3 2301 	umull	r2, r3, r3, r1
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	2264      	movs	r2, #100	@ 0x64
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	1acb      	subs	r3, r1, r3
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	3332      	adds	r3, #50	@ 0x32
 8006778:	4a33      	ldr	r2, [pc, #204]	@ (8006848 <UART_SetConfig+0x4e4>)
 800677a:	fba2 2303 	umull	r2, r3, r2, r3
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006784:	441c      	add	r4, r3
 8006786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800678a:	2200      	movs	r2, #0
 800678c:	673b      	str	r3, [r7, #112]	@ 0x70
 800678e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006790:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006794:	4642      	mov	r2, r8
 8006796:	464b      	mov	r3, r9
 8006798:	1891      	adds	r1, r2, r2
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	415b      	adcs	r3, r3
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067a4:	4641      	mov	r1, r8
 80067a6:	1851      	adds	r1, r2, r1
 80067a8:	6039      	str	r1, [r7, #0]
 80067aa:	4649      	mov	r1, r9
 80067ac:	414b      	adcs	r3, r1
 80067ae:	607b      	str	r3, [r7, #4]
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067bc:	4659      	mov	r1, fp
 80067be:	00cb      	lsls	r3, r1, #3
 80067c0:	4651      	mov	r1, sl
 80067c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067c6:	4651      	mov	r1, sl
 80067c8:	00ca      	lsls	r2, r1, #3
 80067ca:	4610      	mov	r0, r2
 80067cc:	4619      	mov	r1, r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	4642      	mov	r2, r8
 80067d2:	189b      	adds	r3, r3, r2
 80067d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067d6:	464b      	mov	r3, r9
 80067d8:	460a      	mov	r2, r1
 80067da:	eb42 0303 	adc.w	r3, r2, r3
 80067de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80067ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80067f8:	4649      	mov	r1, r9
 80067fa:	008b      	lsls	r3, r1, #2
 80067fc:	4641      	mov	r1, r8
 80067fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006802:	4641      	mov	r1, r8
 8006804:	008a      	lsls	r2, r1, #2
 8006806:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800680a:	f7fa f96f 	bl	8000aec <__aeabi_uldivmod>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4b0d      	ldr	r3, [pc, #52]	@ (8006848 <UART_SetConfig+0x4e4>)
 8006814:	fba3 1302 	umull	r1, r3, r3, r2
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	2164      	movs	r1, #100	@ 0x64
 800681c:	fb01 f303 	mul.w	r3, r1, r3
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	3332      	adds	r3, #50	@ 0x32
 8006826:	4a08      	ldr	r2, [pc, #32]	@ (8006848 <UART_SetConfig+0x4e4>)
 8006828:	fba2 2303 	umull	r2, r3, r2, r3
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	f003 020f 	and.w	r2, r3, #15
 8006832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4422      	add	r2, r4
 800683a:	609a      	str	r2, [r3, #8]
}
 800683c:	bf00      	nop
 800683e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006842:	46bd      	mov	sp, r7
 8006844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006848:	51eb851f 	.word	0x51eb851f

0800684c <__NVIC_SetPriority>:
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	4603      	mov	r3, r0
 8006854:	6039      	str	r1, [r7, #0]
 8006856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685c:	2b00      	cmp	r3, #0
 800685e:	db0a      	blt.n	8006876 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	b2da      	uxtb	r2, r3
 8006864:	490c      	ldr	r1, [pc, #48]	@ (8006898 <__NVIC_SetPriority+0x4c>)
 8006866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800686a:	0112      	lsls	r2, r2, #4
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	440b      	add	r3, r1
 8006870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006874:	e00a      	b.n	800688c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	b2da      	uxtb	r2, r3
 800687a:	4908      	ldr	r1, [pc, #32]	@ (800689c <__NVIC_SetPriority+0x50>)
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	3b04      	subs	r3, #4
 8006884:	0112      	lsls	r2, r2, #4
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	440b      	add	r3, r1
 800688a:	761a      	strb	r2, [r3, #24]
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	e000e100 	.word	0xe000e100
 800689c:	e000ed00 	.word	0xe000ed00

080068a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80068a4:	2100      	movs	r1, #0
 80068a6:	f06f 0004 	mvn.w	r0, #4
 80068aa:	f7ff ffcf 	bl	800684c <__NVIC_SetPriority>
#endif
}
 80068ae:	bf00      	nop
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068ba:	f3ef 8305 	mrs	r3, IPSR
 80068be:	603b      	str	r3, [r7, #0]
  return(result);
 80068c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80068c6:	f06f 0305 	mvn.w	r3, #5
 80068ca:	607b      	str	r3, [r7, #4]
 80068cc:	e00c      	b.n	80068e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068ce:	4b0a      	ldr	r3, [pc, #40]	@ (80068f8 <osKernelInitialize+0x44>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d105      	bne.n	80068e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80068d6:	4b08      	ldr	r3, [pc, #32]	@ (80068f8 <osKernelInitialize+0x44>)
 80068d8:	2201      	movs	r2, #1
 80068da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80068dc:	2300      	movs	r3, #0
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	e002      	b.n	80068e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80068e2:	f04f 33ff 	mov.w	r3, #4294967295
 80068e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068e8:	687b      	ldr	r3, [r7, #4]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	20000590 	.word	0x20000590

080068fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006902:	f3ef 8305 	mrs	r3, IPSR
 8006906:	603b      	str	r3, [r7, #0]
  return(result);
 8006908:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <osKernelStart+0x1a>
    stat = osErrorISR;
 800690e:	f06f 0305 	mvn.w	r3, #5
 8006912:	607b      	str	r3, [r7, #4]
 8006914:	e010      	b.n	8006938 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006916:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <osKernelStart+0x48>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d109      	bne.n	8006932 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800691e:	f7ff ffbf 	bl	80068a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006922:	4b08      	ldr	r3, [pc, #32]	@ (8006944 <osKernelStart+0x48>)
 8006924:	2202      	movs	r2, #2
 8006926:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006928:	f001 fe38 	bl	800859c <vTaskStartScheduler>
      stat = osOK;
 800692c:	2300      	movs	r3, #0
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	e002      	b.n	8006938 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006932:	f04f 33ff 	mov.w	r3, #4294967295
 8006936:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006938:	687b      	ldr	r3, [r7, #4]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000590 	.word	0x20000590

08006948 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b08e      	sub	sp, #56	@ 0x38
 800694c:	af04      	add	r7, sp, #16
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006958:	f3ef 8305 	mrs	r3, IPSR
 800695c:	617b      	str	r3, [r7, #20]
  return(result);
 800695e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006960:	2b00      	cmp	r3, #0
 8006962:	d17e      	bne.n	8006a62 <osThreadNew+0x11a>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d07b      	beq.n	8006a62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800696a:	2380      	movs	r3, #128	@ 0x80
 800696c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800696e:	2318      	movs	r3, #24
 8006970:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006972:	2300      	movs	r3, #0
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006976:	f04f 33ff 	mov.w	r3, #4294967295
 800697a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d045      	beq.n	8006a0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <osThreadNew+0x48>
        name = attr->name;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d008      	beq.n	80069b6 <osThreadNew+0x6e>
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	2b38      	cmp	r3, #56	@ 0x38
 80069a8:	d805      	bhi.n	80069b6 <osThreadNew+0x6e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <osThreadNew+0x72>
        return (NULL);
 80069b6:	2300      	movs	r3, #0
 80069b8:	e054      	b.n	8006a64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	089b      	lsrs	r3, r3, #2
 80069c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00e      	beq.n	80069f0 <osThreadNew+0xa8>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	2b5b      	cmp	r3, #91	@ 0x5b
 80069d8:	d90a      	bls.n	80069f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d006      	beq.n	80069f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <osThreadNew+0xa8>
        mem = 1;
 80069ea:	2301      	movs	r3, #1
 80069ec:	61bb      	str	r3, [r7, #24]
 80069ee:	e010      	b.n	8006a12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10c      	bne.n	8006a12 <osThreadNew+0xca>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d108      	bne.n	8006a12 <osThreadNew+0xca>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d104      	bne.n	8006a12 <osThreadNew+0xca>
          mem = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	e001      	b.n	8006a12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d110      	bne.n	8006a3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a20:	9202      	str	r2, [sp, #8]
 8006a22:	9301      	str	r3, [sp, #4]
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	6a3a      	ldr	r2, [r7, #32]
 8006a2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f001 fa7c 	bl	8007f2c <xTaskCreateStatic>
 8006a34:	4603      	mov	r3, r0
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	e013      	b.n	8006a62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d110      	bne.n	8006a62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	f107 0310 	add.w	r3, r7, #16
 8006a48:	9301      	str	r3, [sp, #4]
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f001 faca 	bl	8007fec <xTaskCreate>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d001      	beq.n	8006a62 <osThreadNew+0x11a>
            hTask = NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a62:	693b      	ldr	r3, [r7, #16]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3728      	adds	r7, #40	@ 0x28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a78:	f3ef 8305 	mrs	r3, IPSR
 8006a7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8006a84:	f06f 0305 	mvn.w	r3, #5
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	e017      	b.n	8006abc <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d103      	bne.n	8006a9a <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8006a92:	f06f 0303 	mvn.w	r3, #3
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	e010      	b.n	8006abc <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8006a9a:	6938      	ldr	r0, [r7, #16]
 8006a9c:	f001 fd16 	bl	80084cc <eTaskGetState>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d005      	beq.n	8006ab6 <osThreadTerminate+0x4a>
      stat = osOK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8006aae:	6938      	ldr	r0, [r7, #16]
 8006ab0:	f001 fbe2 	bl	8008278 <vTaskDelete>
 8006ab4:	e002      	b.n	8006abc <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8006ab6:	f06f 0302 	mvn.w	r3, #2
 8006aba:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8006abc:	697b      	ldr	r3, [r7, #20]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b08a      	sub	sp, #40	@ 0x28
 8006aca:	af02      	add	r7, sp, #8
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ad6:	f3ef 8305 	mrs	r3, IPSR
 8006ada:	613b      	str	r3, [r7, #16]
  return(result);
 8006adc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d175      	bne.n	8006bce <osSemaphoreNew+0x108>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d072      	beq.n	8006bce <osSemaphoreNew+0x108>
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d86e      	bhi.n	8006bce <osSemaphoreNew+0x108>
    mem = -1;
 8006af0:	f04f 33ff 	mov.w	r3, #4294967295
 8006af4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d015      	beq.n	8006b28 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d006      	beq.n	8006b12 <osSemaphoreNew+0x4c>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	2b4f      	cmp	r3, #79	@ 0x4f
 8006b0a:	d902      	bls.n	8006b12 <osSemaphoreNew+0x4c>
        mem = 1;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	e00c      	b.n	8006b2c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d108      	bne.n	8006b2c <osSemaphoreNew+0x66>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <osSemaphoreNew+0x66>
          mem = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	e001      	b.n	8006b2c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b32:	d04c      	beq.n	8006bce <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d128      	bne.n	8006b8c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d10a      	bne.n	8006b56 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2203      	movs	r2, #3
 8006b46:	9200      	str	r2, [sp, #0]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	f000 fa2b 	bl	8006fa8 <xQueueGenericCreateStatic>
 8006b52:	61f8      	str	r0, [r7, #28]
 8006b54:	e005      	b.n	8006b62 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006b56:	2203      	movs	r2, #3
 8006b58:	2100      	movs	r1, #0
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	f000 faa1 	bl	80070a2 <xQueueGenericCreate>
 8006b60:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d022      	beq.n	8006bae <osSemaphoreNew+0xe8>
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d01f      	beq.n	8006bae <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2200      	movs	r2, #0
 8006b72:	2100      	movs	r1, #0
 8006b74:	69f8      	ldr	r0, [r7, #28]
 8006b76:	f000 fb61 	bl	800723c <xQueueGenericSend>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d016      	beq.n	8006bae <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006b80:	69f8      	ldr	r0, [r7, #28]
 8006b82:	f000 ffff 	bl	8007b84 <vQueueDelete>
            hSemaphore = NULL;
 8006b86:	2300      	movs	r3, #0
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	e010      	b.n	8006bae <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d108      	bne.n	8006ba4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	461a      	mov	r2, r3
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 fadf 	bl	800715e <xQueueCreateCountingSemaphoreStatic>
 8006ba0:	61f8      	str	r0, [r7, #28]
 8006ba2:	e004      	b.n	8006bae <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fb12 	bl	80071d0 <xQueueCreateCountingSemaphore>
 8006bac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00c      	beq.n	8006bce <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	e001      	b.n	8006bc6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006bc6:	6979      	ldr	r1, [r7, #20]
 8006bc8:	69f8      	ldr	r0, [r7, #28]
 8006bca:	f001 f927 	bl	8007e1c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006bce:	69fb      	ldr	r3, [r7, #28]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3720      	adds	r7, #32
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d103      	bne.n	8006bf8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006bf0:	f06f 0303 	mvn.w	r3, #3
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e039      	b.n	8006c6c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bf8:	f3ef 8305 	mrs	r3, IPSR
 8006bfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d022      	beq.n	8006c4a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006c0a:	f06f 0303 	mvn.w	r3, #3
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	e02c      	b.n	8006c6c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006c16:	f107 0308 	add.w	r3, r7, #8
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	6938      	ldr	r0, [r7, #16]
 8006c20:	f000 ff2e 	bl	8007a80 <xQueueReceiveFromISR>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d003      	beq.n	8006c32 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006c2a:	f06f 0302 	mvn.w	r3, #2
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	e01c      	b.n	8006c6c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d019      	beq.n	8006c6c <osSemaphoreAcquire+0x94>
 8006c38:	4b0f      	ldr	r3, [pc, #60]	@ (8006c78 <osSemaphoreAcquire+0xa0>)
 8006c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	e010      	b.n	8006c6c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6938      	ldr	r0, [r7, #16]
 8006c4e:	f000 fe07 	bl	8007860 <xQueueSemaphoreTake>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d009      	beq.n	8006c6c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006c5e:	f06f 0301 	mvn.w	r3, #1
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	e002      	b.n	8006c6c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006c66:	f06f 0302 	mvn.w	r3, #2
 8006c6a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006c6c:	697b      	ldr	r3, [r7, #20]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d103      	bne.n	8006c9a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006c92:	f06f 0303 	mvn.w	r3, #3
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e02c      	b.n	8006cf4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c9a:	f3ef 8305 	mrs	r3, IPSR
 8006c9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d01a      	beq.n	8006cdc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006caa:	f107 0308 	add.w	r3, r7, #8
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6938      	ldr	r0, [r7, #16]
 8006cb2:	f000 fc63 	bl	800757c <xQueueGiveFromISR>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d003      	beq.n	8006cc4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006cbc:	f06f 0302 	mvn.w	r3, #2
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	e017      	b.n	8006cf4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d014      	beq.n	8006cf4 <osSemaphoreRelease+0x78>
 8006cca:	4b0d      	ldr	r3, [pc, #52]	@ (8006d00 <osSemaphoreRelease+0x84>)
 8006ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	e00b      	b.n	8006cf4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	6938      	ldr	r0, [r7, #16]
 8006ce4:	f000 faaa 	bl	800723c <xQueueGenericSend>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d002      	beq.n	8006cf4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006cee:	f06f 0302 	mvn.w	r3, #2
 8006cf2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006cf4:	697b      	ldr	r3, [r7, #20]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	e000ed04 	.word	0xe000ed04

08006d04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4a07      	ldr	r2, [pc, #28]	@ (8006d30 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	4a06      	ldr	r2, [pc, #24]	@ (8006d34 <vApplicationGetIdleTaskMemory+0x30>)
 8006d1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2280      	movs	r2, #128	@ 0x80
 8006d20:	601a      	str	r2, [r3, #0]
}
 8006d22:	bf00      	nop
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000594 	.word	0x20000594
 8006d34:	200005f0 	.word	0x200005f0

08006d38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4a07      	ldr	r2, [pc, #28]	@ (8006d64 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4a06      	ldr	r2, [pc, #24]	@ (8006d68 <vApplicationGetTimerTaskMemory+0x30>)
 8006d4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d56:	601a      	str	r2, [r3, #0]
}
 8006d58:	bf00      	nop
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	200007f0 	.word	0x200007f0
 8006d68:	2000084c 	.word	0x2000084c

08006d6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f103 0208 	add.w	r2, r3, #8
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f04f 32ff 	mov.w	r2, #4294967295
 8006d84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f103 0208 	add.w	r2, r3, #8
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f103 0208 	add.w	r2, r3, #8
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b085      	sub	sp, #20
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	601a      	str	r2, [r3, #0]
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e24:	d103      	bne.n	8006e2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	e00c      	b.n	8006e48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3308      	adds	r3, #8
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	e002      	b.n	8006e3c <vListInsert+0x2e>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d2f6      	bcs.n	8006e36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]
}
 8006e74:	bf00      	nop
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6892      	ldr	r2, [r2, #8]
 8006e96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6852      	ldr	r2, [r2, #4]
 8006ea0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d103      	bne.n	8006eb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	1e5a      	subs	r2, r3, #1
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10b      	bne.n	8006f00 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006efa:	bf00      	nop
 8006efc:	bf00      	nop
 8006efe:	e7fd      	b.n	8006efc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f00:	f002 fe0a 	bl	8009b18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0c:	68f9      	ldr	r1, [r7, #12]
 8006f0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f10:	fb01 f303 	mul.w	r3, r1, r3
 8006f14:	441a      	add	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f30:	3b01      	subs	r3, #1
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f36:	fb01 f303 	mul.w	r3, r1, r3
 8006f3a:	441a      	add	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	22ff      	movs	r2, #255	@ 0xff
 8006f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	22ff      	movs	r2, #255	@ 0xff
 8006f4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d114      	bne.n	8006f80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d01a      	beq.n	8006f94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3310      	adds	r3, #16
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 fda8 	bl	8008ab8 <xTaskRemoveFromEventList>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d012      	beq.n	8006f94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa4 <xQueueGenericReset+0xd0>)
 8006f70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	e009      	b.n	8006f94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3310      	adds	r3, #16
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff fef1 	bl	8006d6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3324      	adds	r3, #36	@ 0x24
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff feec 	bl	8006d6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f94:	f002 fdf2 	bl	8009b7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f98:	2301      	movs	r3, #1
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	e000ed04 	.word	0xe000ed04

08006fa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08e      	sub	sp, #56	@ 0x38
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10b      	bne.n	8006fd4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fce:	bf00      	nop
 8006fd0:	bf00      	nop
 8006fd2:	e7fd      	b.n	8006fd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10b      	bne.n	8006ff2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	e7fd      	b.n	8006fee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <xQueueGenericCreateStatic+0x56>
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <xQueueGenericCreateStatic+0x5a>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <xQueueGenericCreateStatic+0x5c>
 8007002:	2300      	movs	r3, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10b      	bne.n	8007020 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	623b      	str	r3, [r7, #32]
}
 800701a:	bf00      	nop
 800701c:	bf00      	nop
 800701e:	e7fd      	b.n	800701c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d102      	bne.n	800702c <xQueueGenericCreateStatic+0x84>
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <xQueueGenericCreateStatic+0x88>
 800702c:	2301      	movs	r3, #1
 800702e:	e000      	b.n	8007032 <xQueueGenericCreateStatic+0x8a>
 8007030:	2300      	movs	r3, #0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10b      	bne.n	800704e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	61fb      	str	r3, [r7, #28]
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	e7fd      	b.n	800704a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800704e:	2350      	movs	r3, #80	@ 0x50
 8007050:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b50      	cmp	r3, #80	@ 0x50
 8007056:	d00b      	beq.n	8007070 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	61bb      	str	r3, [r7, #24]
}
 800706a:	bf00      	nop
 800706c:	bf00      	nop
 800706e:	e7fd      	b.n	800706c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007070:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00d      	beq.n	8007098 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800707c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007084:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	4613      	mov	r3, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	68b9      	ldr	r1, [r7, #8]
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 f840 	bl	8007118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800709a:	4618      	mov	r0, r3
 800709c:	3730      	adds	r7, #48	@ 0x30
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b08a      	sub	sp, #40	@ 0x28
 80070a6:	af02      	add	r7, sp, #8
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	4613      	mov	r3, r2
 80070ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10b      	bne.n	80070ce <xQueueGenericCreate+0x2c>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	613b      	str	r3, [r7, #16]
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop
 80070cc:	e7fd      	b.n	80070ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	fb02 f303 	mul.w	r3, r2, r3
 80070d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	3350      	adds	r3, #80	@ 0x50
 80070dc:	4618      	mov	r0, r3
 80070de:	f002 fe3d 	bl	8009d5c <pvPortMalloc>
 80070e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d011      	beq.n	800710e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	3350      	adds	r3, #80	@ 0x50
 80070f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070fc:	79fa      	ldrb	r2, [r7, #7]
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	4613      	mov	r3, r2
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 f805 	bl	8007118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800710e:	69bb      	ldr	r3, [r7, #24]
	}
 8007110:	4618      	mov	r0, r3
 8007112:	3720      	adds	r7, #32
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d103      	bne.n	8007134 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	e002      	b.n	800713a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007146:	2101      	movs	r1, #1
 8007148:	69b8      	ldr	r0, [r7, #24]
 800714a:	f7ff fec3 	bl	8006ed4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	78fa      	ldrb	r2, [r7, #3]
 8007152:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007156:	bf00      	nop
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800715e:	b580      	push	{r7, lr}
 8007160:	b08a      	sub	sp, #40	@ 0x28
 8007162:	af02      	add	r7, sp, #8
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10b      	bne.n	8007188 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	61bb      	str	r3, [r7, #24]
}
 8007182:	bf00      	nop
 8007184:	bf00      	nop
 8007186:	e7fd      	b.n	8007184 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	429a      	cmp	r2, r3
 800718e:	d90b      	bls.n	80071a8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	617b      	str	r3, [r7, #20]
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	e7fd      	b.n	80071a4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80071a8:	2302      	movs	r3, #2
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	2100      	movs	r1, #0
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f7ff fef8 	bl	8006fa8 <xQueueGenericCreateStatic>
 80071b8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80071c6:	69fb      	ldr	r3, [r7, #28]
	}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3720      	adds	r7, #32
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10b      	bne.n	80071f8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	613b      	str	r3, [r7, #16]
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d90b      	bls.n	8007218 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	60fb      	str	r3, [r7, #12]
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007218:	2202      	movs	r2, #2
 800721a:	2100      	movs	r1, #0
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff ff40 	bl	80070a2 <xQueueGenericCreate>
 8007222:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007230:	697b      	ldr	r3, [r7, #20]
	}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08e      	sub	sp, #56	@ 0x38
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800724a:	2300      	movs	r3, #0
 800724c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10b      	bne.n	8007270 <xQueueGenericSend+0x34>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800726a:	bf00      	nop
 800726c:	bf00      	nop
 800726e:	e7fd      	b.n	800726c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d103      	bne.n	800727e <xQueueGenericSend+0x42>
 8007276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <xQueueGenericSend+0x46>
 800727e:	2301      	movs	r3, #1
 8007280:	e000      	b.n	8007284 <xQueueGenericSend+0x48>
 8007282:	2300      	movs	r3, #0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10b      	bne.n	80072a0 <xQueueGenericSend+0x64>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800729a:	bf00      	nop
 800729c:	bf00      	nop
 800729e:	e7fd      	b.n	800729c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d103      	bne.n	80072ae <xQueueGenericSend+0x72>
 80072a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <xQueueGenericSend+0x76>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e000      	b.n	80072b4 <xQueueGenericSend+0x78>
 80072b2:	2300      	movs	r3, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10b      	bne.n	80072d0 <xQueueGenericSend+0x94>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	623b      	str	r3, [r7, #32]
}
 80072ca:	bf00      	nop
 80072cc:	bf00      	nop
 80072ce:	e7fd      	b.n	80072cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072d0:	f001 fdb2 	bl	8008e38 <xTaskGetSchedulerState>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d102      	bne.n	80072e0 <xQueueGenericSend+0xa4>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <xQueueGenericSend+0xa8>
 80072e0:	2301      	movs	r3, #1
 80072e2:	e000      	b.n	80072e6 <xQueueGenericSend+0xaa>
 80072e4:	2300      	movs	r3, #0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10b      	bne.n	8007302 <xQueueGenericSend+0xc6>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	61fb      	str	r3, [r7, #28]
}
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
 8007300:	e7fd      	b.n	80072fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007302:	f002 fc09 	bl	8009b18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <xQueueGenericSend+0xdc>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b02      	cmp	r3, #2
 8007316:	d129      	bne.n	800736c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800731e:	f000 fc6d 	bl	8007bfc <prvCopyDataToQueue>
 8007322:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007328:	2b00      	cmp	r3, #0
 800732a:	d010      	beq.n	800734e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	3324      	adds	r3, #36	@ 0x24
 8007330:	4618      	mov	r0, r3
 8007332:	f001 fbc1 	bl	8008ab8 <xTaskRemoveFromEventList>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d013      	beq.n	8007364 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800733c:	4b3f      	ldr	r3, [pc, #252]	@ (800743c <xQueueGenericSend+0x200>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	e00a      	b.n	8007364 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800734e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d007      	beq.n	8007364 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007354:	4b39      	ldr	r3, [pc, #228]	@ (800743c <xQueueGenericSend+0x200>)
 8007356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007364:	f002 fc0a 	bl	8009b7c <vPortExitCritical>
				return pdPASS;
 8007368:	2301      	movs	r3, #1
 800736a:	e063      	b.n	8007434 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d103      	bne.n	800737a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007372:	f002 fc03 	bl	8009b7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007376:	2300      	movs	r3, #0
 8007378:	e05c      	b.n	8007434 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800737a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737c:	2b00      	cmp	r3, #0
 800737e:	d106      	bne.n	800738e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007380:	f107 0314 	add.w	r3, r7, #20
 8007384:	4618      	mov	r0, r3
 8007386:	f001 fbfb 	bl	8008b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800738a:	2301      	movs	r3, #1
 800738c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800738e:	f002 fbf5 	bl	8009b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007392:	f001 f96b 	bl	800866c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007396:	f002 fbbf 	bl	8009b18 <vPortEnterCritical>
 800739a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073a0:	b25b      	sxtb	r3, r3
 80073a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a6:	d103      	bne.n	80073b0 <xQueueGenericSend+0x174>
 80073a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073b6:	b25b      	sxtb	r3, r3
 80073b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073bc:	d103      	bne.n	80073c6 <xQueueGenericSend+0x18a>
 80073be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073c6:	f002 fbd9 	bl	8009b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073ca:	1d3a      	adds	r2, r7, #4
 80073cc:	f107 0314 	add.w	r3, r7, #20
 80073d0:	4611      	mov	r1, r2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 fbea 	bl	8008bac <xTaskCheckForTimeOut>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d124      	bne.n	8007428 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073e0:	f000 fd04 	bl	8007dec <prvIsQueueFull>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d018      	beq.n	800741c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ec:	3310      	adds	r3, #16
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	4611      	mov	r1, r2
 80073f2:	4618      	mov	r0, r3
 80073f4:	f001 fb0e 	bl	8008a14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073fa:	f000 fc8f 	bl	8007d1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073fe:	f001 f943 	bl	8008688 <xTaskResumeAll>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	f47f af7c 	bne.w	8007302 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800740a:	4b0c      	ldr	r3, [pc, #48]	@ (800743c <xQueueGenericSend+0x200>)
 800740c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	e772      	b.n	8007302 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800741c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800741e:	f000 fc7d 	bl	8007d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007422:	f001 f931 	bl	8008688 <xTaskResumeAll>
 8007426:	e76c      	b.n	8007302 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007428:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800742a:	f000 fc77 	bl	8007d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800742e:	f001 f92b 	bl	8008688 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007432:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007434:	4618      	mov	r0, r3
 8007436:	3738      	adds	r7, #56	@ 0x38
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	e000ed04 	.word	0xe000ed04

08007440 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b090      	sub	sp, #64	@ 0x40
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10b      	bne.n	8007470 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800746a:	bf00      	nop
 800746c:	bf00      	nop
 800746e:	e7fd      	b.n	800746c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d103      	bne.n	800747e <xQueueGenericSendFromISR+0x3e>
 8007476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <xQueueGenericSendFromISR+0x42>
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <xQueueGenericSendFromISR+0x44>
 8007482:	2300      	movs	r3, #0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10b      	bne.n	80074a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	e7fd      	b.n	800749c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d103      	bne.n	80074ae <xQueueGenericSendFromISR+0x6e>
 80074a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d101      	bne.n	80074b2 <xQueueGenericSendFromISR+0x72>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <xQueueGenericSendFromISR+0x74>
 80074b2:	2300      	movs	r3, #0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10b      	bne.n	80074d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	623b      	str	r3, [r7, #32]
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	e7fd      	b.n	80074cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074d0:	f002 fc02 	bl	8009cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074d4:	f3ef 8211 	mrs	r2, BASEPRI
 80074d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	61fa      	str	r2, [r7, #28]
 80074ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d302      	bcc.n	8007502 <xQueueGenericSendFromISR+0xc2>
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d12f      	bne.n	8007562 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007504:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007508:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800750c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007510:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007518:	f000 fb70 	bl	8007bfc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800751c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007524:	d112      	bne.n	800754c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752a:	2b00      	cmp	r3, #0
 800752c:	d016      	beq.n	800755c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800752e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007530:	3324      	adds	r3, #36	@ 0x24
 8007532:	4618      	mov	r0, r3
 8007534:	f001 fac0 	bl	8008ab8 <xTaskRemoveFromEventList>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00e      	beq.n	800755c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	e007      	b.n	800755c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800754c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007550:	3301      	adds	r3, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	b25a      	sxtb	r2, r3
 8007556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800755c:	2301      	movs	r3, #1
 800755e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007560:	e001      	b.n	8007566 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007562:	2300      	movs	r3, #0
 8007564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007568:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007570:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007574:	4618      	mov	r0, r3
 8007576:	3740      	adds	r7, #64	@ 0x40
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08e      	sub	sp, #56	@ 0x38
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10b      	bne.n	80075a8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	623b      	str	r3, [r7, #32]
}
 80075a2:	bf00      	nop
 80075a4:	bf00      	nop
 80075a6:	e7fd      	b.n	80075a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	61fb      	str	r3, [r7, #28]
}
 80075c2:	bf00      	nop
 80075c4:	bf00      	nop
 80075c6:	e7fd      	b.n	80075c4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <xQueueGiveFromISR+0x5c>
 80075d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <xQueueGiveFromISR+0x60>
 80075d8:	2301      	movs	r3, #1
 80075da:	e000      	b.n	80075de <xQueueGiveFromISR+0x62>
 80075dc:	2300      	movs	r3, #0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10b      	bne.n	80075fa <xQueueGiveFromISR+0x7e>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	61bb      	str	r3, [r7, #24]
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	e7fd      	b.n	80075f6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075fa:	f002 fb6d 	bl	8009cd8 <vPortValidateInterruptPriority>
	__asm volatile
 80075fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	617a      	str	r2, [r7, #20]
 8007614:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007616:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007618:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800761a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007626:	429a      	cmp	r2, r3
 8007628:	d22b      	bcs.n	8007682 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800762a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800763c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d112      	bne.n	800766c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764a:	2b00      	cmp	r3, #0
 800764c:	d016      	beq.n	800767c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	3324      	adds	r3, #36	@ 0x24
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fa30 	bl	8008ab8 <xTaskRemoveFromEventList>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00e      	beq.n	800767c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2201      	movs	r2, #1
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	e007      	b.n	800767c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800766c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007670:	3301      	adds	r3, #1
 8007672:	b2db      	uxtb	r3, r3
 8007674:	b25a      	sxtb	r2, r3
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800767c:	2301      	movs	r3, #1
 800767e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007680:	e001      	b.n	8007686 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007682:	2300      	movs	r3, #0
 8007684:	637b      	str	r3, [r7, #52]	@ 0x34
 8007686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007688:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f383 8811 	msr	BASEPRI, r3
}
 8007690:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007694:	4618      	mov	r0, r3
 8007696:	3738      	adds	r7, #56	@ 0x38
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08c      	sub	sp, #48	@ 0x30
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10b      	bne.n	80076ce <xQueueReceive+0x32>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	623b      	str	r3, [r7, #32]
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	e7fd      	b.n	80076ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d103      	bne.n	80076dc <xQueueReceive+0x40>
 80076d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <xQueueReceive+0x44>
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <xQueueReceive+0x46>
 80076e0:	2300      	movs	r3, #0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10b      	bne.n	80076fe <xQueueReceive+0x62>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	61fb      	str	r3, [r7, #28]
}
 80076f8:	bf00      	nop
 80076fa:	bf00      	nop
 80076fc:	e7fd      	b.n	80076fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076fe:	f001 fb9b 	bl	8008e38 <xTaskGetSchedulerState>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <xQueueReceive+0x72>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <xQueueReceive+0x76>
 800770e:	2301      	movs	r3, #1
 8007710:	e000      	b.n	8007714 <xQueueReceive+0x78>
 8007712:	2300      	movs	r3, #0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10b      	bne.n	8007730 <xQueueReceive+0x94>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	61bb      	str	r3, [r7, #24]
}
 800772a:	bf00      	nop
 800772c:	bf00      	nop
 800772e:	e7fd      	b.n	800772c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007730:	f002 f9f2 	bl	8009b18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007738:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01f      	beq.n	8007780 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007744:	f000 fac4 	bl	8007cd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	1e5a      	subs	r2, r3, #1
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00f      	beq.n	8007778 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	3310      	adds	r3, #16
 800775c:	4618      	mov	r0, r3
 800775e:	f001 f9ab 	bl	8008ab8 <xTaskRemoveFromEventList>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d007      	beq.n	8007778 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007768:	4b3c      	ldr	r3, [pc, #240]	@ (800785c <xQueueReceive+0x1c0>)
 800776a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007778:	f002 fa00 	bl	8009b7c <vPortExitCritical>
				return pdPASS;
 800777c:	2301      	movs	r3, #1
 800777e:	e069      	b.n	8007854 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d103      	bne.n	800778e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007786:	f002 f9f9 	bl	8009b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800778a:	2300      	movs	r3, #0
 800778c:	e062      	b.n	8007854 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800778e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d106      	bne.n	80077a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007794:	f107 0310 	add.w	r3, r7, #16
 8007798:	4618      	mov	r0, r3
 800779a:	f001 f9f1 	bl	8008b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800779e:	2301      	movs	r3, #1
 80077a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077a2:	f002 f9eb 	bl	8009b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077a6:	f000 ff61 	bl	800866c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077aa:	f002 f9b5 	bl	8009b18 <vPortEnterCritical>
 80077ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077b4:	b25b      	sxtb	r3, r3
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ba:	d103      	bne.n	80077c4 <xQueueReceive+0x128>
 80077bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077ca:	b25b      	sxtb	r3, r3
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d0:	d103      	bne.n	80077da <xQueueReceive+0x13e>
 80077d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077da:	f002 f9cf 	bl	8009b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077de:	1d3a      	adds	r2, r7, #4
 80077e0:	f107 0310 	add.w	r3, r7, #16
 80077e4:	4611      	mov	r1, r2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 f9e0 	bl	8008bac <xTaskCheckForTimeOut>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d123      	bne.n	800783a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077f4:	f000 fae4 	bl	8007dc0 <prvIsQueueEmpty>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d017      	beq.n	800782e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007800:	3324      	adds	r3, #36	@ 0x24
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f001 f904 	bl	8008a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800780c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800780e:	f000 fa85 	bl	8007d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007812:	f000 ff39 	bl	8008688 <xTaskResumeAll>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d189      	bne.n	8007730 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800781c:	4b0f      	ldr	r3, [pc, #60]	@ (800785c <xQueueReceive+0x1c0>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	e780      	b.n	8007730 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800782e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007830:	f000 fa74 	bl	8007d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007834:	f000 ff28 	bl	8008688 <xTaskResumeAll>
 8007838:	e77a      	b.n	8007730 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800783a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800783c:	f000 fa6e 	bl	8007d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007840:	f000 ff22 	bl	8008688 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007846:	f000 fabb 	bl	8007dc0 <prvIsQueueEmpty>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	f43f af6f 	beq.w	8007730 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007852:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007854:	4618      	mov	r0, r3
 8007856:	3730      	adds	r7, #48	@ 0x30
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	e000ed04 	.word	0xe000ed04

08007860 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08e      	sub	sp, #56	@ 0x38
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800786a:	2300      	movs	r3, #0
 800786c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007872:	2300      	movs	r3, #0
 8007874:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10b      	bne.n	8007894 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	623b      	str	r3, [r7, #32]
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	e7fd      	b.n	8007890 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	61fb      	str	r3, [r7, #28]
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	e7fd      	b.n	80078b0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078b4:	f001 fac0 	bl	8008e38 <xTaskGetSchedulerState>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d102      	bne.n	80078c4 <xQueueSemaphoreTake+0x64>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <xQueueSemaphoreTake+0x68>
 80078c4:	2301      	movs	r3, #1
 80078c6:	e000      	b.n	80078ca <xQueueSemaphoreTake+0x6a>
 80078c8:	2300      	movs	r3, #0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10b      	bne.n	80078e6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	61bb      	str	r3, [r7, #24]
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	e7fd      	b.n	80078e2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078e6:	f002 f917 	bl	8009b18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80078ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80078f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d024      	beq.n	8007940 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	1e5a      	subs	r2, r3, #1
 80078fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d104      	bne.n	8007910 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007906:	f001 fc11 	bl	800912c <pvTaskIncrementMutexHeldCount>
 800790a:	4602      	mov	r2, r0
 800790c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00f      	beq.n	8007938 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791a:	3310      	adds	r3, #16
 800791c:	4618      	mov	r0, r3
 800791e:	f001 f8cb 	bl	8008ab8 <xTaskRemoveFromEventList>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007928:	4b54      	ldr	r3, [pc, #336]	@ (8007a7c <xQueueSemaphoreTake+0x21c>)
 800792a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007938:	f002 f920 	bl	8009b7c <vPortExitCritical>
				return pdPASS;
 800793c:	2301      	movs	r3, #1
 800793e:	e098      	b.n	8007a72 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d112      	bne.n	800796c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	617b      	str	r3, [r7, #20]
}
 800795e:	bf00      	nop
 8007960:	bf00      	nop
 8007962:	e7fd      	b.n	8007960 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007964:	f002 f90a 	bl	8009b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007968:	2300      	movs	r3, #0
 800796a:	e082      	b.n	8007a72 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800796c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007972:	f107 030c 	add.w	r3, r7, #12
 8007976:	4618      	mov	r0, r3
 8007978:	f001 f902 	bl	8008b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800797c:	2301      	movs	r3, #1
 800797e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007980:	f002 f8fc 	bl	8009b7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007984:	f000 fe72 	bl	800866c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007988:	f002 f8c6 	bl	8009b18 <vPortEnterCritical>
 800798c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007992:	b25b      	sxtb	r3, r3
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007998:	d103      	bne.n	80079a2 <xQueueSemaphoreTake+0x142>
 800799a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079a8:	b25b      	sxtb	r3, r3
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d103      	bne.n	80079b8 <xQueueSemaphoreTake+0x158>
 80079b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079b8:	f002 f8e0 	bl	8009b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079bc:	463a      	mov	r2, r7
 80079be:	f107 030c 	add.w	r3, r7, #12
 80079c2:	4611      	mov	r1, r2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f001 f8f1 	bl	8008bac <xTaskCheckForTimeOut>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d132      	bne.n	8007a36 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079d2:	f000 f9f5 	bl	8007dc0 <prvIsQueueEmpty>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d026      	beq.n	8007a2a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d109      	bne.n	80079f8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80079e4:	f002 f898 	bl	8009b18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f001 fa41 	bl	8008e74 <xTaskPriorityInherit>
 80079f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80079f4:	f002 f8c2 	bl	8009b7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fa:	3324      	adds	r3, #36	@ 0x24
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	4611      	mov	r1, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f001 f807 	bl	8008a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a08:	f000 f988 	bl	8007d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a0c:	f000 fe3c 	bl	8008688 <xTaskResumeAll>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f47f af67 	bne.w	80078e6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007a18:	4b18      	ldr	r3, [pc, #96]	@ (8007a7c <xQueueSemaphoreTake+0x21c>)
 8007a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	e75d      	b.n	80078e6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007a2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a2c:	f000 f976 	bl	8007d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a30:	f000 fe2a 	bl	8008688 <xTaskResumeAll>
 8007a34:	e757      	b.n	80078e6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a38:	f000 f970 	bl	8007d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a3c:	f000 fe24 	bl	8008688 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a42:	f000 f9bd 	bl	8007dc0 <prvIsQueueEmpty>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f43f af4c 	beq.w	80078e6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00d      	beq.n	8007a70 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007a54:	f002 f860 	bl	8009b18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a5a:	f000 f8b7 	bl	8007bcc <prvGetDisinheritPriorityAfterTimeout>
 8007a5e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 fadc 	bl	8009024 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a6c:	f002 f886 	bl	8009b7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3738      	adds	r7, #56	@ 0x38
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	e000ed04 	.word	0xe000ed04

08007a80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08e      	sub	sp, #56	@ 0x38
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10b      	bne.n	8007aae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	623b      	str	r3, [r7, #32]
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	e7fd      	b.n	8007aaa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d103      	bne.n	8007abc <xQueueReceiveFromISR+0x3c>
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <xQueueReceiveFromISR+0x40>
 8007abc:	2301      	movs	r3, #1
 8007abe:	e000      	b.n	8007ac2 <xQueueReceiveFromISR+0x42>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10b      	bne.n	8007ade <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	61fb      	str	r3, [r7, #28]
}
 8007ad8:	bf00      	nop
 8007ada:	bf00      	nop
 8007adc:	e7fd      	b.n	8007ada <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ade:	f002 f8fb 	bl	8009cd8 <vPortValidateInterruptPriority>
	__asm volatile
 8007ae2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	61ba      	str	r2, [r7, #24]
 8007af8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007afa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b02:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d02f      	beq.n	8007b6a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b14:	68b9      	ldr	r1, [r7, #8]
 8007b16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b18:	f000 f8da 	bl	8007cd0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1e:	1e5a      	subs	r2, r3, #1
 8007b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b22:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2c:	d112      	bne.n	8007b54 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d016      	beq.n	8007b64 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	3310      	adds	r3, #16
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 ffbc 	bl	8008ab8 <xTaskRemoveFromEventList>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00e      	beq.n	8007b64 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	e007      	b.n	8007b64 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b58:	3301      	adds	r3, #1
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	b25a      	sxtb	r2, r3
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007b64:	2301      	movs	r3, #1
 8007b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b68:	e001      	b.n	8007b6e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f383 8811 	msr	BASEPRI, r3
}
 8007b78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3738      	adds	r7, #56	@ 0x38
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <vQueueDelete+0x2a>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	60bb      	str	r3, [r7, #8]
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 f95e 	bl	8007e70 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d102      	bne.n	8007bc4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f002 f99a 	bl	8009ef8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007bc4:	bf00      	nop
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d006      	beq.n	8007bea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	e001      	b.n	8007bee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bee:	68fb      	ldr	r3, [r7, #12]
	}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10d      	bne.n	8007c36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d14d      	bne.n	8007cbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 f98c 	bl	8008f44 <xTaskPriorityDisinherit>
 8007c2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	609a      	str	r2, [r3, #8]
 8007c34:	e043      	b.n	8007cbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d119      	bne.n	8007c70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6858      	ldr	r0, [r3, #4]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c44:	461a      	mov	r2, r3
 8007c46:	68b9      	ldr	r1, [r7, #8]
 8007c48:	f009 fa6b 	bl	8011122 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c54:	441a      	add	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d32b      	bcc.n	8007cbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	e026      	b.n	8007cbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	68d8      	ldr	r0, [r3, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c78:	461a      	mov	r2, r3
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	f009 fa51 	bl	8011122 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c88:	425b      	negs	r3, r3
 8007c8a:	441a      	add	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	68da      	ldr	r2, [r3, #12]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d207      	bcs.n	8007cac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca4:	425b      	negs	r3, r3
 8007ca6:	441a      	add	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d105      	bne.n	8007cbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007cc6:	697b      	ldr	r3, [r7, #20]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d018      	beq.n	8007d14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cea:	441a      	add	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d303      	bcc.n	8007d04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68d9      	ldr	r1, [r3, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6838      	ldr	r0, [r7, #0]
 8007d10:	f009 fa07 	bl	8011122 <memcpy>
	}
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d24:	f001 fef8 	bl	8009b18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d30:	e011      	b.n	8007d56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d012      	beq.n	8007d60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3324      	adds	r3, #36	@ 0x24
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 feba 	bl	8008ab8 <xTaskRemoveFromEventList>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d4a:	f000 ff93 	bl	8008c74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	dce9      	bgt.n	8007d32 <prvUnlockQueue+0x16>
 8007d5e:	e000      	b.n	8007d62 <prvUnlockQueue+0x46>
					break;
 8007d60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	22ff      	movs	r2, #255	@ 0xff
 8007d66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d6a:	f001 ff07 	bl	8009b7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d6e:	f001 fed3 	bl	8009b18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d7a:	e011      	b.n	8007da0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d012      	beq.n	8007daa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	3310      	adds	r3, #16
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 fe95 	bl	8008ab8 <xTaskRemoveFromEventList>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d94:	f000 ff6e 	bl	8008c74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d98:	7bbb      	ldrb	r3, [r7, #14]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007da0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	dce9      	bgt.n	8007d7c <prvUnlockQueue+0x60>
 8007da8:	e000      	b.n	8007dac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007daa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	22ff      	movs	r2, #255	@ 0xff
 8007db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007db4:	f001 fee2 	bl	8009b7c <vPortExitCritical>
}
 8007db8:	bf00      	nop
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dc8:	f001 fea6 	bl	8009b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d102      	bne.n	8007dda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	e001      	b.n	8007dde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dde:	f001 fecd 	bl	8009b7c <vPortExitCritical>

	return xReturn;
 8007de2:	68fb      	ldr	r3, [r7, #12]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007df4:	f001 fe90 	bl	8009b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d102      	bne.n	8007e0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e04:	2301      	movs	r3, #1
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	e001      	b.n	8007e0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e0e:	f001 feb5 	bl	8009b7c <vPortExitCritical>

	return xReturn;
 8007e12:	68fb      	ldr	r3, [r7, #12]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	e014      	b.n	8007e56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8007e6c <vQueueAddToRegistry+0x50>)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10b      	bne.n	8007e50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e38:	490c      	ldr	r1, [pc, #48]	@ (8007e6c <vQueueAddToRegistry+0x50>)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e42:	4a0a      	ldr	r2, [pc, #40]	@ (8007e6c <vQueueAddToRegistry+0x50>)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	4413      	add	r3, r2
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e4e:	e006      	b.n	8007e5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b07      	cmp	r3, #7
 8007e5a:	d9e7      	bls.n	8007e2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e5c:	bf00      	nop
 8007e5e:	bf00      	nop
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	20000c4c 	.word	0x20000c4c

08007e70 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e78:	2300      	movs	r3, #0
 8007e7a:	60fb      	str	r3, [r7, #12]
 8007e7c:	e016      	b.n	8007eac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e7e:	4a10      	ldr	r2, [pc, #64]	@ (8007ec0 <vQueueUnregisterQueue+0x50>)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	4413      	add	r3, r2
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d10b      	bne.n	8007ea6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ec0 <vQueueUnregisterQueue+0x50>)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2100      	movs	r1, #0
 8007e94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e98:	4a09      	ldr	r2, [pc, #36]	@ (8007ec0 <vQueueUnregisterQueue+0x50>)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	00db      	lsls	r3, r3, #3
 8007e9e:	4413      	add	r3, r2
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	605a      	str	r2, [r3, #4]
				break;
 8007ea4:	e006      	b.n	8007eb4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b07      	cmp	r3, #7
 8007eb0:	d9e5      	bls.n	8007e7e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007eb2:	bf00      	nop
 8007eb4:	bf00      	nop
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	20000c4c 	.word	0x20000c4c

08007ec4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ed4:	f001 fe20 	bl	8009b18 <vPortEnterCritical>
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ede:	b25b      	sxtb	r3, r3
 8007ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee4:	d103      	bne.n	8007eee <vQueueWaitForMessageRestricted+0x2a>
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ef4:	b25b      	sxtb	r3, r3
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efa:	d103      	bne.n	8007f04 <vQueueWaitForMessageRestricted+0x40>
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f04:	f001 fe3a 	bl	8009b7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d106      	bne.n	8007f1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	3324      	adds	r3, #36	@ 0x24
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 fda1 	bl	8008a60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f1e:	6978      	ldr	r0, [r7, #20]
 8007f20:	f7ff fefc 	bl	8007d1c <prvUnlockQueue>
	}
 8007f24:	bf00      	nop
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08e      	sub	sp, #56	@ 0x38
 8007f30:	af04      	add	r7, sp, #16
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10b      	bne.n	8007f58 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	623b      	str	r3, [r7, #32]
}
 8007f52:	bf00      	nop
 8007f54:	bf00      	nop
 8007f56:	e7fd      	b.n	8007f54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10b      	bne.n	8007f76 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	61fb      	str	r3, [r7, #28]
}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	e7fd      	b.n	8007f72 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f76:	235c      	movs	r3, #92	@ 0x5c
 8007f78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f7e:	d00b      	beq.n	8007f98 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	61bb      	str	r3, [r7, #24]
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	e7fd      	b.n	8007f94 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01e      	beq.n	8007fde <xTaskCreateStatic+0xb2>
 8007fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d01b      	beq.n	8007fde <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9303      	str	r3, [sp, #12]
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbe:	9302      	str	r3, [sp, #8]
 8007fc0:	f107 0314 	add.w	r3, r7, #20
 8007fc4:	9301      	str	r3, [sp, #4]
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 f850 	bl	8008076 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fd8:	f000 f8de 	bl	8008198 <prvAddNewTaskToReadyList>
 8007fdc:	e001      	b.n	8007fe2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fe2:	697b      	ldr	r3, [r7, #20]
	}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3728      	adds	r7, #40	@ 0x28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08c      	sub	sp, #48	@ 0x30
 8007ff0:	af04      	add	r7, sp, #16
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ffc:	88fb      	ldrh	r3, [r7, #6]
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4618      	mov	r0, r3
 8008002:	f001 feab 	bl	8009d5c <pvPortMalloc>
 8008006:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00e      	beq.n	800802c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800800e:	205c      	movs	r0, #92	@ 0x5c
 8008010:	f001 fea4 	bl	8009d5c <pvPortMalloc>
 8008014:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	631a      	str	r2, [r3, #48]	@ 0x30
 8008022:	e005      	b.n	8008030 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008024:	6978      	ldr	r0, [r7, #20]
 8008026:	f001 ff67 	bl	8009ef8 <vPortFree>
 800802a:	e001      	b.n	8008030 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800802c:	2300      	movs	r3, #0
 800802e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d017      	beq.n	8008066 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800803e:	88fa      	ldrh	r2, [r7, #6]
 8008040:	2300      	movs	r3, #0
 8008042:	9303      	str	r3, [sp, #12]
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	9302      	str	r3, [sp, #8]
 8008048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	68b9      	ldr	r1, [r7, #8]
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 f80e 	bl	8008076 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800805a:	69f8      	ldr	r0, [r7, #28]
 800805c:	f000 f89c 	bl	8008198 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008060:	2301      	movs	r3, #1
 8008062:	61bb      	str	r3, [r7, #24]
 8008064:	e002      	b.n	800806c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008066:	f04f 33ff 	mov.w	r3, #4294967295
 800806a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800806c:	69bb      	ldr	r3, [r7, #24]
	}
 800806e:	4618      	mov	r0, r3
 8008070:	3720      	adds	r7, #32
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b088      	sub	sp, #32
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
 8008082:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008086:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	461a      	mov	r2, r3
 800808e:	21a5      	movs	r1, #165	@ 0xa5
 8008090:	f008 ffbb 	bl	801100a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800809e:	3b01      	subs	r3, #1
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	f023 0307 	bic.w	r3, r3, #7
 80080ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	f003 0307 	and.w	r3, r3, #7
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	617b      	str	r3, [r7, #20]
}
 80080ca:	bf00      	nop
 80080cc:	bf00      	nop
 80080ce:	e7fd      	b.n	80080cc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d01f      	beq.n	8008116 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080d6:	2300      	movs	r3, #0
 80080d8:	61fb      	str	r3, [r7, #28]
 80080da:	e012      	b.n	8008102 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	4413      	add	r3, r2
 80080e2:	7819      	ldrb	r1, [r3, #0]
 80080e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	4413      	add	r3, r2
 80080ea:	3334      	adds	r3, #52	@ 0x34
 80080ec:	460a      	mov	r2, r1
 80080ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	4413      	add	r3, r2
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d006      	beq.n	800810a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	3301      	adds	r3, #1
 8008100:	61fb      	str	r3, [r7, #28]
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	2b0f      	cmp	r3, #15
 8008106:	d9e9      	bls.n	80080dc <prvInitialiseNewTask+0x66>
 8008108:	e000      	b.n	800810c <prvInitialiseNewTask+0x96>
			{
				break;
 800810a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800810c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008114:	e003      	b.n	800811e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800811e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008120:	2b37      	cmp	r3, #55	@ 0x37
 8008122:	d901      	bls.n	8008128 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008124:	2337      	movs	r3, #55	@ 0x37
 8008126:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800812c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008132:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008136:	2200      	movs	r2, #0
 8008138:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	3304      	adds	r3, #4
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe fe34 	bl	8006dac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008146:	3318      	adds	r3, #24
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fe2f 	bl	8006dac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008152:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008156:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008162:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008166:	2200      	movs	r2, #0
 8008168:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	68f9      	ldr	r1, [r7, #12]
 8008176:	69b8      	ldr	r0, [r7, #24]
 8008178:	f001 fb9a 	bl	80098b0 <pxPortInitialiseStack>
 800817c:	4602      	mov	r2, r0
 800817e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008180:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800818c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800818e:	bf00      	nop
 8008190:	3720      	adds	r7, #32
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081a0:	f001 fcba 	bl	8009b18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081a4:	4b2d      	ldr	r3, [pc, #180]	@ (800825c <prvAddNewTaskToReadyList+0xc4>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3301      	adds	r3, #1
 80081aa:	4a2c      	ldr	r2, [pc, #176]	@ (800825c <prvAddNewTaskToReadyList+0xc4>)
 80081ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081ae:	4b2c      	ldr	r3, [pc, #176]	@ (8008260 <prvAddNewTaskToReadyList+0xc8>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008260 <prvAddNewTaskToReadyList+0xc8>)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081bc:	4b27      	ldr	r3, [pc, #156]	@ (800825c <prvAddNewTaskToReadyList+0xc4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d110      	bne.n	80081e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081c4:	f000 fd7a 	bl	8008cbc <prvInitialiseTaskLists>
 80081c8:	e00d      	b.n	80081e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081ca:	4b26      	ldr	r3, [pc, #152]	@ (8008264 <prvAddNewTaskToReadyList+0xcc>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d109      	bne.n	80081e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081d2:	4b23      	ldr	r3, [pc, #140]	@ (8008260 <prvAddNewTaskToReadyList+0xc8>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081dc:	429a      	cmp	r2, r3
 80081de:	d802      	bhi.n	80081e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008260 <prvAddNewTaskToReadyList+0xc8>)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081e6:	4b20      	ldr	r3, [pc, #128]	@ (8008268 <prvAddNewTaskToReadyList+0xd0>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3301      	adds	r3, #1
 80081ec:	4a1e      	ldr	r2, [pc, #120]	@ (8008268 <prvAddNewTaskToReadyList+0xd0>)
 80081ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008268 <prvAddNewTaskToReadyList+0xd0>)
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081fc:	4b1b      	ldr	r3, [pc, #108]	@ (800826c <prvAddNewTaskToReadyList+0xd4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d903      	bls.n	800820c <prvAddNewTaskToReadyList+0x74>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008208:	4a18      	ldr	r2, [pc, #96]	@ (800826c <prvAddNewTaskToReadyList+0xd4>)
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4a15      	ldr	r2, [pc, #84]	@ (8008270 <prvAddNewTaskToReadyList+0xd8>)
 800821a:	441a      	add	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3304      	adds	r3, #4
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7fe fdcf 	bl	8006dc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008228:	f001 fca8 	bl	8009b7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800822c:	4b0d      	ldr	r3, [pc, #52]	@ (8008264 <prvAddNewTaskToReadyList+0xcc>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00e      	beq.n	8008252 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008234:	4b0a      	ldr	r3, [pc, #40]	@ (8008260 <prvAddNewTaskToReadyList+0xc8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823e:	429a      	cmp	r2, r3
 8008240:	d207      	bcs.n	8008252 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008242:	4b0c      	ldr	r3, [pc, #48]	@ (8008274 <prvAddNewTaskToReadyList+0xdc>)
 8008244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008248:	601a      	str	r2, [r3, #0]
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008252:	bf00      	nop
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20001160 	.word	0x20001160
 8008260:	20000c8c 	.word	0x20000c8c
 8008264:	2000116c 	.word	0x2000116c
 8008268:	2000117c 	.word	0x2000117c
 800826c:	20001168 	.word	0x20001168
 8008270:	20000c90 	.word	0x20000c90
 8008274:	e000ed04 	.word	0xe000ed04

08008278 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008280:	f001 fc4a 	bl	8009b18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d102      	bne.n	8008290 <vTaskDelete+0x18>
 800828a:	4b2d      	ldr	r3, [pc, #180]	@ (8008340 <vTaskDelete+0xc8>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	e000      	b.n	8008292 <vTaskDelete+0x1a>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3304      	adds	r3, #4
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe fdf1 	bl	8006e80 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d004      	beq.n	80082b0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3318      	adds	r3, #24
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fde8 	bl	8006e80 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80082b0:	4b24      	ldr	r3, [pc, #144]	@ (8008344 <vTaskDelete+0xcc>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3301      	adds	r3, #1
 80082b6:	4a23      	ldr	r2, [pc, #140]	@ (8008344 <vTaskDelete+0xcc>)
 80082b8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80082ba:	4b21      	ldr	r3, [pc, #132]	@ (8008340 <vTaskDelete+0xc8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d10b      	bne.n	80082dc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4619      	mov	r1, r3
 80082ca:	481f      	ldr	r0, [pc, #124]	@ (8008348 <vTaskDelete+0xd0>)
 80082cc:	f7fe fd7b 	bl	8006dc6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80082d0:	4b1e      	ldr	r3, [pc, #120]	@ (800834c <vTaskDelete+0xd4>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3301      	adds	r3, #1
 80082d6:	4a1d      	ldr	r2, [pc, #116]	@ (800834c <vTaskDelete+0xd4>)
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	e009      	b.n	80082f0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80082dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008350 <vTaskDelete+0xd8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008350 <vTaskDelete+0xd8>)
 80082e4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 fd56 	bl	8008d98 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80082ec:	f000 fd84 	bl	8008df8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80082f0:	f001 fc44 	bl	8009b7c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80082f4:	4b17      	ldr	r3, [pc, #92]	@ (8008354 <vTaskDelete+0xdc>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d01c      	beq.n	8008336 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80082fc:	4b10      	ldr	r3, [pc, #64]	@ (8008340 <vTaskDelete+0xc8>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	429a      	cmp	r2, r3
 8008304:	d117      	bne.n	8008336 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008306:	4b14      	ldr	r3, [pc, #80]	@ (8008358 <vTaskDelete+0xe0>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00b      	beq.n	8008326 <vTaskDelete+0xae>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	60bb      	str	r3, [r7, #8]
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	e7fd      	b.n	8008322 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008326:	4b0d      	ldr	r3, [pc, #52]	@ (800835c <vTaskDelete+0xe4>)
 8008328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	20000c8c 	.word	0x20000c8c
 8008344:	2000117c 	.word	0x2000117c
 8008348:	20001134 	.word	0x20001134
 800834c:	20001148 	.word	0x20001148
 8008350:	20001160 	.word	0x20001160
 8008354:	2000116c 	.word	0x2000116c
 8008358:	20001188 	.word	0x20001188
 800835c:	e000ed04 	.word	0xe000ed04

08008360 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08a      	sub	sp, #40	@ 0x28
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800836a:	2300      	movs	r3, #0
 800836c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10b      	bne.n	800838c <vTaskDelayUntil+0x2c>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	617b      	str	r3, [r7, #20]
}
 8008386:	bf00      	nop
 8008388:	bf00      	nop
 800838a:	e7fd      	b.n	8008388 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10b      	bne.n	80083aa <vTaskDelayUntil+0x4a>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	613b      	str	r3, [r7, #16]
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop
 80083a8:	e7fd      	b.n	80083a6 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80083aa:	4b2a      	ldr	r3, [pc, #168]	@ (8008454 <vTaskDelayUntil+0xf4>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00b      	beq.n	80083ca <vTaskDelayUntil+0x6a>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	60fb      	str	r3, [r7, #12]
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	e7fd      	b.n	80083c6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80083ca:	f000 f94f 	bl	800866c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80083ce:	4b22      	ldr	r3, [pc, #136]	@ (8008458 <vTaskDelayUntil+0xf8>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	4413      	add	r3, r2
 80083dc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6a3a      	ldr	r2, [r7, #32]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d20b      	bcs.n	8008400 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	69fa      	ldr	r2, [r7, #28]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d211      	bcs.n	8008416 <vTaskDelayUntil+0xb6>
 80083f2:	69fa      	ldr	r2, [r7, #28]
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d90d      	bls.n	8008416 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80083fa:	2301      	movs	r3, #1
 80083fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80083fe:	e00a      	b.n	8008416 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69fa      	ldr	r2, [r7, #28]
 8008406:	429a      	cmp	r2, r3
 8008408:	d303      	bcc.n	8008412 <vTaskDelayUntil+0xb2>
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	429a      	cmp	r2, r3
 8008410:	d901      	bls.n	8008416 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8008412:	2301      	movs	r3, #1
 8008414:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800841c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841e:	2b00      	cmp	r3, #0
 8008420:	d006      	beq.n	8008430 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008422:	69fa      	ldr	r2, [r7, #28]
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2100      	movs	r1, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fe92 	bl	8009154 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008430:	f000 f92a 	bl	8008688 <xTaskResumeAll>
 8008434:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d107      	bne.n	800844c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800843c:	4b07      	ldr	r3, [pc, #28]	@ (800845c <vTaskDelayUntil+0xfc>)
 800843e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800844c:	bf00      	nop
 800844e:	3728      	adds	r7, #40	@ 0x28
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20001188 	.word	0x20001188
 8008458:	20001164 	.word	0x20001164
 800845c:	e000ed04 	.word	0xe000ed04

08008460 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d018      	beq.n	80084a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008472:	4b14      	ldr	r3, [pc, #80]	@ (80084c4 <vTaskDelay+0x64>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00b      	beq.n	8008492 <vTaskDelay+0x32>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	60bb      	str	r3, [r7, #8]
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	e7fd      	b.n	800848e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008492:	f000 f8eb 	bl	800866c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008496:	2100      	movs	r1, #0
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fe5b 	bl	8009154 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800849e:	f000 f8f3 	bl	8008688 <xTaskResumeAll>
 80084a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d107      	bne.n	80084ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80084aa:	4b07      	ldr	r3, [pc, #28]	@ (80084c8 <vTaskDelay+0x68>)
 80084ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084ba:	bf00      	nop
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20001188 	.word	0x20001188
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10b      	bne.n	80084f6 <eTaskGetState+0x2a>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	60bb      	str	r3, [r7, #8]
}
 80084f0:	bf00      	nop
 80084f2:	bf00      	nop
 80084f4:	e7fd      	b.n	80084f2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80084f6:	4b24      	ldr	r3, [pc, #144]	@ (8008588 <eTaskGetState+0xbc>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d102      	bne.n	8008506 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8008500:	2300      	movs	r3, #0
 8008502:	77fb      	strb	r3, [r7, #31]
 8008504:	e03a      	b.n	800857c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8008506:	f001 fb07 	bl	8009b18 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8008510:	4b1e      	ldr	r3, [pc, #120]	@ (800858c <eTaskGetState+0xc0>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8008516:	4b1e      	ldr	r3, [pc, #120]	@ (8008590 <eTaskGetState+0xc4>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800851c:	f001 fb2e 	bl	8009b7c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	429a      	cmp	r2, r3
 8008526:	d003      	beq.n	8008530 <eTaskGetState+0x64>
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	429a      	cmp	r2, r3
 800852e:	d102      	bne.n	8008536 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8008530:	2302      	movs	r3, #2
 8008532:	77fb      	strb	r3, [r7, #31]
 8008534:	e022      	b.n	800857c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	4a16      	ldr	r2, [pc, #88]	@ (8008594 <eTaskGetState+0xc8>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d112      	bne.n	8008564 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10b      	bne.n	800855e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b01      	cmp	r3, #1
 8008550:	d102      	bne.n	8008558 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8008552:	2302      	movs	r3, #2
 8008554:	77fb      	strb	r3, [r7, #31]
 8008556:	e011      	b.n	800857c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8008558:	2303      	movs	r3, #3
 800855a:	77fb      	strb	r3, [r7, #31]
 800855c:	e00e      	b.n	800857c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800855e:	2302      	movs	r3, #2
 8008560:	77fb      	strb	r3, [r7, #31]
 8008562:	e00b      	b.n	800857c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	4a0c      	ldr	r2, [pc, #48]	@ (8008598 <eTaskGetState+0xcc>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d002      	beq.n	8008572 <eTaskGetState+0xa6>
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d102      	bne.n	8008578 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8008572:	2304      	movs	r3, #4
 8008574:	77fb      	strb	r3, [r7, #31]
 8008576:	e001      	b.n	800857c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8008578:	2301      	movs	r3, #1
 800857a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800857c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800857e:	4618      	mov	r0, r3
 8008580:	3720      	adds	r7, #32
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20000c8c 	.word	0x20000c8c
 800858c:	20001118 	.word	0x20001118
 8008590:	2000111c 	.word	0x2000111c
 8008594:	2000114c 	.word	0x2000114c
 8008598:	20001134 	.word	0x20001134

0800859c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08a      	sub	sp, #40	@ 0x28
 80085a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085aa:	463a      	mov	r2, r7
 80085ac:	1d39      	adds	r1, r7, #4
 80085ae:	f107 0308 	add.w	r3, r7, #8
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe fba6 	bl	8006d04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	9202      	str	r2, [sp, #8]
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	2300      	movs	r3, #0
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	2300      	movs	r3, #0
 80085c8:	460a      	mov	r2, r1
 80085ca:	4922      	ldr	r1, [pc, #136]	@ (8008654 <vTaskStartScheduler+0xb8>)
 80085cc:	4822      	ldr	r0, [pc, #136]	@ (8008658 <vTaskStartScheduler+0xbc>)
 80085ce:	f7ff fcad 	bl	8007f2c <xTaskCreateStatic>
 80085d2:	4603      	mov	r3, r0
 80085d4:	4a21      	ldr	r2, [pc, #132]	@ (800865c <vTaskStartScheduler+0xc0>)
 80085d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085d8:	4b20      	ldr	r3, [pc, #128]	@ (800865c <vTaskStartScheduler+0xc0>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085e0:	2301      	movs	r3, #1
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	e001      	b.n	80085ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d102      	bne.n	80085f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085f0:	f000 fe04 	bl	80091fc <xTimerCreateTimerTask>
 80085f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d116      	bne.n	800862a <vTaskStartScheduler+0x8e>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	613b      	str	r3, [r7, #16]
}
 800860e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008610:	4b13      	ldr	r3, [pc, #76]	@ (8008660 <vTaskStartScheduler+0xc4>)
 8008612:	f04f 32ff 	mov.w	r2, #4294967295
 8008616:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008618:	4b12      	ldr	r3, [pc, #72]	@ (8008664 <vTaskStartScheduler+0xc8>)
 800861a:	2201      	movs	r2, #1
 800861c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800861e:	4b12      	ldr	r3, [pc, #72]	@ (8008668 <vTaskStartScheduler+0xcc>)
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008624:	f001 f9d4 	bl	80099d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008628:	e00f      	b.n	800864a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008630:	d10b      	bne.n	800864a <vTaskStartScheduler+0xae>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	60fb      	str	r3, [r7, #12]
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop
 8008648:	e7fd      	b.n	8008646 <vTaskStartScheduler+0xaa>
}
 800864a:	bf00      	nop
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	08011c04 	.word	0x08011c04
 8008658:	08008c8d 	.word	0x08008c8d
 800865c:	20001184 	.word	0x20001184
 8008660:	20001180 	.word	0x20001180
 8008664:	2000116c 	.word	0x2000116c
 8008668:	20001164 	.word	0x20001164

0800866c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008670:	4b04      	ldr	r3, [pc, #16]	@ (8008684 <vTaskSuspendAll+0x18>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3301      	adds	r3, #1
 8008676:	4a03      	ldr	r2, [pc, #12]	@ (8008684 <vTaskSuspendAll+0x18>)
 8008678:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800867a:	bf00      	nop
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	20001188 	.word	0x20001188

08008688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008692:	2300      	movs	r3, #0
 8008694:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008696:	4b42      	ldr	r3, [pc, #264]	@ (80087a0 <xTaskResumeAll+0x118>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10b      	bne.n	80086b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	603b      	str	r3, [r7, #0]
}
 80086b0:	bf00      	nop
 80086b2:	bf00      	nop
 80086b4:	e7fd      	b.n	80086b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086b6:	f001 fa2f 	bl	8009b18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086ba:	4b39      	ldr	r3, [pc, #228]	@ (80087a0 <xTaskResumeAll+0x118>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3b01      	subs	r3, #1
 80086c0:	4a37      	ldr	r2, [pc, #220]	@ (80087a0 <xTaskResumeAll+0x118>)
 80086c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086c4:	4b36      	ldr	r3, [pc, #216]	@ (80087a0 <xTaskResumeAll+0x118>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d162      	bne.n	8008792 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086cc:	4b35      	ldr	r3, [pc, #212]	@ (80087a4 <xTaskResumeAll+0x11c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d05e      	beq.n	8008792 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086d4:	e02f      	b.n	8008736 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d6:	4b34      	ldr	r3, [pc, #208]	@ (80087a8 <xTaskResumeAll+0x120>)
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3318      	adds	r3, #24
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fbcc 	bl	8006e80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3304      	adds	r3, #4
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe fbc7 	bl	8006e80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086f6:	4b2d      	ldr	r3, [pc, #180]	@ (80087ac <xTaskResumeAll+0x124>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d903      	bls.n	8008706 <xTaskResumeAll+0x7e>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008702:	4a2a      	ldr	r2, [pc, #168]	@ (80087ac <xTaskResumeAll+0x124>)
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4a27      	ldr	r2, [pc, #156]	@ (80087b0 <xTaskResumeAll+0x128>)
 8008714:	441a      	add	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3304      	adds	r3, #4
 800871a:	4619      	mov	r1, r3
 800871c:	4610      	mov	r0, r2
 800871e:	f7fe fb52 	bl	8006dc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008726:	4b23      	ldr	r3, [pc, #140]	@ (80087b4 <xTaskResumeAll+0x12c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872c:	429a      	cmp	r2, r3
 800872e:	d302      	bcc.n	8008736 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008730:	4b21      	ldr	r3, [pc, #132]	@ (80087b8 <xTaskResumeAll+0x130>)
 8008732:	2201      	movs	r2, #1
 8008734:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008736:	4b1c      	ldr	r3, [pc, #112]	@ (80087a8 <xTaskResumeAll+0x120>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1cb      	bne.n	80086d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008744:	f000 fb58 	bl	8008df8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008748:	4b1c      	ldr	r3, [pc, #112]	@ (80087bc <xTaskResumeAll+0x134>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d010      	beq.n	8008776 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008754:	f000 f846 	bl	80087e4 <xTaskIncrementTick>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800875e:	4b16      	ldr	r3, [pc, #88]	@ (80087b8 <xTaskResumeAll+0x130>)
 8008760:	2201      	movs	r2, #1
 8008762:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	3b01      	subs	r3, #1
 8008768:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1f1      	bne.n	8008754 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008770:	4b12      	ldr	r3, [pc, #72]	@ (80087bc <xTaskResumeAll+0x134>)
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008776:	4b10      	ldr	r3, [pc, #64]	@ (80087b8 <xTaskResumeAll+0x130>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d009      	beq.n	8008792 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800877e:	2301      	movs	r3, #1
 8008780:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008782:	4b0f      	ldr	r3, [pc, #60]	@ (80087c0 <xTaskResumeAll+0x138>)
 8008784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008792:	f001 f9f3 	bl	8009b7c <vPortExitCritical>

	return xAlreadyYielded;
 8008796:	68bb      	ldr	r3, [r7, #8]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20001188 	.word	0x20001188
 80087a4:	20001160 	.word	0x20001160
 80087a8:	20001120 	.word	0x20001120
 80087ac:	20001168 	.word	0x20001168
 80087b0:	20000c90 	.word	0x20000c90
 80087b4:	20000c8c 	.word	0x20000c8c
 80087b8:	20001174 	.word	0x20001174
 80087bc:	20001170 	.word	0x20001170
 80087c0:	e000ed04 	.word	0xe000ed04

080087c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087ca:	4b05      	ldr	r3, [pc, #20]	@ (80087e0 <xTaskGetTickCount+0x1c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087d0:	687b      	ldr	r3, [r7, #4]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	20001164 	.word	0x20001164

080087e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ee:	4b4f      	ldr	r3, [pc, #316]	@ (800892c <xTaskIncrementTick+0x148>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f040 8090 	bne.w	8008918 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087f8:	4b4d      	ldr	r3, [pc, #308]	@ (8008930 <xTaskIncrementTick+0x14c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3301      	adds	r3, #1
 80087fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008800:	4a4b      	ldr	r2, [pc, #300]	@ (8008930 <xTaskIncrementTick+0x14c>)
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d121      	bne.n	8008850 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800880c:	4b49      	ldr	r3, [pc, #292]	@ (8008934 <xTaskIncrementTick+0x150>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00b      	beq.n	800882e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	603b      	str	r3, [r7, #0]
}
 8008828:	bf00      	nop
 800882a:	bf00      	nop
 800882c:	e7fd      	b.n	800882a <xTaskIncrementTick+0x46>
 800882e:	4b41      	ldr	r3, [pc, #260]	@ (8008934 <xTaskIncrementTick+0x150>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	4b40      	ldr	r3, [pc, #256]	@ (8008938 <xTaskIncrementTick+0x154>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a3e      	ldr	r2, [pc, #248]	@ (8008934 <xTaskIncrementTick+0x150>)
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	4a3e      	ldr	r2, [pc, #248]	@ (8008938 <xTaskIncrementTick+0x154>)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	4b3e      	ldr	r3, [pc, #248]	@ (800893c <xTaskIncrementTick+0x158>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3301      	adds	r3, #1
 8008848:	4a3c      	ldr	r2, [pc, #240]	@ (800893c <xTaskIncrementTick+0x158>)
 800884a:	6013      	str	r3, [r2, #0]
 800884c:	f000 fad4 	bl	8008df8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008850:	4b3b      	ldr	r3, [pc, #236]	@ (8008940 <xTaskIncrementTick+0x15c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	429a      	cmp	r2, r3
 8008858:	d349      	bcc.n	80088ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800885a:	4b36      	ldr	r3, [pc, #216]	@ (8008934 <xTaskIncrementTick+0x150>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d104      	bne.n	800886e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008864:	4b36      	ldr	r3, [pc, #216]	@ (8008940 <xTaskIncrementTick+0x15c>)
 8008866:	f04f 32ff 	mov.w	r2, #4294967295
 800886a:	601a      	str	r2, [r3, #0]
					break;
 800886c:	e03f      	b.n	80088ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800886e:	4b31      	ldr	r3, [pc, #196]	@ (8008934 <xTaskIncrementTick+0x150>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	429a      	cmp	r2, r3
 8008884:	d203      	bcs.n	800888e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008886:	4a2e      	ldr	r2, [pc, #184]	@ (8008940 <xTaskIncrementTick+0x15c>)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800888c:	e02f      	b.n	80088ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	3304      	adds	r3, #4
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe faf4 	bl	8006e80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889c:	2b00      	cmp	r3, #0
 800889e:	d004      	beq.n	80088aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	3318      	adds	r3, #24
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe faeb 	bl	8006e80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ae:	4b25      	ldr	r3, [pc, #148]	@ (8008944 <xTaskIncrementTick+0x160>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d903      	bls.n	80088be <xTaskIncrementTick+0xda>
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ba:	4a22      	ldr	r2, [pc, #136]	@ (8008944 <xTaskIncrementTick+0x160>)
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c2:	4613      	mov	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008948 <xTaskIncrementTick+0x164>)
 80088cc:	441a      	add	r2, r3
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	3304      	adds	r3, #4
 80088d2:	4619      	mov	r1, r3
 80088d4:	4610      	mov	r0, r2
 80088d6:	f7fe fa76 	bl	8006dc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088de:	4b1b      	ldr	r3, [pc, #108]	@ (800894c <xTaskIncrementTick+0x168>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d3b8      	bcc.n	800885a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80088e8:	2301      	movs	r3, #1
 80088ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ec:	e7b5      	b.n	800885a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088ee:	4b17      	ldr	r3, [pc, #92]	@ (800894c <xTaskIncrementTick+0x168>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f4:	4914      	ldr	r1, [pc, #80]	@ (8008948 <xTaskIncrementTick+0x164>)
 80088f6:	4613      	mov	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	440b      	add	r3, r1
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d901      	bls.n	800890a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008906:	2301      	movs	r3, #1
 8008908:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800890a:	4b11      	ldr	r3, [pc, #68]	@ (8008950 <xTaskIncrementTick+0x16c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d007      	beq.n	8008922 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008912:	2301      	movs	r3, #1
 8008914:	617b      	str	r3, [r7, #20]
 8008916:	e004      	b.n	8008922 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008918:	4b0e      	ldr	r3, [pc, #56]	@ (8008954 <xTaskIncrementTick+0x170>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3301      	adds	r3, #1
 800891e:	4a0d      	ldr	r2, [pc, #52]	@ (8008954 <xTaskIncrementTick+0x170>)
 8008920:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008922:	697b      	ldr	r3, [r7, #20]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	20001188 	.word	0x20001188
 8008930:	20001164 	.word	0x20001164
 8008934:	20001118 	.word	0x20001118
 8008938:	2000111c 	.word	0x2000111c
 800893c:	20001178 	.word	0x20001178
 8008940:	20001180 	.word	0x20001180
 8008944:	20001168 	.word	0x20001168
 8008948:	20000c90 	.word	0x20000c90
 800894c:	20000c8c 	.word	0x20000c8c
 8008950:	20001174 	.word	0x20001174
 8008954:	20001170 	.word	0x20001170

08008958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800895e:	4b28      	ldr	r3, [pc, #160]	@ (8008a00 <vTaskSwitchContext+0xa8>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008966:	4b27      	ldr	r3, [pc, #156]	@ (8008a04 <vTaskSwitchContext+0xac>)
 8008968:	2201      	movs	r2, #1
 800896a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800896c:	e042      	b.n	80089f4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800896e:	4b25      	ldr	r3, [pc, #148]	@ (8008a04 <vTaskSwitchContext+0xac>)
 8008970:	2200      	movs	r2, #0
 8008972:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008974:	4b24      	ldr	r3, [pc, #144]	@ (8008a08 <vTaskSwitchContext+0xb0>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	e011      	b.n	80089a0 <vTaskSwitchContext+0x48>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10b      	bne.n	800899a <vTaskSwitchContext+0x42>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	607b      	str	r3, [r7, #4]
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop
 8008998:	e7fd      	b.n	8008996 <vTaskSwitchContext+0x3e>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3b01      	subs	r3, #1
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	491a      	ldr	r1, [pc, #104]	@ (8008a0c <vTaskSwitchContext+0xb4>)
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	4613      	mov	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	440b      	add	r3, r1
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0e3      	beq.n	800897c <vTaskSwitchContext+0x24>
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	4613      	mov	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4a13      	ldr	r2, [pc, #76]	@ (8008a0c <vTaskSwitchContext+0xb4>)
 80089c0:	4413      	add	r3, r2
 80089c2:	60bb      	str	r3, [r7, #8]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	605a      	str	r2, [r3, #4]
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	3308      	adds	r3, #8
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d104      	bne.n	80089e4 <vTaskSwitchContext+0x8c>
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	605a      	str	r2, [r3, #4]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	4a09      	ldr	r2, [pc, #36]	@ (8008a10 <vTaskSwitchContext+0xb8>)
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	4a06      	ldr	r2, [pc, #24]	@ (8008a08 <vTaskSwitchContext+0xb0>)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6013      	str	r3, [r2, #0]
}
 80089f4:	bf00      	nop
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	20001188 	.word	0x20001188
 8008a04:	20001174 	.word	0x20001174
 8008a08:	20001168 	.word	0x20001168
 8008a0c:	20000c90 	.word	0x20000c90
 8008a10:	20000c8c 	.word	0x20000c8c

08008a14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10b      	bne.n	8008a3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	60fb      	str	r3, [r7, #12]
}
 8008a36:	bf00      	nop
 8008a38:	bf00      	nop
 8008a3a:	e7fd      	b.n	8008a38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a3c:	4b07      	ldr	r3, [pc, #28]	@ (8008a5c <vTaskPlaceOnEventList+0x48>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3318      	adds	r3, #24
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f7fe f9e2 	bl	8006e0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	6838      	ldr	r0, [r7, #0]
 8008a4e:	f000 fb81 	bl	8009154 <prvAddCurrentTaskToDelayedList>
}
 8008a52:	bf00      	nop
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20000c8c 	.word	0x20000c8c

08008a60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10b      	bne.n	8008a8a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	617b      	str	r3, [r7, #20]
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop
 8008a88:	e7fd      	b.n	8008a86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3318      	adds	r3, #24
 8008a90:	4619      	mov	r1, r3
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f7fe f997 	bl	8006dc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d002      	beq.n	8008aa4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	68b8      	ldr	r0, [r7, #8]
 8008aa8:	f000 fb54 	bl	8009154 <prvAddCurrentTaskToDelayedList>
	}
 8008aac:	bf00      	nop
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	20000c8c 	.word	0x20000c8c

08008ab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10b      	bne.n	8008ae6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	60fb      	str	r3, [r7, #12]
}
 8008ae0:	bf00      	nop
 8008ae2:	bf00      	nop
 8008ae4:	e7fd      	b.n	8008ae2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	3318      	adds	r3, #24
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe f9c8 	bl	8006e80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008af0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b68 <xTaskRemoveFromEventList+0xb0>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d11d      	bne.n	8008b34 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	3304      	adds	r3, #4
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fe f9bf 	bl	8006e80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b06:	4b19      	ldr	r3, [pc, #100]	@ (8008b6c <xTaskRemoveFromEventList+0xb4>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d903      	bls.n	8008b16 <xTaskRemoveFromEventList+0x5e>
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b12:	4a16      	ldr	r2, [pc, #88]	@ (8008b6c <xTaskRemoveFromEventList+0xb4>)
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4a13      	ldr	r2, [pc, #76]	@ (8008b70 <xTaskRemoveFromEventList+0xb8>)
 8008b24:	441a      	add	r2, r3
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	3304      	adds	r3, #4
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	f7fe f94a 	bl	8006dc6 <vListInsertEnd>
 8008b32:	e005      	b.n	8008b40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	3318      	adds	r3, #24
 8008b38:	4619      	mov	r1, r3
 8008b3a:	480e      	ldr	r0, [pc, #56]	@ (8008b74 <xTaskRemoveFromEventList+0xbc>)
 8008b3c:	f7fe f943 	bl	8006dc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b44:	4b0c      	ldr	r3, [pc, #48]	@ (8008b78 <xTaskRemoveFromEventList+0xc0>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d905      	bls.n	8008b5a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b52:	4b0a      	ldr	r3, [pc, #40]	@ (8008b7c <xTaskRemoveFromEventList+0xc4>)
 8008b54:	2201      	movs	r2, #1
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	e001      	b.n	8008b5e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b5e:	697b      	ldr	r3, [r7, #20]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20001188 	.word	0x20001188
 8008b6c:	20001168 	.word	0x20001168
 8008b70:	20000c90 	.word	0x20000c90
 8008b74:	20001120 	.word	0x20001120
 8008b78:	20000c8c 	.word	0x20000c8c
 8008b7c:	20001174 	.word	0x20001174

08008b80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b88:	4b06      	ldr	r3, [pc, #24]	@ (8008ba4 <vTaskInternalSetTimeOutState+0x24>)
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b90:	4b05      	ldr	r3, [pc, #20]	@ (8008ba8 <vTaskInternalSetTimeOutState+0x28>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	605a      	str	r2, [r3, #4]
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	20001178 	.word	0x20001178
 8008ba8:	20001164 	.word	0x20001164

08008bac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10b      	bne.n	8008bd4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	613b      	str	r3, [r7, #16]
}
 8008bce:	bf00      	nop
 8008bd0:	bf00      	nop
 8008bd2:	e7fd      	b.n	8008bd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10b      	bne.n	8008bf2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	60fb      	str	r3, [r7, #12]
}
 8008bec:	bf00      	nop
 8008bee:	bf00      	nop
 8008bf0:	e7fd      	b.n	8008bee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008bf2:	f000 ff91 	bl	8009b18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8008c6c <xTaskCheckForTimeOut+0xc0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0e:	d102      	bne.n	8008c16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c10:	2300      	movs	r3, #0
 8008c12:	61fb      	str	r3, [r7, #28]
 8008c14:	e023      	b.n	8008c5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	4b15      	ldr	r3, [pc, #84]	@ (8008c70 <xTaskCheckForTimeOut+0xc4>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d007      	beq.n	8008c32 <xTaskCheckForTimeOut+0x86>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d302      	bcc.n	8008c32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	61fb      	str	r3, [r7, #28]
 8008c30:	e015      	b.n	8008c5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d20b      	bcs.n	8008c54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	1ad2      	subs	r2, r2, r3
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff ff99 	bl	8008b80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
 8008c52:	e004      	b.n	8008c5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2200      	movs	r2, #0
 8008c58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c5e:	f000 ff8d 	bl	8009b7c <vPortExitCritical>

	return xReturn;
 8008c62:	69fb      	ldr	r3, [r7, #28]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3720      	adds	r7, #32
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20001164 	.word	0x20001164
 8008c70:	20001178 	.word	0x20001178

08008c74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c74:	b480      	push	{r7}
 8008c76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c78:	4b03      	ldr	r3, [pc, #12]	@ (8008c88 <vTaskMissedYield+0x14>)
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	601a      	str	r2, [r3, #0]
}
 8008c7e:	bf00      	nop
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	20001174 	.word	0x20001174

08008c8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c94:	f000 f852 	bl	8008d3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c98:	4b06      	ldr	r3, [pc, #24]	@ (8008cb4 <prvIdleTask+0x28>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d9f9      	bls.n	8008c94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ca0:	4b05      	ldr	r3, [pc, #20]	@ (8008cb8 <prvIdleTask+0x2c>)
 8008ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008cb0:	e7f0      	b.n	8008c94 <prvIdleTask+0x8>
 8008cb2:	bf00      	nop
 8008cb4:	20000c90 	.word	0x20000c90
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	607b      	str	r3, [r7, #4]
 8008cc6:	e00c      	b.n	8008ce2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4a12      	ldr	r2, [pc, #72]	@ (8008d1c <prvInitialiseTaskLists+0x60>)
 8008cd4:	4413      	add	r3, r2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe f848 	bl	8006d6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	607b      	str	r3, [r7, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b37      	cmp	r3, #55	@ 0x37
 8008ce6:	d9ef      	bls.n	8008cc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ce8:	480d      	ldr	r0, [pc, #52]	@ (8008d20 <prvInitialiseTaskLists+0x64>)
 8008cea:	f7fe f83f 	bl	8006d6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cee:	480d      	ldr	r0, [pc, #52]	@ (8008d24 <prvInitialiseTaskLists+0x68>)
 8008cf0:	f7fe f83c 	bl	8006d6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cf4:	480c      	ldr	r0, [pc, #48]	@ (8008d28 <prvInitialiseTaskLists+0x6c>)
 8008cf6:	f7fe f839 	bl	8006d6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008cfa:	480c      	ldr	r0, [pc, #48]	@ (8008d2c <prvInitialiseTaskLists+0x70>)
 8008cfc:	f7fe f836 	bl	8006d6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d00:	480b      	ldr	r0, [pc, #44]	@ (8008d30 <prvInitialiseTaskLists+0x74>)
 8008d02:	f7fe f833 	bl	8006d6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d06:	4b0b      	ldr	r3, [pc, #44]	@ (8008d34 <prvInitialiseTaskLists+0x78>)
 8008d08:	4a05      	ldr	r2, [pc, #20]	@ (8008d20 <prvInitialiseTaskLists+0x64>)
 8008d0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d38 <prvInitialiseTaskLists+0x7c>)
 8008d0e:	4a05      	ldr	r2, [pc, #20]	@ (8008d24 <prvInitialiseTaskLists+0x68>)
 8008d10:	601a      	str	r2, [r3, #0]
}
 8008d12:	bf00      	nop
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20000c90 	.word	0x20000c90
 8008d20:	200010f0 	.word	0x200010f0
 8008d24:	20001104 	.word	0x20001104
 8008d28:	20001120 	.word	0x20001120
 8008d2c:	20001134 	.word	0x20001134
 8008d30:	2000114c 	.word	0x2000114c
 8008d34:	20001118 	.word	0x20001118
 8008d38:	2000111c 	.word	0x2000111c

08008d3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d42:	e019      	b.n	8008d78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d44:	f000 fee8 	bl	8009b18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d48:	4b10      	ldr	r3, [pc, #64]	@ (8008d8c <prvCheckTasksWaitingTermination+0x50>)
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3304      	adds	r3, #4
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe f893 	bl	8006e80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d90 <prvCheckTasksWaitingTermination+0x54>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	4a0b      	ldr	r2, [pc, #44]	@ (8008d90 <prvCheckTasksWaitingTermination+0x54>)
 8008d62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d64:	4b0b      	ldr	r3, [pc, #44]	@ (8008d94 <prvCheckTasksWaitingTermination+0x58>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8008d94 <prvCheckTasksWaitingTermination+0x58>)
 8008d6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d6e:	f000 ff05 	bl	8009b7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f810 	bl	8008d98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d78:	4b06      	ldr	r3, [pc, #24]	@ (8008d94 <prvCheckTasksWaitingTermination+0x58>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e1      	bne.n	8008d44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d80:	bf00      	nop
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20001134 	.word	0x20001134
 8008d90:	20001160 	.word	0x20001160
 8008d94:	20001148 	.word	0x20001148

08008d98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d108      	bne.n	8008dbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 f8a2 	bl	8009ef8 <vPortFree>
				vPortFree( pxTCB );
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f001 f89f 	bl	8009ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008dba:	e019      	b.n	8008df0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d103      	bne.n	8008dce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 f896 	bl	8009ef8 <vPortFree>
	}
 8008dcc:	e010      	b.n	8008df0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d00b      	beq.n	8008df0 <prvDeleteTCB+0x58>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	60fb      	str	r3, [r7, #12]
}
 8008dea:	bf00      	nop
 8008dec:	bf00      	nop
 8008dee:	e7fd      	b.n	8008dec <prvDeleteTCB+0x54>
	}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8008e30 <prvResetNextTaskUnblockTime+0x38>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d104      	bne.n	8008e12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e08:	4b0a      	ldr	r3, [pc, #40]	@ (8008e34 <prvResetNextTaskUnblockTime+0x3c>)
 8008e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e10:	e008      	b.n	8008e24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e12:	4b07      	ldr	r3, [pc, #28]	@ (8008e30 <prvResetNextTaskUnblockTime+0x38>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	4a04      	ldr	r2, [pc, #16]	@ (8008e34 <prvResetNextTaskUnblockTime+0x3c>)
 8008e22:	6013      	str	r3, [r2, #0]
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	20001118 	.word	0x20001118
 8008e34:	20001180 	.word	0x20001180

08008e38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e6c <xTaskGetSchedulerState+0x34>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d102      	bne.n	8008e4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e46:	2301      	movs	r3, #1
 8008e48:	607b      	str	r3, [r7, #4]
 8008e4a:	e008      	b.n	8008e5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e4c:	4b08      	ldr	r3, [pc, #32]	@ (8008e70 <xTaskGetSchedulerState+0x38>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d102      	bne.n	8008e5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e54:	2302      	movs	r3, #2
 8008e56:	607b      	str	r3, [r7, #4]
 8008e58:	e001      	b.n	8008e5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e5e:	687b      	ldr	r3, [r7, #4]
	}
 8008e60:	4618      	mov	r0, r3
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	2000116c 	.word	0x2000116c
 8008e70:	20001188 	.word	0x20001188

08008e74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d051      	beq.n	8008f2e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8008f38 <xTaskPriorityInherit+0xc4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d241      	bcs.n	8008f1c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	db06      	blt.n	8008eae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea0:	4b25      	ldr	r3, [pc, #148]	@ (8008f38 <xTaskPriorityInherit+0xc4>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	6959      	ldr	r1, [r3, #20]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8008f3c <xTaskPriorityInherit+0xc8>)
 8008ec0:	4413      	add	r3, r2
 8008ec2:	4299      	cmp	r1, r3
 8008ec4:	d122      	bne.n	8008f0c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fd ffd8 	bl	8006e80 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ed0:	4b19      	ldr	r3, [pc, #100]	@ (8008f38 <xTaskPriorityInherit+0xc4>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ede:	4b18      	ldr	r3, [pc, #96]	@ (8008f40 <xTaskPriorityInherit+0xcc>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d903      	bls.n	8008eee <xTaskPriorityInherit+0x7a>
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eea:	4a15      	ldr	r2, [pc, #84]	@ (8008f40 <xTaskPriorityInherit+0xcc>)
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4a10      	ldr	r2, [pc, #64]	@ (8008f3c <xTaskPriorityInherit+0xc8>)
 8008efc:	441a      	add	r2, r3
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	3304      	adds	r3, #4
 8008f02:	4619      	mov	r1, r3
 8008f04:	4610      	mov	r0, r2
 8008f06:	f7fd ff5e 	bl	8006dc6 <vListInsertEnd>
 8008f0a:	e004      	b.n	8008f16 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f38 <xTaskPriorityInherit+0xc4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008f16:	2301      	movs	r3, #1
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	e008      	b.n	8008f2e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f20:	4b05      	ldr	r3, [pc, #20]	@ (8008f38 <xTaskPriorityInherit+0xc4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d201      	bcs.n	8008f2e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
	}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	20000c8c 	.word	0x20000c8c
 8008f3c:	20000c90 	.word	0x20000c90
 8008f40:	20001168 	.word	0x20001168

08008f44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f50:	2300      	movs	r3, #0
 8008f52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d058      	beq.n	800900c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8009018 <xTaskPriorityDisinherit+0xd4>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d00b      	beq.n	8008f7c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	60fb      	str	r3, [r7, #12]
}
 8008f76:	bf00      	nop
 8008f78:	bf00      	nop
 8008f7a:	e7fd      	b.n	8008f78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10b      	bne.n	8008f9c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	60bb      	str	r3, [r7, #8]
}
 8008f96:	bf00      	nop
 8008f98:	bf00      	nop
 8008f9a:	e7fd      	b.n	8008f98 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa0:	1e5a      	subs	r2, r3, #1
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d02c      	beq.n	800900c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d128      	bne.n	800900c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fd ff5e 	bl	8006e80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800901c <xTaskPriorityDisinherit+0xd8>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d903      	bls.n	8008fec <xTaskPriorityDisinherit+0xa8>
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800901c <xTaskPriorityDisinherit+0xd8>)
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4413      	add	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4a09      	ldr	r2, [pc, #36]	@ (8009020 <xTaskPriorityDisinherit+0xdc>)
 8008ffa:	441a      	add	r2, r3
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	3304      	adds	r3, #4
 8009000:	4619      	mov	r1, r3
 8009002:	4610      	mov	r0, r2
 8009004:	f7fd fedf 	bl	8006dc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009008:	2301      	movs	r3, #1
 800900a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800900c:	697b      	ldr	r3, [r7, #20]
	}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000c8c 	.word	0x20000c8c
 800901c:	20001168 	.word	0x20001168
 8009020:	20000c90 	.word	0x20000c90

08009024 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009032:	2301      	movs	r3, #1
 8009034:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d06c      	beq.n	8009116 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10b      	bne.n	800905c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	60fb      	str	r3, [r7, #12]
}
 8009056:	bf00      	nop
 8009058:	bf00      	nop
 800905a:	e7fd      	b.n	8009058 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d902      	bls.n	800906c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	61fb      	str	r3, [r7, #28]
 800906a:	e002      	b.n	8009072 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009070:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	429a      	cmp	r2, r3
 800907a:	d04c      	beq.n	8009116 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	429a      	cmp	r2, r3
 8009084:	d147      	bne.n	8009116 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009086:	4b26      	ldr	r3, [pc, #152]	@ (8009120 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	429a      	cmp	r2, r3
 800908e:	d10b      	bne.n	80090a8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	60bb      	str	r3, [r7, #8]
}
 80090a2:	bf00      	nop
 80090a4:	bf00      	nop
 80090a6:	e7fd      	b.n	80090a4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	69fa      	ldr	r2, [r7, #28]
 80090b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	db04      	blt.n	80090c6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	6959      	ldr	r1, [r3, #20]
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	4613      	mov	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4a13      	ldr	r2, [pc, #76]	@ (8009124 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80090d6:	4413      	add	r3, r2
 80090d8:	4299      	cmp	r1, r3
 80090da:	d11c      	bne.n	8009116 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	3304      	adds	r3, #4
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fd fecd 	bl	8006e80 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009128 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d903      	bls.n	80090fa <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f6:	4a0c      	ldr	r2, [pc, #48]	@ (8009128 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090fe:	4613      	mov	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4a07      	ldr	r2, [pc, #28]	@ (8009124 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009108:	441a      	add	r2, r3
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	3304      	adds	r3, #4
 800910e:	4619      	mov	r1, r3
 8009110:	4610      	mov	r0, r2
 8009112:	f7fd fe58 	bl	8006dc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009116:	bf00      	nop
 8009118:	3720      	adds	r7, #32
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000c8c 	.word	0x20000c8c
 8009124:	20000c90 	.word	0x20000c90
 8009128:	20001168 	.word	0x20001168

0800912c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800912c:	b480      	push	{r7}
 800912e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009130:	4b07      	ldr	r3, [pc, #28]	@ (8009150 <pvTaskIncrementMutexHeldCount+0x24>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d004      	beq.n	8009142 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009138:	4b05      	ldr	r3, [pc, #20]	@ (8009150 <pvTaskIncrementMutexHeldCount+0x24>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800913e:	3201      	adds	r2, #1
 8009140:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009142:	4b03      	ldr	r3, [pc, #12]	@ (8009150 <pvTaskIncrementMutexHeldCount+0x24>)
 8009144:	681b      	ldr	r3, [r3, #0]
	}
 8009146:	4618      	mov	r0, r3
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	20000c8c 	.word	0x20000c8c

08009154 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800915e:	4b21      	ldr	r3, [pc, #132]	@ (80091e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009164:	4b20      	ldr	r3, [pc, #128]	@ (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3304      	adds	r3, #4
 800916a:	4618      	mov	r0, r3
 800916c:	f7fd fe88 	bl	8006e80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d10a      	bne.n	800918e <prvAddCurrentTaskToDelayedList+0x3a>
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d007      	beq.n	800918e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800917e:	4b1a      	ldr	r3, [pc, #104]	@ (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3304      	adds	r3, #4
 8009184:	4619      	mov	r1, r3
 8009186:	4819      	ldr	r0, [pc, #100]	@ (80091ec <prvAddCurrentTaskToDelayedList+0x98>)
 8009188:	f7fd fe1d 	bl	8006dc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800918c:	e026      	b.n	80091dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4413      	add	r3, r2
 8009194:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009196:	4b14      	ldr	r3, [pc, #80]	@ (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d209      	bcs.n	80091ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091a6:	4b12      	ldr	r3, [pc, #72]	@ (80091f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	4b0f      	ldr	r3, [pc, #60]	@ (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3304      	adds	r3, #4
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f7fd fe2b 	bl	8006e0e <vListInsert>
}
 80091b8:	e010      	b.n	80091dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ba:	4b0e      	ldr	r3, [pc, #56]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	4b0a      	ldr	r3, [pc, #40]	@ (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	3304      	adds	r3, #4
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f7fd fe21 	bl	8006e0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091cc:	4b0a      	ldr	r3, [pc, #40]	@ (80091f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d202      	bcs.n	80091dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091d6:	4a08      	ldr	r2, [pc, #32]	@ (80091f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	6013      	str	r3, [r2, #0]
}
 80091dc:	bf00      	nop
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20001164 	.word	0x20001164
 80091e8:	20000c8c 	.word	0x20000c8c
 80091ec:	2000114c 	.word	0x2000114c
 80091f0:	2000111c 	.word	0x2000111c
 80091f4:	20001118 	.word	0x20001118
 80091f8:	20001180 	.word	0x20001180

080091fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	@ 0x28
 8009200:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009202:	2300      	movs	r3, #0
 8009204:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009206:	f000 fb13 	bl	8009830 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800920a:	4b1d      	ldr	r3, [pc, #116]	@ (8009280 <xTimerCreateTimerTask+0x84>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d021      	beq.n	8009256 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009216:	2300      	movs	r3, #0
 8009218:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800921a:	1d3a      	adds	r2, r7, #4
 800921c:	f107 0108 	add.w	r1, r7, #8
 8009220:	f107 030c 	add.w	r3, r7, #12
 8009224:	4618      	mov	r0, r3
 8009226:	f7fd fd87 	bl	8006d38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	9202      	str	r2, [sp, #8]
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	2302      	movs	r3, #2
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	2300      	movs	r3, #0
 800923a:	460a      	mov	r2, r1
 800923c:	4911      	ldr	r1, [pc, #68]	@ (8009284 <xTimerCreateTimerTask+0x88>)
 800923e:	4812      	ldr	r0, [pc, #72]	@ (8009288 <xTimerCreateTimerTask+0x8c>)
 8009240:	f7fe fe74 	bl	8007f2c <xTaskCreateStatic>
 8009244:	4603      	mov	r3, r0
 8009246:	4a11      	ldr	r2, [pc, #68]	@ (800928c <xTimerCreateTimerTask+0x90>)
 8009248:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800924a:	4b10      	ldr	r3, [pc, #64]	@ (800928c <xTimerCreateTimerTask+0x90>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009252:	2301      	movs	r3, #1
 8009254:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10b      	bne.n	8009274 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	613b      	str	r3, [r7, #16]
}
 800926e:	bf00      	nop
 8009270:	bf00      	nop
 8009272:	e7fd      	b.n	8009270 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009274:	697b      	ldr	r3, [r7, #20]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	200011bc 	.word	0x200011bc
 8009284:	08011c0c 	.word	0x08011c0c
 8009288:	080093c9 	.word	0x080093c9
 800928c:	200011c0 	.word	0x200011c0

08009290 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b08a      	sub	sp, #40	@ 0x28
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800929e:	2300      	movs	r3, #0
 80092a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10b      	bne.n	80092c0 <xTimerGenericCommand+0x30>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	623b      	str	r3, [r7, #32]
}
 80092ba:	bf00      	nop
 80092bc:	bf00      	nop
 80092be:	e7fd      	b.n	80092bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092c0:	4b19      	ldr	r3, [pc, #100]	@ (8009328 <xTimerGenericCommand+0x98>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d02a      	beq.n	800931e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2b05      	cmp	r3, #5
 80092d8:	dc18      	bgt.n	800930c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092da:	f7ff fdad 	bl	8008e38 <xTaskGetSchedulerState>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d109      	bne.n	80092f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092e4:	4b10      	ldr	r3, [pc, #64]	@ (8009328 <xTimerGenericCommand+0x98>)
 80092e6:	6818      	ldr	r0, [r3, #0]
 80092e8:	f107 0110 	add.w	r1, r7, #16
 80092ec:	2300      	movs	r3, #0
 80092ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092f0:	f7fd ffa4 	bl	800723c <xQueueGenericSend>
 80092f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80092f6:	e012      	b.n	800931e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009328 <xTimerGenericCommand+0x98>)
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	f107 0110 	add.w	r1, r7, #16
 8009300:	2300      	movs	r3, #0
 8009302:	2200      	movs	r2, #0
 8009304:	f7fd ff9a 	bl	800723c <xQueueGenericSend>
 8009308:	6278      	str	r0, [r7, #36]	@ 0x24
 800930a:	e008      	b.n	800931e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800930c:	4b06      	ldr	r3, [pc, #24]	@ (8009328 <xTimerGenericCommand+0x98>)
 800930e:	6818      	ldr	r0, [r3, #0]
 8009310:	f107 0110 	add.w	r1, r7, #16
 8009314:	2300      	movs	r3, #0
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	f7fe f892 	bl	8007440 <xQueueGenericSendFromISR>
 800931c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800931e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009320:	4618      	mov	r0, r3
 8009322:	3728      	adds	r7, #40	@ 0x28
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	200011bc 	.word	0x200011bc

0800932c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af02      	add	r7, sp, #8
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009336:	4b23      	ldr	r3, [pc, #140]	@ (80093c4 <prvProcessExpiredTimer+0x98>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	3304      	adds	r3, #4
 8009344:	4618      	mov	r0, r3
 8009346:	f7fd fd9b 	bl	8006e80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009350:	f003 0304 	and.w	r3, r3, #4
 8009354:	2b00      	cmp	r3, #0
 8009356:	d023      	beq.n	80093a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	699a      	ldr	r2, [r3, #24]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	18d1      	adds	r1, r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	6978      	ldr	r0, [r7, #20]
 8009366:	f000 f8d5 	bl	8009514 <prvInsertTimerInActiveList>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d020      	beq.n	80093b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009370:	2300      	movs	r3, #0
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	2300      	movs	r3, #0
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	2100      	movs	r1, #0
 800937a:	6978      	ldr	r0, [r7, #20]
 800937c:	f7ff ff88 	bl	8009290 <xTimerGenericCommand>
 8009380:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d114      	bne.n	80093b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	60fb      	str	r3, [r7, #12]
}
 800939a:	bf00      	nop
 800939c:	bf00      	nop
 800939e:	e7fd      	b.n	800939c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093a6:	f023 0301 	bic.w	r3, r3, #1
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	6978      	ldr	r0, [r7, #20]
 80093b8:	4798      	blx	r3
}
 80093ba:	bf00      	nop
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	200011b4 	.word	0x200011b4

080093c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093d0:	f107 0308 	add.w	r3, r7, #8
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 f859 	bl	800948c <prvGetNextExpireTime>
 80093da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4619      	mov	r1, r3
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 f805 	bl	80093f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093e6:	f000 f8d7 	bl	8009598 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093ea:	bf00      	nop
 80093ec:	e7f0      	b.n	80093d0 <prvTimerTask+0x8>
	...

080093f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093fa:	f7ff f937 	bl	800866c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093fe:	f107 0308 	add.w	r3, r7, #8
 8009402:	4618      	mov	r0, r3
 8009404:	f000 f866 	bl	80094d4 <prvSampleTimeNow>
 8009408:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d130      	bne.n	8009472 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10a      	bne.n	800942c <prvProcessTimerOrBlockTask+0x3c>
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	429a      	cmp	r2, r3
 800941c:	d806      	bhi.n	800942c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800941e:	f7ff f933 	bl	8008688 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009422:	68f9      	ldr	r1, [r7, #12]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff ff81 	bl	800932c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800942a:	e024      	b.n	8009476 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d008      	beq.n	8009444 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009432:	4b13      	ldr	r3, [pc, #76]	@ (8009480 <prvProcessTimerOrBlockTask+0x90>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <prvProcessTimerOrBlockTask+0x50>
 800943c:	2301      	movs	r3, #1
 800943e:	e000      	b.n	8009442 <prvProcessTimerOrBlockTask+0x52>
 8009440:	2300      	movs	r3, #0
 8009442:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009444:	4b0f      	ldr	r3, [pc, #60]	@ (8009484 <prvProcessTimerOrBlockTask+0x94>)
 8009446:	6818      	ldr	r0, [r3, #0]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	4619      	mov	r1, r3
 8009452:	f7fe fd37 	bl	8007ec4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009456:	f7ff f917 	bl	8008688 <xTaskResumeAll>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10a      	bne.n	8009476 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009460:	4b09      	ldr	r3, [pc, #36]	@ (8009488 <prvProcessTimerOrBlockTask+0x98>)
 8009462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	f3bf 8f6f 	isb	sy
}
 8009470:	e001      	b.n	8009476 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009472:	f7ff f909 	bl	8008688 <xTaskResumeAll>
}
 8009476:	bf00      	nop
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	200011b8 	.word	0x200011b8
 8009484:	200011bc 	.word	0x200011bc
 8009488:	e000ed04 	.word	0xe000ed04

0800948c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009494:	4b0e      	ldr	r3, [pc, #56]	@ (80094d0 <prvGetNextExpireTime+0x44>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <prvGetNextExpireTime+0x16>
 800949e:	2201      	movs	r2, #1
 80094a0:	e000      	b.n	80094a4 <prvGetNextExpireTime+0x18>
 80094a2:	2200      	movs	r2, #0
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d105      	bne.n	80094bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094b0:	4b07      	ldr	r3, [pc, #28]	@ (80094d0 <prvGetNextExpireTime+0x44>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	e001      	b.n	80094c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094bc:	2300      	movs	r3, #0
 80094be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094c0:	68fb      	ldr	r3, [r7, #12]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	200011b4 	.word	0x200011b4

080094d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094dc:	f7ff f972 	bl	80087c4 <xTaskGetTickCount>
 80094e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009510 <prvSampleTimeNow+0x3c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d205      	bcs.n	80094f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094ec:	f000 f93a 	bl	8009764 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	e002      	b.n	80094fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094fe:	4a04      	ldr	r2, [pc, #16]	@ (8009510 <prvSampleTimeNow+0x3c>)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009504:	68fb      	ldr	r3, [r7, #12]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	200011c4 	.word	0x200011c4

08009514 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009522:	2300      	movs	r3, #0
 8009524:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	429a      	cmp	r2, r3
 8009538:	d812      	bhi.n	8009560 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	1ad2      	subs	r2, r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	429a      	cmp	r2, r3
 8009546:	d302      	bcc.n	800954e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009548:	2301      	movs	r3, #1
 800954a:	617b      	str	r3, [r7, #20]
 800954c:	e01b      	b.n	8009586 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800954e:	4b10      	ldr	r3, [pc, #64]	@ (8009590 <prvInsertTimerInActiveList+0x7c>)
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	3304      	adds	r3, #4
 8009556:	4619      	mov	r1, r3
 8009558:	4610      	mov	r0, r2
 800955a:	f7fd fc58 	bl	8006e0e <vListInsert>
 800955e:	e012      	b.n	8009586 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	429a      	cmp	r2, r3
 8009566:	d206      	bcs.n	8009576 <prvInsertTimerInActiveList+0x62>
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d302      	bcc.n	8009576 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009570:	2301      	movs	r3, #1
 8009572:	617b      	str	r3, [r7, #20]
 8009574:	e007      	b.n	8009586 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009576:	4b07      	ldr	r3, [pc, #28]	@ (8009594 <prvInsertTimerInActiveList+0x80>)
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3304      	adds	r3, #4
 800957e:	4619      	mov	r1, r3
 8009580:	4610      	mov	r0, r2
 8009582:	f7fd fc44 	bl	8006e0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009586:	697b      	ldr	r3, [r7, #20]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	200011b8 	.word	0x200011b8
 8009594:	200011b4 	.word	0x200011b4

08009598 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b08e      	sub	sp, #56	@ 0x38
 800959c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800959e:	e0ce      	b.n	800973e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	da19      	bge.n	80095da <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095a6:	1d3b      	adds	r3, r7, #4
 80095a8:	3304      	adds	r3, #4
 80095aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10b      	bne.n	80095ca <prvProcessReceivedCommands+0x32>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	61fb      	str	r3, [r7, #28]
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop
 80095c8:	e7fd      	b.n	80095c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095d0:	6850      	ldr	r0, [r2, #4]
 80095d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095d4:	6892      	ldr	r2, [r2, #8]
 80095d6:	4611      	mov	r1, r2
 80095d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f2c0 80ae 	blt.w	800973e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f0:	3304      	adds	r3, #4
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fd fc44 	bl	8006e80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095f8:	463b      	mov	r3, r7
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7ff ff6a 	bl	80094d4 <prvSampleTimeNow>
 8009600:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b09      	cmp	r3, #9
 8009606:	f200 8097 	bhi.w	8009738 <prvProcessReceivedCommands+0x1a0>
 800960a:	a201      	add	r2, pc, #4	@ (adr r2, 8009610 <prvProcessReceivedCommands+0x78>)
 800960c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009610:	08009639 	.word	0x08009639
 8009614:	08009639 	.word	0x08009639
 8009618:	08009639 	.word	0x08009639
 800961c:	080096af 	.word	0x080096af
 8009620:	080096c3 	.word	0x080096c3
 8009624:	0800970f 	.word	0x0800970f
 8009628:	08009639 	.word	0x08009639
 800962c:	08009639 	.word	0x08009639
 8009630:	080096af 	.word	0x080096af
 8009634:	080096c3 	.word	0x080096c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800963e:	f043 0301 	orr.w	r3, r3, #1
 8009642:	b2da      	uxtb	r2, r3
 8009644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009646:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	18d1      	adds	r1, r2, r3
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009658:	f7ff ff5c 	bl	8009514 <prvInsertTimerInActiveList>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d06c      	beq.n	800973c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009668:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800966a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	d061      	beq.n	800973c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	441a      	add	r2, r3
 8009680:	2300      	movs	r3, #0
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	2300      	movs	r3, #0
 8009686:	2100      	movs	r1, #0
 8009688:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800968a:	f7ff fe01 	bl	8009290 <xTimerGenericCommand>
 800968e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d152      	bne.n	800973c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	61bb      	str	r3, [r7, #24]
}
 80096a8:	bf00      	nop
 80096aa:	bf00      	nop
 80096ac:	e7fd      	b.n	80096aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096b4:	f023 0301 	bic.w	r3, r3, #1
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80096c0:	e03d      	b.n	800973e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096c8:	f043 0301 	orr.w	r3, r3, #1
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <prvProcessReceivedCommands+0x162>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	617b      	str	r3, [r7, #20]
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop
 80096f8:	e7fd      	b.n	80096f6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fc:	699a      	ldr	r2, [r3, #24]
 80096fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009700:	18d1      	adds	r1, r2, r3
 8009702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009708:	f7ff ff04 	bl	8009514 <prvInsertTimerInActiveList>
					break;
 800970c:	e017      	b.n	800973e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800970e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009714:	f003 0302 	and.w	r3, r3, #2
 8009718:	2b00      	cmp	r3, #0
 800971a:	d103      	bne.n	8009724 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800971c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800971e:	f000 fbeb 	bl	8009ef8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009722:	e00c      	b.n	800973e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009726:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800972a:	f023 0301 	bic.w	r3, r3, #1
 800972e:	b2da      	uxtb	r2, r3
 8009730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009732:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009736:	e002      	b.n	800973e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009738:	bf00      	nop
 800973a:	e000      	b.n	800973e <prvProcessReceivedCommands+0x1a6>
					break;
 800973c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800973e:	4b08      	ldr	r3, [pc, #32]	@ (8009760 <prvProcessReceivedCommands+0x1c8>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	1d39      	adds	r1, r7, #4
 8009744:	2200      	movs	r2, #0
 8009746:	4618      	mov	r0, r3
 8009748:	f7fd ffa8 	bl	800769c <xQueueReceive>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	f47f af26 	bne.w	80095a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop
 8009758:	3730      	adds	r7, #48	@ 0x30
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	200011bc 	.word	0x200011bc

08009764 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800976a:	e049      	b.n	8009800 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800976c:	4b2e      	ldr	r3, [pc, #184]	@ (8009828 <prvSwitchTimerLists+0xc4>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009776:	4b2c      	ldr	r3, [pc, #176]	@ (8009828 <prvSwitchTimerLists+0xc4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3304      	adds	r3, #4
 8009784:	4618      	mov	r0, r3
 8009786:	f7fd fb7b 	bl	8006e80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009798:	f003 0304 	and.w	r3, r3, #4
 800979c:	2b00      	cmp	r3, #0
 800979e:	d02f      	beq.n	8009800 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	4413      	add	r3, r2
 80097a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d90e      	bls.n	80097d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097be:	4b1a      	ldr	r3, [pc, #104]	@ (8009828 <prvSwitchTimerLists+0xc4>)
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3304      	adds	r3, #4
 80097c6:	4619      	mov	r1, r3
 80097c8:	4610      	mov	r0, r2
 80097ca:	f7fd fb20 	bl	8006e0e <vListInsert>
 80097ce:	e017      	b.n	8009800 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097d0:	2300      	movs	r3, #0
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	2300      	movs	r3, #0
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	2100      	movs	r1, #0
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f7ff fd58 	bl	8009290 <xTimerGenericCommand>
 80097e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10b      	bne.n	8009800 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	603b      	str	r3, [r7, #0]
}
 80097fa:	bf00      	nop
 80097fc:	bf00      	nop
 80097fe:	e7fd      	b.n	80097fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009800:	4b09      	ldr	r3, [pc, #36]	@ (8009828 <prvSwitchTimerLists+0xc4>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1b0      	bne.n	800976c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800980a:	4b07      	ldr	r3, [pc, #28]	@ (8009828 <prvSwitchTimerLists+0xc4>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009810:	4b06      	ldr	r3, [pc, #24]	@ (800982c <prvSwitchTimerLists+0xc8>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a04      	ldr	r2, [pc, #16]	@ (8009828 <prvSwitchTimerLists+0xc4>)
 8009816:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009818:	4a04      	ldr	r2, [pc, #16]	@ (800982c <prvSwitchTimerLists+0xc8>)
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	6013      	str	r3, [r2, #0]
}
 800981e:	bf00      	nop
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	200011b4 	.word	0x200011b4
 800982c:	200011b8 	.word	0x200011b8

08009830 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009836:	f000 f96f 	bl	8009b18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800983a:	4b15      	ldr	r3, [pc, #84]	@ (8009890 <prvCheckForValidListAndQueue+0x60>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d120      	bne.n	8009884 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009842:	4814      	ldr	r0, [pc, #80]	@ (8009894 <prvCheckForValidListAndQueue+0x64>)
 8009844:	f7fd fa92 	bl	8006d6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009848:	4813      	ldr	r0, [pc, #76]	@ (8009898 <prvCheckForValidListAndQueue+0x68>)
 800984a:	f7fd fa8f 	bl	8006d6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800984e:	4b13      	ldr	r3, [pc, #76]	@ (800989c <prvCheckForValidListAndQueue+0x6c>)
 8009850:	4a10      	ldr	r2, [pc, #64]	@ (8009894 <prvCheckForValidListAndQueue+0x64>)
 8009852:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009854:	4b12      	ldr	r3, [pc, #72]	@ (80098a0 <prvCheckForValidListAndQueue+0x70>)
 8009856:	4a10      	ldr	r2, [pc, #64]	@ (8009898 <prvCheckForValidListAndQueue+0x68>)
 8009858:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800985a:	2300      	movs	r3, #0
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	4b11      	ldr	r3, [pc, #68]	@ (80098a4 <prvCheckForValidListAndQueue+0x74>)
 8009860:	4a11      	ldr	r2, [pc, #68]	@ (80098a8 <prvCheckForValidListAndQueue+0x78>)
 8009862:	2110      	movs	r1, #16
 8009864:	200a      	movs	r0, #10
 8009866:	f7fd fb9f 	bl	8006fa8 <xQueueGenericCreateStatic>
 800986a:	4603      	mov	r3, r0
 800986c:	4a08      	ldr	r2, [pc, #32]	@ (8009890 <prvCheckForValidListAndQueue+0x60>)
 800986e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009870:	4b07      	ldr	r3, [pc, #28]	@ (8009890 <prvCheckForValidListAndQueue+0x60>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009878:	4b05      	ldr	r3, [pc, #20]	@ (8009890 <prvCheckForValidListAndQueue+0x60>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	490b      	ldr	r1, [pc, #44]	@ (80098ac <prvCheckForValidListAndQueue+0x7c>)
 800987e:	4618      	mov	r0, r3
 8009880:	f7fe facc 	bl	8007e1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009884:	f000 f97a 	bl	8009b7c <vPortExitCritical>
}
 8009888:	bf00      	nop
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	200011bc 	.word	0x200011bc
 8009894:	2000118c 	.word	0x2000118c
 8009898:	200011a0 	.word	0x200011a0
 800989c:	200011b4 	.word	0x200011b4
 80098a0:	200011b8 	.word	0x200011b8
 80098a4:	20001268 	.word	0x20001268
 80098a8:	200011c8 	.word	0x200011c8
 80098ac:	08011c14 	.word	0x08011c14

080098b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	3b04      	subs	r3, #4
 80098c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80098c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3b04      	subs	r3, #4
 80098ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	f023 0201 	bic.w	r2, r3, #1
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3b04      	subs	r3, #4
 80098de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098e0:	4a0c      	ldr	r2, [pc, #48]	@ (8009914 <pxPortInitialiseStack+0x64>)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3b14      	subs	r3, #20
 80098ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3b04      	subs	r3, #4
 80098f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f06f 0202 	mvn.w	r2, #2
 80098fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3b20      	subs	r3, #32
 8009904:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009906:	68fb      	ldr	r3, [r7, #12]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3714      	adds	r7, #20
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	08009919 	.word	0x08009919

08009918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009922:	4b13      	ldr	r3, [pc, #76]	@ (8009970 <prvTaskExitError+0x58>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992a:	d00b      	beq.n	8009944 <prvTaskExitError+0x2c>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	60fb      	str	r3, [r7, #12]
}
 800993e:	bf00      	nop
 8009940:	bf00      	nop
 8009942:	e7fd      	b.n	8009940 <prvTaskExitError+0x28>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	60bb      	str	r3, [r7, #8]
}
 8009956:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009958:	bf00      	nop
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0fc      	beq.n	800995a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	2000000c 	.word	0x2000000c
	...

08009980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009980:	4b07      	ldr	r3, [pc, #28]	@ (80099a0 <pxCurrentTCBConst2>)
 8009982:	6819      	ldr	r1, [r3, #0]
 8009984:	6808      	ldr	r0, [r1, #0]
 8009986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998a:	f380 8809 	msr	PSP, r0
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f04f 0000 	mov.w	r0, #0
 8009996:	f380 8811 	msr	BASEPRI, r0
 800999a:	4770      	bx	lr
 800999c:	f3af 8000 	nop.w

080099a0 <pxCurrentTCBConst2>:
 80099a0:	20000c8c 	.word	0x20000c8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop

080099a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099a8:	4808      	ldr	r0, [pc, #32]	@ (80099cc <prvPortStartFirstTask+0x24>)
 80099aa:	6800      	ldr	r0, [r0, #0]
 80099ac:	6800      	ldr	r0, [r0, #0]
 80099ae:	f380 8808 	msr	MSP, r0
 80099b2:	f04f 0000 	mov.w	r0, #0
 80099b6:	f380 8814 	msr	CONTROL, r0
 80099ba:	b662      	cpsie	i
 80099bc:	b661      	cpsie	f
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	df00      	svc	0
 80099c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099ca:	bf00      	nop
 80099cc:	e000ed08 	.word	0xe000ed08

080099d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099d6:	4b47      	ldr	r3, [pc, #284]	@ (8009af4 <xPortStartScheduler+0x124>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a47      	ldr	r2, [pc, #284]	@ (8009af8 <xPortStartScheduler+0x128>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10b      	bne.n	80099f8 <xPortStartScheduler+0x28>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	bf00      	nop
 80099f6:	e7fd      	b.n	80099f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099f8:	4b3e      	ldr	r3, [pc, #248]	@ (8009af4 <xPortStartScheduler+0x124>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a3f      	ldr	r2, [pc, #252]	@ (8009afc <xPortStartScheduler+0x12c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d10b      	bne.n	8009a1a <xPortStartScheduler+0x4a>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	613b      	str	r3, [r7, #16]
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop
 8009a18:	e7fd      	b.n	8009a16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a1a:	4b39      	ldr	r3, [pc, #228]	@ (8009b00 <xPortStartScheduler+0x130>)
 8009a1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	22ff      	movs	r2, #255	@ 0xff
 8009a2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	4b31      	ldr	r3, [pc, #196]	@ (8009b04 <xPortStartScheduler+0x134>)
 8009a40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a42:	4b31      	ldr	r3, [pc, #196]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a44:	2207      	movs	r2, #7
 8009a46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a48:	e009      	b.n	8009a5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	4a2d      	ldr	r2, [pc, #180]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a54:	78fb      	ldrb	r3, [r7, #3]
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a5e:	78fb      	ldrb	r3, [r7, #3]
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a66:	2b80      	cmp	r3, #128	@ 0x80
 8009a68:	d0ef      	beq.n	8009a4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a6a:	4b27      	ldr	r3, [pc, #156]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f1c3 0307 	rsb	r3, r3, #7
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	d00b      	beq.n	8009a8e <xPortStartScheduler+0xbe>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	60bb      	str	r3, [r7, #8]
}
 8009a88:	bf00      	nop
 8009a8a:	bf00      	nop
 8009a8c:	e7fd      	b.n	8009a8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	021b      	lsls	r3, r3, #8
 8009a94:	4a1c      	ldr	r2, [pc, #112]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a98:	4b1b      	ldr	r3, [pc, #108]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009aa0:	4a19      	ldr	r2, [pc, #100]	@ (8009b08 <xPortStartScheduler+0x138>)
 8009aa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009aac:	4b17      	ldr	r3, [pc, #92]	@ (8009b0c <xPortStartScheduler+0x13c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a16      	ldr	r2, [pc, #88]	@ (8009b0c <xPortStartScheduler+0x13c>)
 8009ab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ab8:	4b14      	ldr	r3, [pc, #80]	@ (8009b0c <xPortStartScheduler+0x13c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a13      	ldr	r2, [pc, #76]	@ (8009b0c <xPortStartScheduler+0x13c>)
 8009abe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ac4:	f000 f8da 	bl	8009c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ac8:	4b11      	ldr	r3, [pc, #68]	@ (8009b10 <xPortStartScheduler+0x140>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ace:	f000 f8f9 	bl	8009cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ad2:	4b10      	ldr	r3, [pc, #64]	@ (8009b14 <xPortStartScheduler+0x144>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8009b14 <xPortStartScheduler+0x144>)
 8009ad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009adc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ade:	f7ff ff63 	bl	80099a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ae2:	f7fe ff39 	bl	8008958 <vTaskSwitchContext>
	prvTaskExitError();
 8009ae6:	f7ff ff17 	bl	8009918 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	e000ed00 	.word	0xe000ed00
 8009af8:	410fc271 	.word	0x410fc271
 8009afc:	410fc270 	.word	0x410fc270
 8009b00:	e000e400 	.word	0xe000e400
 8009b04:	200012b8 	.word	0x200012b8
 8009b08:	200012bc 	.word	0x200012bc
 8009b0c:	e000ed20 	.word	0xe000ed20
 8009b10:	2000000c 	.word	0x2000000c
 8009b14:	e000ef34 	.word	0xe000ef34

08009b18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	607b      	str	r3, [r7, #4]
}
 8009b30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b32:	4b10      	ldr	r3, [pc, #64]	@ (8009b74 <vPortEnterCritical+0x5c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	3301      	adds	r3, #1
 8009b38:	4a0e      	ldr	r2, [pc, #56]	@ (8009b74 <vPortEnterCritical+0x5c>)
 8009b3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009b74 <vPortEnterCritical+0x5c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d110      	bne.n	8009b66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b44:	4b0c      	ldr	r3, [pc, #48]	@ (8009b78 <vPortEnterCritical+0x60>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00b      	beq.n	8009b66 <vPortEnterCritical+0x4e>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	603b      	str	r3, [r7, #0]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <vPortEnterCritical+0x4a>
	}
}
 8009b66:	bf00      	nop
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	2000000c 	.word	0x2000000c
 8009b78:	e000ed04 	.word	0xe000ed04

08009b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b82:	4b12      	ldr	r3, [pc, #72]	@ (8009bcc <vPortExitCritical+0x50>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10b      	bne.n	8009ba2 <vPortExitCritical+0x26>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	607b      	str	r3, [r7, #4]
}
 8009b9c:	bf00      	nop
 8009b9e:	bf00      	nop
 8009ba0:	e7fd      	b.n	8009b9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8009bcc <vPortExitCritical+0x50>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	4a08      	ldr	r2, [pc, #32]	@ (8009bcc <vPortExitCritical+0x50>)
 8009baa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bac:	4b07      	ldr	r3, [pc, #28]	@ (8009bcc <vPortExitCritical+0x50>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d105      	bne.n	8009bc0 <vPortExitCritical+0x44>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	f383 8811 	msr	BASEPRI, r3
}
 8009bbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	2000000c 	.word	0x2000000c

08009bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bd0:	f3ef 8009 	mrs	r0, PSP
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	4b15      	ldr	r3, [pc, #84]	@ (8009c30 <pxCurrentTCBConst>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	f01e 0f10 	tst.w	lr, #16
 8009be0:	bf08      	it	eq
 8009be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	6010      	str	r0, [r2, #0]
 8009bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009bf4:	f380 8811 	msr	BASEPRI, r0
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f7fe feaa 	bl	8008958 <vTaskSwitchContext>
 8009c04:	f04f 0000 	mov.w	r0, #0
 8009c08:	f380 8811 	msr	BASEPRI, r0
 8009c0c:	bc09      	pop	{r0, r3}
 8009c0e:	6819      	ldr	r1, [r3, #0]
 8009c10:	6808      	ldr	r0, [r1, #0]
 8009c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c16:	f01e 0f10 	tst.w	lr, #16
 8009c1a:	bf08      	it	eq
 8009c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c20:	f380 8809 	msr	PSP, r0
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	f3af 8000 	nop.w

08009c30 <pxCurrentTCBConst>:
 8009c30:	20000c8c 	.word	0x20000c8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop

08009c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	607b      	str	r3, [r7, #4]
}
 8009c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c52:	f7fe fdc7 	bl	80087e4 <xTaskIncrementTick>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c5c:	4b06      	ldr	r3, [pc, #24]	@ (8009c78 <xPortSysTickHandler+0x40>)
 8009c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	2300      	movs	r3, #0
 8009c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	f383 8811 	msr	BASEPRI, r3
}
 8009c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c70:	bf00      	nop
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	e000ed04 	.word	0xe000ed04

08009c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c80:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb0 <vPortSetupTimerInterrupt+0x34>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c86:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb4 <vPortSetupTimerInterrupt+0x38>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb8 <vPortSetupTimerInterrupt+0x3c>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a0a      	ldr	r2, [pc, #40]	@ (8009cbc <vPortSetupTimerInterrupt+0x40>)
 8009c92:	fba2 2303 	umull	r2, r3, r2, r3
 8009c96:	099b      	lsrs	r3, r3, #6
 8009c98:	4a09      	ldr	r2, [pc, #36]	@ (8009cc0 <vPortSetupTimerInterrupt+0x44>)
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c9e:	4b04      	ldr	r3, [pc, #16]	@ (8009cb0 <vPortSetupTimerInterrupt+0x34>)
 8009ca0:	2207      	movs	r2, #7
 8009ca2:	601a      	str	r2, [r3, #0]
}
 8009ca4:	bf00      	nop
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	e000e010 	.word	0xe000e010
 8009cb4:	e000e018 	.word	0xe000e018
 8009cb8:	20000000 	.word	0x20000000
 8009cbc:	10624dd3 	.word	0x10624dd3
 8009cc0:	e000e014 	.word	0xe000e014

08009cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009cd4 <vPortEnableVFP+0x10>
 8009cc8:	6801      	ldr	r1, [r0, #0]
 8009cca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009cce:	6001      	str	r1, [r0, #0]
 8009cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cd2:	bf00      	nop
 8009cd4:	e000ed88 	.word	0xe000ed88

08009cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cde:	f3ef 8305 	mrs	r3, IPSR
 8009ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b0f      	cmp	r3, #15
 8009ce8:	d915      	bls.n	8009d16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cea:	4a18      	ldr	r2, [pc, #96]	@ (8009d4c <vPortValidateInterruptPriority+0x74>)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cf4:	4b16      	ldr	r3, [pc, #88]	@ (8009d50 <vPortValidateInterruptPriority+0x78>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	7afa      	ldrb	r2, [r7, #11]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d20b      	bcs.n	8009d16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	607b      	str	r3, [r7, #4]
}
 8009d10:	bf00      	nop
 8009d12:	bf00      	nop
 8009d14:	e7fd      	b.n	8009d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d16:	4b0f      	ldr	r3, [pc, #60]	@ (8009d54 <vPortValidateInterruptPriority+0x7c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8009d58 <vPortValidateInterruptPriority+0x80>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d90b      	bls.n	8009d3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	603b      	str	r3, [r7, #0]
}
 8009d38:	bf00      	nop
 8009d3a:	bf00      	nop
 8009d3c:	e7fd      	b.n	8009d3a <vPortValidateInterruptPriority+0x62>
	}
 8009d3e:	bf00      	nop
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	e000e3f0 	.word	0xe000e3f0
 8009d50:	200012b8 	.word	0x200012b8
 8009d54:	e000ed0c 	.word	0xe000ed0c
 8009d58:	200012bc 	.word	0x200012bc

08009d5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b08a      	sub	sp, #40	@ 0x28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d64:	2300      	movs	r3, #0
 8009d66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d68:	f7fe fc80 	bl	800866c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ee0 <pvPortMalloc+0x184>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d74:	f000 f924 	bl	8009fc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d78:	4b5a      	ldr	r3, [pc, #360]	@ (8009ee4 <pvPortMalloc+0x188>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4013      	ands	r3, r2
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f040 8095 	bne.w	8009eb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d01e      	beq.n	8009dca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009d8c:	2208      	movs	r2, #8
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4413      	add	r3, r2
 8009d92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f003 0307 	and.w	r3, r3, #7
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d015      	beq.n	8009dca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f023 0307 	bic.w	r3, r3, #7
 8009da4:	3308      	adds	r3, #8
 8009da6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f003 0307 	and.w	r3, r3, #7
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00b      	beq.n	8009dca <pvPortMalloc+0x6e>
	__asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	617b      	str	r3, [r7, #20]
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	e7fd      	b.n	8009dc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d06f      	beq.n	8009eb0 <pvPortMalloc+0x154>
 8009dd0:	4b45      	ldr	r3, [pc, #276]	@ (8009ee8 <pvPortMalloc+0x18c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d86a      	bhi.n	8009eb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009dda:	4b44      	ldr	r3, [pc, #272]	@ (8009eec <pvPortMalloc+0x190>)
 8009ddc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009dde:	4b43      	ldr	r3, [pc, #268]	@ (8009eec <pvPortMalloc+0x190>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009de4:	e004      	b.n	8009df0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d903      	bls.n	8009e02 <pvPortMalloc+0xa6>
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1f1      	bne.n	8009de6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e02:	4b37      	ldr	r3, [pc, #220]	@ (8009ee0 <pvPortMalloc+0x184>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d051      	beq.n	8009eb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2208      	movs	r2, #8
 8009e12:	4413      	add	r3, r2
 8009e14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	6a3b      	ldr	r3, [r7, #32]
 8009e1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	1ad2      	subs	r2, r2, r3
 8009e26:	2308      	movs	r3, #8
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d920      	bls.n	8009e70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4413      	add	r3, r2
 8009e34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	f003 0307 	and.w	r3, r3, #7
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00b      	beq.n	8009e58 <pvPortMalloc+0xfc>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	613b      	str	r3, [r7, #16]
}
 8009e52:	bf00      	nop
 8009e54:	bf00      	nop
 8009e56:	e7fd      	b.n	8009e54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e6a:	69b8      	ldr	r0, [r7, #24]
 8009e6c:	f000 f90a 	bl	800a084 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e70:	4b1d      	ldr	r3, [pc, #116]	@ (8009ee8 <pvPortMalloc+0x18c>)
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ee8 <pvPortMalloc+0x18c>)
 8009e7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ee8 <pvPortMalloc+0x18c>)
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	4b1b      	ldr	r3, [pc, #108]	@ (8009ef0 <pvPortMalloc+0x194>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d203      	bcs.n	8009e92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e8a:	4b17      	ldr	r3, [pc, #92]	@ (8009ee8 <pvPortMalloc+0x18c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a18      	ldr	r2, [pc, #96]	@ (8009ef0 <pvPortMalloc+0x194>)
 8009e90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	4b13      	ldr	r3, [pc, #76]	@ (8009ee4 <pvPortMalloc+0x188>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	431a      	orrs	r2, r3
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ea6:	4b13      	ldr	r3, [pc, #76]	@ (8009ef4 <pvPortMalloc+0x198>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	4a11      	ldr	r2, [pc, #68]	@ (8009ef4 <pvPortMalloc+0x198>)
 8009eae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009eb0:	f7fe fbea 	bl	8008688 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00b      	beq.n	8009ed6 <pvPortMalloc+0x17a>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	60fb      	str	r3, [r7, #12]
}
 8009ed0:	bf00      	nop
 8009ed2:	bf00      	nop
 8009ed4:	e7fd      	b.n	8009ed2 <pvPortMalloc+0x176>
	return pvReturn;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3728      	adds	r7, #40	@ 0x28
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	20004ec8 	.word	0x20004ec8
 8009ee4:	20004edc 	.word	0x20004edc
 8009ee8:	20004ecc 	.word	0x20004ecc
 8009eec:	20004ec0 	.word	0x20004ec0
 8009ef0:	20004ed0 	.word	0x20004ed0
 8009ef4:	20004ed4 	.word	0x20004ed4

08009ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d04f      	beq.n	8009faa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f0a:	2308      	movs	r3, #8
 8009f0c:	425b      	negs	r3, r3
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	4413      	add	r3, r2
 8009f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	4b25      	ldr	r3, [pc, #148]	@ (8009fb4 <vPortFree+0xbc>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4013      	ands	r3, r2
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10b      	bne.n	8009f3e <vPortFree+0x46>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	60fb      	str	r3, [r7, #12]
}
 8009f38:	bf00      	nop
 8009f3a:	bf00      	nop
 8009f3c:	e7fd      	b.n	8009f3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00b      	beq.n	8009f5e <vPortFree+0x66>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	60bb      	str	r3, [r7, #8]
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	e7fd      	b.n	8009f5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	4b14      	ldr	r3, [pc, #80]	@ (8009fb4 <vPortFree+0xbc>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4013      	ands	r3, r2
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d01e      	beq.n	8009faa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d11a      	bne.n	8009faa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb4 <vPortFree+0xbc>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	43db      	mvns	r3, r3
 8009f7e:	401a      	ands	r2, r3
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f84:	f7fe fb72 	bl	800866c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb8 <vPortFree+0xc0>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4413      	add	r3, r2
 8009f92:	4a09      	ldr	r2, [pc, #36]	@ (8009fb8 <vPortFree+0xc0>)
 8009f94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f96:	6938      	ldr	r0, [r7, #16]
 8009f98:	f000 f874 	bl	800a084 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f9c:	4b07      	ldr	r3, [pc, #28]	@ (8009fbc <vPortFree+0xc4>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	4a06      	ldr	r2, [pc, #24]	@ (8009fbc <vPortFree+0xc4>)
 8009fa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009fa6:	f7fe fb6f 	bl	8008688 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009faa:	bf00      	nop
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20004edc 	.word	0x20004edc
 8009fb8:	20004ecc 	.word	0x20004ecc
 8009fbc:	20004ed8 	.word	0x20004ed8

08009fc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fc6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009fca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fcc:	4b27      	ldr	r3, [pc, #156]	@ (800a06c <prvHeapInit+0xac>)
 8009fce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f003 0307 	and.w	r3, r3, #7
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00c      	beq.n	8009ff4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	3307      	adds	r3, #7
 8009fde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 0307 	bic.w	r3, r3, #7
 8009fe6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	4a1f      	ldr	r2, [pc, #124]	@ (800a06c <prvHeapInit+0xac>)
 8009ff0:	4413      	add	r3, r2
 8009ff2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ff8:	4a1d      	ldr	r2, [pc, #116]	@ (800a070 <prvHeapInit+0xb0>)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ffe:	4b1c      	ldr	r3, [pc, #112]	@ (800a070 <prvHeapInit+0xb0>)
 800a000:	2200      	movs	r2, #0
 800a002:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	4413      	add	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a00c:	2208      	movs	r2, #8
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	1a9b      	subs	r3, r3, r2
 800a012:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0307 	bic.w	r3, r3, #7
 800a01a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4a15      	ldr	r2, [pc, #84]	@ (800a074 <prvHeapInit+0xb4>)
 800a020:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a022:	4b14      	ldr	r3, [pc, #80]	@ (800a074 <prvHeapInit+0xb4>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2200      	movs	r2, #0
 800a028:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a02a:	4b12      	ldr	r3, [pc, #72]	@ (800a074 <prvHeapInit+0xb4>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	1ad2      	subs	r2, r2, r3
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a040:	4b0c      	ldr	r3, [pc, #48]	@ (800a074 <prvHeapInit+0xb4>)
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	4a0a      	ldr	r2, [pc, #40]	@ (800a078 <prvHeapInit+0xb8>)
 800a04e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	4a09      	ldr	r2, [pc, #36]	@ (800a07c <prvHeapInit+0xbc>)
 800a056:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a058:	4b09      	ldr	r3, [pc, #36]	@ (800a080 <prvHeapInit+0xc0>)
 800a05a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a05e:	601a      	str	r2, [r3, #0]
}
 800a060:	bf00      	nop
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	200012c0 	.word	0x200012c0
 800a070:	20004ec0 	.word	0x20004ec0
 800a074:	20004ec8 	.word	0x20004ec8
 800a078:	20004ed0 	.word	0x20004ed0
 800a07c:	20004ecc 	.word	0x20004ecc
 800a080:	20004edc 	.word	0x20004edc

0800a084 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a08c:	4b28      	ldr	r3, [pc, #160]	@ (800a130 <prvInsertBlockIntoFreeList+0xac>)
 800a08e:	60fb      	str	r3, [r7, #12]
 800a090:	e002      	b.n	800a098 <prvInsertBlockIntoFreeList+0x14>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	60fb      	str	r3, [r7, #12]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d8f7      	bhi.n	800a092 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d108      	bne.n	800a0c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	441a      	add	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	441a      	add	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d118      	bne.n	800a10c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	4b15      	ldr	r3, [pc, #84]	@ (800a134 <prvInsertBlockIntoFreeList+0xb0>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d00d      	beq.n	800a102 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	441a      	add	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	601a      	str	r2, [r3, #0]
 800a100:	e008      	b.n	800a114 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a102:	4b0c      	ldr	r3, [pc, #48]	@ (800a134 <prvInsertBlockIntoFreeList+0xb0>)
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	601a      	str	r2, [r3, #0]
 800a10a:	e003      	b.n	800a114 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d002      	beq.n	800a122 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a122:	bf00      	nop
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	20004ec0 	.word	0x20004ec0
 800a134:	20004ec8 	.word	0x20004ec8

0800a138 <_ZN13CommunicationC1Ev>:
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	4a08      	ldr	r2, [pc, #32]	@ (800a164 <_ZN13CommunicationC1Ev+0x2c>)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	3304      	adds	r3, #4
 800a14a:	4618      	mov	r0, r3
 800a14c:	f002 f83e 	bl	800c1cc <_ZN12FlashManagerC1Ev>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	3304      	adds	r3, #4
 800a154:	4618      	mov	r0, r3
 800a156:	f002 f8a9 	bl	800c2ac <_ZN12FlashManager10BackupDataEv>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4618      	mov	r0, r3
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	08011ce4 	.word	0x08011ce4

0800a168 <_ZN13CommunicationD1Ev>:
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	4a06      	ldr	r2, [pc, #24]	@ (800a18c <_ZN13CommunicationD1Ev+0x24>)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	3304      	adds	r3, #4
 800a17a:	4618      	mov	r0, r3
 800a17c:	f002 f876 	bl	800c26c <_ZN12FlashManagerD1Ev>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	08011ce4 	.word	0x08011ce4

0800a190 <_ZN13CommunicationD0Ev>:
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7ff ffe5 	bl	800a168 <_ZN13CommunicationD1Ev>
 800a19e:	2120      	movs	r1, #32
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f006 fca7 	bl	8010af4 <_ZdlPvj>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <_ZN13Communication14ProcessCommandEPh>:
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	2b03      	cmp	r3, #3
 800a1c0:	d010      	beq.n	800a1e4 <_ZN13Communication14ProcessCommandEPh+0x34>
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	dc13      	bgt.n	800a1ee <_ZN13Communication14ProcessCommandEPh+0x3e>
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d002      	beq.n	800a1d0 <_ZN13Communication14ProcessCommandEPh+0x20>
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d005      	beq.n	800a1da <_ZN13Communication14ProcessCommandEPh+0x2a>
 800a1ce:	e00e      	b.n	800a1ee <_ZN13Communication14ProcessCommandEPh+0x3e>
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f814 	bl	800a200 <_ZN13Communication6SystemEPh>
 800a1d8:	e00e      	b.n	800a1f8 <_ZN13Communication14ProcessCommandEPh+0x48>
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f8e5 	bl	800a3ac <_ZN13Communication7CommandEPh>
 800a1e2:	e009      	b.n	800a1f8 <_ZN13Communication14ProcessCommandEPh+0x48>
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 fcf6 	bl	800abd8 <_ZN13Communication13ConfigurationEPh>
 800a1ec:	e004      	b.n	800a1f8 <_ZN13Communication14ProcessCommandEPh+0x48>
 800a1ee:	2108      	movs	r1, #8
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	f004 fe34 	bl	800ee5e <ErrorResult>
 800a1f6:	bf00      	nop
 800a1f8:	bf00      	nop
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <_ZN13Communication6SystemEPh>:
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	f040 80c4 	bne.w	800a39c <_ZN13Communication6SystemEPh+0x19c>
 800a214:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a218:	82fb      	strh	r3, [r7, #22]
 800a21a:	230c      	movs	r3, #12
 800a21c:	82bb      	strh	r3, [r7, #20]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	3301      	adds	r3, #1
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	3b01      	subs	r3, #1
 800a226:	2b05      	cmp	r3, #5
 800a228:	f200 80aa 	bhi.w	800a380 <_ZN13Communication6SystemEPh+0x180>
 800a22c:	a201      	add	r2, pc, #4	@ (adr r2, 800a234 <_ZN13Communication6SystemEPh+0x34>)
 800a22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a232:	bf00      	nop
 800a234:	0800a24d 	.word	0x0800a24d
 800a238:	0800a2fd 	.word	0x0800a2fd
 800a23c:	0800a315 	.word	0x0800a315
 800a240:	0800a32d 	.word	0x0800a32d
 800a244:	0800a339 	.word	0x0800a339
 800a248:	0800a35d 	.word	0x0800a35d
 800a24c:	4b55      	ldr	r3, [pc, #340]	@ (800a3a4 <_ZN13Communication6SystemEPh+0x1a4>)
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	723b      	strb	r3, [r7, #8]
 800a252:	4b54      	ldr	r3, [pc, #336]	@ (800a3a4 <_ZN13Communication6SystemEPh+0x1a4>)
 800a254:	785b      	ldrb	r3, [r3, #1]
 800a256:	727b      	strb	r3, [r7, #9]
 800a258:	4b52      	ldr	r3, [pc, #328]	@ (800a3a4 <_ZN13Communication6SystemEPh+0x1a4>)
 800a25a:	789b      	ldrb	r3, [r3, #2]
 800a25c:	72bb      	strb	r3, [r7, #10]
 800a25e:	4b51      	ldr	r3, [pc, #324]	@ (800a3a4 <_ZN13Communication6SystemEPh+0x1a4>)
 800a260:	78db      	ldrb	r3, [r3, #3]
 800a262:	72fb      	strb	r3, [r7, #11]
 800a264:	4b4f      	ldr	r3, [pc, #316]	@ (800a3a4 <_ZN13Communication6SystemEPh+0x1a4>)
 800a266:	791b      	ldrb	r3, [r3, #4]
 800a268:	733b      	strb	r3, [r7, #12]
 800a26a:	4b4e      	ldr	r3, [pc, #312]	@ (800a3a4 <_ZN13Communication6SystemEPh+0x1a4>)
 800a26c:	795b      	ldrb	r3, [r3, #5]
 800a26e:	737b      	strb	r3, [r7, #13]
 800a270:	4b4d      	ldr	r3, [pc, #308]	@ (800a3a8 <_ZN13Communication6SystemEPh+0x1a8>)
 800a272:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a274:	2b00      	cmp	r3, #0
 800a276:	d005      	beq.n	800a284 <_ZN13Communication6SystemEPh+0x84>
 800a278:	4b4b      	ldr	r3, [pc, #300]	@ (800a3a8 <_ZN13Communication6SystemEPh+0x1a8>)
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <_ZN13Communication6SystemEPh+0x84>
 800a280:	2301      	movs	r3, #1
 800a282:	e000      	b.n	800a286 <_ZN13Communication6SystemEPh+0x86>
 800a284:	2300      	movs	r3, #0
 800a286:	73bb      	strb	r3, [r7, #14]
 800a288:	4b47      	ldr	r3, [pc, #284]	@ (800a3a8 <_ZN13Communication6SystemEPh+0x1a8>)
 800a28a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d005      	beq.n	800a29c <_ZN13Communication6SystemEPh+0x9c>
 800a290:	4b45      	ldr	r3, [pc, #276]	@ (800a3a8 <_ZN13Communication6SystemEPh+0x1a8>)
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <_ZN13Communication6SystemEPh+0x9c>
 800a298:	2301      	movs	r3, #1
 800a29a:	e000      	b.n	800a29e <_ZN13Communication6SystemEPh+0x9e>
 800a29c:	2300      	movs	r3, #0
 800a29e:	73fb      	strb	r3, [r7, #15]
 800a2a0:	4b41      	ldr	r3, [pc, #260]	@ (800a3a8 <_ZN13Communication6SystemEPh+0x1a8>)
 800a2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d005      	beq.n	800a2b6 <_ZN13Communication6SystemEPh+0xb6>
 800a2aa:	4b3f      	ldr	r3, [pc, #252]	@ (800a3a8 <_ZN13Communication6SystemEPh+0x1a8>)
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <_ZN13Communication6SystemEPh+0xb6>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e000      	b.n	800a2b8 <_ZN13Communication6SystemEPh+0xb8>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	743b      	strb	r3, [r7, #16]
 800a2ba:	4b3b      	ldr	r3, [pc, #236]	@ (800a3a8 <_ZN13Communication6SystemEPh+0x1a8>)
 800a2bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d005      	beq.n	800a2d0 <_ZN13Communication6SystemEPh+0xd0>
 800a2c4:	4b38      	ldr	r3, [pc, #224]	@ (800a3a8 <_ZN13Communication6SystemEPh+0x1a8>)
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d001      	beq.n	800a2d0 <_ZN13Communication6SystemEPh+0xd0>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e000      	b.n	800a2d2 <_ZN13Communication6SystemEPh+0xd2>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	747b      	strb	r3, [r7, #17]
 800a2d4:	4b33      	ldr	r3, [pc, #204]	@ (800a3a4 <_ZN13Communication6SystemEPh+0x1a4>)
 800a2d6:	799b      	ldrb	r3, [r3, #6]
 800a2d8:	74bb      	strb	r3, [r7, #18]
 800a2da:	f107 0208 	add.w	r2, r7, #8
 800a2de:	230b      	movs	r3, #11
 800a2e0:	2102      	movs	r1, #2
 800a2e2:	2064      	movs	r0, #100	@ 0x64
 800a2e4:	f004 fd40 	bl	800ed68 <SuccessDataResult>
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	7818      	ldrb	r0, [r3, #0]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	f004 fd0d 	bl	800ed14 <SendFeedback>
 800a2fa:	e050      	b.n	800a39e <_ZN13Communication6SystemEPh+0x19e>
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	7818      	ldrb	r0, [r3, #0]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	3301      	adds	r3, #1
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	2202      	movs	r2, #2
 800a308:	4619      	mov	r1, r3
 800a30a:	f004 fd03 	bl	800ed14 <SendFeedback>
 800a30e:	f7f7 fe38 	bl	8001f82 <HAL_NVIC_SystemReset>
 800a312:	e044      	b.n	800a39e <_ZN13Communication6SystemEPh+0x19e>
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	7818      	ldrb	r0, [r3, #0]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	3301      	adds	r3, #1
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2202      	movs	r2, #2
 800a320:	4619      	mov	r1, r3
 800a322:	f004 fcf7 	bl	800ed14 <SendFeedback>
 800a326:	f004 fbf3 	bl	800eb10 <HardReset>
 800a32a:	e038      	b.n	800a39e <_ZN13Communication6SystemEPh+0x19e>
 800a32c:	f006 fb02 	bl	8010934 <ClearLoadcellParams>
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f001 fa01 	bl	800b738 <_ZN13Communication15LoadcellAverageEv>
 800a336:	e032      	b.n	800a39e <_ZN13Communication6SystemEPh+0x19e>
 800a338:	f006 fafc 	bl	8010934 <ClearLoadcellParams>
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	3302      	adds	r3, #2
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	021b      	lsls	r3, r3, #8
 800a344:	b29b      	uxth	r3, r3
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	3203      	adds	r2, #3
 800a34a:	7812      	ldrb	r2, [r2, #0]
 800a34c:	4413      	add	r3, r2
 800a34e:	82fb      	strh	r3, [r7, #22]
 800a350:	8afb      	ldrh	r3, [r7, #22]
 800a352:	4619      	mov	r1, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f001 fa19 	bl	800b78c <_ZN13Communication25LoadcellVolumeCalibrationEt>
 800a35a:	e020      	b.n	800a39e <_ZN13Communication6SystemEPh+0x19e>
 800a35c:	f006 faea 	bl	8010934 <ClearLoadcellParams>
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	3302      	adds	r3, #2
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	021b      	lsls	r3, r3, #8
 800a368:	b29b      	uxth	r3, r3
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	3203      	adds	r2, #3
 800a36e:	7812      	ldrb	r2, [r2, #0]
 800a370:	4413      	add	r3, r2
 800a372:	82bb      	strh	r3, [r7, #20]
 800a374:	8abb      	ldrh	r3, [r7, #20]
 800a376:	4619      	mov	r1, r3
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f001 fa3f 	bl	800b7fc <_ZN13Communication23LoadcellFlowCalibrationEt>
 800a37e:	e00e      	b.n	800a39e <_ZN13Communication6SystemEPh+0x19e>
 800a380:	2109      	movs	r1, #9
 800a382:	2000      	movs	r0, #0
 800a384:	f004 fd6b 	bl	800ee5e <ErrorResult>
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	7818      	ldrb	r0, [r3, #0]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	3301      	adds	r3, #1
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	2202      	movs	r2, #2
 800a394:	4619      	mov	r1, r3
 800a396:	f004 fcbd 	bl	800ed14 <SendFeedback>
 800a39a:	e000      	b.n	800a39e <_ZN13Communication6SystemEPh+0x19e>
 800a39c:	bf00      	nop
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	200092a4 	.word	0x200092a4
 800a3a8:	200090bc 	.word	0x200090bc

0800a3ac <_ZN13Communication7CommandEPh>:
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	81fb      	strh	r3, [r7, #14]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	f040 8403 	bne.w	800abca <_ZN13Communication7CommandEPh+0x81e>
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	3302      	adds	r3, #2
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	f003 0304 	and.w	r3, r3, #4
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bf14      	ite	ne
 800a3d2:	2301      	movne	r3, #1
 800a3d4:	2300      	moveq	r3, #0
 800a3d6:	737b      	strb	r3, [r7, #13]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	3302      	adds	r3, #2
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	f003 0302 	and.w	r3, r3, #2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	bf14      	ite	ne
 800a3e6:	2301      	movne	r3, #1
 800a3e8:	2300      	moveq	r3, #0
 800a3ea:	733b      	strb	r3, [r7, #12]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	3302      	adds	r3, #2
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	bf14      	ite	ne
 800a3fa:	2301      	movne	r3, #1
 800a3fc:	2300      	moveq	r3, #0
 800a3fe:	72fb      	strb	r3, [r7, #11]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	2bff      	cmp	r3, #255	@ 0xff
 800a408:	f000 8330 	beq.w	800aa6c <_ZN13Communication7CommandEPh+0x6c0>
 800a40c:	2bff      	cmp	r3, #255	@ 0xff
 800a40e:	f300 83ce 	bgt.w	800abae <_ZN13Communication7CommandEPh+0x802>
 800a412:	2b1b      	cmp	r3, #27
 800a414:	dc40      	bgt.n	800a498 <_ZN13Communication7CommandEPh+0xec>
 800a416:	2b00      	cmp	r3, #0
 800a418:	f340 83c9 	ble.w	800abae <_ZN13Communication7CommandEPh+0x802>
 800a41c:	3b01      	subs	r3, #1
 800a41e:	2b1a      	cmp	r3, #26
 800a420:	f200 83c5 	bhi.w	800abae <_ZN13Communication7CommandEPh+0x802>
 800a424:	a201      	add	r2, pc, #4	@ (adr r2, 800a42c <_ZN13Communication7CommandEPh+0x80>)
 800a426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42a:	bf00      	nop
 800a42c:	0800a4a1 	.word	0x0800a4a1
 800a430:	0800a507 	.word	0x0800a507
 800a434:	0800a56d 	.word	0x0800a56d
 800a438:	0800a643 	.word	0x0800a643
 800a43c:	0800a6a9 	.word	0x0800a6a9
 800a440:	0800a70f 	.word	0x0800a70f
 800a444:	0800a789 	.word	0x0800a789
 800a448:	0800a7e5 	.word	0x0800a7e5
 800a44c:	0800a841 	.word	0x0800a841
 800a450:	0800a8d3 	.word	0x0800a8d3
 800a454:	0800a97d 	.word	0x0800a97d
 800a458:	0800a9e3 	.word	0x0800a9e3
 800a45c:	0800ab57 	.word	0x0800ab57
 800a460:	0800ab47 	.word	0x0800ab47
 800a464:	0800ab4f 	.word	0x0800ab4f
 800a468:	0800abaf 	.word	0x0800abaf
 800a46c:	0800abaf 	.word	0x0800abaf
 800a470:	0800abaf 	.word	0x0800abaf
 800a474:	0800abaf 	.word	0x0800abaf
 800a478:	0800abaf 	.word	0x0800abaf
 800a47c:	0800abaf 	.word	0x0800abaf
 800a480:	0800abaf 	.word	0x0800abaf
 800a484:	0800abaf 	.word	0x0800abaf
 800a488:	0800abaf 	.word	0x0800abaf
 800a48c:	0800abaf 	.word	0x0800abaf
 800a490:	0800ab5f 	.word	0x0800ab5f
 800a494:	0800ab7f 	.word	0x0800ab7f
 800a498:	2bfd      	cmp	r3, #253	@ 0xfd
 800a49a:	f000 82d7 	beq.w	800aa4c <_ZN13Communication7CommandEPh+0x6a0>
 800a49e:	e386      	b.n	800abae <_ZN13Communication7CommandEPh+0x802>
 800a4a0:	4ba4      	ldr	r3, [pc, #656]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a4a2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d017      	beq.n	800a4da <_ZN13Communication7CommandEPh+0x12e>
 800a4aa:	4ba2      	ldr	r3, [pc, #648]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a4ac:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d012      	beq.n	800a4da <_ZN13Communication7CommandEPh+0x12e>
 800a4b4:	4b9f      	ldr	r3, [pc, #636]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a4b6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a4ba:	2b05      	cmp	r3, #5
 800a4bc:	d00d      	beq.n	800a4da <_ZN13Communication7CommandEPh+0x12e>
 800a4be:	2102      	movs	r1, #2
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	f004 fccc 	bl	800ee5e <ErrorResult>
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	7818      	ldrb	r0, [r3, #0]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	f004 fc1e 	bl	800ed14 <SendFeedback>
 800a4d8:	e378      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	3302      	adds	r3, #2
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	bf0c      	ite	eq
 800a4e4:	2301      	moveq	r3, #1
 800a4e6:	2300      	movne	r3, #0
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fd0f 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	7818      	ldrb	r0, [r3, #0]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	2202      	movs	r2, #2
 800a4fe:	4619      	mov	r1, r3
 800a500:	f004 fc08 	bl	800ed14 <SendFeedback>
 800a504:	e362      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a506:	4b8b      	ldr	r3, [pc, #556]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a508:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d017      	beq.n	800a540 <_ZN13Communication7CommandEPh+0x194>
 800a510:	4b88      	ldr	r3, [pc, #544]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a512:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a516:	2b01      	cmp	r3, #1
 800a518:	d012      	beq.n	800a540 <_ZN13Communication7CommandEPh+0x194>
 800a51a:	4b86      	ldr	r3, [pc, #536]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a51c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a520:	2b05      	cmp	r3, #5
 800a522:	d00d      	beq.n	800a540 <_ZN13Communication7CommandEPh+0x194>
 800a524:	2102      	movs	r1, #2
 800a526:	2000      	movs	r0, #0
 800a528:	f004 fc99 	bl	800ee5e <ErrorResult>
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	7818      	ldrb	r0, [r3, #0]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	3301      	adds	r3, #1
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	2202      	movs	r2, #2
 800a538:	4619      	mov	r1, r3
 800a53a:	f004 fbeb 	bl	800ed14 <SendFeedback>
 800a53e:	e345      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	3302      	adds	r3, #2
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	2b01      	cmp	r3, #1
 800a548:	bf0c      	ite	eq
 800a54a:	2301      	moveq	r3, #1
 800a54c:	2300      	movne	r3, #0
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fd0a 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	7818      	ldrb	r0, [r3, #0]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	3301      	adds	r3, #1
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	2202      	movs	r2, #2
 800a564:	4619      	mov	r1, r3
 800a566:	f004 fbd5 	bl	800ed14 <SendFeedback>
 800a56a:	e32f      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a56c:	4b71      	ldr	r3, [pc, #452]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a56e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a572:	2b00      	cmp	r3, #0
 800a574:	d017      	beq.n	800a5a6 <_ZN13Communication7CommandEPh+0x1fa>
 800a576:	4b6f      	ldr	r3, [pc, #444]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a578:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d012      	beq.n	800a5a6 <_ZN13Communication7CommandEPh+0x1fa>
 800a580:	4b6c      	ldr	r3, [pc, #432]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a582:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a586:	2b05      	cmp	r3, #5
 800a588:	d00d      	beq.n	800a5a6 <_ZN13Communication7CommandEPh+0x1fa>
 800a58a:	2102      	movs	r1, #2
 800a58c:	2000      	movs	r0, #0
 800a58e:	f004 fc66 	bl	800ee5e <ErrorResult>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	7818      	ldrb	r0, [r3, #0]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	3301      	adds	r3, #1
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	2202      	movs	r2, #2
 800a59e:	4619      	mov	r1, r3
 800a5a0:	f004 fbb8 	bl	800ed14 <SendFeedback>
 800a5a4:	e312      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a5a6:	4b63      	ldr	r3, [pc, #396]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <_ZN13Communication7CommandEPh+0x20a>
 800a5ae:	4b61      	ldr	r3, [pc, #388]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10d      	bne.n	800a5d2 <_ZN13Communication7CommandEPh+0x226>
 800a5b6:	2105      	movs	r1, #5
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	f004 fc50 	bl	800ee5e <ErrorResult>
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	7818      	ldrb	r0, [r3, #0]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	f004 fba2 	bl	800ed14 <SendFeedback>
 800a5d0:	e2fc      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a5d2:	4b58      	ldr	r3, [pc, #352]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a5d4:	edd3 7a08 	vldr	s15, [r3, #32]
 800a5d8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a5dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e4:	d409      	bmi.n	800a5fa <_ZN13Communication7CommandEPh+0x24e>
 800a5e6:	4b53      	ldr	r3, [pc, #332]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a5e8:	edd3 7a07 	vldr	s15, [r3, #28]
 800a5ec:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a5f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f8:	d50d      	bpl.n	800a616 <_ZN13Communication7CommandEPh+0x26a>
 800a5fa:	2104      	movs	r1, #4
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	f004 fc2e 	bl	800ee5e <ErrorResult>
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	7818      	ldrb	r0, [r3, #0]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	3301      	adds	r3, #1
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	2202      	movs	r2, #2
 800a60e:	4619      	mov	r1, r3
 800a610:	f004 fb80 	bl	800ed14 <SendFeedback>
 800a614:	e2da      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	3302      	adds	r3, #2
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	bf0c      	ite	eq
 800a620:	2301      	moveq	r3, #1
 800a622:	2300      	movne	r3, #0
 800a624:	b2db      	uxtb	r3, r3
 800a626:	4619      	mov	r1, r3
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fccd 	bl	800afc8 <_ZN13Communication14ToggleLoadCellEb>
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	7818      	ldrb	r0, [r3, #0]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	3301      	adds	r3, #1
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2202      	movs	r2, #2
 800a63a:	4619      	mov	r1, r3
 800a63c:	f004 fb6a 	bl	800ed14 <SendFeedback>
 800a640:	e2c4      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a642:	4b3c      	ldr	r3, [pc, #240]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a644:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d017      	beq.n	800a67c <_ZN13Communication7CommandEPh+0x2d0>
 800a64c:	4b39      	ldr	r3, [pc, #228]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a64e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a652:	2b01      	cmp	r3, #1
 800a654:	d012      	beq.n	800a67c <_ZN13Communication7CommandEPh+0x2d0>
 800a656:	4b37      	ldr	r3, [pc, #220]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a658:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a65c:	2b05      	cmp	r3, #5
 800a65e:	d00d      	beq.n	800a67c <_ZN13Communication7CommandEPh+0x2d0>
 800a660:	2102      	movs	r1, #2
 800a662:	2000      	movs	r0, #0
 800a664:	f004 fbfb 	bl	800ee5e <ErrorResult>
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	7818      	ldrb	r0, [r3, #0]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	3301      	adds	r3, #1
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	2202      	movs	r2, #2
 800a674:	4619      	mov	r1, r3
 800a676:	f004 fb4d 	bl	800ed14 <SendFeedback>
 800a67a:	e2a7      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	3302      	adds	r3, #2
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	2b01      	cmp	r3, #1
 800a684:	bf0c      	ite	eq
 800a686:	2301      	moveq	r3, #1
 800a688:	2300      	movne	r3, #0
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fdd4 	bl	800b23c <_ZN13Communication10TogglePumpEb>
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	7818      	ldrb	r0, [r3, #0]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	3301      	adds	r3, #1
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	f004 fb37 	bl	800ed14 <SendFeedback>
 800a6a6:	e291      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a6a8:	4b22      	ldr	r3, [pc, #136]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a6aa:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d017      	beq.n	800a6e2 <_ZN13Communication7CommandEPh+0x336>
 800a6b2:	4b20      	ldr	r3, [pc, #128]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a6b4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d012      	beq.n	800a6e2 <_ZN13Communication7CommandEPh+0x336>
 800a6bc:	4b1d      	ldr	r3, [pc, #116]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a6be:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a6c2:	2b05      	cmp	r3, #5
 800a6c4:	d00d      	beq.n	800a6e2 <_ZN13Communication7CommandEPh+0x336>
 800a6c6:	2102      	movs	r1, #2
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	f004 fbc8 	bl	800ee5e <ErrorResult>
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	7818      	ldrb	r0, [r3, #0]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	2202      	movs	r2, #2
 800a6da:	4619      	mov	r1, r3
 800a6dc:	f004 fb1a 	bl	800ed14 <SendFeedback>
 800a6e0:	e274      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	3302      	adds	r3, #2
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	bf0c      	ite	eq
 800a6ec:	2301      	moveq	r3, #1
 800a6ee:	2300      	movne	r3, #0
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fddb 	bl	800b2b0 <_ZN13Communication11ToggleValveEb>
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	7818      	ldrb	r0, [r3, #0]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	3301      	adds	r3, #1
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	2202      	movs	r2, #2
 800a706:	4619      	mov	r1, r3
 800a708:	f004 fb04 	bl	800ed14 <SendFeedback>
 800a70c:	e25e      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a70e:	4b09      	ldr	r3, [pc, #36]	@ (800a734 <_ZN13Communication7CommandEPh+0x388>)
 800a710:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00f      	beq.n	800a738 <_ZN13Communication7CommandEPh+0x38c>
 800a718:	2102      	movs	r1, #2
 800a71a:	2000      	movs	r0, #0
 800a71c:	f004 fb9f 	bl	800ee5e <ErrorResult>
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	7818      	ldrb	r0, [r3, #0]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	3301      	adds	r3, #1
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	2202      	movs	r2, #2
 800a72c:	4619      	mov	r1, r3
 800a72e:	f004 faf1 	bl	800ed14 <SendFeedback>
 800a732:	e24b      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a734:	200092ac 	.word	0x200092ac
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	3302      	adds	r3, #2
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	021b      	lsls	r3, r3, #8
 800a740:	b29b      	uxth	r3, r3
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	3203      	adds	r2, #3
 800a746:	7812      	ldrb	r2, [r2, #0]
 800a748:	4413      	add	r3, r2
 800a74a:	81fb      	strh	r3, [r7, #14]
 800a74c:	89fb      	ldrh	r3, [r7, #14]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10d      	bne.n	800a76e <_ZN13Communication7CommandEPh+0x3c2>
 800a752:	2106      	movs	r1, #6
 800a754:	2000      	movs	r0, #0
 800a756:	f004 fb82 	bl	800ee5e <ErrorResult>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	7818      	ldrb	r0, [r3, #0]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	3301      	adds	r3, #1
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2202      	movs	r2, #2
 800a766:	4619      	mov	r1, r3
 800a768:	f004 fad4 	bl	800ed14 <SendFeedback>
 800a76c:	e22e      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a76e:	89fb      	ldrh	r3, [r7, #14]
 800a770:	461a      	mov	r2, r3
 800a772:	0152      	lsls	r2, r2, #5
 800a774:	1ad2      	subs	r2, r2, r3
 800a776:	0092      	lsls	r2, r2, #2
 800a778:	4413      	add	r3, r2
 800a77a:	00db      	lsls	r3, r3, #3
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	4619      	mov	r1, r3
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 ff4b 	bl	800b61c <_ZN13Communication10StartCleanEt>
 800a786:	e221      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a788:	4ba4      	ldr	r3, [pc, #656]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a78a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d012      	beq.n	800a7b8 <_ZN13Communication7CommandEPh+0x40c>
 800a792:	4ba2      	ldr	r3, [pc, #648]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a794:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d00d      	beq.n	800a7b8 <_ZN13Communication7CommandEPh+0x40c>
 800a79c:	2102      	movs	r1, #2
 800a79e:	2000      	movs	r0, #0
 800a7a0:	f004 fb5d 	bl	800ee5e <ErrorResult>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	7818      	ldrb	r0, [r3, #0]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	2202      	movs	r2, #2
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	f004 faaf 	bl	800ed14 <SendFeedback>
 800a7b6:	e209      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	3302      	adds	r3, #2
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	bf0c      	ite	eq
 800a7c2:	2301      	moveq	r3, #1
 800a7c4:	2300      	movne	r3, #0
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 ff5c 	bl	800b688 <_ZN13Communication14ToggleSafeModeEb>
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	7818      	ldrb	r0, [r3, #0]
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	4619      	mov	r1, r3
 800a7de:	f004 fa99 	bl	800ed14 <SendFeedback>
 800a7e2:	e1f3      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a7e4:	4b8d      	ldr	r3, [pc, #564]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a7e6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d012      	beq.n	800a814 <_ZN13Communication7CommandEPh+0x468>
 800a7ee:	4b8b      	ldr	r3, [pc, #556]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a7f0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d00d      	beq.n	800a814 <_ZN13Communication7CommandEPh+0x468>
 800a7f8:	2102      	movs	r1, #2
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	f004 fb2f 	bl	800ee5e <ErrorResult>
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	7818      	ldrb	r0, [r3, #0]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	3301      	adds	r3, #1
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	2202      	movs	r2, #2
 800a80c:	4619      	mov	r1, r3
 800a80e:	f004 fa81 	bl	800ed14 <SendFeedback>
 800a812:	e1db      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	3302      	adds	r3, #2
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	bf0c      	ite	eq
 800a81e:	2301      	moveq	r3, #1
 800a820:	2300      	movne	r3, #0
 800a822:	b2db      	uxtb	r3, r3
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fd7c 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	7818      	ldrb	r0, [r3, #0]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	3301      	adds	r3, #1
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2202      	movs	r2, #2
 800a838:	4619      	mov	r1, r3
 800a83a:	f004 fa6b 	bl	800ed14 <SendFeedback>
 800a83e:	e1c5      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a840:	4b76      	ldr	r3, [pc, #472]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a842:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a846:	2b00      	cmp	r3, #0
 800a848:	d017      	beq.n	800a87a <_ZN13Communication7CommandEPh+0x4ce>
 800a84a:	4b74      	ldr	r3, [pc, #464]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a84c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a850:	2b01      	cmp	r3, #1
 800a852:	d012      	beq.n	800a87a <_ZN13Communication7CommandEPh+0x4ce>
 800a854:	4b71      	ldr	r3, [pc, #452]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a856:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a85a:	2b05      	cmp	r3, #5
 800a85c:	d00d      	beq.n	800a87a <_ZN13Communication7CommandEPh+0x4ce>
 800a85e:	2102      	movs	r1, #2
 800a860:	2000      	movs	r0, #0
 800a862:	f004 fafc 	bl	800ee5e <ErrorResult>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	7818      	ldrb	r0, [r3, #0]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	3301      	adds	r3, #1
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	2202      	movs	r2, #2
 800a872:	4619      	mov	r1, r3
 800a874:	f004 fa4e 	bl	800ed14 <SendFeedback>
 800a878:	e1a8      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a87a:	4b68      	ldr	r3, [pc, #416]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d003      	beq.n	800a88a <_ZN13Communication7CommandEPh+0x4de>
 800a882:	4b66      	ldr	r3, [pc, #408]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10d      	bne.n	800a8a6 <_ZN13Communication7CommandEPh+0x4fa>
 800a88a:	2105      	movs	r1, #5
 800a88c:	2000      	movs	r0, #0
 800a88e:	f004 fae6 	bl	800ee5e <ErrorResult>
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	7818      	ldrb	r0, [r3, #0]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	3301      	adds	r3, #1
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2202      	movs	r2, #2
 800a89e:	4619      	mov	r1, r3
 800a8a0:	f004 fa38 	bl	800ed14 <SendFeedback>
 800a8a4:	e192      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	3302      	adds	r3, #2
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	bf0c      	ite	eq
 800a8b0:	2301      	moveq	r3, #1
 800a8b2:	2300      	movne	r3, #0
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fbdf 	bl	800b07c <_ZN13Communication16ToggleReadVolumeEb>
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	7818      	ldrb	r0, [r3, #0]
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	f004 fa22 	bl	800ed14 <SendFeedback>
 800a8d0:	e17c      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a8d2:	4b52      	ldr	r3, [pc, #328]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a8d4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d017      	beq.n	800a90c <_ZN13Communication7CommandEPh+0x560>
 800a8dc:	4b4f      	ldr	r3, [pc, #316]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a8de:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d012      	beq.n	800a90c <_ZN13Communication7CommandEPh+0x560>
 800a8e6:	4b4d      	ldr	r3, [pc, #308]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a8e8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a8ec:	2b05      	cmp	r3, #5
 800a8ee:	d00d      	beq.n	800a90c <_ZN13Communication7CommandEPh+0x560>
 800a8f0:	2102      	movs	r1, #2
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	f004 fab3 	bl	800ee5e <ErrorResult>
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	7818      	ldrb	r0, [r3, #0]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	3301      	adds	r3, #1
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	2202      	movs	r2, #2
 800a904:	4619      	mov	r1, r3
 800a906:	f004 fa05 	bl	800ed14 <SendFeedback>
 800a90a:	e15f      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a90c:	4b43      	ldr	r3, [pc, #268]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a90e:	edd3 7a08 	vldr	s15, [r3, #32]
 800a912:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a91e:	d409      	bmi.n	800a934 <_ZN13Communication7CommandEPh+0x588>
 800a920:	4b3e      	ldr	r3, [pc, #248]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a922:	edd3 7a07 	vldr	s15, [r3, #28]
 800a926:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a92a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a932:	d50d      	bpl.n	800a950 <_ZN13Communication7CommandEPh+0x5a4>
 800a934:	2104      	movs	r1, #4
 800a936:	2000      	movs	r0, #0
 800a938:	f004 fa91 	bl	800ee5e <ErrorResult>
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	7818      	ldrb	r0, [r3, #0]
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	3301      	adds	r3, #1
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2202      	movs	r2, #2
 800a948:	4619      	mov	r1, r3
 800a94a:	f004 f9e3 	bl	800ed14 <SendFeedback>
 800a94e:	e13d      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	3302      	adds	r3, #2
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	2b01      	cmp	r3, #1
 800a958:	bf0c      	ite	eq
 800a95a:	2301      	moveq	r3, #1
 800a95c:	2300      	movne	r3, #0
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	4619      	mov	r1, r3
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fbc4 	bl	800b0f0 <_ZN13Communication14ToggleReadFlowEb>
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	7818      	ldrb	r0, [r3, #0]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	3301      	adds	r3, #1
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	2202      	movs	r2, #2
 800a974:	4619      	mov	r1, r3
 800a976:	f004 f9cd 	bl	800ed14 <SendFeedback>
 800a97a:	e127      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a97c:	4b27      	ldr	r3, [pc, #156]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a97e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a982:	2b00      	cmp	r3, #0
 800a984:	d017      	beq.n	800a9b6 <_ZN13Communication7CommandEPh+0x60a>
 800a986:	4b25      	ldr	r3, [pc, #148]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a988:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d012      	beq.n	800a9b6 <_ZN13Communication7CommandEPh+0x60a>
 800a990:	4b22      	ldr	r3, [pc, #136]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a992:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a996:	2b05      	cmp	r3, #5
 800a998:	d00d      	beq.n	800a9b6 <_ZN13Communication7CommandEPh+0x60a>
 800a99a:	2102      	movs	r1, #2
 800a99c:	2000      	movs	r0, #0
 800a99e:	f004 fa5e 	bl	800ee5e <ErrorResult>
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	7818      	ldrb	r0, [r3, #0]
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	2202      	movs	r2, #2
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	f004 f9b0 	bl	800ed14 <SendFeedback>
 800a9b4:	e10a      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	3302      	adds	r3, #2
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	bf0c      	ite	eq
 800a9c0:	2301      	moveq	r3, #1
 800a9c2:	2300      	movne	r3, #0
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fbcb 	bl	800b164 <_ZN13Communication18ToggleReadFirstEmgEb>
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	7818      	ldrb	r0, [r3, #0]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	2202      	movs	r2, #2
 800a9da:	4619      	mov	r1, r3
 800a9dc:	f004 f99a 	bl	800ed14 <SendFeedback>
 800a9e0:	e0f4      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800a9e2:	4b0e      	ldr	r3, [pc, #56]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a9e4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d019      	beq.n	800aa20 <_ZN13Communication7CommandEPh+0x674>
 800a9ec:	4b0b      	ldr	r3, [pc, #44]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a9ee:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d014      	beq.n	800aa20 <_ZN13Communication7CommandEPh+0x674>
 800a9f6:	4b09      	ldr	r3, [pc, #36]	@ (800aa1c <_ZN13Communication7CommandEPh+0x670>)
 800a9f8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a9fc:	2b05      	cmp	r3, #5
 800a9fe:	d00f      	beq.n	800aa20 <_ZN13Communication7CommandEPh+0x674>
 800aa00:	2102      	movs	r1, #2
 800aa02:	2000      	movs	r0, #0
 800aa04:	f004 fa2b 	bl	800ee5e <ErrorResult>
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	7818      	ldrb	r0, [r3, #0]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2202      	movs	r2, #2
 800aa14:	4619      	mov	r1, r3
 800aa16:	f004 f97d 	bl	800ed14 <SendFeedback>
 800aa1a:	e0d7      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800aa1c:	200092ac 	.word	0x200092ac
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	3302      	adds	r3, #2
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	bf0c      	ite	eq
 800aa2a:	2301      	moveq	r3, #1
 800aa2c:	2300      	movne	r3, #0
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fbcc 	bl	800b1d0 <_ZN13Communication19ToggleReadSecondEmgEb>
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	7818      	ldrb	r0, [r3, #0]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	2202      	movs	r2, #2
 800aa44:	4619      	mov	r1, r3
 800aa46:	f004 f965 	bl	800ed14 <SendFeedback>
 800aa4a:	e0bf      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	3302      	adds	r3, #2
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	021b      	lsls	r3, r3, #8
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	3203      	adds	r2, #3
 800aa5a:	7812      	ldrb	r2, [r2, #0]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	81fb      	strh	r3, [r7, #14]
 800aa60:	89fb      	ldrh	r3, [r7, #14]
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fcd5 	bl	800b414 <_ZN13Communication8StopTestEt>
 800aa6a:	e0af      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800aa6c:	4b59      	ldr	r3, [pc, #356]	@ (800abd4 <_ZN13Communication7CommandEPh+0x828>)
 800aa6e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00d      	beq.n	800aa92 <_ZN13Communication7CommandEPh+0x6e6>
 800aa76:	2102      	movs	r1, #2
 800aa78:	2000      	movs	r0, #0
 800aa7a:	f004 f9f0 	bl	800ee5e <ErrorResult>
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	7818      	ldrb	r0, [r3, #0]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	3301      	adds	r3, #1
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	2202      	movs	r2, #2
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	f004 f942 	bl	800ed14 <SendFeedback>
 800aa90:	e09c      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800aa92:	4b50      	ldr	r3, [pc, #320]	@ (800abd4 <_ZN13Communication7CommandEPh+0x828>)
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <_ZN13Communication7CommandEPh+0x6f6>
 800aa9a:	4b4e      	ldr	r3, [pc, #312]	@ (800abd4 <_ZN13Communication7CommandEPh+0x828>)
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10d      	bne.n	800aabe <_ZN13Communication7CommandEPh+0x712>
 800aaa2:	2105      	movs	r1, #5
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f004 f9da 	bl	800ee5e <ErrorResult>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	7818      	ldrb	r0, [r3, #0]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	3301      	adds	r3, #1
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2202      	movs	r2, #2
 800aab6:	4619      	mov	r1, r3
 800aab8:	f004 f92c 	bl	800ed14 <SendFeedback>
 800aabc:	e086      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800aabe:	4b45      	ldr	r3, [pc, #276]	@ (800abd4 <_ZN13Communication7CommandEPh+0x828>)
 800aac0:	edd3 7a08 	vldr	s15, [r3, #32]
 800aac4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800aac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad0:	d409      	bmi.n	800aae6 <_ZN13Communication7CommandEPh+0x73a>
 800aad2:	4b40      	ldr	r3, [pc, #256]	@ (800abd4 <_ZN13Communication7CommandEPh+0x828>)
 800aad4:	edd3 7a07 	vldr	s15, [r3, #28]
 800aad8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800aadc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aae4:	d50d      	bpl.n	800ab02 <_ZN13Communication7CommandEPh+0x756>
 800aae6:	2104      	movs	r1, #4
 800aae8:	2000      	movs	r0, #0
 800aaea:	f004 f9b8 	bl	800ee5e <ErrorResult>
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	7818      	ldrb	r0, [r3, #0]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2202      	movs	r2, #2
 800aafa:	4619      	mov	r1, r3
 800aafc:	f004 f90a 	bl	800ed14 <SendFeedback>
 800ab00:	e064      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	3303      	adds	r3, #3
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	021b      	lsls	r3, r3, #8
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	3204      	adds	r2, #4
 800ab10:	7812      	ldrb	r2, [r2, #0]
 800ab12:	4413      	add	r3, r2
 800ab14:	81fb      	strh	r3, [r7, #14]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	795a      	ldrb	r2, [r3, #5]
 800ab1a:	4b2e      	ldr	r3, [pc, #184]	@ (800abd4 <_ZN13Communication7CommandEPh+0x828>)
 800ab1c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	799a      	ldrb	r2, [r3, #6]
 800ab24:	4b2b      	ldr	r3, [pc, #172]	@ (800abd4 <_ZN13Communication7CommandEPh+0x828>)
 800ab26:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	3307      	adds	r3, #7
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	7af8      	ldrb	r0, [r7, #11]
 800ab32:	7b3a      	ldrb	r2, [r7, #12]
 800ab34:	7b79      	ldrb	r1, [r7, #13]
 800ab36:	9301      	str	r3, [sp, #4]
 800ab38:	89fb      	ldrh	r3, [r7, #14]
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fc2e 	bl	800b3a0 <_ZN13Communication9StartTestEbbbth>
 800ab44:	e042      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fcb8 	bl	800b4bc <_ZN13Communication9pauseTestEv>
 800ab4c:	e03e      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fc96 	bl	800b480 <_ZN13Communication10resumeTestEv>
 800ab54:	e03a      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 fcd2 	bl	800b500 <_ZN13Communication10cancelTestEv>
 800ab5c:	e036      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	3303      	adds	r3, #3
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	021b      	lsls	r3, r3, #8
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	3204      	adds	r2, #4
 800ab6c:	7812      	ldrb	r2, [r2, #0]
 800ab6e:	4413      	add	r3, r2
 800ab70:	81fb      	strh	r3, [r7, #14]
 800ab72:	89fb      	ldrh	r3, [r7, #14]
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fcf8 	bl	800b56c <_ZN13Communication10ManualPrepEt>
 800ab7c:	e026      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	3303      	adds	r3, #3
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	021b      	lsls	r3, r3, #8
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	3204      	adds	r2, #4
 800ab8c:	7812      	ldrb	r2, [r2, #0]
 800ab8e:	4413      	add	r3, r2
 800ab90:	81fb      	strh	r3, [r7, #14]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	3307      	adds	r3, #7
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	7af8      	ldrb	r0, [r7, #11]
 800ab9a:	7b3a      	ldrb	r2, [r7, #12]
 800ab9c:	7b79      	ldrb	r1, [r7, #13]
 800ab9e:	9301      	str	r3, [sp, #4]
 800aba0:	89fb      	ldrh	r3, [r7, #14]
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	4603      	mov	r3, r0
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fcfc 	bl	800b5a4 <_ZN13Communication12StartManTestEbbbth>
 800abac:	e00e      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800abae:	210a      	movs	r1, #10
 800abb0:	2000      	movs	r0, #0
 800abb2:	f004 f954 	bl	800ee5e <ErrorResult>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	7818      	ldrb	r0, [r3, #0]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	3301      	adds	r3, #1
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	2202      	movs	r2, #2
 800abc2:	4619      	mov	r1, r3
 800abc4:	f004 f8a6 	bl	800ed14 <SendFeedback>
 800abc8:	e000      	b.n	800abcc <_ZN13Communication7CommandEPh+0x820>
 800abca:	bf00      	nop
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	200092ac 	.word	0x200092ac

0800abd8 <_ZN13Communication13ConfigurationEPh>:
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	f040 818e 	bne.w	800af08 <_ZN13Communication13ConfigurationEPh+0x330>
 800abec:	4bac      	ldr	r3, [pc, #688]	@ (800aea0 <_ZN13Communication13ConfigurationEPh+0x2c8>)
 800abee:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d004      	beq.n	800ac00 <_ZN13Communication13ConfigurationEPh+0x28>
 800abf6:	2102      	movs	r1, #2
 800abf8:	2000      	movs	r0, #0
 800abfa:	f004 f930 	bl	800ee5e <ErrorResult>
 800abfe:	e184      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800ac00:	2300      	movs	r3, #0
 800ac02:	81fb      	strh	r3, [r7, #14]
 800ac04:	2300      	movs	r3, #0
 800ac06:	81bb      	strh	r3, [r7, #12]
 800ac08:	2300      	movs	r3, #0
 800ac0a:	817b      	strh	r3, [r7, #10]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	3b01      	subs	r3, #1
 800ac14:	2b0a      	cmp	r3, #10
 800ac16:	f200 8169 	bhi.w	800aeec <_ZN13Communication13ConfigurationEPh+0x314>
 800ac1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac20 <_ZN13Communication13ConfigurationEPh+0x48>)
 800ac1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac20:	0800ac4d 	.word	0x0800ac4d
 800ac24:	0800ac6f 	.word	0x0800ac6f
 800ac28:	0800ac95 	.word	0x0800ac95
 800ac2c:	0800acbb 	.word	0x0800acbb
 800ac30:	0800ace1 	.word	0x0800ace1
 800ac34:	0800ad07 	.word	0x0800ad07
 800ac38:	0800ad2d 	.word	0x0800ad2d
 800ac3c:	0800ad53 	.word	0x0800ad53
 800ac40:	0800ad79 	.word	0x0800ad79
 800ac44:	0800ae1d 	.word	0x0800ae1d
 800ac48:	0800aecb 	.word	0x0800aecb
 800ac4c:	4b94      	ldr	r3, [pc, #592]	@ (800aea0 <_ZN13Communication13ConfigurationEPh+0x2c8>)
 800ac4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac50:	4a94      	ldr	r2, [pc, #592]	@ (800aea4 <_ZN13Communication13ConfigurationEPh+0x2cc>)
 800ac52:	2101      	movs	r1, #1
 800ac54:	2064      	movs	r0, #100	@ 0x64
 800ac56:	f004 f887 	bl	800ed68 <SuccessDataResult>
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	7818      	ldrb	r0, [r3, #0]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	3301      	adds	r3, #1
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2202      	movs	r2, #2
 800ac66:	4619      	mov	r1, r3
 800ac68:	f004 f854 	bl	800ed14 <SendFeedback>
 800ac6c:	e14d      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	1d1a      	adds	r2, r3, #4
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	3302      	adds	r3, #2
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	4619      	mov	r1, r3
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	f001 fc9a 	bl	800c5b4 <_ZN12FlashManager18WriteSendPerSecondEh>
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	7818      	ldrb	r0, [r3, #0]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	3301      	adds	r3, #1
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f004 f841 	bl	800ed14 <SendFeedback>
 800ac92:	e13a      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	1d1a      	adds	r2, r3, #4
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	3302      	adds	r3, #2
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4610      	mov	r0, r2
 800aca2:	f001 fd23 	bl	800c6ec <_ZN12FlashManager22WriteFirstEmgPerSecondEh>
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	7818      	ldrb	r0, [r3, #0]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	3301      	adds	r3, #1
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	2202      	movs	r2, #2
 800acb2:	4619      	mov	r1, r3
 800acb4:	f004 f82e 	bl	800ed14 <SendFeedback>
 800acb8:	e127      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	1d1a      	adds	r2, r3, #4
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	3302      	adds	r3, #2
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	4619      	mov	r1, r3
 800acc6:	4610      	mov	r0, r2
 800acc8:	f001 fdac 	bl	800c824 <_ZN12FlashManager23WriteSecondEmgPerSecondEh>
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	7818      	ldrb	r0, [r3, #0]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	3301      	adds	r3, #1
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	2202      	movs	r2, #2
 800acd8:	4619      	mov	r1, r3
 800acda:	f004 f81b 	bl	800ed14 <SendFeedback>
 800acde:	e114      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	1d1a      	adds	r2, r3, #4
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	3302      	adds	r3, #2
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	4619      	mov	r1, r3
 800acec:	4610      	mov	r0, r2
 800acee:	f001 fe35 	bl	800c95c <_ZN12FlashManager20WriteVolumePerSecondEh>
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	7818      	ldrb	r0, [r3, #0]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	3301      	adds	r3, #1
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	2202      	movs	r2, #2
 800acfe:	4619      	mov	r1, r3
 800ad00:	f004 f808 	bl	800ed14 <SendFeedback>
 800ad04:	e101      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	1d1a      	adds	r2, r3, #4
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	3302      	adds	r3, #2
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	4619      	mov	r1, r3
 800ad12:	4610      	mov	r0, r2
 800ad14:	f001 febe 	bl	800ca94 <_ZN12FlashManager18WriteFlowPerSecondEh>
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	7818      	ldrb	r0, [r3, #0]
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2202      	movs	r2, #2
 800ad24:	4619      	mov	r1, r3
 800ad26:	f003 fff5 	bl	800ed14 <SendFeedback>
 800ad2a:	e0ee      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	1d1a      	adds	r2, r3, #4
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	3302      	adds	r3, #2
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	4619      	mov	r1, r3
 800ad38:	4610      	mov	r0, r2
 800ad3a:	f001 ff47 	bl	800cbcc <_ZN12FlashManager19WritePumpMaxRunTimeEh>
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	7818      	ldrb	r0, [r3, #0]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	3301      	adds	r3, #1
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	2202      	movs	r2, #2
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	f003 ffe2 	bl	800ed14 <SendFeedback>
 800ad50:	e0db      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	1d1a      	adds	r2, r3, #4
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	3302      	adds	r3, #2
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	4610      	mov	r0, r2
 800ad60:	f001 ffd0 	bl	800cd04 <_ZN12FlashManager20WriteValveMaxRunTimeEh>
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	7818      	ldrb	r0, [r3, #0]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	2202      	movs	r2, #2
 800ad70:	4619      	mov	r1, r3
 800ad72:	f003 ffcf 	bl	800ed14 <SendFeedback>
 800ad76:	e0c8      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	3302      	adds	r3, #2
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	021b      	lsls	r3, r3, #8
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	3203      	adds	r2, #3
 800ad86:	7812      	ldrb	r2, [r2, #0]
 800ad88:	4413      	add	r3, r2
 800ad8a:	81fb      	strh	r3, [r7, #14]
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	021b      	lsls	r3, r3, #8
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	3205      	adds	r2, #5
 800ad9a:	7812      	ldrb	r2, [r2, #0]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	81bb      	strh	r3, [r7, #12]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	3306      	adds	r3, #6
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	021b      	lsls	r3, r3, #8
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	3207      	adds	r2, #7
 800adae:	7812      	ldrb	r2, [r2, #0]
 800adb0:	4413      	add	r3, r2
 800adb2:	817b      	strh	r3, [r7, #10]
 800adb4:	89fb      	ldrh	r3, [r7, #14]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d10d      	bne.n	800add6 <_ZN13Communication13ConfigurationEPh+0x1fe>
 800adba:	2106      	movs	r1, #6
 800adbc:	2000      	movs	r0, #0
 800adbe:	f004 f84e 	bl	800ee5e <ErrorResult>
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	7818      	ldrb	r0, [r3, #0]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	3301      	adds	r3, #1
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	2202      	movs	r2, #2
 800adce:	4619      	mov	r1, r3
 800add0:	f003 ffa0 	bl	800ed14 <SendFeedback>
 800add4:	e099      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800add6:	897a      	ldrh	r2, [r7, #10]
 800add8:	89bb      	ldrh	r3, [r7, #12]
 800adda:	429a      	cmp	r2, r3
 800addc:	d30d      	bcc.n	800adfa <_ZN13Communication13ConfigurationEPh+0x222>
 800adde:	2107      	movs	r1, #7
 800ade0:	2000      	movs	r0, #0
 800ade2:	f004 f83c 	bl	800ee5e <ErrorResult>
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	7818      	ldrb	r0, [r3, #0]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	3301      	adds	r3, #1
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	2202      	movs	r2, #2
 800adf2:	4619      	mov	r1, r3
 800adf4:	f003 ff8e 	bl	800ed14 <SendFeedback>
 800adf8:	e087      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	1d18      	adds	r0, r3, #4
 800adfe:	897b      	ldrh	r3, [r7, #10]
 800ae00:	89ba      	ldrh	r2, [r7, #12]
 800ae02:	89f9      	ldrh	r1, [r7, #14]
 800ae04:	f002 fa74 	bl	800d2f0 <_ZN12FlashManager17WriteFirstEmgDataEttt>
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	7818      	ldrb	r0, [r3, #0]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	2202      	movs	r2, #2
 800ae14:	4619      	mov	r1, r3
 800ae16:	f003 ff7d 	bl	800ed14 <SendFeedback>
 800ae1a:	e076      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	3302      	adds	r3, #2
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	3203      	adds	r2, #3
 800ae2a:	7812      	ldrb	r2, [r2, #0]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	81fb      	strh	r3, [r7, #14]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	3304      	adds	r3, #4
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	021b      	lsls	r3, r3, #8
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	3205      	adds	r2, #5
 800ae3e:	7812      	ldrb	r2, [r2, #0]
 800ae40:	4413      	add	r3, r2
 800ae42:	81bb      	strh	r3, [r7, #12]
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	3306      	adds	r3, #6
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	021b      	lsls	r3, r3, #8
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	3207      	adds	r2, #7
 800ae52:	7812      	ldrb	r2, [r2, #0]
 800ae54:	4413      	add	r3, r2
 800ae56:	817b      	strh	r3, [r7, #10]
 800ae58:	89fb      	ldrh	r3, [r7, #14]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10d      	bne.n	800ae7a <_ZN13Communication13ConfigurationEPh+0x2a2>
 800ae5e:	2106      	movs	r1, #6
 800ae60:	2000      	movs	r0, #0
 800ae62:	f003 fffc 	bl	800ee5e <ErrorResult>
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	7818      	ldrb	r0, [r3, #0]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2202      	movs	r2, #2
 800ae72:	4619      	mov	r1, r3
 800ae74:	f003 ff4e 	bl	800ed14 <SendFeedback>
 800ae78:	e047      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800ae7a:	897a      	ldrh	r2, [r7, #10]
 800ae7c:	89bb      	ldrh	r3, [r7, #12]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d312      	bcc.n	800aea8 <_ZN13Communication13ConfigurationEPh+0x2d0>
 800ae82:	2107      	movs	r1, #7
 800ae84:	2000      	movs	r0, #0
 800ae86:	f003 ffea 	bl	800ee5e <ErrorResult>
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	7818      	ldrb	r0, [r3, #0]
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	3301      	adds	r3, #1
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2202      	movs	r2, #2
 800ae96:	4619      	mov	r1, r3
 800ae98:	f003 ff3c 	bl	800ed14 <SendFeedback>
 800ae9c:	e035      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800ae9e:	bf00      	nop
 800aea0:	200092ac 	.word	0x200092ac
 800aea4:	200092e1 	.word	0x200092e1
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	1d18      	adds	r0, r3, #4
 800aeac:	897b      	ldrh	r3, [r7, #10]
 800aeae:	89ba      	ldrh	r2, [r7, #12]
 800aeb0:	89f9      	ldrh	r1, [r7, #14]
 800aeb2:	f002 fbd8 	bl	800d666 <_ZN12FlashManager18WriteSecondEmgDataEttt>
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	7818      	ldrb	r0, [r3, #0]
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2202      	movs	r2, #2
 800aec2:	4619      	mov	r1, r3
 800aec4:	f003 ff26 	bl	800ed14 <SendFeedback>
 800aec8:	e01f      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3304      	adds	r3, #4
 800aece:	4618      	mov	r0, r3
 800aed0:	f001 fa54 	bl	800c37c <_ZN12FlashManager6UpdateEv>
 800aed4:	f003 fe28 	bl	800eb28 <FlashInitialize>
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	7818      	ldrb	r0, [r3, #0]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	3301      	adds	r3, #1
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	2202      	movs	r2, #2
 800aee4:	4619      	mov	r1, r3
 800aee6:	f003 ff15 	bl	800ed14 <SendFeedback>
 800aeea:	e00e      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800aeec:	210b      	movs	r1, #11
 800aeee:	2000      	movs	r0, #0
 800aef0:	f003 ffb5 	bl	800ee5e <ErrorResult>
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	7818      	ldrb	r0, [r3, #0]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	3301      	adds	r3, #1
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	2202      	movs	r2, #2
 800af00:	4619      	mov	r1, r3
 800af02:	f003 ff07 	bl	800ed14 <SendFeedback>
 800af06:	e000      	b.n	800af0a <_ZN13Communication13ConfigurationEPh+0x332>
 800af08:	bf00      	nop
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <_ZN13Communication14ToggleFirstEmgEb>:
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	460b      	mov	r3, r1
 800af1a:	70fb      	strb	r3, [r7, #3]
 800af1c:	4a0f      	ldr	r2, [pc, #60]	@ (800af5c <_ZN13Communication14ToggleFirstEmgEb+0x4c>)
 800af1e:	78fb      	ldrb	r3, [r7, #3]
 800af20:	7013      	strb	r3, [r2, #0]
 800af22:	78fb      	ldrb	r3, [r7, #3]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00c      	beq.n	800af42 <_ZN13Communication14ToggleFirstEmgEb+0x32>
 800af28:	4b0d      	ldr	r3, [pc, #52]	@ (800af60 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d111      	bne.n	800af54 <_ZN13Communication14ToggleFirstEmgEb+0x44>
 800af30:	4a0c      	ldr	r2, [pc, #48]	@ (800af64 <_ZN13Communication14ToggleFirstEmgEb+0x54>)
 800af32:	2100      	movs	r1, #0
 800af34:	480c      	ldr	r0, [pc, #48]	@ (800af68 <_ZN13Communication14ToggleFirstEmgEb+0x58>)
 800af36:	f7fb fd07 	bl	8006948 <osThreadNew>
 800af3a:	4603      	mov	r3, r0
 800af3c:	4a08      	ldr	r2, [pc, #32]	@ (800af60 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800af3e:	6093      	str	r3, [r2, #8]
 800af40:	e009      	b.n	800af56 <_ZN13Communication14ToggleFirstEmgEb+0x46>
 800af42:	4b07      	ldr	r3, [pc, #28]	@ (800af60 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	4618      	mov	r0, r3
 800af48:	f7fb fd90 	bl	8006a6c <osThreadTerminate>
 800af4c:	4b04      	ldr	r3, [pc, #16]	@ (800af60 <_ZN13Communication14ToggleFirstEmgEb+0x50>)
 800af4e:	2200      	movs	r2, #0
 800af50:	609a      	str	r2, [r3, #8]
 800af52:	e000      	b.n	800af56 <_ZN13Communication14ToggleFirstEmgEb+0x46>
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	200092a4 	.word	0x200092a4
 800af60:	200090bc 	.word	0x200090bc
 800af64:	200090cc 	.word	0x200090cc
 800af68:	0800f9d5 	.word	0x0800f9d5

0800af6c <_ZN13Communication15ToggleSecondEmgEb>:
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	460b      	mov	r3, r1
 800af76:	70fb      	strb	r3, [r7, #3]
 800af78:	4a0f      	ldr	r2, [pc, #60]	@ (800afb8 <_ZN13Communication15ToggleSecondEmgEb+0x4c>)
 800af7a:	78fb      	ldrb	r3, [r7, #3]
 800af7c:	7053      	strb	r3, [r2, #1]
 800af7e:	78fb      	ldrb	r3, [r7, #3]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00c      	beq.n	800af9e <_ZN13Communication15ToggleSecondEmgEb+0x32>
 800af84:	4b0d      	ldr	r3, [pc, #52]	@ (800afbc <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d111      	bne.n	800afb0 <_ZN13Communication15ToggleSecondEmgEb+0x44>
 800af8c:	4a0c      	ldr	r2, [pc, #48]	@ (800afc0 <_ZN13Communication15ToggleSecondEmgEb+0x54>)
 800af8e:	2100      	movs	r1, #0
 800af90:	480c      	ldr	r0, [pc, #48]	@ (800afc4 <_ZN13Communication15ToggleSecondEmgEb+0x58>)
 800af92:	f7fb fcd9 	bl	8006948 <osThreadNew>
 800af96:	4603      	mov	r3, r0
 800af98:	4a08      	ldr	r2, [pc, #32]	@ (800afbc <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800af9a:	60d3      	str	r3, [r2, #12]
 800af9c:	e009      	b.n	800afb2 <_ZN13Communication15ToggleSecondEmgEb+0x46>
 800af9e:	4b07      	ldr	r3, [pc, #28]	@ (800afbc <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fb fd62 	bl	8006a6c <osThreadTerminate>
 800afa8:	4b04      	ldr	r3, [pc, #16]	@ (800afbc <_ZN13Communication15ToggleSecondEmgEb+0x50>)
 800afaa:	2200      	movs	r2, #0
 800afac:	60da      	str	r2, [r3, #12]
 800afae:	e000      	b.n	800afb2 <_ZN13Communication15ToggleSecondEmgEb+0x46>
 800afb0:	bf00      	nop
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	200092a4 	.word	0x200092a4
 800afbc:	200090bc 	.word	0x200090bc
 800afc0:	200090f0 	.word	0x200090f0
 800afc4:	0800fb3d 	.word	0x0800fb3d

0800afc8 <_ZN13Communication14ToggleLoadCellEb>:
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	70fb      	strb	r3, [r7, #3]
 800afd4:	4a22      	ldr	r2, [pc, #136]	@ (800b060 <_ZN13Communication14ToggleLoadCellEb+0x98>)
 800afd6:	78fb      	ldrb	r3, [r7, #3]
 800afd8:	7093      	strb	r3, [r2, #2]
 800afda:	4a21      	ldr	r2, [pc, #132]	@ (800b060 <_ZN13Communication14ToggleLoadCellEb+0x98>)
 800afdc:	78fb      	ldrb	r3, [r7, #3]
 800afde:	70d3      	strb	r3, [r2, #3]
 800afe0:	4b20      	ldr	r3, [pc, #128]	@ (800b064 <_ZN13Communication14ToggleLoadCellEb+0x9c>)
 800afe2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800afe6:	2b04      	cmp	r3, #4
 800afe8:	d104      	bne.n	800aff4 <_ZN13Communication14ToggleLoadCellEb+0x2c>
 800afea:	2102      	movs	r1, #2
 800afec:	2000      	movs	r0, #0
 800afee:	f003 ff36 	bl	800ee5e <ErrorResult>
 800aff2:	e031      	b.n	800b058 <_ZN13Communication14ToggleLoadCellEb+0x90>
 800aff4:	78fb      	ldrb	r3, [r7, #3]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d01a      	beq.n	800b030 <_ZN13Communication14ToggleLoadCellEb+0x68>
 800affa:	4b1b      	ldr	r3, [pc, #108]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800affc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800affe:	2b00      	cmp	r3, #0
 800b000:	d127      	bne.n	800b052 <_ZN13Communication14ToggleLoadCellEb+0x8a>
 800b002:	4b19      	ldr	r3, [pc, #100]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b006:	2b00      	cmp	r3, #0
 800b008:	d125      	bne.n	800b056 <_ZN13Communication14ToggleLoadCellEb+0x8e>
 800b00a:	f005 fc93 	bl	8010934 <ClearLoadcellParams>
 800b00e:	4a17      	ldr	r2, [pc, #92]	@ (800b06c <_ZN13Communication14ToggleLoadCellEb+0xa4>)
 800b010:	2100      	movs	r1, #0
 800b012:	4817      	ldr	r0, [pc, #92]	@ (800b070 <_ZN13Communication14ToggleLoadCellEb+0xa8>)
 800b014:	f7fb fc98 	bl	8006948 <osThreadNew>
 800b018:	4603      	mov	r3, r0
 800b01a:	4a13      	ldr	r2, [pc, #76]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b01c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b01e:	4a15      	ldr	r2, [pc, #84]	@ (800b074 <_ZN13Communication14ToggleLoadCellEb+0xac>)
 800b020:	2100      	movs	r1, #0
 800b022:	4815      	ldr	r0, [pc, #84]	@ (800b078 <_ZN13Communication14ToggleLoadCellEb+0xb0>)
 800b024:	f7fb fc90 	bl	8006948 <osThreadNew>
 800b028:	4603      	mov	r3, r0
 800b02a:	4a0f      	ldr	r2, [pc, #60]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b02c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800b02e:	e013      	b.n	800b058 <_ZN13Communication14ToggleLoadCellEb+0x90>
 800b030:	4b0d      	ldr	r3, [pc, #52]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b034:	4618      	mov	r0, r3
 800b036:	f7fb fd19 	bl	8006a6c <osThreadTerminate>
 800b03a:	4b0b      	ldr	r3, [pc, #44]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b03c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fb fd14 	bl	8006a6c <osThreadTerminate>
 800b044:	4b08      	ldr	r3, [pc, #32]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b046:	2200      	movs	r2, #0
 800b048:	659a      	str	r2, [r3, #88]	@ 0x58
 800b04a:	4b07      	ldr	r3, [pc, #28]	@ (800b068 <_ZN13Communication14ToggleLoadCellEb+0xa0>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b050:	e002      	b.n	800b058 <_ZN13Communication14ToggleLoadCellEb+0x90>
 800b052:	bf00      	nop
 800b054:	e000      	b.n	800b058 <_ZN13Communication14ToggleLoadCellEb+0x90>
 800b056:	bf00      	nop
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	200092a4 	.word	0x200092a4
 800b064:	200092ac 	.word	0x200092ac
 800b068:	200090bc 	.word	0x200090bc
 800b06c:	20009148 	.word	0x20009148
 800b070:	0800fe1d 	.word	0x0800fe1d
 800b074:	2000916c 	.word	0x2000916c
 800b078:	0800fca5 	.word	0x0800fca5

0800b07c <_ZN13Communication16ToggleReadVolumeEb>:
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	70fb      	strb	r3, [r7, #3]
 800b088:	4b15      	ldr	r3, [pc, #84]	@ (800b0e0 <_ZN13Communication16ToggleReadVolumeEb+0x64>)
 800b08a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b08e:	2b04      	cmp	r3, #4
 800b090:	d104      	bne.n	800b09c <_ZN13Communication16ToggleReadVolumeEb+0x20>
 800b092:	2102      	movs	r1, #2
 800b094:	2000      	movs	r0, #0
 800b096:	f003 fee2 	bl	800ee5e <ErrorResult>
 800b09a:	e01d      	b.n	800b0d8 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
 800b09c:	78fb      	ldrb	r3, [r7, #3]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00e      	beq.n	800b0c0 <_ZN13Communication16ToggleReadVolumeEb+0x44>
 800b0a2:	4b10      	ldr	r3, [pc, #64]	@ (800b0e4 <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800b0a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d115      	bne.n	800b0d6 <_ZN13Communication16ToggleReadVolumeEb+0x5a>
 800b0aa:	f005 fc43 	bl	8010934 <ClearLoadcellParams>
 800b0ae:	4a0e      	ldr	r2, [pc, #56]	@ (800b0e8 <_ZN13Communication16ToggleReadVolumeEb+0x6c>)
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	480e      	ldr	r0, [pc, #56]	@ (800b0ec <_ZN13Communication16ToggleReadVolumeEb+0x70>)
 800b0b4:	f7fb fc48 	bl	8006948 <osThreadNew>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800b0e4 <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800b0bc:	6613      	str	r3, [r2, #96]	@ 0x60
 800b0be:	e00b      	b.n	800b0d8 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
 800b0c0:	4b08      	ldr	r3, [pc, #32]	@ (800b0e4 <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800b0c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fb fcd1 	bl	8006a6c <osThreadTerminate>
 800b0ca:	4b06      	ldr	r3, [pc, #24]	@ (800b0e4 <_ZN13Communication16ToggleReadVolumeEb+0x68>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	661a      	str	r2, [r3, #96]	@ 0x60
 800b0d0:	f005 fc30 	bl	8010934 <ClearLoadcellParams>
 800b0d4:	e000      	b.n	800b0d8 <_ZN13Communication16ToggleReadVolumeEb+0x5c>
 800b0d6:	bf00      	nop
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	200092ac 	.word	0x200092ac
 800b0e4:	200090bc 	.word	0x200090bc
 800b0e8:	20009148 	.word	0x20009148
 800b0ec:	0800fea1 	.word	0x0800fea1

0800b0f0 <_ZN13Communication14ToggleReadFlowEb>:
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	70fb      	strb	r3, [r7, #3]
 800b0fc:	4b15      	ldr	r3, [pc, #84]	@ (800b154 <_ZN13Communication14ToggleReadFlowEb+0x64>)
 800b0fe:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b102:	2b04      	cmp	r3, #4
 800b104:	d104      	bne.n	800b110 <_ZN13Communication14ToggleReadFlowEb+0x20>
 800b106:	2102      	movs	r1, #2
 800b108:	2000      	movs	r0, #0
 800b10a:	f003 fea8 	bl	800ee5e <ErrorResult>
 800b10e:	e01d      	b.n	800b14c <_ZN13Communication14ToggleReadFlowEb+0x5c>
 800b110:	78fb      	ldrb	r3, [r7, #3]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00e      	beq.n	800b134 <_ZN13Communication14ToggleReadFlowEb+0x44>
 800b116:	4b10      	ldr	r3, [pc, #64]	@ (800b158 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800b118:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d115      	bne.n	800b14a <_ZN13Communication14ToggleReadFlowEb+0x5a>
 800b11e:	f005 fc09 	bl	8010934 <ClearLoadcellParams>
 800b122:	4a0e      	ldr	r2, [pc, #56]	@ (800b15c <_ZN13Communication14ToggleReadFlowEb+0x6c>)
 800b124:	2100      	movs	r1, #0
 800b126:	480e      	ldr	r0, [pc, #56]	@ (800b160 <_ZN13Communication14ToggleReadFlowEb+0x70>)
 800b128:	f7fb fc0e 	bl	8006948 <osThreadNew>
 800b12c:	4603      	mov	r3, r0
 800b12e:	4a0a      	ldr	r2, [pc, #40]	@ (800b158 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800b130:	6653      	str	r3, [r2, #100]	@ 0x64
 800b132:	e00b      	b.n	800b14c <_ZN13Communication14ToggleReadFlowEb+0x5c>
 800b134:	4b08      	ldr	r3, [pc, #32]	@ (800b158 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800b136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fb fc97 	bl	8006a6c <osThreadTerminate>
 800b13e:	4b06      	ldr	r3, [pc, #24]	@ (800b158 <_ZN13Communication14ToggleReadFlowEb+0x68>)
 800b140:	2200      	movs	r2, #0
 800b142:	665a      	str	r2, [r3, #100]	@ 0x64
 800b144:	f005 fbf6 	bl	8010934 <ClearLoadcellParams>
 800b148:	e000      	b.n	800b14c <_ZN13Communication14ToggleReadFlowEb+0x5c>
 800b14a:	bf00      	nop
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	200092ac 	.word	0x200092ac
 800b158:	200090bc 	.word	0x200090bc
 800b15c:	2000916c 	.word	0x2000916c
 800b160:	0800fd21 	.word	0x0800fd21

0800b164 <_ZN13Communication18ToggleReadFirstEmgEb>:
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	460b      	mov	r3, r1
 800b16e:	70fb      	strb	r3, [r7, #3]
 800b170:	4b13      	ldr	r3, [pc, #76]	@ (800b1c0 <_ZN13Communication18ToggleReadFirstEmgEb+0x5c>)
 800b172:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b176:	2b04      	cmp	r3, #4
 800b178:	d104      	bne.n	800b184 <_ZN13Communication18ToggleReadFirstEmgEb+0x20>
 800b17a:	2102      	movs	r1, #2
 800b17c:	2000      	movs	r0, #0
 800b17e:	f003 fe6e 	bl	800ee5e <ErrorResult>
 800b182:	e019      	b.n	800b1b8 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
 800b184:	78fb      	ldrb	r3, [r7, #3]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00c      	beq.n	800b1a4 <_ZN13Communication18ToggleReadFirstEmgEb+0x40>
 800b18a:	4b0e      	ldr	r3, [pc, #56]	@ (800b1c4 <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800b18c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d111      	bne.n	800b1b6 <_ZN13Communication18ToggleReadFirstEmgEb+0x52>
 800b192:	4a0d      	ldr	r2, [pc, #52]	@ (800b1c8 <_ZN13Communication18ToggleReadFirstEmgEb+0x64>)
 800b194:	2100      	movs	r1, #0
 800b196:	480d      	ldr	r0, [pc, #52]	@ (800b1cc <_ZN13Communication18ToggleReadFirstEmgEb+0x68>)
 800b198:	f7fb fbd6 	bl	8006948 <osThreadNew>
 800b19c:	4603      	mov	r3, r0
 800b19e:	4a09      	ldr	r2, [pc, #36]	@ (800b1c4 <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800b1a0:	6693      	str	r3, [r2, #104]	@ 0x68
 800b1a2:	e009      	b.n	800b1b8 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
 800b1a4:	4b07      	ldr	r3, [pc, #28]	@ (800b1c4 <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800b1a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fb fc5f 	bl	8006a6c <osThreadTerminate>
 800b1ae:	4b05      	ldr	r3, [pc, #20]	@ (800b1c4 <_ZN13Communication18ToggleReadFirstEmgEb+0x60>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	669a      	str	r2, [r3, #104]	@ 0x68
 800b1b4:	e000      	b.n	800b1b8 <_ZN13Communication18ToggleReadFirstEmgEb+0x54>
 800b1b6:	bf00      	nop
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	200092ac 	.word	0x200092ac
 800b1c4:	200090bc 	.word	0x200090bc
 800b1c8:	2000916c 	.word	0x2000916c
 800b1cc:	0800fa51 	.word	0x0800fa51

0800b1d0 <_ZN13Communication19ToggleReadSecondEmgEb>:
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	70fb      	strb	r3, [r7, #3]
 800b1dc:	4b13      	ldr	r3, [pc, #76]	@ (800b22c <_ZN13Communication19ToggleReadSecondEmgEb+0x5c>)
 800b1de:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b1e2:	2b04      	cmp	r3, #4
 800b1e4:	d104      	bne.n	800b1f0 <_ZN13Communication19ToggleReadSecondEmgEb+0x20>
 800b1e6:	2102      	movs	r1, #2
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	f003 fe38 	bl	800ee5e <ErrorResult>
 800b1ee:	e019      	b.n	800b224 <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00c      	beq.n	800b210 <_ZN13Communication19ToggleReadSecondEmgEb+0x40>
 800b1f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b230 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800b1f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d111      	bne.n	800b222 <_ZN13Communication19ToggleReadSecondEmgEb+0x52>
 800b1fe:	4a0d      	ldr	r2, [pc, #52]	@ (800b234 <_ZN13Communication19ToggleReadSecondEmgEb+0x64>)
 800b200:	2100      	movs	r1, #0
 800b202:	480d      	ldr	r0, [pc, #52]	@ (800b238 <_ZN13Communication19ToggleReadSecondEmgEb+0x68>)
 800b204:	f7fb fba0 	bl	8006948 <osThreadNew>
 800b208:	4603      	mov	r3, r0
 800b20a:	4a09      	ldr	r2, [pc, #36]	@ (800b230 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800b20c:	66d3      	str	r3, [r2, #108]	@ 0x6c
 800b20e:	e009      	b.n	800b224 <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
 800b210:	4b07      	ldr	r3, [pc, #28]	@ (800b230 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800b212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b214:	4618      	mov	r0, r3
 800b216:	f7fb fc29 	bl	8006a6c <osThreadTerminate>
 800b21a:	4b05      	ldr	r3, [pc, #20]	@ (800b230 <_ZN13Communication19ToggleReadSecondEmgEb+0x60>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b220:	e000      	b.n	800b224 <_ZN13Communication19ToggleReadSecondEmgEb+0x54>
 800b222:	bf00      	nop
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	200092ac 	.word	0x200092ac
 800b230:	200090bc 	.word	0x200090bc
 800b234:	2000916c 	.word	0x2000916c
 800b238:	0800fbb9 	.word	0x0800fbb9

0800b23c <_ZN13Communication10TogglePumpEb>:
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
 800b248:	4a14      	ldr	r2, [pc, #80]	@ (800b29c <_ZN13Communication10TogglePumpEb+0x60>)
 800b24a:	78fb      	ldrb	r3, [r7, #3]
 800b24c:	7113      	strb	r3, [r2, #4]
 800b24e:	78fb      	ldrb	r3, [r7, #3]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d011      	beq.n	800b278 <_ZN13Communication10TogglePumpEb+0x3c>
 800b254:	4b12      	ldr	r3, [pc, #72]	@ (800b2a0 <_ZN13Communication10TogglePumpEb+0x64>)
 800b256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d11b      	bne.n	800b294 <_ZN13Communication10TogglePumpEb+0x58>
 800b25c:	2201      	movs	r2, #1
 800b25e:	2101      	movs	r1, #1
 800b260:	4810      	ldr	r0, [pc, #64]	@ (800b2a4 <_ZN13Communication10TogglePumpEb+0x68>)
 800b262:	f7f7 ff15 	bl	8003090 <HAL_GPIO_WritePin>
 800b266:	4a10      	ldr	r2, [pc, #64]	@ (800b2a8 <_ZN13Communication10TogglePumpEb+0x6c>)
 800b268:	2100      	movs	r1, #0
 800b26a:	4810      	ldr	r0, [pc, #64]	@ (800b2ac <_ZN13Communication10TogglePumpEb+0x70>)
 800b26c:	f7fb fb6c 	bl	8006948 <osThreadNew>
 800b270:	4603      	mov	r3, r0
 800b272:	4a0b      	ldr	r2, [pc, #44]	@ (800b2a0 <_ZN13Communication10TogglePumpEb+0x64>)
 800b274:	6713      	str	r3, [r2, #112]	@ 0x70
 800b276:	e00e      	b.n	800b296 <_ZN13Communication10TogglePumpEb+0x5a>
 800b278:	2200      	movs	r2, #0
 800b27a:	2101      	movs	r1, #1
 800b27c:	4809      	ldr	r0, [pc, #36]	@ (800b2a4 <_ZN13Communication10TogglePumpEb+0x68>)
 800b27e:	f7f7 ff07 	bl	8003090 <HAL_GPIO_WritePin>
 800b282:	4b07      	ldr	r3, [pc, #28]	@ (800b2a0 <_ZN13Communication10TogglePumpEb+0x64>)
 800b284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b286:	4618      	mov	r0, r3
 800b288:	f7fb fbf0 	bl	8006a6c <osThreadTerminate>
 800b28c:	4b04      	ldr	r3, [pc, #16]	@ (800b2a0 <_ZN13Communication10TogglePumpEb+0x64>)
 800b28e:	2200      	movs	r2, #0
 800b290:	671a      	str	r2, [r3, #112]	@ 0x70
 800b292:	e000      	b.n	800b296 <_ZN13Communication10TogglePumpEb+0x5a>
 800b294:	bf00      	nop
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	200092a4 	.word	0x200092a4
 800b2a0:	200090bc 	.word	0x200090bc
 800b2a4:	40020400 	.word	0x40020400
 800b2a8:	20009190 	.word	0x20009190
 800b2ac:	0800ff9d 	.word	0x0800ff9d

0800b2b0 <_ZN13Communication11ToggleValveEb>:
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	70fb      	strb	r3, [r7, #3]
 800b2bc:	4a14      	ldr	r2, [pc, #80]	@ (800b310 <_ZN13Communication11ToggleValveEb+0x60>)
 800b2be:	78fb      	ldrb	r3, [r7, #3]
 800b2c0:	7153      	strb	r3, [r2, #5]
 800b2c2:	78fb      	ldrb	r3, [r7, #3]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d011      	beq.n	800b2ec <_ZN13Communication11ToggleValveEb+0x3c>
 800b2c8:	4b12      	ldr	r3, [pc, #72]	@ (800b314 <_ZN13Communication11ToggleValveEb+0x64>)
 800b2ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d11b      	bne.n	800b308 <_ZN13Communication11ToggleValveEb+0x58>
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	2102      	movs	r1, #2
 800b2d4:	4810      	ldr	r0, [pc, #64]	@ (800b318 <_ZN13Communication11ToggleValveEb+0x68>)
 800b2d6:	f7f7 fedb 	bl	8003090 <HAL_GPIO_WritePin>
 800b2da:	4a10      	ldr	r2, [pc, #64]	@ (800b31c <_ZN13Communication11ToggleValveEb+0x6c>)
 800b2dc:	2100      	movs	r1, #0
 800b2de:	4810      	ldr	r0, [pc, #64]	@ (800b320 <_ZN13Communication11ToggleValveEb+0x70>)
 800b2e0:	f7fb fb32 	bl	8006948 <osThreadNew>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	4a0b      	ldr	r2, [pc, #44]	@ (800b314 <_ZN13Communication11ToggleValveEb+0x64>)
 800b2e8:	6753      	str	r3, [r2, #116]	@ 0x74
 800b2ea:	e00e      	b.n	800b30a <_ZN13Communication11ToggleValveEb+0x5a>
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2102      	movs	r1, #2
 800b2f0:	4809      	ldr	r0, [pc, #36]	@ (800b318 <_ZN13Communication11ToggleValveEb+0x68>)
 800b2f2:	f7f7 fecd 	bl	8003090 <HAL_GPIO_WritePin>
 800b2f6:	4b07      	ldr	r3, [pc, #28]	@ (800b314 <_ZN13Communication11ToggleValveEb+0x64>)
 800b2f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fb fbb6 	bl	8006a6c <osThreadTerminate>
 800b300:	4b04      	ldr	r3, [pc, #16]	@ (800b314 <_ZN13Communication11ToggleValveEb+0x64>)
 800b302:	2200      	movs	r2, #0
 800b304:	675a      	str	r2, [r3, #116]	@ 0x74
 800b306:	e000      	b.n	800b30a <_ZN13Communication11ToggleValveEb+0x5a>
 800b308:	bf00      	nop
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	200092a4 	.word	0x200092a4
 800b314:	200090bc 	.word	0x200090bc
 800b318:	40020400 	.word	0x40020400
 800b31c:	200091b4 	.word	0x200091b4
 800b320:	0800ffd1 	.word	0x0800ffd1

0800b324 <_ZN13Communication16ToggleDataStreamEb>:
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	70fb      	strb	r3, [r7, #3]
 800b330:	4b18      	ldr	r3, [pc, #96]	@ (800b394 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b332:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00e      	beq.n	800b358 <_ZN13Communication16ToggleDataStreamEb+0x34>
 800b33a:	4b16      	ldr	r3, [pc, #88]	@ (800b394 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b33c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b340:	2b01      	cmp	r3, #1
 800b342:	d009      	beq.n	800b358 <_ZN13Communication16ToggleDataStreamEb+0x34>
 800b344:	2102      	movs	r1, #2
 800b346:	2000      	movs	r0, #0
 800b348:	f003 fd89 	bl	800ee5e <ErrorResult>
 800b34c:	2202      	movs	r2, #2
 800b34e:	2108      	movs	r1, #8
 800b350:	2002      	movs	r0, #2
 800b352:	f003 fcdf 	bl	800ed14 <SendFeedback>
 800b356:	e01a      	b.n	800b38e <_ZN13Communication16ToggleDataStreamEb+0x6a>
 800b358:	4a0e      	ldr	r2, [pc, #56]	@ (800b394 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b35a:	78fb      	ldrb	r3, [r7, #3]
 800b35c:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
 800b360:	78fb      	ldrb	r3, [r7, #3]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00f      	beq.n	800b386 <_ZN13Communication16ToggleDataStreamEb+0x62>
 800b366:	4b0c      	ldr	r3, [pc, #48]	@ (800b398 <_ZN13Communication16ToggleDataStreamEb+0x74>)
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	f083 0301 	eor.w	r3, r3, #1
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	d008      	beq.n	800b386 <_ZN13Communication16ToggleDataStreamEb+0x62>
 800b374:	4b09      	ldr	r3, [pc, #36]	@ (800b39c <_ZN13Communication16ToggleDataStreamEb+0x78>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a06      	ldr	r2, [pc, #24]	@ (800b394 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b37a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b37c:	4b05      	ldr	r3, [pc, #20]	@ (800b394 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800b384:	e003      	b.n	800b38e <_ZN13Communication16ToggleDataStreamEb+0x6a>
 800b386:	4b03      	ldr	r3, [pc, #12]	@ (800b394 <_ZN13Communication16ToggleDataStreamEb+0x70>)
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	200092ac 	.word	0x200092ac
 800b398:	20004ee0 	.word	0x20004ee0
 800b39c:	200000cc 	.word	0x200000cc

0800b3a0 <_ZN13Communication9StartTestEbbbth>:
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	4608      	mov	r0, r1
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	70fb      	strb	r3, [r7, #3]
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	70bb      	strb	r3, [r7, #2]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	707b      	strb	r3, [r7, #1]
 800b3ba:	4a15      	ldr	r2, [pc, #84]	@ (800b410 <_ZN13Communication9StartTestEbbbth+0x70>)
 800b3bc:	8a3b      	ldrh	r3, [r7, #16]
 800b3be:	8593      	strh	r3, [r2, #44]	@ 0x2c
 800b3c0:	2000      	movs	r0, #0
 800b3c2:	f005 f8a3 	bl	801050c <StartCleanTask>
 800b3c6:	f005 fa69 	bl	801089c <FixVolume>
 800b3ca:	78fb      	ldrb	r3, [r7, #3]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7ff fd9e 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
 800b3d4:	78bb      	ldrb	r3, [r7, #2]
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f7ff fdc7 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
 800b3de:	787b      	ldrb	r3, [r7, #1]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fdf0 	bl	800afc8 <_ZN13Communication14ToggleLoadCellEb>
 800b3e8:	4a09      	ldr	r2, [pc, #36]	@ (800b410 <_ZN13Communication9StartTestEbbbth+0x70>)
 800b3ea:	7d3b      	ldrb	r3, [r7, #20]
 800b3ec:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 800b3f0:	2101      	movs	r1, #1
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7ff ff96 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
 800b3f8:	4b05      	ldr	r3, [pc, #20]	@ (800b410 <_ZN13Communication9StartTestEbbbth+0x70>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b3fe:	4b04      	ldr	r3, [pc, #16]	@ (800b410 <_ZN13Communication9StartTestEbbbth+0x70>)
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800b406:	bf00      	nop
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	200092ac 	.word	0x200092ac

0800b414 <_ZN13Communication8StopTestEt>:
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	460b      	mov	r3, r1
 800b41e:	807b      	strh	r3, [r7, #2]
 800b420:	4a16      	ldr	r2, [pc, #88]	@ (800b47c <_ZN13Communication8StopTestEt+0x68>)
 800b422:	887b      	ldrh	r3, [r7, #2]
 800b424:	8593      	strh	r3, [r2, #44]	@ 0x2c
 800b426:	2100      	movs	r1, #0
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f7ff ff7b 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
 800b42e:	2201      	movs	r2, #1
 800b430:	21fd      	movs	r1, #253	@ 0xfd
 800b432:	2002      	movs	r0, #2
 800b434:	f003 fc6e 	bl	800ed14 <SendFeedback>
 800b438:	2100      	movs	r1, #0
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff fd68 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
 800b440:	2100      	movs	r1, #0
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7ff fd92 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
 800b448:	2100      	movs	r1, #0
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7ff fdbc 	bl	800afc8 <_ZN13Communication14ToggleLoadCellEb>
 800b450:	2000      	movs	r0, #0
 800b452:	f005 f85b 	bl	801050c <StartCleanTask>
 800b456:	4b09      	ldr	r3, [pc, #36]	@ (800b47c <_ZN13Communication8StopTestEt+0x68>)
 800b458:	2200      	movs	r2, #0
 800b45a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b45c:	4b07      	ldr	r3, [pc, #28]	@ (800b47c <_ZN13Communication8StopTestEt+0x68>)
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800b464:	2202      	movs	r2, #2
 800b466:	21fd      	movs	r1, #253	@ 0xfd
 800b468:	2002      	movs	r0, #2
 800b46a:	f003 fc53 	bl	800ed14 <SendFeedback>
 800b46e:	f7f6 fd88 	bl	8001f82 <HAL_NVIC_SystemReset>
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	200092ac 	.word	0x200092ac

0800b480 <_ZN13Communication10resumeTestEv>:
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	2101      	movs	r1, #1
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff fd40 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
 800b490:	2101      	movs	r1, #1
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff fd6a 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
 800b498:	2101      	movs	r1, #1
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7ff fd94 	bl	800afc8 <_ZN13Communication14ToggleLoadCellEb>
 800b4a0:	2101      	movs	r1, #1
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff ff3e 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
 800b4a8:	2202      	movs	r2, #2
 800b4aa:	210f      	movs	r1, #15
 800b4ac:	2002      	movs	r0, #2
 800b4ae:	f003 fc31 	bl	800ed14 <SendFeedback>
 800b4b2:	bf00      	nop
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
	...

0800b4bc <_ZN13Communication9pauseTestEv>:
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b4fc <_ZN13Communication9pauseTestEv+0x40>)
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	701a      	strb	r2, [r3, #0]
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f7ff ff29 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
 800b4d2:	2100      	movs	r1, #0
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7ff fd1b 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
 800b4da:	2100      	movs	r1, #0
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7ff fd45 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f7ff fd6f 	bl	800afc8 <_ZN13Communication14ToggleLoadCellEb>
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	210e      	movs	r1, #14
 800b4ee:	2002      	movs	r0, #2
 800b4f0:	f003 fc10 	bl	800ed14 <SendFeedback>
 800b4f4:	bf00      	nop
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	20004ee0 	.word	0x20004ee0

0800b500 <_ZN13Communication10cancelTestEv>:
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	4b16      	ldr	r3, [pc, #88]	@ (800b564 <_ZN13Communication10cancelTestEv+0x64>)
 800b50a:	2200      	movs	r2, #0
 800b50c:	701a      	strb	r2, [r3, #0]
 800b50e:	4b16      	ldr	r3, [pc, #88]	@ (800b568 <_ZN13Communication10cancelTestEv+0x68>)
 800b510:	2200      	movs	r2, #0
 800b512:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800b514:	2100      	movs	r1, #0
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7ff ff04 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
 800b51c:	2201      	movs	r2, #1
 800b51e:	210d      	movs	r1, #13
 800b520:	2002      	movs	r0, #2
 800b522:	f003 fbf7 	bl	800ed14 <SendFeedback>
 800b526:	2100      	movs	r1, #0
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7ff fcf1 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
 800b52e:	2100      	movs	r1, #0
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff fd1b 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
 800b536:	2100      	movs	r1, #0
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff fd45 	bl	800afc8 <_ZN13Communication14ToggleLoadCellEb>
 800b53e:	4b0a      	ldr	r3, [pc, #40]	@ (800b568 <_ZN13Communication10cancelTestEv+0x68>)
 800b540:	2200      	movs	r2, #0
 800b542:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b544:	4b08      	ldr	r3, [pc, #32]	@ (800b568 <_ZN13Communication10cancelTestEv+0x68>)
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800b54c:	2202      	movs	r2, #2
 800b54e:	210d      	movs	r1, #13
 800b550:	2002      	movs	r0, #2
 800b552:	f003 fbdf 	bl	800ed14 <SendFeedback>
 800b556:	f7f6 fd14 	bl	8001f82 <HAL_NVIC_SystemReset>
 800b55a:	bf00      	nop
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20004ee0 	.word	0x20004ee0
 800b568:	200092ac 	.word	0x200092ac

0800b56c <_ZN13Communication10ManualPrepEt>:
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	807b      	strh	r3, [r7, #2]
 800b578:	4a09      	ldr	r2, [pc, #36]	@ (800b5a0 <_ZN13Communication10ManualPrepEt+0x34>)
 800b57a:	887b      	ldrh	r3, [r7, #2]
 800b57c:	8593      	strh	r3, [r2, #44]	@ 0x2c
 800b57e:	2201      	movs	r2, #1
 800b580:	211a      	movs	r1, #26
 800b582:	2002      	movs	r0, #2
 800b584:	f003 fbc6 	bl	800ed14 <SendFeedback>
 800b588:	2000      	movs	r0, #0
 800b58a:	f004 ffbf 	bl	801050c <StartCleanTask>
 800b58e:	2202      	movs	r2, #2
 800b590:	211a      	movs	r1, #26
 800b592:	2002      	movs	r0, #2
 800b594:	f003 fbbe 	bl	800ed14 <SendFeedback>
 800b598:	bf00      	nop
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	200092ac 	.word	0x200092ac

0800b5a4 <_ZN13Communication12StartManTestEbbbth>:
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	4608      	mov	r0, r1
 800b5ae:	4611      	mov	r1, r2
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	70fb      	strb	r3, [r7, #3]
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	70bb      	strb	r3, [r7, #2]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	707b      	strb	r3, [r7, #1]
 800b5be:	4a16      	ldr	r2, [pc, #88]	@ (800b618 <_ZN13Communication12StartManTestEbbbth+0x74>)
 800b5c0:	8a3b      	ldrh	r3, [r7, #16]
 800b5c2:	8593      	strh	r3, [r2, #44]	@ 0x2c
 800b5c4:	f005 f96a 	bl	801089c <FixVolume>
 800b5c8:	78fb      	ldrb	r3, [r7, #3]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f7ff fc9f 	bl	800af10 <_ZN13Communication14ToggleFirstEmgEb>
 800b5d2:	78bb      	ldrb	r3, [r7, #2]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7ff fcc8 	bl	800af6c <_ZN13Communication15ToggleSecondEmgEb>
 800b5dc:	787b      	ldrb	r3, [r7, #1]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7ff fcf1 	bl	800afc8 <_ZN13Communication14ToggleLoadCellEb>
 800b5e6:	4a0c      	ldr	r2, [pc, #48]	@ (800b618 <_ZN13Communication12StartManTestEbbbth+0x74>)
 800b5e8:	7d3b      	ldrb	r3, [r7, #20]
 800b5ea:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 800b5ee:	2101      	movs	r1, #1
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f7ff fe97 	bl	800b324 <_ZN13Communication16ToggleDataStreamEb>
 800b5f6:	4b08      	ldr	r3, [pc, #32]	@ (800b618 <_ZN13Communication12StartManTestEbbbth+0x74>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b5fc:	4b06      	ldr	r3, [pc, #24]	@ (800b618 <_ZN13Communication12StartManTestEbbbth+0x74>)
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800b604:	2202      	movs	r2, #2
 800b606:	211b      	movs	r1, #27
 800b608:	2002      	movs	r0, #2
 800b60a:	f003 fb83 	bl	800ed14 <SendFeedback>
 800b60e:	bf00      	nop
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	200092ac 	.word	0x200092ac

0800b61c <_ZN13Communication10StartCleanEt>:
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	460b      	mov	r3, r1
 800b626:	807b      	strh	r3, [r7, #2]
 800b628:	4b13      	ldr	r3, [pc, #76]	@ (800b678 <_ZN13Communication10StartCleanEt+0x5c>)
 800b62a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d009      	beq.n	800b646 <_ZN13Communication10StartCleanEt+0x2a>
 800b632:	2102      	movs	r1, #2
 800b634:	2000      	movs	r0, #0
 800b636:	f003 fc12 	bl	800ee5e <ErrorResult>
 800b63a:	2202      	movs	r2, #2
 800b63c:	2106      	movs	r1, #6
 800b63e:	2002      	movs	r0, #2
 800b640:	f003 fb68 	bl	800ed14 <SendFeedback>
 800b644:	e015      	b.n	800b672 <_ZN13Communication10StartCleanEt+0x56>
 800b646:	4b0c      	ldr	r3, [pc, #48]	@ (800b678 <_ZN13Communication10StartCleanEt+0x5c>)
 800b648:	2203      	movs	r2, #3
 800b64a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800b64e:	4b0b      	ldr	r3, [pc, #44]	@ (800b67c <_ZN13Communication10StartCleanEt+0x60>)
 800b650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10c      	bne.n	800b672 <_ZN13Communication10StartCleanEt+0x56>
 800b658:	4a07      	ldr	r2, [pc, #28]	@ (800b678 <_ZN13Communication10StartCleanEt+0x5c>)
 800b65a:	887b      	ldrh	r3, [r7, #2]
 800b65c:	8593      	strh	r3, [r2, #44]	@ 0x2c
 800b65e:	4a08      	ldr	r2, [pc, #32]	@ (800b680 <_ZN13Communication10StartCleanEt+0x64>)
 800b660:	2100      	movs	r1, #0
 800b662:	4808      	ldr	r0, [pc, #32]	@ (800b684 <_ZN13Communication10StartCleanEt+0x68>)
 800b664:	f7fb f970 	bl	8006948 <osThreadNew>
 800b668:	4603      	mov	r3, r0
 800b66a:	4a04      	ldr	r2, [pc, #16]	@ (800b67c <_ZN13Communication10StartCleanEt+0x60>)
 800b66c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 800b670:	bf00      	nop
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	200092ac 	.word	0x200092ac
 800b67c:	200090bc 	.word	0x200090bc
 800b680:	20009244 	.word	0x20009244
 800b684:	0801050d 	.word	0x0801050d

0800b688 <_ZN13Communication14ToggleSafeModeEb>:
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	460b      	mov	r3, r1
 800b692:	70fb      	strb	r3, [r7, #3]
 800b694:	4a23      	ldr	r2, [pc, #140]	@ (800b724 <_ZN13Communication14ToggleSafeModeEb+0x9c>)
 800b696:	78fb      	ldrb	r3, [r7, #3]
 800b698:	7193      	strb	r3, [r2, #6]
 800b69a:	4b23      	ldr	r3, [pc, #140]	@ (800b728 <_ZN13Communication14ToggleSafeModeEb+0xa0>)
 800b69c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00e      	beq.n	800b6c2 <_ZN13Communication14ToggleSafeModeEb+0x3a>
 800b6a4:	4b20      	ldr	r3, [pc, #128]	@ (800b728 <_ZN13Communication14ToggleSafeModeEb+0xa0>)
 800b6a6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b6aa:	2b04      	cmp	r3, #4
 800b6ac:	d009      	beq.n	800b6c2 <_ZN13Communication14ToggleSafeModeEb+0x3a>
 800b6ae:	2102      	movs	r1, #2
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	f003 fbd4 	bl	800ee5e <ErrorResult>
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	2107      	movs	r1, #7
 800b6ba:	2002      	movs	r0, #2
 800b6bc:	f003 fb2a 	bl	800ed14 <SendFeedback>
 800b6c0:	e02d      	b.n	800b71e <_ZN13Communication14ToggleSafeModeEb+0x96>
 800b6c2:	78fb      	ldrb	r3, [r7, #3]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d012      	beq.n	800b6ee <_ZN13Communication14ToggleSafeModeEb+0x66>
 800b6c8:	4b18      	ldr	r3, [pc, #96]	@ (800b72c <_ZN13Communication14ToggleSafeModeEb+0xa4>)
 800b6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d124      	bne.n	800b71c <_ZN13Communication14ToggleSafeModeEb+0x94>
 800b6d2:	4b15      	ldr	r3, [pc, #84]	@ (800b728 <_ZN13Communication14ToggleSafeModeEb+0xa0>)
 800b6d4:	2204      	movs	r2, #4
 800b6d6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800b6da:	4a15      	ldr	r2, [pc, #84]	@ (800b730 <_ZN13Communication14ToggleSafeModeEb+0xa8>)
 800b6dc:	2100      	movs	r1, #0
 800b6de:	4815      	ldr	r0, [pc, #84]	@ (800b734 <_ZN13Communication14ToggleSafeModeEb+0xac>)
 800b6e0:	f7fb f932 	bl	8006948 <osThreadNew>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	4a11      	ldr	r2, [pc, #68]	@ (800b72c <_ZN13Communication14ToggleSafeModeEb+0xa4>)
 800b6e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800b6ec:	e017      	b.n	800b71e <_ZN13Communication14ToggleSafeModeEb+0x96>
 800b6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b728 <_ZN13Communication14ToggleSafeModeEb+0xa0>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800b6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b72c <_ZN13Communication14ToggleSafeModeEb+0xa4>)
 800b6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fb f9b5 	bl	8006a6c <osThreadTerminate>
 800b702:	2100      	movs	r1, #0
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f7ff fd99 	bl	800b23c <_ZN13Communication10TogglePumpEb>
 800b70a:	2100      	movs	r1, #0
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7ff fdcf 	bl	800b2b0 <_ZN13Communication11ToggleValveEb>
 800b712:	4b06      	ldr	r3, [pc, #24]	@ (800b72c <_ZN13Communication14ToggleSafeModeEb+0xa4>)
 800b714:	2200      	movs	r2, #0
 800b716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800b71a:	e000      	b.n	800b71e <_ZN13Communication14ToggleSafeModeEb+0x96>
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	200092a4 	.word	0x200092a4
 800b728:	200092ac 	.word	0x200092ac
 800b72c:	200090bc 	.word	0x200090bc
 800b730:	20009268 	.word	0x20009268
 800b734:	08010795 	.word	0x08010795

0800b738 <_ZN13Communication15LoadcellAverageEv>:
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	4b0e      	ldr	r3, [pc, #56]	@ (800b77c <_ZN13Communication15LoadcellAverageEv+0x44>)
 800b742:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b746:	2b00      	cmp	r3, #0
 800b748:	d009      	beq.n	800b75e <_ZN13Communication15LoadcellAverageEv+0x26>
 800b74a:	2102      	movs	r1, #2
 800b74c:	2000      	movs	r0, #0
 800b74e:	f003 fb86 	bl	800ee5e <ErrorResult>
 800b752:	2202      	movs	r2, #2
 800b754:	2104      	movs	r1, #4
 800b756:	2001      	movs	r0, #1
 800b758:	f003 fadc 	bl	800ed14 <SendFeedback>
 800b75c:	e00b      	b.n	800b776 <_ZN13Communication15LoadcellAverageEv+0x3e>
 800b75e:	4b07      	ldr	r3, [pc, #28]	@ (800b77c <_ZN13Communication15LoadcellAverageEv+0x44>)
 800b760:	2202      	movs	r2, #2
 800b762:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800b766:	4a06      	ldr	r2, [pc, #24]	@ (800b780 <_ZN13Communication15LoadcellAverageEv+0x48>)
 800b768:	2100      	movs	r1, #0
 800b76a:	4806      	ldr	r0, [pc, #24]	@ (800b784 <_ZN13Communication15LoadcellAverageEv+0x4c>)
 800b76c:	f7fb f8ec 	bl	8006948 <osThreadNew>
 800b770:	4603      	mov	r3, r0
 800b772:	4a05      	ldr	r2, [pc, #20]	@ (800b788 <_ZN13Communication15LoadcellAverageEv+0x50>)
 800b774:	6793      	str	r3, [r2, #120]	@ 0x78
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	200092ac 	.word	0x200092ac
 800b780:	200091d8 	.word	0x200091d8
 800b784:	08010019 	.word	0x08010019
 800b788:	200090bc 	.word	0x200090bc

0800b78c <_ZN13Communication25LoadcellVolumeCalibrationEt>:
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	460b      	mov	r3, r1
 800b796:	807b      	strh	r3, [r7, #2]
 800b798:	4b14      	ldr	r3, [pc, #80]	@ (800b7ec <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800b79a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d009      	beq.n	800b7b6 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x2a>
 800b7a2:	2102      	movs	r1, #2
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	f003 fb5a 	bl	800ee5e <ErrorResult>
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	2105      	movs	r1, #5
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	f003 fab0 	bl	800ed14 <SendFeedback>
 800b7b4:	e017      	b.n	800b7e6 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x5a>
 800b7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7ec <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800b7be:	4b0b      	ldr	r3, [pc, #44]	@ (800b7ec <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800b7c0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b7c4:	61da      	str	r2, [r3, #28]
 800b7c6:	887b      	ldrh	r3, [r7, #2]
 800b7c8:	ee07 3a90 	vmov	s15, r3
 800b7cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d0:	4b06      	ldr	r3, [pc, #24]	@ (800b7ec <_ZN13Communication25LoadcellVolumeCalibrationEt+0x60>)
 800b7d2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 800b7d6:	4a06      	ldr	r2, [pc, #24]	@ (800b7f0 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x64>)
 800b7d8:	2100      	movs	r1, #0
 800b7da:	4806      	ldr	r0, [pc, #24]	@ (800b7f4 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x68>)
 800b7dc:	f7fb f8b4 	bl	8006948 <osThreadNew>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	4a05      	ldr	r2, [pc, #20]	@ (800b7f8 <_ZN13Communication25LoadcellVolumeCalibrationEt+0x6c>)
 800b7e4:	67d3      	str	r3, [r2, #124]	@ 0x7c
 800b7e6:	3708      	adds	r7, #8
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	200092ac 	.word	0x200092ac
 800b7f0:	200091fc 	.word	0x200091fc
 800b7f4:	080101b5 	.word	0x080101b5
 800b7f8:	200090bc 	.word	0x200090bc

0800b7fc <_ZN13Communication23LoadcellFlowCalibrationEt>:
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	460b      	mov	r3, r1
 800b806:	807b      	strh	r3, [r7, #2]
 800b808:	4b15      	ldr	r3, [pc, #84]	@ (800b860 <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800b80a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d009      	beq.n	800b826 <_ZN13Communication23LoadcellFlowCalibrationEt+0x2a>
 800b812:	2102      	movs	r1, #2
 800b814:	2000      	movs	r0, #0
 800b816:	f003 fb22 	bl	800ee5e <ErrorResult>
 800b81a:	2202      	movs	r2, #2
 800b81c:	2106      	movs	r1, #6
 800b81e:	2001      	movs	r0, #1
 800b820:	f003 fa78 	bl	800ed14 <SendFeedback>
 800b824:	e018      	b.n	800b858 <_ZN13Communication23LoadcellFlowCalibrationEt+0x5c>
 800b826:	4b0e      	ldr	r3, [pc, #56]	@ (800b860 <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800b828:	2202      	movs	r2, #2
 800b82a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800b82e:	4b0c      	ldr	r3, [pc, #48]	@ (800b860 <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800b830:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b834:	621a      	str	r2, [r3, #32]
 800b836:	887b      	ldrh	r3, [r7, #2]
 800b838:	ee07 3a90 	vmov	s15, r3
 800b83c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b840:	4b07      	ldr	r3, [pc, #28]	@ (800b860 <_ZN13Communication23LoadcellFlowCalibrationEt+0x64>)
 800b842:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 800b846:	4a07      	ldr	r2, [pc, #28]	@ (800b864 <_ZN13Communication23LoadcellFlowCalibrationEt+0x68>)
 800b848:	2100      	movs	r1, #0
 800b84a:	4807      	ldr	r0, [pc, #28]	@ (800b868 <_ZN13Communication23LoadcellFlowCalibrationEt+0x6c>)
 800b84c:	f7fb f87c 	bl	8006948 <osThreadNew>
 800b850:	4603      	mov	r3, r0
 800b852:	4a06      	ldr	r2, [pc, #24]	@ (800b86c <_ZN13Communication23LoadcellFlowCalibrationEt+0x70>)
 800b854:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	200092ac 	.word	0x200092ac
 800b864:	20009220 	.word	0x20009220
 800b868:	08010365 	.word	0x08010365
 800b86c:	200090bc 	.word	0x200090bc

0800b870 <_ZN12FlashManageraSERKS_>:
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	685a      	ldr	r2, [r3, #4]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	605a      	str	r2, [r3, #4]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	689a      	ldr	r2, [r3, #8]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	609a      	str	r2, [r3, #8]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	7b1a      	ldrb	r2, [r3, #12]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	731a      	strb	r2, [r3, #12]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	7b5a      	ldrb	r2, [r3, #13]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	735a      	strb	r2, [r3, #13]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	7b9a      	ldrb	r2, [r3, #14]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	739a      	strb	r2, [r3, #14]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	7bda      	ldrb	r2, [r3, #15]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	73da      	strb	r2, [r3, #15]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	7c1a      	ldrb	r2, [r3, #16]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	741a      	strb	r2, [r3, #16]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	7c5a      	ldrb	r2, [r3, #17]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	745a      	strb	r2, [r3, #17]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	7c9a      	ldrb	r2, [r3, #18]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	749a      	strb	r2, [r3, #18]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	7cda      	ldrb	r2, [r3, #19]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	74da      	strb	r2, [r3, #19]
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	7d1a      	ldrb	r2, [r3, #20]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	751a      	strb	r2, [r3, #20]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	7d5a      	ldrb	r2, [r3, #21]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	755a      	strb	r2, [r3, #21]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	7d9a      	ldrb	r2, [r3, #22]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	759a      	strb	r2, [r3, #22]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	7dda      	ldrb	r2, [r3, #23]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	75da      	strb	r2, [r3, #23]
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	7e1a      	ldrb	r2, [r3, #24]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	761a      	strb	r2, [r3, #24]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	7e5a      	ldrb	r2, [r3, #25]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	765a      	strb	r2, [r3, #25]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <_ZN13Communication15SetFlashManagerE12FlashManager>:
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	3304      	adds	r3, #4
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff ffa9 	bl	800b870 <_ZN12FlashManageraSERKS_>
 800b91e:	bf00      	nop
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <_ZN3EmgC1Ev>:
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	4a0e      	ldr	r2, [pc, #56]	@ (800b96c <_ZN3EmgC1Ev+0x44>)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	601a      	str	r2, [r3, #0]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b93c:	461a      	mov	r2, r3
 800b93e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800b942:	6393      	str	r3, [r2, #56]	@ 0x38
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b94a:	461a      	mov	r2, r3
 800b94c:	2300      	movs	r3, #0
 800b94e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b956:	461a      	mov	r2, r3
 800b958:	2300      	movs	r3, #0
 800b95a:	6413      	str	r3, [r2, #64]	@ 0x40
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4618      	mov	r0, r3
 800b960:	370c      	adds	r7, #12
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	08011cf4 	.word	0x08011cf4

0800b970 <_ZN3EmgD1Ev>:
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	4a04      	ldr	r2, [pc, #16]	@ (800b98c <_ZN3EmgD1Ev+0x1c>)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	601a      	str	r2, [r3, #0]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4618      	mov	r0, r3
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr
 800b98c:	08011cf4 	.word	0x08011cf4

0800b990 <_ZN3EmgD0Ev>:
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff ffe9 	bl	800b970 <_ZN3EmgD1Ev>
 800b99e:	f242 0144 	movw	r1, #8260	@ 0x2044
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f005 f8a6 	bl	8010af4 <_ZdlPvj>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
	...

0800b9b4 <_ZN3Emg12FirstEmgReadEb>:
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	70fb      	strb	r3, [r7, #3]
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f988 	bl	800bcd8 <_ZN3Emg19FirstEmgReadFromSPIEh>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	7f1b      	ldrb	r3, [r3, #28]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	605a      	str	r2, [r3, #4]
 800b9d2:	2103      	movs	r1, #3
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 f97f 	bl	800bcd8 <_ZN3Emg19FirstEmgReadFromSPIEh>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	7f1b      	ldrb	r3, [r3, #28]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	609a      	str	r2, [r3, #8]
 800b9e4:	2105      	movs	r1, #5
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 f976 	bl	800bcd8 <_ZN3Emg19FirstEmgReadFromSPIEh>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	7f1b      	ldrb	r3, [r3, #28]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	60da      	str	r2, [r3, #12]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	689a      	ldr	r2, [r3, #8]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	021b      	lsls	r3, r3, #8
 800ba00:	441a      	add	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	625a      	str	r2, [r3, #36]	@ 0x24
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	621a      	str	r2, [r3, #32]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba12:	4619      	mov	r1, r3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f9c7 	bl	800bda8 <_ZN3Emg27FirstEmgMovingAverageFilterEm>
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	4b1f      	ldr	r3, [pc, #124]	@ (800baa0 <_ZN3Emg12FirstEmgReadEb+0xec>)
 800ba22:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	625a      	str	r2, [r3, #36]	@ 0x24
 800ba2a:	78fb      	ldrb	r3, [r7, #3]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d033      	beq.n	800ba98 <_ZN3Emg12FirstEmgReadEb+0xe4>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba38:	425a      	negs	r2, r3
 800ba3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba3e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ba42:	bf58      	it	pl
 800ba44:	4253      	negpl	r3, r2
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800ba4c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	0a19      	lsrs	r1, r3, #8
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba5a:	b2c9      	uxtb	r1, r1
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	320c      	adds	r2, #12
 800ba60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba6c:	1c5a      	adds	r2, r3, #1
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	b2d9      	uxtb	r1, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	320c      	adds	r2, #12
 800ba76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba82:	3302      	adds	r3, #2
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800ba8a:	6313      	str	r3, [r2, #48]	@ 0x30
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba94:	4a02      	ldr	r2, [pc, #8]	@ (800baa0 <_ZN3Emg12FirstEmgReadEb+0xec>)
 800ba96:	6093      	str	r3, [r2, #8]
 800ba98:	bf00      	nop
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	20009328 	.word	0x20009328

0800baa4 <_ZN3Emg13SecondEmgReadEb>:
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	70fb      	strb	r3, [r7, #3]
 800bab0:	2101      	movs	r1, #1
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f942 	bl	800bd3c <_ZN3Emg20SecondEmgReadFromSPIEh>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	7f5b      	ldrb	r3, [r3, #29]
 800babc:	461a      	mov	r2, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	611a      	str	r2, [r3, #16]
 800bac2:	2103      	movs	r1, #3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f939 	bl	800bd3c <_ZN3Emg20SecondEmgReadFromSPIEh>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	7f5b      	ldrb	r3, [r3, #29]
 800bace:	461a      	mov	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	615a      	str	r2, [r3, #20]
 800bad4:	2105      	movs	r1, #5
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f930 	bl	800bd3c <_ZN3Emg20SecondEmgReadFromSPIEh>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	7f5b      	ldrb	r3, [r3, #29]
 800bae0:	461a      	mov	r2, r3
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	619a      	str	r2, [r3, #24]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	695a      	ldr	r2, [r3, #20]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	021b      	lsls	r3, r3, #8
 800baf0:	441a      	add	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	629a      	str	r2, [r3, #40]	@ 0x28
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb02:	4619      	mov	r1, r3
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 f9ff 	bl	800bf08 <_ZN3Emg28SecondEmgMovingAverageFilterEm>
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	4b20      	ldr	r3, [pc, #128]	@ (800bb94 <_ZN3Emg13SecondEmgReadEb+0xf0>)
 800bb12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bb1a:	78fb      	ldrb	r3, [r7, #3]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d035      	beq.n	800bb8c <_ZN3Emg13SecondEmgReadEb+0xe8>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bb26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb28:	425a      	negs	r2, r3
 800bb2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb2e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bb32:	bf58      	it	pl
 800bb34:	4253      	negpl	r3, r2
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800bb3c:	6353      	str	r3, [r2, #52]	@ 0x34
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	0a19      	lsrs	r1, r3, #8
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bb48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb4a:	b2c9      	uxtb	r1, r1
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 800bb52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bb5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb5e:	1c5a      	adds	r2, r3, #1
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	b2d9      	uxtb	r1, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 800bb6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bb74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb76:	3302      	adds	r3, #2
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800bb7e:	6353      	str	r3, [r2, #52]	@ 0x34
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bb86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb88:	4a02      	ldr	r2, [pc, #8]	@ (800bb94 <_ZN3Emg13SecondEmgReadEb+0xf0>)
 800bb8a:	60d3      	str	r3, [r2, #12]
 800bb8c:	bf00      	nop
 800bb8e:	3710      	adds	r7, #16
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	20009328 	.word	0x20009328

0800bb98 <_ZN3Emg13FirstEmgSetupEv>:
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	210e      	movs	r1, #14
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f839 	bl	800bc1c <_ZN3Emg18FirstEmgWriteToSPIEtt>
 800bbaa:	2200      	movs	r2, #0
 800bbac:	2110      	movs	r1, #16
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f834 	bl	800bc1c <_ZN3Emg18FirstEmgWriteToSPIEtt>
 800bbb4:	2203      	movs	r2, #3
 800bbb6:	2112      	movs	r1, #18
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f82f 	bl	800bc1c <_ZN3Emg18FirstEmgWriteToSPIEtt>
 800bbbe:	2210      	movs	r2, #16
 800bbc0:	2114      	movs	r1, #20
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f82a 	bl	800bc1c <_ZN3Emg18FirstEmgWriteToSPIEtt>
 800bbc8:	220c      	movs	r2, #12
 800bbca:	2116      	movs	r1, #22
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 f825 	bl	800bc1c <_ZN3Emg18FirstEmgWriteToSPIEtt>
 800bbd2:	bf00      	nop
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <_ZN3Emg14SecondEmgSetupEv>:
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	210e      	movs	r1, #14
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f846 	bl	800bc78 <_ZN3Emg19SecondEmgWriteToSPIEtt>
 800bbec:	2200      	movs	r2, #0
 800bbee:	2110      	movs	r1, #16
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f841 	bl	800bc78 <_ZN3Emg19SecondEmgWriteToSPIEtt>
 800bbf6:	2203      	movs	r2, #3
 800bbf8:	2112      	movs	r1, #18
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f83c 	bl	800bc78 <_ZN3Emg19SecondEmgWriteToSPIEtt>
 800bc00:	2210      	movs	r2, #16
 800bc02:	2114      	movs	r1, #20
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 f837 	bl	800bc78 <_ZN3Emg19SecondEmgWriteToSPIEtt>
 800bc0a:	220c      	movs	r2, #12
 800bc0c:	2116      	movs	r1, #22
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f832 	bl	800bc78 <_ZN3Emg19SecondEmgWriteToSPIEtt>
 800bc14:	bf00      	nop
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <_ZN3Emg18FirstEmgWriteToSPIEtt>:
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	460b      	mov	r3, r1
 800bc26:	807b      	strh	r3, [r7, #2]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	803b      	strh	r3, [r7, #0]
 800bc2c:	887b      	ldrh	r3, [r7, #2]
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	733b      	strb	r3, [r7, #12]
 800bc32:	883b      	ldrh	r3, [r7, #0]
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	737b      	strb	r3, [r7, #13]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	2110      	movs	r1, #16
 800bc3c:	480b      	ldr	r0, [pc, #44]	@ (800bc6c <_ZN3Emg18FirstEmgWriteToSPIEtt+0x50>)
 800bc3e:	f7f7 fa27 	bl	8003090 <HAL_GPIO_WritePin>
 800bc42:	f107 010c 	add.w	r1, r7, #12
 800bc46:	2364      	movs	r3, #100	@ 0x64
 800bc48:	2202      	movs	r2, #2
 800bc4a:	4809      	ldr	r0, [pc, #36]	@ (800bc70 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x54>)
 800bc4c:	f7f7 ff1b 	bl	8003a86 <HAL_SPI_Transmit>
 800bc50:	4603      	mov	r3, r0
 800bc52:	461a      	mov	r2, r3
 800bc54:	4b07      	ldr	r3, [pc, #28]	@ (800bc74 <_ZN3Emg18FirstEmgWriteToSPIEtt+0x58>)
 800bc56:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	2110      	movs	r1, #16
 800bc5e:	4803      	ldr	r0, [pc, #12]	@ (800bc6c <_ZN3Emg18FirstEmgWriteToSPIEtt+0x50>)
 800bc60:	f7f7 fa16 	bl	8003090 <HAL_GPIO_WritePin>
 800bc64:	bf00      	nop
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	40020000 	.word	0x40020000
 800bc70:	200000d0 	.word	0x200000d0
 800bc74:	20009328 	.word	0x20009328

0800bc78 <_ZN3Emg19SecondEmgWriteToSPIEtt>:
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	807b      	strh	r3, [r7, #2]
 800bc84:	4613      	mov	r3, r2
 800bc86:	803b      	strh	r3, [r7, #0]
 800bc88:	887b      	ldrh	r3, [r7, #2]
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	733b      	strb	r3, [r7, #12]
 800bc8e:	883b      	ldrh	r3, [r7, #0]
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	737b      	strb	r3, [r7, #13]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bc9a:	480c      	ldr	r0, [pc, #48]	@ (800bccc <_ZN3Emg19SecondEmgWriteToSPIEtt+0x54>)
 800bc9c:	f7f7 f9f8 	bl	8003090 <HAL_GPIO_WritePin>
 800bca0:	f107 010c 	add.w	r1, r7, #12
 800bca4:	2364      	movs	r3, #100	@ 0x64
 800bca6:	2202      	movs	r2, #2
 800bca8:	4809      	ldr	r0, [pc, #36]	@ (800bcd0 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x58>)
 800bcaa:	f7f7 feec 	bl	8003a86 <HAL_SPI_Transmit>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	4b08      	ldr	r3, [pc, #32]	@ (800bcd4 <_ZN3Emg19SecondEmgWriteToSPIEtt+0x5c>)
 800bcb4:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800bcb8:	2201      	movs	r2, #1
 800bcba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bcbe:	4803      	ldr	r0, [pc, #12]	@ (800bccc <_ZN3Emg19SecondEmgWriteToSPIEtt+0x54>)
 800bcc0:	f7f7 f9e6 	bl	8003090 <HAL_GPIO_WritePin>
 800bcc4:	bf00      	nop
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	40020400 	.word	0x40020400
 800bcd0:	20000128 	.word	0x20000128
 800bcd4:	20009328 	.word	0x20009328

0800bcd8 <_ZN3Emg19FirstEmgReadFromSPIEh>:
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	70fb      	strb	r3, [r7, #3]
 800bce4:	2200      	movs	r2, #0
 800bce6:	2110      	movs	r1, #16
 800bce8:	4811      	ldr	r0, [pc, #68]	@ (800bd30 <_ZN3Emg19FirstEmgReadFromSPIEh+0x58>)
 800bcea:	f7f7 f9d1 	bl	8003090 <HAL_GPIO_WritePin>
 800bcee:	1cfb      	adds	r3, r7, #3
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	480f      	ldr	r0, [pc, #60]	@ (800bd34 <_ZN3Emg19FirstEmgReadFromSPIEh+0x5c>)
 800bcf6:	f7f8 facd 	bl	8004294 <HAL_SPI_Transmit_DMA>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	4b0e      	ldr	r3, [pc, #56]	@ (800bd38 <_ZN3Emg19FirstEmgReadFromSPIEh+0x60>)
 800bd00:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	331c      	adds	r3, #28
 800bd08:	2201      	movs	r2, #1
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	4809      	ldr	r0, [pc, #36]	@ (800bd34 <_ZN3Emg19FirstEmgReadFromSPIEh+0x5c>)
 800bd0e:	f7f8 fb73 	bl	80043f8 <HAL_SPI_Receive_DMA>
 800bd12:	4603      	mov	r3, r0
 800bd14:	461a      	mov	r2, r3
 800bd16:	4b08      	ldr	r3, [pc, #32]	@ (800bd38 <_ZN3Emg19FirstEmgReadFromSPIEh+0x60>)
 800bd18:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	2110      	movs	r1, #16
 800bd20:	4803      	ldr	r0, [pc, #12]	@ (800bd30 <_ZN3Emg19FirstEmgReadFromSPIEh+0x58>)
 800bd22:	f7f7 f9b5 	bl	8003090 <HAL_GPIO_WritePin>
 800bd26:	bf00      	nop
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	40020000 	.word	0x40020000
 800bd34:	200000d0 	.word	0x200000d0
 800bd38:	20009328 	.word	0x20009328

0800bd3c <_ZN3Emg20SecondEmgReadFromSPIEh>:
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bd4e:	4812      	ldr	r0, [pc, #72]	@ (800bd98 <_ZN3Emg20SecondEmgReadFromSPIEh+0x5c>)
 800bd50:	f7f7 f99e 	bl	8003090 <HAL_GPIO_WritePin>
 800bd54:	1cfb      	adds	r3, r7, #3
 800bd56:	2201      	movs	r2, #1
 800bd58:	4619      	mov	r1, r3
 800bd5a:	4810      	ldr	r0, [pc, #64]	@ (800bd9c <_ZN3Emg20SecondEmgReadFromSPIEh+0x60>)
 800bd5c:	f7f8 fa9a 	bl	8004294 <HAL_SPI_Transmit_DMA>
 800bd60:	4603      	mov	r3, r0
 800bd62:	461a      	mov	r2, r3
 800bd64:	4b0e      	ldr	r3, [pc, #56]	@ (800bda0 <_ZN3Emg20SecondEmgReadFromSPIEh+0x64>)
 800bd66:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	331d      	adds	r3, #29
 800bd6e:	2201      	movs	r2, #1
 800bd70:	4619      	mov	r1, r3
 800bd72:	480a      	ldr	r0, [pc, #40]	@ (800bd9c <_ZN3Emg20SecondEmgReadFromSPIEh+0x60>)
 800bd74:	f7f8 fb40 	bl	80043f8 <HAL_SPI_Receive_DMA>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	4b08      	ldr	r3, [pc, #32]	@ (800bda0 <_ZN3Emg20SecondEmgReadFromSPIEh+0x64>)
 800bd7e:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
 800bd82:	2201      	movs	r2, #1
 800bd84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bd88:	4803      	ldr	r0, [pc, #12]	@ (800bd98 <_ZN3Emg20SecondEmgReadFromSPIEh+0x5c>)
 800bd8a:	f7f7 f981 	bl	8003090 <HAL_GPIO_WritePin>
 800bd8e:	bf00      	nop
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	40020400 	.word	0x40020400
 800bd9c:	20000128 	.word	0x20000128
 800bda0:	20009328 	.word	0x20009328
 800bda4:	00000000 	.word	0x00000000

0800bda8 <_ZN3Emg27FirstEmgMovingAverageFilterEm>:
 800bda8:	b5b0      	push	{r4, r5, r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
 800bdb2:	4b4f      	ldr	r3, [pc, #316]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800bdb4:	895b      	ldrh	r3, [r3, #10]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x16>
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	e08f      	b.n	800bede <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x136>
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800bdc4:	4a4b      	ldr	r2, [pc, #300]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800bdc6:	6013      	str	r3, [r2, #0]
 800bdc8:	4b4a      	ldr	r3, [pc, #296]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	4b4a      	ldr	r3, [pc, #296]	@ (800bef8 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x150>)
 800bdd0:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800bdd2:	4b47      	ldr	r3, [pc, #284]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800bdd4:	895b      	ldrh	r3, [r3, #10]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	4b45      	ldr	r3, [pc, #276]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800bdda:	899b      	ldrh	r3, [r3, #12]
 800bddc:	4413      	add	r3, r2
 800bdde:	0fda      	lsrs	r2, r3, #31
 800bde0:	4413      	add	r3, r2
 800bde2:	105b      	asrs	r3, r3, #1
 800bde4:	81fb      	strh	r3, [r7, #14]
 800bde6:	4b42      	ldr	r3, [pc, #264]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800bde8:	895b      	ldrh	r3, [r3, #10]
 800bdea:	461a      	mov	r2, r3
 800bdec:	4b41      	ldr	r3, [pc, #260]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d909      	bls.n	800be08 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x60>
 800bdf4:	4b3e      	ldr	r3, [pc, #248]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800bdf6:	899b      	ldrh	r3, [r3, #12]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	4b3e      	ldr	r3, [pc, #248]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d202      	bcs.n	800be08 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x60>
 800be02:	89fb      	ldrh	r3, [r7, #14]
 800be04:	4a3b      	ldr	r2, [pc, #236]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800be06:	6013      	str	r3, [r2, #0]
 800be08:	89fa      	ldrh	r2, [r7, #14]
 800be0a:	4b3a      	ldr	r3, [pc, #232]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d907      	bls.n	800be22 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x7a>
 800be12:	89fa      	ldrh	r2, [r7, #14]
 800be14:	89f9      	ldrh	r1, [r7, #14]
 800be16:	4b37      	ldr	r3, [pc, #220]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	1acb      	subs	r3, r1, r3
 800be1c:	4413      	add	r3, r2
 800be1e:	4a35      	ldr	r2, [pc, #212]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800be20:	6013      	str	r3, [r2, #0]
 800be22:	4b34      	ldr	r3, [pc, #208]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	89fb      	ldrh	r3, [r7, #14]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	4a32      	ldr	r2, [pc, #200]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800be2c:	6013      	str	r3, [r2, #0]
 800be2e:	4b31      	ldr	r3, [pc, #196]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	b29a      	uxth	r2, r3
 800be34:	4b30      	ldr	r3, [pc, #192]	@ (800bef8 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x150>)
 800be36:	861a      	strh	r2, [r3, #48]	@ 0x30
 800be38:	4b2d      	ldr	r3, [pc, #180]	@ (800bef0 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x148>)
 800be3a:	891b      	ldrh	r3, [r3, #8]
 800be3c:	461a      	mov	r2, r3
 800be3e:	4b2d      	ldr	r3, [pc, #180]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	429a      	cmp	r2, r3
 800be44:	d204      	bcs.n	800be50 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0xa8>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800be4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be4e:	e046      	b.n	800bede <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x136>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800be56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be58:	4618      	mov	r0, r3
 800be5a:	f7f4 fb4b 	bl	80004f4 <__aeabi_ui2d>
 800be5e:	a322      	add	r3, pc, #136	@ (adr r3, 800bee8 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x140>)
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	f7f4 fbc0 	bl	80005e8 <__aeabi_dmul>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	4614      	mov	r4, r2
 800be6e:	461d      	mov	r5, r3
 800be70:	4b20      	ldr	r3, [pc, #128]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4618      	mov	r0, r3
 800be76:	f7f4 fb3d 	bl	80004f4 <__aeabi_ui2d>
 800be7a:	f04f 0200 	mov.w	r2, #0
 800be7e:	4b1f      	ldr	r3, [pc, #124]	@ (800befc <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x154>)
 800be80:	f7f4 fbb2 	bl	80005e8 <__aeabi_dmul>
 800be84:	4602      	mov	r2, r0
 800be86:	460b      	mov	r3, r1
 800be88:	4620      	mov	r0, r4
 800be8a:	4629      	mov	r1, r5
 800be8c:	f7f4 f9f6 	bl	800027c <__adddf3>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	4610      	mov	r0, r2
 800be96:	4619      	mov	r1, r3
 800be98:	f04f 0200 	mov.w	r2, #0
 800be9c:	4b18      	ldr	r3, [pc, #96]	@ (800bf00 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x158>)
 800be9e:	f7f4 fccd 	bl	800083c <__aeabi_ddiv>
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	4610      	mov	r0, r2
 800bea8:	4619      	mov	r1, r3
 800beaa:	f7f4 fdaf 	bl	8000a0c <__aeabi_d2uiz>
 800beae:	4603      	mov	r3, r0
 800beb0:	4a10      	ldr	r2, [pc, #64]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800beb2:	6013      	str	r3, [r2, #0]
 800beb4:	4b0f      	ldr	r3, [pc, #60]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800bebe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800bec0:	4b0c      	ldr	r3, [pc, #48]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3b32      	subs	r3, #50	@ 0x32
 800bec6:	4a0b      	ldr	r2, [pc, #44]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800bec8:	6013      	str	r3, [r2, #0]
 800beca:	4b0a      	ldr	r3, [pc, #40]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a0d      	ldr	r2, [pc, #52]	@ (800bf04 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x15c>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d902      	bls.n	800beda <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x132>
 800bed4:	4b07      	ldr	r3, [pc, #28]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	4b06      	ldr	r3, [pc, #24]	@ (800bef4 <_ZN3Emg27FirstEmgMovingAverageFilterEm+0x14c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bdb0      	pop	{r4, r5, r7, pc}
 800bee6:	bf00      	nop
 800bee8:	00000000 	.word	0x00000000
 800beec:	4058e000 	.word	0x4058e000
 800bef0:	200092ac 	.word	0x200092ac
 800bef4:	20004ee4 	.word	0x20004ee4
 800bef8:	20009328 	.word	0x20009328
 800befc:	3fe00000 	.word	0x3fe00000
 800bf00:	40590000 	.word	0x40590000
 800bf04:	000101cf 	.word	0x000101cf

0800bf08 <_ZN3Emg28SecondEmgMovingAverageFilterEm>:
 800bf08:	b5b0      	push	{r4, r5, r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
 800bf12:	4b45      	ldr	r3, [pc, #276]	@ (800c028 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800bf14:	8a1b      	ldrh	r3, [r3, #16]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d101      	bne.n	800bf1e <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x16>
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	e07b      	b.n	800c016 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x10e>
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800bf24:	60fb      	str	r3, [r7, #12]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	b29a      	uxth	r2, r3
 800bf2a:	4b40      	ldr	r3, [pc, #256]	@ (800c02c <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x124>)
 800bf2c:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800bf2e:	4b3e      	ldr	r3, [pc, #248]	@ (800c028 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800bf30:	8a1b      	ldrh	r3, [r3, #16]
 800bf32:	461a      	mov	r2, r3
 800bf34:	4b3c      	ldr	r3, [pc, #240]	@ (800c028 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800bf36:	8a5b      	ldrh	r3, [r3, #18]
 800bf38:	4413      	add	r3, r2
 800bf3a:	0fda      	lsrs	r2, r3, #31
 800bf3c:	4413      	add	r3, r2
 800bf3e:	105b      	asrs	r3, r3, #1
 800bf40:	817b      	strh	r3, [r7, #10]
 800bf42:	4b39      	ldr	r3, [pc, #228]	@ (800c028 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800bf44:	8a1b      	ldrh	r3, [r3, #16]
 800bf46:	461a      	mov	r2, r3
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d207      	bcs.n	800bf5e <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x56>
 800bf4e:	4b36      	ldr	r3, [pc, #216]	@ (800c028 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800bf50:	8a5b      	ldrh	r3, [r3, #18]
 800bf52:	461a      	mov	r2, r3
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d901      	bls.n	800bf5e <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x56>
 800bf5a:	897b      	ldrh	r3, [r7, #10]
 800bf5c:	60fb      	str	r3, [r7, #12]
 800bf5e:	897b      	ldrh	r3, [r7, #10]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d205      	bcs.n	800bf72 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x6a>
 800bf66:	897a      	ldrh	r2, [r7, #10]
 800bf68:	8979      	ldrh	r1, [r7, #10]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	1acb      	subs	r3, r1, r3
 800bf6e:	4413      	add	r3, r2
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	897b      	ldrh	r3, [r7, #10]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	60fb      	str	r3, [r7, #12]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	4b2b      	ldr	r3, [pc, #172]	@ (800c02c <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x124>)
 800bf80:	865a      	strh	r2, [r3, #50]	@ 0x32
 800bf82:	4b29      	ldr	r3, [pc, #164]	@ (800c028 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x120>)
 800bf84:	89db      	ldrh	r3, [r3, #14]
 800bf86:	461a      	mov	r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d904      	bls.n	800bf98 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x90>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bf94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf96:	e03e      	b.n	800c016 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x10e>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bf9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7f4 faa7 	bl	80004f4 <__aeabi_ui2d>
 800bfa6:	a31e      	add	r3, pc, #120	@ (adr r3, 800c020 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x118>)
 800bfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfac:	f7f4 fb1c 	bl	80005e8 <__aeabi_dmul>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	4614      	mov	r4, r2
 800bfb6:	461d      	mov	r5, r3
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f7f4 fa9b 	bl	80004f4 <__aeabi_ui2d>
 800bfbe:	f04f 0200 	mov.w	r2, #0
 800bfc2:	4b1b      	ldr	r3, [pc, #108]	@ (800c030 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x128>)
 800bfc4:	f7f4 fb10 	bl	80005e8 <__aeabi_dmul>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4620      	mov	r0, r4
 800bfce:	4629      	mov	r1, r5
 800bfd0:	f7f4 f954 	bl	800027c <__adddf3>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4610      	mov	r0, r2
 800bfda:	4619      	mov	r1, r3
 800bfdc:	f04f 0200 	mov.w	r2, #0
 800bfe0:	4b14      	ldr	r3, [pc, #80]	@ (800c034 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x12c>)
 800bfe2:	f7f4 fc2b 	bl	800083c <__aeabi_ddiv>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	460b      	mov	r3, r1
 800bfea:	4610      	mov	r0, r2
 800bfec:	4619      	mov	r1, r3
 800bfee:	f7f4 fd0d 	bl	8000a0c <__aeabi_d2uiz>
 800bff2:	4603      	mov	r3, r0
 800bff4:	60fb      	str	r3, [r7, #12]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800bffc:	461a      	mov	r2, r3
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6413      	str	r3, [r2, #64]	@ 0x40
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3b32      	subs	r3, #50	@ 0x32
 800c006:	60fb      	str	r3, [r7, #12]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	4a0b      	ldr	r2, [pc, #44]	@ (800c038 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x130>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d901      	bls.n	800c014 <_ZN3Emg28SecondEmgMovingAverageFilterEm+0x10c>
 800c010:	2300      	movs	r3, #0
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bdb0      	pop	{r4, r5, r7, pc}
 800c01e:	bf00      	nop
 800c020:	00000000 	.word	0x00000000
 800c024:	4058e000 	.word	0x4058e000
 800c028:	200092ac 	.word	0x200092ac
 800c02c:	20009328 	.word	0x20009328
 800c030:	3fe00000 	.word	0x3fe00000
 800c034:	40590000 	.word	0x40590000
 800c038:	000101cf 	.word	0x000101cf

0800c03c <_ZN6FilterC1Ev>:
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	4a04      	ldr	r2, [pc, #16]	@ (800c058 <_ZN6FilterC1Ev+0x1c>)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	601a      	str	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4618      	mov	r0, r3
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	08011d04 	.word	0x08011d04

0800c05c <_ZN6FilterD1Ev>:
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	4a04      	ldr	r2, [pc, #16]	@ (800c078 <_ZN6FilterD1Ev+0x1c>)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	601a      	str	r2, [r3, #0]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4618      	mov	r0, r3
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr
 800c078:	08011d04 	.word	0x08011d04

0800c07c <_ZN6FilterD0Ev>:
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f7ff ffe9 	bl	800c05c <_ZN6FilterD1Ev>
 800c08a:	2104      	movs	r1, #4
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f004 fd31 	bl	8010af4 <_ZdlPvj>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4618      	mov	r0, r3
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <_ZN6Filter14MoovingAverageEPfS0_mmf>:
 800c09c:	b480      	push	{r7}
 800c09e:	b089      	sub	sp, #36	@ 0x24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6178      	str	r0, [r7, #20]
 800c0a4:	6139      	str	r1, [r7, #16]
 800c0a6:	60fa      	str	r2, [r7, #12]
 800c0a8:	60bb      	str	r3, [r7, #8]
 800c0aa:	ed87 0a01 	vstr	s0, [r7, #4]
 800c0ae:	68ba      	ldr	r2, [r7, #8]
 800c0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d302      	bcc.n	800c0bc <_ZN6Filter14MoovingAverageEPfS0_mmf+0x20>
 800c0b6:	f04f 0300 	mov.w	r3, #0
 800c0ba:	e03b      	b.n	800c134 <_ZN6Filter14MoovingAverageEPfS0_mmf+0x98>
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	ed93 7a00 	vldr	s14, [r3]
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	693a      	ldr	r2, [r7, #16]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	edd3 7a00 	vldr	s15, [r3]
 800c0ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0d2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c0d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	edc3 7a00 	vstr	s15, [r3]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	edd3 7a00 	vldr	s15, [r3]
 800c0e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f2:	d502      	bpl.n	800c0fa <_ZN6Filter14MoovingAverageEPfS0_mmf+0x5e>
 800c0f4:	f04f 0300 	mov.w	r3, #0
 800c0f8:	e001      	b.n	800c0fe <_ZN6Filter14MoovingAverageEPfS0_mmf+0x62>
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	6013      	str	r3, [r2, #0]
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	4413      	add	r3, r2
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00a      	beq.n	800c12a <_ZN6Filter14MoovingAverageEPfS0_mmf+0x8e>
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	edd3 6a00 	vldr	s13, [r3]
 800c11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c11c:	ee07 3a90 	vmov	s15, r3
 800c120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c128:	e001      	b.n	800c12e <_ZN6Filter14MoovingAverageEPfS0_mmf+0x92>
 800c12a:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800c148 <_ZN6Filter14MoovingAverageEPfS0_mmf+0xac>
 800c12e:	edc7 7a07 	vstr	s15, [r7, #28]
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	ee07 3a90 	vmov	s15, r3
 800c138:	eeb0 0a67 	vmov.f32	s0, s15
 800c13c:	3724      	adds	r7, #36	@ 0x24
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	00000000 	.word	0x00000000

0800c14c <_ZN12FlashManager8ReadDataEPhhib>:
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	603b      	str	r3, [r7, #0]
 800c158:	4613      	mov	r3, r2
 800c15a:	71fb      	strb	r3, [r7, #7]
 800c15c:	f7f6 fb78 	bl	8002850 <HAL_FLASH_Unlock>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	bf0c      	ite	eq
 800c166:	2301      	moveq	r3, #1
 800c168:	2300      	movne	r3, #0
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d028      	beq.n	800c1c2 <_ZN12FlashManager8ReadDataEPhhib+0x76>
 800c170:	2300      	movs	r3, #0
 800c172:	617b      	str	r3, [r7, #20]
 800c174:	e01f      	b.n	800c1b6 <_ZN12FlashManager8ReadDataEPhhib+0x6a>
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	689a      	ldr	r2, [r3, #8]
 800c17a:	79fb      	ldrb	r3, [r7, #7]
 800c17c:	441a      	add	r2, r3
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	4413      	add	r3, r2
 800c182:	613b      	str	r3, [r7, #16]
 800c184:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00a      	beq.n	800c1a2 <_ZN12FlashManager8ReadDataEPhhib+0x56>
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	1acb      	subs	r3, r1, r3
 800c194:	3b01      	subs	r3, #1
 800c196:	68b9      	ldr	r1, [r7, #8]
 800c198:	440b      	add	r3, r1
 800c19a:	7812      	ldrb	r2, [r2, #0]
 800c19c:	b2d2      	uxtb	r2, r2
 800c19e:	701a      	strb	r2, [r3, #0]
 800c1a0:	e006      	b.n	800c1b0 <_ZN12FlashManager8ReadDataEPhhib+0x64>
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	68b9      	ldr	r1, [r7, #8]
 800c1a8:	440b      	add	r3, r1
 800c1aa:	7812      	ldrb	r2, [r2, #0]
 800c1ac:	b2d2      	uxtb	r2, r2
 800c1ae:	701a      	strb	r2, [r3, #0]
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	617b      	str	r3, [r7, #20]
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	dbdb      	blt.n	800c176 <_ZN12FlashManager8ReadDataEPhhib+0x2a>
 800c1be:	f7f6 fb69 	bl	8002894 <HAL_FLASH_Lock>
 800c1c2:	bf00      	nop
 800c1c4:	3718      	adds	r7, #24
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <_ZN12FlashManagerC1Ev>:
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	4a22      	ldr	r2, [pc, #136]	@ (800c260 <_ZN12FlashManagerC1Ev+0x94>)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	601a      	str	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4a21      	ldr	r2, [pc, #132]	@ (800c264 <_ZN12FlashManagerC1Ev+0x98>)
 800c1de:	609a      	str	r2, [r3, #8]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	731a      	strb	r2, [r3, #12]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2208      	movs	r2, #8
 800c1ea:	735a      	strb	r2, [r3, #13]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2210      	movs	r2, #16
 800c1f0:	739a      	strb	r2, [r3, #14]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2214      	movs	r2, #20
 800c1f6:	73da      	strb	r2, [r3, #15]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2218      	movs	r2, #24
 800c1fc:	741a      	strb	r2, [r3, #16]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	221e      	movs	r2, #30
 800c202:	745a      	strb	r2, [r3, #17]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2224      	movs	r2, #36	@ 0x24
 800c208:	749a      	strb	r2, [r3, #18]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2225      	movs	r2, #37	@ 0x25
 800c20e:	74da      	strb	r2, [r3, #19]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2226      	movs	r2, #38	@ 0x26
 800c214:	751a      	strb	r2, [r3, #20]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2227      	movs	r2, #39	@ 0x27
 800c21a:	755a      	strb	r2, [r3, #21]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2228      	movs	r2, #40	@ 0x28
 800c220:	759a      	strb	r2, [r3, #22]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2229      	movs	r2, #41	@ 0x29
 800c226:	75da      	strb	r2, [r3, #23]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	222a      	movs	r2, #42	@ 0x2a
 800c22c:	761a      	strb	r2, [r3, #24]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	222b      	movs	r2, #43	@ 0x2b
 800c232:	765a      	strb	r2, [r3, #25]
 800c234:	f004 fda6 	bl	8010d84 <rand>
 800c238:	4602      	mov	r2, r0
 800c23a:	4b0b      	ldr	r3, [pc, #44]	@ (800c268 <_ZN12FlashManagerC1Ev+0x9c>)
 800c23c:	fb83 1302 	smull	r1, r3, r3, r2
 800c240:	1199      	asrs	r1, r3, #6
 800c242:	17d3      	asrs	r3, r2, #31
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c24a:	fb01 f303 	mul.w	r3, r1, r3
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	6053      	str	r3, [r2, #4]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4618      	mov	r0, r3
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	08011d14 	.word	0x08011d14
 800c264:	08020000 	.word	0x08020000
 800c268:	10624dd3 	.word	0x10624dd3

0800c26c <_ZN12FlashManagerD1Ev>:
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	4a04      	ldr	r2, [pc, #16]	@ (800c288 <_ZN12FlashManagerD1Ev+0x1c>)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	601a      	str	r2, [r3, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4618      	mov	r0, r3
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr
 800c288:	08011d14 	.word	0x08011d14

0800c28c <_ZN12FlashManagerD0Ev>:
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7ff ffe9 	bl	800c26c <_ZN12FlashManagerD1Ev>
 800c29a:	211c      	movs	r1, #28
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f004 fc29 	bl	8010af4 <_ZdlPvj>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <_ZN12FlashManager10BackupDataEv>:
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af02      	add	r7, sp, #8
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	4b08      	ldr	r3, [pc, #32]	@ (800c2dc <_ZN12FlashManager10BackupDataEv+0x30>)
 800c2bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2be:	2100      	movs	r1, #0
 800c2c0:	9100      	str	r1, [sp, #0]
 800c2c2:	4907      	ldr	r1, [pc, #28]	@ (800c2e0 <_ZN12FlashManager10BackupDataEv+0x34>)
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7ff ff41 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800c2ca:	4b04      	ldr	r3, [pc, #16]	@ (800c2dc <_ZN12FlashManager10BackupDataEv+0x30>)
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 800c2d2:	bf00      	nop
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	200092ac 	.word	0x200092ac
 800c2e0:	200092e1 	.word	0x200092e1

0800c2e4 <_ZN12FlashManager9HardResetEb>:
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b08e      	sub	sp, #56	@ 0x38
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	70fb      	strb	r3, [r7, #3]
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	f083 0301 	eor.w	r3, r3, #1
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d015      	beq.n	800c328 <_ZN12FlashManager9HardResetEb+0x44>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	623b      	str	r3, [r7, #32]
 800c300:	2305      	movs	r3, #5
 800c302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c304:	2301      	movs	r3, #1
 800c306:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c308:	2301      	movs	r3, #1
 800c30a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c30c:	2300      	movs	r3, #0
 800c30e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c310:	2302      	movs	r3, #2
 800c312:	637b      	str	r3, [r7, #52]	@ 0x34
 800c314:	f107 0220 	add.w	r2, r7, #32
 800c318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c31c:	4611      	mov	r1, r2
 800c31e:	4618      	mov	r0, r3
 800c320:	f7f6 fbf8 	bl	8002b14 <HAL_FLASHEx_Erase>
 800c324:	2300      	movs	r3, #0
 800c326:	e025      	b.n	800c374 <_ZN12FlashManager9HardResetEb+0x90>
 800c328:	78fb      	ldrb	r3, [r7, #3]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d006      	beq.n	800c33c <_ZN12FlashManager9HardResetEb+0x58>
 800c32e:	f7f6 fa8f 	bl	8002850 <HAL_FLASH_Unlock>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d101      	bne.n	800c33c <_ZN12FlashManager9HardResetEb+0x58>
 800c338:	2301      	movs	r3, #1
 800c33a:	e000      	b.n	800c33e <_ZN12FlashManager9HardResetEb+0x5a>
 800c33c:	2300      	movs	r3, #0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d017      	beq.n	800c372 <_ZN12FlashManager9HardResetEb+0x8e>
 800c342:	2300      	movs	r3, #0
 800c344:	60bb      	str	r3, [r7, #8]
 800c346:	2305      	movs	r3, #5
 800c348:	617b      	str	r3, [r7, #20]
 800c34a:	2301      	movs	r3, #1
 800c34c:	613b      	str	r3, [r7, #16]
 800c34e:	2301      	movs	r3, #1
 800c350:	61bb      	str	r3, [r7, #24]
 800c352:	2300      	movs	r3, #0
 800c354:	60fb      	str	r3, [r7, #12]
 800c356:	2302      	movs	r3, #2
 800c358:	61fb      	str	r3, [r7, #28]
 800c35a:	f107 0208 	add.w	r2, r7, #8
 800c35e:	f107 030c 	add.w	r3, r7, #12
 800c362:	4611      	mov	r1, r2
 800c364:	4618      	mov	r0, r3
 800c366:	f7f6 fbd5 	bl	8002b14 <HAL_FLASHEx_Erase>
 800c36a:	f7f6 fa93 	bl	8002894 <HAL_FLASH_Lock>
 800c36e:	2300      	movs	r3, #0
 800c370:	e000      	b.n	800c374 <_ZN12FlashManager9HardResetEb+0x90>
 800c372:	2301      	movs	r3, #1
 800c374:	4618      	mov	r0, r3
 800c376:	3738      	adds	r7, #56	@ 0x38
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <_ZN12FlashManager6UpdateEv>:
 800c37c:	b5b0      	push	{r4, r5, r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	4b1f      	ldr	r3, [pc, #124]	@ (800c404 <_ZN12FlashManager6UpdateEv+0x88>)
 800c386:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800c38a:	f083 0301 	eor.w	r3, r3, #1
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b00      	cmp	r3, #0
 800c392:	d001      	beq.n	800c398 <_ZN12FlashManager6UpdateEv+0x1c>
 800c394:	2302      	movs	r3, #2
 800c396:	e031      	b.n	800c3fc <_ZN12FlashManager6UpdateEv+0x80>
 800c398:	f7f6 fa5a 	bl	8002850 <HAL_FLASH_Unlock>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	bf0c      	ite	eq
 800c3a2:	2301      	moveq	r3, #1
 800c3a4:	2300      	movne	r3, #0
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d026      	beq.n	800c3fa <_ZN12FlashManager6UpdateEv+0x7e>
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f7ff ff98 	bl	800c2e4 <_ZN12FlashManager9HardResetEb>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	60fb      	str	r3, [r7, #12]
 800c3b8:	e016      	b.n	800c3e8 <_ZN12FlashManager6UpdateEv+0x6c>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	689a      	ldr	r2, [r3, #8]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	60bb      	str	r3, [r7, #8]
 800c3c4:	4a0f      	ldr	r2, [pc, #60]	@ (800c404 <_ZN12FlashManager6UpdateEv+0x88>)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	3335      	adds	r3, #53	@ 0x35
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	461c      	mov	r4, r3
 800c3d4:	4615      	mov	r5, r2
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	462b      	mov	r3, r5
 800c3da:	68b9      	ldr	r1, [r7, #8]
 800c3dc:	2000      	movs	r0, #0
 800c3de:	f7f6 f9e3 	bl	80027a8 <HAL_FLASH_Program>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	60fb      	str	r3, [r7, #12]
 800c3e8:	4b06      	ldr	r3, [pc, #24]	@ (800c404 <_ZN12FlashManager6UpdateEv+0x88>)
 800c3ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	dbe3      	blt.n	800c3ba <_ZN12FlashManager6UpdateEv+0x3e>
 800c3f2:	f7f6 fa4f 	bl	8002894 <HAL_FLASH_Lock>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	e000      	b.n	800c3fc <_ZN12FlashManager6UpdateEv+0x80>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bdb0      	pop	{r4, r5, r7, pc}
 800c404:	200092ac 	.word	0x200092ac

0800c408 <_ZN12FlashManager9WriteDataEhiPh>:
 800c408:	b480      	push	{r7}
 800c40a:	b087      	sub	sp, #28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	607a      	str	r2, [r7, #4]
 800c412:	603b      	str	r3, [r7, #0]
 800c414:	460b      	mov	r3, r1
 800c416:	72fb      	strb	r3, [r7, #11]
 800c418:	4b14      	ldr	r3, [pc, #80]	@ (800c46c <_ZN12FlashManager9WriteDataEhiPh+0x64>)
 800c41a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800c41e:	f083 0301 	eor.w	r3, r3, #1
 800c422:	b2db      	uxtb	r3, r3
 800c424:	2b00      	cmp	r3, #0
 800c426:	d001      	beq.n	800c42c <_ZN12FlashManager9WriteDataEhiPh+0x24>
 800c428:	2302      	movs	r3, #2
 800c42a:	e018      	b.n	800c45e <_ZN12FlashManager9WriteDataEhiPh+0x56>
 800c42c:	2300      	movs	r3, #0
 800c42e:	617b      	str	r3, [r7, #20]
 800c430:	e010      	b.n	800c454 <_ZN12FlashManager9WriteDataEhiPh+0x4c>
 800c432:	7afa      	ldrb	r2, [r7, #11]
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	4413      	add	r3, r2
 800c438:	613b      	str	r3, [r7, #16]
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	683a      	ldr	r2, [r7, #0]
 800c43e:	4413      	add	r3, r2
 800c440:	7819      	ldrb	r1, [r3, #0]
 800c442:	4a0a      	ldr	r2, [pc, #40]	@ (800c46c <_ZN12FlashManager9WriteDataEhiPh+0x64>)
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	4413      	add	r3, r2
 800c448:	3335      	adds	r3, #53	@ 0x35
 800c44a:	460a      	mov	r2, r1
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	3301      	adds	r3, #1
 800c452:	617b      	str	r3, [r7, #20]
 800c454:	697a      	ldr	r2, [r7, #20]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	429a      	cmp	r2, r3
 800c45a:	dbea      	blt.n	800c432 <_ZN12FlashManager9WriteDataEhiPh+0x2a>
 800c45c:	2300      	movs	r3, #0
 800c45e:	4618      	mov	r0, r3
 800c460:	371c      	adds	r7, #28
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	200092ac 	.word	0x200092ac

0800c470 <_ZN12FlashManager5SetupEv>:
 800c470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c474:	b087      	sub	sp, #28
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
 800c47a:	466b      	mov	r3, sp
 800c47c:	461e      	mov	r6, r3
 800c47e:	2301      	movs	r3, #1
 800c480:	617b      	str	r3, [r7, #20]
 800c482:	6979      	ldr	r1, [r7, #20]
 800c484:	460b      	mov	r3, r1
 800c486:	3b01      	subs	r3, #1
 800c488:	613b      	str	r3, [r7, #16]
 800c48a:	2300      	movs	r3, #0
 800c48c:	4688      	mov	r8, r1
 800c48e:	4699      	mov	r9, r3
 800c490:	f04f 0200 	mov.w	r2, #0
 800c494:	f04f 0300 	mov.w	r3, #0
 800c498:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c49c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c4a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	461d      	mov	r5, r3
 800c4aa:	f04f 0200 	mov.w	r2, #0
 800c4ae:	f04f 0300 	mov.w	r3, #0
 800c4b2:	00eb      	lsls	r3, r5, #3
 800c4b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c4b8:	00e2      	lsls	r2, r4, #3
 800c4ba:	1dcb      	adds	r3, r1, #7
 800c4bc:	08db      	lsrs	r3, r3, #3
 800c4be:	00db      	lsls	r3, r3, #3
 800c4c0:	ebad 0d03 	sub.w	sp, sp, r3
 800c4c4:	466b      	mov	r3, sp
 800c4c6:	3300      	adds	r3, #0
 800c4c8:	60fb      	str	r3, [r7, #12]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	460a      	mov	r2, r1
 800c4ce:	1e51      	subs	r1, r2, #1
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	701a      	strb	r2, [r3, #0]
 800c4d4:	1c5a      	adds	r2, r3, #1
 800c4d6:	1e4b      	subs	r3, r1, #1
 800c4d8:	e003      	b.n	800c4e2 <_ZN12FlashManager5SetupEv+0x72>
 800c4da:	2100      	movs	r1, #0
 800c4dc:	7011      	strb	r1, [r2, #0]
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	3201      	adds	r2, #1
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	daf9      	bge.n	800c4da <_ZN12FlashManager5SetupEv+0x6a>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	7c99      	ldrb	r1, [r3, #18]
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7ff ff8a 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800c4f4:	46b5      	mov	sp, r6
 800c4f6:	bf00      	nop
 800c4f8:	371c      	adds	r7, #28
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c500 <_ZN12FlashManager7IsSetupEv>:
 800c500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c504:	b089      	sub	sp, #36	@ 0x24
 800c506:	af02      	add	r7, sp, #8
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	466b      	mov	r3, sp
 800c50c:	461e      	mov	r6, r3
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f7ff fecc 	bl	800c2ac <_ZN12FlashManager10BackupDataEv>
 800c514:	2301      	movs	r3, #1
 800c516:	617b      	str	r3, [r7, #20]
 800c518:	6979      	ldr	r1, [r7, #20]
 800c51a:	460b      	mov	r3, r1
 800c51c:	3b01      	subs	r3, #1
 800c51e:	613b      	str	r3, [r7, #16]
 800c520:	2300      	movs	r3, #0
 800c522:	4688      	mov	r8, r1
 800c524:	4699      	mov	r9, r3
 800c526:	f04f 0200 	mov.w	r2, #0
 800c52a:	f04f 0300 	mov.w	r3, #0
 800c52e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c53a:	2300      	movs	r3, #0
 800c53c:	460c      	mov	r4, r1
 800c53e:	461d      	mov	r5, r3
 800c540:	f04f 0200 	mov.w	r2, #0
 800c544:	f04f 0300 	mov.w	r3, #0
 800c548:	00eb      	lsls	r3, r5, #3
 800c54a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c54e:	00e2      	lsls	r2, r4, #3
 800c550:	1dcb      	adds	r3, r1, #7
 800c552:	08db      	lsrs	r3, r3, #3
 800c554:	00db      	lsls	r3, r3, #3
 800c556:	ebad 0d03 	sub.w	sp, sp, r3
 800c55a:	ab02      	add	r3, sp, #8
 800c55c:	3300      	adds	r3, #0
 800c55e:	60fb      	str	r3, [r7, #12]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	460a      	mov	r2, r1
 800c564:	1e51      	subs	r1, r2, #1
 800c566:	22ff      	movs	r2, #255	@ 0xff
 800c568:	701a      	strb	r2, [r3, #0]
 800c56a:	1c5a      	adds	r2, r3, #1
 800c56c:	1e4b      	subs	r3, r1, #1
 800c56e:	e003      	b.n	800c578 <_ZN12FlashManager7IsSetupEv+0x78>
 800c570:	2100      	movs	r1, #0
 800c572:	7011      	strb	r1, [r2, #0]
 800c574:	3b01      	subs	r3, #1
 800c576:	3201      	adds	r2, #1
 800c578:	2b00      	cmp	r3, #0
 800c57a:	daf9      	bge.n	800c570 <_ZN12FlashManager7IsSetupEv+0x70>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	7c9a      	ldrb	r2, [r3, #18]
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	2100      	movs	r1, #0
 800c584:	9100      	str	r1, [sp, #0]
 800c586:	68f9      	ldr	r1, [r7, #12]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f7ff fddf 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800c58e:	f107 030b 	add.w	r3, r7, #11
 800c592:	697a      	ldr	r2, [r7, #20]
 800c594:	68f9      	ldr	r1, [r7, #12]
 800c596:	4618      	mov	r0, r3
 800c598:	f004 fdc3 	bl	8011122 <memcpy>
 800c59c:	7afb      	ldrb	r3, [r7, #11]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	bf0c      	ite	eq
 800c5a2:	2301      	moveq	r3, #1
 800c5a4:	2300      	movne	r3, #0
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	46b5      	mov	sp, r6
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	371c      	adds	r7, #28
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c5b4 <_ZN12FlashManager18WriteSendPerSecondEh>:
 800c5b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5b8:	b087      	sub	sp, #28
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	460b      	mov	r3, r1
 800c5c0:	70fb      	strb	r3, [r7, #3]
 800c5c2:	466b      	mov	r3, sp
 800c5c4:	461e      	mov	r6, r3
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	617b      	str	r3, [r7, #20]
 800c5ca:	6979      	ldr	r1, [r7, #20]
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	613b      	str	r3, [r7, #16]
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	4688      	mov	r8, r1
 800c5d6:	4699      	mov	r9, r3
 800c5d8:	f04f 0200 	mov.w	r2, #0
 800c5dc:	f04f 0300 	mov.w	r3, #0
 800c5e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c5e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c5e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	461d      	mov	r5, r3
 800c5f2:	f04f 0200 	mov.w	r2, #0
 800c5f6:	f04f 0300 	mov.w	r3, #0
 800c5fa:	00eb      	lsls	r3, r5, #3
 800c5fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c600:	00e2      	lsls	r2, r4, #3
 800c602:	1dcb      	adds	r3, r1, #7
 800c604:	08db      	lsrs	r3, r3, #3
 800c606:	00db      	lsls	r3, r3, #3
 800c608:	ebad 0d03 	sub.w	sp, sp, r3
 800c60c:	466b      	mov	r3, sp
 800c60e:	3300      	adds	r3, #0
 800c610:	60fb      	str	r3, [r7, #12]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	460a      	mov	r2, r1
 800c616:	1e51      	subs	r1, r2, #1
 800c618:	78fa      	ldrb	r2, [r7, #3]
 800c61a:	701a      	strb	r2, [r3, #0]
 800c61c:	1c5a      	adds	r2, r3, #1
 800c61e:	1e4b      	subs	r3, r1, #1
 800c620:	e003      	b.n	800c62a <_ZN12FlashManager18WriteSendPerSecondEh+0x76>
 800c622:	2100      	movs	r1, #0
 800c624:	7011      	strb	r1, [r2, #0]
 800c626:	3b01      	subs	r3, #1
 800c628:	3201      	adds	r2, #1
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	daf9      	bge.n	800c622 <_ZN12FlashManager18WriteSendPerSecondEh+0x6e>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	7cd9      	ldrb	r1, [r3, #19]
 800c632:	697a      	ldr	r2, [r7, #20]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7ff fee6 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800c63c:	46b5      	mov	sp, r6
 800c63e:	bf00      	nop
 800c640:	371c      	adds	r7, #28
 800c642:	46bd      	mov	sp, r7
 800c644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c648 <_ZN12FlashManager17ReadSendPerSecondEv>:
 800c648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c64c:	b089      	sub	sp, #36	@ 0x24
 800c64e:	af02      	add	r7, sp, #8
 800c650:	6078      	str	r0, [r7, #4]
 800c652:	466b      	mov	r3, sp
 800c654:	461e      	mov	r6, r3
 800c656:	2301      	movs	r3, #1
 800c658:	617b      	str	r3, [r7, #20]
 800c65a:	6979      	ldr	r1, [r7, #20]
 800c65c:	460b      	mov	r3, r1
 800c65e:	3b01      	subs	r3, #1
 800c660:	613b      	str	r3, [r7, #16]
 800c662:	2300      	movs	r3, #0
 800c664:	4688      	mov	r8, r1
 800c666:	4699      	mov	r9, r3
 800c668:	f04f 0200 	mov.w	r2, #0
 800c66c:	f04f 0300 	mov.w	r3, #0
 800c670:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c674:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c678:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c67c:	2300      	movs	r3, #0
 800c67e:	460c      	mov	r4, r1
 800c680:	461d      	mov	r5, r3
 800c682:	f04f 0200 	mov.w	r2, #0
 800c686:	f04f 0300 	mov.w	r3, #0
 800c68a:	00eb      	lsls	r3, r5, #3
 800c68c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c690:	00e2      	lsls	r2, r4, #3
 800c692:	1dcb      	adds	r3, r1, #7
 800c694:	08db      	lsrs	r3, r3, #3
 800c696:	00db      	lsls	r3, r3, #3
 800c698:	ebad 0d03 	sub.w	sp, sp, r3
 800c69c:	ab02      	add	r3, sp, #8
 800c69e:	3300      	adds	r3, #0
 800c6a0:	60fb      	str	r3, [r7, #12]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	460a      	mov	r2, r1
 800c6a6:	1e51      	subs	r1, r2, #1
 800c6a8:	22ff      	movs	r2, #255	@ 0xff
 800c6aa:	701a      	strb	r2, [r3, #0]
 800c6ac:	1c5a      	adds	r2, r3, #1
 800c6ae:	1e4b      	subs	r3, r1, #1
 800c6b0:	e003      	b.n	800c6ba <_ZN12FlashManager17ReadSendPerSecondEv+0x72>
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	7011      	strb	r1, [r2, #0]
 800c6b6:	3b01      	subs	r3, #1
 800c6b8:	3201      	adds	r2, #1
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	daf9      	bge.n	800c6b2 <_ZN12FlashManager17ReadSendPerSecondEv+0x6a>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	7cda      	ldrb	r2, [r3, #19]
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	9100      	str	r1, [sp, #0]
 800c6c8:	68f9      	ldr	r1, [r7, #12]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff fd3e 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800c6d0:	f107 030b 	add.w	r3, r7, #11
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	68f9      	ldr	r1, [r7, #12]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f004 fd22 	bl	8011122 <memcpy>
 800c6de:	7afb      	ldrb	r3, [r7, #11]
 800c6e0:	46b5      	mov	sp, r6
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	371c      	adds	r7, #28
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c6ec <_ZN12FlashManager22WriteFirstEmgPerSecondEh>:
 800c6ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6f0:	b087      	sub	sp, #28
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	70fb      	strb	r3, [r7, #3]
 800c6fa:	466b      	mov	r3, sp
 800c6fc:	461e      	mov	r6, r3
 800c6fe:	2301      	movs	r3, #1
 800c700:	617b      	str	r3, [r7, #20]
 800c702:	6979      	ldr	r1, [r7, #20]
 800c704:	460b      	mov	r3, r1
 800c706:	3b01      	subs	r3, #1
 800c708:	613b      	str	r3, [r7, #16]
 800c70a:	2300      	movs	r3, #0
 800c70c:	4688      	mov	r8, r1
 800c70e:	4699      	mov	r9, r3
 800c710:	f04f 0200 	mov.w	r2, #0
 800c714:	f04f 0300 	mov.w	r3, #0
 800c718:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c71c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c720:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c724:	2300      	movs	r3, #0
 800c726:	460c      	mov	r4, r1
 800c728:	461d      	mov	r5, r3
 800c72a:	f04f 0200 	mov.w	r2, #0
 800c72e:	f04f 0300 	mov.w	r3, #0
 800c732:	00eb      	lsls	r3, r5, #3
 800c734:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c738:	00e2      	lsls	r2, r4, #3
 800c73a:	1dcb      	adds	r3, r1, #7
 800c73c:	08db      	lsrs	r3, r3, #3
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	ebad 0d03 	sub.w	sp, sp, r3
 800c744:	466b      	mov	r3, sp
 800c746:	3300      	adds	r3, #0
 800c748:	60fb      	str	r3, [r7, #12]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	460a      	mov	r2, r1
 800c74e:	1e51      	subs	r1, r2, #1
 800c750:	78fa      	ldrb	r2, [r7, #3]
 800c752:	701a      	strb	r2, [r3, #0]
 800c754:	1c5a      	adds	r2, r3, #1
 800c756:	1e4b      	subs	r3, r1, #1
 800c758:	e003      	b.n	800c762 <_ZN12FlashManager22WriteFirstEmgPerSecondEh+0x76>
 800c75a:	2100      	movs	r1, #0
 800c75c:	7011      	strb	r1, [r2, #0]
 800c75e:	3b01      	subs	r3, #1
 800c760:	3201      	adds	r2, #1
 800c762:	2b00      	cmp	r3, #0
 800c764:	daf9      	bge.n	800c75a <_ZN12FlashManager22WriteFirstEmgPerSecondEh+0x6e>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	7d19      	ldrb	r1, [r3, #20]
 800c76a:	697a      	ldr	r2, [r7, #20]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7ff fe4a 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800c774:	46b5      	mov	sp, r6
 800c776:	bf00      	nop
 800c778:	371c      	adds	r7, #28
 800c77a:	46bd      	mov	sp, r7
 800c77c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c780 <_ZN12FlashManager21ReadFirstEmgPerSecondEv>:
 800c780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c784:	b089      	sub	sp, #36	@ 0x24
 800c786:	af02      	add	r7, sp, #8
 800c788:	6078      	str	r0, [r7, #4]
 800c78a:	466b      	mov	r3, sp
 800c78c:	461e      	mov	r6, r3
 800c78e:	2301      	movs	r3, #1
 800c790:	617b      	str	r3, [r7, #20]
 800c792:	6979      	ldr	r1, [r7, #20]
 800c794:	460b      	mov	r3, r1
 800c796:	3b01      	subs	r3, #1
 800c798:	613b      	str	r3, [r7, #16]
 800c79a:	2300      	movs	r3, #0
 800c79c:	4688      	mov	r8, r1
 800c79e:	4699      	mov	r9, r3
 800c7a0:	f04f 0200 	mov.w	r2, #0
 800c7a4:	f04f 0300 	mov.w	r3, #0
 800c7a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c7ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c7b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	461d      	mov	r5, r3
 800c7ba:	f04f 0200 	mov.w	r2, #0
 800c7be:	f04f 0300 	mov.w	r3, #0
 800c7c2:	00eb      	lsls	r3, r5, #3
 800c7c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c7c8:	00e2      	lsls	r2, r4, #3
 800c7ca:	1dcb      	adds	r3, r1, #7
 800c7cc:	08db      	lsrs	r3, r3, #3
 800c7ce:	00db      	lsls	r3, r3, #3
 800c7d0:	ebad 0d03 	sub.w	sp, sp, r3
 800c7d4:	ab02      	add	r3, sp, #8
 800c7d6:	3300      	adds	r3, #0
 800c7d8:	60fb      	str	r3, [r7, #12]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	460a      	mov	r2, r1
 800c7de:	1e51      	subs	r1, r2, #1
 800c7e0:	22ff      	movs	r2, #255	@ 0xff
 800c7e2:	701a      	strb	r2, [r3, #0]
 800c7e4:	1c5a      	adds	r2, r3, #1
 800c7e6:	1e4b      	subs	r3, r1, #1
 800c7e8:	e003      	b.n	800c7f2 <_ZN12FlashManager21ReadFirstEmgPerSecondEv+0x72>
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	7011      	strb	r1, [r2, #0]
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	3201      	adds	r2, #1
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	daf9      	bge.n	800c7ea <_ZN12FlashManager21ReadFirstEmgPerSecondEv+0x6a>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	7d1a      	ldrb	r2, [r3, #20]
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	9100      	str	r1, [sp, #0]
 800c800:	68f9      	ldr	r1, [r7, #12]
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7ff fca2 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800c808:	f107 030b 	add.w	r3, r7, #11
 800c80c:	697a      	ldr	r2, [r7, #20]
 800c80e:	68f9      	ldr	r1, [r7, #12]
 800c810:	4618      	mov	r0, r3
 800c812:	f004 fc86 	bl	8011122 <memcpy>
 800c816:	7afb      	ldrb	r3, [r7, #11]
 800c818:	46b5      	mov	sp, r6
 800c81a:	4618      	mov	r0, r3
 800c81c:	371c      	adds	r7, #28
 800c81e:	46bd      	mov	sp, r7
 800c820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c824 <_ZN12FlashManager23WriteSecondEmgPerSecondEh>:
 800c824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c828:	b087      	sub	sp, #28
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	460b      	mov	r3, r1
 800c830:	70fb      	strb	r3, [r7, #3]
 800c832:	466b      	mov	r3, sp
 800c834:	461e      	mov	r6, r3
 800c836:	2301      	movs	r3, #1
 800c838:	617b      	str	r3, [r7, #20]
 800c83a:	6979      	ldr	r1, [r7, #20]
 800c83c:	460b      	mov	r3, r1
 800c83e:	3b01      	subs	r3, #1
 800c840:	613b      	str	r3, [r7, #16]
 800c842:	2300      	movs	r3, #0
 800c844:	4688      	mov	r8, r1
 800c846:	4699      	mov	r9, r3
 800c848:	f04f 0200 	mov.w	r2, #0
 800c84c:	f04f 0300 	mov.w	r3, #0
 800c850:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c854:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c858:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c85c:	2300      	movs	r3, #0
 800c85e:	460c      	mov	r4, r1
 800c860:	461d      	mov	r5, r3
 800c862:	f04f 0200 	mov.w	r2, #0
 800c866:	f04f 0300 	mov.w	r3, #0
 800c86a:	00eb      	lsls	r3, r5, #3
 800c86c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c870:	00e2      	lsls	r2, r4, #3
 800c872:	1dcb      	adds	r3, r1, #7
 800c874:	08db      	lsrs	r3, r3, #3
 800c876:	00db      	lsls	r3, r3, #3
 800c878:	ebad 0d03 	sub.w	sp, sp, r3
 800c87c:	466b      	mov	r3, sp
 800c87e:	3300      	adds	r3, #0
 800c880:	60fb      	str	r3, [r7, #12]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	460a      	mov	r2, r1
 800c886:	1e51      	subs	r1, r2, #1
 800c888:	78fa      	ldrb	r2, [r7, #3]
 800c88a:	701a      	strb	r2, [r3, #0]
 800c88c:	1c5a      	adds	r2, r3, #1
 800c88e:	1e4b      	subs	r3, r1, #1
 800c890:	e003      	b.n	800c89a <_ZN12FlashManager23WriteSecondEmgPerSecondEh+0x76>
 800c892:	2100      	movs	r1, #0
 800c894:	7011      	strb	r1, [r2, #0]
 800c896:	3b01      	subs	r3, #1
 800c898:	3201      	adds	r2, #1
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	daf9      	bge.n	800c892 <_ZN12FlashManager23WriteSecondEmgPerSecondEh+0x6e>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	7d59      	ldrb	r1, [r3, #21]
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff fdae 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800c8ac:	46b5      	mov	sp, r6
 800c8ae:	bf00      	nop
 800c8b0:	371c      	adds	r7, #28
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c8b8 <_ZN12FlashManager22ReadSecondEmgPerSecondEv>:
 800c8b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8bc:	b089      	sub	sp, #36	@ 0x24
 800c8be:	af02      	add	r7, sp, #8
 800c8c0:	6078      	str	r0, [r7, #4]
 800c8c2:	466b      	mov	r3, sp
 800c8c4:	461e      	mov	r6, r3
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	617b      	str	r3, [r7, #20]
 800c8ca:	6979      	ldr	r1, [r7, #20]
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	613b      	str	r3, [r7, #16]
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	4688      	mov	r8, r1
 800c8d6:	4699      	mov	r9, r3
 800c8d8:	f04f 0200 	mov.w	r2, #0
 800c8dc:	f04f 0300 	mov.w	r3, #0
 800c8e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c8e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c8e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	461d      	mov	r5, r3
 800c8f2:	f04f 0200 	mov.w	r2, #0
 800c8f6:	f04f 0300 	mov.w	r3, #0
 800c8fa:	00eb      	lsls	r3, r5, #3
 800c8fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c900:	00e2      	lsls	r2, r4, #3
 800c902:	1dcb      	adds	r3, r1, #7
 800c904:	08db      	lsrs	r3, r3, #3
 800c906:	00db      	lsls	r3, r3, #3
 800c908:	ebad 0d03 	sub.w	sp, sp, r3
 800c90c:	ab02      	add	r3, sp, #8
 800c90e:	3300      	adds	r3, #0
 800c910:	60fb      	str	r3, [r7, #12]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	460a      	mov	r2, r1
 800c916:	1e51      	subs	r1, r2, #1
 800c918:	22ff      	movs	r2, #255	@ 0xff
 800c91a:	701a      	strb	r2, [r3, #0]
 800c91c:	1c5a      	adds	r2, r3, #1
 800c91e:	1e4b      	subs	r3, r1, #1
 800c920:	e003      	b.n	800c92a <_ZN12FlashManager22ReadSecondEmgPerSecondEv+0x72>
 800c922:	2100      	movs	r1, #0
 800c924:	7011      	strb	r1, [r2, #0]
 800c926:	3b01      	subs	r3, #1
 800c928:	3201      	adds	r2, #1
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	daf9      	bge.n	800c922 <_ZN12FlashManager22ReadSecondEmgPerSecondEv+0x6a>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	7d5a      	ldrb	r2, [r3, #21]
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	2100      	movs	r1, #0
 800c936:	9100      	str	r1, [sp, #0]
 800c938:	68f9      	ldr	r1, [r7, #12]
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7ff fc06 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800c940:	f107 030b 	add.w	r3, r7, #11
 800c944:	697a      	ldr	r2, [r7, #20]
 800c946:	68f9      	ldr	r1, [r7, #12]
 800c948:	4618      	mov	r0, r3
 800c94a:	f004 fbea 	bl	8011122 <memcpy>
 800c94e:	7afb      	ldrb	r3, [r7, #11]
 800c950:	46b5      	mov	sp, r6
 800c952:	4618      	mov	r0, r3
 800c954:	371c      	adds	r7, #28
 800c956:	46bd      	mov	sp, r7
 800c958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c95c <_ZN12FlashManager20WriteVolumePerSecondEh>:
 800c95c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c960:	b087      	sub	sp, #28
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	460b      	mov	r3, r1
 800c968:	70fb      	strb	r3, [r7, #3]
 800c96a:	466b      	mov	r3, sp
 800c96c:	461e      	mov	r6, r3
 800c96e:	2301      	movs	r3, #1
 800c970:	617b      	str	r3, [r7, #20]
 800c972:	6979      	ldr	r1, [r7, #20]
 800c974:	460b      	mov	r3, r1
 800c976:	3b01      	subs	r3, #1
 800c978:	613b      	str	r3, [r7, #16]
 800c97a:	2300      	movs	r3, #0
 800c97c:	4688      	mov	r8, r1
 800c97e:	4699      	mov	r9, r3
 800c980:	f04f 0200 	mov.w	r2, #0
 800c984:	f04f 0300 	mov.w	r3, #0
 800c988:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c98c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c990:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c994:	2300      	movs	r3, #0
 800c996:	460c      	mov	r4, r1
 800c998:	461d      	mov	r5, r3
 800c99a:	f04f 0200 	mov.w	r2, #0
 800c99e:	f04f 0300 	mov.w	r3, #0
 800c9a2:	00eb      	lsls	r3, r5, #3
 800c9a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c9a8:	00e2      	lsls	r2, r4, #3
 800c9aa:	1dcb      	adds	r3, r1, #7
 800c9ac:	08db      	lsrs	r3, r3, #3
 800c9ae:	00db      	lsls	r3, r3, #3
 800c9b0:	ebad 0d03 	sub.w	sp, sp, r3
 800c9b4:	466b      	mov	r3, sp
 800c9b6:	3300      	adds	r3, #0
 800c9b8:	60fb      	str	r3, [r7, #12]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	460a      	mov	r2, r1
 800c9be:	1e51      	subs	r1, r2, #1
 800c9c0:	78fa      	ldrb	r2, [r7, #3]
 800c9c2:	701a      	strb	r2, [r3, #0]
 800c9c4:	1c5a      	adds	r2, r3, #1
 800c9c6:	1e4b      	subs	r3, r1, #1
 800c9c8:	e003      	b.n	800c9d2 <_ZN12FlashManager20WriteVolumePerSecondEh+0x76>
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	7011      	strb	r1, [r2, #0]
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	3201      	adds	r2, #1
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	daf9      	bge.n	800c9ca <_ZN12FlashManager20WriteVolumePerSecondEh+0x6e>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	7d99      	ldrb	r1, [r3, #22]
 800c9da:	697a      	ldr	r2, [r7, #20]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f7ff fd12 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800c9e4:	46b5      	mov	sp, r6
 800c9e6:	bf00      	nop
 800c9e8:	371c      	adds	r7, #28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c9f0 <_ZN12FlashManager19ReadVolumePerSecondEv>:
 800c9f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9f4:	b089      	sub	sp, #36	@ 0x24
 800c9f6:	af02      	add	r7, sp, #8
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	466b      	mov	r3, sp
 800c9fc:	461e      	mov	r6, r3
 800c9fe:	2301      	movs	r3, #1
 800ca00:	617b      	str	r3, [r7, #20]
 800ca02:	6979      	ldr	r1, [r7, #20]
 800ca04:	460b      	mov	r3, r1
 800ca06:	3b01      	subs	r3, #1
 800ca08:	613b      	str	r3, [r7, #16]
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	4688      	mov	r8, r1
 800ca0e:	4699      	mov	r9, r3
 800ca10:	f04f 0200 	mov.w	r2, #0
 800ca14:	f04f 0300 	mov.w	r3, #0
 800ca18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ca1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ca20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ca24:	2300      	movs	r3, #0
 800ca26:	460c      	mov	r4, r1
 800ca28:	461d      	mov	r5, r3
 800ca2a:	f04f 0200 	mov.w	r2, #0
 800ca2e:	f04f 0300 	mov.w	r3, #0
 800ca32:	00eb      	lsls	r3, r5, #3
 800ca34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca38:	00e2      	lsls	r2, r4, #3
 800ca3a:	1dcb      	adds	r3, r1, #7
 800ca3c:	08db      	lsrs	r3, r3, #3
 800ca3e:	00db      	lsls	r3, r3, #3
 800ca40:	ebad 0d03 	sub.w	sp, sp, r3
 800ca44:	ab02      	add	r3, sp, #8
 800ca46:	3300      	adds	r3, #0
 800ca48:	60fb      	str	r3, [r7, #12]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	460a      	mov	r2, r1
 800ca4e:	1e51      	subs	r1, r2, #1
 800ca50:	22ff      	movs	r2, #255	@ 0xff
 800ca52:	701a      	strb	r2, [r3, #0]
 800ca54:	1c5a      	adds	r2, r3, #1
 800ca56:	1e4b      	subs	r3, r1, #1
 800ca58:	e003      	b.n	800ca62 <_ZN12FlashManager19ReadVolumePerSecondEv+0x72>
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	7011      	strb	r1, [r2, #0]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	3201      	adds	r2, #1
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	daf9      	bge.n	800ca5a <_ZN12FlashManager19ReadVolumePerSecondEv+0x6a>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	7d9a      	ldrb	r2, [r3, #22]
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	9100      	str	r1, [sp, #0]
 800ca70:	68f9      	ldr	r1, [r7, #12]
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7ff fb6a 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800ca78:	f107 030b 	add.w	r3, r7, #11
 800ca7c:	697a      	ldr	r2, [r7, #20]
 800ca7e:	68f9      	ldr	r1, [r7, #12]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f004 fb4e 	bl	8011122 <memcpy>
 800ca86:	7afb      	ldrb	r3, [r7, #11]
 800ca88:	46b5      	mov	sp, r6
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	371c      	adds	r7, #28
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ca94 <_ZN12FlashManager18WriteFlowPerSecondEh>:
 800ca94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca98:	b087      	sub	sp, #28
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
 800ca9e:	460b      	mov	r3, r1
 800caa0:	70fb      	strb	r3, [r7, #3]
 800caa2:	466b      	mov	r3, sp
 800caa4:	461e      	mov	r6, r3
 800caa6:	2301      	movs	r3, #1
 800caa8:	617b      	str	r3, [r7, #20]
 800caaa:	6979      	ldr	r1, [r7, #20]
 800caac:	460b      	mov	r3, r1
 800caae:	3b01      	subs	r3, #1
 800cab0:	613b      	str	r3, [r7, #16]
 800cab2:	2300      	movs	r3, #0
 800cab4:	4688      	mov	r8, r1
 800cab6:	4699      	mov	r9, r3
 800cab8:	f04f 0200 	mov.w	r2, #0
 800cabc:	f04f 0300 	mov.w	r3, #0
 800cac0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cac4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cac8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cacc:	2300      	movs	r3, #0
 800cace:	460c      	mov	r4, r1
 800cad0:	461d      	mov	r5, r3
 800cad2:	f04f 0200 	mov.w	r2, #0
 800cad6:	f04f 0300 	mov.w	r3, #0
 800cada:	00eb      	lsls	r3, r5, #3
 800cadc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cae0:	00e2      	lsls	r2, r4, #3
 800cae2:	1dcb      	adds	r3, r1, #7
 800cae4:	08db      	lsrs	r3, r3, #3
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	ebad 0d03 	sub.w	sp, sp, r3
 800caec:	466b      	mov	r3, sp
 800caee:	3300      	adds	r3, #0
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	460a      	mov	r2, r1
 800caf6:	1e51      	subs	r1, r2, #1
 800caf8:	78fa      	ldrb	r2, [r7, #3]
 800cafa:	701a      	strb	r2, [r3, #0]
 800cafc:	1c5a      	adds	r2, r3, #1
 800cafe:	1e4b      	subs	r3, r1, #1
 800cb00:	e003      	b.n	800cb0a <_ZN12FlashManager18WriteFlowPerSecondEh+0x76>
 800cb02:	2100      	movs	r1, #0
 800cb04:	7011      	strb	r1, [r2, #0]
 800cb06:	3b01      	subs	r3, #1
 800cb08:	3201      	adds	r2, #1
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	daf9      	bge.n	800cb02 <_ZN12FlashManager18WriteFlowPerSecondEh+0x6e>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	7dd9      	ldrb	r1, [r3, #23]
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f7ff fc76 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800cb1c:	46b5      	mov	sp, r6
 800cb1e:	bf00      	nop
 800cb20:	371c      	adds	r7, #28
 800cb22:	46bd      	mov	sp, r7
 800cb24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cb28 <_ZN12FlashManager17ReadFlowPerSecondEv>:
 800cb28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb2c:	b089      	sub	sp, #36	@ 0x24
 800cb2e:	af02      	add	r7, sp, #8
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	466b      	mov	r3, sp
 800cb34:	461e      	mov	r6, r3
 800cb36:	2301      	movs	r3, #1
 800cb38:	617b      	str	r3, [r7, #20]
 800cb3a:	6979      	ldr	r1, [r7, #20]
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	3b01      	subs	r3, #1
 800cb40:	613b      	str	r3, [r7, #16]
 800cb42:	2300      	movs	r3, #0
 800cb44:	4688      	mov	r8, r1
 800cb46:	4699      	mov	r9, r3
 800cb48:	f04f 0200 	mov.w	r2, #0
 800cb4c:	f04f 0300 	mov.w	r3, #0
 800cb50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	460c      	mov	r4, r1
 800cb60:	461d      	mov	r5, r3
 800cb62:	f04f 0200 	mov.w	r2, #0
 800cb66:	f04f 0300 	mov.w	r3, #0
 800cb6a:	00eb      	lsls	r3, r5, #3
 800cb6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cb70:	00e2      	lsls	r2, r4, #3
 800cb72:	1dcb      	adds	r3, r1, #7
 800cb74:	08db      	lsrs	r3, r3, #3
 800cb76:	00db      	lsls	r3, r3, #3
 800cb78:	ebad 0d03 	sub.w	sp, sp, r3
 800cb7c:	ab02      	add	r3, sp, #8
 800cb7e:	3300      	adds	r3, #0
 800cb80:	60fb      	str	r3, [r7, #12]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	460a      	mov	r2, r1
 800cb86:	1e51      	subs	r1, r2, #1
 800cb88:	22ff      	movs	r2, #255	@ 0xff
 800cb8a:	701a      	strb	r2, [r3, #0]
 800cb8c:	1c5a      	adds	r2, r3, #1
 800cb8e:	1e4b      	subs	r3, r1, #1
 800cb90:	e003      	b.n	800cb9a <_ZN12FlashManager17ReadFlowPerSecondEv+0x72>
 800cb92:	2100      	movs	r1, #0
 800cb94:	7011      	strb	r1, [r2, #0]
 800cb96:	3b01      	subs	r3, #1
 800cb98:	3201      	adds	r2, #1
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	daf9      	bge.n	800cb92 <_ZN12FlashManager17ReadFlowPerSecondEv+0x6a>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	7dda      	ldrb	r2, [r3, #23]
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	2100      	movs	r1, #0
 800cba6:	9100      	str	r1, [sp, #0]
 800cba8:	68f9      	ldr	r1, [r7, #12]
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7ff face 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800cbb0:	f107 030b 	add.w	r3, r7, #11
 800cbb4:	697a      	ldr	r2, [r7, #20]
 800cbb6:	68f9      	ldr	r1, [r7, #12]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f004 fab2 	bl	8011122 <memcpy>
 800cbbe:	7afb      	ldrb	r3, [r7, #11]
 800cbc0:	46b5      	mov	sp, r6
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	371c      	adds	r7, #28
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cbcc <_ZN12FlashManager19WritePumpMaxRunTimeEh>:
 800cbcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbd0:	b087      	sub	sp, #28
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	70fb      	strb	r3, [r7, #3]
 800cbda:	466b      	mov	r3, sp
 800cbdc:	461e      	mov	r6, r3
 800cbde:	2301      	movs	r3, #1
 800cbe0:	617b      	str	r3, [r7, #20]
 800cbe2:	6979      	ldr	r1, [r7, #20]
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	613b      	str	r3, [r7, #16]
 800cbea:	2300      	movs	r3, #0
 800cbec:	4688      	mov	r8, r1
 800cbee:	4699      	mov	r9, r3
 800cbf0:	f04f 0200 	mov.w	r2, #0
 800cbf4:	f04f 0300 	mov.w	r3, #0
 800cbf8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cbfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cc00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cc04:	2300      	movs	r3, #0
 800cc06:	460c      	mov	r4, r1
 800cc08:	461d      	mov	r5, r3
 800cc0a:	f04f 0200 	mov.w	r2, #0
 800cc0e:	f04f 0300 	mov.w	r3, #0
 800cc12:	00eb      	lsls	r3, r5, #3
 800cc14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc18:	00e2      	lsls	r2, r4, #3
 800cc1a:	1dcb      	adds	r3, r1, #7
 800cc1c:	08db      	lsrs	r3, r3, #3
 800cc1e:	00db      	lsls	r3, r3, #3
 800cc20:	ebad 0d03 	sub.w	sp, sp, r3
 800cc24:	466b      	mov	r3, sp
 800cc26:	3300      	adds	r3, #0
 800cc28:	60fb      	str	r3, [r7, #12]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	460a      	mov	r2, r1
 800cc2e:	1e51      	subs	r1, r2, #1
 800cc30:	78fa      	ldrb	r2, [r7, #3]
 800cc32:	701a      	strb	r2, [r3, #0]
 800cc34:	1c5a      	adds	r2, r3, #1
 800cc36:	1e4b      	subs	r3, r1, #1
 800cc38:	e003      	b.n	800cc42 <_ZN12FlashManager19WritePumpMaxRunTimeEh+0x76>
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	7011      	strb	r1, [r2, #0]
 800cc3e:	3b01      	subs	r3, #1
 800cc40:	3201      	adds	r2, #1
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	daf9      	bge.n	800cc3a <_ZN12FlashManager19WritePumpMaxRunTimeEh+0x6e>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	7e19      	ldrb	r1, [r3, #24]
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f7ff fbda 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800cc54:	46b5      	mov	sp, r6
 800cc56:	bf00      	nop
 800cc58:	371c      	adds	r7, #28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cc60 <_ZN12FlashManager18ReadPumpMaxRunTimeEv>:
 800cc60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc64:	b089      	sub	sp, #36	@ 0x24
 800cc66:	af02      	add	r7, sp, #8
 800cc68:	6078      	str	r0, [r7, #4]
 800cc6a:	466b      	mov	r3, sp
 800cc6c:	461e      	mov	r6, r3
 800cc6e:	2301      	movs	r3, #1
 800cc70:	617b      	str	r3, [r7, #20]
 800cc72:	6979      	ldr	r1, [r7, #20]
 800cc74:	460b      	mov	r3, r1
 800cc76:	3b01      	subs	r3, #1
 800cc78:	613b      	str	r3, [r7, #16]
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	4688      	mov	r8, r1
 800cc7e:	4699      	mov	r9, r3
 800cc80:	f04f 0200 	mov.w	r2, #0
 800cc84:	f04f 0300 	mov.w	r3, #0
 800cc88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cc8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cc90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cc94:	2300      	movs	r3, #0
 800cc96:	460c      	mov	r4, r1
 800cc98:	461d      	mov	r5, r3
 800cc9a:	f04f 0200 	mov.w	r2, #0
 800cc9e:	f04f 0300 	mov.w	r3, #0
 800cca2:	00eb      	lsls	r3, r5, #3
 800cca4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cca8:	00e2      	lsls	r2, r4, #3
 800ccaa:	1dcb      	adds	r3, r1, #7
 800ccac:	08db      	lsrs	r3, r3, #3
 800ccae:	00db      	lsls	r3, r3, #3
 800ccb0:	ebad 0d03 	sub.w	sp, sp, r3
 800ccb4:	ab02      	add	r3, sp, #8
 800ccb6:	3300      	adds	r3, #0
 800ccb8:	60fb      	str	r3, [r7, #12]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	460a      	mov	r2, r1
 800ccbe:	1e51      	subs	r1, r2, #1
 800ccc0:	22ff      	movs	r2, #255	@ 0xff
 800ccc2:	701a      	strb	r2, [r3, #0]
 800ccc4:	1c5a      	adds	r2, r3, #1
 800ccc6:	1e4b      	subs	r3, r1, #1
 800ccc8:	e003      	b.n	800ccd2 <_ZN12FlashManager18ReadPumpMaxRunTimeEv+0x72>
 800ccca:	2100      	movs	r1, #0
 800cccc:	7011      	strb	r1, [r2, #0]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	3201      	adds	r2, #1
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	daf9      	bge.n	800ccca <_ZN12FlashManager18ReadPumpMaxRunTimeEv+0x6a>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	7e1a      	ldrb	r2, [r3, #24]
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2100      	movs	r1, #0
 800ccde:	9100      	str	r1, [sp, #0]
 800cce0:	68f9      	ldr	r1, [r7, #12]
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f7ff fa32 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800cce8:	f107 030b 	add.w	r3, r7, #11
 800ccec:	697a      	ldr	r2, [r7, #20]
 800ccee:	68f9      	ldr	r1, [r7, #12]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f004 fa16 	bl	8011122 <memcpy>
 800ccf6:	7afb      	ldrb	r3, [r7, #11]
 800ccf8:	46b5      	mov	sp, r6
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	371c      	adds	r7, #28
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cd04 <_ZN12FlashManager20WriteValveMaxRunTimeEh>:
 800cd04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd08:	b087      	sub	sp, #28
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	70fb      	strb	r3, [r7, #3]
 800cd12:	466b      	mov	r3, sp
 800cd14:	461e      	mov	r6, r3
 800cd16:	2301      	movs	r3, #1
 800cd18:	617b      	str	r3, [r7, #20]
 800cd1a:	6979      	ldr	r1, [r7, #20]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	613b      	str	r3, [r7, #16]
 800cd22:	2300      	movs	r3, #0
 800cd24:	4688      	mov	r8, r1
 800cd26:	4699      	mov	r9, r3
 800cd28:	f04f 0200 	mov.w	r2, #0
 800cd2c:	f04f 0300 	mov.w	r3, #0
 800cd30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cd34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cd38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	460c      	mov	r4, r1
 800cd40:	461d      	mov	r5, r3
 800cd42:	f04f 0200 	mov.w	r2, #0
 800cd46:	f04f 0300 	mov.w	r3, #0
 800cd4a:	00eb      	lsls	r3, r5, #3
 800cd4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd50:	00e2      	lsls	r2, r4, #3
 800cd52:	1dcb      	adds	r3, r1, #7
 800cd54:	08db      	lsrs	r3, r3, #3
 800cd56:	00db      	lsls	r3, r3, #3
 800cd58:	ebad 0d03 	sub.w	sp, sp, r3
 800cd5c:	466b      	mov	r3, sp
 800cd5e:	3300      	adds	r3, #0
 800cd60:	60fb      	str	r3, [r7, #12]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	460a      	mov	r2, r1
 800cd66:	1e51      	subs	r1, r2, #1
 800cd68:	78fa      	ldrb	r2, [r7, #3]
 800cd6a:	701a      	strb	r2, [r3, #0]
 800cd6c:	1c5a      	adds	r2, r3, #1
 800cd6e:	1e4b      	subs	r3, r1, #1
 800cd70:	e003      	b.n	800cd7a <_ZN12FlashManager20WriteValveMaxRunTimeEh+0x76>
 800cd72:	2100      	movs	r1, #0
 800cd74:	7011      	strb	r1, [r2, #0]
 800cd76:	3b01      	subs	r3, #1
 800cd78:	3201      	adds	r2, #1
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	daf9      	bge.n	800cd72 <_ZN12FlashManager20WriteValveMaxRunTimeEh+0x6e>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	7e59      	ldrb	r1, [r3, #25]
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff fb3e 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800cd8c:	46b5      	mov	sp, r6
 800cd8e:	bf00      	nop
 800cd90:	371c      	adds	r7, #28
 800cd92:	46bd      	mov	sp, r7
 800cd94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cd98 <_ZN12FlashManager19ReadValveMaxRunTimeEv>:
 800cd98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd9c:	b089      	sub	sp, #36	@ 0x24
 800cd9e:	af02      	add	r7, sp, #8
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	466b      	mov	r3, sp
 800cda4:	461e      	mov	r6, r3
 800cda6:	2301      	movs	r3, #1
 800cda8:	617b      	str	r3, [r7, #20]
 800cdaa:	6979      	ldr	r1, [r7, #20]
 800cdac:	460b      	mov	r3, r1
 800cdae:	3b01      	subs	r3, #1
 800cdb0:	613b      	str	r3, [r7, #16]
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	4688      	mov	r8, r1
 800cdb6:	4699      	mov	r9, r3
 800cdb8:	f04f 0200 	mov.w	r2, #0
 800cdbc:	f04f 0300 	mov.w	r3, #0
 800cdc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cdc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cdc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cdcc:	2300      	movs	r3, #0
 800cdce:	460c      	mov	r4, r1
 800cdd0:	461d      	mov	r5, r3
 800cdd2:	f04f 0200 	mov.w	r2, #0
 800cdd6:	f04f 0300 	mov.w	r3, #0
 800cdda:	00eb      	lsls	r3, r5, #3
 800cddc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cde0:	00e2      	lsls	r2, r4, #3
 800cde2:	1dcb      	adds	r3, r1, #7
 800cde4:	08db      	lsrs	r3, r3, #3
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	ebad 0d03 	sub.w	sp, sp, r3
 800cdec:	ab02      	add	r3, sp, #8
 800cdee:	3300      	adds	r3, #0
 800cdf0:	60fb      	str	r3, [r7, #12]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	460a      	mov	r2, r1
 800cdf6:	1e51      	subs	r1, r2, #1
 800cdf8:	22ff      	movs	r2, #255	@ 0xff
 800cdfa:	701a      	strb	r2, [r3, #0]
 800cdfc:	1c5a      	adds	r2, r3, #1
 800cdfe:	1e4b      	subs	r3, r1, #1
 800ce00:	e003      	b.n	800ce0a <_ZN12FlashManager19ReadValveMaxRunTimeEv+0x72>
 800ce02:	2100      	movs	r1, #0
 800ce04:	7011      	strb	r1, [r2, #0]
 800ce06:	3b01      	subs	r3, #1
 800ce08:	3201      	adds	r2, #1
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	daf9      	bge.n	800ce02 <_ZN12FlashManager19ReadValveMaxRunTimeEv+0x6a>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	7e5a      	ldrb	r2, [r3, #25]
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	2100      	movs	r1, #0
 800ce16:	9100      	str	r1, [sp, #0]
 800ce18:	68f9      	ldr	r1, [r7, #12]
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f7ff f996 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800ce20:	f107 030b 	add.w	r3, r7, #11
 800ce24:	697a      	ldr	r2, [r7, #20]
 800ce26:	68f9      	ldr	r1, [r7, #12]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f004 f97a 	bl	8011122 <memcpy>
 800ce2e:	7afb      	ldrb	r3, [r7, #11]
 800ce30:	46b5      	mov	sp, r6
 800ce32:	4618      	mov	r0, r3
 800ce34:	371c      	adds	r7, #28
 800ce36:	46bd      	mov	sp, r7
 800ce38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ce3c <_ZN12FlashManager13WriteFlowRateEd>:
 800ce3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce40:	b089      	sub	sp, #36	@ 0x24
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	60f8      	str	r0, [r7, #12]
 800ce46:	ed87 0b00 	vstr	d0, [r7]
 800ce4a:	466b      	mov	r3, sp
 800ce4c:	461e      	mov	r6, r3
 800ce4e:	2308      	movs	r3, #8
 800ce50:	61fb      	str	r3, [r7, #28]
 800ce52:	69f9      	ldr	r1, [r7, #28]
 800ce54:	460b      	mov	r3, r1
 800ce56:	3b01      	subs	r3, #1
 800ce58:	61bb      	str	r3, [r7, #24]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	4688      	mov	r8, r1
 800ce5e:	4699      	mov	r9, r3
 800ce60:	f04f 0200 	mov.w	r2, #0
 800ce64:	f04f 0300 	mov.w	r3, #0
 800ce68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ce6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ce70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ce74:	2300      	movs	r3, #0
 800ce76:	460c      	mov	r4, r1
 800ce78:	461d      	mov	r5, r3
 800ce7a:	f04f 0200 	mov.w	r2, #0
 800ce7e:	f04f 0300 	mov.w	r3, #0
 800ce82:	00eb      	lsls	r3, r5, #3
 800ce84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ce88:	00e2      	lsls	r2, r4, #3
 800ce8a:	1dcb      	adds	r3, r1, #7
 800ce8c:	08db      	lsrs	r3, r3, #3
 800ce8e:	00db      	lsls	r3, r3, #3
 800ce90:	ebad 0d03 	sub.w	sp, sp, r3
 800ce94:	466b      	mov	r3, sp
 800ce96:	3300      	adds	r3, #0
 800ce98:	617b      	str	r3, [r7, #20]
 800ce9a:	463b      	mov	r3, r7
 800ce9c:	69fa      	ldr	r2, [r7, #28]
 800ce9e:	4619      	mov	r1, r3
 800cea0:	6978      	ldr	r0, [r7, #20]
 800cea2:	f004 f93e 	bl	8011122 <memcpy>
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	7b19      	ldrb	r1, [r3, #12]
 800ceaa:	69fa      	ldr	r2, [r7, #28]
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f7ff faaa 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800ceb4:	46b5      	mov	sp, r6
 800ceb6:	bf00      	nop
 800ceb8:	3724      	adds	r7, #36	@ 0x24
 800ceba:	46bd      	mov	sp, r7
 800cebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cec0 <_ZN12FlashManager12ReadFlowRateEv>:
 800cec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cec4:	b08b      	sub	sp, #44	@ 0x2c
 800cec6:	af02      	add	r7, sp, #8
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	466b      	mov	r3, sp
 800cecc:	461e      	mov	r6, r3
 800cece:	2308      	movs	r3, #8
 800ced0:	61fb      	str	r3, [r7, #28]
 800ced2:	69f9      	ldr	r1, [r7, #28]
 800ced4:	460b      	mov	r3, r1
 800ced6:	3b01      	subs	r3, #1
 800ced8:	61bb      	str	r3, [r7, #24]
 800ceda:	2300      	movs	r3, #0
 800cedc:	4688      	mov	r8, r1
 800cede:	4699      	mov	r9, r3
 800cee0:	f04f 0200 	mov.w	r2, #0
 800cee4:	f04f 0300 	mov.w	r3, #0
 800cee8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ceec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cef0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cef4:	2300      	movs	r3, #0
 800cef6:	460c      	mov	r4, r1
 800cef8:	461d      	mov	r5, r3
 800cefa:	f04f 0200 	mov.w	r2, #0
 800cefe:	f04f 0300 	mov.w	r3, #0
 800cf02:	00eb      	lsls	r3, r5, #3
 800cf04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cf08:	00e2      	lsls	r2, r4, #3
 800cf0a:	1dcb      	adds	r3, r1, #7
 800cf0c:	08db      	lsrs	r3, r3, #3
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	ebad 0d03 	sub.w	sp, sp, r3
 800cf14:	ab02      	add	r3, sp, #8
 800cf16:	3300      	adds	r3, #0
 800cf18:	617b      	str	r3, [r7, #20]
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	460a      	mov	r2, r1
 800cf1e:	1e51      	subs	r1, r2, #1
 800cf20:	2200      	movs	r2, #0
 800cf22:	701a      	strb	r2, [r3, #0]
 800cf24:	1c5a      	adds	r2, r3, #1
 800cf26:	1e4b      	subs	r3, r1, #1
 800cf28:	e003      	b.n	800cf32 <_ZN12FlashManager12ReadFlowRateEv+0x72>
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	7011      	strb	r1, [r2, #0]
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	3201      	adds	r2, #1
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	daf9      	bge.n	800cf2a <_ZN12FlashManager12ReadFlowRateEv+0x6a>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	7b1a      	ldrb	r2, [r3, #12]
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	9100      	str	r1, [sp, #0]
 800cf40:	6979      	ldr	r1, [r7, #20]
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7ff f902 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800cf48:	f107 0308 	add.w	r3, r7, #8
 800cf4c:	69fa      	ldr	r2, [r7, #28]
 800cf4e:	6979      	ldr	r1, [r7, #20]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f004 f8e6 	bl	8011122 <memcpy>
 800cf56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf5a:	46b5      	mov	sp, r6
 800cf5c:	ec43 2b17 	vmov	d7, r2, r3
 800cf60:	eeb0 0a47 	vmov.f32	s0, s14
 800cf64:	eef0 0a67 	vmov.f32	s1, s15
 800cf68:	3724      	adds	r7, #36	@ 0x24
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cf70 <_ZN12FlashManager15WriteVolumeRateEd>:
 800cf70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf74:	b089      	sub	sp, #36	@ 0x24
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	60f8      	str	r0, [r7, #12]
 800cf7a:	ed87 0b00 	vstr	d0, [r7]
 800cf7e:	466b      	mov	r3, sp
 800cf80:	461e      	mov	r6, r3
 800cf82:	2308      	movs	r3, #8
 800cf84:	61fb      	str	r3, [r7, #28]
 800cf86:	69f9      	ldr	r1, [r7, #28]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	61bb      	str	r3, [r7, #24]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	4688      	mov	r8, r1
 800cf92:	4699      	mov	r9, r3
 800cf94:	f04f 0200 	mov.w	r2, #0
 800cf98:	f04f 0300 	mov.w	r3, #0
 800cf9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cfa0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cfa4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	460c      	mov	r4, r1
 800cfac:	461d      	mov	r5, r3
 800cfae:	f04f 0200 	mov.w	r2, #0
 800cfb2:	f04f 0300 	mov.w	r3, #0
 800cfb6:	00eb      	lsls	r3, r5, #3
 800cfb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cfbc:	00e2      	lsls	r2, r4, #3
 800cfbe:	1dcb      	adds	r3, r1, #7
 800cfc0:	08db      	lsrs	r3, r3, #3
 800cfc2:	00db      	lsls	r3, r3, #3
 800cfc4:	ebad 0d03 	sub.w	sp, sp, r3
 800cfc8:	466b      	mov	r3, sp
 800cfca:	3300      	adds	r3, #0
 800cfcc:	617b      	str	r3, [r7, #20]
 800cfce:	463b      	mov	r3, r7
 800cfd0:	69fa      	ldr	r2, [r7, #28]
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	6978      	ldr	r0, [r7, #20]
 800cfd6:	f004 f8a4 	bl	8011122 <memcpy>
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	7b59      	ldrb	r1, [r3, #13]
 800cfde:	69fa      	ldr	r2, [r7, #28]
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f7ff fa10 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800cfe8:	46b5      	mov	sp, r6
 800cfea:	bf00      	nop
 800cfec:	3724      	adds	r7, #36	@ 0x24
 800cfee:	46bd      	mov	sp, r7
 800cff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cff4 <_ZN12FlashManager14ReadVolumeRateEv>:
 800cff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cff8:	b08b      	sub	sp, #44	@ 0x2c
 800cffa:	af02      	add	r7, sp, #8
 800cffc:	6078      	str	r0, [r7, #4]
 800cffe:	466b      	mov	r3, sp
 800d000:	461e      	mov	r6, r3
 800d002:	2308      	movs	r3, #8
 800d004:	61fb      	str	r3, [r7, #28]
 800d006:	69f9      	ldr	r1, [r7, #28]
 800d008:	460b      	mov	r3, r1
 800d00a:	3b01      	subs	r3, #1
 800d00c:	61bb      	str	r3, [r7, #24]
 800d00e:	2300      	movs	r3, #0
 800d010:	4688      	mov	r8, r1
 800d012:	4699      	mov	r9, r3
 800d014:	f04f 0200 	mov.w	r2, #0
 800d018:	f04f 0300 	mov.w	r3, #0
 800d01c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d020:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d024:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d028:	2300      	movs	r3, #0
 800d02a:	460c      	mov	r4, r1
 800d02c:	461d      	mov	r5, r3
 800d02e:	f04f 0200 	mov.w	r2, #0
 800d032:	f04f 0300 	mov.w	r3, #0
 800d036:	00eb      	lsls	r3, r5, #3
 800d038:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d03c:	00e2      	lsls	r2, r4, #3
 800d03e:	1dcb      	adds	r3, r1, #7
 800d040:	08db      	lsrs	r3, r3, #3
 800d042:	00db      	lsls	r3, r3, #3
 800d044:	ebad 0d03 	sub.w	sp, sp, r3
 800d048:	ab02      	add	r3, sp, #8
 800d04a:	3300      	adds	r3, #0
 800d04c:	617b      	str	r3, [r7, #20]
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	460a      	mov	r2, r1
 800d052:	1e51      	subs	r1, r2, #1
 800d054:	2200      	movs	r2, #0
 800d056:	701a      	strb	r2, [r3, #0]
 800d058:	1c5a      	adds	r2, r3, #1
 800d05a:	1e4b      	subs	r3, r1, #1
 800d05c:	e003      	b.n	800d066 <_ZN12FlashManager14ReadVolumeRateEv+0x72>
 800d05e:	2100      	movs	r1, #0
 800d060:	7011      	strb	r1, [r2, #0]
 800d062:	3b01      	subs	r3, #1
 800d064:	3201      	adds	r2, #1
 800d066:	2b00      	cmp	r3, #0
 800d068:	daf9      	bge.n	800d05e <_ZN12FlashManager14ReadVolumeRateEv+0x6a>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	7b5a      	ldrb	r2, [r3, #13]
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	2100      	movs	r1, #0
 800d072:	9100      	str	r1, [sp, #0]
 800d074:	6979      	ldr	r1, [r7, #20]
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7ff f868 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800d07c:	f107 0308 	add.w	r3, r7, #8
 800d080:	69fa      	ldr	r2, [r7, #28]
 800d082:	6979      	ldr	r1, [r7, #20]
 800d084:	4618      	mov	r0, r3
 800d086:	f004 f84c 	bl	8011122 <memcpy>
 800d08a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d08e:	46b5      	mov	sp, r6
 800d090:	ec43 2b17 	vmov	d7, r2, r3
 800d094:	eeb0 0a47 	vmov.f32	s0, s14
 800d098:	eef0 0a67 	vmov.f32	s1, s15
 800d09c:	3724      	adds	r7, #36	@ 0x24
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d0a4 <_ZN12FlashManager18WriteVolumeAverageEm>:
 800d0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0a8:	b087      	sub	sp, #28
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
 800d0ae:	6039      	str	r1, [r7, #0]
 800d0b0:	466b      	mov	r3, sp
 800d0b2:	461e      	mov	r6, r3
 800d0b4:	2304      	movs	r3, #4
 800d0b6:	617b      	str	r3, [r7, #20]
 800d0b8:	6979      	ldr	r1, [r7, #20]
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	613b      	str	r3, [r7, #16]
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	4688      	mov	r8, r1
 800d0c4:	4699      	mov	r9, r3
 800d0c6:	f04f 0200 	mov.w	r2, #0
 800d0ca:	f04f 0300 	mov.w	r3, #0
 800d0ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d0d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d0d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d0da:	2300      	movs	r3, #0
 800d0dc:	460c      	mov	r4, r1
 800d0de:	461d      	mov	r5, r3
 800d0e0:	f04f 0200 	mov.w	r2, #0
 800d0e4:	f04f 0300 	mov.w	r3, #0
 800d0e8:	00eb      	lsls	r3, r5, #3
 800d0ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d0ee:	00e2      	lsls	r2, r4, #3
 800d0f0:	1dcb      	adds	r3, r1, #7
 800d0f2:	08db      	lsrs	r3, r3, #3
 800d0f4:	00db      	lsls	r3, r3, #3
 800d0f6:	ebad 0d03 	sub.w	sp, sp, r3
 800d0fa:	466b      	mov	r3, sp
 800d0fc:	3300      	adds	r3, #0
 800d0fe:	60fb      	str	r3, [r7, #12]
 800d100:	463b      	mov	r3, r7
 800d102:	697a      	ldr	r2, [r7, #20]
 800d104:	4619      	mov	r1, r3
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f004 f80b 	bl	8011122 <memcpy>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	7bd9      	ldrb	r1, [r3, #15]
 800d110:	697a      	ldr	r2, [r7, #20]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7ff f977 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800d11a:	46b5      	mov	sp, r6
 800d11c:	bf00      	nop
 800d11e:	371c      	adds	r7, #28
 800d120:	46bd      	mov	sp, r7
 800d122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d126 <_ZN12FlashManager17ReadVolumeAverageEv>:
 800d126:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d12a:	b089      	sub	sp, #36	@ 0x24
 800d12c:	af02      	add	r7, sp, #8
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	466b      	mov	r3, sp
 800d132:	461e      	mov	r6, r3
 800d134:	2304      	movs	r3, #4
 800d136:	617b      	str	r3, [r7, #20]
 800d138:	6979      	ldr	r1, [r7, #20]
 800d13a:	460b      	mov	r3, r1
 800d13c:	3b01      	subs	r3, #1
 800d13e:	613b      	str	r3, [r7, #16]
 800d140:	2300      	movs	r3, #0
 800d142:	4688      	mov	r8, r1
 800d144:	4699      	mov	r9, r3
 800d146:	f04f 0200 	mov.w	r2, #0
 800d14a:	f04f 0300 	mov.w	r3, #0
 800d14e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d15a:	2300      	movs	r3, #0
 800d15c:	460c      	mov	r4, r1
 800d15e:	461d      	mov	r5, r3
 800d160:	f04f 0200 	mov.w	r2, #0
 800d164:	f04f 0300 	mov.w	r3, #0
 800d168:	00eb      	lsls	r3, r5, #3
 800d16a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d16e:	00e2      	lsls	r2, r4, #3
 800d170:	1dcb      	adds	r3, r1, #7
 800d172:	08db      	lsrs	r3, r3, #3
 800d174:	00db      	lsls	r3, r3, #3
 800d176:	ebad 0d03 	sub.w	sp, sp, r3
 800d17a:	ab02      	add	r3, sp, #8
 800d17c:	3300      	adds	r3, #0
 800d17e:	60fb      	str	r3, [r7, #12]
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	460a      	mov	r2, r1
 800d184:	1e51      	subs	r1, r2, #1
 800d186:	2200      	movs	r2, #0
 800d188:	701a      	strb	r2, [r3, #0]
 800d18a:	1c5a      	adds	r2, r3, #1
 800d18c:	1e4b      	subs	r3, r1, #1
 800d18e:	e003      	b.n	800d198 <_ZN12FlashManager17ReadVolumeAverageEv+0x72>
 800d190:	2100      	movs	r1, #0
 800d192:	7011      	strb	r1, [r2, #0]
 800d194:	3b01      	subs	r3, #1
 800d196:	3201      	adds	r2, #1
 800d198:	2b00      	cmp	r3, #0
 800d19a:	daf9      	bge.n	800d190 <_ZN12FlashManager17ReadVolumeAverageEv+0x6a>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	7bda      	ldrb	r2, [r3, #15]
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	9100      	str	r1, [sp, #0]
 800d1a6:	68f9      	ldr	r1, [r7, #12]
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7fe ffcf 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800d1ae:	f107 0308 	add.w	r3, r7, #8
 800d1b2:	697a      	ldr	r2, [r7, #20]
 800d1b4:	68f9      	ldr	r1, [r7, #12]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f003 ffb3 	bl	8011122 <memcpy>
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	46b5      	mov	sp, r6
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	371c      	adds	r7, #28
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d1ca <_ZN12FlashManager16WriteFlowAverageEm>:
 800d1ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1ce:	b087      	sub	sp, #28
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
 800d1d6:	466b      	mov	r3, sp
 800d1d8:	461e      	mov	r6, r3
 800d1da:	2304      	movs	r3, #4
 800d1dc:	617b      	str	r3, [r7, #20]
 800d1de:	6979      	ldr	r1, [r7, #20]
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	613b      	str	r3, [r7, #16]
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	4688      	mov	r8, r1
 800d1ea:	4699      	mov	r9, r3
 800d1ec:	f04f 0200 	mov.w	r2, #0
 800d1f0:	f04f 0300 	mov.w	r3, #0
 800d1f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d1f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d1fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d200:	2300      	movs	r3, #0
 800d202:	460c      	mov	r4, r1
 800d204:	461d      	mov	r5, r3
 800d206:	f04f 0200 	mov.w	r2, #0
 800d20a:	f04f 0300 	mov.w	r3, #0
 800d20e:	00eb      	lsls	r3, r5, #3
 800d210:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d214:	00e2      	lsls	r2, r4, #3
 800d216:	1dcb      	adds	r3, r1, #7
 800d218:	08db      	lsrs	r3, r3, #3
 800d21a:	00db      	lsls	r3, r3, #3
 800d21c:	ebad 0d03 	sub.w	sp, sp, r3
 800d220:	466b      	mov	r3, sp
 800d222:	3300      	adds	r3, #0
 800d224:	60fb      	str	r3, [r7, #12]
 800d226:	463b      	mov	r3, r7
 800d228:	697a      	ldr	r2, [r7, #20]
 800d22a:	4619      	mov	r1, r3
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f003 ff78 	bl	8011122 <memcpy>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	7b99      	ldrb	r1, [r3, #14]
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f7ff f8e4 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800d240:	46b5      	mov	sp, r6
 800d242:	bf00      	nop
 800d244:	371c      	adds	r7, #28
 800d246:	46bd      	mov	sp, r7
 800d248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d24c <_ZN12FlashManager15ReadFlowAverageEv>:
 800d24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d250:	b089      	sub	sp, #36	@ 0x24
 800d252:	af02      	add	r7, sp, #8
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	466b      	mov	r3, sp
 800d258:	461e      	mov	r6, r3
 800d25a:	2304      	movs	r3, #4
 800d25c:	617b      	str	r3, [r7, #20]
 800d25e:	6979      	ldr	r1, [r7, #20]
 800d260:	460b      	mov	r3, r1
 800d262:	3b01      	subs	r3, #1
 800d264:	613b      	str	r3, [r7, #16]
 800d266:	2300      	movs	r3, #0
 800d268:	4688      	mov	r8, r1
 800d26a:	4699      	mov	r9, r3
 800d26c:	f04f 0200 	mov.w	r2, #0
 800d270:	f04f 0300 	mov.w	r3, #0
 800d274:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d278:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d27c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d280:	2300      	movs	r3, #0
 800d282:	460c      	mov	r4, r1
 800d284:	461d      	mov	r5, r3
 800d286:	f04f 0200 	mov.w	r2, #0
 800d28a:	f04f 0300 	mov.w	r3, #0
 800d28e:	00eb      	lsls	r3, r5, #3
 800d290:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d294:	00e2      	lsls	r2, r4, #3
 800d296:	1dcb      	adds	r3, r1, #7
 800d298:	08db      	lsrs	r3, r3, #3
 800d29a:	00db      	lsls	r3, r3, #3
 800d29c:	ebad 0d03 	sub.w	sp, sp, r3
 800d2a0:	ab02      	add	r3, sp, #8
 800d2a2:	3300      	adds	r3, #0
 800d2a4:	60fb      	str	r3, [r7, #12]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	460a      	mov	r2, r1
 800d2aa:	1e51      	subs	r1, r2, #1
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	701a      	strb	r2, [r3, #0]
 800d2b0:	1c5a      	adds	r2, r3, #1
 800d2b2:	1e4b      	subs	r3, r1, #1
 800d2b4:	e003      	b.n	800d2be <_ZN12FlashManager15ReadFlowAverageEv+0x72>
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	7011      	strb	r1, [r2, #0]
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	3201      	adds	r2, #1
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	daf9      	bge.n	800d2b6 <_ZN12FlashManager15ReadFlowAverageEv+0x6a>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	7b9a      	ldrb	r2, [r3, #14]
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	9100      	str	r1, [sp, #0]
 800d2cc:	68f9      	ldr	r1, [r7, #12]
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f7fe ff3c 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800d2d4:	f107 0308 	add.w	r3, r7, #8
 800d2d8:	697a      	ldr	r2, [r7, #20]
 800d2da:	68f9      	ldr	r1, [r7, #12]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f003 ff20 	bl	8011122 <memcpy>
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	46b5      	mov	sp, r6
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	371c      	adds	r7, #28
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d2f0 <_ZN12FlashManager17WriteFirstEmgDataEttt>:
 800d2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f4:	b093      	sub	sp, #76	@ 0x4c
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2fa:	4610      	mov	r0, r2
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	460b      	mov	r3, r1
 800d300:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d302:	4603      	mov	r3, r0
 800d304:	843b      	strh	r3, [r7, #32]
 800d306:	4613      	mov	r3, r2
 800d308:	83fb      	strh	r3, [r7, #30]
 800d30a:	466b      	mov	r3, sp
 800d30c:	461e      	mov	r6, r3
 800d30e:	2302      	movs	r3, #2
 800d310:	647b      	str	r3, [r7, #68]	@ 0x44
 800d312:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d314:	460b      	mov	r3, r1
 800d316:	3b01      	subs	r3, #1
 800d318:	643b      	str	r3, [r7, #64]	@ 0x40
 800d31a:	2300      	movs	r3, #0
 800d31c:	460c      	mov	r4, r1
 800d31e:	461d      	mov	r5, r3
 800d320:	f04f 0200 	mov.w	r2, #0
 800d324:	f04f 0300 	mov.w	r3, #0
 800d328:	00eb      	lsls	r3, r5, #3
 800d32a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d32e:	00e2      	lsls	r2, r4, #3
 800d330:	2300      	movs	r3, #0
 800d332:	6139      	str	r1, [r7, #16]
 800d334:	617b      	str	r3, [r7, #20]
 800d336:	f04f 0200 	mov.w	r2, #0
 800d33a:	f04f 0300 	mov.w	r3, #0
 800d33e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d342:	4628      	mov	r0, r5
 800d344:	00c3      	lsls	r3, r0, #3
 800d346:	4620      	mov	r0, r4
 800d348:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d34c:	4620      	mov	r0, r4
 800d34e:	00c2      	lsls	r2, r0, #3
 800d350:	1dcb      	adds	r3, r1, #7
 800d352:	08db      	lsrs	r3, r3, #3
 800d354:	00db      	lsls	r3, r3, #3
 800d356:	ebad 0d03 	sub.w	sp, sp, r3
 800d35a:	466b      	mov	r3, sp
 800d35c:	3300      	adds	r3, #0
 800d35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d360:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d362:	460b      	mov	r3, r1
 800d364:	3b01      	subs	r3, #1
 800d366:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d368:	2300      	movs	r3, #0
 800d36a:	60b9      	str	r1, [r7, #8]
 800d36c:	60fb      	str	r3, [r7, #12]
 800d36e:	f04f 0200 	mov.w	r2, #0
 800d372:	f04f 0300 	mov.w	r3, #0
 800d376:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d37a:	4628      	mov	r0, r5
 800d37c:	00c3      	lsls	r3, r0, #3
 800d37e:	4620      	mov	r0, r4
 800d380:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d384:	4620      	mov	r0, r4
 800d386:	00c2      	lsls	r2, r0, #3
 800d388:	2300      	movs	r3, #0
 800d38a:	6039      	str	r1, [r7, #0]
 800d38c:	607b      	str	r3, [r7, #4]
 800d38e:	f04f 0200 	mov.w	r2, #0
 800d392:	f04f 0300 	mov.w	r3, #0
 800d396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d39a:	4628      	mov	r0, r5
 800d39c:	00c3      	lsls	r3, r0, #3
 800d39e:	4620      	mov	r0, r4
 800d3a0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	00c2      	lsls	r2, r0, #3
 800d3a8:	1dcb      	adds	r3, r1, #7
 800d3aa:	08db      	lsrs	r3, r3, #3
 800d3ac:	00db      	lsls	r3, r3, #3
 800d3ae:	ebad 0d03 	sub.w	sp, sp, r3
 800d3b2:	466b      	mov	r3, sp
 800d3b4:	3300      	adds	r3, #0
 800d3b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	468a      	mov	sl, r1
 800d3c4:	469b      	mov	fp, r3
 800d3c6:	f04f 0200 	mov.w	r2, #0
 800d3ca:	f04f 0300 	mov.w	r3, #0
 800d3ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d3d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d3d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d3da:	2300      	movs	r3, #0
 800d3dc:	4688      	mov	r8, r1
 800d3de:	4699      	mov	r9, r3
 800d3e0:	f04f 0200 	mov.w	r2, #0
 800d3e4:	f04f 0300 	mov.w	r3, #0
 800d3e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d3ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d3f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d3f4:	1dcb      	adds	r3, r1, #7
 800d3f6:	08db      	lsrs	r3, r3, #3
 800d3f8:	00db      	lsls	r3, r3, #3
 800d3fa:	ebad 0d03 	sub.w	sp, sp, r3
 800d3fe:	466b      	mov	r3, sp
 800d400:	3300      	adds	r3, #0
 800d402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d404:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 800d408:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d40a:	4619      	mov	r1, r3
 800d40c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d40e:	f003 fe88 	bl	8011122 <memcpy>
 800d412:	f107 0320 	add.w	r3, r7, #32
 800d416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d418:	4619      	mov	r1, r3
 800d41a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d41c:	f003 fe81 	bl	8011122 <memcpy>
 800d420:	f107 031e 	add.w	r3, r7, #30
 800d424:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d426:	4619      	mov	r1, r3
 800d428:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d42a:	f003 fe7a 	bl	8011122 <memcpy>
 800d42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d430:	7c19      	ldrb	r1, [r3, #16]
 800d432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d436:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d438:	f7fe ffe6 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43e:	7c1b      	ldrb	r3, [r3, #16]
 800d440:	3302      	adds	r3, #2
 800d442:	b2d9      	uxtb	r1, r3
 800d444:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d44a:	f7fe ffdd 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800d44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d450:	7c1b      	ldrb	r3, [r3, #16]
 800d452:	3304      	adds	r3, #4
 800d454:	b2d9      	uxtb	r1, r3
 800d456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d45a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d45c:	f7fe ffd4 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800d460:	46b5      	mov	sp, r6
 800d462:	bf00      	nop
 800d464:	374c      	adds	r7, #76	@ 0x4c
 800d466:	46bd      	mov	sp, r7
 800d468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d46c <_ZN12FlashManager19ReadFirstEmgMaxTrimEv>:
 800d46c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d470:	b089      	sub	sp, #36	@ 0x24
 800d472:	af02      	add	r7, sp, #8
 800d474:	6078      	str	r0, [r7, #4]
 800d476:	466b      	mov	r3, sp
 800d478:	461e      	mov	r6, r3
 800d47a:	2302      	movs	r3, #2
 800d47c:	617b      	str	r3, [r7, #20]
 800d47e:	6979      	ldr	r1, [r7, #20]
 800d480:	460b      	mov	r3, r1
 800d482:	3b01      	subs	r3, #1
 800d484:	613b      	str	r3, [r7, #16]
 800d486:	2300      	movs	r3, #0
 800d488:	4688      	mov	r8, r1
 800d48a:	4699      	mov	r9, r3
 800d48c:	f04f 0200 	mov.w	r2, #0
 800d490:	f04f 0300 	mov.w	r3, #0
 800d494:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d498:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d49c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	460c      	mov	r4, r1
 800d4a4:	461d      	mov	r5, r3
 800d4a6:	f04f 0200 	mov.w	r2, #0
 800d4aa:	f04f 0300 	mov.w	r3, #0
 800d4ae:	00eb      	lsls	r3, r5, #3
 800d4b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d4b4:	00e2      	lsls	r2, r4, #3
 800d4b6:	1dcb      	adds	r3, r1, #7
 800d4b8:	08db      	lsrs	r3, r3, #3
 800d4ba:	00db      	lsls	r3, r3, #3
 800d4bc:	ebad 0d03 	sub.w	sp, sp, r3
 800d4c0:	ab02      	add	r3, sp, #8
 800d4c2:	3300      	adds	r3, #0
 800d4c4:	60fb      	str	r3, [r7, #12]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	460a      	mov	r2, r1
 800d4ca:	1e51      	subs	r1, r2, #1
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	1c5a      	adds	r2, r3, #1
 800d4d2:	1e4b      	subs	r3, r1, #1
 800d4d4:	e003      	b.n	800d4de <_ZN12FlashManager19ReadFirstEmgMaxTrimEv+0x72>
 800d4d6:	2100      	movs	r1, #0
 800d4d8:	7011      	strb	r1, [r2, #0]
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	3201      	adds	r2, #1
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	daf9      	bge.n	800d4d6 <_ZN12FlashManager19ReadFirstEmgMaxTrimEv+0x6a>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	7c1a      	ldrb	r2, [r3, #16]
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	9100      	str	r1, [sp, #0]
 800d4ec:	68f9      	ldr	r1, [r7, #12]
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7fe fe2c 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800d4f4:	f107 0308 	add.w	r3, r7, #8
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	68f9      	ldr	r1, [r7, #12]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f003 fe10 	bl	8011122 <memcpy>
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	b29b      	uxth	r3, r3
 800d506:	46b5      	mov	sp, r6
 800d508:	4618      	mov	r0, r3
 800d50a:	371c      	adds	r7, #28
 800d50c:	46bd      	mov	sp, r7
 800d50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d512 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv>:
 800d512:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d516:	b089      	sub	sp, #36	@ 0x24
 800d518:	af02      	add	r7, sp, #8
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	466b      	mov	r3, sp
 800d51e:	461e      	mov	r6, r3
 800d520:	2302      	movs	r3, #2
 800d522:	617b      	str	r3, [r7, #20]
 800d524:	6979      	ldr	r1, [r7, #20]
 800d526:	460b      	mov	r3, r1
 800d528:	3b01      	subs	r3, #1
 800d52a:	613b      	str	r3, [r7, #16]
 800d52c:	2300      	movs	r3, #0
 800d52e:	4688      	mov	r8, r1
 800d530:	4699      	mov	r9, r3
 800d532:	f04f 0200 	mov.w	r2, #0
 800d536:	f04f 0300 	mov.w	r3, #0
 800d53a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d53e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d546:	2300      	movs	r3, #0
 800d548:	460c      	mov	r4, r1
 800d54a:	461d      	mov	r5, r3
 800d54c:	f04f 0200 	mov.w	r2, #0
 800d550:	f04f 0300 	mov.w	r3, #0
 800d554:	00eb      	lsls	r3, r5, #3
 800d556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d55a:	00e2      	lsls	r2, r4, #3
 800d55c:	1dcb      	adds	r3, r1, #7
 800d55e:	08db      	lsrs	r3, r3, #3
 800d560:	00db      	lsls	r3, r3, #3
 800d562:	ebad 0d03 	sub.w	sp, sp, r3
 800d566:	ab02      	add	r3, sp, #8
 800d568:	3300      	adds	r3, #0
 800d56a:	60fb      	str	r3, [r7, #12]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	460a      	mov	r2, r1
 800d570:	1e51      	subs	r1, r2, #1
 800d572:	2200      	movs	r2, #0
 800d574:	701a      	strb	r2, [r3, #0]
 800d576:	1c5a      	adds	r2, r3, #1
 800d578:	1e4b      	subs	r3, r1, #1
 800d57a:	e003      	b.n	800d584 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv+0x72>
 800d57c:	2100      	movs	r1, #0
 800d57e:	7011      	strb	r1, [r2, #0]
 800d580:	3b01      	subs	r3, #1
 800d582:	3201      	adds	r2, #1
 800d584:	2b00      	cmp	r3, #0
 800d586:	daf9      	bge.n	800d57c <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv+0x6a>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	7c1b      	ldrb	r3, [r3, #16]
 800d58c:	3302      	adds	r3, #2
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2100      	movs	r1, #0
 800d594:	9100      	str	r1, [sp, #0]
 800d596:	68f9      	ldr	r1, [r7, #12]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7fe fdd7 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800d59e:	f107 0308 	add.w	r3, r7, #8
 800d5a2:	697a      	ldr	r2, [r7, #20]
 800d5a4:	68f9      	ldr	r1, [r7, #12]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f003 fdbb 	bl	8011122 <memcpy>
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	46b5      	mov	sp, r6
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	371c      	adds	r7, #28
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d5bc <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv>:
 800d5bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5c0:	b089      	sub	sp, #36	@ 0x24
 800d5c2:	af02      	add	r7, sp, #8
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	466b      	mov	r3, sp
 800d5c8:	461e      	mov	r6, r3
 800d5ca:	2302      	movs	r3, #2
 800d5cc:	617b      	str	r3, [r7, #20]
 800d5ce:	6979      	ldr	r1, [r7, #20]
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	3b01      	subs	r3, #1
 800d5d4:	613b      	str	r3, [r7, #16]
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	4688      	mov	r8, r1
 800d5da:	4699      	mov	r9, r3
 800d5dc:	f04f 0200 	mov.w	r2, #0
 800d5e0:	f04f 0300 	mov.w	r3, #0
 800d5e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d5e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d5ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	460c      	mov	r4, r1
 800d5f4:	461d      	mov	r5, r3
 800d5f6:	f04f 0200 	mov.w	r2, #0
 800d5fa:	f04f 0300 	mov.w	r3, #0
 800d5fe:	00eb      	lsls	r3, r5, #3
 800d600:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d604:	00e2      	lsls	r2, r4, #3
 800d606:	1dcb      	adds	r3, r1, #7
 800d608:	08db      	lsrs	r3, r3, #3
 800d60a:	00db      	lsls	r3, r3, #3
 800d60c:	ebad 0d03 	sub.w	sp, sp, r3
 800d610:	ab02      	add	r3, sp, #8
 800d612:	3300      	adds	r3, #0
 800d614:	60fb      	str	r3, [r7, #12]
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	460a      	mov	r2, r1
 800d61a:	1e51      	subs	r1, r2, #1
 800d61c:	2200      	movs	r2, #0
 800d61e:	701a      	strb	r2, [r3, #0]
 800d620:	1c5a      	adds	r2, r3, #1
 800d622:	1e4b      	subs	r3, r1, #1
 800d624:	e003      	b.n	800d62e <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv+0x72>
 800d626:	2100      	movs	r1, #0
 800d628:	7011      	strb	r1, [r2, #0]
 800d62a:	3b01      	subs	r3, #1
 800d62c:	3201      	adds	r2, #1
 800d62e:	2b00      	cmp	r3, #0
 800d630:	daf9      	bge.n	800d626 <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv+0x6a>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	7c1b      	ldrb	r3, [r3, #16]
 800d636:	3304      	adds	r3, #4
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	2100      	movs	r1, #0
 800d63e:	9100      	str	r1, [sp, #0]
 800d640:	68f9      	ldr	r1, [r7, #12]
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f7fe fd82 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800d648:	f107 0308 	add.w	r3, r7, #8
 800d64c:	697a      	ldr	r2, [r7, #20]
 800d64e:	68f9      	ldr	r1, [r7, #12]
 800d650:	4618      	mov	r0, r3
 800d652:	f003 fd66 	bl	8011122 <memcpy>
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	b29b      	uxth	r3, r3
 800d65a:	46b5      	mov	sp, r6
 800d65c:	4618      	mov	r0, r3
 800d65e:	371c      	adds	r7, #28
 800d660:	46bd      	mov	sp, r7
 800d662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d666 <_ZN12FlashManager18WriteSecondEmgDataEttt>:
 800d666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66a:	b093      	sub	sp, #76	@ 0x4c
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d670:	4610      	mov	r0, r2
 800d672:	461a      	mov	r2, r3
 800d674:	460b      	mov	r3, r1
 800d676:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d678:	4603      	mov	r3, r0
 800d67a:	843b      	strh	r3, [r7, #32]
 800d67c:	4613      	mov	r3, r2
 800d67e:	83fb      	strh	r3, [r7, #30]
 800d680:	466b      	mov	r3, sp
 800d682:	461e      	mov	r6, r3
 800d684:	2302      	movs	r3, #2
 800d686:	647b      	str	r3, [r7, #68]	@ 0x44
 800d688:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d68a:	460b      	mov	r3, r1
 800d68c:	3b01      	subs	r3, #1
 800d68e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d690:	2300      	movs	r3, #0
 800d692:	460c      	mov	r4, r1
 800d694:	461d      	mov	r5, r3
 800d696:	f04f 0200 	mov.w	r2, #0
 800d69a:	f04f 0300 	mov.w	r3, #0
 800d69e:	00eb      	lsls	r3, r5, #3
 800d6a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d6a4:	00e2      	lsls	r2, r4, #3
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	6139      	str	r1, [r7, #16]
 800d6aa:	617b      	str	r3, [r7, #20]
 800d6ac:	f04f 0200 	mov.w	r2, #0
 800d6b0:	f04f 0300 	mov.w	r3, #0
 800d6b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	00c3      	lsls	r3, r0, #3
 800d6bc:	4620      	mov	r0, r4
 800d6be:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	00c2      	lsls	r2, r0, #3
 800d6c6:	1dcb      	adds	r3, r1, #7
 800d6c8:	08db      	lsrs	r3, r3, #3
 800d6ca:	00db      	lsls	r3, r3, #3
 800d6cc:	ebad 0d03 	sub.w	sp, sp, r3
 800d6d0:	466b      	mov	r3, sp
 800d6d2:	3300      	adds	r3, #0
 800d6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d6d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d6d8:	460b      	mov	r3, r1
 800d6da:	3b01      	subs	r3, #1
 800d6dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	60fb      	str	r3, [r7, #12]
 800d6e4:	f04f 0200 	mov.w	r2, #0
 800d6e8:	f04f 0300 	mov.w	r3, #0
 800d6ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	00c3      	lsls	r3, r0, #3
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	00c2      	lsls	r2, r0, #3
 800d6fe:	2300      	movs	r3, #0
 800d700:	6039      	str	r1, [r7, #0]
 800d702:	607b      	str	r3, [r7, #4]
 800d704:	f04f 0200 	mov.w	r2, #0
 800d708:	f04f 0300 	mov.w	r3, #0
 800d70c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d710:	4628      	mov	r0, r5
 800d712:	00c3      	lsls	r3, r0, #3
 800d714:	4620      	mov	r0, r4
 800d716:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d71a:	4620      	mov	r0, r4
 800d71c:	00c2      	lsls	r2, r0, #3
 800d71e:	1dcb      	adds	r3, r1, #7
 800d720:	08db      	lsrs	r3, r3, #3
 800d722:	00db      	lsls	r3, r3, #3
 800d724:	ebad 0d03 	sub.w	sp, sp, r3
 800d728:	466b      	mov	r3, sp
 800d72a:	3300      	adds	r3, #0
 800d72c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d72e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d730:	460b      	mov	r3, r1
 800d732:	3b01      	subs	r3, #1
 800d734:	633b      	str	r3, [r7, #48]	@ 0x30
 800d736:	2300      	movs	r3, #0
 800d738:	468a      	mov	sl, r1
 800d73a:	469b      	mov	fp, r3
 800d73c:	f04f 0200 	mov.w	r2, #0
 800d740:	f04f 0300 	mov.w	r3, #0
 800d744:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d748:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d74c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d750:	2300      	movs	r3, #0
 800d752:	4688      	mov	r8, r1
 800d754:	4699      	mov	r9, r3
 800d756:	f04f 0200 	mov.w	r2, #0
 800d75a:	f04f 0300 	mov.w	r3, #0
 800d75e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d76a:	1dcb      	adds	r3, r1, #7
 800d76c:	08db      	lsrs	r3, r3, #3
 800d76e:	00db      	lsls	r3, r3, #3
 800d770:	ebad 0d03 	sub.w	sp, sp, r3
 800d774:	466b      	mov	r3, sp
 800d776:	3300      	adds	r3, #0
 800d778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d77a:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 800d77e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d780:	4619      	mov	r1, r3
 800d782:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d784:	f003 fccd 	bl	8011122 <memcpy>
 800d788:	f107 0320 	add.w	r3, r7, #32
 800d78c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d78e:	4619      	mov	r1, r3
 800d790:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d792:	f003 fcc6 	bl	8011122 <memcpy>
 800d796:	f107 031e 	add.w	r3, r7, #30
 800d79a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d79c:	4619      	mov	r1, r3
 800d79e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7a0:	f003 fcbf 	bl	8011122 <memcpy>
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a6:	7c59      	ldrb	r1, [r3, #17]
 800d7a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7ae:	f7fe fe2b 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b4:	7c5b      	ldrb	r3, [r3, #17]
 800d7b6:	3302      	adds	r3, #2
 800d7b8:	b2d9      	uxtb	r1, r3
 800d7ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7c0:	f7fe fe22 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c6:	7c5b      	ldrb	r3, [r3, #17]
 800d7c8:	3304      	adds	r3, #4
 800d7ca:	b2d9      	uxtb	r1, r3
 800d7cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7d2:	f7fe fe19 	bl	800c408 <_ZN12FlashManager9WriteDataEhiPh>
 800d7d6:	46b5      	mov	sp, r6
 800d7d8:	bf00      	nop
 800d7da:	374c      	adds	r7, #76	@ 0x4c
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d7e2 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv>:
 800d7e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7e6:	b089      	sub	sp, #36	@ 0x24
 800d7e8:	af02      	add	r7, sp, #8
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	466b      	mov	r3, sp
 800d7ee:	461e      	mov	r6, r3
 800d7f0:	2302      	movs	r3, #2
 800d7f2:	617b      	str	r3, [r7, #20]
 800d7f4:	6979      	ldr	r1, [r7, #20]
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	613b      	str	r3, [r7, #16]
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	4688      	mov	r8, r1
 800d800:	4699      	mov	r9, r3
 800d802:	f04f 0200 	mov.w	r2, #0
 800d806:	f04f 0300 	mov.w	r3, #0
 800d80a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d80e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d816:	2300      	movs	r3, #0
 800d818:	460c      	mov	r4, r1
 800d81a:	461d      	mov	r5, r3
 800d81c:	f04f 0200 	mov.w	r2, #0
 800d820:	f04f 0300 	mov.w	r3, #0
 800d824:	00eb      	lsls	r3, r5, #3
 800d826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d82a:	00e2      	lsls	r2, r4, #3
 800d82c:	1dcb      	adds	r3, r1, #7
 800d82e:	08db      	lsrs	r3, r3, #3
 800d830:	00db      	lsls	r3, r3, #3
 800d832:	ebad 0d03 	sub.w	sp, sp, r3
 800d836:	ab02      	add	r3, sp, #8
 800d838:	3300      	adds	r3, #0
 800d83a:	60fb      	str	r3, [r7, #12]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	460a      	mov	r2, r1
 800d840:	1e51      	subs	r1, r2, #1
 800d842:	2200      	movs	r2, #0
 800d844:	701a      	strb	r2, [r3, #0]
 800d846:	1c5a      	adds	r2, r3, #1
 800d848:	1e4b      	subs	r3, r1, #1
 800d84a:	e003      	b.n	800d854 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv+0x72>
 800d84c:	2100      	movs	r1, #0
 800d84e:	7011      	strb	r1, [r2, #0]
 800d850:	3b01      	subs	r3, #1
 800d852:	3201      	adds	r2, #1
 800d854:	2b00      	cmp	r3, #0
 800d856:	daf9      	bge.n	800d84c <_ZN12FlashManager20ReadSecondEmgMaxTrimEv+0x6a>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	7c5a      	ldrb	r2, [r3, #17]
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	2100      	movs	r1, #0
 800d860:	9100      	str	r1, [sp, #0]
 800d862:	68f9      	ldr	r1, [r7, #12]
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7fe fc71 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800d86a:	f107 0308 	add.w	r3, r7, #8
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	68f9      	ldr	r1, [r7, #12]
 800d872:	4618      	mov	r0, r3
 800d874:	f003 fc55 	bl	8011122 <memcpy>
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	46b5      	mov	sp, r6
 800d87e:	4618      	mov	r0, r3
 800d880:	371c      	adds	r7, #28
 800d882:	46bd      	mov	sp, r7
 800d884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d888 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv>:
 800d888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d88c:	b089      	sub	sp, #36	@ 0x24
 800d88e:	af02      	add	r7, sp, #8
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	466b      	mov	r3, sp
 800d894:	461e      	mov	r6, r3
 800d896:	2302      	movs	r3, #2
 800d898:	617b      	str	r3, [r7, #20]
 800d89a:	6979      	ldr	r1, [r7, #20]
 800d89c:	460b      	mov	r3, r1
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	613b      	str	r3, [r7, #16]
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	4688      	mov	r8, r1
 800d8a6:	4699      	mov	r9, r3
 800d8a8:	f04f 0200 	mov.w	r2, #0
 800d8ac:	f04f 0300 	mov.w	r3, #0
 800d8b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d8b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d8b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d8bc:	2300      	movs	r3, #0
 800d8be:	460c      	mov	r4, r1
 800d8c0:	461d      	mov	r5, r3
 800d8c2:	f04f 0200 	mov.w	r2, #0
 800d8c6:	f04f 0300 	mov.w	r3, #0
 800d8ca:	00eb      	lsls	r3, r5, #3
 800d8cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d8d0:	00e2      	lsls	r2, r4, #3
 800d8d2:	1dcb      	adds	r3, r1, #7
 800d8d4:	08db      	lsrs	r3, r3, #3
 800d8d6:	00db      	lsls	r3, r3, #3
 800d8d8:	ebad 0d03 	sub.w	sp, sp, r3
 800d8dc:	ab02      	add	r3, sp, #8
 800d8de:	3300      	adds	r3, #0
 800d8e0:	60fb      	str	r3, [r7, #12]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	460a      	mov	r2, r1
 800d8e6:	1e51      	subs	r1, r2, #1
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	701a      	strb	r2, [r3, #0]
 800d8ec:	1c5a      	adds	r2, r3, #1
 800d8ee:	1e4b      	subs	r3, r1, #1
 800d8f0:	e003      	b.n	800d8fa <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv+0x72>
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	7011      	strb	r1, [r2, #0]
 800d8f6:	3b01      	subs	r3, #1
 800d8f8:	3201      	adds	r2, #1
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	daf9      	bge.n	800d8f2 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv+0x6a>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	7c5b      	ldrb	r3, [r3, #17]
 800d902:	3302      	adds	r3, #2
 800d904:	b2da      	uxtb	r2, r3
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	2100      	movs	r1, #0
 800d90a:	9100      	str	r1, [sp, #0]
 800d90c:	68f9      	ldr	r1, [r7, #12]
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f7fe fc1c 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800d914:	f107 0308 	add.w	r3, r7, #8
 800d918:	697a      	ldr	r2, [r7, #20]
 800d91a:	68f9      	ldr	r1, [r7, #12]
 800d91c:	4618      	mov	r0, r3
 800d91e:	f003 fc00 	bl	8011122 <memcpy>
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	b29b      	uxth	r3, r3
 800d926:	46b5      	mov	sp, r6
 800d928:	4618      	mov	r0, r3
 800d92a:	371c      	adds	r7, #28
 800d92c:	46bd      	mov	sp, r7
 800d92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d932 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv>:
 800d932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d936:	b089      	sub	sp, #36	@ 0x24
 800d938:	af02      	add	r7, sp, #8
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	466b      	mov	r3, sp
 800d93e:	461e      	mov	r6, r3
 800d940:	2302      	movs	r3, #2
 800d942:	617b      	str	r3, [r7, #20]
 800d944:	6979      	ldr	r1, [r7, #20]
 800d946:	460b      	mov	r3, r1
 800d948:	3b01      	subs	r3, #1
 800d94a:	613b      	str	r3, [r7, #16]
 800d94c:	2300      	movs	r3, #0
 800d94e:	4688      	mov	r8, r1
 800d950:	4699      	mov	r9, r3
 800d952:	f04f 0200 	mov.w	r2, #0
 800d956:	f04f 0300 	mov.w	r3, #0
 800d95a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d95e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d966:	2300      	movs	r3, #0
 800d968:	460c      	mov	r4, r1
 800d96a:	461d      	mov	r5, r3
 800d96c:	f04f 0200 	mov.w	r2, #0
 800d970:	f04f 0300 	mov.w	r3, #0
 800d974:	00eb      	lsls	r3, r5, #3
 800d976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d97a:	00e2      	lsls	r2, r4, #3
 800d97c:	1dcb      	adds	r3, r1, #7
 800d97e:	08db      	lsrs	r3, r3, #3
 800d980:	00db      	lsls	r3, r3, #3
 800d982:	ebad 0d03 	sub.w	sp, sp, r3
 800d986:	ab02      	add	r3, sp, #8
 800d988:	3300      	adds	r3, #0
 800d98a:	60fb      	str	r3, [r7, #12]
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	460a      	mov	r2, r1
 800d990:	1e51      	subs	r1, r2, #1
 800d992:	2200      	movs	r2, #0
 800d994:	701a      	strb	r2, [r3, #0]
 800d996:	1c5a      	adds	r2, r3, #1
 800d998:	1e4b      	subs	r3, r1, #1
 800d99a:	e003      	b.n	800d9a4 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv+0x72>
 800d99c:	2100      	movs	r1, #0
 800d99e:	7011      	strb	r1, [r2, #0]
 800d9a0:	3b01      	subs	r3, #1
 800d9a2:	3201      	adds	r2, #1
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	daf9      	bge.n	800d99c <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv+0x6a>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	7c5b      	ldrb	r3, [r3, #17]
 800d9ac:	3304      	adds	r3, #4
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	9100      	str	r1, [sp, #0]
 800d9b6:	68f9      	ldr	r1, [r7, #12]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7fe fbc7 	bl	800c14c <_ZN12FlashManager8ReadDataEPhhib>
 800d9be:	f107 0308 	add.w	r3, r7, #8
 800d9c2:	697a      	ldr	r2, [r7, #20]
 800d9c4:	68f9      	ldr	r1, [r7, #12]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f003 fbab 	bl	8011122 <memcpy>
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	46b5      	mov	sp, r6
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	371c      	adds	r7, #28
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d9dc <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	ed87 0a01 	vstr	s0, [r7, #4]
 800d9e6:	ed97 0a01 	vldr	s0, [r7, #4]
 800d9ea:	f003 f887 	bl	8010afc <ceilf>
 800d9ee:	eef0 7a40 	vmov.f32	s15, s0
 800d9f2:	eeb0 0a67 	vmov.f32	s0, s15
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	ed87 0a01 	vstr	s0, [r7, #4]
 800da06:	ed97 0a01 	vldr	s0, [r7, #4]
 800da0a:	f003 f8b9 	bl	8010b80 <floorf>
 800da0e:	eef0 7a40 	vmov.f32	s15, s0
 800da12:	eeb0 0a67 	vmov.f32	s0, s15
 800da16:	3708      	adds	r7, #8
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <_ZN18VolumeFilterStructC1Ev>:
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2214      	movs	r2, #20
 800da28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4618      	mov	r0, r3
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <_ZN16FlowFilterStructC1Ev>:
 800da3a:	b480      	push	{r7}
 800da3c:	b083      	sub	sp, #12
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2228      	movs	r2, #40	@ 0x28
 800da46:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	4618      	mov	r0, r3
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <_ZN8LoadCellC1Ev>:
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	4a04      	ldr	r2, [pc, #16]	@ (800da74 <_ZN8LoadCellC1Ev+0x1c>)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	4618      	mov	r0, r3
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr
 800da74:	08011d24 	.word	0x08011d24

0800da78 <_ZN8LoadCellD1Ev>:
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	4a04      	ldr	r2, [pc, #16]	@ (800da94 <_ZN8LoadCellD1Ev+0x1c>)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	601a      	str	r2, [r3, #0]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	4618      	mov	r0, r3
 800da8a:	370c      	adds	r7, #12
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr
 800da94:	08011d24 	.word	0x08011d24

0800da98 <_ZN8LoadCellD0Ev>:
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f7ff ffe9 	bl	800da78 <_ZN8LoadCellD1Ev>
 800daa6:	f242 0138 	movw	r1, #8248	@ 0x2038
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f003 f822 	bl	8010af4 <_ZdlPvj>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	4618      	mov	r0, r3
 800dab4:	3708      	adds	r7, #8
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <_ZN8LoadCell5SetupEv>:
 800daba:	b580      	push	{r7, lr}
 800dabc:	b082      	sub	sp, #8
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
 800dac2:	2200      	movs	r2, #0
 800dac4:	210e      	movs	r1, #14
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fd5c 	bl	800e584 <_ZN8LoadCell10WriteToSPIEtt>
 800dacc:	2200      	movs	r2, #0
 800dace:	2110      	movs	r1, #16
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 fd57 	bl	800e584 <_ZN8LoadCell10WriteToSPIEtt>
 800dad6:	22a3      	movs	r2, #163	@ 0xa3
 800dad8:	2112      	movs	r1, #18
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 fd52 	bl	800e584 <_ZN8LoadCell10WriteToSPIEtt>
 800dae0:	22f0      	movs	r2, #240	@ 0xf0
 800dae2:	2114      	movs	r1, #20
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 fd4d 	bl	800e584 <_ZN8LoadCell10WriteToSPIEtt>
 800daea:	220c      	movs	r2, #12
 800daec:	2116      	movs	r1, #22
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 fd48 	bl	800e584 <_ZN8LoadCell10WriteToSPIEtt>
 800daf4:	bf00      	nop
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <_ZN8LoadCell17ReadVolumeAndFlowEv>:
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b08c      	sub	sp, #48	@ 0x30
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db0a:	461a      	mov	r2, r3
 800db0c:	f04f 0300 	mov.w	r3, #0
 800db10:	6113      	str	r3, [r2, #16]
 800db12:	2201      	movs	r2, #1
 800db14:	2101      	movs	r1, #1
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 fc76 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db26:	60fb      	str	r3, [r7, #12]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db32:	461a      	mov	r2, r3
 800db34:	4b74      	ldr	r3, [pc, #464]	@ (800dd08 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800db36:	67da      	str	r2, [r3, #124]	@ 0x7c
 800db38:	2201      	movs	r2, #1
 800db3a:	2103      	movs	r1, #3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fc63 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db48:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db4c:	613b      	str	r3, [r7, #16]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db54:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db58:	461a      	mov	r2, r3
 800db5a:	4b6b      	ldr	r3, [pc, #428]	@ (800dd08 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800db5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800db60:	2201      	movs	r2, #1
 800db62:	2105      	movs	r1, #5
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 fc4f 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db70:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db74:	617b      	str	r3, [r7, #20]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db7c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db80:	461a      	mov	r2, r3
 800db82:	4b61      	ldr	r3, [pc, #388]	@ (800dd08 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800db84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800db88:	2201      	movs	r2, #1
 800db8a:	2107      	movs	r1, #7
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f000 fc3b 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800db98:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db9c:	61bb      	str	r3, [r7, #24]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dba4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dba8:	461a      	mov	r2, r3
 800dbaa:	4b57      	ldr	r3, [pc, #348]	@ (800dd08 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800dbac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	2109      	movs	r1, #9
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 fc27 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dbc0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dbc4:	61fb      	str	r3, [r7, #28]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dbcc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	4b4d      	ldr	r3, [pc, #308]	@ (800dd08 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800dbd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800dbd8:	2201      	movs	r2, #1
 800dbda:	210b      	movs	r1, #11
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fc13 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dbe8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dbec:	623b      	str	r3, [r7, #32]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dbf4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	4b43      	ldr	r3, [pc, #268]	@ (800dd08 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800dbfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800dc00:	2300      	movs	r3, #0
 800dc02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc04:	e036      	b.n	800dc74 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x178>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc0c:	ed93 7a04 	vldr	s14, [r3, #16]
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	ee07 3a90 	vmov	s15, r3
 800dc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	021b      	lsls	r3, r3, #8
 800dc22:	ee07 3a90 	vmov	s15, r3
 800dc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc34:	edc3 7a04 	vstr	s15, [r3, #16]
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	021b      	lsls	r3, r3, #8
 800dc3e:	4413      	add	r3, r2
 800dc40:	ee07 3a90 	vmov	s15, r3
 800dc44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc4e:	edc3 7a03 	vstr	s15, [r3, #12]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc58:	edd3 7a03 	vldr	s15, [r3, #12]
 800dc5c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800dd0c <_ZN8LoadCell17ReadVolumeAndFlowEv+0x210>
 800dc60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc6a:	edc3 7a03 	vstr	s15, [r3, #12]
 800dc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc70:	3301      	adds	r3, #1
 800dc72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc76:	2b27      	cmp	r3, #39	@ 0x27
 800dc78:	ddc5      	ble.n	800dc06 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x10a>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc80:	691b      	ldr	r3, [r3, #16]
 800dc82:	4a21      	ldr	r2, [pc, #132]	@ (800dd08 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800dc84:	6113      	str	r3, [r2, #16]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc8c:	edd3 7a04 	vldr	s15, [r3, #16]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dc96:	ed93 7a08 	vldr	s14, [r3, #32]
 800dc9a:	eeb0 1a47 	vmov.f32	s2, s14
 800dc9e:	eef0 0a67 	vmov.f32	s1, s15
 800dca2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 fc96 	bl	800e5d8 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800dcac:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcba:	6213      	str	r3, [r2, #32]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	4a10      	ldr	r2, [pc, #64]	@ (800dd08 <_ZN8LoadCell17ReadVolumeAndFlowEv+0x20c>)
 800dcc6:	6153      	str	r3, [r2, #20]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dcce:	edd3 7a03 	vldr	s15, [r3, #12]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dcd8:	ed93 7a07 	vldr	s14, [r3, #28]
 800dcdc:	eeb0 1a47 	vmov.f32	s2, s14
 800dce0:	eef0 0a67 	vmov.f32	s1, s15
 800dce4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fc75 	bl	800e5d8 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800dcee:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcfc:	61d3      	str	r3, [r2, #28]
 800dcfe:	bf00      	nop
 800dd00:	3730      	adds	r7, #48	@ 0x30
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	20009328 	.word	0x20009328
 800dd0c:	47800000 	.word	0x47800000

0800dd10 <_ZN8LoadCell10ReadVolumeEb>:
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b088      	sub	sp, #32
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	70fb      	strb	r3, [r7, #3]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dd22:	461a      	mov	r2, r3
 800dd24:	f04f 0300 	mov.w	r3, #0
 800dd28:	6113      	str	r3, [r2, #16]
 800dd2a:	2202      	movs	r2, #2
 800dd2c:	2107      	movs	r1, #7
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fb6a 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dd3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dd3e:	60fb      	str	r3, [r7, #12]
 800dd40:	2202      	movs	r2, #2
 800dd42:	2109      	movs	r1, #9
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 fb5f 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dd50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dd54:	613b      	str	r3, [r7, #16]
 800dd56:	2202      	movs	r2, #2
 800dd58:	210b      	movs	r1, #11
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 fb54 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dd66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dd6a:	617b      	str	r3, [r7, #20]
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	61fb      	str	r3, [r7, #28]
 800dd70:	e01b      	b.n	800ddaa <_ZN8LoadCell10ReadVolumeEb+0x9a>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dd78:	ed93 7a04 	vldr	s14, [r3, #16]
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	ee07 3a90 	vmov	s15, r3
 800dd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd86:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	021b      	lsls	r3, r3, #8
 800dd8e:	ee07 3a90 	vmov	s15, r3
 800dd92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dda0:	edc3 7a04 	vstr	s15, [r3, #16]
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	3301      	adds	r3, #1
 800dda8:	61fb      	str	r3, [r7, #28]
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	2b27      	cmp	r3, #39	@ 0x27
 800ddae:	dde0      	ble.n	800dd72 <_ZN8LoadCell10ReadVolumeEb+0x62>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ddb6:	edd3 7a04 	vldr	s15, [r3, #16]
 800ddba:	eeb0 0a67 	vmov.f32	s0, s15
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 f894 	bl	800deec <_ZN8LoadCell23CalculateRealVolumeDataEf>
 800ddc4:	eef0 7a40 	vmov.f32	s15, s0
 800ddc8:	edc7 7a02 	vstr	s15, [r7, #8]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ddd2:	ed93 7a05 	vldr	s14, [r3, #20]
 800ddd6:	edd7 7a02 	vldr	s15, [r7, #8]
 800ddda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde2:	bfcc      	ite	gt
 800dde4:	2301      	movgt	r3, #1
 800dde6:	2300      	movle	r3, #0
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d004      	beq.n	800ddf8 <_ZN8LoadCell10ReadVolumeEb+0xe8>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ddf4:	695b      	ldr	r3, [r3, #20]
 800ddf6:	60bb      	str	r3, [r7, #8]
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800de00:	6153      	str	r3, [r2, #20]
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	4a38      	ldr	r2, [pc, #224]	@ (800dee8 <_ZN8LoadCell10ReadVolumeEb+0x1d8>)
 800de06:	6213      	str	r3, [r2, #32]
 800de08:	78fb      	ldrb	r3, [r7, #3]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d067      	beq.n	800dede <_ZN8LoadCell10ReadVolumeEb+0x1ce>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	425a      	negs	r2, r3
 800de18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de1c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800de20:	bf58      	it	pl
 800de22:	4253      	negpl	r3, r2
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800de2a:	6053      	str	r3, [r2, #4]
 800de2c:	f107 0308 	add.w	r3, r7, #8
 800de30:	61bb      	str	r3, [r7, #24]
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	781a      	ldrb	r2, [r3, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	ee07 2a90 	vmov	s15, r2
 800de42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	4413      	add	r3, r2
 800de4c:	3304      	adds	r3, #4
 800de4e:	edc3 7a00 	vstr	s15, [r3]
 800de52:	69bb      	ldr	r3, [r7, #24]
 800de54:	3301      	adds	r3, #1
 800de56:	781a      	ldrb	r2, [r3, #0]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	3301      	adds	r3, #1
 800de62:	ee07 2a90 	vmov	s15, r2
 800de66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	4413      	add	r3, r2
 800de70:	3304      	adds	r3, #4
 800de72:	edc3 7a00 	vstr	s15, [r3]
 800de76:	69bb      	ldr	r3, [r7, #24]
 800de78:	3302      	adds	r3, #2
 800de7a:	781a      	ldrb	r2, [r3, #0]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	3302      	adds	r3, #2
 800de86:	ee07 2a90 	vmov	s15, r2
 800de8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	4413      	add	r3, r2
 800de94:	3304      	adds	r3, #4
 800de96:	edc3 7a00 	vstr	s15, [r3]
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	3303      	adds	r3, #3
 800de9e:	781a      	ldrb	r2, [r3, #0]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	3303      	adds	r3, #3
 800deaa:	ee07 2a90 	vmov	s15, r2
 800deae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	4413      	add	r3, r2
 800deb8:	3304      	adds	r3, #4
 800deba:	edc3 7a00 	vstr	s15, [r3]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	3304      	adds	r3, #4
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800dece:	6053      	str	r3, [r2, #4]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	4a03      	ldr	r2, [pc, #12]	@ (800dee8 <_ZN8LoadCell10ReadVolumeEb+0x1d8>)
 800deda:	6013      	str	r3, [r2, #0]
 800dedc:	e000      	b.n	800dee0 <_ZN8LoadCell10ReadVolumeEb+0x1d0>
 800dede:	bf00      	nop
 800dee0:	3720      	adds	r7, #32
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	20009328 	.word	0x20009328

0800deec <_ZN8LoadCell23CalculateRealVolumeDataEf>:
 800deec:	b580      	push	{r7, lr}
 800deee:	b08a      	sub	sp, #40	@ 0x28
 800def0:	af02      	add	r7, sp, #8
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	ed87 0a00 	vstr	s0, [r7]
 800def8:	f04f 0300 	mov.w	r3, #0
 800defc:	61fb      	str	r3, [r7, #28]
 800defe:	f04f 0300 	mov.w	r3, #0
 800df02:	617b      	str	r3, [r7, #20]
 800df04:	4a5a      	ldr	r2, [pc, #360]	@ (800e070 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	6113      	str	r3, [r2, #16]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800df10:	edd3 7a08 	vldr	s15, [r3, #32]
 800df14:	eeb0 1a67 	vmov.f32	s2, s15
 800df18:	edd7 0a00 	vldr	s1, [r7]
 800df1c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 fb59 	bl	800e5d8 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800df26:	ed87 0a04 	vstr	s0, [r7, #16]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800df30:	461a      	mov	r2, r3
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	6213      	str	r3, [r2, #32]
 800df36:	4b4f      	ldr	r3, [pc, #316]	@ (800e074 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800df38:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800df3c:	3301      	adds	r3, #1
 800df3e:	b29a      	uxth	r2, r3
 800df40:	4b4c      	ldr	r3, [pc, #304]	@ (800e074 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800df42:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 800df46:	4b4b      	ldr	r3, [pc, #300]	@ (800e074 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800df48:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 800df4c:	4b49      	ldr	r3, [pc, #292]	@ (800e074 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800df4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800df52:	429a      	cmp	r2, r3
 800df54:	d303      	bcc.n	800df5e <_ZN8LoadCell23CalculateRealVolumeDataEf+0x72>
 800df56:	4b47      	ldr	r3, [pc, #284]	@ (800e074 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800df58:	2200      	movs	r2, #0
 800df5a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 800df5e:	4b46      	ldr	r3, [pc, #280]	@ (800e078 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800df60:	699b      	ldr	r3, [r3, #24]
 800df62:	ee07 3a90 	vmov	s15, r3
 800df66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df6a:	ed97 7a04 	vldr	s14, [r7, #16]
 800df6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df72:	edc7 7a06 	vstr	s15, [r7, #24]
 800df76:	edd7 7a06 	vldr	s15, [r7, #24]
 800df7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df82:	d502      	bpl.n	800df8a <_ZN8LoadCell23CalculateRealVolumeDataEf+0x9e>
 800df84:	f04f 0300 	mov.w	r3, #0
 800df88:	61bb      	str	r3, [r7, #24]
 800df8a:	4a39      	ldr	r2, [pc, #228]	@ (800e070 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800df8c:	69bb      	ldr	r3, [r7, #24]
 800df8e:	6593      	str	r3, [r2, #88]	@ 0x58
 800df90:	4b38      	ldr	r3, [pc, #224]	@ (800e074 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800df92:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800df96:	461a      	mov	r2, r3
 800df98:	4b36      	ldr	r3, [pc, #216]	@ (800e074 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800df9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800df9e:	9300      	str	r3, [sp, #0]
 800dfa0:	ed97 0a06 	vldr	s0, [r7, #24]
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	4a33      	ldr	r2, [pc, #204]	@ (800e074 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x188>)
 800dfa8:	4934      	ldr	r1, [pc, #208]	@ (800e07c <_ZN8LoadCell23CalculateRealVolumeDataEf+0x190>)
 800dfaa:	4835      	ldr	r0, [pc, #212]	@ (800e080 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x194>)
 800dfac:	f7fe f876 	bl	800c09c <_ZN6Filter14MoovingAverageEPfS0_mmf>
 800dfb0:	ed87 0a05 	vstr	s0, [r7, #20]
 800dfb4:	4a2e      	ldr	r2, [pc, #184]	@ (800e070 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	6513      	str	r3, [r2, #80]	@ 0x50
 800dfba:	4b2f      	ldr	r3, [pc, #188]	@ (800e078 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x18c>)
 800dfbc:	ed93 7a07 	vldr	s14, [r3, #28]
 800dfc0:	edd7 6a05 	vldr	s13, [r7, #20]
 800dfc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfc8:	edc7 7a03 	vstr	s15, [r7, #12]
 800dfcc:	edd7 7a03 	vldr	s15, [r7, #12]
 800dfd0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800dfd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfdc:	dd02      	ble.n	800dfe4 <_ZN8LoadCell23CalculateRealVolumeDataEf+0xf8>
 800dfde:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dfe2:	e001      	b.n	800dfe8 <_ZN8LoadCell23CalculateRealVolumeDataEf+0xfc>
 800dfe4:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800e084 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x198>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800dfee:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800dff2:	eeb0 1a47 	vmov.f32	s2, s14
 800dff6:	edd7 0a03 	vldr	s1, [r7, #12]
 800dffa:	eeb0 0a67 	vmov.f32	s0, s15
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 faea 	bl	800e5d8 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800e004:	ed87 0a07 	vstr	s0, [r7, #28]
 800e008:	edd7 7a03 	vldr	s15, [r7, #12]
 800e00c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800e010:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e018:	dd06      	ble.n	800e028 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x13c>
 800e01a:	ed97 0a07 	vldr	s0, [r7, #28]
 800e01e:	f7ff fcdd 	bl	800d9dc <_ZSt4ceilf>
 800e022:	ed87 0a07 	vstr	s0, [r7, #28]
 800e026:	e005      	b.n	800e034 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x148>
 800e028:	ed97 0a07 	vldr	s0, [r7, #28]
 800e02c:	f7ff fce6 	bl	800d9fc <_ZSt5floorf>
 800e030:	ed87 0a07 	vstr	s0, [r7, #28]
 800e034:	edd7 7a07 	vldr	s15, [r7, #28]
 800e038:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e040:	d502      	bpl.n	800e048 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x15c>
 800e042:	f04f 0300 	mov.w	r3, #0
 800e046:	61fb      	str	r3, [r7, #28]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e04e:	461a      	mov	r2, r3
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	6293      	str	r3, [r2, #40]	@ 0x28
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e05c:	4a04      	ldr	r2, [pc, #16]	@ (800e070 <_ZN8LoadCell23CalculateRealVolumeDataEf+0x184>)
 800e05e:	6193      	str	r3, [r2, #24]
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	ee07 3a90 	vmov	s15, r3
 800e066:	eeb0 0a67 	vmov.f32	s0, s15
 800e06a:	3720      	adds	r7, #32
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	20009328 	.word	0x20009328
 800e074:	20004ef0 	.word	0x20004ef0
 800e078:	200092ac 	.word	0x200092ac
 800e07c:	20004ef4 	.word	0x20004ef4
 800e080:	20004eec 	.word	0x20004eec
 800e084:	3f59999a 	.word	0x3f59999a

0800e088 <_ZN8LoadCell8ReadFlowEb>:
 800e088:	b580      	push	{r7, lr}
 800e08a:	b08a      	sub	sp, #40	@ 0x28
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	460b      	mov	r3, r1
 800e092:	70fb      	strb	r3, [r7, #3]
 800e094:	2203      	movs	r2, #3
 800e096:	2101      	movs	r1, #1
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 f9b5 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e0a4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e0a8:	60fb      	str	r3, [r7, #12]
 800e0aa:	2203      	movs	r2, #3
 800e0ac:	2103      	movs	r1, #3
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 f9aa 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e0ba:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e0be:	613b      	str	r3, [r7, #16]
 800e0c0:	2203      	movs	r2, #3
 800e0c2:	2105      	movs	r1, #5
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 f99f 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e0d0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e0d4:	617b      	str	r3, [r7, #20]
 800e0d6:	2203      	movs	r2, #3
 800e0d8:	2107      	movs	r1, #7
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 f994 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e0e6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e0ea:	61bb      	str	r3, [r7, #24]
 800e0ec:	2203      	movs	r2, #3
 800e0ee:	2109      	movs	r1, #9
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 f989 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e0fc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e100:	61fb      	str	r3, [r7, #28]
 800e102:	2203      	movs	r2, #3
 800e104:	210b      	movs	r1, #11
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 f97e 	bl	800e408 <_ZN8LoadCell11ReadFromSPIEhi>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e112:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e116:	623b      	str	r3, [r7, #32]
 800e118:	693a      	ldr	r2, [r7, #16]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	021b      	lsls	r3, r3, #8
 800e11e:	4413      	add	r3, r2
 800e120:	ee07 3a90 	vmov	s15, r3
 800e124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e12e:	edc3 7a03 	vstr	s15, [r3, #12]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e138:	edd3 7a03 	vldr	s15, [r3, #12]
 800e13c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800e28c <_ZN8LoadCell8ReadFlowEb+0x204>
 800e140:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e14a:	edc3 7a03 	vstr	s15, [r3, #12]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e154:	edd3 7a03 	vldr	s15, [r3, #12]
 800e158:	eeb0 0a67 	vmov.f32	s0, s15
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f000 f89d 	bl	800e29c <_ZN8LoadCell21CalculateRealFlowDataEf>
 800e162:	eef0 7a40 	vmov.f32	s15, s0
 800e166:	edc7 7a02 	vstr	s15, [r7, #8]
 800e16a:	4b49      	ldr	r3, [pc, #292]	@ (800e290 <_ZN8LoadCell8ReadFlowEb+0x208>)
 800e16c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800e170:	ee07 3a90 	vmov	s15, r3
 800e174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e178:	edd7 7a02 	vldr	s15, [r7, #8]
 800e17c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e184:	d80b      	bhi.n	800e19e <_ZN8LoadCell8ReadFlowEb+0x116>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e18c:	2201      	movs	r2, #1
 800e18e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800e192:	4b40      	ldr	r3, [pc, #256]	@ (800e294 <_ZN8LoadCell8ReadFlowEb+0x20c>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800e19c:	6313      	str	r3, [r2, #48]	@ 0x30
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	4a3d      	ldr	r2, [pc, #244]	@ (800e298 <_ZN8LoadCell8ReadFlowEb+0x210>)
 800e1a2:	6253      	str	r3, [r2, #36]	@ 0x24
 800e1a4:	78fb      	ldrb	r3, [r7, #3]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d06b      	beq.n	800e282 <_ZN8LoadCell8ReadFlowEb+0x1fa>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	425a      	negs	r2, r3
 800e1b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1b8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e1bc:	bf58      	it	pl
 800e1be:	4253      	negpl	r3, r2
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800e1c6:	6093      	str	r3, [r2, #8]
 800e1c8:	f107 0308 	add.w	r3, r7, #8
 800e1cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d0:	781a      	ldrb	r2, [r3, #0]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e1d8:	689b      	ldr	r3, [r3, #8]
 800e1da:	ee07 2a90 	vmov	s15, r2
 800e1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	4413      	add	r3, r2
 800e1ec:	edc3 7a00 	vstr	s15, [r3]
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	781a      	ldrb	r2, [r3, #0]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	3301      	adds	r3, #1
 800e200:	ee07 2a90 	vmov	s15, r2
 800e204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4413      	add	r3, r2
 800e212:	edc3 7a00 	vstr	s15, [r3]
 800e216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e218:	3302      	adds	r3, #2
 800e21a:	781a      	ldrb	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	3302      	adds	r3, #2
 800e226:	ee07 2a90 	vmov	s15, r2
 800e22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	edc3 7a00 	vstr	s15, [r3]
 800e23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e23e:	3303      	adds	r3, #3
 800e240:	781a      	ldrb	r2, [r3, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e248:	689b      	ldr	r3, [r3, #8]
 800e24a:	3303      	adds	r3, #3
 800e24c:	ee07 2a90 	vmov	s15, r2
 800e250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	4413      	add	r3, r2
 800e25e:	edc3 7a00 	vstr	s15, [r3]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	3304      	adds	r3, #4
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800e272:	6093      	str	r3, [r2, #8]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	4a06      	ldr	r2, [pc, #24]	@ (800e298 <_ZN8LoadCell8ReadFlowEb+0x210>)
 800e27e:	6053      	str	r3, [r2, #4]
 800e280:	e000      	b.n	800e284 <_ZN8LoadCell8ReadFlowEb+0x1fc>
 800e282:	bf00      	nop
 800e284:	3728      	adds	r7, #40	@ 0x28
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	47800000 	.word	0x47800000
 800e290:	200092ac 	.word	0x200092ac
 800e294:	200000cc 	.word	0x200000cc
 800e298:	20009328 	.word	0x20009328

0800e29c <_ZN8LoadCell21CalculateRealFlowDataEf>:
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b08a      	sub	sp, #40	@ 0x28
 800e2a0:	af02      	add	r7, sp, #8
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	ed87 0a00 	vstr	s0, [r7]
 800e2a8:	f04f 0300 	mov.w	r3, #0
 800e2ac:	61fb      	str	r3, [r7, #28]
 800e2ae:	f04f 0300 	mov.w	r3, #0
 800e2b2:	617b      	str	r3, [r7, #20]
 800e2b4:	4a4e      	ldr	r2, [pc, #312]	@ (800e3f0 <_ZN8LoadCell21CalculateRealFlowDataEf+0x154>)
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	6153      	str	r3, [r2, #20]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e2c0:	edd3 7a07 	vldr	s15, [r3, #28]
 800e2c4:	eeb0 1a67 	vmov.f32	s2, s15
 800e2c8:	edd7 0a00 	vldr	s1, [r7]
 800e2cc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 f981 	bl	800e5d8 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800e2d6:	ed87 0a04 	vstr	s0, [r7, #16]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	61d3      	str	r3, [r2, #28]
 800e2e6:	4b43      	ldr	r3, [pc, #268]	@ (800e3f4 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800e2e8:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	b2da      	uxtb	r2, r3
 800e2f0:	4b40      	ldr	r3, [pc, #256]	@ (800e3f4 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800e2f2:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
 800e2f6:	4b40      	ldr	r3, [pc, #256]	@ (800e3f8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x15c>)
 800e2f8:	695b      	ldr	r3, [r3, #20]
 800e2fa:	ee07 3a90 	vmov	s15, r3
 800e2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e302:	ed97 7a04 	vldr	s14, [r7, #16]
 800e306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e30a:	edc7 7a06 	vstr	s15, [r7, #24]
 800e30e:	edd7 7a06 	vldr	s15, [r7, #24]
 800e312:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e31a:	d502      	bpl.n	800e322 <_ZN8LoadCell21CalculateRealFlowDataEf+0x86>
 800e31c:	f04f 0300 	mov.w	r3, #0
 800e320:	61bb      	str	r3, [r7, #24]
 800e322:	4b34      	ldr	r3, [pc, #208]	@ (800e3f4 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800e324:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800e328:	461a      	mov	r2, r3
 800e32a:	4b32      	ldr	r3, [pc, #200]	@ (800e3f4 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800e32c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800e330:	429a      	cmp	r2, r3
 800e332:	db03      	blt.n	800e33c <_ZN8LoadCell21CalculateRealFlowDataEf+0xa0>
 800e334:	4b2f      	ldr	r3, [pc, #188]	@ (800e3f4 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800e336:	2200      	movs	r2, #0
 800e338:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
 800e33c:	4b2d      	ldr	r3, [pc, #180]	@ (800e3f4 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800e33e:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800e342:	461a      	mov	r2, r3
 800e344:	4b2b      	ldr	r3, [pc, #172]	@ (800e3f4 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800e346:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	ed97 0a06 	vldr	s0, [r7, #24]
 800e350:	4613      	mov	r3, r2
 800e352:	4a28      	ldr	r2, [pc, #160]	@ (800e3f4 <_ZN8LoadCell21CalculateRealFlowDataEf+0x158>)
 800e354:	4929      	ldr	r1, [pc, #164]	@ (800e3fc <_ZN8LoadCell21CalculateRealFlowDataEf+0x160>)
 800e356:	482a      	ldr	r0, [pc, #168]	@ (800e400 <_ZN8LoadCell21CalculateRealFlowDataEf+0x164>)
 800e358:	f7fd fea0 	bl	800c09c <_ZN6Filter14MoovingAverageEPfS0_mmf>
 800e35c:	ed87 0a05 	vstr	s0, [r7, #20]
 800e360:	4b25      	ldr	r3, [pc, #148]	@ (800e3f8 <_ZN8LoadCell21CalculateRealFlowDataEf+0x15c>)
 800e362:	ed93 7a08 	vldr	s14, [r3, #32]
 800e366:	edd7 6a05 	vldr	s13, [r7, #20]
 800e36a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e36e:	edc7 7a03 	vstr	s15, [r7, #12]
 800e372:	edd7 7a03 	vldr	s15, [r7, #12]
 800e376:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800e37a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e382:	dd02      	ble.n	800e38a <_ZN8LoadCell21CalculateRealFlowDataEf+0xee>
 800e384:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e388:	e001      	b.n	800e38e <_ZN8LoadCell21CalculateRealFlowDataEf+0xf2>
 800e38a:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800e404 <_ZN8LoadCell21CalculateRealFlowDataEf+0x168>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e394:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800e398:	eeb0 1a47 	vmov.f32	s2, s14
 800e39c:	edd7 0a03 	vldr	s1, [r7, #12]
 800e3a0:	eeb0 0a67 	vmov.f32	s0, s15
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 f917 	bl	800e5d8 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>
 800e3aa:	ed87 0a07 	vstr	s0, [r7, #28]
 800e3ae:	edd7 7a07 	vldr	s15, [r7, #28]
 800e3b2:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e3b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3be:	d502      	bpl.n	800e3c6 <_ZN8LoadCell21CalculateRealFlowDataEf+0x12a>
 800e3c0:	f04f 0300 	mov.w	r3, #0
 800e3c4:	61fb      	str	r3, [r7, #28]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	69fb      	ldr	r3, [r7, #28]
 800e3d0:	6253      	str	r3, [r2, #36]	@ 0x24
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3da:	4a05      	ldr	r2, [pc, #20]	@ (800e3f0 <_ZN8LoadCell21CalculateRealFlowDataEf+0x154>)
 800e3dc:	61d3      	str	r3, [r2, #28]
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	ee07 3a90 	vmov	s15, r3
 800e3e4:	eeb0 0a67 	vmov.f32	s0, s15
 800e3e8:	3720      	adds	r7, #32
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	20009328 	.word	0x20009328
 800e3f4:	20004f4c 	.word	0x20004f4c
 800e3f8:	200092ac 	.word	0x200092ac
 800e3fc:	20004f50 	.word	0x20004f50
 800e400:	20004eec 	.word	0x20004eec
 800e404:	3f59999a 	.word	0x3f59999a

0800e408 <_ZN8LoadCell11ReadFromSPIEhi>:
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	460b      	mov	r3, r1
 800e412:	607a      	str	r2, [r7, #4]
 800e414:	72fb      	strb	r3, [r7, #11]
 800e416:	2200      	movs	r2, #0
 800e418:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e41c:	481f      	ldr	r0, [pc, #124]	@ (800e49c <_ZN8LoadCell11ReadFromSPIEhi+0x94>)
 800e41e:	f7f4 fe37 	bl	8003090 <HAL_GPIO_WritePin>
 800e422:	f107 010b 	add.w	r1, r7, #11
 800e426:	2364      	movs	r3, #100	@ 0x64
 800e428:	2201      	movs	r2, #1
 800e42a:	481d      	ldr	r0, [pc, #116]	@ (800e4a0 <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800e42c:	f7f5 fb2b 	bl	8003a86 <HAL_SPI_Transmit>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b03      	cmp	r3, #3
 800e434:	d01d      	beq.n	800e472 <_ZN8LoadCell11ReadFromSPIEhi+0x6a>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2b03      	cmp	r3, #3
 800e43a:	dc24      	bgt.n	800e486 <_ZN8LoadCell11ReadFromSPIEhi+0x7e>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d003      	beq.n	800e44a <_ZN8LoadCell11ReadFromSPIEhi+0x42>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b02      	cmp	r3, #2
 800e446:	d00a      	beq.n	800e45e <_ZN8LoadCell11ReadFromSPIEhi+0x56>
 800e448:	e01d      	b.n	800e486 <_ZN8LoadCell11ReadFromSPIEhi+0x7e>
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f503 5100 	add.w	r1, r3, #8192	@ 0x2000
 800e450:	3134      	adds	r1, #52	@ 0x34
 800e452:	2364      	movs	r3, #100	@ 0x64
 800e454:	2201      	movs	r2, #1
 800e456:	4812      	ldr	r0, [pc, #72]	@ (800e4a0 <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800e458:	f7f5 fc59 	bl	8003d0e <HAL_SPI_Receive>
 800e45c:	e014      	b.n	800e488 <_ZN8LoadCell11ReadFromSPIEhi+0x80>
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f503 5100 	add.w	r1, r3, #8192	@ 0x2000
 800e464:	3135      	adds	r1, #53	@ 0x35
 800e466:	2364      	movs	r3, #100	@ 0x64
 800e468:	2201      	movs	r2, #1
 800e46a:	480d      	ldr	r0, [pc, #52]	@ (800e4a0 <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800e46c:	f7f5 fc4f 	bl	8003d0e <HAL_SPI_Receive>
 800e470:	e00a      	b.n	800e488 <_ZN8LoadCell11ReadFromSPIEhi+0x80>
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f503 5100 	add.w	r1, r3, #8192	@ 0x2000
 800e478:	3136      	adds	r1, #54	@ 0x36
 800e47a:	2364      	movs	r3, #100	@ 0x64
 800e47c:	2201      	movs	r2, #1
 800e47e:	4808      	ldr	r0, [pc, #32]	@ (800e4a0 <_ZN8LoadCell11ReadFromSPIEhi+0x98>)
 800e480:	f7f5 fc45 	bl	8003d0e <HAL_SPI_Receive>
 800e484:	e000      	b.n	800e488 <_ZN8LoadCell11ReadFromSPIEhi+0x80>
 800e486:	bf00      	nop
 800e488:	2201      	movs	r2, #1
 800e48a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e48e:	4803      	ldr	r0, [pc, #12]	@ (800e49c <_ZN8LoadCell11ReadFromSPIEhi+0x94>)
 800e490:	f7f4 fdfe 	bl	8003090 <HAL_GPIO_WritePin>
 800e494:	bf00      	nop
 800e496:	3710      	adds	r7, #16
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	40020000 	.word	0x40020000
 800e4a0:	20000180 	.word	0x20000180

0800e4a4 <_ZN8LoadCell11ClearParamsEv>:
 800e4a4:	b480      	push	{r7}
 800e4a6:	b085      	sub	sp, #20
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e4b8:	6313      	str	r3, [r2, #48]	@ 0x30
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	f04f 0300 	mov.w	r3, #0
 800e4d2:	6113      	str	r3, [r2, #16]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4da:	461a      	mov	r2, r3
 800e4dc:	f04f 0300 	mov.w	r3, #0
 800e4e0:	60d3      	str	r3, [r2, #12]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	f04f 0300 	mov.w	r3, #0
 800e4ee:	6293      	str	r3, [r2, #40]	@ 0x28
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	f04f 0300 	mov.w	r3, #0
 800e4fc:	6253      	str	r3, [r2, #36]	@ 0x24
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e504:	461a      	mov	r2, r3
 800e506:	f04f 0300 	mov.w	r3, #0
 800e50a:	6213      	str	r3, [r2, #32]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e512:	461a      	mov	r2, r3
 800e514:	f04f 0300 	mov.w	r3, #0
 800e518:	61d3      	str	r3, [r2, #28]
 800e51a:	2300      	movs	r3, #0
 800e51c:	60fb      	str	r3, [r7, #12]
 800e51e:	e009      	b.n	800e534 <_ZN8LoadCell11ClearParamsEv+0x90>
 800e520:	4a14      	ldr	r2, [pc, #80]	@ (800e574 <_ZN8LoadCell11ClearParamsEv+0xd0>)
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	4413      	add	r3, r2
 800e528:	f04f 0200 	mov.w	r2, #0
 800e52c:	601a      	str	r2, [r3, #0]
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	3301      	adds	r3, #1
 800e532:	60fb      	str	r3, [r7, #12]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2b0a      	cmp	r3, #10
 800e538:	ddf2      	ble.n	800e520 <_ZN8LoadCell11ClearParamsEv+0x7c>
 800e53a:	2300      	movs	r3, #0
 800e53c:	60bb      	str	r3, [r7, #8]
 800e53e:	e009      	b.n	800e554 <_ZN8LoadCell11ClearParamsEv+0xb0>
 800e540:	4a0d      	ldr	r2, [pc, #52]	@ (800e578 <_ZN8LoadCell11ClearParamsEv+0xd4>)
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	4413      	add	r3, r2
 800e548:	f04f 0200 	mov.w	r2, #0
 800e54c:	601a      	str	r2, [r3, #0]
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	3301      	adds	r3, #1
 800e552:	60bb      	str	r3, [r7, #8]
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	2b04      	cmp	r3, #4
 800e558:	ddf2      	ble.n	800e540 <_ZN8LoadCell11ClearParamsEv+0x9c>
 800e55a:	4b08      	ldr	r3, [pc, #32]	@ (800e57c <_ZN8LoadCell11ClearParamsEv+0xd8>)
 800e55c:	2200      	movs	r2, #0
 800e55e:	701a      	strb	r2, [r3, #0]
 800e560:	4b07      	ldr	r3, [pc, #28]	@ (800e580 <_ZN8LoadCell11ClearParamsEv+0xdc>)
 800e562:	2200      	movs	r2, #0
 800e564:	701a      	strb	r2, [r3, #0]
 800e566:	bf00      	nop
 800e568:	3714      	adds	r7, #20
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr
 800e572:	bf00      	nop
 800e574:	20000010 	.word	0x20000010
 800e578:	2000003c 	.word	0x2000003c
 800e57c:	20004ee8 	.word	0x20004ee8
 800e580:	20004ee9 	.word	0x20004ee9

0800e584 <_ZN8LoadCell10WriteToSPIEtt>:
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	460b      	mov	r3, r1
 800e58e:	807b      	strh	r3, [r7, #2]
 800e590:	4613      	mov	r3, r2
 800e592:	803b      	strh	r3, [r7, #0]
 800e594:	887b      	ldrh	r3, [r7, #2]
 800e596:	b2db      	uxtb	r3, r3
 800e598:	733b      	strb	r3, [r7, #12]
 800e59a:	883b      	ldrh	r3, [r7, #0]
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	737b      	strb	r3, [r7, #13]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e5a6:	480a      	ldr	r0, [pc, #40]	@ (800e5d0 <_ZN8LoadCell10WriteToSPIEtt+0x4c>)
 800e5a8:	f7f4 fd72 	bl	8003090 <HAL_GPIO_WritePin>
 800e5ac:	f107 010c 	add.w	r1, r7, #12
 800e5b0:	2364      	movs	r3, #100	@ 0x64
 800e5b2:	2202      	movs	r2, #2
 800e5b4:	4807      	ldr	r0, [pc, #28]	@ (800e5d4 <_ZN8LoadCell10WriteToSPIEtt+0x50>)
 800e5b6:	f7f5 fa66 	bl	8003a86 <HAL_SPI_Transmit>
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e5c0:	4803      	ldr	r0, [pc, #12]	@ (800e5d0 <_ZN8LoadCell10WriteToSPIEtt+0x4c>)
 800e5c2:	f7f4 fd65 	bl	8003090 <HAL_GPIO_WritePin>
 800e5c6:	bf00      	nop
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	40020000 	.word	0x40020000
 800e5d4:	20000180 	.word	0x20000180

0800e5d8 <_ZN8LoadCell26ExponantialSmoothingFilterEfff>:
 800e5d8:	b480      	push	{r7}
 800e5da:	b087      	sub	sp, #28
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	ed87 0a02 	vstr	s0, [r7, #8]
 800e5e4:	edc7 0a01 	vstr	s1, [r7, #4]
 800e5e8:	ed87 1a00 	vstr	s2, [r7]
 800e5ec:	ed97 7a02 	vldr	s14, [r7, #8]
 800e5f0:	edd7 7a01 	vldr	s15, [r7, #4]
 800e5f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5fc:	edd7 7a02 	vldr	s15, [r7, #8]
 800e600:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e604:	edd7 7a00 	vldr	s15, [r7]
 800e608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e60c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e610:	edc7 7a05 	vstr	s15, [r7, #20]
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	ee07 3a90 	vmov	s15, r3
 800e61a:	eeb0 0a67 	vmov.f32	s0, s15
 800e61e:	371c      	adds	r7, #28
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <_ZN8LoadCell12ClearSamplesEv>:
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	2300      	movs	r3, #0
 800e632:	60fb      	str	r3, [r7, #12]
 800e634:	e008      	b.n	800e648 <_ZN8LoadCell12ClearSamplesEv+0x20>
 800e636:	4a13      	ldr	r2, [pc, #76]	@ (800e684 <_ZN8LoadCell12ClearSamplesEv+0x5c>)
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	4413      	add	r3, r2
 800e63e:	4a12      	ldr	r2, [pc, #72]	@ (800e688 <_ZN8LoadCell12ClearSamplesEv+0x60>)
 800e640:	601a      	str	r2, [r3, #0]
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	3301      	adds	r3, #1
 800e646:	60fb      	str	r3, [r7, #12]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2b04      	cmp	r3, #4
 800e64c:	ddf3      	ble.n	800e636 <_ZN8LoadCell12ClearSamplesEv+0xe>
 800e64e:	2300      	movs	r3, #0
 800e650:	60bb      	str	r3, [r7, #8]
 800e652:	e008      	b.n	800e666 <_ZN8LoadCell12ClearSamplesEv+0x3e>
 800e654:	4a0d      	ldr	r2, [pc, #52]	@ (800e68c <_ZN8LoadCell12ClearSamplesEv+0x64>)
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4413      	add	r3, r2
 800e65c:	4a0a      	ldr	r2, [pc, #40]	@ (800e688 <_ZN8LoadCell12ClearSamplesEv+0x60>)
 800e65e:	601a      	str	r2, [r3, #0]
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	3301      	adds	r3, #1
 800e664:	60bb      	str	r3, [r7, #8]
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	2b0a      	cmp	r3, #10
 800e66a:	ddf3      	ble.n	800e654 <_ZN8LoadCell12ClearSamplesEv+0x2c>
 800e66c:	4b08      	ldr	r3, [pc, #32]	@ (800e690 <_ZN8LoadCell12ClearSamplesEv+0x68>)
 800e66e:	2200      	movs	r2, #0
 800e670:	701a      	strb	r2, [r3, #0]
 800e672:	4b08      	ldr	r3, [pc, #32]	@ (800e694 <_ZN8LoadCell12ClearSamplesEv+0x6c>)
 800e674:	2200      	movs	r2, #0
 800e676:	701a      	strb	r2, [r3, #0]
 800e678:	bf00      	nop
 800e67a:	3714      	adds	r7, #20
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr
 800e684:	2000003c 	.word	0x2000003c
 800e688:	bf800000 	.word	0xbf800000
 800e68c:	20000010 	.word	0x20000010
 800e690:	20004ee9 	.word	0x20004ee9
 800e694:	20004ee8 	.word	0x20004ee8

0800e698 <_Z41__static_initialization_and_destruction_0v>:
 800e698:	b580      	push	{r7, lr}
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	4805      	ldr	r0, [pc, #20]	@ (800e6b4 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 800e69e:	f7fd fccd 	bl	800c03c <_ZN6FilterC1Ev>
 800e6a2:	4805      	ldr	r0, [pc, #20]	@ (800e6b8 <_Z41__static_initialization_and_destruction_0v+0x20>)
 800e6a4:	f7ff f9ba 	bl	800da1c <_ZN18VolumeFilterStructC1Ev>
 800e6a8:	4804      	ldr	r0, [pc, #16]	@ (800e6bc <_Z41__static_initialization_and_destruction_0v+0x24>)
 800e6aa:	f7ff f9c6 	bl	800da3a <_ZN16FlowFilterStructC1Ev>
 800e6ae:	bf00      	nop
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	20004eec 	.word	0x20004eec
 800e6b8:	20004ef0 	.word	0x20004ef0
 800e6bc:	20004f4c 	.word	0x20004f4c

0800e6c0 <_Z41__static_initialization_and_destruction_1v>:
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	af00      	add	r7, sp, #0
 800e6c4:	4802      	ldr	r0, [pc, #8]	@ (800e6d0 <_Z41__static_initialization_and_destruction_1v+0x10>)
 800e6c6:	f7fd fcc9 	bl	800c05c <_ZN6FilterD1Ev>
 800e6ca:	bf00      	nop
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	20004eec 	.word	0x20004eec

0800e6d4 <_GLOBAL__sub_I_VolumeSamples>:
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	f7ff ffde 	bl	800e698 <_Z41__static_initialization_and_destruction_0v>
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <_GLOBAL__sub_D_VolumeSamples>:
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	f7ff ffed 	bl	800e6c0 <_Z41__static_initialization_and_destruction_1v>
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <_ZN18SystemConfigStructC1Ev>:
 800e6e8:	b480      	push	{r7}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2214      	movs	r2, #20
 800e6f4:	701a      	strb	r2, [r3, #0]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2228      	movs	r2, #40	@ 0x28
 800e6fa:	705a      	strb	r2, [r3, #1]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2228      	movs	r2, #40	@ 0x28
 800e700:	709a      	strb	r2, [r3, #2]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	220a      	movs	r2, #10
 800e706:	70da      	strb	r2, [r3, #3]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2228      	movs	r2, #40	@ 0x28
 800e70c:	711a      	strb	r2, [r3, #4]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	221e      	movs	r2, #30
 800e712:	715a      	strb	r2, [r3, #5]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	221e      	movs	r2, #30
 800e718:	719a      	strb	r2, [r3, #6]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800e720:	811a      	strh	r2, [r3, #8]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800e728:	815a      	strh	r2, [r3, #10]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800e730:	819a      	strh	r2, [r3, #12]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800e738:	81da      	strh	r2, [r3, #14]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800e740:	821a      	strh	r2, [r3, #16]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800e748:	825a      	strh	r2, [r3, #18]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	615a      	str	r2, [r3, #20]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2200      	movs	r2, #0
 800e754:	619a      	str	r2, [r3, #24]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e75c:	61da      	str	r2, [r3, #28]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e764:	621a      	str	r2, [r3, #32]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e76c:	625a      	str	r2, [r3, #36]	@ 0x24
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e774:	629a      	str	r2, [r3, #40]	@ 0x28
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	220a      	movs	r2, #10
 800e77a:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	631a      	str	r2, [r3, #48]	@ 0x30
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2200      	movs	r2, #0
 800e796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	222c      	movs	r2, #44	@ 0x2c
 800e79e:	665a      	str	r2, [r3, #100]	@ 0x64
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2264      	movs	r2, #100	@ 0x64
 800e7ba:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2264      	movs	r2, #100	@ 0x64
 800e7c2:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2264      	movs	r2, #100	@ 0x64
 800e7ca:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <_ZN12FlashManagerC1ERKS_>:
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
 800e7fe:	4a25      	ldr	r2, [pc, #148]	@ (800e894 <_ZN12FlashManagerC1ERKS_+0xa0>)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	601a      	str	r2, [r3, #0]
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	685a      	ldr	r2, [r3, #4]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	605a      	str	r2, [r3, #4]
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	689a      	ldr	r2, [r3, #8]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	609a      	str	r2, [r3, #8]
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	7b1a      	ldrb	r2, [r3, #12]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	731a      	strb	r2, [r3, #12]
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	7b5a      	ldrb	r2, [r3, #13]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	735a      	strb	r2, [r3, #13]
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	7b9a      	ldrb	r2, [r3, #14]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	739a      	strb	r2, [r3, #14]
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	7bda      	ldrb	r2, [r3, #15]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	73da      	strb	r2, [r3, #15]
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	7c1a      	ldrb	r2, [r3, #16]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	741a      	strb	r2, [r3, #16]
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	7c5a      	ldrb	r2, [r3, #17]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	745a      	strb	r2, [r3, #17]
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	7c9a      	ldrb	r2, [r3, #18]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	749a      	strb	r2, [r3, #18]
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	7cda      	ldrb	r2, [r3, #19]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	74da      	strb	r2, [r3, #19]
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	7d1a      	ldrb	r2, [r3, #20]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	751a      	strb	r2, [r3, #20]
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	7d5a      	ldrb	r2, [r3, #21]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	755a      	strb	r2, [r3, #21]
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	7d9a      	ldrb	r2, [r3, #22]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	759a      	strb	r2, [r3, #22]
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	7dda      	ldrb	r2, [r3, #23]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	75da      	strb	r2, [r3, #23]
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	7e1a      	ldrb	r2, [r3, #24]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	761a      	strb	r2, [r3, #24]
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	7e5a      	ldrb	r2, [r3, #25]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	765a      	strb	r2, [r3, #25]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	4618      	mov	r0, r3
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop
 800e894:	08011d14 	.word	0x08011d14

0800e898 <SetupOS>:
 800e898:	b580      	push	{r7, lr}
 800e89a:	b088      	sub	sp, #32
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	480f      	ldr	r0, [pc, #60]	@ (800e8dc <SetupOS+0x44>)
 800e8a0:	f7fd f97a 	bl	800bb98 <_ZN3Emg13FirstEmgSetupEv>
 800e8a4:	480d      	ldr	r0, [pc, #52]	@ (800e8dc <SetupOS+0x44>)
 800e8a6:	f7fd f998 	bl	800bbda <_ZN3Emg14SecondEmgSetupEv>
 800e8aa:	480d      	ldr	r0, [pc, #52]	@ (800e8e0 <SetupOS+0x48>)
 800e8ac:	f7ff f905 	bl	800daba <_ZN8LoadCell5SetupEv>
 800e8b0:	f000 f93a 	bl	800eb28 <FlashInitialize>
 800e8b4:	1d3b      	adds	r3, r7, #4
 800e8b6:	490b      	ldr	r1, [pc, #44]	@ (800e8e4 <SetupOS+0x4c>)
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7ff ff9b 	bl	800e7f4 <_ZN12FlashManagerC1ERKS_>
 800e8be:	1d3b      	adds	r3, r7, #4
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	4809      	ldr	r0, [pc, #36]	@ (800e8e8 <SetupOS+0x50>)
 800e8c4:	f7fd f820 	bl	800b908 <_ZN13Communication15SetFlashManagerE12FlashManager>
 800e8c8:	1d3b      	adds	r3, r7, #4
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7fd fcce 	bl	800c26c <_ZN12FlashManagerD1Ev>
 800e8d0:	f7f7 fff0 	bl	80068b4 <osKernelInitialize>
 800e8d4:	bf00      	nop
 800e8d6:	3720      	adds	r7, #32
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}
 800e8dc:	20005004 	.word	0x20005004
 800e8e0:	20007048 	.word	0x20007048
 800e8e4:	200090a0 	.word	0x200090a0
 800e8e8:	20009080 	.word	0x20009080

0800e8ec <_Z14UpdatePriorityv>:
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	4865      	ldr	r0, [pc, #404]	@ (800ea88 <_Z14UpdatePriorityv+0x19c>)
 800e8f2:	f7f6 fb67 	bl	8004fc4 <HAL_TIM_Base_Start_IT>
 800e8f6:	4b65      	ldr	r3, [pc, #404]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e8f8:	3310      	adds	r3, #16
 800e8fa:	2224      	movs	r2, #36	@ 0x24
 800e8fc:	2100      	movs	r1, #0
 800e8fe:	4618      	mov	r0, r3
 800e900:	f002 fb83 	bl	801100a <memset>
 800e904:	4b61      	ldr	r3, [pc, #388]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e906:	4a62      	ldr	r2, [pc, #392]	@ (800ea90 <_Z14UpdatePriorityv+0x1a4>)
 800e908:	611a      	str	r2, [r3, #16]
 800e90a:	4b60      	ldr	r3, [pc, #384]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e90c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e910:	625a      	str	r2, [r3, #36]	@ 0x24
 800e912:	4b5e      	ldr	r3, [pc, #376]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e914:	2218      	movs	r2, #24
 800e916:	629a      	str	r2, [r3, #40]	@ 0x28
 800e918:	4b5c      	ldr	r3, [pc, #368]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e91a:	3334      	adds	r3, #52	@ 0x34
 800e91c:	2224      	movs	r2, #36	@ 0x24
 800e91e:	2100      	movs	r1, #0
 800e920:	4618      	mov	r0, r3
 800e922:	f002 fb72 	bl	801100a <memset>
 800e926:	4b59      	ldr	r3, [pc, #356]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e928:	4a59      	ldr	r2, [pc, #356]	@ (800ea90 <_Z14UpdatePriorityv+0x1a4>)
 800e92a:	635a      	str	r2, [r3, #52]	@ 0x34
 800e92c:	4b57      	ldr	r3, [pc, #348]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e92e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e932:	649a      	str	r2, [r3, #72]	@ 0x48
 800e934:	4b55      	ldr	r3, [pc, #340]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e936:	2218      	movs	r2, #24
 800e938:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e93a:	4b54      	ldr	r3, [pc, #336]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e93c:	33b0      	adds	r3, #176	@ 0xb0
 800e93e:	2224      	movs	r2, #36	@ 0x24
 800e940:	2100      	movs	r1, #0
 800e942:	4618      	mov	r0, r3
 800e944:	f002 fb61 	bl	801100a <memset>
 800e948:	4b50      	ldr	r3, [pc, #320]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e94a:	4a51      	ldr	r2, [pc, #324]	@ (800ea90 <_Z14UpdatePriorityv+0x1a4>)
 800e94c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800e950:	4b4e      	ldr	r3, [pc, #312]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e956:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 800e95a:	4b4c      	ldr	r3, [pc, #304]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e95c:	2218      	movs	r2, #24
 800e95e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 800e962:	4b4a      	ldr	r3, [pc, #296]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e964:	338c      	adds	r3, #140	@ 0x8c
 800e966:	2224      	movs	r2, #36	@ 0x24
 800e968:	2100      	movs	r1, #0
 800e96a:	4618      	mov	r0, r3
 800e96c:	f002 fb4d 	bl	801100a <memset>
 800e970:	4b46      	ldr	r3, [pc, #280]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e972:	4a47      	ldr	r2, [pc, #284]	@ (800ea90 <_Z14UpdatePriorityv+0x1a4>)
 800e974:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800e978:	4b44      	ldr	r3, [pc, #272]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e97a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e97e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800e982:	4b42      	ldr	r3, [pc, #264]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e984:	2218      	movs	r2, #24
 800e986:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800e98a:	4b40      	ldr	r3, [pc, #256]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e98c:	33d4      	adds	r3, #212	@ 0xd4
 800e98e:	2224      	movs	r2, #36	@ 0x24
 800e990:	2100      	movs	r1, #0
 800e992:	4618      	mov	r0, r3
 800e994:	f002 fb39 	bl	801100a <memset>
 800e998:	4b3c      	ldr	r3, [pc, #240]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e99a:	4a3d      	ldr	r2, [pc, #244]	@ (800ea90 <_Z14UpdatePriorityv+0x1a4>)
 800e99c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800e9a0:	4b3a      	ldr	r3, [pc, #232]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e9a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9a6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800e9aa:	4b38      	ldr	r3, [pc, #224]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e9ac:	2218      	movs	r2, #24
 800e9ae:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800e9b2:	4b36      	ldr	r3, [pc, #216]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e9b4:	33f8      	adds	r3, #248	@ 0xf8
 800e9b6:	2224      	movs	r2, #36	@ 0x24
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f002 fb25 	bl	801100a <memset>
 800e9c0:	4b32      	ldr	r3, [pc, #200]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e9c2:	4a33      	ldr	r2, [pc, #204]	@ (800ea90 <_Z14UpdatePriorityv+0x1a4>)
 800e9c4:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 800e9c8:	4b30      	ldr	r3, [pc, #192]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e9ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9ce:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800e9d2:	4b2e      	ldr	r3, [pc, #184]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e9d4:	2218      	movs	r2, #24
 800e9d6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 800e9da:	4b2c      	ldr	r3, [pc, #176]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e9dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e9e0:	2224      	movs	r2, #36	@ 0x24
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f002 fb10 	bl	801100a <memset>
 800e9ea:	4b28      	ldr	r3, [pc, #160]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e9ec:	4a28      	ldr	r2, [pc, #160]	@ (800ea90 <_Z14UpdatePriorityv+0x1a4>)
 800e9ee:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 800e9f2:	4b26      	ldr	r3, [pc, #152]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e9f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9f8:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 800e9fc:	4b23      	ldr	r3, [pc, #140]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800e9fe:	2218      	movs	r2, #24
 800ea00:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 800ea04:	4b21      	ldr	r3, [pc, #132]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800ea06:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800ea0a:	2224      	movs	r2, #36	@ 0x24
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f002 fafb 	bl	801100a <memset>
 800ea14:	4b1d      	ldr	r3, [pc, #116]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800ea16:	4a1e      	ldr	r2, [pc, #120]	@ (800ea90 <_Z14UpdatePriorityv+0x1a4>)
 800ea18:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800ea1c:	4b1b      	ldr	r3, [pc, #108]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800ea1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea22:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 800ea26:	4b19      	ldr	r3, [pc, #100]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800ea28:	2218      	movs	r2, #24
 800ea2a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 800ea2e:	4b17      	ldr	r3, [pc, #92]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800ea30:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800ea34:	2224      	movs	r2, #36	@ 0x24
 800ea36:	2100      	movs	r1, #0
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f002 fae6 	bl	801100a <memset>
 800ea3e:	4b13      	ldr	r3, [pc, #76]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800ea40:	4a13      	ldr	r2, [pc, #76]	@ (800ea90 <_Z14UpdatePriorityv+0x1a4>)
 800ea42:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 800ea46:	4b11      	ldr	r3, [pc, #68]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800ea48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea4c:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 800ea50:	4b0e      	ldr	r3, [pc, #56]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800ea52:	2218      	movs	r2, #24
 800ea54:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
 800ea58:	4b0c      	ldr	r3, [pc, #48]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800ea5a:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800ea5e:	2224      	movs	r2, #36	@ 0x24
 800ea60:	2100      	movs	r1, #0
 800ea62:	4618      	mov	r0, r3
 800ea64:	f002 fad1 	bl	801100a <memset>
 800ea68:	4b08      	ldr	r3, [pc, #32]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800ea6a:	4a09      	ldr	r2, [pc, #36]	@ (800ea90 <_Z14UpdatePriorityv+0x1a4>)
 800ea6c:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 800ea70:	4b06      	ldr	r3, [pc, #24]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800ea72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea76:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
 800ea7a:	4b04      	ldr	r3, [pc, #16]	@ (800ea8c <_Z14UpdatePriorityv+0x1a0>)
 800ea7c:	2218      	movs	r2, #24
 800ea7e:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
 800ea82:	bf00      	nop
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop
 800ea88:	20000418 	.word	0x20000418
 800ea8c:	200090bc 	.word	0x200090bc
 800ea90:	08011c1c 	.word	0x08011c1c

0800ea94 <StartOS>:
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	f7ff ff27 	bl	800e8ec <_Z14UpdatePriorityv>
 800ea9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800eaa2:	f7f3 f92f 	bl	8001d04 <HAL_Delay>
 800eaa6:	f001 ff5d 	bl	8010964 <HasCalibration>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	713b      	strb	r3, [r7, #4]
 800eaae:	2001      	movs	r0, #1
 800eab0:	f001 ff78 	bl	80109a4 <HasLoadcell>
 800eab4:	4603      	mov	r3, r0
 800eab6:	717b      	strb	r3, [r7, #5]
 800eab8:	2001      	movs	r0, #1
 800eaba:	f001 ff9b 	bl	80109f4 <HasFirstEmg>
 800eabe:	4603      	mov	r3, r0
 800eac0:	71bb      	strb	r3, [r7, #6]
 800eac2:	2001      	movs	r0, #1
 800eac4:	f001 ffb6 	bl	8010a34 <HasSecondEmg>
 800eac8:	4603      	mov	r3, r0
 800eaca:	71fb      	strb	r3, [r7, #7]
 800eacc:	1d3a      	adds	r2, r7, #4
 800eace:	2304      	movs	r3, #4
 800ead0:	21ff      	movs	r1, #255	@ 0xff
 800ead2:	2000      	movs	r0, #0
 800ead4:	f000 f948 	bl	800ed68 <SuccessDataResult>
 800ead8:	2200      	movs	r2, #0
 800eada:	2100      	movs	r1, #0
 800eadc:	2000      	movs	r0, #0
 800eade:	f000 f919 	bl	800ed14 <SendFeedback>
 800eae2:	4a08      	ldr	r2, [pc, #32]	@ (800eb04 <StartOS+0x70>)
 800eae4:	2100      	movs	r1, #0
 800eae6:	4808      	ldr	r0, [pc, #32]	@ (800eb08 <StartOS+0x74>)
 800eae8:	f7f7 ff2e 	bl	8006948 <osThreadNew>
 800eaec:	4603      	mov	r3, r0
 800eaee:	4a07      	ldr	r2, [pc, #28]	@ (800eb0c <StartOS+0x78>)
 800eaf0:	6053      	str	r3, [r2, #4]
 800eaf2:	f7f7 ff03 	bl	80068fc <osKernelStart>
 800eaf6:	f7f3 fa44 	bl	8001f82 <HAL_NVIC_SystemReset>
 800eafa:	bf00      	nop
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	08011d50 	.word	0x08011d50
 800eb08:	0800ee9d 	.word	0x0800ee9d
 800eb0c:	200090bc 	.word	0x200090bc

0800eb10 <HardReset>:
 800eb10:	b580      	push	{r7, lr}
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	2101      	movs	r1, #1
 800eb16:	4803      	ldr	r0, [pc, #12]	@ (800eb24 <HardReset+0x14>)
 800eb18:	f7fd fbe4 	bl	800c2e4 <_ZN12FlashManager9HardResetEb>
 800eb1c:	f7f3 fa31 	bl	8001f82 <HAL_NVIC_SystemReset>
 800eb20:	bf00      	nop
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	200090a0 	.word	0x200090a0

0800eb28 <FlashInitialize>:
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	4877      	ldr	r0, [pc, #476]	@ (800ed0c <FlashInitialize+0x1e4>)
 800eb2e:	f7fd fce7 	bl	800c500 <_ZN12FlashManager7IsSetupEv>
 800eb32:	4603      	mov	r3, r0
 800eb34:	f083 0301 	eor.w	r3, r3, #1
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d065      	beq.n	800ec0a <FlashInitialize+0xe2>
 800eb3e:	4b74      	ldr	r3, [pc, #464]	@ (800ed10 <FlashInitialize+0x1e8>)
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	4619      	mov	r1, r3
 800eb44:	4871      	ldr	r0, [pc, #452]	@ (800ed0c <FlashInitialize+0x1e4>)
 800eb46:	f7fd fd35 	bl	800c5b4 <_ZN12FlashManager18WriteSendPerSecondEh>
 800eb4a:	4b71      	ldr	r3, [pc, #452]	@ (800ed10 <FlashInitialize+0x1e8>)
 800eb4c:	785b      	ldrb	r3, [r3, #1]
 800eb4e:	4619      	mov	r1, r3
 800eb50:	486e      	ldr	r0, [pc, #440]	@ (800ed0c <FlashInitialize+0x1e4>)
 800eb52:	f7fd fdcb 	bl	800c6ec <_ZN12FlashManager22WriteFirstEmgPerSecondEh>
 800eb56:	4b6e      	ldr	r3, [pc, #440]	@ (800ed10 <FlashInitialize+0x1e8>)
 800eb58:	789b      	ldrb	r3, [r3, #2]
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	486b      	ldr	r0, [pc, #428]	@ (800ed0c <FlashInitialize+0x1e4>)
 800eb5e:	f7fd fe61 	bl	800c824 <_ZN12FlashManager23WriteSecondEmgPerSecondEh>
 800eb62:	4b6b      	ldr	r3, [pc, #428]	@ (800ed10 <FlashInitialize+0x1e8>)
 800eb64:	78db      	ldrb	r3, [r3, #3]
 800eb66:	4619      	mov	r1, r3
 800eb68:	4868      	ldr	r0, [pc, #416]	@ (800ed0c <FlashInitialize+0x1e4>)
 800eb6a:	f7fd fef7 	bl	800c95c <_ZN12FlashManager20WriteVolumePerSecondEh>
 800eb6e:	4b68      	ldr	r3, [pc, #416]	@ (800ed10 <FlashInitialize+0x1e8>)
 800eb70:	791b      	ldrb	r3, [r3, #4]
 800eb72:	4619      	mov	r1, r3
 800eb74:	4865      	ldr	r0, [pc, #404]	@ (800ed0c <FlashInitialize+0x1e4>)
 800eb76:	f7fd ff8d 	bl	800ca94 <_ZN12FlashManager18WriteFlowPerSecondEh>
 800eb7a:	4b65      	ldr	r3, [pc, #404]	@ (800ed10 <FlashInitialize+0x1e8>)
 800eb7c:	795b      	ldrb	r3, [r3, #5]
 800eb7e:	4619      	mov	r1, r3
 800eb80:	4862      	ldr	r0, [pc, #392]	@ (800ed0c <FlashInitialize+0x1e4>)
 800eb82:	f7fe f823 	bl	800cbcc <_ZN12FlashManager19WritePumpMaxRunTimeEh>
 800eb86:	4b62      	ldr	r3, [pc, #392]	@ (800ed10 <FlashInitialize+0x1e8>)
 800eb88:	799b      	ldrb	r3, [r3, #6]
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	485f      	ldr	r0, [pc, #380]	@ (800ed0c <FlashInitialize+0x1e4>)
 800eb8e:	f7fe f8b9 	bl	800cd04 <_ZN12FlashManager20WriteValveMaxRunTimeEh>
 800eb92:	4b5f      	ldr	r3, [pc, #380]	@ (800ed10 <FlashInitialize+0x1e8>)
 800eb94:	6a1b      	ldr	r3, [r3, #32]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7f1 fcce 	bl	8000538 <__aeabi_f2d>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	460b      	mov	r3, r1
 800eba0:	ec43 2b10 	vmov	d0, r2, r3
 800eba4:	4859      	ldr	r0, [pc, #356]	@ (800ed0c <FlashInitialize+0x1e4>)
 800eba6:	f7fe f949 	bl	800ce3c <_ZN12FlashManager13WriteFlowRateEd>
 800ebaa:	4b59      	ldr	r3, [pc, #356]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ebac:	69db      	ldr	r3, [r3, #28]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7f1 fcc2 	bl	8000538 <__aeabi_f2d>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	ec43 2b10 	vmov	d0, r2, r3
 800ebbc:	4853      	ldr	r0, [pc, #332]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ebbe:	f7fe f9d7 	bl	800cf70 <_ZN12FlashManager15WriteVolumeRateEd>
 800ebc2:	4b53      	ldr	r3, [pc, #332]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ebc4:	695b      	ldr	r3, [r3, #20]
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4850      	ldr	r0, [pc, #320]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ebca:	f7fe fafe 	bl	800d1ca <_ZN12FlashManager16WriteFlowAverageEm>
 800ebce:	4b50      	ldr	r3, [pc, #320]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ebd0:	699b      	ldr	r3, [r3, #24]
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	484d      	ldr	r0, [pc, #308]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ebd6:	f7fe fa65 	bl	800d0a4 <_ZN12FlashManager18WriteVolumeAverageEm>
 800ebda:	4b4d      	ldr	r3, [pc, #308]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ebdc:	8919      	ldrh	r1, [r3, #8]
 800ebde:	4b4c      	ldr	r3, [pc, #304]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ebe0:	895a      	ldrh	r2, [r3, #10]
 800ebe2:	4b4b      	ldr	r3, [pc, #300]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ebe4:	899b      	ldrh	r3, [r3, #12]
 800ebe6:	4849      	ldr	r0, [pc, #292]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ebe8:	f7fe fb82 	bl	800d2f0 <_ZN12FlashManager17WriteFirstEmgDataEttt>
 800ebec:	4b48      	ldr	r3, [pc, #288]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ebee:	89d9      	ldrh	r1, [r3, #14]
 800ebf0:	4b47      	ldr	r3, [pc, #284]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ebf2:	8a1a      	ldrh	r2, [r3, #16]
 800ebf4:	4b46      	ldr	r3, [pc, #280]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ebf6:	8a5b      	ldrh	r3, [r3, #18]
 800ebf8:	4844      	ldr	r0, [pc, #272]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ebfa:	f7fe fd34 	bl	800d666 <_ZN12FlashManager18WriteSecondEmgDataEttt>
 800ebfe:	4843      	ldr	r0, [pc, #268]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ec00:	f7fd fc36 	bl	800c470 <_ZN12FlashManager5SetupEv>
 800ec04:	4841      	ldr	r0, [pc, #260]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ec06:	f7fd fbb9 	bl	800c37c <_ZN12FlashManager6UpdateEv>
 800ec0a:	4840      	ldr	r0, [pc, #256]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ec0c:	f7fd fd1c 	bl	800c648 <_ZN12FlashManager17ReadSendPerSecondEv>
 800ec10:	4603      	mov	r3, r0
 800ec12:	461a      	mov	r2, r3
 800ec14:	4b3e      	ldr	r3, [pc, #248]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ec16:	701a      	strb	r2, [r3, #0]
 800ec18:	483c      	ldr	r0, [pc, #240]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ec1a:	f7fd fdb1 	bl	800c780 <_ZN12FlashManager21ReadFirstEmgPerSecondEv>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	461a      	mov	r2, r3
 800ec22:	4b3b      	ldr	r3, [pc, #236]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ec24:	705a      	strb	r2, [r3, #1]
 800ec26:	4839      	ldr	r0, [pc, #228]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ec28:	f7fd fe46 	bl	800c8b8 <_ZN12FlashManager22ReadSecondEmgPerSecondEv>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	461a      	mov	r2, r3
 800ec30:	4b37      	ldr	r3, [pc, #220]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ec32:	709a      	strb	r2, [r3, #2]
 800ec34:	4835      	ldr	r0, [pc, #212]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ec36:	f7fd fedb 	bl	800c9f0 <_ZN12FlashManager19ReadVolumePerSecondEv>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	4b34      	ldr	r3, [pc, #208]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ec40:	70da      	strb	r2, [r3, #3]
 800ec42:	4832      	ldr	r0, [pc, #200]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ec44:	f7fd ff70 	bl	800cb28 <_ZN12FlashManager17ReadFlowPerSecondEv>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	4b30      	ldr	r3, [pc, #192]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ec4e:	711a      	strb	r2, [r3, #4]
 800ec50:	482e      	ldr	r0, [pc, #184]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ec52:	f7fe f805 	bl	800cc60 <_ZN12FlashManager18ReadPumpMaxRunTimeEv>
 800ec56:	4603      	mov	r3, r0
 800ec58:	461a      	mov	r2, r3
 800ec5a:	4b2d      	ldr	r3, [pc, #180]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ec5c:	715a      	strb	r2, [r3, #5]
 800ec5e:	482b      	ldr	r0, [pc, #172]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ec60:	f7fe f89a 	bl	800cd98 <_ZN12FlashManager19ReadValveMaxRunTimeEv>
 800ec64:	4603      	mov	r3, r0
 800ec66:	461a      	mov	r2, r3
 800ec68:	4b29      	ldr	r3, [pc, #164]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ec6a:	719a      	strb	r2, [r3, #6]
 800ec6c:	4827      	ldr	r0, [pc, #156]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ec6e:	f7fe f927 	bl	800cec0 <_ZN12FlashManager12ReadFlowRateEv>
 800ec72:	ec53 2b10 	vmov	r2, r3, d0
 800ec76:	4610      	mov	r0, r2
 800ec78:	4619      	mov	r1, r3
 800ec7a:	f7f1 fee7 	bl	8000a4c <__aeabi_d2f>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	4a23      	ldr	r2, [pc, #140]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ec82:	6213      	str	r3, [r2, #32]
 800ec84:	4821      	ldr	r0, [pc, #132]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ec86:	f7fe f9b5 	bl	800cff4 <_ZN12FlashManager14ReadVolumeRateEv>
 800ec8a:	ec53 2b10 	vmov	r2, r3, d0
 800ec8e:	4610      	mov	r0, r2
 800ec90:	4619      	mov	r1, r3
 800ec92:	f7f1 fedb 	bl	8000a4c <__aeabi_d2f>
 800ec96:	4603      	mov	r3, r0
 800ec98:	4a1d      	ldr	r2, [pc, #116]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ec9a:	61d3      	str	r3, [r2, #28]
 800ec9c:	481b      	ldr	r0, [pc, #108]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ec9e:	f7fe fad5 	bl	800d24c <_ZN12FlashManager15ReadFlowAverageEv>
 800eca2:	4603      	mov	r3, r0
 800eca4:	4a1a      	ldr	r2, [pc, #104]	@ (800ed10 <FlashInitialize+0x1e8>)
 800eca6:	6153      	str	r3, [r2, #20]
 800eca8:	4818      	ldr	r0, [pc, #96]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ecaa:	f7fe fa3c 	bl	800d126 <_ZN12FlashManager17ReadVolumeAverageEv>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	4a17      	ldr	r2, [pc, #92]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ecb2:	6193      	str	r3, [r2, #24]
 800ecb4:	4815      	ldr	r0, [pc, #84]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ecb6:	f7fe fbd9 	bl	800d46c <_ZN12FlashManager19ReadFirstEmgMaxTrimEv>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	4b14      	ldr	r3, [pc, #80]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ecc0:	811a      	strh	r2, [r3, #8]
 800ecc2:	4812      	ldr	r0, [pc, #72]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ecc4:	f7fe fc25 	bl	800d512 <_ZN12FlashManager28ReadFirstEmgZeroPointMaxTrimEv>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	461a      	mov	r2, r3
 800eccc:	4b10      	ldr	r3, [pc, #64]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ecce:	815a      	strh	r2, [r3, #10]
 800ecd0:	480e      	ldr	r0, [pc, #56]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ecd2:	f7fe fc73 	bl	800d5bc <_ZN12FlashManager28ReadFirstEmgZeroPointMinTrimEv>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	461a      	mov	r2, r3
 800ecda:	4b0d      	ldr	r3, [pc, #52]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ecdc:	819a      	strh	r2, [r3, #12]
 800ecde:	480b      	ldr	r0, [pc, #44]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ece0:	f7fe fd7f 	bl	800d7e2 <_ZN12FlashManager20ReadSecondEmgMaxTrimEv>
 800ece4:	4603      	mov	r3, r0
 800ece6:	461a      	mov	r2, r3
 800ece8:	4b09      	ldr	r3, [pc, #36]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ecea:	81da      	strh	r2, [r3, #14]
 800ecec:	4807      	ldr	r0, [pc, #28]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ecee:	f7fe fdcb 	bl	800d888 <_ZN12FlashManager29ReadSecondEmgZeroPointMaxTrimEv>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	4b06      	ldr	r3, [pc, #24]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ecf8:	821a      	strh	r2, [r3, #16]
 800ecfa:	4804      	ldr	r0, [pc, #16]	@ (800ed0c <FlashInitialize+0x1e4>)
 800ecfc:	f7fe fe19 	bl	800d932 <_ZN12FlashManager29ReadSecondEmgZeroPointMinTrimEv>
 800ed00:	4603      	mov	r3, r0
 800ed02:	461a      	mov	r2, r3
 800ed04:	4b02      	ldr	r3, [pc, #8]	@ (800ed10 <FlashInitialize+0x1e8>)
 800ed06:	825a      	strh	r2, [r3, #18]
 800ed08:	bf00      	nop
 800ed0a:	bd80      	pop	{r7, pc}
 800ed0c:	200090a0 	.word	0x200090a0
 800ed10:	200092ac 	.word	0x200092ac

0800ed14 <SendFeedback>:
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	71fb      	strb	r3, [r7, #7]
 800ed1e:	460b      	mov	r3, r1
 800ed20:	71bb      	strb	r3, [r7, #6]
 800ed22:	4613      	mov	r3, r2
 800ed24:	717b      	strb	r3, [r7, #5]
 800ed26:	f107 0308 	add.w	r3, r7, #8
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	601a      	str	r2, [r3, #0]
 800ed2e:	809a      	strh	r2, [r3, #4]
 800ed30:	2303      	movs	r3, #3
 800ed32:	81fb      	strh	r3, [r7, #14]
 800ed34:	2304      	movs	r3, #4
 800ed36:	723b      	strb	r3, [r7, #8]
 800ed38:	89fb      	ldrh	r3, [r7, #14]
 800ed3a:	0a1b      	lsrs	r3, r3, #8
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	727b      	strb	r3, [r7, #9]
 800ed42:	89fb      	ldrh	r3, [r7, #14]
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	72bb      	strb	r3, [r7, #10]
 800ed48:	79fb      	ldrb	r3, [r7, #7]
 800ed4a:	72fb      	strb	r3, [r7, #11]
 800ed4c:	79bb      	ldrb	r3, [r7, #6]
 800ed4e:	733b      	strb	r3, [r7, #12]
 800ed50:	797b      	ldrb	r3, [r7, #5]
 800ed52:	737b      	strb	r3, [r7, #13]
 800ed54:	f107 0308 	add.w	r3, r7, #8
 800ed58:	2106      	movs	r1, #6
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 f8fa 	bl	800ef54 <WriteUart>
 800ed60:	bf00      	nop
 800ed62:	3710      	adds	r7, #16
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <SuccessDataResult>:
 800ed68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed6c:	b089      	sub	sp, #36	@ 0x24
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	60ba      	str	r2, [r7, #8]
 800ed72:	607b      	str	r3, [r7, #4]
 800ed74:	4603      	mov	r3, r0
 800ed76:	73fb      	strb	r3, [r7, #15]
 800ed78:	460b      	mov	r3, r1
 800ed7a:	73bb      	strb	r3, [r7, #14]
 800ed7c:	466b      	mov	r3, sp
 800ed7e:	461e      	mov	r6, r3
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	1d99      	adds	r1, r3, #6
 800ed84:	1e4b      	subs	r3, r1, #1
 800ed86:	61bb      	str	r3, [r7, #24]
 800ed88:	460a      	mov	r2, r1
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	4690      	mov	r8, r2
 800ed8e:	4699      	mov	r9, r3
 800ed90:	f04f 0200 	mov.w	r2, #0
 800ed94:	f04f 0300 	mov.w	r3, #0
 800ed98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ed9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800eda0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800eda4:	460a      	mov	r2, r1
 800eda6:	2300      	movs	r3, #0
 800eda8:	4614      	mov	r4, r2
 800edaa:	461d      	mov	r5, r3
 800edac:	f04f 0200 	mov.w	r2, #0
 800edb0:	f04f 0300 	mov.w	r3, #0
 800edb4:	00eb      	lsls	r3, r5, #3
 800edb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800edba:	00e2      	lsls	r2, r4, #3
 800edbc:	460b      	mov	r3, r1
 800edbe:	3307      	adds	r3, #7
 800edc0:	08db      	lsrs	r3, r3, #3
 800edc2:	00db      	lsls	r3, r3, #3
 800edc4:	ebad 0d03 	sub.w	sp, sp, r3
 800edc8:	466b      	mov	r3, sp
 800edca:	3300      	adds	r3, #0
 800edcc:	617b      	str	r3, [r7, #20]
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	3901      	subs	r1, #1
 800edd2:	2200      	movs	r2, #0
 800edd4:	701a      	strb	r2, [r3, #0]
 800edd6:	1c5a      	adds	r2, r3, #1
 800edd8:	1e4b      	subs	r3, r1, #1
 800edda:	e003      	b.n	800ede4 <SuccessDataResult+0x7c>
 800eddc:	2100      	movs	r1, #0
 800edde:	7011      	strb	r1, [r2, #0]
 800ede0:	3b01      	subs	r3, #1
 800ede2:	3201      	adds	r2, #1
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	daf9      	bge.n	800eddc <SuccessDataResult+0x74>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	b29b      	uxth	r3, r3
 800edec:	3303      	adds	r3, #3
 800edee:	827b      	strh	r3, [r7, #18]
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	2202      	movs	r2, #2
 800edf4:	701a      	strb	r2, [r3, #0]
 800edf6:	8a7b      	ldrh	r3, [r7, #18]
 800edf8:	0a1b      	lsrs	r3, r3, #8
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	b2da      	uxtb	r2, r3
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	705a      	strb	r2, [r3, #1]
 800ee02:	8a7b      	ldrh	r3, [r7, #18]
 800ee04:	b2da      	uxtb	r2, r3
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	709a      	strb	r2, [r3, #2]
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	70da      	strb	r2, [r3, #3]
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	7bfa      	ldrb	r2, [r7, #15]
 800ee14:	711a      	strb	r2, [r3, #4]
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	7bba      	ldrb	r2, [r7, #14]
 800ee1a:	715a      	strb	r2, [r3, #5]
 800ee1c:	2306      	movs	r3, #6
 800ee1e:	61fb      	str	r3, [r7, #28]
 800ee20:	e00c      	b.n	800ee3c <SuccessDataResult+0xd4>
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	3b06      	subs	r3, #6
 800ee26:	68ba      	ldr	r2, [r7, #8]
 800ee28:	4413      	add	r3, r2
 800ee2a:	7819      	ldrb	r1, [r3, #0]
 800ee2c:	697a      	ldr	r2, [r7, #20]
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	4413      	add	r3, r2
 800ee32:	460a      	mov	r2, r1
 800ee34:	701a      	strb	r2, [r3, #0]
 800ee36:	69fb      	ldr	r3, [r7, #28]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	61fb      	str	r3, [r7, #28]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	3305      	adds	r3, #5
 800ee40:	69fa      	ldr	r2, [r7, #28]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	dded      	ble.n	800ee22 <SuccessDataResult+0xba>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	3306      	adds	r3, #6
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	6978      	ldr	r0, [r7, #20]
 800ee4e:	f000 f881 	bl	800ef54 <WriteUart>
 800ee52:	46b5      	mov	sp, r6
 800ee54:	bf00      	nop
 800ee56:	3724      	adds	r7, #36	@ 0x24
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ee5e <ErrorResult>:
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b084      	sub	sp, #16
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	4603      	mov	r3, r0
 800ee66:	460a      	mov	r2, r1
 800ee68:	71fb      	strb	r3, [r7, #7]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	80bb      	strh	r3, [r7, #4]
 800ee6e:	2300      	movs	r3, #0
 800ee70:	733b      	strb	r3, [r7, #12]
 800ee72:	79fb      	ldrb	r3, [r7, #7]
 800ee74:	737b      	strb	r3, [r7, #13]
 800ee76:	88bb      	ldrh	r3, [r7, #4]
 800ee78:	0a1b      	lsrs	r3, r3, #8
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	73bb      	strb	r3, [r7, #14]
 800ee80:	88bb      	ldrh	r3, [r7, #4]
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	73fb      	strb	r3, [r7, #15]
 800ee86:	f107 030c 	add.w	r3, r7, #12
 800ee8a:	2104      	movs	r1, #4
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f000 f861 	bl	800ef54 <WriteUart>
 800ee92:	bf00      	nop
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
	...

0800ee9c <StartReadUARTTask>:
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b086      	sub	sp, #24
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800eea8:	617b      	str	r3, [r7, #20]
 800eeaa:	4a24      	ldr	r2, [pc, #144]	@ (800ef3c <StartReadUARTTask+0xa0>)
 800eeac:	2101      	movs	r1, #1
 800eeae:	2001      	movs	r0, #1
 800eeb0:	f7f7 fe09 	bl	8006ac6 <osSemaphoreNew>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	4a22      	ldr	r2, [pc, #136]	@ (800ef40 <StartReadUARTTask+0xa4>)
 800eeb8:	f8c2 31e0 	str.w	r3, [r2, #480]	@ 0x1e0
 800eebc:	4a21      	ldr	r2, [pc, #132]	@ (800ef44 <StartReadUARTTask+0xa8>)
 800eebe:	2100      	movs	r1, #0
 800eec0:	4821      	ldr	r0, [pc, #132]	@ (800ef48 <StartReadUARTTask+0xac>)
 800eec2:	f7f7 fd41 	bl	8006948 <osThreadNew>
 800eec6:	4603      	mov	r3, r0
 800eec8:	4a1d      	ldr	r2, [pc, #116]	@ (800ef40 <StartReadUARTTask+0xa4>)
 800eeca:	6013      	str	r3, [r2, #0]
 800eecc:	f107 0308 	add.w	r3, r7, #8
 800eed0:	2208      	movs	r2, #8
 800eed2:	4619      	mov	r1, r3
 800eed4:	481d      	ldr	r0, [pc, #116]	@ (800ef4c <StartReadUARTTask+0xb0>)
 800eed6:	f7f6 fba2 	bl	800561e <HAL_UART_Receive_DMA>
 800eeda:	4603      	mov	r3, r0
 800eedc:	74fb      	strb	r3, [r7, #19]
 800eede:	7cfb      	ldrb	r3, [r7, #19]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d115      	bne.n	800ef10 <StartReadUARTTask+0x74>
 800eee4:	7a3b      	ldrb	r3, [r7, #8]
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d005      	beq.n	800eef6 <StartReadUARTTask+0x5a>
 800eeea:	7a3b      	ldrb	r3, [r7, #8]
 800eeec:	2b02      	cmp	r3, #2
 800eeee:	d002      	beq.n	800eef6 <StartReadUARTTask+0x5a>
 800eef0:	7a3b      	ldrb	r3, [r7, #8]
 800eef2:	2b03      	cmp	r3, #3
 800eef4:	d10c      	bne.n	800ef10 <StartReadUARTTask+0x74>
 800eef6:	7a3b      	ldrb	r3, [r7, #8]
 800eef8:	7a79      	ldrb	r1, [r7, #9]
 800eefa:	2201      	movs	r2, #1
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7ff ff09 	bl	800ed14 <SendFeedback>
 800ef02:	f107 0308 	add.w	r3, r7, #8
 800ef06:	4619      	mov	r1, r3
 800ef08:	4811      	ldr	r0, [pc, #68]	@ (800ef50 <StartReadUARTTask+0xb4>)
 800ef0a:	f7fb f951 	bl	800a1b0 <_ZN13Communication14ProcessCommandEPh>
 800ef0e:	e00f      	b.n	800ef30 <StartReadUARTTask+0x94>
 800ef10:	7cfb      	ldrb	r3, [r7, #19]
 800ef12:	2b03      	cmp	r3, #3
 800ef14:	d00c      	beq.n	800ef30 <StartReadUARTTask+0x94>
 800ef16:	7cfb      	ldrb	r3, [r7, #19]
 800ef18:	2b02      	cmp	r3, #2
 800ef1a:	d009      	beq.n	800ef30 <StartReadUARTTask+0x94>
 800ef1c:	7cfb      	ldrb	r3, [r7, #19]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d006      	beq.n	800ef30 <StartReadUARTTask+0x94>
 800ef22:	f107 0208 	add.w	r2, r7, #8
 800ef26:	2308      	movs	r3, #8
 800ef28:	21fe      	movs	r1, #254	@ 0xfe
 800ef2a:	2064      	movs	r0, #100	@ 0x64
 800ef2c:	f7ff ff1c 	bl	800ed68 <SuccessDataResult>
 800ef30:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ef34:	f7f9 fa94 	bl	8008460 <vTaskDelay>
 800ef38:	e7c8      	b.n	800eecc <StartReadUARTTask+0x30>
 800ef3a:	bf00      	nop
 800ef3c:	08011db4 	.word	0x08011db4
 800ef40:	200090bc 	.word	0x200090bc
 800ef44:	08011d2c 	.word	0x08011d2c
 800ef48:	0800efa9 	.word	0x0800efa9
 800ef4c:	20000460 	.word	0x20000460
 800ef50:	20009080 	.word	0x20009080

0800ef54 <WriteUart>:
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
 800ef5e:	2300      	movs	r3, #0
 800ef60:	73fb      	strb	r3, [r7, #15]
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	f04f 33ff 	mov.w	r3, #4294967295
 800ef6a:	6879      	ldr	r1, [r7, #4]
 800ef6c:	480d      	ldr	r0, [pc, #52]	@ (800efa4 <WriteUart+0x50>)
 800ef6e:	f7f6 facb 	bl	8005508 <HAL_UART_Transmit>
 800ef72:	4603      	mov	r3, r0
 800ef74:	73bb      	strb	r3, [r7, #14]
 800ef76:	7bbb      	ldrb	r3, [r7, #14]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d00f      	beq.n	800ef9c <WriteUart+0x48>
 800ef7c:	7bfb      	ldrb	r3, [r7, #15]
 800ef7e:	2b04      	cmp	r3, #4
 800ef80:	d80c      	bhi.n	800ef9c <WriteUart+0x48>
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	b29a      	uxth	r2, r3
 800ef86:	f04f 33ff 	mov.w	r3, #4294967295
 800ef8a:	6879      	ldr	r1, [r7, #4]
 800ef8c:	4805      	ldr	r0, [pc, #20]	@ (800efa4 <WriteUart+0x50>)
 800ef8e:	f7f6 fabb 	bl	8005508 <HAL_UART_Transmit>
 800ef92:	4603      	mov	r3, r0
 800ef94:	73bb      	strb	r3, [r7, #14]
 800ef96:	7bfb      	ldrb	r3, [r7, #15]
 800ef98:	3301      	adds	r3, #1
 800ef9a:	73fb      	strb	r3, [r7, #15]
 800ef9c:	bf00      	nop
 800ef9e:	3710      	adds	r7, #16
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	20000460 	.word	0x20000460

0800efa8 <StartSendUARTTask>:
 800efa8:	b580      	push	{r7, lr}
 800efaa:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800efae:	b086      	sub	sp, #24
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800efb6:	f843 0c54 	str.w	r0, [r3, #-84]
 800efba:	f7f9 fc03 	bl	80087c4 <xTaskGetTickCount>
 800efbe:	4603      	mov	r3, r0
 800efc0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800efc4:	f102 020c 	add.w	r2, r2, #12
 800efc8:	6013      	str	r3, [r2, #0]
 800efca:	4bb1      	ldr	r3, [pc, #708]	@ (800f290 <StartSendUARTTask+0x2e8>)
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	461a      	mov	r2, r3
 800efd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800efd4:	fb93 f3f2 	sdiv	r3, r3, r2
 800efd8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800efdc:	f102 021c 	add.w	r2, r2, #28
 800efe0:	6013      	str	r3, [r2, #0]
 800efe2:	230c      	movs	r3, #12
 800efe4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800efe8:	f102 0216 	add.w	r2, r2, #22
 800efec:	8013      	strh	r3, [r2, #0]
 800efee:	4ba9      	ldr	r3, [pc, #676]	@ (800f294 <StartSendUARTTask+0x2ec>)
 800eff0:	f8d3 21d0 	ldr.w	r2, [r3, #464]	@ 0x1d0
 800eff4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800eff8:	f103 031c 	add.w	r3, r3, #28
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	49a6      	ldr	r1, [pc, #664]	@ (800f298 <StartSendUARTTask+0x2f0>)
 800f000:	fba1 1303 	umull	r1, r3, r1, r3
 800f004:	08db      	lsrs	r3, r3, #3
 800f006:	4619      	mov	r1, r3
 800f008:	4610      	mov	r0, r2
 800f00a:	f7f7 fde5 	bl	8006bd8 <osSemaphoreAcquire>
 800f00e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f012:	f103 0318 	add.w	r3, r3, #24
 800f016:	6018      	str	r0, [r3, #0]
 800f018:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f01c:	f103 0318 	add.w	r3, r3, #24
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	f040 80b1 	bne.w	800f18a <StartSendUARTTask+0x1e2>
 800f028:	4b9c      	ldr	r3, [pc, #624]	@ (800f29c <StartSendUARTTask+0x2f4>)
 800f02a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f030:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f034:	f102 0214 	add.w	r2, r2, #20
 800f038:	6013      	str	r3, [r2, #0]
 800f03a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f03e:	f103 0314 	add.w	r3, r3, #20
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	2b00      	cmp	r3, #0
 800f046:	f340 809a 	ble.w	800f17e <StartSendUARTTask+0x1d6>
 800f04a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f04e:	f103 0316 	add.w	r3, r3, #22
 800f052:	881b      	ldrh	r3, [r3, #0]
 800f054:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f058:	4413      	add	r3, r2
 800f05a:	2201      	movs	r2, #1
 800f05c:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f060:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f064:	f103 0316 	add.w	r3, r3, #22
 800f068:	881b      	ldrh	r3, [r3, #0]
 800f06a:	3301      	adds	r3, #1
 800f06c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f070:	f102 0216 	add.w	r2, r2, #22
 800f074:	8013      	strh	r3, [r2, #0]
 800f076:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f07a:	f103 0314 	add.w	r3, r3, #20
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	121a      	asrs	r2, r3, #8
 800f082:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f086:	f103 0316 	add.w	r3, r3, #22
 800f08a:	881b      	ldrh	r3, [r3, #0]
 800f08c:	b2d2      	uxtb	r2, r2
 800f08e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f092:	440b      	add	r3, r1
 800f094:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f098:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f09c:	f103 0316 	add.w	r3, r3, #22
 800f0a0:	881b      	ldrh	r3, [r3, #0]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f0a8:	f102 0216 	add.w	r2, r2, #22
 800f0ac:	8013      	strh	r3, [r2, #0]
 800f0ae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f0b2:	f103 0316 	add.w	r3, r3, #22
 800f0b6:	881b      	ldrh	r3, [r3, #0]
 800f0b8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f0bc:	f102 0214 	add.w	r2, r2, #20
 800f0c0:	6812      	ldr	r2, [r2, #0]
 800f0c2:	b2d2      	uxtb	r2, r2
 800f0c4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f0c8:	440b      	add	r3, r1
 800f0ca:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f0ce:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f0d2:	f103 0316 	add.w	r3, r3, #22
 800f0d6:	881b      	ldrh	r3, [r3, #0]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f0de:	f102 0216 	add.w	r2, r2, #22
 800f0e2:	8013      	strh	r3, [r2, #0]
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f0ea:	f102 0210 	add.w	r2, r2, #16
 800f0ee:	6013      	str	r3, [r2, #0]
 800f0f0:	e033      	b.n	800f15a <StartSendUARTTask+0x1b2>
 800f0f2:	4a6a      	ldr	r2, [pc, #424]	@ (800f29c <StartSendUARTTask+0x2f4>)
 800f0f4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f0f8:	f103 0310 	add.w	r3, r3, #16
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	330c      	adds	r3, #12
 800f100:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f104:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f108:	f103 0316 	add.w	r3, r3, #22
 800f10c:	881b      	ldrh	r3, [r3, #0]
 800f10e:	b2d2      	uxtb	r2, r2
 800f110:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f114:	440b      	add	r3, r1
 800f116:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f11a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f11e:	f103 0316 	add.w	r3, r3, #22
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	3301      	adds	r3, #1
 800f126:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f12a:	f102 0216 	add.w	r2, r2, #22
 800f12e:	8013      	strh	r3, [r2, #0]
 800f130:	4a5a      	ldr	r2, [pc, #360]	@ (800f29c <StartSendUARTTask+0x2f4>)
 800f132:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f136:	f103 0310 	add.w	r3, r3, #16
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	330c      	adds	r3, #12
 800f13e:	2100      	movs	r1, #0
 800f140:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f144:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f148:	f103 0310 	add.w	r3, r3, #16
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	3301      	adds	r3, #1
 800f150:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f154:	f102 0210 	add.w	r2, r2, #16
 800f158:	6013      	str	r3, [r2, #0]
 800f15a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f15e:	f103 0310 	add.w	r3, r3, #16
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f168:	f103 0314 	add.w	r3, r3, #20
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	429a      	cmp	r2, r3
 800f170:	dbbf      	blt.n	800f0f2 <StartSendUARTTask+0x14a>
 800f172:	4b4a      	ldr	r3, [pc, #296]	@ (800f29c <StartSendUARTTask+0x2f4>)
 800f174:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f178:	461a      	mov	r2, r3
 800f17a:	2300      	movs	r3, #0
 800f17c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f17e:	4b45      	ldr	r3, [pc, #276]	@ (800f294 <StartSendUARTTask+0x2ec>)
 800f180:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800f184:	4618      	mov	r0, r3
 800f186:	f7f7 fd79 	bl	8006c7c <osSemaphoreRelease>
 800f18a:	4b42      	ldr	r3, [pc, #264]	@ (800f294 <StartSendUARTTask+0x2ec>)
 800f18c:	f8d3 21d4 	ldr.w	r2, [r3, #468]	@ 0x1d4
 800f190:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f194:	f103 031c 	add.w	r3, r3, #28
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	493f      	ldr	r1, [pc, #252]	@ (800f298 <StartSendUARTTask+0x2f0>)
 800f19c:	fba1 1303 	umull	r1, r3, r1, r3
 800f1a0:	08db      	lsrs	r3, r3, #3
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	4610      	mov	r0, r2
 800f1a6:	f7f7 fd17 	bl	8006bd8 <osSemaphoreAcquire>
 800f1aa:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f1ae:	f103 0310 	add.w	r3, r3, #16
 800f1b2:	6018      	str	r0, [r3, #0]
 800f1b4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f1b8:	f103 0310 	add.w	r3, r3, #16
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	f040 80bc 	bne.w	800f33c <StartSendUARTTask+0x394>
 800f1c4:	4b35      	ldr	r3, [pc, #212]	@ (800f29c <StartSendUARTTask+0x2f4>)
 800f1c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f1ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1cc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f1d0:	f102 020c 	add.w	r2, r2, #12
 800f1d4:	6013      	str	r3, [r2, #0]
 800f1d6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f1da:	f103 030c 	add.w	r3, r3, #12
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f340 80a5 	ble.w	800f330 <StartSendUARTTask+0x388>
 800f1e6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f1ea:	f103 0316 	add.w	r3, r3, #22
 800f1ee:	881b      	ldrh	r3, [r3, #0]
 800f1f0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f1f4:	4413      	add	r3, r2
 800f1f6:	2202      	movs	r2, #2
 800f1f8:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f1fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f200:	f103 0316 	add.w	r3, r3, #22
 800f204:	881b      	ldrh	r3, [r3, #0]
 800f206:	3301      	adds	r3, #1
 800f208:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f20c:	f102 0216 	add.w	r2, r2, #22
 800f210:	8013      	strh	r3, [r2, #0]
 800f212:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f216:	f103 030c 	add.w	r3, r3, #12
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	121a      	asrs	r2, r3, #8
 800f21e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f222:	f103 0316 	add.w	r3, r3, #22
 800f226:	881b      	ldrh	r3, [r3, #0]
 800f228:	b2d2      	uxtb	r2, r2
 800f22a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f22e:	440b      	add	r3, r1
 800f230:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f234:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f238:	f103 0316 	add.w	r3, r3, #22
 800f23c:	881b      	ldrh	r3, [r3, #0]
 800f23e:	3301      	adds	r3, #1
 800f240:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f244:	f102 0216 	add.w	r2, r2, #22
 800f248:	8013      	strh	r3, [r2, #0]
 800f24a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f24e:	f103 0316 	add.w	r3, r3, #22
 800f252:	881b      	ldrh	r3, [r3, #0]
 800f254:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f258:	f102 020c 	add.w	r2, r2, #12
 800f25c:	6812      	ldr	r2, [r2, #0]
 800f25e:	b2d2      	uxtb	r2, r2
 800f260:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f264:	440b      	add	r3, r1
 800f266:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f26a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f26e:	f103 0316 	add.w	r3, r3, #22
 800f272:	881b      	ldrh	r3, [r3, #0]
 800f274:	3301      	adds	r3, #1
 800f276:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f27a:	f102 0216 	add.w	r2, r2, #22
 800f27e:	8013      	strh	r3, [r2, #0]
 800f280:	2300      	movs	r3, #0
 800f282:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f286:	f102 020c 	add.w	r2, r2, #12
 800f28a:	6013      	str	r3, [r2, #0]
 800f28c:	e03e      	b.n	800f30c <StartSendUARTTask+0x364>
 800f28e:	bf00      	nop
 800f290:	200092ac 	.word	0x200092ac
 800f294:	200090bc 	.word	0x200090bc
 800f298:	cccccccd 	.word	0xcccccccd
 800f29c:	20005004 	.word	0x20005004
 800f2a0:	4ad1      	ldr	r2, [pc, #836]	@ (800f5e8 <StartSendUARTTask+0x640>)
 800f2a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f2a6:	f103 030c 	add.w	r3, r3, #12
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800f2b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f2b4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f2b8:	f103 0316 	add.w	r3, r3, #22
 800f2bc:	881b      	ldrh	r3, [r3, #0]
 800f2be:	b2d2      	uxtb	r2, r2
 800f2c0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f2c4:	440b      	add	r3, r1
 800f2c6:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f2ca:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f2ce:	f103 0316 	add.w	r3, r3, #22
 800f2d2:	881b      	ldrh	r3, [r3, #0]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f2da:	f102 0216 	add.w	r2, r2, #22
 800f2de:	8013      	strh	r3, [r2, #0]
 800f2e0:	4ac1      	ldr	r2, [pc, #772]	@ (800f5e8 <StartSendUARTTask+0x640>)
 800f2e2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f2e6:	f103 030c 	add.w	r3, r3, #12
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f2f6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f2fa:	f103 030c 	add.w	r3, r3, #12
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	3301      	adds	r3, #1
 800f302:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f306:	f102 020c 	add.w	r2, r2, #12
 800f30a:	6013      	str	r3, [r2, #0]
 800f30c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f310:	f103 030c 	add.w	r3, r3, #12
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f31a:	f103 030c 	add.w	r3, r3, #12
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	429a      	cmp	r2, r3
 800f322:	dbbd      	blt.n	800f2a0 <StartSendUARTTask+0x2f8>
 800f324:	4bb0      	ldr	r3, [pc, #704]	@ (800f5e8 <StartSendUARTTask+0x640>)
 800f326:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f32a:	461a      	mov	r2, r3
 800f32c:	2300      	movs	r3, #0
 800f32e:	6353      	str	r3, [r2, #52]	@ 0x34
 800f330:	4bae      	ldr	r3, [pc, #696]	@ (800f5ec <StartSendUARTTask+0x644>)
 800f332:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800f336:	4618      	mov	r0, r3
 800f338:	f7f7 fca0 	bl	8006c7c <osSemaphoreRelease>
 800f33c:	4bab      	ldr	r3, [pc, #684]	@ (800f5ec <StartSendUARTTask+0x644>)
 800f33e:	f8d3 21dc 	ldr.w	r2, [r3, #476]	@ 0x1dc
 800f342:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f346:	f103 031c 	add.w	r3, r3, #28
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	49a8      	ldr	r1, [pc, #672]	@ (800f5f0 <StartSendUARTTask+0x648>)
 800f34e:	fba1 1303 	umull	r1, r3, r1, r3
 800f352:	08db      	lsrs	r3, r3, #3
 800f354:	4619      	mov	r1, r3
 800f356:	4610      	mov	r0, r2
 800f358:	f7f7 fc3e 	bl	8006bd8 <osSemaphoreAcquire>
 800f35c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f360:	f103 0308 	add.w	r3, r3, #8
 800f364:	6018      	str	r0, [r3, #0]
 800f366:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f36a:	f103 0308 	add.w	r3, r3, #8
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	2b00      	cmp	r3, #0
 800f372:	f040 80ba 	bne.w	800f4ea <StartSendUARTTask+0x542>
 800f376:	4b9f      	ldr	r3, [pc, #636]	@ (800f5f4 <StartSendUARTTask+0x64c>)
 800f378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f382:	f102 0204 	add.w	r2, r2, #4
 800f386:	6013      	str	r3, [r2, #0]
 800f388:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f38c:	f103 0304 	add.w	r3, r3, #4
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	f340 80a3 	ble.w	800f4de <StartSendUARTTask+0x536>
 800f398:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f39c:	f103 0316 	add.w	r3, r3, #22
 800f3a0:	881b      	ldrh	r3, [r3, #0]
 800f3a2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f3a6:	4413      	add	r3, r2
 800f3a8:	2203      	movs	r2, #3
 800f3aa:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f3ae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f3b2:	f103 0316 	add.w	r3, r3, #22
 800f3b6:	881b      	ldrh	r3, [r3, #0]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f3be:	f102 0216 	add.w	r2, r2, #22
 800f3c2:	8013      	strh	r3, [r2, #0]
 800f3c4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f3c8:	f103 0304 	add.w	r3, r3, #4
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	121a      	asrs	r2, r3, #8
 800f3d0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f3d4:	f103 0316 	add.w	r3, r3, #22
 800f3d8:	881b      	ldrh	r3, [r3, #0]
 800f3da:	b2d2      	uxtb	r2, r2
 800f3dc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f3e0:	440b      	add	r3, r1
 800f3e2:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f3e6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f3ea:	f103 0316 	add.w	r3, r3, #22
 800f3ee:	881b      	ldrh	r3, [r3, #0]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f3f6:	f102 0216 	add.w	r2, r2, #22
 800f3fa:	8013      	strh	r3, [r2, #0]
 800f3fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f400:	f103 0316 	add.w	r3, r3, #22
 800f404:	881b      	ldrh	r3, [r3, #0]
 800f406:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f40a:	f102 0204 	add.w	r2, r2, #4
 800f40e:	6812      	ldr	r2, [r2, #0]
 800f410:	b2d2      	uxtb	r2, r2
 800f412:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f416:	440b      	add	r3, r1
 800f418:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f41c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f420:	f103 0316 	add.w	r3, r3, #22
 800f424:	881b      	ldrh	r3, [r3, #0]
 800f426:	3301      	adds	r3, #1
 800f428:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f42c:	f102 0216 	add.w	r2, r2, #22
 800f430:	8013      	strh	r3, [r2, #0]
 800f432:	2300      	movs	r3, #0
 800f434:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f438:	f102 0208 	add.w	r2, r2, #8
 800f43c:	6013      	str	r3, [r2, #0]
 800f43e:	e03c      	b.n	800f4ba <StartSendUARTTask+0x512>
 800f440:	4a6c      	ldr	r2, [pc, #432]	@ (800f5f4 <StartSendUARTTask+0x64c>)
 800f442:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f446:	f103 0308 	add.w	r3, r3, #8
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	009b      	lsls	r3, r3, #2
 800f44e:	4413      	add	r3, r2
 800f450:	3304      	adds	r3, #4
 800f452:	edd3 7a00 	vldr	s15, [r3]
 800f456:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f45a:	f103 0316 	add.w	r3, r3, #22
 800f45e:	881b      	ldrh	r3, [r3, #0]
 800f460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f464:	edc7 7a00 	vstr	s15, [r7]
 800f468:	783a      	ldrb	r2, [r7, #0]
 800f46a:	b2d2      	uxtb	r2, r2
 800f46c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f470:	440b      	add	r3, r1
 800f472:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f476:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f47a:	f103 0316 	add.w	r3, r3, #22
 800f47e:	881b      	ldrh	r3, [r3, #0]
 800f480:	3301      	adds	r3, #1
 800f482:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f486:	f102 0216 	add.w	r2, r2, #22
 800f48a:	8013      	strh	r3, [r2, #0]
 800f48c:	4a59      	ldr	r2, [pc, #356]	@ (800f5f4 <StartSendUARTTask+0x64c>)
 800f48e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f492:	f103 0308 	add.w	r3, r3, #8
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	4413      	add	r3, r2
 800f49c:	3304      	adds	r3, #4
 800f49e:	f04f 0200 	mov.w	r2, #0
 800f4a2:	601a      	str	r2, [r3, #0]
 800f4a4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f4a8:	f103 0308 	add.w	r3, r3, #8
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f4b4:	f102 0208 	add.w	r2, r2, #8
 800f4b8:	6013      	str	r3, [r2, #0]
 800f4ba:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f4be:	f103 0308 	add.w	r3, r3, #8
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f4c8:	f103 0304 	add.w	r3, r3, #4
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	dbb6      	blt.n	800f440 <StartSendUARTTask+0x498>
 800f4d2:	4b48      	ldr	r3, [pc, #288]	@ (800f5f4 <StartSendUARTTask+0x64c>)
 800f4d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f4d8:	461a      	mov	r2, r3
 800f4da:	2300      	movs	r3, #0
 800f4dc:	6053      	str	r3, [r2, #4]
 800f4de:	4b43      	ldr	r3, [pc, #268]	@ (800f5ec <StartSendUARTTask+0x644>)
 800f4e0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7f7 fbc9 	bl	8006c7c <osSemaphoreRelease>
 800f4ea:	4b40      	ldr	r3, [pc, #256]	@ (800f5ec <StartSendUARTTask+0x644>)
 800f4ec:	f8d3 21d8 	ldr.w	r2, [r3, #472]	@ 0x1d8
 800f4f0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f4f4:	f103 031c 	add.w	r3, r3, #28
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	493d      	ldr	r1, [pc, #244]	@ (800f5f0 <StartSendUARTTask+0x648>)
 800f4fc:	fba1 1303 	umull	r1, r3, r1, r3
 800f500:	08db      	lsrs	r3, r3, #3
 800f502:	4619      	mov	r1, r3
 800f504:	4610      	mov	r0, r2
 800f506:	f7f7 fb67 	bl	8006bd8 <osSemaphoreAcquire>
 800f50a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f50e:	6018      	str	r0, [r3, #0]
 800f510:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	2b00      	cmp	r3, #0
 800f518:	f040 80c5 	bne.w	800f6a6 <StartSendUARTTask+0x6fe>
 800f51c:	4b35      	ldr	r3, [pc, #212]	@ (800f5f4 <StartSendUARTTask+0x64c>)
 800f51e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800f528:	f102 021c 	add.w	r2, r2, #28
 800f52c:	6013      	str	r3, [r2, #0]
 800f52e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f532:	f103 031c 	add.w	r3, r3, #28
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f340 80ae 	ble.w	800f69a <StartSendUARTTask+0x6f2>
 800f53e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f542:	f103 0316 	add.w	r3, r3, #22
 800f546:	881b      	ldrh	r3, [r3, #0]
 800f548:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f54c:	4413      	add	r3, r2
 800f54e:	2204      	movs	r2, #4
 800f550:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f554:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f558:	f103 0316 	add.w	r3, r3, #22
 800f55c:	881b      	ldrh	r3, [r3, #0]
 800f55e:	3301      	adds	r3, #1
 800f560:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f564:	f102 0216 	add.w	r2, r2, #22
 800f568:	8013      	strh	r3, [r2, #0]
 800f56a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f56e:	f103 031c 	add.w	r3, r3, #28
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	121a      	asrs	r2, r3, #8
 800f576:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f57a:	f103 0316 	add.w	r3, r3, #22
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	b2d2      	uxtb	r2, r2
 800f582:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f586:	440b      	add	r3, r1
 800f588:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f58c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f590:	f103 0316 	add.w	r3, r3, #22
 800f594:	881b      	ldrh	r3, [r3, #0]
 800f596:	3301      	adds	r3, #1
 800f598:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f59c:	f102 0216 	add.w	r2, r2, #22
 800f5a0:	8013      	strh	r3, [r2, #0]
 800f5a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f5a6:	f103 0316 	add.w	r3, r3, #22
 800f5aa:	881b      	ldrh	r3, [r3, #0]
 800f5ac:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800f5b0:	f102 021c 	add.w	r2, r2, #28
 800f5b4:	6812      	ldr	r2, [r2, #0]
 800f5b6:	b2d2      	uxtb	r2, r2
 800f5b8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f5bc:	440b      	add	r3, r1
 800f5be:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f5c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f5c6:	f103 0316 	add.w	r3, r3, #22
 800f5ca:	881b      	ldrh	r3, [r3, #0]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f5d2:	f102 0216 	add.w	r2, r2, #22
 800f5d6:	8013      	strh	r3, [r2, #0]
 800f5d8:	2300      	movs	r3, #0
 800f5da:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f5de:	f102 0204 	add.w	r2, r2, #4
 800f5e2:	6013      	str	r3, [r2, #0]
 800f5e4:	e047      	b.n	800f676 <StartSendUARTTask+0x6ce>
 800f5e6:	bf00      	nop
 800f5e8:	20005004 	.word	0x20005004
 800f5ec:	200090bc 	.word	0x200090bc
 800f5f0:	cccccccd 	.word	0xcccccccd
 800f5f4:	20007048 	.word	0x20007048
 800f5f8:	4ab7      	ldr	r2, [pc, #732]	@ (800f8d8 <StartSendUARTTask+0x930>)
 800f5fa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f5fe:	f103 0304 	add.w	r3, r3, #4
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	4413      	add	r3, r2
 800f60c:	edd3 7a00 	vldr	s15, [r3]
 800f610:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f614:	f103 0316 	add.w	r3, r3, #22
 800f618:	881b      	ldrh	r3, [r3, #0]
 800f61a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f61e:	edc7 7a00 	vstr	s15, [r7]
 800f622:	783a      	ldrb	r2, [r7, #0]
 800f624:	b2d2      	uxtb	r2, r2
 800f626:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f62a:	440b      	add	r3, r1
 800f62c:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f630:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f634:	f103 0316 	add.w	r3, r3, #22
 800f638:	881b      	ldrh	r3, [r3, #0]
 800f63a:	3301      	adds	r3, #1
 800f63c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f640:	f102 0216 	add.w	r2, r2, #22
 800f644:	8013      	strh	r3, [r2, #0]
 800f646:	4aa4      	ldr	r2, [pc, #656]	@ (800f8d8 <StartSendUARTTask+0x930>)
 800f648:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f64c:	f103 0304 	add.w	r3, r3, #4
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	4413      	add	r3, r2
 800f65a:	f04f 0200 	mov.w	r2, #0
 800f65e:	601a      	str	r2, [r3, #0]
 800f660:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f664:	f103 0304 	add.w	r3, r3, #4
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	3301      	adds	r3, #1
 800f66c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f670:	f102 0204 	add.w	r2, r2, #4
 800f674:	6013      	str	r3, [r2, #0]
 800f676:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f67a:	f103 0304 	add.w	r3, r3, #4
 800f67e:	681a      	ldr	r2, [r3, #0]
 800f680:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f684:	f103 031c 	add.w	r3, r3, #28
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	dbb4      	blt.n	800f5f8 <StartSendUARTTask+0x650>
 800f68e:	4b92      	ldr	r3, [pc, #584]	@ (800f8d8 <StartSendUARTTask+0x930>)
 800f690:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f694:	461a      	mov	r2, r3
 800f696:	2300      	movs	r3, #0
 800f698:	6093      	str	r3, [r2, #8]
 800f69a:	4b90      	ldr	r3, [pc, #576]	@ (800f8dc <StartSendUARTTask+0x934>)
 800f69c:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7f7 faeb 	bl	8006c7c <osSemaphoreRelease>
 800f6a6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f6aa:	f103 0316 	add.w	r3, r3, #22
 800f6ae:	881b      	ldrh	r3, [r3, #0]
 800f6b0:	2b0b      	cmp	r3, #11
 800f6b2:	f240 8176 	bls.w	800f9a2 <StartSendUARTTask+0x9fa>
 800f6b6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f6ba:	f103 0316 	add.w	r3, r3, #22
 800f6be:	881b      	ldrh	r3, [r3, #0]
 800f6c0:	3b03      	subs	r3, #3
 800f6c2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800f6c6:	f102 021a 	add.w	r2, r2, #26
 800f6ca:	8013      	strh	r3, [r2, #0]
 800f6cc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6d0:	2203      	movs	r2, #3
 800f6d2:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800f6d6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f6da:	f103 031a 	add.w	r3, r3, #26
 800f6de:	881b      	ldrh	r3, [r3, #0]
 800f6e0:	0a1b      	lsrs	r3, r3, #8
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	b2da      	uxtb	r2, r3
 800f6e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6ea:	f803 2c4b 	strb.w	r2, [r3, #-75]
 800f6ee:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f6f2:	f103 031a 	add.w	r3, r3, #26
 800f6f6:	881b      	ldrh	r3, [r3, #0]
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6fe:	f803 2c4a 	strb.w	r2, [r3, #-74]
 800f702:	4b77      	ldr	r3, [pc, #476]	@ (800f8e0 <StartSendUARTTask+0x938>)
 800f704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f706:	0e1b      	lsrs	r3, r3, #24
 800f708:	b2da      	uxtb	r2, r3
 800f70a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f70e:	f803 2c49 	strb.w	r2, [r3, #-73]
 800f712:	4b73      	ldr	r3, [pc, #460]	@ (800f8e0 <StartSendUARTTask+0x938>)
 800f714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f716:	141b      	asrs	r3, r3, #16
 800f718:	b2da      	uxtb	r2, r3
 800f71a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f71e:	f803 2c48 	strb.w	r2, [r3, #-72]
 800f722:	4b6f      	ldr	r3, [pc, #444]	@ (800f8e0 <StartSendUARTTask+0x938>)
 800f724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f726:	121b      	asrs	r3, r3, #8
 800f728:	b2da      	uxtb	r2, r3
 800f72a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f72e:	f803 2c47 	strb.w	r2, [r3, #-71]
 800f732:	4b6b      	ldr	r3, [pc, #428]	@ (800f8e0 <StartSendUARTTask+0x938>)
 800f734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f736:	b2da      	uxtb	r2, r3
 800f738:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f73c:	f803 2c46 	strb.w	r2, [r3, #-70]
 800f740:	4b68      	ldr	r3, [pc, #416]	@ (800f8e4 <StartSendUARTTask+0x93c>)
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	4b66      	ldr	r3, [pc, #408]	@ (800f8e0 <StartSendUARTTask+0x938>)
 800f746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f748:	1ad3      	subs	r3, r2, r3
 800f74a:	4a67      	ldr	r2, [pc, #412]	@ (800f8e8 <StartSendUARTTask+0x940>)
 800f74c:	fba2 2303 	umull	r2, r3, r2, r3
 800f750:	08db      	lsrs	r3, r3, #3
 800f752:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800f756:	f102 0214 	add.w	r2, r2, #20
 800f75a:	6013      	str	r3, [r2, #0]
 800f75c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f760:	f103 0314 	add.w	r3, r3, #20
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	0e1b      	lsrs	r3, r3, #24
 800f768:	b2da      	uxtb	r2, r3
 800f76a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f76e:	f803 2c45 	strb.w	r2, [r3, #-69]
 800f772:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f776:	f103 0314 	add.w	r3, r3, #20
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	0c1b      	lsrs	r3, r3, #16
 800f77e:	b2da      	uxtb	r2, r3
 800f780:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f784:	f803 2c44 	strb.w	r2, [r3, #-68]
 800f788:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f78c:	f103 0314 	add.w	r3, r3, #20
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	0a1b      	lsrs	r3, r3, #8
 800f794:	b2da      	uxtb	r2, r3
 800f796:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f79a:	f803 2c43 	strb.w	r2, [r3, #-67]
 800f79e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f7a2:	f103 0314 	add.w	r3, r3, #20
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	b2da      	uxtb	r2, r3
 800f7aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f7ae:	f803 2c42 	strb.w	r2, [r3, #-66]
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f7b8:	f102 0203 	add.w	r2, r2, #3
 800f7bc:	7013      	strb	r3, [r2, #0]
 800f7be:	f001 f8d1 	bl	8010964 <HasCalibration>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	bf14      	ite	ne
 800f7c8:	2301      	movne	r3, #1
 800f7ca:	2300      	moveq	r3, #0
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00a      	beq.n	800f7e8 <StartSendUARTTask+0x840>
 800f7d2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f7d6:	f103 0303 	add.w	r3, r3, #3
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	3301      	adds	r3, #1
 800f7de:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f7e2:	f102 0203 	add.w	r2, r2, #3
 800f7e6:	7013      	strb	r3, [r2, #0]
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	f001 f8db 	bl	80109a4 <HasLoadcell>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	bf14      	ite	ne
 800f7f4:	2301      	movne	r3, #1
 800f7f6:	2300      	moveq	r3, #0
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00a      	beq.n	800f814 <StartSendUARTTask+0x86c>
 800f7fe:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f802:	f103 0303 	add.w	r3, r3, #3
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	3302      	adds	r3, #2
 800f80a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f80e:	f102 0203 	add.w	r2, r2, #3
 800f812:	7013      	strb	r3, [r2, #0]
 800f814:	2000      	movs	r0, #0
 800f816:	f001 f8ed 	bl	80109f4 <HasFirstEmg>
 800f81a:	4603      	mov	r3, r0
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	bf14      	ite	ne
 800f820:	2301      	movne	r3, #1
 800f822:	2300      	moveq	r3, #0
 800f824:	b2db      	uxtb	r3, r3
 800f826:	2b00      	cmp	r3, #0
 800f828:	d00a      	beq.n	800f840 <StartSendUARTTask+0x898>
 800f82a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f82e:	f103 0303 	add.w	r3, r3, #3
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	3304      	adds	r3, #4
 800f836:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f83a:	f102 0203 	add.w	r2, r2, #3
 800f83e:	7013      	strb	r3, [r2, #0]
 800f840:	2000      	movs	r0, #0
 800f842:	f001 f8f7 	bl	8010a34 <HasSecondEmg>
 800f846:	4603      	mov	r3, r0
 800f848:	2b00      	cmp	r3, #0
 800f84a:	bf14      	ite	ne
 800f84c:	2301      	movne	r3, #1
 800f84e:	2300      	moveq	r3, #0
 800f850:	b2db      	uxtb	r3, r3
 800f852:	2b00      	cmp	r3, #0
 800f854:	d00a      	beq.n	800f86c <StartSendUARTTask+0x8c4>
 800f856:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f85a:	f103 0303 	add.w	r3, r3, #3
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	3308      	adds	r3, #8
 800f862:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800f866:	f102 0203 	add.w	r2, r2, #3
 800f86a:	7013      	strb	r3, [r2, #0]
 800f86c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f870:	461a      	mov	r2, r3
 800f872:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f876:	f103 0303 	add.w	r3, r3, #3
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	f802 3c41 	strb.w	r3, [r2, #-65]
 800f880:	4b17      	ldr	r3, [pc, #92]	@ (800f8e0 <StartSendUARTTask+0x938>)
 800f882:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f886:	2b00      	cmp	r3, #0
 800f888:	f000 8086 	beq.w	800f998 <StartSendUARTTask+0x9f0>
 800f88c:	4b14      	ldr	r3, [pc, #80]	@ (800f8e0 <StartSendUARTTask+0x938>)
 800f88e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f892:	2b00      	cmp	r3, #0
 800f894:	d019      	beq.n	800f8ca <StartSendUARTTask+0x922>
 800f896:	4b12      	ldr	r3, [pc, #72]	@ (800f8e0 <StartSendUARTTask+0x938>)
 800f898:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f89c:	461a      	mov	r2, r3
 800f89e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f8a2:	fb02 f303 	mul.w	r3, r2, r3
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f8ac:	f103 0314 	add.w	r3, r3, #20
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d909      	bls.n	800f8ca <StartSendUARTTask+0x922>
 800f8b6:	4b08      	ldr	r3, [pc, #32]	@ (800f8d8 <StartSendUARTTask+0x930>)
 800f8b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f8bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d101      	bne.n	800f8ca <StartSendUARTTask+0x922>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e000      	b.n	800f8cc <StartSendUARTTask+0x924>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d00f      	beq.n	800f8f0 <StartSendUARTTask+0x948>
 800f8d0:	4806      	ldr	r0, [pc, #24]	@ (800f8ec <StartSendUARTTask+0x944>)
 800f8d2:	f7fb fe15 	bl	800b500 <_ZN13Communication10cancelTestEv>
 800f8d6:	e070      	b.n	800f9ba <StartSendUARTTask+0xa12>
 800f8d8:	20007048 	.word	0x20007048
 800f8dc:	200090bc 	.word	0x200090bc
 800f8e0:	200092ac 	.word	0x200092ac
 800f8e4:	200000cc 	.word	0x200000cc
 800f8e8:	cccccccd 	.word	0xcccccccd
 800f8ec:	20009080 	.word	0x20009080
 800f8f0:	4b33      	ldr	r3, [pc, #204]	@ (800f9c0 <StartSendUARTTask+0xa18>)
 800f8f2:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d01b      	beq.n	800f932 <StartSendUARTTask+0x98a>
 800f8fa:	4b31      	ldr	r3, [pc, #196]	@ (800f9c0 <StartSendUARTTask+0xa18>)
 800f8fc:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800f900:	461a      	mov	r2, r3
 800f902:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f906:	fb02 f303 	mul.w	r3, r2, r3
 800f90a:	4619      	mov	r1, r3
 800f90c:	4b2d      	ldr	r3, [pc, #180]	@ (800f9c4 <StartSendUARTTask+0xa1c>)
 800f90e:	681a      	ldr	r2, [r3, #0]
 800f910:	4b2d      	ldr	r3, [pc, #180]	@ (800f9c8 <StartSendUARTTask+0xa20>)
 800f912:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f918:	1ad3      	subs	r3, r2, r3
 800f91a:	4299      	cmp	r1, r3
 800f91c:	d209      	bcs.n	800f932 <StartSendUARTTask+0x98a>
 800f91e:	4b2a      	ldr	r3, [pc, #168]	@ (800f9c8 <StartSendUARTTask+0xa20>)
 800f920:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f924:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d101      	bne.n	800f932 <StartSendUARTTask+0x98a>
 800f92e:	2301      	movs	r3, #1
 800f930:	e000      	b.n	800f934 <StartSendUARTTask+0x98c>
 800f932:	2300      	movs	r3, #0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d009      	beq.n	800f94c <StartSendUARTTask+0x9a4>
 800f938:	4b21      	ldr	r3, [pc, #132]	@ (800f9c0 <StartSendUARTTask+0xa18>)
 800f93a:	2201      	movs	r2, #1
 800f93c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
 800f940:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f944:	4821      	ldr	r0, [pc, #132]	@ (800f9cc <StartSendUARTTask+0xa24>)
 800f946:	f7fb fd65 	bl	800b414 <_ZN13Communication8StopTestEt>
 800f94a:	e036      	b.n	800f9ba <StartSendUARTTask+0xa12>
 800f94c:	4b20      	ldr	r3, [pc, #128]	@ (800f9d0 <StartSendUARTTask+0xa28>)
 800f94e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800f952:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f956:	4618      	mov	r0, r3
 800f958:	f7f7 f93e 	bl	8006bd8 <osSemaphoreAcquire>
 800f95c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f960:	f103 0310 	add.w	r3, r3, #16
 800f964:	6018      	str	r0, [r3, #0]
 800f966:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f96a:	f103 0310 	add.w	r3, r3, #16
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d111      	bne.n	800f998 <StartSendUARTTask+0x9f0>
 800f974:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800f978:	f103 0316 	add.w	r3, r3, #22
 800f97c:	881a      	ldrh	r2, [r3, #0]
 800f97e:	f107 0318 	add.w	r3, r7, #24
 800f982:	3b0c      	subs	r3, #12
 800f984:	4611      	mov	r1, r2
 800f986:	4618      	mov	r0, r3
 800f988:	f7ff fae4 	bl	800ef54 <WriteUart>
 800f98c:	4b10      	ldr	r3, [pc, #64]	@ (800f9d0 <StartSendUARTTask+0xa28>)
 800f98e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800f992:	4618      	mov	r0, r3
 800f994:	f7f7 f972 	bl	8006c7c <osSemaphoreRelease>
 800f998:	4b09      	ldr	r3, [pc, #36]	@ (800f9c0 <StartSendUARTTask+0xa18>)
 800f99a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f99c:	3301      	adds	r3, #1
 800f99e:	4a08      	ldr	r2, [pc, #32]	@ (800f9c0 <StartSendUARTTask+0xa18>)
 800f9a0:	66d3      	str	r3, [r2, #108]	@ 0x6c
 800f9a2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800f9a6:	f103 030c 	add.w	r3, r3, #12
 800f9aa:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800f9ae:	f102 021c 	add.w	r2, r2, #28
 800f9b2:	6811      	ldr	r1, [r2, #0]
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7f8 fcd3 	bl	8008360 <vTaskDelayUntil>
 800f9ba:	f7ff bb12 	b.w	800efe2 <StartSendUARTTask+0x3a>
 800f9be:	bf00      	nop
 800f9c0:	200092ac 	.word	0x200092ac
 800f9c4:	200000cc 	.word	0x200000cc
 800f9c8:	20007048 	.word	0x20007048
 800f9cc:	20009080 	.word	0x20009080
 800f9d0:	200090bc 	.word	0x200090bc

0800f9d4 <StartFirstEmgTask>:
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b084      	sub	sp, #16
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	4b17      	ldr	r3, [pc, #92]	@ (800fa3c <StartFirstEmgTask+0x68>)
 800f9de:	785b      	ldrb	r3, [r3, #1]
 800f9e0:	461a      	mov	r2, r3
 800f9e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f9e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9ea:	60fb      	str	r3, [r7, #12]
 800f9ec:	4a14      	ldr	r2, [pc, #80]	@ (800fa40 <StartFirstEmgTask+0x6c>)
 800f9ee:	2101      	movs	r1, #1
 800f9f0:	2001      	movs	r0, #1
 800f9f2:	f7f7 f868 	bl	8006ac6 <osSemaphoreNew>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	4a12      	ldr	r2, [pc, #72]	@ (800fa44 <StartFirstEmgTask+0x70>)
 800f9fa:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
 800f9fe:	4b11      	ldr	r3, [pc, #68]	@ (800fa44 <StartFirstEmgTask+0x70>)
 800fa00:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800fa04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7f7 f8e5 	bl	8006bd8 <osSemaphoreAcquire>
 800fa0e:	60b8      	str	r0, [r7, #8]
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d1f3      	bne.n	800f9fe <StartFirstEmgTask+0x2a>
 800fa16:	4b0c      	ldr	r3, [pc, #48]	@ (800fa48 <StartFirstEmgTask+0x74>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	4a0a      	ldr	r2, [pc, #40]	@ (800fa48 <StartFirstEmgTask+0x74>)
 800fa1e:	6013      	str	r3, [r2, #0]
 800fa20:	2101      	movs	r1, #1
 800fa22:	480a      	ldr	r0, [pc, #40]	@ (800fa4c <StartFirstEmgTask+0x78>)
 800fa24:	f7fb ffc6 	bl	800b9b4 <_ZN3Emg12FirstEmgReadEb>
 800fa28:	4b06      	ldr	r3, [pc, #24]	@ (800fa44 <StartFirstEmgTask+0x70>)
 800fa2a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7f7 f924 	bl	8006c7c <osSemaphoreRelease>
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	f7f8 fd13 	bl	8008460 <vTaskDelay>
 800fa3a:	e7e0      	b.n	800f9fe <StartFirstEmgTask+0x2a>
 800fa3c:	200092ac 	.word	0x200092ac
 800fa40:	08011d74 	.word	0x08011d74
 800fa44:	200090bc 	.word	0x200090bc
 800fa48:	20004ff4 	.word	0x20004ff4
 800fa4c:	20005004 	.word	0x20005004

0800fa50 <StartReadFirstEmgTask>:
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b08a      	sub	sp, #40	@ 0x28
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	4b32      	ldr	r3, [pc, #200]	@ (800fb24 <StartReadFirstEmgTask+0xd4>)
 800fa5a:	785b      	ldrb	r3, [r3, #1]
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa62:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa66:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa68:	4a2f      	ldr	r2, [pc, #188]	@ (800fb28 <StartReadFirstEmgTask+0xd8>)
 800fa6a:	2101      	movs	r1, #1
 800fa6c:	2001      	movs	r0, #1
 800fa6e:	f7f7 f82a 	bl	8006ac6 <osSemaphoreNew>
 800fa72:	4603      	mov	r3, r0
 800fa74:	4a2d      	ldr	r2, [pc, #180]	@ (800fb2c <StartReadFirstEmgTask+0xdc>)
 800fa76:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
 800fa7a:	4b2d      	ldr	r3, [pc, #180]	@ (800fb30 <StartReadFirstEmgTask+0xe0>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	4a29      	ldr	r2, [pc, #164]	@ (800fb24 <StartReadFirstEmgTask+0xd4>)
 800fa80:	6313      	str	r3, [r2, #48]	@ 0x30
 800fa82:	4b2a      	ldr	r3, [pc, #168]	@ (800fb2c <StartReadFirstEmgTask+0xdc>)
 800fa84:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800fa88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7f7 f8a3 	bl	8006bd8 <osSemaphoreAcquire>
 800fa92:	6238      	str	r0, [r7, #32]
 800fa94:	6a3b      	ldr	r3, [r7, #32]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d140      	bne.n	800fb1c <StartReadFirstEmgTask+0xcc>
 800fa9a:	2100      	movs	r1, #0
 800fa9c:	4825      	ldr	r0, [pc, #148]	@ (800fb34 <StartReadFirstEmgTask+0xe4>)
 800fa9e:	f7fb ff89 	bl	800b9b4 <_ZN3Emg12FirstEmgReadEb>
 800faa2:	4b24      	ldr	r3, [pc, #144]	@ (800fb34 <StartReadFirstEmgTask+0xe4>)
 800faa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faa6:	ee07 3a90 	vmov	s15, r3
 800faaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faae:	edc7 7a03 	vstr	s15, [r7, #12]
 800fab2:	f107 030c 	add.w	r3, r7, #12
 800fab6:	61fb      	str	r3, [r7, #28]
 800fab8:	4b1d      	ldr	r3, [pc, #116]	@ (800fb30 <StartReadFirstEmgTask+0xe0>)
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	4b19      	ldr	r3, [pc, #100]	@ (800fb24 <StartReadFirstEmgTask+0xd4>)
 800fabe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fac0:	1ad3      	subs	r3, r2, r3
 800fac2:	4a1d      	ldr	r2, [pc, #116]	@ (800fb38 <StartReadFirstEmgTask+0xe8>)
 800fac4:	fba2 2303 	umull	r2, r3, r2, r3
 800fac8:	08db      	lsrs	r3, r3, #3
 800faca:	61bb      	str	r3, [r7, #24]
 800facc:	69bb      	ldr	r3, [r7, #24]
 800face:	0e1b      	lsrs	r3, r3, #24
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	743b      	strb	r3, [r7, #16]
 800fad4:	69bb      	ldr	r3, [r7, #24]
 800fad6:	0c1b      	lsrs	r3, r3, #16
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	747b      	strb	r3, [r7, #17]
 800fadc:	69bb      	ldr	r3, [r7, #24]
 800fade:	0a1b      	lsrs	r3, r3, #8
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	74bb      	strb	r3, [r7, #18]
 800fae4:	69bb      	ldr	r3, [r7, #24]
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	74fb      	strb	r3, [r7, #19]
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	753b      	strb	r3, [r7, #20]
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	785b      	ldrb	r3, [r3, #1]
 800faf4:	757b      	strb	r3, [r7, #21]
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	789b      	ldrb	r3, [r3, #2]
 800fafa:	75bb      	strb	r3, [r7, #22]
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	78db      	ldrb	r3, [r3, #3]
 800fb00:	75fb      	strb	r3, [r7, #23]
 800fb02:	f107 0210 	add.w	r2, r7, #16
 800fb06:	2308      	movs	r3, #8
 800fb08:	210a      	movs	r1, #10
 800fb0a:	2000      	movs	r0, #0
 800fb0c:	f7ff f92c 	bl	800ed68 <SuccessDataResult>
 800fb10:	4b06      	ldr	r3, [pc, #24]	@ (800fb2c <StartReadFirstEmgTask+0xdc>)
 800fb12:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7f7 f8b0 	bl	8006c7c <osSemaphoreRelease>
 800fb1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fb1e:	f7f8 fc9f 	bl	8008460 <vTaskDelay>
 800fb22:	e7ae      	b.n	800fa82 <StartReadFirstEmgTask+0x32>
 800fb24:	200092ac 	.word	0x200092ac
 800fb28:	08011d74 	.word	0x08011d74
 800fb2c:	200090bc 	.word	0x200090bc
 800fb30:	200000cc 	.word	0x200000cc
 800fb34:	20005004 	.word	0x20005004
 800fb38:	cccccccd 	.word	0xcccccccd

0800fb3c <StartSecondEmgTask>:
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	4b17      	ldr	r3, [pc, #92]	@ (800fba4 <StartSecondEmgTask+0x68>)
 800fb46:	789b      	ldrb	r3, [r3, #2]
 800fb48:	461a      	mov	r2, r3
 800fb4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb52:	60fb      	str	r3, [r7, #12]
 800fb54:	4a14      	ldr	r2, [pc, #80]	@ (800fba8 <StartSecondEmgTask+0x6c>)
 800fb56:	2101      	movs	r1, #1
 800fb58:	2001      	movs	r0, #1
 800fb5a:	f7f6 ffb4 	bl	8006ac6 <osSemaphoreNew>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	4a12      	ldr	r2, [pc, #72]	@ (800fbac <StartSecondEmgTask+0x70>)
 800fb62:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
 800fb66:	4b11      	ldr	r3, [pc, #68]	@ (800fbac <StartSecondEmgTask+0x70>)
 800fb68:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800fb6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7f7 f831 	bl	8006bd8 <osSemaphoreAcquire>
 800fb76:	60b8      	str	r0, [r7, #8]
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d10e      	bne.n	800fb9c <StartSecondEmgTask+0x60>
 800fb7e:	4b0c      	ldr	r3, [pc, #48]	@ (800fbb0 <StartSecondEmgTask+0x74>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	3301      	adds	r3, #1
 800fb84:	4a0a      	ldr	r2, [pc, #40]	@ (800fbb0 <StartSecondEmgTask+0x74>)
 800fb86:	6013      	str	r3, [r2, #0]
 800fb88:	2101      	movs	r1, #1
 800fb8a:	480a      	ldr	r0, [pc, #40]	@ (800fbb4 <StartSecondEmgTask+0x78>)
 800fb8c:	f7fb ff8a 	bl	800baa4 <_ZN3Emg13SecondEmgReadEb>
 800fb90:	4b06      	ldr	r3, [pc, #24]	@ (800fbac <StartSecondEmgTask+0x70>)
 800fb92:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7f7 f870 	bl	8006c7c <osSemaphoreRelease>
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f7f8 fc5f 	bl	8008460 <vTaskDelay>
 800fba2:	e7e0      	b.n	800fb66 <StartSecondEmgTask+0x2a>
 800fba4:	200092ac 	.word	0x200092ac
 800fba8:	08011d84 	.word	0x08011d84
 800fbac:	200090bc 	.word	0x200090bc
 800fbb0:	20004ff8 	.word	0x20004ff8
 800fbb4:	20005004 	.word	0x20005004

0800fbb8 <StartReadSecondEmgTask>:
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b08a      	sub	sp, #40	@ 0x28
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	4b32      	ldr	r3, [pc, #200]	@ (800fc8c <StartReadSecondEmgTask+0xd4>)
 800fbc2:	789b      	ldrb	r3, [r3, #2]
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbca:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbce:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbd0:	4a2f      	ldr	r2, [pc, #188]	@ (800fc90 <StartReadSecondEmgTask+0xd8>)
 800fbd2:	2101      	movs	r1, #1
 800fbd4:	2001      	movs	r0, #1
 800fbd6:	f7f6 ff76 	bl	8006ac6 <osSemaphoreNew>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	4a2d      	ldr	r2, [pc, #180]	@ (800fc94 <StartReadSecondEmgTask+0xdc>)
 800fbde:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4
 800fbe2:	4b2d      	ldr	r3, [pc, #180]	@ (800fc98 <StartReadSecondEmgTask+0xe0>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	4a29      	ldr	r2, [pc, #164]	@ (800fc8c <StartReadSecondEmgTask+0xd4>)
 800fbe8:	6313      	str	r3, [r2, #48]	@ 0x30
 800fbea:	4b2a      	ldr	r3, [pc, #168]	@ (800fc94 <StartReadSecondEmgTask+0xdc>)
 800fbec:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800fbf0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7f6 ffef 	bl	8006bd8 <osSemaphoreAcquire>
 800fbfa:	6238      	str	r0, [r7, #32]
 800fbfc:	6a3b      	ldr	r3, [r7, #32]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d140      	bne.n	800fc84 <StartReadSecondEmgTask+0xcc>
 800fc02:	2100      	movs	r1, #0
 800fc04:	4825      	ldr	r0, [pc, #148]	@ (800fc9c <StartReadSecondEmgTask+0xe4>)
 800fc06:	f7fb ff4d 	bl	800baa4 <_ZN3Emg13SecondEmgReadEb>
 800fc0a:	4b24      	ldr	r3, [pc, #144]	@ (800fc9c <StartReadSecondEmgTask+0xe4>)
 800fc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc0e:	ee07 3a90 	vmov	s15, r3
 800fc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc16:	edc7 7a03 	vstr	s15, [r7, #12]
 800fc1a:	f107 030c 	add.w	r3, r7, #12
 800fc1e:	61fb      	str	r3, [r7, #28]
 800fc20:	4b1d      	ldr	r3, [pc, #116]	@ (800fc98 <StartReadSecondEmgTask+0xe0>)
 800fc22:	681a      	ldr	r2, [r3, #0]
 800fc24:	4b19      	ldr	r3, [pc, #100]	@ (800fc8c <StartReadSecondEmgTask+0xd4>)
 800fc26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc28:	1ad3      	subs	r3, r2, r3
 800fc2a:	4a1d      	ldr	r2, [pc, #116]	@ (800fca0 <StartReadSecondEmgTask+0xe8>)
 800fc2c:	fba2 2303 	umull	r2, r3, r2, r3
 800fc30:	08db      	lsrs	r3, r3, #3
 800fc32:	61bb      	str	r3, [r7, #24]
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	0e1b      	lsrs	r3, r3, #24
 800fc38:	b2db      	uxtb	r3, r3
 800fc3a:	743b      	strb	r3, [r7, #16]
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	0c1b      	lsrs	r3, r3, #16
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	747b      	strb	r3, [r7, #17]
 800fc44:	69bb      	ldr	r3, [r7, #24]
 800fc46:	0a1b      	lsrs	r3, r3, #8
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	74bb      	strb	r3, [r7, #18]
 800fc4c:	69bb      	ldr	r3, [r7, #24]
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	74fb      	strb	r3, [r7, #19]
 800fc52:	69fb      	ldr	r3, [r7, #28]
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	753b      	strb	r3, [r7, #20]
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	785b      	ldrb	r3, [r3, #1]
 800fc5c:	757b      	strb	r3, [r7, #21]
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	789b      	ldrb	r3, [r3, #2]
 800fc62:	75bb      	strb	r3, [r7, #22]
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	78db      	ldrb	r3, [r3, #3]
 800fc68:	75fb      	strb	r3, [r7, #23]
 800fc6a:	f107 0210 	add.w	r2, r7, #16
 800fc6e:	2308      	movs	r3, #8
 800fc70:	210b      	movs	r1, #11
 800fc72:	2000      	movs	r0, #0
 800fc74:	f7ff f878 	bl	800ed68 <SuccessDataResult>
 800fc78:	4b06      	ldr	r3, [pc, #24]	@ (800fc94 <StartReadSecondEmgTask+0xdc>)
 800fc7a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7f6 fffc 	bl	8006c7c <osSemaphoreRelease>
 800fc84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fc86:	f7f8 fbeb 	bl	8008460 <vTaskDelay>
 800fc8a:	e7ae      	b.n	800fbea <StartReadSecondEmgTask+0x32>
 800fc8c:	200092ac 	.word	0x200092ac
 800fc90:	08011d84 	.word	0x08011d84
 800fc94:	200090bc 	.word	0x200090bc
 800fc98:	200000cc 	.word	0x200000cc
 800fc9c:	20005004 	.word	0x20005004
 800fca0:	cccccccd 	.word	0xcccccccd

0800fca4 <StartFlowTask>:
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	4b17      	ldr	r3, [pc, #92]	@ (800fd0c <StartFlowTask+0x68>)
 800fcae:	791b      	ldrb	r3, [r3, #4]
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fcb6:	fb93 f3f2 	sdiv	r3, r3, r2
 800fcba:	60fb      	str	r3, [r7, #12]
 800fcbc:	4a14      	ldr	r2, [pc, #80]	@ (800fd10 <StartFlowTask+0x6c>)
 800fcbe:	2101      	movs	r1, #1
 800fcc0:	2001      	movs	r0, #1
 800fcc2:	f7f6 ff00 	bl	8006ac6 <osSemaphoreNew>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	4a12      	ldr	r2, [pc, #72]	@ (800fd14 <StartFlowTask+0x70>)
 800fcca:	f8c2 31d8 	str.w	r3, [r2, #472]	@ 0x1d8
 800fcce:	4b11      	ldr	r3, [pc, #68]	@ (800fd14 <StartFlowTask+0x70>)
 800fcd0:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800fcd4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7f6 ff7d 	bl	8006bd8 <osSemaphoreAcquire>
 800fcde:	60b8      	str	r0, [r7, #8]
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d10e      	bne.n	800fd04 <StartFlowTask+0x60>
 800fce6:	4b0c      	ldr	r3, [pc, #48]	@ (800fd18 <StartFlowTask+0x74>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	3301      	adds	r3, #1
 800fcec:	4a0a      	ldr	r2, [pc, #40]	@ (800fd18 <StartFlowTask+0x74>)
 800fcee:	6013      	str	r3, [r2, #0]
 800fcf0:	2101      	movs	r1, #1
 800fcf2:	480a      	ldr	r0, [pc, #40]	@ (800fd1c <StartFlowTask+0x78>)
 800fcf4:	f7fe f9c8 	bl	800e088 <_ZN8LoadCell8ReadFlowEb>
 800fcf8:	4b06      	ldr	r3, [pc, #24]	@ (800fd14 <StartFlowTask+0x70>)
 800fcfa:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7f6 ffbc 	bl	8006c7c <osSemaphoreRelease>
 800fd04:	68f8      	ldr	r0, [r7, #12]
 800fd06:	f7f8 fbab 	bl	8008460 <vTaskDelay>
 800fd0a:	e7e0      	b.n	800fcce <StartFlowTask+0x2a>
 800fd0c:	200092ac 	.word	0x200092ac
 800fd10:	08011d94 	.word	0x08011d94
 800fd14:	200090bc 	.word	0x200090bc
 800fd18:	20004ffc 	.word	0x20004ffc
 800fd1c:	20007048 	.word	0x20007048

0800fd20 <StartReadFlowTask>:
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b08e      	sub	sp, #56	@ 0x38
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	4838      	ldr	r0, [pc, #224]	@ (800fe0c <StartReadFlowTask+0xec>)
 800fd2a:	f7fe fc7d 	bl	800e628 <_ZN8LoadCell12ClearSamplesEv>
 800fd2e:	4b38      	ldr	r3, [pc, #224]	@ (800fe10 <StartReadFlowTask+0xf0>)
 800fd30:	791b      	ldrb	r3, [r3, #4]
 800fd32:	461a      	mov	r2, r3
 800fd34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd38:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd3e:	4a35      	ldr	r2, [pc, #212]	@ (800fe14 <StartReadFlowTask+0xf4>)
 800fd40:	2101      	movs	r1, #1
 800fd42:	2001      	movs	r0, #1
 800fd44:	f7f6 febf 	bl	8006ac6 <osSemaphoreNew>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	4a33      	ldr	r2, [pc, #204]	@ (800fe18 <StartReadFlowTask+0xf8>)
 800fd4c:	f8c2 31d8 	str.w	r3, [r2, #472]	@ 0x1d8
 800fd50:	4b2f      	ldr	r3, [pc, #188]	@ (800fe10 <StartReadFlowTask+0xf0>)
 800fd52:	695b      	ldr	r3, [r3, #20]
 800fd54:	ee07 3a90 	vmov	s15, r3
 800fd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd5c:	edc7 7a08 	vstr	s15, [r7, #32]
 800fd60:	f107 0320 	add.w	r3, r7, #32
 800fd64:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	753b      	strb	r3, [r7, #20]
 800fd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd6e:	785b      	ldrb	r3, [r3, #1]
 800fd70:	757b      	strb	r3, [r7, #21]
 800fd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd74:	789b      	ldrb	r3, [r3, #2]
 800fd76:	75bb      	strb	r3, [r7, #22]
 800fd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd7a:	78db      	ldrb	r3, [r3, #3]
 800fd7c:	75fb      	strb	r3, [r7, #23]
 800fd7e:	4b26      	ldr	r3, [pc, #152]	@ (800fe18 <StartReadFlowTask+0xf8>)
 800fd80:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800fd84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7f6 ff25 	bl	8006bd8 <osSemaphoreAcquire>
 800fd8e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d136      	bne.n	800fe04 <StartReadFlowTask+0xe4>
 800fd96:	2100      	movs	r1, #0
 800fd98:	481c      	ldr	r0, [pc, #112]	@ (800fe0c <StartReadFlowTask+0xec>)
 800fd9a:	f7fe f975 	bl	800e088 <_ZN8LoadCell8ReadFlowEb>
 800fd9e:	4b1c      	ldr	r3, [pc, #112]	@ (800fe10 <StartReadFlowTask+0xf0>)
 800fda0:	6a1b      	ldr	r3, [r3, #32]
 800fda2:	613b      	str	r3, [r7, #16]
 800fda4:	f107 0310 	add.w	r3, r7, #16
 800fda8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fdaa:	4b18      	ldr	r3, [pc, #96]	@ (800fe0c <StartReadFlowTask+0xec>)
 800fdac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fdb0:	69db      	ldr	r3, [r3, #28]
 800fdb2:	60fb      	str	r3, [r7, #12]
 800fdb4:	f107 030c 	add.w	r3, r7, #12
 800fdb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800fdba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	763b      	strb	r3, [r7, #24]
 800fdc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc2:	785b      	ldrb	r3, [r3, #1]
 800fdc4:	767b      	strb	r3, [r7, #25]
 800fdc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc8:	789b      	ldrb	r3, [r3, #2]
 800fdca:	76bb      	strb	r3, [r7, #26]
 800fdcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdce:	78db      	ldrb	r3, [r3, #3]
 800fdd0:	76fb      	strb	r3, [r7, #27]
 800fdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	773b      	strb	r3, [r7, #28]
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdda:	785b      	ldrb	r3, [r3, #1]
 800fddc:	777b      	strb	r3, [r7, #29]
 800fdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fde0:	789b      	ldrb	r3, [r3, #2]
 800fde2:	77bb      	strb	r3, [r7, #30]
 800fde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fde6:	78db      	ldrb	r3, [r3, #3]
 800fde8:	77fb      	strb	r3, [r7, #31]
 800fdea:	f107 0214 	add.w	r2, r7, #20
 800fdee:	230c      	movs	r3, #12
 800fdf0:	2105      	movs	r1, #5
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	f7fe ffb8 	bl	800ed68 <SuccessDataResult>
 800fdf8:	4b07      	ldr	r3, [pc, #28]	@ (800fe18 <StartReadFlowTask+0xf8>)
 800fdfa:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7f6 ff3c 	bl	8006c7c <osSemaphoreRelease>
 800fe04:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fe06:	f7f8 fb2b 	bl	8008460 <vTaskDelay>
 800fe0a:	e7b8      	b.n	800fd7e <StartReadFlowTask+0x5e>
 800fe0c:	20007048 	.word	0x20007048
 800fe10:	200092ac 	.word	0x200092ac
 800fe14:	08011d94 	.word	0x08011d94
 800fe18:	200090bc 	.word	0x200090bc

0800fe1c <StartVolumeTask>:
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b084      	sub	sp, #16
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	4819      	ldr	r0, [pc, #100]	@ (800fe8c <StartVolumeTask+0x70>)
 800fe26:	f7fe fbff 	bl	800e628 <_ZN8LoadCell12ClearSamplesEv>
 800fe2a:	4b19      	ldr	r3, [pc, #100]	@ (800fe90 <StartVolumeTask+0x74>)
 800fe2c:	78db      	ldrb	r3, [r3, #3]
 800fe2e:	461a      	mov	r2, r3
 800fe30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe34:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe38:	60fb      	str	r3, [r7, #12]
 800fe3a:	4a16      	ldr	r2, [pc, #88]	@ (800fe94 <StartVolumeTask+0x78>)
 800fe3c:	2101      	movs	r1, #1
 800fe3e:	2001      	movs	r0, #1
 800fe40:	f7f6 fe41 	bl	8006ac6 <osSemaphoreNew>
 800fe44:	4603      	mov	r3, r0
 800fe46:	4a14      	ldr	r2, [pc, #80]	@ (800fe98 <StartVolumeTask+0x7c>)
 800fe48:	f8c2 31dc 	str.w	r3, [r2, #476]	@ 0x1dc
 800fe4c:	4b12      	ldr	r3, [pc, #72]	@ (800fe98 <StartVolumeTask+0x7c>)
 800fe4e:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800fe52:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7f6 febe 	bl	8006bd8 <osSemaphoreAcquire>
 800fe5c:	60b8      	str	r0, [r7, #8]
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1f3      	bne.n	800fe4c <StartVolumeTask+0x30>
 800fe64:	4b0d      	ldr	r3, [pc, #52]	@ (800fe9c <StartVolumeTask+0x80>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	3301      	adds	r3, #1
 800fe6a:	4a0c      	ldr	r2, [pc, #48]	@ (800fe9c <StartVolumeTask+0x80>)
 800fe6c:	6013      	str	r3, [r2, #0]
 800fe6e:	2101      	movs	r1, #1
 800fe70:	4806      	ldr	r0, [pc, #24]	@ (800fe8c <StartVolumeTask+0x70>)
 800fe72:	f7fd ff4d 	bl	800dd10 <_ZN8LoadCell10ReadVolumeEb>
 800fe76:	4b08      	ldr	r3, [pc, #32]	@ (800fe98 <StartVolumeTask+0x7c>)
 800fe78:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7f6 fefd 	bl	8006c7c <osSemaphoreRelease>
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f7f8 faec 	bl	8008460 <vTaskDelay>
 800fe88:	e7e0      	b.n	800fe4c <StartVolumeTask+0x30>
 800fe8a:	bf00      	nop
 800fe8c:	20007048 	.word	0x20007048
 800fe90:	200092ac 	.word	0x200092ac
 800fe94:	08011da4 	.word	0x08011da4
 800fe98:	200090bc 	.word	0x200090bc
 800fe9c:	20005000 	.word	0x20005000

0800fea0 <StartReadVolumeTask>:
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b08e      	sub	sp, #56	@ 0x38
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	4838      	ldr	r0, [pc, #224]	@ (800ff8c <StartReadVolumeTask+0xec>)
 800feaa:	f7fe fbbd 	bl	800e628 <_ZN8LoadCell12ClearSamplesEv>
 800feae:	4b38      	ldr	r3, [pc, #224]	@ (800ff90 <StartReadVolumeTask+0xf0>)
 800feb0:	78db      	ldrb	r3, [r3, #3]
 800feb2:	461a      	mov	r2, r3
 800feb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800feb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800febc:	637b      	str	r3, [r7, #52]	@ 0x34
 800febe:	4a35      	ldr	r2, [pc, #212]	@ (800ff94 <StartReadVolumeTask+0xf4>)
 800fec0:	2101      	movs	r1, #1
 800fec2:	2001      	movs	r0, #1
 800fec4:	f7f6 fdff 	bl	8006ac6 <osSemaphoreNew>
 800fec8:	4603      	mov	r3, r0
 800feca:	4a33      	ldr	r2, [pc, #204]	@ (800ff98 <StartReadVolumeTask+0xf8>)
 800fecc:	f8c2 31dc 	str.w	r3, [r2, #476]	@ 0x1dc
 800fed0:	4b2f      	ldr	r3, [pc, #188]	@ (800ff90 <StartReadVolumeTask+0xf0>)
 800fed2:	699b      	ldr	r3, [r3, #24]
 800fed4:	ee07 3a90 	vmov	s15, r3
 800fed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fedc:	edc7 7a08 	vstr	s15, [r7, #32]
 800fee0:	f107 0320 	add.w	r3, r7, #32
 800fee4:	633b      	str	r3, [r7, #48]	@ 0x30
 800fee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	753b      	strb	r3, [r7, #20]
 800feec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feee:	785b      	ldrb	r3, [r3, #1]
 800fef0:	757b      	strb	r3, [r7, #21]
 800fef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fef4:	789b      	ldrb	r3, [r3, #2]
 800fef6:	75bb      	strb	r3, [r7, #22]
 800fef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fefa:	78db      	ldrb	r3, [r3, #3]
 800fefc:	75fb      	strb	r3, [r7, #23]
 800fefe:	4b26      	ldr	r3, [pc, #152]	@ (800ff98 <StartReadVolumeTask+0xf8>)
 800ff00:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800ff04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7f6 fe65 	bl	8006bd8 <osSemaphoreAcquire>
 800ff0e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ff10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d136      	bne.n	800ff84 <StartReadVolumeTask+0xe4>
 800ff16:	2100      	movs	r1, #0
 800ff18:	481c      	ldr	r0, [pc, #112]	@ (800ff8c <StartReadVolumeTask+0xec>)
 800ff1a:	f7fd fef9 	bl	800dd10 <_ZN8LoadCell10ReadVolumeEb>
 800ff1e:	4b1c      	ldr	r3, [pc, #112]	@ (800ff90 <StartReadVolumeTask+0xf0>)
 800ff20:	69db      	ldr	r3, [r3, #28]
 800ff22:	613b      	str	r3, [r7, #16]
 800ff24:	f107 0310 	add.w	r3, r7, #16
 800ff28:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ff2a:	4b18      	ldr	r3, [pc, #96]	@ (800ff8c <StartReadVolumeTask+0xec>)
 800ff2c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ff30:	6a1b      	ldr	r3, [r3, #32]
 800ff32:	60fb      	str	r3, [r7, #12]
 800ff34:	f107 030c 	add.w	r3, r7, #12
 800ff38:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	763b      	strb	r3, [r7, #24]
 800ff40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff42:	785b      	ldrb	r3, [r3, #1]
 800ff44:	767b      	strb	r3, [r7, #25]
 800ff46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff48:	789b      	ldrb	r3, [r3, #2]
 800ff4a:	76bb      	strb	r3, [r7, #26]
 800ff4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff4e:	78db      	ldrb	r3, [r3, #3]
 800ff50:	76fb      	strb	r3, [r7, #27]
 800ff52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	773b      	strb	r3, [r7, #28]
 800ff58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff5a:	785b      	ldrb	r3, [r3, #1]
 800ff5c:	777b      	strb	r3, [r7, #29]
 800ff5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff60:	789b      	ldrb	r3, [r3, #2]
 800ff62:	77bb      	strb	r3, [r7, #30]
 800ff64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff66:	78db      	ldrb	r3, [r3, #3]
 800ff68:	77fb      	strb	r3, [r7, #31]
 800ff6a:	f107 0214 	add.w	r2, r7, #20
 800ff6e:	230c      	movs	r3, #12
 800ff70:	2104      	movs	r1, #4
 800ff72:	2000      	movs	r0, #0
 800ff74:	f7fe fef8 	bl	800ed68 <SuccessDataResult>
 800ff78:	4b07      	ldr	r3, [pc, #28]	@ (800ff98 <StartReadVolumeTask+0xf8>)
 800ff7a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7f6 fe7c 	bl	8006c7c <osSemaphoreRelease>
 800ff84:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ff86:	f7f8 fa6b 	bl	8008460 <vTaskDelay>
 800ff8a:	e7b8      	b.n	800fefe <StartReadVolumeTask+0x5e>
 800ff8c:	20007048 	.word	0x20007048
 800ff90:	200092ac 	.word	0x200092ac
 800ff94:	08011da4 	.word	0x08011da4
 800ff98:	200090bc 	.word	0x200090bc

0800ff9c <StartAutoClosePumpTask>:
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	4b08      	ldr	r3, [pc, #32]	@ (800ffc8 <StartAutoClosePumpTask+0x2c>)
 800ffa6:	795b      	ldrb	r3, [r3, #5]
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffae:	fb02 f303 	mul.w	r3, r2, r3
 800ffb2:	60fb      	str	r3, [r7, #12]
 800ffb4:	68f8      	ldr	r0, [r7, #12]
 800ffb6:	f7f8 fa53 	bl	8008460 <vTaskDelay>
 800ffba:	2100      	movs	r1, #0
 800ffbc:	4803      	ldr	r0, [pc, #12]	@ (800ffcc <StartAutoClosePumpTask+0x30>)
 800ffbe:	f7fb f93d 	bl	800b23c <_ZN13Communication10TogglePumpEb>
 800ffc2:	bf00      	nop
 800ffc4:	e7f6      	b.n	800ffb4 <StartAutoClosePumpTask+0x18>
 800ffc6:	bf00      	nop
 800ffc8:	200092ac 	.word	0x200092ac
 800ffcc:	20009080 	.word	0x20009080

0800ffd0 <StartAutoCloseValveTask>:
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b084      	sub	sp, #16
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	4b0c      	ldr	r3, [pc, #48]	@ (801000c <StartAutoCloseValveTask+0x3c>)
 800ffda:	799b      	ldrb	r3, [r3, #6]
 800ffdc:	461a      	mov	r2, r3
 800ffde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffe2:	fb02 f303 	mul.w	r3, r2, r3
 800ffe6:	60fb      	str	r3, [r7, #12]
 800ffe8:	68f8      	ldr	r0, [r7, #12]
 800ffea:	f7f8 fa39 	bl	8008460 <vTaskDelay>
 800ffee:	2100      	movs	r1, #0
 800fff0:	4807      	ldr	r0, [pc, #28]	@ (8010010 <StartAutoCloseValveTask+0x40>)
 800fff2:	f7fb f95d 	bl	800b2b0 <_ZN13Communication11ToggleValveEb>
 800fff6:	4b07      	ldr	r3, [pc, #28]	@ (8010014 <StartAutoCloseValveTask+0x44>)
 800fff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7f6 fd36 	bl	8006a6c <osThreadTerminate>
 8010000:	4b04      	ldr	r3, [pc, #16]	@ (8010014 <StartAutoCloseValveTask+0x44>)
 8010002:	2200      	movs	r2, #0
 8010004:	675a      	str	r2, [r3, #116]	@ 0x74
 8010006:	bf00      	nop
 8010008:	e7ee      	b.n	800ffe8 <StartAutoCloseValveTask+0x18>
 801000a:	bf00      	nop
 801000c:	200092ac 	.word	0x200092ac
 8010010:	20009080 	.word	0x20009080
 8010014:	200090bc 	.word	0x200090bc

08010018 <StartLoadcellAverageTask>:
 8010018:	b580      	push	{r7, lr}
 801001a:	b08c      	sub	sp, #48	@ 0x30
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	2364      	movs	r3, #100	@ 0x64
 8010022:	623b      	str	r3, [r7, #32]
 8010024:	f04f 0300 	mov.w	r3, #0
 8010028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801002a:	f04f 0300 	mov.w	r3, #0
 801002e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010030:	2300      	movs	r3, #0
 8010032:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010034:	2332      	movs	r3, #50	@ 0x32
 8010036:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801003a:	2300      	movs	r3, #0
 801003c:	77fb      	strb	r3, [r7, #31]
 801003e:	4856      	ldr	r0, [pc, #344]	@ (8010198 <StartLoadcellAverageTask+0x180>)
 8010040:	f7fe faf2 	bl	800e628 <_ZN8LoadCell12ClearSamplesEv>
 8010044:	4854      	ldr	r0, [pc, #336]	@ (8010198 <StartLoadcellAverageTask+0x180>)
 8010046:	f7fd fd59 	bl	800dafc <_ZN8LoadCell17ReadVolumeAndFlowEv>
 801004a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801004e:	2b00      	cmp	r3, #0
 8010050:	d008      	beq.n	8010064 <StartLoadcellAverageTask+0x4c>
 8010052:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010056:	3b01      	subs	r3, #1
 8010058:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801005c:	2064      	movs	r0, #100	@ 0x64
 801005e:	f7f8 f9ff 	bl	8008460 <vTaskDelay>
 8010062:	e098      	b.n	8010196 <StartLoadcellAverageTask+0x17e>
 8010064:	4b4c      	ldr	r3, [pc, #304]	@ (8010198 <StartLoadcellAverageTask+0x180>)
 8010066:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801006a:	edd3 7a03 	vldr	s15, [r3, #12]
 801006e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8010072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010076:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 801007a:	4b47      	ldr	r3, [pc, #284]	@ (8010198 <StartLoadcellAverageTask+0x180>)
 801007c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010080:	edd3 7a04 	vldr	s15, [r3, #16]
 8010084:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8010088:	ee77 7a27 	vadd.f32	s15, s14, s15
 801008c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8010090:	4b42      	ldr	r3, [pc, #264]	@ (801019c <StartLoadcellAverageTask+0x184>)
 8010092:	61bb      	str	r3, [r7, #24]
 8010094:	4b42      	ldr	r3, [pc, #264]	@ (80101a0 <StartLoadcellAverageTask+0x188>)
 8010096:	617b      	str	r3, [r7, #20]
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	733b      	strb	r3, [r7, #12]
 801009e:	69bb      	ldr	r3, [r7, #24]
 80100a0:	785b      	ldrb	r3, [r3, #1]
 80100a2:	737b      	strb	r3, [r7, #13]
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	789b      	ldrb	r3, [r3, #2]
 80100a8:	73bb      	strb	r3, [r7, #14]
 80100aa:	69bb      	ldr	r3, [r7, #24]
 80100ac:	78db      	ldrb	r3, [r3, #3]
 80100ae:	73fb      	strb	r3, [r7, #15]
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	743b      	strb	r3, [r7, #16]
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	785b      	ldrb	r3, [r3, #1]
 80100ba:	747b      	strb	r3, [r7, #17]
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	789b      	ldrb	r3, [r3, #2]
 80100c0:	74bb      	strb	r3, [r7, #18]
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	78db      	ldrb	r3, [r3, #3]
 80100c6:	74fb      	strb	r3, [r7, #19]
 80100c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80100ca:	3301      	adds	r3, #1
 80100cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80100ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80100d0:	2264      	movs	r2, #100	@ 0x64
 80100d2:	fb02 f303 	mul.w	r3, r2, r3
 80100d6:	4a33      	ldr	r2, [pc, #204]	@ (80101a4 <StartLoadcellAverageTask+0x18c>)
 80100d8:	f892 2071 	ldrb.w	r2, [r2, #113]	@ 0x71
 80100dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	3b01      	subs	r3, #1
 80100e4:	77fb      	strb	r3, [r7, #31]
 80100e6:	4a30      	ldr	r2, [pc, #192]	@ (80101a8 <StartLoadcellAverageTask+0x190>)
 80100e8:	7ffb      	ldrb	r3, [r7, #31]
 80100ea:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
 80100ee:	f107 020c 	add.w	r2, r7, #12
 80100f2:	7ff8      	ldrb	r0, [r7, #31]
 80100f4:	2308      	movs	r3, #8
 80100f6:	2106      	movs	r1, #6
 80100f8:	f7fe fe36 	bl	800ed68 <SuccessDataResult>
 80100fc:	4b29      	ldr	r3, [pc, #164]	@ (80101a4 <StartLoadcellAverageTask+0x18c>)
 80100fe:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8010102:	461a      	mov	r2, r3
 8010104:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010106:	4293      	cmp	r3, r2
 8010108:	d342      	bcc.n	8010190 <StartLoadcellAverageTask+0x178>
 801010a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801010c:	ee07 3a90 	vmov	s15, r3
 8010110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010114:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8010118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801011c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010120:	ee17 2a90 	vmov	r2, s15
 8010124:	4b1f      	ldr	r3, [pc, #124]	@ (80101a4 <StartLoadcellAverageTask+0x18c>)
 8010126:	619a      	str	r2, [r3, #24]
 8010128:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801012a:	3b01      	subs	r3, #1
 801012c:	ee07 3a90 	vmov	s15, r3
 8010130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010134:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8010138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801013c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010140:	ee17 2a90 	vmov	r2, s15
 8010144:	4b17      	ldr	r3, [pc, #92]	@ (80101a4 <StartLoadcellAverageTask+0x18c>)
 8010146:	615a      	str	r2, [r3, #20]
 8010148:	4b16      	ldr	r3, [pc, #88]	@ (80101a4 <StartLoadcellAverageTask+0x18c>)
 801014a:	699b      	ldr	r3, [r3, #24]
 801014c:	4619      	mov	r1, r3
 801014e:	4817      	ldr	r0, [pc, #92]	@ (80101ac <StartLoadcellAverageTask+0x194>)
 8010150:	f7fc ffa8 	bl	800d0a4 <_ZN12FlashManager18WriteVolumeAverageEm>
 8010154:	4b13      	ldr	r3, [pc, #76]	@ (80101a4 <StartLoadcellAverageTask+0x18c>)
 8010156:	695b      	ldr	r3, [r3, #20]
 8010158:	4619      	mov	r1, r3
 801015a:	4814      	ldr	r0, [pc, #80]	@ (80101ac <StartLoadcellAverageTask+0x194>)
 801015c:	f7fd f835 	bl	800d1ca <_ZN12FlashManager16WriteFlowAverageEm>
 8010160:	f107 020c 	add.w	r2, r7, #12
 8010164:	2308      	movs	r3, #8
 8010166:	2106      	movs	r1, #6
 8010168:	2064      	movs	r0, #100	@ 0x64
 801016a:	f7fe fdfd 	bl	800ed68 <SuccessDataResult>
 801016e:	2202      	movs	r2, #2
 8010170:	2104      	movs	r1, #4
 8010172:	2001      	movs	r0, #1
 8010174:	f7fe fdce 	bl	800ed14 <SendFeedback>
 8010178:	4b0a      	ldr	r3, [pc, #40]	@ (80101a4 <StartLoadcellAverageTask+0x18c>)
 801017a:	2200      	movs	r2, #0
 801017c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8010180:	4b0b      	ldr	r3, [pc, #44]	@ (80101b0 <StartLoadcellAverageTask+0x198>)
 8010182:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010184:	4618      	mov	r0, r3
 8010186:	f7f6 fc71 	bl	8006a6c <osThreadTerminate>
 801018a:	4b09      	ldr	r3, [pc, #36]	@ (80101b0 <StartLoadcellAverageTask+0x198>)
 801018c:	2200      	movs	r2, #0
 801018e:	679a      	str	r2, [r3, #120]	@ 0x78
 8010190:	2064      	movs	r0, #100	@ 0x64
 8010192:	f7f8 f965 	bl	8008460 <vTaskDelay>
 8010196:	e755      	b.n	8010044 <StartLoadcellAverageTask+0x2c>
 8010198:	20007048 	.word	0x20007048
 801019c:	20009058 	.word	0x20009058
 80101a0:	20009054 	.word	0x20009054
 80101a4:	200092ac 	.word	0x200092ac
 80101a8:	20009328 	.word	0x20009328
 80101ac:	200090a0 	.word	0x200090a0
 80101b0:	200090bc 	.word	0x200090bc

080101b4 <StartCalibrationVolumeTask>:
 80101b4:	b5b0      	push	{r4, r5, r7, lr}
 80101b6:	b08a      	sub	sp, #40	@ 0x28
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	2364      	movs	r3, #100	@ 0x64
 80101be:	61fb      	str	r3, [r7, #28]
 80101c0:	f04f 0300 	mov.w	r3, #0
 80101c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80101c6:	2300      	movs	r3, #0
 80101c8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80101ca:	2332      	movs	r3, #50	@ 0x32
 80101cc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80101d0:	2300      	movs	r3, #0
 80101d2:	76fb      	strb	r3, [r7, #27]
 80101d4:	485e      	ldr	r0, [pc, #376]	@ (8010350 <StartCalibrationVolumeTask+0x19c>)
 80101d6:	f7fd fc91 	bl	800dafc <_ZN8LoadCell17ReadVolumeAndFlowEv>
 80101da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d008      	beq.n	80101f4 <StartCalibrationVolumeTask+0x40>
 80101e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80101e6:	3b01      	subs	r3, #1
 80101e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80101ec:	2064      	movs	r0, #100	@ 0x64
 80101ee:	f7f8 f937 	bl	8008460 <vTaskDelay>
 80101f2:	e0ac      	b.n	801034e <StartCalibrationVolumeTask+0x19a>
 80101f4:	4b56      	ldr	r3, [pc, #344]	@ (8010350 <StartCalibrationVolumeTask+0x19c>)
 80101f6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80101fa:	ed93 7a04 	vldr	s14, [r3, #16]
 80101fe:	4b55      	ldr	r3, [pc, #340]	@ (8010354 <StartCalibrationVolumeTask+0x1a0>)
 8010200:	699b      	ldr	r3, [r3, #24]
 8010202:	ee07 3a90 	vmov	s15, r3
 8010206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801020a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801020e:	edc7 7a05 	vstr	s15, [r7, #20]
 8010212:	edd7 7a05 	vldr	s15, [r7, #20]
 8010216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801021a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801021e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010222:	d503      	bpl.n	801022c <StartCalibrationVolumeTask+0x78>
 8010224:	2064      	movs	r0, #100	@ 0x64
 8010226:	f7f8 f91b 	bl	8008460 <vTaskDelay>
 801022a:	e090      	b.n	801034e <StartCalibrationVolumeTask+0x19a>
 801022c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8010230:	edd7 7a05 	vldr	s15, [r7, #20]
 8010234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010238:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 801023c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801023e:	ee07 3a90 	vmov	s15, r3
 8010242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010246:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 801024a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801024e:	4b41      	ldr	r3, [pc, #260]	@ (8010354 <StartCalibrationVolumeTask+0x1a0>)
 8010250:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8010254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010258:	edc7 7a03 	vstr	s15, [r7, #12]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	4618      	mov	r0, r3
 8010260:	f7f0 f96a 	bl	8000538 <__aeabi_f2d>
 8010264:	4602      	mov	r2, r0
 8010266:	460b      	mov	r3, r1
 8010268:	493b      	ldr	r1, [pc, #236]	@ (8010358 <StartCalibrationVolumeTask+0x1a4>)
 801026a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 801026e:	f107 030c 	add.w	r3, r7, #12
 8010272:	613b      	str	r3, [r7, #16]
 8010274:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010276:	3301      	adds	r3, #1
 8010278:	847b      	strh	r3, [r7, #34]	@ 0x22
 801027a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801027c:	2264      	movs	r2, #100	@ 0x64
 801027e:	fb02 f303 	mul.w	r3, r2, r3
 8010282:	4a34      	ldr	r2, [pc, #208]	@ (8010354 <StartCalibrationVolumeTask+0x1a0>)
 8010284:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 8010288:	fb93 f3f2 	sdiv	r3, r3, r2
 801028c:	b2db      	uxtb	r3, r3
 801028e:	3b01      	subs	r3, #1
 8010290:	76fb      	strb	r3, [r7, #27]
 8010292:	4a31      	ldr	r2, [pc, #196]	@ (8010358 <StartCalibrationVolumeTask+0x1a4>)
 8010294:	7efb      	ldrb	r3, [r7, #27]
 8010296:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
 801029a:	7ef8      	ldrb	r0, [r7, #27]
 801029c:	2304      	movs	r3, #4
 801029e:	693a      	ldr	r2, [r7, #16]
 80102a0:	2108      	movs	r1, #8
 80102a2:	f7fe fd61 	bl	800ed68 <SuccessDataResult>
 80102a6:	4b2b      	ldr	r3, [pc, #172]	@ (8010354 <StartCalibrationVolumeTask+0x1a0>)
 80102a8:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80102ac:	461a      	mov	r2, r3
 80102ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d349      	bcc.n	8010348 <StartCalibrationVolumeTask+0x194>
 80102b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80102b6:	f7f0 f93f 	bl	8000538 <__aeabi_f2d>
 80102ba:	4604      	mov	r4, r0
 80102bc:	460d      	mov	r5, r1
 80102be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7f0 f917 	bl	80004f4 <__aeabi_ui2d>
 80102c6:	4602      	mov	r2, r0
 80102c8:	460b      	mov	r3, r1
 80102ca:	4620      	mov	r0, r4
 80102cc:	4629      	mov	r1, r5
 80102ce:	f7f0 fab5 	bl	800083c <__aeabi_ddiv>
 80102d2:	4602      	mov	r2, r0
 80102d4:	460b      	mov	r3, r1
 80102d6:	4614      	mov	r4, r2
 80102d8:	461d      	mov	r5, r3
 80102da:	4b1e      	ldr	r3, [pc, #120]	@ (8010354 <StartCalibrationVolumeTask+0x1a0>)
 80102dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102de:	4618      	mov	r0, r3
 80102e0:	f7f0 f92a 	bl	8000538 <__aeabi_f2d>
 80102e4:	4602      	mov	r2, r0
 80102e6:	460b      	mov	r3, r1
 80102e8:	4620      	mov	r0, r4
 80102ea:	4629      	mov	r1, r5
 80102ec:	f7f0 faa6 	bl	800083c <__aeabi_ddiv>
 80102f0:	4602      	mov	r2, r0
 80102f2:	460b      	mov	r3, r1
 80102f4:	4610      	mov	r0, r2
 80102f6:	4619      	mov	r1, r3
 80102f8:	f7f0 fba8 	bl	8000a4c <__aeabi_d2f>
 80102fc:	4603      	mov	r3, r0
 80102fe:	4a15      	ldr	r2, [pc, #84]	@ (8010354 <StartCalibrationVolumeTask+0x1a0>)
 8010300:	61d3      	str	r3, [r2, #28]
 8010302:	4b14      	ldr	r3, [pc, #80]	@ (8010354 <StartCalibrationVolumeTask+0x1a0>)
 8010304:	69db      	ldr	r3, [r3, #28]
 8010306:	4618      	mov	r0, r3
 8010308:	f7f0 f916 	bl	8000538 <__aeabi_f2d>
 801030c:	4602      	mov	r2, r0
 801030e:	460b      	mov	r3, r1
 8010310:	ec43 2b10 	vmov	d0, r2, r3
 8010314:	4811      	ldr	r0, [pc, #68]	@ (801035c <StartCalibrationVolumeTask+0x1a8>)
 8010316:	f7fc fe2b 	bl	800cf70 <_ZN12FlashManager15WriteVolumeRateEd>
 801031a:	2304      	movs	r3, #4
 801031c:	693a      	ldr	r2, [r7, #16]
 801031e:	2108      	movs	r1, #8
 8010320:	2064      	movs	r0, #100	@ 0x64
 8010322:	f7fe fd21 	bl	800ed68 <SuccessDataResult>
 8010326:	2202      	movs	r2, #2
 8010328:	2105      	movs	r1, #5
 801032a:	2001      	movs	r0, #1
 801032c:	f7fe fcf2 	bl	800ed14 <SendFeedback>
 8010330:	4b08      	ldr	r3, [pc, #32]	@ (8010354 <StartCalibrationVolumeTask+0x1a0>)
 8010332:	2200      	movs	r2, #0
 8010334:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8010338:	4b09      	ldr	r3, [pc, #36]	@ (8010360 <StartCalibrationVolumeTask+0x1ac>)
 801033a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801033c:	4618      	mov	r0, r3
 801033e:	f7f6 fb95 	bl	8006a6c <osThreadTerminate>
 8010342:	4b07      	ldr	r3, [pc, #28]	@ (8010360 <StartCalibrationVolumeTask+0x1ac>)
 8010344:	2200      	movs	r2, #0
 8010346:	67da      	str	r2, [r3, #124]	@ 0x7c
 8010348:	2064      	movs	r0, #100	@ 0x64
 801034a:	f7f8 f889 	bl	8008460 <vTaskDelay>
 801034e:	e741      	b.n	80101d4 <StartCalibrationVolumeTask+0x20>
 8010350:	20007048 	.word	0x20007048
 8010354:	200092ac 	.word	0x200092ac
 8010358:	20009328 	.word	0x20009328
 801035c:	200090a0 	.word	0x200090a0
 8010360:	200090bc 	.word	0x200090bc

08010364 <StartCalibrationFlowTask>:
 8010364:	b580      	push	{r7, lr}
 8010366:	b08a      	sub	sp, #40	@ 0x28
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	2364      	movs	r3, #100	@ 0x64
 801036e:	61fb      	str	r3, [r7, #28]
 8010370:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8010374:	627b      	str	r3, [r7, #36]	@ 0x24
 8010376:	2300      	movs	r3, #0
 8010378:	847b      	strh	r3, [r7, #34]	@ 0x22
 801037a:	2332      	movs	r3, #50	@ 0x32
 801037c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8010380:	2300      	movs	r3, #0
 8010382:	76fb      	strb	r3, [r7, #27]
 8010384:	485c      	ldr	r0, [pc, #368]	@ (80104f8 <StartCalibrationFlowTask+0x194>)
 8010386:	f7fd fbb9 	bl	800dafc <_ZN8LoadCell17ReadVolumeAndFlowEv>
 801038a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801038e:	2b00      	cmp	r3, #0
 8010390:	d008      	beq.n	80103a4 <StartCalibrationFlowTask+0x40>
 8010392:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010396:	3b01      	subs	r3, #1
 8010398:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 801039c:	2064      	movs	r0, #100	@ 0x64
 801039e:	f7f8 f85f 	bl	8008460 <vTaskDelay>
 80103a2:	e7ef      	b.n	8010384 <StartCalibrationFlowTask+0x20>
 80103a4:	4b55      	ldr	r3, [pc, #340]	@ (80104fc <StartCalibrationFlowTask+0x198>)
 80103a6:	695b      	ldr	r3, [r3, #20]
 80103a8:	ee07 3a90 	vmov	s15, r3
 80103ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80103b0:	4b51      	ldr	r3, [pc, #324]	@ (80104f8 <StartCalibrationFlowTask+0x194>)
 80103b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80103b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80103ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80103be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103c2:	bfcc      	ite	gt
 80103c4:	2301      	movgt	r3, #1
 80103c6:	2300      	movle	r3, #0
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d00a      	beq.n	80103e4 <StartCalibrationFlowTask+0x80>
 80103ce:	4b4b      	ldr	r3, [pc, #300]	@ (80104fc <StartCalibrationFlowTask+0x198>)
 80103d0:	695b      	ldr	r3, [r3, #20]
 80103d2:	ee07 3a90 	vmov	s15, r3
 80103d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103da:	4b47      	ldr	r3, [pc, #284]	@ (80104f8 <StartCalibrationFlowTask+0x194>)
 80103dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80103e0:	edc3 7a03 	vstr	s15, [r3, #12]
 80103e4:	4b44      	ldr	r3, [pc, #272]	@ (80104f8 <StartCalibrationFlowTask+0x194>)
 80103e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80103ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80103ee:	4b43      	ldr	r3, [pc, #268]	@ (80104fc <StartCalibrationFlowTask+0x198>)
 80103f0:	695b      	ldr	r3, [r3, #20]
 80103f2:	ee07 3a90 	vmov	s15, r3
 80103f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010402:	ee17 3a90 	vmov	r3, s15
 8010406:	617b      	str	r3, [r7, #20]
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	ee07 3a90 	vmov	s15, r3
 801040e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010412:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8010416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801041e:	d506      	bpl.n	801042e <StartCalibrationFlowTask+0xca>
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	ee07 3a90 	vmov	s15, r3
 8010426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801042a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 801042e:	4b33      	ldr	r3, [pc, #204]	@ (80104fc <StartCalibrationFlowTask+0x198>)
 8010430:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8010434:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801043c:	edc7 7a03 	vstr	s15, [r7, #12]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	4618      	mov	r0, r3
 8010444:	f7f0 f878 	bl	8000538 <__aeabi_f2d>
 8010448:	4602      	mov	r2, r0
 801044a:	460b      	mov	r3, r1
 801044c:	492c      	ldr	r1, [pc, #176]	@ (8010500 <StartCalibrationFlowTask+0x19c>)
 801044e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 8010452:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010454:	3301      	adds	r3, #1
 8010456:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010458:	f107 030c 	add.w	r3, r7, #12
 801045c:	613b      	str	r3, [r7, #16]
 801045e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010460:	2264      	movs	r2, #100	@ 0x64
 8010462:	fb02 f303 	mul.w	r3, r2, r3
 8010466:	4a25      	ldr	r2, [pc, #148]	@ (80104fc <StartCalibrationFlowTask+0x198>)
 8010468:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 801046c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010470:	b2db      	uxtb	r3, r3
 8010472:	3b01      	subs	r3, #1
 8010474:	76fb      	strb	r3, [r7, #27]
 8010476:	7ef8      	ldrb	r0, [r7, #27]
 8010478:	2304      	movs	r3, #4
 801047a:	693a      	ldr	r2, [r7, #16]
 801047c:	2109      	movs	r1, #9
 801047e:	f7fe fc73 	bl	800ed68 <SuccessDataResult>
 8010482:	4b1e      	ldr	r3, [pc, #120]	@ (80104fc <StartCalibrationFlowTask+0x198>)
 8010484:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8010488:	461a      	mov	r2, r3
 801048a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801048c:	4293      	cmp	r3, r2
 801048e:	d92e      	bls.n	80104ee <StartCalibrationFlowTask+0x18a>
 8010490:	4b1a      	ldr	r3, [pc, #104]	@ (80104fc <StartCalibrationFlowTask+0x198>)
 8010492:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8010496:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 801049a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801049e:	4b17      	ldr	r3, [pc, #92]	@ (80104fc <StartCalibrationFlowTask+0x198>)
 80104a0:	edc3 7a08 	vstr	s15, [r3, #32]
 80104a4:	4b15      	ldr	r3, [pc, #84]	@ (80104fc <StartCalibrationFlowTask+0x198>)
 80104a6:	6a1b      	ldr	r3, [r3, #32]
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7f0 f845 	bl	8000538 <__aeabi_f2d>
 80104ae:	4602      	mov	r2, r0
 80104b0:	460b      	mov	r3, r1
 80104b2:	ec43 2b10 	vmov	d0, r2, r3
 80104b6:	4813      	ldr	r0, [pc, #76]	@ (8010504 <StartCalibrationFlowTask+0x1a0>)
 80104b8:	f7fc fcc0 	bl	800ce3c <_ZN12FlashManager13WriteFlowRateEd>
 80104bc:	4b0f      	ldr	r3, [pc, #60]	@ (80104fc <StartCalibrationFlowTask+0x198>)
 80104be:	2200      	movs	r2, #0
 80104c0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80104c4:	2304      	movs	r3, #4
 80104c6:	693a      	ldr	r2, [r7, #16]
 80104c8:	2109      	movs	r1, #9
 80104ca:	2064      	movs	r0, #100	@ 0x64
 80104cc:	f7fe fc4c 	bl	800ed68 <SuccessDataResult>
 80104d0:	2202      	movs	r2, #2
 80104d2:	2106      	movs	r1, #6
 80104d4:	2001      	movs	r0, #1
 80104d6:	f7fe fc1d 	bl	800ed14 <SendFeedback>
 80104da:	4b0b      	ldr	r3, [pc, #44]	@ (8010508 <StartCalibrationFlowTask+0x1a4>)
 80104dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7f6 fac3 	bl	8006a6c <osThreadTerminate>
 80104e6:	4b08      	ldr	r3, [pc, #32]	@ (8010508 <StartCalibrationFlowTask+0x1a4>)
 80104e8:	2200      	movs	r2, #0
 80104ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80104ee:	2064      	movs	r0, #100	@ 0x64
 80104f0:	f7f7 ffb6 	bl	8008460 <vTaskDelay>
 80104f4:	e746      	b.n	8010384 <StartCalibrationFlowTask+0x20>
 80104f6:	bf00      	nop
 80104f8:	20007048 	.word	0x20007048
 80104fc:	200092ac 	.word	0x200092ac
 8010500:	20009328 	.word	0x20009328
 8010504:	200090a0 	.word	0x200090a0
 8010508:	200090bc 	.word	0x200090bc

0801050c <StartCleanTask>:
 801050c:	b580      	push	{r7, lr}
 801050e:	b086      	sub	sp, #24
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	2364      	movs	r3, #100	@ 0x64
 8010516:	613b      	str	r3, [r7, #16]
 8010518:	2300      	movs	r3, #0
 801051a:	82fb      	strh	r3, [r7, #22]
 801051c:	2300      	movs	r3, #0
 801051e:	73fb      	strb	r3, [r7, #15]
 8010520:	4897      	ldr	r0, [pc, #604]	@ (8010780 <StartCleanTask+0x274>)
 8010522:	f7fe f881 	bl	800e628 <_ZN8LoadCell12ClearSamplesEv>
 8010526:	2101      	movs	r1, #1
 8010528:	4896      	ldr	r0, [pc, #600]	@ (8010784 <StartCleanTask+0x278>)
 801052a:	f7fa fe87 	bl	800b23c <_ZN13Communication10TogglePumpEb>
 801052e:	4b96      	ldr	r3, [pc, #600]	@ (8010788 <StartCleanTask+0x27c>)
 8010530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010532:	2b00      	cmp	r3, #0
 8010534:	d00b      	beq.n	801054e <StartCleanTask+0x42>
 8010536:	4b94      	ldr	r3, [pc, #592]	@ (8010788 <StartCleanTask+0x27c>)
 8010538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801053a:	2b00      	cmp	r3, #0
 801053c:	d007      	beq.n	801054e <StartCleanTask+0x42>
 801053e:	4b92      	ldr	r3, [pc, #584]	@ (8010788 <StartCleanTask+0x27c>)
 8010540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010542:	4618      	mov	r0, r3
 8010544:	f7f6 fa92 	bl	8006a6c <osThreadTerminate>
 8010548:	4b8f      	ldr	r3, [pc, #572]	@ (8010788 <StartCleanTask+0x27c>)
 801054a:	2200      	movs	r2, #0
 801054c:	671a      	str	r2, [r3, #112]	@ 0x70
 801054e:	488c      	ldr	r0, [pc, #560]	@ (8010780 <StartCleanTask+0x274>)
 8010550:	f7fd fad4 	bl	800dafc <_ZN8LoadCell17ReadVolumeAndFlowEv>
 8010554:	4b8a      	ldr	r3, [pc, #552]	@ (8010780 <StartCleanTask+0x274>)
 8010556:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801055a:	691b      	ldr	r3, [r3, #16]
 801055c:	4a8b      	ldr	r2, [pc, #556]	@ (801078c <StartCleanTask+0x280>)
 801055e:	6113      	str	r3, [r2, #16]
 8010560:	4b87      	ldr	r3, [pc, #540]	@ (8010780 <StartCleanTask+0x274>)
 8010562:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010566:	ed93 7a04 	vldr	s14, [r3, #16]
 801056a:	4b85      	ldr	r3, [pc, #532]	@ (8010780 <StartCleanTask+0x274>)
 801056c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010570:	edd3 7a04 	vldr	s15, [r3, #16]
 8010574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801057c:	bfcc      	ite	gt
 801057e:	2301      	movgt	r3, #1
 8010580:	2300      	movle	r3, #0
 8010582:	b2db      	uxtb	r3, r3
 8010584:	2b00      	cmp	r3, #0
 8010586:	d012      	beq.n	80105ae <StartCleanTask+0xa2>
 8010588:	4b7d      	ldr	r3, [pc, #500]	@ (8010780 <StartCleanTask+0x274>)
 801058a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801058e:	ed93 7a04 	vldr	s14, [r3, #16]
 8010592:	4b7f      	ldr	r3, [pc, #508]	@ (8010790 <StartCleanTask+0x284>)
 8010594:	699b      	ldr	r3, [r3, #24]
 8010596:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 801059a:	ee07 3a90 	vmov	s15, r3
 801059e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105a6:	4b79      	ldr	r3, [pc, #484]	@ (801078c <StartCleanTask+0x280>)
 80105a8:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
 80105ac:	e012      	b.n	80105d4 <StartCleanTask+0xc8>
 80105ae:	4b78      	ldr	r3, [pc, #480]	@ (8010790 <StartCleanTask+0x284>)
 80105b0:	699b      	ldr	r3, [r3, #24]
 80105b2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80105b6:	3310      	adds	r3, #16
 80105b8:	ee07 3a90 	vmov	s15, r3
 80105bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80105c0:	4b6f      	ldr	r3, [pc, #444]	@ (8010780 <StartCleanTask+0x274>)
 80105c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80105c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80105ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105ce:	4b6f      	ldr	r3, [pc, #444]	@ (801078c <StartCleanTask+0x280>)
 80105d0:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
 80105d4:	4b6a      	ldr	r3, [pc, #424]	@ (8010780 <StartCleanTask+0x274>)
 80105d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80105da:	ed93 7a04 	vldr	s14, [r3, #16]
 80105de:	4b6c      	ldr	r3, [pc, #432]	@ (8010790 <StartCleanTask+0x284>)
 80105e0:	699b      	ldr	r3, [r3, #24]
 80105e2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80105e6:	3310      	adds	r3, #16
 80105e8:	ee07 3a90 	vmov	s15, r3
 80105ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105f4:	4b65      	ldr	r3, [pc, #404]	@ (801078c <StartCleanTask+0x280>)
 80105f6:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
 80105fa:	7bfb      	ldrb	r3, [r7, #15]
 80105fc:	b2da      	uxtb	r2, r3
 80105fe:	4b63      	ldr	r3, [pc, #396]	@ (801078c <StartCleanTask+0x280>)
 8010600:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8010604:	7bfb      	ldrb	r3, [r7, #15]
 8010606:	b2db      	uxtb	r3, r3
 8010608:	2b00      	cmp	r3, #0
 801060a:	d003      	beq.n	8010614 <StartCleanTask+0x108>
 801060c:	7bfb      	ldrb	r3, [r7, #15]
 801060e:	b2db      	uxtb	r3, r3
 8010610:	2b02      	cmp	r3, #2
 8010612:	d101      	bne.n	8010618 <StartCleanTask+0x10c>
 8010614:	2301      	movs	r3, #1
 8010616:	e000      	b.n	801061a <StartCleanTask+0x10e>
 8010618:	2300      	movs	r3, #0
 801061a:	2b00      	cmp	r3, #0
 801061c:	d047      	beq.n	80106ae <StartCleanTask+0x1a2>
 801061e:	4b5c      	ldr	r3, [pc, #368]	@ (8010790 <StartCleanTask+0x284>)
 8010620:	699b      	ldr	r3, [r3, #24]
 8010622:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8010626:	3310      	adds	r3, #16
 8010628:	ee07 3a90 	vmov	s15, r3
 801062c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010630:	4b53      	ldr	r3, [pc, #332]	@ (8010780 <StartCleanTask+0x274>)
 8010632:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010636:	edd3 7a04 	vldr	s15, [r3, #16]
 801063a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801063e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010642:	bfcc      	ite	gt
 8010644:	2301      	movgt	r3, #1
 8010646:	2300      	movle	r3, #0
 8010648:	b2db      	uxtb	r3, r3
 801064a:	2b00      	cmp	r3, #0
 801064c:	d002      	beq.n	8010654 <StartCleanTask+0x148>
 801064e:	8afb      	ldrh	r3, [r7, #22]
 8010650:	3301      	adds	r3, #1
 8010652:	82fb      	strh	r3, [r7, #22]
 8010654:	8afb      	ldrh	r3, [r7, #22]
 8010656:	2b05      	cmp	r3, #5
 8010658:	d97f      	bls.n	801075a <StartCleanTask+0x24e>
 801065a:	7bfb      	ldrb	r3, [r7, #15]
 801065c:	b2db      	uxtb	r3, r3
 801065e:	2b00      	cmp	r3, #0
 8010660:	bf0c      	ite	eq
 8010662:	2301      	moveq	r3, #1
 8010664:	2300      	movne	r3, #0
 8010666:	b2db      	uxtb	r3, r3
 8010668:	2b00      	cmp	r3, #0
 801066a:	d014      	beq.n	8010696 <StartCleanTask+0x18a>
 801066c:	2101      	movs	r1, #1
 801066e:	4845      	ldr	r0, [pc, #276]	@ (8010784 <StartCleanTask+0x278>)
 8010670:	f7fa fe1e 	bl	800b2b0 <_ZN13Communication11ToggleValveEb>
 8010674:	4b46      	ldr	r3, [pc, #280]	@ (8010790 <StartCleanTask+0x284>)
 8010676:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 801067a:	2b00      	cmp	r3, #0
 801067c:	d005      	beq.n	801068a <StartCleanTask+0x17e>
 801067e:	4b44      	ldr	r3, [pc, #272]	@ (8010790 <StartCleanTask+0x284>)
 8010680:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010682:	4618      	mov	r0, r3
 8010684:	f7f1 fb3e 	bl	8001d04 <HAL_Delay>
 8010688:	e009      	b.n	801069e <StartCleanTask+0x192>
 801068a:	4b41      	ldr	r3, [pc, #260]	@ (8010790 <StartCleanTask+0x284>)
 801068c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801068e:	4618      	mov	r0, r3
 8010690:	f7f7 fee6 	bl	8008460 <vTaskDelay>
 8010694:	e003      	b.n	801069e <StartCleanTask+0x192>
 8010696:	2100      	movs	r1, #0
 8010698:	483a      	ldr	r0, [pc, #232]	@ (8010784 <StartCleanTask+0x278>)
 801069a:	f7fa fdcf 	bl	800b23c <_ZN13Communication10TogglePumpEb>
 801069e:	7bfb      	ldrb	r3, [r7, #15]
 80106a0:	b2db      	uxtb	r3, r3
 80106a2:	3301      	adds	r3, #1
 80106a4:	b2db      	uxtb	r3, r3
 80106a6:	73fb      	strb	r3, [r7, #15]
 80106a8:	2300      	movs	r3, #0
 80106aa:	82fb      	strh	r3, [r7, #22]
 80106ac:	e055      	b.n	801075a <StartCleanTask+0x24e>
 80106ae:	7bfb      	ldrb	r3, [r7, #15]
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	2b01      	cmp	r3, #1
 80106b4:	bf0c      	ite	eq
 80106b6:	2301      	moveq	r3, #1
 80106b8:	2300      	movne	r3, #0
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d01d      	beq.n	80106fc <StartCleanTask+0x1f0>
 80106c0:	2100      	movs	r1, #0
 80106c2:	4830      	ldr	r0, [pc, #192]	@ (8010784 <StartCleanTask+0x278>)
 80106c4:	f7fa fdf4 	bl	800b2b0 <_ZN13Communication11ToggleValveEb>
 80106c8:	2101      	movs	r1, #1
 80106ca:	482e      	ldr	r0, [pc, #184]	@ (8010784 <StartCleanTask+0x278>)
 80106cc:	f7fa fdb6 	bl	800b23c <_ZN13Communication10TogglePumpEb>
 80106d0:	4b2d      	ldr	r3, [pc, #180]	@ (8010788 <StartCleanTask+0x27c>)
 80106d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00b      	beq.n	80106f0 <StartCleanTask+0x1e4>
 80106d8:	4b2b      	ldr	r3, [pc, #172]	@ (8010788 <StartCleanTask+0x27c>)
 80106da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d007      	beq.n	80106f0 <StartCleanTask+0x1e4>
 80106e0:	4b29      	ldr	r3, [pc, #164]	@ (8010788 <StartCleanTask+0x27c>)
 80106e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7f6 f9c1 	bl	8006a6c <osThreadTerminate>
 80106ea:	4b27      	ldr	r3, [pc, #156]	@ (8010788 <StartCleanTask+0x27c>)
 80106ec:	2200      	movs	r2, #0
 80106ee:	671a      	str	r2, [r3, #112]	@ 0x70
 80106f0:	7bfb      	ldrb	r3, [r7, #15]
 80106f2:	b2db      	uxtb	r3, r3
 80106f4:	3301      	adds	r3, #1
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	73fb      	strb	r3, [r7, #15]
 80106fa:	e02e      	b.n	801075a <StartCleanTask+0x24e>
 80106fc:	7bfb      	ldrb	r3, [r7, #15]
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	2b03      	cmp	r3, #3
 8010702:	bf0c      	ite	eq
 8010704:	2301      	moveq	r3, #1
 8010706:	2300      	movne	r3, #0
 8010708:	b2db      	uxtb	r3, r3
 801070a:	2b00      	cmp	r3, #0
 801070c:	d025      	beq.n	801075a <StartCleanTask+0x24e>
 801070e:	4b20      	ldr	r3, [pc, #128]	@ (8010790 <StartCleanTask+0x284>)
 8010710:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8010714:	f083 0301 	eor.w	r3, r3, #1
 8010718:	b2db      	uxtb	r3, r3
 801071a:	2b00      	cmp	r3, #0
 801071c:	d004      	beq.n	8010728 <StartCleanTask+0x21c>
 801071e:	2202      	movs	r2, #2
 8010720:	2106      	movs	r1, #6
 8010722:	2002      	movs	r0, #2
 8010724:	f7fe faf6 	bl	800ed14 <SendFeedback>
 8010728:	4b19      	ldr	r3, [pc, #100]	@ (8010790 <StartCleanTask+0x284>)
 801072a:	2200      	movs	r2, #0
 801072c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8010730:	4b15      	ldr	r3, [pc, #84]	@ (8010788 <StartCleanTask+0x27c>)
 8010732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010736:	2b00      	cmp	r3, #0
 8010738:	d01c      	beq.n	8010774 <StartCleanTask+0x268>
 801073a:	4b13      	ldr	r3, [pc, #76]	@ (8010788 <StartCleanTask+0x27c>)
 801073c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010740:	2b00      	cmp	r3, #0
 8010742:	d017      	beq.n	8010774 <StartCleanTask+0x268>
 8010744:	4b10      	ldr	r3, [pc, #64]	@ (8010788 <StartCleanTask+0x27c>)
 8010746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801074a:	4618      	mov	r0, r3
 801074c:	f7f6 f98e 	bl	8006a6c <osThreadTerminate>
 8010750:	4b0d      	ldr	r3, [pc, #52]	@ (8010788 <StartCleanTask+0x27c>)
 8010752:	2200      	movs	r2, #0
 8010754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010758:	e00c      	b.n	8010774 <StartCleanTask+0x268>
 801075a:	4b0d      	ldr	r3, [pc, #52]	@ (8010790 <StartCleanTask+0x284>)
 801075c:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8010760:	2b00      	cmp	r3, #0
 8010762:	d003      	beq.n	801076c <StartCleanTask+0x260>
 8010764:	2064      	movs	r0, #100	@ 0x64
 8010766:	f7f1 facd 	bl	8001d04 <HAL_Delay>
 801076a:	e6f0      	b.n	801054e <StartCleanTask+0x42>
 801076c:	2064      	movs	r0, #100	@ 0x64
 801076e:	f7f7 fe77 	bl	8008460 <vTaskDelay>
 8010772:	e6ec      	b.n	801054e <StartCleanTask+0x42>
 8010774:	bf00      	nop
 8010776:	bf00      	nop
 8010778:	3718      	adds	r7, #24
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}
 801077e:	bf00      	nop
 8010780:	20007048 	.word	0x20007048
 8010784:	20009080 	.word	0x20009080
 8010788:	200090bc 	.word	0x200090bc
 801078c:	20009328 	.word	0x20009328
 8010790:	200092ac 	.word	0x200092ac

08010794 <StartSafeModeTask>:
 8010794:	b580      	push	{r7, lr}
 8010796:	b086      	sub	sp, #24
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80107a0:	613b      	str	r3, [r7, #16]
 80107a2:	2364      	movs	r3, #100	@ 0x64
 80107a4:	60fb      	str	r3, [r7, #12]
 80107a6:	2300      	movs	r3, #0
 80107a8:	75fb      	strb	r3, [r7, #23]
 80107aa:	2300      	movs	r3, #0
 80107ac:	75bb      	strb	r3, [r7, #22]
 80107ae:	4837      	ldr	r0, [pc, #220]	@ (801088c <StartSafeModeTask+0xf8>)
 80107b0:	f7fd f9a4 	bl	800dafc <_ZN8LoadCell17ReadVolumeAndFlowEv>
 80107b4:	7dfb      	ldrb	r3, [r7, #23]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d12b      	bne.n	8010812 <StartSafeModeTask+0x7e>
 80107ba:	4b35      	ldr	r3, [pc, #212]	@ (8010890 <StartSafeModeTask+0xfc>)
 80107bc:	699b      	ldr	r3, [r3, #24]
 80107be:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80107c2:	3308      	adds	r3, #8
 80107c4:	ee07 3a90 	vmov	s15, r3
 80107c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80107cc:	4b2f      	ldr	r3, [pc, #188]	@ (801088c <StartSafeModeTask+0xf8>)
 80107ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80107d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80107d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80107da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107de:	bf4c      	ite	mi
 80107e0:	2301      	movmi	r3, #1
 80107e2:	2300      	movpl	r3, #0
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d00e      	beq.n	8010808 <StartSafeModeTask+0x74>
 80107ea:	2101      	movs	r1, #1
 80107ec:	4829      	ldr	r0, [pc, #164]	@ (8010894 <StartSafeModeTask+0x100>)
 80107ee:	f7fa fd25 	bl	800b23c <_ZN13Communication10TogglePumpEb>
 80107f2:	4b29      	ldr	r3, [pc, #164]	@ (8010898 <StartSafeModeTask+0x104>)
 80107f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7f6 f938 	bl	8006a6c <osThreadTerminate>
 80107fc:	4b26      	ldr	r3, [pc, #152]	@ (8010898 <StartSafeModeTask+0x104>)
 80107fe:	2200      	movs	r2, #0
 8010800:	671a      	str	r2, [r3, #112]	@ 0x70
 8010802:	7dfb      	ldrb	r3, [r7, #23]
 8010804:	3301      	adds	r3, #1
 8010806:	75fb      	strb	r3, [r7, #23]
 8010808:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801080c:	f7f7 fe28 	bl	8008460 <vTaskDelay>
 8010810:	e7cd      	b.n	80107ae <StartSafeModeTask+0x1a>
 8010812:	7dfb      	ldrb	r3, [r7, #23]
 8010814:	2b01      	cmp	r3, #1
 8010816:	d1ca      	bne.n	80107ae <StartSafeModeTask+0x1a>
 8010818:	4b1d      	ldr	r3, [pc, #116]	@ (8010890 <StartSafeModeTask+0xfc>)
 801081a:	699b      	ldr	r3, [r3, #24]
 801081c:	ee07 3a90 	vmov	s15, r3
 8010820:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010824:	4b19      	ldr	r3, [pc, #100]	@ (801088c <StartSafeModeTask+0xf8>)
 8010826:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801082a:	edd3 7a04 	vldr	s15, [r3, #16]
 801082e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010836:	dc12      	bgt.n	801085e <StartSafeModeTask+0xca>
 8010838:	4b15      	ldr	r3, [pc, #84]	@ (8010890 <StartSafeModeTask+0xfc>)
 801083a:	699b      	ldr	r3, [r3, #24]
 801083c:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8010840:	3308      	adds	r3, #8
 8010842:	ee07 3a90 	vmov	s15, r3
 8010846:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801084a:	4b10      	ldr	r3, [pc, #64]	@ (801088c <StartSafeModeTask+0xf8>)
 801084c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010850:	edd3 7a04 	vldr	s15, [r3, #16]
 8010854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801085c:	db01      	blt.n	8010862 <StartSafeModeTask+0xce>
 801085e:	2301      	movs	r3, #1
 8010860:	e000      	b.n	8010864 <StartSafeModeTask+0xd0>
 8010862:	2300      	movs	r3, #0
 8010864:	2b00      	cmp	r3, #0
 8010866:	d002      	beq.n	801086e <StartSafeModeTask+0xda>
 8010868:	7dbb      	ldrb	r3, [r7, #22]
 801086a:	3301      	adds	r3, #1
 801086c:	75bb      	strb	r3, [r7, #22]
 801086e:	7dbb      	ldrb	r3, [r7, #22]
 8010870:	2b03      	cmp	r3, #3
 8010872:	d907      	bls.n	8010884 <StartSafeModeTask+0xf0>
 8010874:	2100      	movs	r1, #0
 8010876:	4807      	ldr	r0, [pc, #28]	@ (8010894 <StartSafeModeTask+0x100>)
 8010878:	f7fa fce0 	bl	800b23c <_ZN13Communication10TogglePumpEb>
 801087c:	2300      	movs	r3, #0
 801087e:	75fb      	strb	r3, [r7, #23]
 8010880:	2300      	movs	r3, #0
 8010882:	75bb      	strb	r3, [r7, #22]
 8010884:	2064      	movs	r0, #100	@ 0x64
 8010886:	f7f7 fdeb 	bl	8008460 <vTaskDelay>
 801088a:	e790      	b.n	80107ae <StartSafeModeTask+0x1a>
 801088c:	20007048 	.word	0x20007048
 8010890:	200092ac 	.word	0x200092ac
 8010894:	20009080 	.word	0x20009080
 8010898:	200090bc 	.word	0x200090bc

0801089c <FixVolume>:
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	f000 f847 	bl	8010934 <ClearLoadcellParams>
 80108a6:	2300      	movs	r3, #0
 80108a8:	71fb      	strb	r3, [r7, #7]
 80108aa:	f04f 0300 	mov.w	r3, #0
 80108ae:	603b      	str	r3, [r7, #0]
 80108b0:	e01f      	b.n	80108f2 <FixVolume+0x56>
 80108b2:	200a      	movs	r0, #10
 80108b4:	f7f1 fa26 	bl	8001d04 <HAL_Delay>
 80108b8:	2100      	movs	r1, #0
 80108ba:	481c      	ldr	r0, [pc, #112]	@ (801092c <FixVolume+0x90>)
 80108bc:	f7fd fa28 	bl	800dd10 <_ZN8LoadCell10ReadVolumeEb>
 80108c0:	4b1a      	ldr	r3, [pc, #104]	@ (801092c <FixVolume+0x90>)
 80108c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80108c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80108ca:	ed97 7a00 	vldr	s14, [r7]
 80108ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d6:	bf4c      	ite	mi
 80108d8:	2301      	movmi	r3, #1
 80108da:	2300      	movpl	r3, #0
 80108dc:	b2db      	uxtb	r3, r3
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d004      	beq.n	80108ec <FixVolume+0x50>
 80108e2:	4b12      	ldr	r3, [pc, #72]	@ (801092c <FixVolume+0x90>)
 80108e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80108e8:	6a1b      	ldr	r3, [r3, #32]
 80108ea:	603b      	str	r3, [r7, #0]
 80108ec:	79fb      	ldrb	r3, [r7, #7]
 80108ee:	3301      	adds	r3, #1
 80108f0:	71fb      	strb	r3, [r7, #7]
 80108f2:	79fb      	ldrb	r3, [r7, #7]
 80108f4:	2b09      	cmp	r3, #9
 80108f6:	d9dc      	bls.n	80108b2 <FixVolume+0x16>
 80108f8:	4b0d      	ldr	r3, [pc, #52]	@ (8010930 <FixVolume+0x94>)
 80108fa:	699b      	ldr	r3, [r3, #24]
 80108fc:	ee07 3a90 	vmov	s15, r3
 8010900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010904:	ed97 7a00 	vldr	s14, [r7]
 8010908:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801090c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010910:	dc00      	bgt.n	8010914 <FixVolume+0x78>
 8010912:	e007      	b.n	8010924 <FixVolume+0x88>
 8010914:	edd7 7a00 	vldr	s15, [r7]
 8010918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801091c:	ee17 2a90 	vmov	r2, s15
 8010920:	4b03      	ldr	r3, [pc, #12]	@ (8010930 <FixVolume+0x94>)
 8010922:	619a      	str	r2, [r3, #24]
 8010924:	bf00      	nop
 8010926:	3708      	adds	r7, #8
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	20007048 	.word	0x20007048
 8010930:	200092ac 	.word	0x200092ac

08010934 <ClearLoadcellParams>:
 8010934:	b580      	push	{r7, lr}
 8010936:	af00      	add	r7, sp, #0
 8010938:	4b09      	ldr	r3, [pc, #36]	@ (8010960 <ClearLoadcellParams+0x2c>)
 801093a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801093e:	461a      	mov	r2, r3
 8010940:	f04f 0300 	mov.w	r3, #0
 8010944:	6253      	str	r3, [r2, #36]	@ 0x24
 8010946:	4b06      	ldr	r3, [pc, #24]	@ (8010960 <ClearLoadcellParams+0x2c>)
 8010948:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801094c:	461a      	mov	r2, r3
 801094e:	f04f 0300 	mov.w	r3, #0
 8010952:	6293      	str	r3, [r2, #40]	@ 0x28
 8010954:	4802      	ldr	r0, [pc, #8]	@ (8010960 <ClearLoadcellParams+0x2c>)
 8010956:	f7fd fda5 	bl	800e4a4 <_ZN8LoadCell11ClearParamsEv>
 801095a:	bf00      	nop
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	20007048 	.word	0x20007048

08010964 <HasCalibration>:
 8010964:	b480      	push	{r7}
 8010966:	af00      	add	r7, sp, #0
 8010968:	4b0d      	ldr	r3, [pc, #52]	@ (80109a0 <HasCalibration+0x3c>)
 801096a:	edd3 7a08 	vldr	s15, [r3, #32]
 801096e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8010972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801097a:	d409      	bmi.n	8010990 <HasCalibration+0x2c>
 801097c:	4b08      	ldr	r3, [pc, #32]	@ (80109a0 <HasCalibration+0x3c>)
 801097e:	edd3 7a07 	vldr	s15, [r3, #28]
 8010982:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8010986:	eef4 7ac7 	vcmpe.f32	s15, s14
 801098a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801098e:	d501      	bpl.n	8010994 <HasCalibration+0x30>
 8010990:	2300      	movs	r3, #0
 8010992:	e000      	b.n	8010996 <HasCalibration+0x32>
 8010994:	2301      	movs	r3, #1
 8010996:	4618      	mov	r0, r3
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr
 80109a0:	200092ac 	.word	0x200092ac

080109a4 <HasLoadcell>:
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	4603      	mov	r3, r0
 80109ac:	71fb      	strb	r3, [r7, #7]
 80109ae:	79fb      	ldrb	r3, [r7, #7]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d002      	beq.n	80109ba <HasLoadcell+0x16>
 80109b4:	480d      	ldr	r0, [pc, #52]	@ (80109ec <HasLoadcell+0x48>)
 80109b6:	f7fd f8a1 	bl	800dafc <_ZN8LoadCell17ReadVolumeAndFlowEv>
 80109ba:	4b0c      	ldr	r3, [pc, #48]	@ (80109ec <HasLoadcell+0x48>)
 80109bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80109c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80109c4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80109f0 <HasLoadcell+0x4c>
 80109c8:	eef4 7a47 	vcmp.f32	s15, s14
 80109cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d0:	bf0c      	ite	eq
 80109d2:	2301      	moveq	r3, #1
 80109d4:	2300      	movne	r3, #0
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d001      	beq.n	80109e0 <HasLoadcell+0x3c>
 80109dc:	2300      	movs	r3, #0
 80109de:	e000      	b.n	80109e2 <HasLoadcell+0x3e>
 80109e0:	2301      	movs	r3, #1
 80109e2:	4618      	mov	r0, r3
 80109e4:	3708      	adds	r7, #8
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	bf00      	nop
 80109ec:	20007048 	.word	0x20007048
 80109f0:	499ffec0 	.word	0x499ffec0

080109f4 <HasFirstEmg>:
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	4603      	mov	r3, r0
 80109fc:	71fb      	strb	r3, [r7, #7]
 80109fe:	79fb      	ldrb	r3, [r7, #7]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d003      	beq.n	8010a0c <HasFirstEmg+0x18>
 8010a04:	2100      	movs	r1, #0
 8010a06:	480a      	ldr	r0, [pc, #40]	@ (8010a30 <HasFirstEmg+0x3c>)
 8010a08:	f7fa ffd4 	bl	800b9b4 <_ZN3Emg12FirstEmgReadEb>
 8010a0c:	4b08      	ldr	r3, [pc, #32]	@ (8010a30 <HasFirstEmg+0x3c>)
 8010a0e:	6a1b      	ldr	r3, [r3, #32]
 8010a10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a14:	4293      	cmp	r3, r2
 8010a16:	d003      	beq.n	8010a20 <HasFirstEmg+0x2c>
 8010a18:	4b05      	ldr	r3, [pc, #20]	@ (8010a30 <HasFirstEmg+0x3c>)
 8010a1a:	6a1b      	ldr	r3, [r3, #32]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d101      	bne.n	8010a24 <HasFirstEmg+0x30>
 8010a20:	2300      	movs	r3, #0
 8010a22:	e000      	b.n	8010a26 <HasFirstEmg+0x32>
 8010a24:	2301      	movs	r3, #1
 8010a26:	4618      	mov	r0, r3
 8010a28:	3708      	adds	r7, #8
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	20005004 	.word	0x20005004

08010a34 <HasSecondEmg>:
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	71fb      	strb	r3, [r7, #7]
 8010a3e:	79fb      	ldrb	r3, [r7, #7]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d003      	beq.n	8010a4c <HasSecondEmg+0x18>
 8010a44:	2100      	movs	r1, #0
 8010a46:	480a      	ldr	r0, [pc, #40]	@ (8010a70 <HasSecondEmg+0x3c>)
 8010a48:	f7fb f82c 	bl	800baa4 <_ZN3Emg13SecondEmgReadEb>
 8010a4c:	4b08      	ldr	r3, [pc, #32]	@ (8010a70 <HasSecondEmg+0x3c>)
 8010a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d003      	beq.n	8010a60 <HasSecondEmg+0x2c>
 8010a58:	4b05      	ldr	r3, [pc, #20]	@ (8010a70 <HasSecondEmg+0x3c>)
 8010a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d101      	bne.n	8010a64 <HasSecondEmg+0x30>
 8010a60:	2300      	movs	r3, #0
 8010a62:	e000      	b.n	8010a66 <HasSecondEmg+0x32>
 8010a64:	2301      	movs	r3, #1
 8010a66:	4618      	mov	r0, r3
 8010a68:	3708      	adds	r7, #8
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	20005004 	.word	0x20005004

08010a74 <_Z41__static_initialization_and_destruction_0v>:
 8010a74:	b580      	push	{r7, lr}
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	4808      	ldr	r0, [pc, #32]	@ (8010a9c <_Z41__static_initialization_and_destruction_0v+0x28>)
 8010a7a:	f7fa ff55 	bl	800b928 <_ZN3EmgC1Ev>
 8010a7e:	4808      	ldr	r0, [pc, #32]	@ (8010aa0 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8010a80:	f7fc ffea 	bl	800da58 <_ZN8LoadCellC1Ev>
 8010a84:	4807      	ldr	r0, [pc, #28]	@ (8010aa4 <_Z41__static_initialization_and_destruction_0v+0x30>)
 8010a86:	f7f9 fb57 	bl	800a138 <_ZN13CommunicationC1Ev>
 8010a8a:	4807      	ldr	r0, [pc, #28]	@ (8010aa8 <_Z41__static_initialization_and_destruction_0v+0x34>)
 8010a8c:	f7fb fb9e 	bl	800c1cc <_ZN12FlashManagerC1Ev>
 8010a90:	4806      	ldr	r0, [pc, #24]	@ (8010aac <_Z41__static_initialization_and_destruction_0v+0x38>)
 8010a92:	f7fd fe29 	bl	800e6e8 <_ZN18SystemConfigStructC1Ev>
 8010a96:	bf00      	nop
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	20005004 	.word	0x20005004
 8010aa0:	20007048 	.word	0x20007048
 8010aa4:	20009080 	.word	0x20009080
 8010aa8:	200090a0 	.word	0x200090a0
 8010aac:	200092ac 	.word	0x200092ac

08010ab0 <_Z41__static_initialization_and_destruction_1v>:
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	4806      	ldr	r0, [pc, #24]	@ (8010ad0 <_Z41__static_initialization_and_destruction_1v+0x20>)
 8010ab6:	f7fb fbd9 	bl	800c26c <_ZN12FlashManagerD1Ev>
 8010aba:	4806      	ldr	r0, [pc, #24]	@ (8010ad4 <_Z41__static_initialization_and_destruction_1v+0x24>)
 8010abc:	f7f9 fb54 	bl	800a168 <_ZN13CommunicationD1Ev>
 8010ac0:	4805      	ldr	r0, [pc, #20]	@ (8010ad8 <_Z41__static_initialization_and_destruction_1v+0x28>)
 8010ac2:	f7fc ffd9 	bl	800da78 <_ZN8LoadCellD1Ev>
 8010ac6:	4805      	ldr	r0, [pc, #20]	@ (8010adc <_Z41__static_initialization_and_destruction_1v+0x2c>)
 8010ac8:	f7fa ff52 	bl	800b970 <_ZN3EmgD1Ev>
 8010acc:	bf00      	nop
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	200090a0 	.word	0x200090a0
 8010ad4:	20009080 	.word	0x20009080
 8010ad8:	20007048 	.word	0x20007048
 8010adc:	20005004 	.word	0x20005004

08010ae0 <_GLOBAL__sub_I_sendCounter>:
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	f7ff ffc6 	bl	8010a74 <_Z41__static_initialization_and_destruction_0v>
 8010ae8:	bd80      	pop	{r7, pc}

08010aea <_GLOBAL__sub_D_sendCounter>:
 8010aea:	b580      	push	{r7, lr}
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	f7ff ffdf 	bl	8010ab0 <_Z41__static_initialization_and_destruction_1v>
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <_ZdlPvj>:
 8010af4:	f000 b800 	b.w	8010af8 <_ZdlPv>

08010af8 <_ZdlPv>:
 8010af8:	f000 b88e 	b.w	8010c18 <free>

08010afc <ceilf>:
 8010afc:	ee10 3a10 	vmov	r3, s0
 8010b00:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010b04:	3a7f      	subs	r2, #127	@ 0x7f
 8010b06:	2a16      	cmp	r2, #22
 8010b08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010b0c:	dc2b      	bgt.n	8010b66 <ceilf+0x6a>
 8010b0e:	2a00      	cmp	r2, #0
 8010b10:	da12      	bge.n	8010b38 <ceilf+0x3c>
 8010b12:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010b78 <ceilf+0x7c>
 8010b16:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b1a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b22:	dd06      	ble.n	8010b32 <ceilf+0x36>
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	db24      	blt.n	8010b72 <ceilf+0x76>
 8010b28:	2900      	cmp	r1, #0
 8010b2a:	bf14      	ite	ne
 8010b2c:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 8010b30:	2300      	moveq	r3, #0
 8010b32:	ee00 3a10 	vmov	s0, r3
 8010b36:	4770      	bx	lr
 8010b38:	4910      	ldr	r1, [pc, #64]	@ (8010b7c <ceilf+0x80>)
 8010b3a:	4111      	asrs	r1, r2
 8010b3c:	420b      	tst	r3, r1
 8010b3e:	d0fa      	beq.n	8010b36 <ceilf+0x3a>
 8010b40:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010b78 <ceilf+0x7c>
 8010b44:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b48:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b50:	ddef      	ble.n	8010b32 <ceilf+0x36>
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	bfc2      	ittt	gt
 8010b56:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 8010b5a:	fa40 f202 	asrgt.w	r2, r0, r2
 8010b5e:	189b      	addgt	r3, r3, r2
 8010b60:	ea23 0301 	bic.w	r3, r3, r1
 8010b64:	e7e5      	b.n	8010b32 <ceilf+0x36>
 8010b66:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010b6a:	d3e4      	bcc.n	8010b36 <ceilf+0x3a>
 8010b6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010b70:	4770      	bx	lr
 8010b72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010b76:	e7dc      	b.n	8010b32 <ceilf+0x36>
 8010b78:	7149f2ca 	.word	0x7149f2ca
 8010b7c:	007fffff 	.word	0x007fffff

08010b80 <floorf>:
 8010b80:	ee10 3a10 	vmov	r3, s0
 8010b84:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010b88:	3a7f      	subs	r2, #127	@ 0x7f
 8010b8a:	2a16      	cmp	r2, #22
 8010b8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010b90:	dc2b      	bgt.n	8010bea <floorf+0x6a>
 8010b92:	2a00      	cmp	r2, #0
 8010b94:	da12      	bge.n	8010bbc <floorf+0x3c>
 8010b96:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010bfc <floorf+0x7c>
 8010b9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ba6:	dd06      	ble.n	8010bb6 <floorf+0x36>
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	da24      	bge.n	8010bf6 <floorf+0x76>
 8010bac:	2900      	cmp	r1, #0
 8010bae:	4b14      	ldr	r3, [pc, #80]	@ (8010c00 <floorf+0x80>)
 8010bb0:	bf08      	it	eq
 8010bb2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010bb6:	ee00 3a10 	vmov	s0, r3
 8010bba:	4770      	bx	lr
 8010bbc:	4911      	ldr	r1, [pc, #68]	@ (8010c04 <floorf+0x84>)
 8010bbe:	4111      	asrs	r1, r2
 8010bc0:	420b      	tst	r3, r1
 8010bc2:	d0fa      	beq.n	8010bba <floorf+0x3a>
 8010bc4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010bfc <floorf+0x7c>
 8010bc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010bcc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd4:	ddef      	ble.n	8010bb6 <floorf+0x36>
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	bfbe      	ittt	lt
 8010bda:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010bde:	fa40 f202 	asrlt.w	r2, r0, r2
 8010be2:	189b      	addlt	r3, r3, r2
 8010be4:	ea23 0301 	bic.w	r3, r3, r1
 8010be8:	e7e5      	b.n	8010bb6 <floorf+0x36>
 8010bea:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010bee:	d3e4      	bcc.n	8010bba <floorf+0x3a>
 8010bf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010bf4:	4770      	bx	lr
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	e7dd      	b.n	8010bb6 <floorf+0x36>
 8010bfa:	bf00      	nop
 8010bfc:	7149f2ca 	.word	0x7149f2ca
 8010c00:	bf800000 	.word	0xbf800000
 8010c04:	007fffff 	.word	0x007fffff

08010c08 <malloc>:
 8010c08:	4b02      	ldr	r3, [pc, #8]	@ (8010c14 <malloc+0xc>)
 8010c0a:	4601      	mov	r1, r0
 8010c0c:	6818      	ldr	r0, [r3, #0]
 8010c0e:	f000 b82d 	b.w	8010c6c <_malloc_r>
 8010c12:	bf00      	nop
 8010c14:	2000005c 	.word	0x2000005c

08010c18 <free>:
 8010c18:	4b02      	ldr	r3, [pc, #8]	@ (8010c24 <free+0xc>)
 8010c1a:	4601      	mov	r1, r0
 8010c1c:	6818      	ldr	r0, [r3, #0]
 8010c1e:	f000 baad 	b.w	801117c <_free_r>
 8010c22:	bf00      	nop
 8010c24:	2000005c 	.word	0x2000005c

08010c28 <sbrk_aligned>:
 8010c28:	b570      	push	{r4, r5, r6, lr}
 8010c2a:	4e0f      	ldr	r6, [pc, #60]	@ (8010c68 <sbrk_aligned+0x40>)
 8010c2c:	460c      	mov	r4, r1
 8010c2e:	6831      	ldr	r1, [r6, #0]
 8010c30:	4605      	mov	r5, r0
 8010c32:	b911      	cbnz	r1, 8010c3a <sbrk_aligned+0x12>
 8010c34:	f000 fa26 	bl	8011084 <_sbrk_r>
 8010c38:	6030      	str	r0, [r6, #0]
 8010c3a:	4621      	mov	r1, r4
 8010c3c:	4628      	mov	r0, r5
 8010c3e:	f000 fa21 	bl	8011084 <_sbrk_r>
 8010c42:	1c43      	adds	r3, r0, #1
 8010c44:	d103      	bne.n	8010c4e <sbrk_aligned+0x26>
 8010c46:	f04f 34ff 	mov.w	r4, #4294967295
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	bd70      	pop	{r4, r5, r6, pc}
 8010c4e:	1cc4      	adds	r4, r0, #3
 8010c50:	f024 0403 	bic.w	r4, r4, #3
 8010c54:	42a0      	cmp	r0, r4
 8010c56:	d0f8      	beq.n	8010c4a <sbrk_aligned+0x22>
 8010c58:	1a21      	subs	r1, r4, r0
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	f000 fa12 	bl	8011084 <_sbrk_r>
 8010c60:	3001      	adds	r0, #1
 8010c62:	d1f2      	bne.n	8010c4a <sbrk_aligned+0x22>
 8010c64:	e7ef      	b.n	8010c46 <sbrk_aligned+0x1e>
 8010c66:	bf00      	nop
 8010c68:	200093c0 	.word	0x200093c0

08010c6c <_malloc_r>:
 8010c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c70:	1ccd      	adds	r5, r1, #3
 8010c72:	f025 0503 	bic.w	r5, r5, #3
 8010c76:	3508      	adds	r5, #8
 8010c78:	2d0c      	cmp	r5, #12
 8010c7a:	bf38      	it	cc
 8010c7c:	250c      	movcc	r5, #12
 8010c7e:	2d00      	cmp	r5, #0
 8010c80:	4606      	mov	r6, r0
 8010c82:	db01      	blt.n	8010c88 <_malloc_r+0x1c>
 8010c84:	42a9      	cmp	r1, r5
 8010c86:	d904      	bls.n	8010c92 <_malloc_r+0x26>
 8010c88:	230c      	movs	r3, #12
 8010c8a:	6033      	str	r3, [r6, #0]
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010d68 <_malloc_r+0xfc>
 8010c96:	f000 f869 	bl	8010d6c <__malloc_lock>
 8010c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8010c9e:	461c      	mov	r4, r3
 8010ca0:	bb44      	cbnz	r4, 8010cf4 <_malloc_r+0x88>
 8010ca2:	4629      	mov	r1, r5
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	f7ff ffbf 	bl	8010c28 <sbrk_aligned>
 8010caa:	1c43      	adds	r3, r0, #1
 8010cac:	4604      	mov	r4, r0
 8010cae:	d158      	bne.n	8010d62 <_malloc_r+0xf6>
 8010cb0:	f8d8 4000 	ldr.w	r4, [r8]
 8010cb4:	4627      	mov	r7, r4
 8010cb6:	2f00      	cmp	r7, #0
 8010cb8:	d143      	bne.n	8010d42 <_malloc_r+0xd6>
 8010cba:	2c00      	cmp	r4, #0
 8010cbc:	d04b      	beq.n	8010d56 <_malloc_r+0xea>
 8010cbe:	6823      	ldr	r3, [r4, #0]
 8010cc0:	4639      	mov	r1, r7
 8010cc2:	4630      	mov	r0, r6
 8010cc4:	eb04 0903 	add.w	r9, r4, r3
 8010cc8:	f000 f9dc 	bl	8011084 <_sbrk_r>
 8010ccc:	4581      	cmp	r9, r0
 8010cce:	d142      	bne.n	8010d56 <_malloc_r+0xea>
 8010cd0:	6821      	ldr	r1, [r4, #0]
 8010cd2:	1a6d      	subs	r5, r5, r1
 8010cd4:	4629      	mov	r1, r5
 8010cd6:	4630      	mov	r0, r6
 8010cd8:	f7ff ffa6 	bl	8010c28 <sbrk_aligned>
 8010cdc:	3001      	adds	r0, #1
 8010cde:	d03a      	beq.n	8010d56 <_malloc_r+0xea>
 8010ce0:	6823      	ldr	r3, [r4, #0]
 8010ce2:	442b      	add	r3, r5
 8010ce4:	6023      	str	r3, [r4, #0]
 8010ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8010cea:	685a      	ldr	r2, [r3, #4]
 8010cec:	bb62      	cbnz	r2, 8010d48 <_malloc_r+0xdc>
 8010cee:	f8c8 7000 	str.w	r7, [r8]
 8010cf2:	e00f      	b.n	8010d14 <_malloc_r+0xa8>
 8010cf4:	6822      	ldr	r2, [r4, #0]
 8010cf6:	1b52      	subs	r2, r2, r5
 8010cf8:	d420      	bmi.n	8010d3c <_malloc_r+0xd0>
 8010cfa:	2a0b      	cmp	r2, #11
 8010cfc:	d917      	bls.n	8010d2e <_malloc_r+0xc2>
 8010cfe:	1961      	adds	r1, r4, r5
 8010d00:	42a3      	cmp	r3, r4
 8010d02:	6025      	str	r5, [r4, #0]
 8010d04:	bf18      	it	ne
 8010d06:	6059      	strne	r1, [r3, #4]
 8010d08:	6863      	ldr	r3, [r4, #4]
 8010d0a:	bf08      	it	eq
 8010d0c:	f8c8 1000 	streq.w	r1, [r8]
 8010d10:	5162      	str	r2, [r4, r5]
 8010d12:	604b      	str	r3, [r1, #4]
 8010d14:	4630      	mov	r0, r6
 8010d16:	f000 f82f 	bl	8010d78 <__malloc_unlock>
 8010d1a:	f104 000b 	add.w	r0, r4, #11
 8010d1e:	1d23      	adds	r3, r4, #4
 8010d20:	f020 0007 	bic.w	r0, r0, #7
 8010d24:	1ac2      	subs	r2, r0, r3
 8010d26:	bf1c      	itt	ne
 8010d28:	1a1b      	subne	r3, r3, r0
 8010d2a:	50a3      	strne	r3, [r4, r2]
 8010d2c:	e7af      	b.n	8010c8e <_malloc_r+0x22>
 8010d2e:	6862      	ldr	r2, [r4, #4]
 8010d30:	42a3      	cmp	r3, r4
 8010d32:	bf0c      	ite	eq
 8010d34:	f8c8 2000 	streq.w	r2, [r8]
 8010d38:	605a      	strne	r2, [r3, #4]
 8010d3a:	e7eb      	b.n	8010d14 <_malloc_r+0xa8>
 8010d3c:	4623      	mov	r3, r4
 8010d3e:	6864      	ldr	r4, [r4, #4]
 8010d40:	e7ae      	b.n	8010ca0 <_malloc_r+0x34>
 8010d42:	463c      	mov	r4, r7
 8010d44:	687f      	ldr	r7, [r7, #4]
 8010d46:	e7b6      	b.n	8010cb6 <_malloc_r+0x4a>
 8010d48:	461a      	mov	r2, r3
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	42a3      	cmp	r3, r4
 8010d4e:	d1fb      	bne.n	8010d48 <_malloc_r+0xdc>
 8010d50:	2300      	movs	r3, #0
 8010d52:	6053      	str	r3, [r2, #4]
 8010d54:	e7de      	b.n	8010d14 <_malloc_r+0xa8>
 8010d56:	230c      	movs	r3, #12
 8010d58:	6033      	str	r3, [r6, #0]
 8010d5a:	4630      	mov	r0, r6
 8010d5c:	f000 f80c 	bl	8010d78 <__malloc_unlock>
 8010d60:	e794      	b.n	8010c8c <_malloc_r+0x20>
 8010d62:	6005      	str	r5, [r0, #0]
 8010d64:	e7d6      	b.n	8010d14 <_malloc_r+0xa8>
 8010d66:	bf00      	nop
 8010d68:	200093c4 	.word	0x200093c4

08010d6c <__malloc_lock>:
 8010d6c:	4801      	ldr	r0, [pc, #4]	@ (8010d74 <__malloc_lock+0x8>)
 8010d6e:	f000 b9d6 	b.w	801111e <__retarget_lock_acquire_recursive>
 8010d72:	bf00      	nop
 8010d74:	20009508 	.word	0x20009508

08010d78 <__malloc_unlock>:
 8010d78:	4801      	ldr	r0, [pc, #4]	@ (8010d80 <__malloc_unlock+0x8>)
 8010d7a:	f000 b9d1 	b.w	8011120 <__retarget_lock_release_recursive>
 8010d7e:	bf00      	nop
 8010d80:	20009508 	.word	0x20009508

08010d84 <rand>:
 8010d84:	4b16      	ldr	r3, [pc, #88]	@ (8010de0 <rand+0x5c>)
 8010d86:	b510      	push	{r4, lr}
 8010d88:	681c      	ldr	r4, [r3, #0]
 8010d8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d8c:	b9b3      	cbnz	r3, 8010dbc <rand+0x38>
 8010d8e:	2018      	movs	r0, #24
 8010d90:	f7ff ff3a 	bl	8010c08 <malloc>
 8010d94:	4602      	mov	r2, r0
 8010d96:	6320      	str	r0, [r4, #48]	@ 0x30
 8010d98:	b920      	cbnz	r0, 8010da4 <rand+0x20>
 8010d9a:	4b12      	ldr	r3, [pc, #72]	@ (8010de4 <rand+0x60>)
 8010d9c:	4812      	ldr	r0, [pc, #72]	@ (8010de8 <rand+0x64>)
 8010d9e:	2152      	movs	r1, #82	@ 0x52
 8010da0:	f000 f9ce 	bl	8011140 <__assert_func>
 8010da4:	4911      	ldr	r1, [pc, #68]	@ (8010dec <rand+0x68>)
 8010da6:	4b12      	ldr	r3, [pc, #72]	@ (8010df0 <rand+0x6c>)
 8010da8:	e9c0 1300 	strd	r1, r3, [r0]
 8010dac:	4b11      	ldr	r3, [pc, #68]	@ (8010df4 <rand+0x70>)
 8010dae:	6083      	str	r3, [r0, #8]
 8010db0:	230b      	movs	r3, #11
 8010db2:	8183      	strh	r3, [r0, #12]
 8010db4:	2100      	movs	r1, #0
 8010db6:	2001      	movs	r0, #1
 8010db8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010dbc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010dbe:	480e      	ldr	r0, [pc, #56]	@ (8010df8 <rand+0x74>)
 8010dc0:	690b      	ldr	r3, [r1, #16]
 8010dc2:	694c      	ldr	r4, [r1, #20]
 8010dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8010dfc <rand+0x78>)
 8010dc6:	4358      	muls	r0, r3
 8010dc8:	fb02 0004 	mla	r0, r2, r4, r0
 8010dcc:	fba3 3202 	umull	r3, r2, r3, r2
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	eb40 0002 	adc.w	r0, r0, r2
 8010dd6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010dda:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010dde:	bd10      	pop	{r4, pc}
 8010de0:	2000005c 	.word	0x2000005c
 8010de4:	08011dc4 	.word	0x08011dc4
 8010de8:	08011ddb 	.word	0x08011ddb
 8010dec:	abcd330e 	.word	0xabcd330e
 8010df0:	e66d1234 	.word	0xe66d1234
 8010df4:	0005deec 	.word	0x0005deec
 8010df8:	5851f42d 	.word	0x5851f42d
 8010dfc:	4c957f2d 	.word	0x4c957f2d

08010e00 <std>:
 8010e00:	2300      	movs	r3, #0
 8010e02:	b510      	push	{r4, lr}
 8010e04:	4604      	mov	r4, r0
 8010e06:	e9c0 3300 	strd	r3, r3, [r0]
 8010e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e0e:	6083      	str	r3, [r0, #8]
 8010e10:	8181      	strh	r1, [r0, #12]
 8010e12:	6643      	str	r3, [r0, #100]	@ 0x64
 8010e14:	81c2      	strh	r2, [r0, #14]
 8010e16:	6183      	str	r3, [r0, #24]
 8010e18:	4619      	mov	r1, r3
 8010e1a:	2208      	movs	r2, #8
 8010e1c:	305c      	adds	r0, #92	@ 0x5c
 8010e1e:	f000 f8f4 	bl	801100a <memset>
 8010e22:	4b0d      	ldr	r3, [pc, #52]	@ (8010e58 <std+0x58>)
 8010e24:	6263      	str	r3, [r4, #36]	@ 0x24
 8010e26:	4b0d      	ldr	r3, [pc, #52]	@ (8010e5c <std+0x5c>)
 8010e28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8010e60 <std+0x60>)
 8010e2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8010e64 <std+0x64>)
 8010e30:	6323      	str	r3, [r4, #48]	@ 0x30
 8010e32:	4b0d      	ldr	r3, [pc, #52]	@ (8010e68 <std+0x68>)
 8010e34:	6224      	str	r4, [r4, #32]
 8010e36:	429c      	cmp	r4, r3
 8010e38:	d006      	beq.n	8010e48 <std+0x48>
 8010e3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010e3e:	4294      	cmp	r4, r2
 8010e40:	d002      	beq.n	8010e48 <std+0x48>
 8010e42:	33d0      	adds	r3, #208	@ 0xd0
 8010e44:	429c      	cmp	r4, r3
 8010e46:	d105      	bne.n	8010e54 <std+0x54>
 8010e48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e50:	f000 b964 	b.w	801111c <__retarget_lock_init_recursive>
 8010e54:	bd10      	pop	{r4, pc}
 8010e56:	bf00      	nop
 8010e58:	08010f85 	.word	0x08010f85
 8010e5c:	08010fa7 	.word	0x08010fa7
 8010e60:	08010fdf 	.word	0x08010fdf
 8010e64:	08011003 	.word	0x08011003
 8010e68:	200093c8 	.word	0x200093c8

08010e6c <stdio_exit_handler>:
 8010e6c:	4a02      	ldr	r2, [pc, #8]	@ (8010e78 <stdio_exit_handler+0xc>)
 8010e6e:	4903      	ldr	r1, [pc, #12]	@ (8010e7c <stdio_exit_handler+0x10>)
 8010e70:	4803      	ldr	r0, [pc, #12]	@ (8010e80 <stdio_exit_handler+0x14>)
 8010e72:	f000 b869 	b.w	8010f48 <_fwalk_sglue>
 8010e76:	bf00      	nop
 8010e78:	20000050 	.word	0x20000050
 8010e7c:	08011319 	.word	0x08011319
 8010e80:	20000060 	.word	0x20000060

08010e84 <cleanup_stdio>:
 8010e84:	6841      	ldr	r1, [r0, #4]
 8010e86:	4b0c      	ldr	r3, [pc, #48]	@ (8010eb8 <cleanup_stdio+0x34>)
 8010e88:	4299      	cmp	r1, r3
 8010e8a:	b510      	push	{r4, lr}
 8010e8c:	4604      	mov	r4, r0
 8010e8e:	d001      	beq.n	8010e94 <cleanup_stdio+0x10>
 8010e90:	f000 fa42 	bl	8011318 <_fflush_r>
 8010e94:	68a1      	ldr	r1, [r4, #8]
 8010e96:	4b09      	ldr	r3, [pc, #36]	@ (8010ebc <cleanup_stdio+0x38>)
 8010e98:	4299      	cmp	r1, r3
 8010e9a:	d002      	beq.n	8010ea2 <cleanup_stdio+0x1e>
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f000 fa3b 	bl	8011318 <_fflush_r>
 8010ea2:	68e1      	ldr	r1, [r4, #12]
 8010ea4:	4b06      	ldr	r3, [pc, #24]	@ (8010ec0 <cleanup_stdio+0x3c>)
 8010ea6:	4299      	cmp	r1, r3
 8010ea8:	d004      	beq.n	8010eb4 <cleanup_stdio+0x30>
 8010eaa:	4620      	mov	r0, r4
 8010eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010eb0:	f000 ba32 	b.w	8011318 <_fflush_r>
 8010eb4:	bd10      	pop	{r4, pc}
 8010eb6:	bf00      	nop
 8010eb8:	200093c8 	.word	0x200093c8
 8010ebc:	20009430 	.word	0x20009430
 8010ec0:	20009498 	.word	0x20009498

08010ec4 <global_stdio_init.part.0>:
 8010ec4:	b510      	push	{r4, lr}
 8010ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8010ef4 <global_stdio_init.part.0+0x30>)
 8010ec8:	4c0b      	ldr	r4, [pc, #44]	@ (8010ef8 <global_stdio_init.part.0+0x34>)
 8010eca:	4a0c      	ldr	r2, [pc, #48]	@ (8010efc <global_stdio_init.part.0+0x38>)
 8010ecc:	601a      	str	r2, [r3, #0]
 8010ece:	4620      	mov	r0, r4
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	2104      	movs	r1, #4
 8010ed4:	f7ff ff94 	bl	8010e00 <std>
 8010ed8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010edc:	2201      	movs	r2, #1
 8010ede:	2109      	movs	r1, #9
 8010ee0:	f7ff ff8e 	bl	8010e00 <std>
 8010ee4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010ee8:	2202      	movs	r2, #2
 8010eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010eee:	2112      	movs	r1, #18
 8010ef0:	f7ff bf86 	b.w	8010e00 <std>
 8010ef4:	20009500 	.word	0x20009500
 8010ef8:	200093c8 	.word	0x200093c8
 8010efc:	08010e6d 	.word	0x08010e6d

08010f00 <__sfp_lock_acquire>:
 8010f00:	4801      	ldr	r0, [pc, #4]	@ (8010f08 <__sfp_lock_acquire+0x8>)
 8010f02:	f000 b90c 	b.w	801111e <__retarget_lock_acquire_recursive>
 8010f06:	bf00      	nop
 8010f08:	20009509 	.word	0x20009509

08010f0c <__sfp_lock_release>:
 8010f0c:	4801      	ldr	r0, [pc, #4]	@ (8010f14 <__sfp_lock_release+0x8>)
 8010f0e:	f000 b907 	b.w	8011120 <__retarget_lock_release_recursive>
 8010f12:	bf00      	nop
 8010f14:	20009509 	.word	0x20009509

08010f18 <__sinit>:
 8010f18:	b510      	push	{r4, lr}
 8010f1a:	4604      	mov	r4, r0
 8010f1c:	f7ff fff0 	bl	8010f00 <__sfp_lock_acquire>
 8010f20:	6a23      	ldr	r3, [r4, #32]
 8010f22:	b11b      	cbz	r3, 8010f2c <__sinit+0x14>
 8010f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f28:	f7ff bff0 	b.w	8010f0c <__sfp_lock_release>
 8010f2c:	4b04      	ldr	r3, [pc, #16]	@ (8010f40 <__sinit+0x28>)
 8010f2e:	6223      	str	r3, [r4, #32]
 8010f30:	4b04      	ldr	r3, [pc, #16]	@ (8010f44 <__sinit+0x2c>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1f5      	bne.n	8010f24 <__sinit+0xc>
 8010f38:	f7ff ffc4 	bl	8010ec4 <global_stdio_init.part.0>
 8010f3c:	e7f2      	b.n	8010f24 <__sinit+0xc>
 8010f3e:	bf00      	nop
 8010f40:	08010e85 	.word	0x08010e85
 8010f44:	20009500 	.word	0x20009500

08010f48 <_fwalk_sglue>:
 8010f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f4c:	4607      	mov	r7, r0
 8010f4e:	4688      	mov	r8, r1
 8010f50:	4614      	mov	r4, r2
 8010f52:	2600      	movs	r6, #0
 8010f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f58:	f1b9 0901 	subs.w	r9, r9, #1
 8010f5c:	d505      	bpl.n	8010f6a <_fwalk_sglue+0x22>
 8010f5e:	6824      	ldr	r4, [r4, #0]
 8010f60:	2c00      	cmp	r4, #0
 8010f62:	d1f7      	bne.n	8010f54 <_fwalk_sglue+0xc>
 8010f64:	4630      	mov	r0, r6
 8010f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f6a:	89ab      	ldrh	r3, [r5, #12]
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d907      	bls.n	8010f80 <_fwalk_sglue+0x38>
 8010f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f74:	3301      	adds	r3, #1
 8010f76:	d003      	beq.n	8010f80 <_fwalk_sglue+0x38>
 8010f78:	4629      	mov	r1, r5
 8010f7a:	4638      	mov	r0, r7
 8010f7c:	47c0      	blx	r8
 8010f7e:	4306      	orrs	r6, r0
 8010f80:	3568      	adds	r5, #104	@ 0x68
 8010f82:	e7e9      	b.n	8010f58 <_fwalk_sglue+0x10>

08010f84 <__sread>:
 8010f84:	b510      	push	{r4, lr}
 8010f86:	460c      	mov	r4, r1
 8010f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f8c:	f000 f868 	bl	8011060 <_read_r>
 8010f90:	2800      	cmp	r0, #0
 8010f92:	bfab      	itete	ge
 8010f94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010f96:	89a3      	ldrhlt	r3, [r4, #12]
 8010f98:	181b      	addge	r3, r3, r0
 8010f9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010f9e:	bfac      	ite	ge
 8010fa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010fa2:	81a3      	strhlt	r3, [r4, #12]
 8010fa4:	bd10      	pop	{r4, pc}

08010fa6 <__swrite>:
 8010fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010faa:	461f      	mov	r7, r3
 8010fac:	898b      	ldrh	r3, [r1, #12]
 8010fae:	05db      	lsls	r3, r3, #23
 8010fb0:	4605      	mov	r5, r0
 8010fb2:	460c      	mov	r4, r1
 8010fb4:	4616      	mov	r6, r2
 8010fb6:	d505      	bpl.n	8010fc4 <__swrite+0x1e>
 8010fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fbc:	2302      	movs	r3, #2
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f000 f83c 	bl	801103c <_lseek_r>
 8010fc4:	89a3      	ldrh	r3, [r4, #12]
 8010fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010fce:	81a3      	strh	r3, [r4, #12]
 8010fd0:	4632      	mov	r2, r6
 8010fd2:	463b      	mov	r3, r7
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fda:	f000 b863 	b.w	80110a4 <_write_r>

08010fde <__sseek>:
 8010fde:	b510      	push	{r4, lr}
 8010fe0:	460c      	mov	r4, r1
 8010fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fe6:	f000 f829 	bl	801103c <_lseek_r>
 8010fea:	1c43      	adds	r3, r0, #1
 8010fec:	89a3      	ldrh	r3, [r4, #12]
 8010fee:	bf15      	itete	ne
 8010ff0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010ff2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010ff6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010ffa:	81a3      	strheq	r3, [r4, #12]
 8010ffc:	bf18      	it	ne
 8010ffe:	81a3      	strhne	r3, [r4, #12]
 8011000:	bd10      	pop	{r4, pc}

08011002 <__sclose>:
 8011002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011006:	f000 b809 	b.w	801101c <_close_r>

0801100a <memset>:
 801100a:	4402      	add	r2, r0
 801100c:	4603      	mov	r3, r0
 801100e:	4293      	cmp	r3, r2
 8011010:	d100      	bne.n	8011014 <memset+0xa>
 8011012:	4770      	bx	lr
 8011014:	f803 1b01 	strb.w	r1, [r3], #1
 8011018:	e7f9      	b.n	801100e <memset+0x4>
	...

0801101c <_close_r>:
 801101c:	b538      	push	{r3, r4, r5, lr}
 801101e:	4d06      	ldr	r5, [pc, #24]	@ (8011038 <_close_r+0x1c>)
 8011020:	2300      	movs	r3, #0
 8011022:	4604      	mov	r4, r0
 8011024:	4608      	mov	r0, r1
 8011026:	602b      	str	r3, [r5, #0]
 8011028:	f7f0 fd54 	bl	8001ad4 <_close>
 801102c:	1c43      	adds	r3, r0, #1
 801102e:	d102      	bne.n	8011036 <_close_r+0x1a>
 8011030:	682b      	ldr	r3, [r5, #0]
 8011032:	b103      	cbz	r3, 8011036 <_close_r+0x1a>
 8011034:	6023      	str	r3, [r4, #0]
 8011036:	bd38      	pop	{r3, r4, r5, pc}
 8011038:	20009504 	.word	0x20009504

0801103c <_lseek_r>:
 801103c:	b538      	push	{r3, r4, r5, lr}
 801103e:	4d07      	ldr	r5, [pc, #28]	@ (801105c <_lseek_r+0x20>)
 8011040:	4604      	mov	r4, r0
 8011042:	4608      	mov	r0, r1
 8011044:	4611      	mov	r1, r2
 8011046:	2200      	movs	r2, #0
 8011048:	602a      	str	r2, [r5, #0]
 801104a:	461a      	mov	r2, r3
 801104c:	f7f0 fd69 	bl	8001b22 <_lseek>
 8011050:	1c43      	adds	r3, r0, #1
 8011052:	d102      	bne.n	801105a <_lseek_r+0x1e>
 8011054:	682b      	ldr	r3, [r5, #0]
 8011056:	b103      	cbz	r3, 801105a <_lseek_r+0x1e>
 8011058:	6023      	str	r3, [r4, #0]
 801105a:	bd38      	pop	{r3, r4, r5, pc}
 801105c:	20009504 	.word	0x20009504

08011060 <_read_r>:
 8011060:	b538      	push	{r3, r4, r5, lr}
 8011062:	4d07      	ldr	r5, [pc, #28]	@ (8011080 <_read_r+0x20>)
 8011064:	4604      	mov	r4, r0
 8011066:	4608      	mov	r0, r1
 8011068:	4611      	mov	r1, r2
 801106a:	2200      	movs	r2, #0
 801106c:	602a      	str	r2, [r5, #0]
 801106e:	461a      	mov	r2, r3
 8011070:	f7f0 fcf7 	bl	8001a62 <_read>
 8011074:	1c43      	adds	r3, r0, #1
 8011076:	d102      	bne.n	801107e <_read_r+0x1e>
 8011078:	682b      	ldr	r3, [r5, #0]
 801107a:	b103      	cbz	r3, 801107e <_read_r+0x1e>
 801107c:	6023      	str	r3, [r4, #0]
 801107e:	bd38      	pop	{r3, r4, r5, pc}
 8011080:	20009504 	.word	0x20009504

08011084 <_sbrk_r>:
 8011084:	b538      	push	{r3, r4, r5, lr}
 8011086:	4d06      	ldr	r5, [pc, #24]	@ (80110a0 <_sbrk_r+0x1c>)
 8011088:	2300      	movs	r3, #0
 801108a:	4604      	mov	r4, r0
 801108c:	4608      	mov	r0, r1
 801108e:	602b      	str	r3, [r5, #0]
 8011090:	f7f0 fd54 	bl	8001b3c <_sbrk>
 8011094:	1c43      	adds	r3, r0, #1
 8011096:	d102      	bne.n	801109e <_sbrk_r+0x1a>
 8011098:	682b      	ldr	r3, [r5, #0]
 801109a:	b103      	cbz	r3, 801109e <_sbrk_r+0x1a>
 801109c:	6023      	str	r3, [r4, #0]
 801109e:	bd38      	pop	{r3, r4, r5, pc}
 80110a0:	20009504 	.word	0x20009504

080110a4 <_write_r>:
 80110a4:	b538      	push	{r3, r4, r5, lr}
 80110a6:	4d07      	ldr	r5, [pc, #28]	@ (80110c4 <_write_r+0x20>)
 80110a8:	4604      	mov	r4, r0
 80110aa:	4608      	mov	r0, r1
 80110ac:	4611      	mov	r1, r2
 80110ae:	2200      	movs	r2, #0
 80110b0:	602a      	str	r2, [r5, #0]
 80110b2:	461a      	mov	r2, r3
 80110b4:	f7f0 fcf2 	bl	8001a9c <_write>
 80110b8:	1c43      	adds	r3, r0, #1
 80110ba:	d102      	bne.n	80110c2 <_write_r+0x1e>
 80110bc:	682b      	ldr	r3, [r5, #0]
 80110be:	b103      	cbz	r3, 80110c2 <_write_r+0x1e>
 80110c0:	6023      	str	r3, [r4, #0]
 80110c2:	bd38      	pop	{r3, r4, r5, pc}
 80110c4:	20009504 	.word	0x20009504

080110c8 <__errno>:
 80110c8:	4b01      	ldr	r3, [pc, #4]	@ (80110d0 <__errno+0x8>)
 80110ca:	6818      	ldr	r0, [r3, #0]
 80110cc:	4770      	bx	lr
 80110ce:	bf00      	nop
 80110d0:	2000005c 	.word	0x2000005c

080110d4 <__libc_init_array>:
 80110d4:	b570      	push	{r4, r5, r6, lr}
 80110d6:	4d0d      	ldr	r5, [pc, #52]	@ (801110c <__libc_init_array+0x38>)
 80110d8:	4c0d      	ldr	r4, [pc, #52]	@ (8011110 <__libc_init_array+0x3c>)
 80110da:	1b64      	subs	r4, r4, r5
 80110dc:	10a4      	asrs	r4, r4, #2
 80110de:	2600      	movs	r6, #0
 80110e0:	42a6      	cmp	r6, r4
 80110e2:	d109      	bne.n	80110f8 <__libc_init_array+0x24>
 80110e4:	4d0b      	ldr	r5, [pc, #44]	@ (8011114 <__libc_init_array+0x40>)
 80110e6:	4c0c      	ldr	r4, [pc, #48]	@ (8011118 <__libc_init_array+0x44>)
 80110e8:	f000 fd80 	bl	8011bec <_init>
 80110ec:	1b64      	subs	r4, r4, r5
 80110ee:	10a4      	asrs	r4, r4, #2
 80110f0:	2600      	movs	r6, #0
 80110f2:	42a6      	cmp	r6, r4
 80110f4:	d105      	bne.n	8011102 <__libc_init_array+0x2e>
 80110f6:	bd70      	pop	{r4, r5, r6, pc}
 80110f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80110fc:	4798      	blx	r3
 80110fe:	3601      	adds	r6, #1
 8011100:	e7ee      	b.n	80110e0 <__libc_init_array+0xc>
 8011102:	f855 3b04 	ldr.w	r3, [r5], #4
 8011106:	4798      	blx	r3
 8011108:	3601      	adds	r6, #1
 801110a:	e7f2      	b.n	80110f2 <__libc_init_array+0x1e>
 801110c:	08011eac 	.word	0x08011eac
 8011110:	08011eac 	.word	0x08011eac
 8011114:	08011eac 	.word	0x08011eac
 8011118:	08011eb8 	.word	0x08011eb8

0801111c <__retarget_lock_init_recursive>:
 801111c:	4770      	bx	lr

0801111e <__retarget_lock_acquire_recursive>:
 801111e:	4770      	bx	lr

08011120 <__retarget_lock_release_recursive>:
 8011120:	4770      	bx	lr

08011122 <memcpy>:
 8011122:	440a      	add	r2, r1
 8011124:	4291      	cmp	r1, r2
 8011126:	f100 33ff 	add.w	r3, r0, #4294967295
 801112a:	d100      	bne.n	801112e <memcpy+0xc>
 801112c:	4770      	bx	lr
 801112e:	b510      	push	{r4, lr}
 8011130:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011134:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011138:	4291      	cmp	r1, r2
 801113a:	d1f9      	bne.n	8011130 <memcpy+0xe>
 801113c:	bd10      	pop	{r4, pc}
	...

08011140 <__assert_func>:
 8011140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011142:	4614      	mov	r4, r2
 8011144:	461a      	mov	r2, r3
 8011146:	4b09      	ldr	r3, [pc, #36]	@ (801116c <__assert_func+0x2c>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4605      	mov	r5, r0
 801114c:	68d8      	ldr	r0, [r3, #12]
 801114e:	b14c      	cbz	r4, 8011164 <__assert_func+0x24>
 8011150:	4b07      	ldr	r3, [pc, #28]	@ (8011170 <__assert_func+0x30>)
 8011152:	9100      	str	r1, [sp, #0]
 8011154:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011158:	4906      	ldr	r1, [pc, #24]	@ (8011174 <__assert_func+0x34>)
 801115a:	462b      	mov	r3, r5
 801115c:	f000 f904 	bl	8011368 <fiprintf>
 8011160:	f000 f914 	bl	801138c <abort>
 8011164:	4b04      	ldr	r3, [pc, #16]	@ (8011178 <__assert_func+0x38>)
 8011166:	461c      	mov	r4, r3
 8011168:	e7f3      	b.n	8011152 <__assert_func+0x12>
 801116a:	bf00      	nop
 801116c:	2000005c 	.word	0x2000005c
 8011170:	08011e33 	.word	0x08011e33
 8011174:	08011e40 	.word	0x08011e40
 8011178:	08011e6e 	.word	0x08011e6e

0801117c <_free_r>:
 801117c:	b538      	push	{r3, r4, r5, lr}
 801117e:	4605      	mov	r5, r0
 8011180:	2900      	cmp	r1, #0
 8011182:	d041      	beq.n	8011208 <_free_r+0x8c>
 8011184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011188:	1f0c      	subs	r4, r1, #4
 801118a:	2b00      	cmp	r3, #0
 801118c:	bfb8      	it	lt
 801118e:	18e4      	addlt	r4, r4, r3
 8011190:	f7ff fdec 	bl	8010d6c <__malloc_lock>
 8011194:	4a1d      	ldr	r2, [pc, #116]	@ (801120c <_free_r+0x90>)
 8011196:	6813      	ldr	r3, [r2, #0]
 8011198:	b933      	cbnz	r3, 80111a8 <_free_r+0x2c>
 801119a:	6063      	str	r3, [r4, #4]
 801119c:	6014      	str	r4, [r2, #0]
 801119e:	4628      	mov	r0, r5
 80111a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111a4:	f7ff bde8 	b.w	8010d78 <__malloc_unlock>
 80111a8:	42a3      	cmp	r3, r4
 80111aa:	d908      	bls.n	80111be <_free_r+0x42>
 80111ac:	6820      	ldr	r0, [r4, #0]
 80111ae:	1821      	adds	r1, r4, r0
 80111b0:	428b      	cmp	r3, r1
 80111b2:	bf01      	itttt	eq
 80111b4:	6819      	ldreq	r1, [r3, #0]
 80111b6:	685b      	ldreq	r3, [r3, #4]
 80111b8:	1809      	addeq	r1, r1, r0
 80111ba:	6021      	streq	r1, [r4, #0]
 80111bc:	e7ed      	b.n	801119a <_free_r+0x1e>
 80111be:	461a      	mov	r2, r3
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	b10b      	cbz	r3, 80111c8 <_free_r+0x4c>
 80111c4:	42a3      	cmp	r3, r4
 80111c6:	d9fa      	bls.n	80111be <_free_r+0x42>
 80111c8:	6811      	ldr	r1, [r2, #0]
 80111ca:	1850      	adds	r0, r2, r1
 80111cc:	42a0      	cmp	r0, r4
 80111ce:	d10b      	bne.n	80111e8 <_free_r+0x6c>
 80111d0:	6820      	ldr	r0, [r4, #0]
 80111d2:	4401      	add	r1, r0
 80111d4:	1850      	adds	r0, r2, r1
 80111d6:	4283      	cmp	r3, r0
 80111d8:	6011      	str	r1, [r2, #0]
 80111da:	d1e0      	bne.n	801119e <_free_r+0x22>
 80111dc:	6818      	ldr	r0, [r3, #0]
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	6053      	str	r3, [r2, #4]
 80111e2:	4408      	add	r0, r1
 80111e4:	6010      	str	r0, [r2, #0]
 80111e6:	e7da      	b.n	801119e <_free_r+0x22>
 80111e8:	d902      	bls.n	80111f0 <_free_r+0x74>
 80111ea:	230c      	movs	r3, #12
 80111ec:	602b      	str	r3, [r5, #0]
 80111ee:	e7d6      	b.n	801119e <_free_r+0x22>
 80111f0:	6820      	ldr	r0, [r4, #0]
 80111f2:	1821      	adds	r1, r4, r0
 80111f4:	428b      	cmp	r3, r1
 80111f6:	bf04      	itt	eq
 80111f8:	6819      	ldreq	r1, [r3, #0]
 80111fa:	685b      	ldreq	r3, [r3, #4]
 80111fc:	6063      	str	r3, [r4, #4]
 80111fe:	bf04      	itt	eq
 8011200:	1809      	addeq	r1, r1, r0
 8011202:	6021      	streq	r1, [r4, #0]
 8011204:	6054      	str	r4, [r2, #4]
 8011206:	e7ca      	b.n	801119e <_free_r+0x22>
 8011208:	bd38      	pop	{r3, r4, r5, pc}
 801120a:	bf00      	nop
 801120c:	200093c4 	.word	0x200093c4

08011210 <__sflush_r>:
 8011210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011218:	0716      	lsls	r6, r2, #28
 801121a:	4605      	mov	r5, r0
 801121c:	460c      	mov	r4, r1
 801121e:	d454      	bmi.n	80112ca <__sflush_r+0xba>
 8011220:	684b      	ldr	r3, [r1, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	dc02      	bgt.n	801122c <__sflush_r+0x1c>
 8011226:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011228:	2b00      	cmp	r3, #0
 801122a:	dd48      	ble.n	80112be <__sflush_r+0xae>
 801122c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801122e:	2e00      	cmp	r6, #0
 8011230:	d045      	beq.n	80112be <__sflush_r+0xae>
 8011232:	2300      	movs	r3, #0
 8011234:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011238:	682f      	ldr	r7, [r5, #0]
 801123a:	6a21      	ldr	r1, [r4, #32]
 801123c:	602b      	str	r3, [r5, #0]
 801123e:	d030      	beq.n	80112a2 <__sflush_r+0x92>
 8011240:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011242:	89a3      	ldrh	r3, [r4, #12]
 8011244:	0759      	lsls	r1, r3, #29
 8011246:	d505      	bpl.n	8011254 <__sflush_r+0x44>
 8011248:	6863      	ldr	r3, [r4, #4]
 801124a:	1ad2      	subs	r2, r2, r3
 801124c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801124e:	b10b      	cbz	r3, 8011254 <__sflush_r+0x44>
 8011250:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011252:	1ad2      	subs	r2, r2, r3
 8011254:	2300      	movs	r3, #0
 8011256:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011258:	6a21      	ldr	r1, [r4, #32]
 801125a:	4628      	mov	r0, r5
 801125c:	47b0      	blx	r6
 801125e:	1c43      	adds	r3, r0, #1
 8011260:	89a3      	ldrh	r3, [r4, #12]
 8011262:	d106      	bne.n	8011272 <__sflush_r+0x62>
 8011264:	6829      	ldr	r1, [r5, #0]
 8011266:	291d      	cmp	r1, #29
 8011268:	d82b      	bhi.n	80112c2 <__sflush_r+0xb2>
 801126a:	4a2a      	ldr	r2, [pc, #168]	@ (8011314 <__sflush_r+0x104>)
 801126c:	40ca      	lsrs	r2, r1
 801126e:	07d6      	lsls	r6, r2, #31
 8011270:	d527      	bpl.n	80112c2 <__sflush_r+0xb2>
 8011272:	2200      	movs	r2, #0
 8011274:	6062      	str	r2, [r4, #4]
 8011276:	04d9      	lsls	r1, r3, #19
 8011278:	6922      	ldr	r2, [r4, #16]
 801127a:	6022      	str	r2, [r4, #0]
 801127c:	d504      	bpl.n	8011288 <__sflush_r+0x78>
 801127e:	1c42      	adds	r2, r0, #1
 8011280:	d101      	bne.n	8011286 <__sflush_r+0x76>
 8011282:	682b      	ldr	r3, [r5, #0]
 8011284:	b903      	cbnz	r3, 8011288 <__sflush_r+0x78>
 8011286:	6560      	str	r0, [r4, #84]	@ 0x54
 8011288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801128a:	602f      	str	r7, [r5, #0]
 801128c:	b1b9      	cbz	r1, 80112be <__sflush_r+0xae>
 801128e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011292:	4299      	cmp	r1, r3
 8011294:	d002      	beq.n	801129c <__sflush_r+0x8c>
 8011296:	4628      	mov	r0, r5
 8011298:	f7ff ff70 	bl	801117c <_free_r>
 801129c:	2300      	movs	r3, #0
 801129e:	6363      	str	r3, [r4, #52]	@ 0x34
 80112a0:	e00d      	b.n	80112be <__sflush_r+0xae>
 80112a2:	2301      	movs	r3, #1
 80112a4:	4628      	mov	r0, r5
 80112a6:	47b0      	blx	r6
 80112a8:	4602      	mov	r2, r0
 80112aa:	1c50      	adds	r0, r2, #1
 80112ac:	d1c9      	bne.n	8011242 <__sflush_r+0x32>
 80112ae:	682b      	ldr	r3, [r5, #0]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d0c6      	beq.n	8011242 <__sflush_r+0x32>
 80112b4:	2b1d      	cmp	r3, #29
 80112b6:	d001      	beq.n	80112bc <__sflush_r+0xac>
 80112b8:	2b16      	cmp	r3, #22
 80112ba:	d11e      	bne.n	80112fa <__sflush_r+0xea>
 80112bc:	602f      	str	r7, [r5, #0]
 80112be:	2000      	movs	r0, #0
 80112c0:	e022      	b.n	8011308 <__sflush_r+0xf8>
 80112c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112c6:	b21b      	sxth	r3, r3
 80112c8:	e01b      	b.n	8011302 <__sflush_r+0xf2>
 80112ca:	690f      	ldr	r7, [r1, #16]
 80112cc:	2f00      	cmp	r7, #0
 80112ce:	d0f6      	beq.n	80112be <__sflush_r+0xae>
 80112d0:	0793      	lsls	r3, r2, #30
 80112d2:	680e      	ldr	r6, [r1, #0]
 80112d4:	bf08      	it	eq
 80112d6:	694b      	ldreq	r3, [r1, #20]
 80112d8:	600f      	str	r7, [r1, #0]
 80112da:	bf18      	it	ne
 80112dc:	2300      	movne	r3, #0
 80112de:	eba6 0807 	sub.w	r8, r6, r7
 80112e2:	608b      	str	r3, [r1, #8]
 80112e4:	f1b8 0f00 	cmp.w	r8, #0
 80112e8:	dde9      	ble.n	80112be <__sflush_r+0xae>
 80112ea:	6a21      	ldr	r1, [r4, #32]
 80112ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80112ee:	4643      	mov	r3, r8
 80112f0:	463a      	mov	r2, r7
 80112f2:	4628      	mov	r0, r5
 80112f4:	47b0      	blx	r6
 80112f6:	2800      	cmp	r0, #0
 80112f8:	dc08      	bgt.n	801130c <__sflush_r+0xfc>
 80112fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011302:	81a3      	strh	r3, [r4, #12]
 8011304:	f04f 30ff 	mov.w	r0, #4294967295
 8011308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801130c:	4407      	add	r7, r0
 801130e:	eba8 0800 	sub.w	r8, r8, r0
 8011312:	e7e7      	b.n	80112e4 <__sflush_r+0xd4>
 8011314:	20400001 	.word	0x20400001

08011318 <_fflush_r>:
 8011318:	b538      	push	{r3, r4, r5, lr}
 801131a:	690b      	ldr	r3, [r1, #16]
 801131c:	4605      	mov	r5, r0
 801131e:	460c      	mov	r4, r1
 8011320:	b913      	cbnz	r3, 8011328 <_fflush_r+0x10>
 8011322:	2500      	movs	r5, #0
 8011324:	4628      	mov	r0, r5
 8011326:	bd38      	pop	{r3, r4, r5, pc}
 8011328:	b118      	cbz	r0, 8011332 <_fflush_r+0x1a>
 801132a:	6a03      	ldr	r3, [r0, #32]
 801132c:	b90b      	cbnz	r3, 8011332 <_fflush_r+0x1a>
 801132e:	f7ff fdf3 	bl	8010f18 <__sinit>
 8011332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d0f3      	beq.n	8011322 <_fflush_r+0xa>
 801133a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801133c:	07d0      	lsls	r0, r2, #31
 801133e:	d404      	bmi.n	801134a <_fflush_r+0x32>
 8011340:	0599      	lsls	r1, r3, #22
 8011342:	d402      	bmi.n	801134a <_fflush_r+0x32>
 8011344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011346:	f7ff feea 	bl	801111e <__retarget_lock_acquire_recursive>
 801134a:	4628      	mov	r0, r5
 801134c:	4621      	mov	r1, r4
 801134e:	f7ff ff5f 	bl	8011210 <__sflush_r>
 8011352:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011354:	07da      	lsls	r2, r3, #31
 8011356:	4605      	mov	r5, r0
 8011358:	d4e4      	bmi.n	8011324 <_fflush_r+0xc>
 801135a:	89a3      	ldrh	r3, [r4, #12]
 801135c:	059b      	lsls	r3, r3, #22
 801135e:	d4e1      	bmi.n	8011324 <_fflush_r+0xc>
 8011360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011362:	f7ff fedd 	bl	8011120 <__retarget_lock_release_recursive>
 8011366:	e7dd      	b.n	8011324 <_fflush_r+0xc>

08011368 <fiprintf>:
 8011368:	b40e      	push	{r1, r2, r3}
 801136a:	b503      	push	{r0, r1, lr}
 801136c:	4601      	mov	r1, r0
 801136e:	ab03      	add	r3, sp, #12
 8011370:	4805      	ldr	r0, [pc, #20]	@ (8011388 <fiprintf+0x20>)
 8011372:	f853 2b04 	ldr.w	r2, [r3], #4
 8011376:	6800      	ldr	r0, [r0, #0]
 8011378:	9301      	str	r3, [sp, #4]
 801137a:	f000 f837 	bl	80113ec <_vfiprintf_r>
 801137e:	b002      	add	sp, #8
 8011380:	f85d eb04 	ldr.w	lr, [sp], #4
 8011384:	b003      	add	sp, #12
 8011386:	4770      	bx	lr
 8011388:	2000005c 	.word	0x2000005c

0801138c <abort>:
 801138c:	b508      	push	{r3, lr}
 801138e:	2006      	movs	r0, #6
 8011390:	f000 fb8c 	bl	8011aac <raise>
 8011394:	2001      	movs	r0, #1
 8011396:	f7f0 fb59 	bl	8001a4c <_exit>

0801139a <__sfputc_r>:
 801139a:	6893      	ldr	r3, [r2, #8]
 801139c:	3b01      	subs	r3, #1
 801139e:	2b00      	cmp	r3, #0
 80113a0:	b410      	push	{r4}
 80113a2:	6093      	str	r3, [r2, #8]
 80113a4:	da08      	bge.n	80113b8 <__sfputc_r+0x1e>
 80113a6:	6994      	ldr	r4, [r2, #24]
 80113a8:	42a3      	cmp	r3, r4
 80113aa:	db01      	blt.n	80113b0 <__sfputc_r+0x16>
 80113ac:	290a      	cmp	r1, #10
 80113ae:	d103      	bne.n	80113b8 <__sfputc_r+0x1e>
 80113b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113b4:	f000 babe 	b.w	8011934 <__swbuf_r>
 80113b8:	6813      	ldr	r3, [r2, #0]
 80113ba:	1c58      	adds	r0, r3, #1
 80113bc:	6010      	str	r0, [r2, #0]
 80113be:	7019      	strb	r1, [r3, #0]
 80113c0:	4608      	mov	r0, r1
 80113c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113c6:	4770      	bx	lr

080113c8 <__sfputs_r>:
 80113c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ca:	4606      	mov	r6, r0
 80113cc:	460f      	mov	r7, r1
 80113ce:	4614      	mov	r4, r2
 80113d0:	18d5      	adds	r5, r2, r3
 80113d2:	42ac      	cmp	r4, r5
 80113d4:	d101      	bne.n	80113da <__sfputs_r+0x12>
 80113d6:	2000      	movs	r0, #0
 80113d8:	e007      	b.n	80113ea <__sfputs_r+0x22>
 80113da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113de:	463a      	mov	r2, r7
 80113e0:	4630      	mov	r0, r6
 80113e2:	f7ff ffda 	bl	801139a <__sfputc_r>
 80113e6:	1c43      	adds	r3, r0, #1
 80113e8:	d1f3      	bne.n	80113d2 <__sfputs_r+0xa>
 80113ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080113ec <_vfiprintf_r>:
 80113ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f0:	460d      	mov	r5, r1
 80113f2:	b09d      	sub	sp, #116	@ 0x74
 80113f4:	4614      	mov	r4, r2
 80113f6:	4698      	mov	r8, r3
 80113f8:	4606      	mov	r6, r0
 80113fa:	b118      	cbz	r0, 8011404 <_vfiprintf_r+0x18>
 80113fc:	6a03      	ldr	r3, [r0, #32]
 80113fe:	b90b      	cbnz	r3, 8011404 <_vfiprintf_r+0x18>
 8011400:	f7ff fd8a 	bl	8010f18 <__sinit>
 8011404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011406:	07d9      	lsls	r1, r3, #31
 8011408:	d405      	bmi.n	8011416 <_vfiprintf_r+0x2a>
 801140a:	89ab      	ldrh	r3, [r5, #12]
 801140c:	059a      	lsls	r2, r3, #22
 801140e:	d402      	bmi.n	8011416 <_vfiprintf_r+0x2a>
 8011410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011412:	f7ff fe84 	bl	801111e <__retarget_lock_acquire_recursive>
 8011416:	89ab      	ldrh	r3, [r5, #12]
 8011418:	071b      	lsls	r3, r3, #28
 801141a:	d501      	bpl.n	8011420 <_vfiprintf_r+0x34>
 801141c:	692b      	ldr	r3, [r5, #16]
 801141e:	b99b      	cbnz	r3, 8011448 <_vfiprintf_r+0x5c>
 8011420:	4629      	mov	r1, r5
 8011422:	4630      	mov	r0, r6
 8011424:	f000 fac4 	bl	80119b0 <__swsetup_r>
 8011428:	b170      	cbz	r0, 8011448 <_vfiprintf_r+0x5c>
 801142a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801142c:	07dc      	lsls	r4, r3, #31
 801142e:	d504      	bpl.n	801143a <_vfiprintf_r+0x4e>
 8011430:	f04f 30ff 	mov.w	r0, #4294967295
 8011434:	b01d      	add	sp, #116	@ 0x74
 8011436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801143a:	89ab      	ldrh	r3, [r5, #12]
 801143c:	0598      	lsls	r0, r3, #22
 801143e:	d4f7      	bmi.n	8011430 <_vfiprintf_r+0x44>
 8011440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011442:	f7ff fe6d 	bl	8011120 <__retarget_lock_release_recursive>
 8011446:	e7f3      	b.n	8011430 <_vfiprintf_r+0x44>
 8011448:	2300      	movs	r3, #0
 801144a:	9309      	str	r3, [sp, #36]	@ 0x24
 801144c:	2320      	movs	r3, #32
 801144e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011452:	f8cd 800c 	str.w	r8, [sp, #12]
 8011456:	2330      	movs	r3, #48	@ 0x30
 8011458:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011608 <_vfiprintf_r+0x21c>
 801145c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011460:	f04f 0901 	mov.w	r9, #1
 8011464:	4623      	mov	r3, r4
 8011466:	469a      	mov	sl, r3
 8011468:	f813 2b01 	ldrb.w	r2, [r3], #1
 801146c:	b10a      	cbz	r2, 8011472 <_vfiprintf_r+0x86>
 801146e:	2a25      	cmp	r2, #37	@ 0x25
 8011470:	d1f9      	bne.n	8011466 <_vfiprintf_r+0x7a>
 8011472:	ebba 0b04 	subs.w	fp, sl, r4
 8011476:	d00b      	beq.n	8011490 <_vfiprintf_r+0xa4>
 8011478:	465b      	mov	r3, fp
 801147a:	4622      	mov	r2, r4
 801147c:	4629      	mov	r1, r5
 801147e:	4630      	mov	r0, r6
 8011480:	f7ff ffa2 	bl	80113c8 <__sfputs_r>
 8011484:	3001      	adds	r0, #1
 8011486:	f000 80a7 	beq.w	80115d8 <_vfiprintf_r+0x1ec>
 801148a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801148c:	445a      	add	r2, fp
 801148e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011490:	f89a 3000 	ldrb.w	r3, [sl]
 8011494:	2b00      	cmp	r3, #0
 8011496:	f000 809f 	beq.w	80115d8 <_vfiprintf_r+0x1ec>
 801149a:	2300      	movs	r3, #0
 801149c:	f04f 32ff 	mov.w	r2, #4294967295
 80114a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114a4:	f10a 0a01 	add.w	sl, sl, #1
 80114a8:	9304      	str	r3, [sp, #16]
 80114aa:	9307      	str	r3, [sp, #28]
 80114ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80114b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80114b2:	4654      	mov	r4, sl
 80114b4:	2205      	movs	r2, #5
 80114b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114ba:	4853      	ldr	r0, [pc, #332]	@ (8011608 <_vfiprintf_r+0x21c>)
 80114bc:	f7ee fe88 	bl	80001d0 <memchr>
 80114c0:	9a04      	ldr	r2, [sp, #16]
 80114c2:	b9d8      	cbnz	r0, 80114fc <_vfiprintf_r+0x110>
 80114c4:	06d1      	lsls	r1, r2, #27
 80114c6:	bf44      	itt	mi
 80114c8:	2320      	movmi	r3, #32
 80114ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80114ce:	0713      	lsls	r3, r2, #28
 80114d0:	bf44      	itt	mi
 80114d2:	232b      	movmi	r3, #43	@ 0x2b
 80114d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80114d8:	f89a 3000 	ldrb.w	r3, [sl]
 80114dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80114de:	d015      	beq.n	801150c <_vfiprintf_r+0x120>
 80114e0:	9a07      	ldr	r2, [sp, #28]
 80114e2:	4654      	mov	r4, sl
 80114e4:	2000      	movs	r0, #0
 80114e6:	f04f 0c0a 	mov.w	ip, #10
 80114ea:	4621      	mov	r1, r4
 80114ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114f0:	3b30      	subs	r3, #48	@ 0x30
 80114f2:	2b09      	cmp	r3, #9
 80114f4:	d94b      	bls.n	801158e <_vfiprintf_r+0x1a2>
 80114f6:	b1b0      	cbz	r0, 8011526 <_vfiprintf_r+0x13a>
 80114f8:	9207      	str	r2, [sp, #28]
 80114fa:	e014      	b.n	8011526 <_vfiprintf_r+0x13a>
 80114fc:	eba0 0308 	sub.w	r3, r0, r8
 8011500:	fa09 f303 	lsl.w	r3, r9, r3
 8011504:	4313      	orrs	r3, r2
 8011506:	9304      	str	r3, [sp, #16]
 8011508:	46a2      	mov	sl, r4
 801150a:	e7d2      	b.n	80114b2 <_vfiprintf_r+0xc6>
 801150c:	9b03      	ldr	r3, [sp, #12]
 801150e:	1d19      	adds	r1, r3, #4
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	9103      	str	r1, [sp, #12]
 8011514:	2b00      	cmp	r3, #0
 8011516:	bfbb      	ittet	lt
 8011518:	425b      	neglt	r3, r3
 801151a:	f042 0202 	orrlt.w	r2, r2, #2
 801151e:	9307      	strge	r3, [sp, #28]
 8011520:	9307      	strlt	r3, [sp, #28]
 8011522:	bfb8      	it	lt
 8011524:	9204      	strlt	r2, [sp, #16]
 8011526:	7823      	ldrb	r3, [r4, #0]
 8011528:	2b2e      	cmp	r3, #46	@ 0x2e
 801152a:	d10a      	bne.n	8011542 <_vfiprintf_r+0x156>
 801152c:	7863      	ldrb	r3, [r4, #1]
 801152e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011530:	d132      	bne.n	8011598 <_vfiprintf_r+0x1ac>
 8011532:	9b03      	ldr	r3, [sp, #12]
 8011534:	1d1a      	adds	r2, r3, #4
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	9203      	str	r2, [sp, #12]
 801153a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801153e:	3402      	adds	r4, #2
 8011540:	9305      	str	r3, [sp, #20]
 8011542:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011618 <_vfiprintf_r+0x22c>
 8011546:	7821      	ldrb	r1, [r4, #0]
 8011548:	2203      	movs	r2, #3
 801154a:	4650      	mov	r0, sl
 801154c:	f7ee fe40 	bl	80001d0 <memchr>
 8011550:	b138      	cbz	r0, 8011562 <_vfiprintf_r+0x176>
 8011552:	9b04      	ldr	r3, [sp, #16]
 8011554:	eba0 000a 	sub.w	r0, r0, sl
 8011558:	2240      	movs	r2, #64	@ 0x40
 801155a:	4082      	lsls	r2, r0
 801155c:	4313      	orrs	r3, r2
 801155e:	3401      	adds	r4, #1
 8011560:	9304      	str	r3, [sp, #16]
 8011562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011566:	4829      	ldr	r0, [pc, #164]	@ (801160c <_vfiprintf_r+0x220>)
 8011568:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801156c:	2206      	movs	r2, #6
 801156e:	f7ee fe2f 	bl	80001d0 <memchr>
 8011572:	2800      	cmp	r0, #0
 8011574:	d03f      	beq.n	80115f6 <_vfiprintf_r+0x20a>
 8011576:	4b26      	ldr	r3, [pc, #152]	@ (8011610 <_vfiprintf_r+0x224>)
 8011578:	bb1b      	cbnz	r3, 80115c2 <_vfiprintf_r+0x1d6>
 801157a:	9b03      	ldr	r3, [sp, #12]
 801157c:	3307      	adds	r3, #7
 801157e:	f023 0307 	bic.w	r3, r3, #7
 8011582:	3308      	adds	r3, #8
 8011584:	9303      	str	r3, [sp, #12]
 8011586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011588:	443b      	add	r3, r7
 801158a:	9309      	str	r3, [sp, #36]	@ 0x24
 801158c:	e76a      	b.n	8011464 <_vfiprintf_r+0x78>
 801158e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011592:	460c      	mov	r4, r1
 8011594:	2001      	movs	r0, #1
 8011596:	e7a8      	b.n	80114ea <_vfiprintf_r+0xfe>
 8011598:	2300      	movs	r3, #0
 801159a:	3401      	adds	r4, #1
 801159c:	9305      	str	r3, [sp, #20]
 801159e:	4619      	mov	r1, r3
 80115a0:	f04f 0c0a 	mov.w	ip, #10
 80115a4:	4620      	mov	r0, r4
 80115a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115aa:	3a30      	subs	r2, #48	@ 0x30
 80115ac:	2a09      	cmp	r2, #9
 80115ae:	d903      	bls.n	80115b8 <_vfiprintf_r+0x1cc>
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d0c6      	beq.n	8011542 <_vfiprintf_r+0x156>
 80115b4:	9105      	str	r1, [sp, #20]
 80115b6:	e7c4      	b.n	8011542 <_vfiprintf_r+0x156>
 80115b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80115bc:	4604      	mov	r4, r0
 80115be:	2301      	movs	r3, #1
 80115c0:	e7f0      	b.n	80115a4 <_vfiprintf_r+0x1b8>
 80115c2:	ab03      	add	r3, sp, #12
 80115c4:	9300      	str	r3, [sp, #0]
 80115c6:	462a      	mov	r2, r5
 80115c8:	4b12      	ldr	r3, [pc, #72]	@ (8011614 <_vfiprintf_r+0x228>)
 80115ca:	a904      	add	r1, sp, #16
 80115cc:	4630      	mov	r0, r6
 80115ce:	f3af 8000 	nop.w
 80115d2:	4607      	mov	r7, r0
 80115d4:	1c78      	adds	r0, r7, #1
 80115d6:	d1d6      	bne.n	8011586 <_vfiprintf_r+0x19a>
 80115d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80115da:	07d9      	lsls	r1, r3, #31
 80115dc:	d405      	bmi.n	80115ea <_vfiprintf_r+0x1fe>
 80115de:	89ab      	ldrh	r3, [r5, #12]
 80115e0:	059a      	lsls	r2, r3, #22
 80115e2:	d402      	bmi.n	80115ea <_vfiprintf_r+0x1fe>
 80115e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80115e6:	f7ff fd9b 	bl	8011120 <__retarget_lock_release_recursive>
 80115ea:	89ab      	ldrh	r3, [r5, #12]
 80115ec:	065b      	lsls	r3, r3, #25
 80115ee:	f53f af1f 	bmi.w	8011430 <_vfiprintf_r+0x44>
 80115f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80115f4:	e71e      	b.n	8011434 <_vfiprintf_r+0x48>
 80115f6:	ab03      	add	r3, sp, #12
 80115f8:	9300      	str	r3, [sp, #0]
 80115fa:	462a      	mov	r2, r5
 80115fc:	4b05      	ldr	r3, [pc, #20]	@ (8011614 <_vfiprintf_r+0x228>)
 80115fe:	a904      	add	r1, sp, #16
 8011600:	4630      	mov	r0, r6
 8011602:	f000 f879 	bl	80116f8 <_printf_i>
 8011606:	e7e4      	b.n	80115d2 <_vfiprintf_r+0x1e6>
 8011608:	08011e6f 	.word	0x08011e6f
 801160c:	08011e79 	.word	0x08011e79
 8011610:	00000000 	.word	0x00000000
 8011614:	080113c9 	.word	0x080113c9
 8011618:	08011e75 	.word	0x08011e75

0801161c <_printf_common>:
 801161c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011620:	4616      	mov	r6, r2
 8011622:	4698      	mov	r8, r3
 8011624:	688a      	ldr	r2, [r1, #8]
 8011626:	690b      	ldr	r3, [r1, #16]
 8011628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801162c:	4293      	cmp	r3, r2
 801162e:	bfb8      	it	lt
 8011630:	4613      	movlt	r3, r2
 8011632:	6033      	str	r3, [r6, #0]
 8011634:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011638:	4607      	mov	r7, r0
 801163a:	460c      	mov	r4, r1
 801163c:	b10a      	cbz	r2, 8011642 <_printf_common+0x26>
 801163e:	3301      	adds	r3, #1
 8011640:	6033      	str	r3, [r6, #0]
 8011642:	6823      	ldr	r3, [r4, #0]
 8011644:	0699      	lsls	r1, r3, #26
 8011646:	bf42      	ittt	mi
 8011648:	6833      	ldrmi	r3, [r6, #0]
 801164a:	3302      	addmi	r3, #2
 801164c:	6033      	strmi	r3, [r6, #0]
 801164e:	6825      	ldr	r5, [r4, #0]
 8011650:	f015 0506 	ands.w	r5, r5, #6
 8011654:	d106      	bne.n	8011664 <_printf_common+0x48>
 8011656:	f104 0a19 	add.w	sl, r4, #25
 801165a:	68e3      	ldr	r3, [r4, #12]
 801165c:	6832      	ldr	r2, [r6, #0]
 801165e:	1a9b      	subs	r3, r3, r2
 8011660:	42ab      	cmp	r3, r5
 8011662:	dc26      	bgt.n	80116b2 <_printf_common+0x96>
 8011664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011668:	6822      	ldr	r2, [r4, #0]
 801166a:	3b00      	subs	r3, #0
 801166c:	bf18      	it	ne
 801166e:	2301      	movne	r3, #1
 8011670:	0692      	lsls	r2, r2, #26
 8011672:	d42b      	bmi.n	80116cc <_printf_common+0xb0>
 8011674:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011678:	4641      	mov	r1, r8
 801167a:	4638      	mov	r0, r7
 801167c:	47c8      	blx	r9
 801167e:	3001      	adds	r0, #1
 8011680:	d01e      	beq.n	80116c0 <_printf_common+0xa4>
 8011682:	6823      	ldr	r3, [r4, #0]
 8011684:	6922      	ldr	r2, [r4, #16]
 8011686:	f003 0306 	and.w	r3, r3, #6
 801168a:	2b04      	cmp	r3, #4
 801168c:	bf02      	ittt	eq
 801168e:	68e5      	ldreq	r5, [r4, #12]
 8011690:	6833      	ldreq	r3, [r6, #0]
 8011692:	1aed      	subeq	r5, r5, r3
 8011694:	68a3      	ldr	r3, [r4, #8]
 8011696:	bf0c      	ite	eq
 8011698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801169c:	2500      	movne	r5, #0
 801169e:	4293      	cmp	r3, r2
 80116a0:	bfc4      	itt	gt
 80116a2:	1a9b      	subgt	r3, r3, r2
 80116a4:	18ed      	addgt	r5, r5, r3
 80116a6:	2600      	movs	r6, #0
 80116a8:	341a      	adds	r4, #26
 80116aa:	42b5      	cmp	r5, r6
 80116ac:	d11a      	bne.n	80116e4 <_printf_common+0xc8>
 80116ae:	2000      	movs	r0, #0
 80116b0:	e008      	b.n	80116c4 <_printf_common+0xa8>
 80116b2:	2301      	movs	r3, #1
 80116b4:	4652      	mov	r2, sl
 80116b6:	4641      	mov	r1, r8
 80116b8:	4638      	mov	r0, r7
 80116ba:	47c8      	blx	r9
 80116bc:	3001      	adds	r0, #1
 80116be:	d103      	bne.n	80116c8 <_printf_common+0xac>
 80116c0:	f04f 30ff 	mov.w	r0, #4294967295
 80116c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116c8:	3501      	adds	r5, #1
 80116ca:	e7c6      	b.n	801165a <_printf_common+0x3e>
 80116cc:	18e1      	adds	r1, r4, r3
 80116ce:	1c5a      	adds	r2, r3, #1
 80116d0:	2030      	movs	r0, #48	@ 0x30
 80116d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80116d6:	4422      	add	r2, r4
 80116d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80116dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80116e0:	3302      	adds	r3, #2
 80116e2:	e7c7      	b.n	8011674 <_printf_common+0x58>
 80116e4:	2301      	movs	r3, #1
 80116e6:	4622      	mov	r2, r4
 80116e8:	4641      	mov	r1, r8
 80116ea:	4638      	mov	r0, r7
 80116ec:	47c8      	blx	r9
 80116ee:	3001      	adds	r0, #1
 80116f0:	d0e6      	beq.n	80116c0 <_printf_common+0xa4>
 80116f2:	3601      	adds	r6, #1
 80116f4:	e7d9      	b.n	80116aa <_printf_common+0x8e>
	...

080116f8 <_printf_i>:
 80116f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80116fc:	7e0f      	ldrb	r7, [r1, #24]
 80116fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011700:	2f78      	cmp	r7, #120	@ 0x78
 8011702:	4691      	mov	r9, r2
 8011704:	4680      	mov	r8, r0
 8011706:	460c      	mov	r4, r1
 8011708:	469a      	mov	sl, r3
 801170a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801170e:	d807      	bhi.n	8011720 <_printf_i+0x28>
 8011710:	2f62      	cmp	r7, #98	@ 0x62
 8011712:	d80a      	bhi.n	801172a <_printf_i+0x32>
 8011714:	2f00      	cmp	r7, #0
 8011716:	f000 80d1 	beq.w	80118bc <_printf_i+0x1c4>
 801171a:	2f58      	cmp	r7, #88	@ 0x58
 801171c:	f000 80b8 	beq.w	8011890 <_printf_i+0x198>
 8011720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011724:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011728:	e03a      	b.n	80117a0 <_printf_i+0xa8>
 801172a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801172e:	2b15      	cmp	r3, #21
 8011730:	d8f6      	bhi.n	8011720 <_printf_i+0x28>
 8011732:	a101      	add	r1, pc, #4	@ (adr r1, 8011738 <_printf_i+0x40>)
 8011734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011738:	08011791 	.word	0x08011791
 801173c:	080117a5 	.word	0x080117a5
 8011740:	08011721 	.word	0x08011721
 8011744:	08011721 	.word	0x08011721
 8011748:	08011721 	.word	0x08011721
 801174c:	08011721 	.word	0x08011721
 8011750:	080117a5 	.word	0x080117a5
 8011754:	08011721 	.word	0x08011721
 8011758:	08011721 	.word	0x08011721
 801175c:	08011721 	.word	0x08011721
 8011760:	08011721 	.word	0x08011721
 8011764:	080118a3 	.word	0x080118a3
 8011768:	080117cf 	.word	0x080117cf
 801176c:	0801185d 	.word	0x0801185d
 8011770:	08011721 	.word	0x08011721
 8011774:	08011721 	.word	0x08011721
 8011778:	080118c5 	.word	0x080118c5
 801177c:	08011721 	.word	0x08011721
 8011780:	080117cf 	.word	0x080117cf
 8011784:	08011721 	.word	0x08011721
 8011788:	08011721 	.word	0x08011721
 801178c:	08011865 	.word	0x08011865
 8011790:	6833      	ldr	r3, [r6, #0]
 8011792:	1d1a      	adds	r2, r3, #4
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	6032      	str	r2, [r6, #0]
 8011798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801179c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80117a0:	2301      	movs	r3, #1
 80117a2:	e09c      	b.n	80118de <_printf_i+0x1e6>
 80117a4:	6833      	ldr	r3, [r6, #0]
 80117a6:	6820      	ldr	r0, [r4, #0]
 80117a8:	1d19      	adds	r1, r3, #4
 80117aa:	6031      	str	r1, [r6, #0]
 80117ac:	0606      	lsls	r6, r0, #24
 80117ae:	d501      	bpl.n	80117b4 <_printf_i+0xbc>
 80117b0:	681d      	ldr	r5, [r3, #0]
 80117b2:	e003      	b.n	80117bc <_printf_i+0xc4>
 80117b4:	0645      	lsls	r5, r0, #25
 80117b6:	d5fb      	bpl.n	80117b0 <_printf_i+0xb8>
 80117b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80117bc:	2d00      	cmp	r5, #0
 80117be:	da03      	bge.n	80117c8 <_printf_i+0xd0>
 80117c0:	232d      	movs	r3, #45	@ 0x2d
 80117c2:	426d      	negs	r5, r5
 80117c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80117c8:	4858      	ldr	r0, [pc, #352]	@ (801192c <_printf_i+0x234>)
 80117ca:	230a      	movs	r3, #10
 80117cc:	e011      	b.n	80117f2 <_printf_i+0xfa>
 80117ce:	6821      	ldr	r1, [r4, #0]
 80117d0:	6833      	ldr	r3, [r6, #0]
 80117d2:	0608      	lsls	r0, r1, #24
 80117d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80117d8:	d402      	bmi.n	80117e0 <_printf_i+0xe8>
 80117da:	0649      	lsls	r1, r1, #25
 80117dc:	bf48      	it	mi
 80117de:	b2ad      	uxthmi	r5, r5
 80117e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80117e2:	4852      	ldr	r0, [pc, #328]	@ (801192c <_printf_i+0x234>)
 80117e4:	6033      	str	r3, [r6, #0]
 80117e6:	bf14      	ite	ne
 80117e8:	230a      	movne	r3, #10
 80117ea:	2308      	moveq	r3, #8
 80117ec:	2100      	movs	r1, #0
 80117ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80117f2:	6866      	ldr	r6, [r4, #4]
 80117f4:	60a6      	str	r6, [r4, #8]
 80117f6:	2e00      	cmp	r6, #0
 80117f8:	db05      	blt.n	8011806 <_printf_i+0x10e>
 80117fa:	6821      	ldr	r1, [r4, #0]
 80117fc:	432e      	orrs	r6, r5
 80117fe:	f021 0104 	bic.w	r1, r1, #4
 8011802:	6021      	str	r1, [r4, #0]
 8011804:	d04b      	beq.n	801189e <_printf_i+0x1a6>
 8011806:	4616      	mov	r6, r2
 8011808:	fbb5 f1f3 	udiv	r1, r5, r3
 801180c:	fb03 5711 	mls	r7, r3, r1, r5
 8011810:	5dc7      	ldrb	r7, [r0, r7]
 8011812:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011816:	462f      	mov	r7, r5
 8011818:	42bb      	cmp	r3, r7
 801181a:	460d      	mov	r5, r1
 801181c:	d9f4      	bls.n	8011808 <_printf_i+0x110>
 801181e:	2b08      	cmp	r3, #8
 8011820:	d10b      	bne.n	801183a <_printf_i+0x142>
 8011822:	6823      	ldr	r3, [r4, #0]
 8011824:	07df      	lsls	r7, r3, #31
 8011826:	d508      	bpl.n	801183a <_printf_i+0x142>
 8011828:	6923      	ldr	r3, [r4, #16]
 801182a:	6861      	ldr	r1, [r4, #4]
 801182c:	4299      	cmp	r1, r3
 801182e:	bfde      	ittt	le
 8011830:	2330      	movle	r3, #48	@ 0x30
 8011832:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011836:	f106 36ff 	addle.w	r6, r6, #4294967295
 801183a:	1b92      	subs	r2, r2, r6
 801183c:	6122      	str	r2, [r4, #16]
 801183e:	f8cd a000 	str.w	sl, [sp]
 8011842:	464b      	mov	r3, r9
 8011844:	aa03      	add	r2, sp, #12
 8011846:	4621      	mov	r1, r4
 8011848:	4640      	mov	r0, r8
 801184a:	f7ff fee7 	bl	801161c <_printf_common>
 801184e:	3001      	adds	r0, #1
 8011850:	d14a      	bne.n	80118e8 <_printf_i+0x1f0>
 8011852:	f04f 30ff 	mov.w	r0, #4294967295
 8011856:	b004      	add	sp, #16
 8011858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801185c:	6823      	ldr	r3, [r4, #0]
 801185e:	f043 0320 	orr.w	r3, r3, #32
 8011862:	6023      	str	r3, [r4, #0]
 8011864:	4832      	ldr	r0, [pc, #200]	@ (8011930 <_printf_i+0x238>)
 8011866:	2778      	movs	r7, #120	@ 0x78
 8011868:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801186c:	6823      	ldr	r3, [r4, #0]
 801186e:	6831      	ldr	r1, [r6, #0]
 8011870:	061f      	lsls	r7, r3, #24
 8011872:	f851 5b04 	ldr.w	r5, [r1], #4
 8011876:	d402      	bmi.n	801187e <_printf_i+0x186>
 8011878:	065f      	lsls	r7, r3, #25
 801187a:	bf48      	it	mi
 801187c:	b2ad      	uxthmi	r5, r5
 801187e:	6031      	str	r1, [r6, #0]
 8011880:	07d9      	lsls	r1, r3, #31
 8011882:	bf44      	itt	mi
 8011884:	f043 0320 	orrmi.w	r3, r3, #32
 8011888:	6023      	strmi	r3, [r4, #0]
 801188a:	b11d      	cbz	r5, 8011894 <_printf_i+0x19c>
 801188c:	2310      	movs	r3, #16
 801188e:	e7ad      	b.n	80117ec <_printf_i+0xf4>
 8011890:	4826      	ldr	r0, [pc, #152]	@ (801192c <_printf_i+0x234>)
 8011892:	e7e9      	b.n	8011868 <_printf_i+0x170>
 8011894:	6823      	ldr	r3, [r4, #0]
 8011896:	f023 0320 	bic.w	r3, r3, #32
 801189a:	6023      	str	r3, [r4, #0]
 801189c:	e7f6      	b.n	801188c <_printf_i+0x194>
 801189e:	4616      	mov	r6, r2
 80118a0:	e7bd      	b.n	801181e <_printf_i+0x126>
 80118a2:	6833      	ldr	r3, [r6, #0]
 80118a4:	6825      	ldr	r5, [r4, #0]
 80118a6:	6961      	ldr	r1, [r4, #20]
 80118a8:	1d18      	adds	r0, r3, #4
 80118aa:	6030      	str	r0, [r6, #0]
 80118ac:	062e      	lsls	r6, r5, #24
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	d501      	bpl.n	80118b6 <_printf_i+0x1be>
 80118b2:	6019      	str	r1, [r3, #0]
 80118b4:	e002      	b.n	80118bc <_printf_i+0x1c4>
 80118b6:	0668      	lsls	r0, r5, #25
 80118b8:	d5fb      	bpl.n	80118b2 <_printf_i+0x1ba>
 80118ba:	8019      	strh	r1, [r3, #0]
 80118bc:	2300      	movs	r3, #0
 80118be:	6123      	str	r3, [r4, #16]
 80118c0:	4616      	mov	r6, r2
 80118c2:	e7bc      	b.n	801183e <_printf_i+0x146>
 80118c4:	6833      	ldr	r3, [r6, #0]
 80118c6:	1d1a      	adds	r2, r3, #4
 80118c8:	6032      	str	r2, [r6, #0]
 80118ca:	681e      	ldr	r6, [r3, #0]
 80118cc:	6862      	ldr	r2, [r4, #4]
 80118ce:	2100      	movs	r1, #0
 80118d0:	4630      	mov	r0, r6
 80118d2:	f7ee fc7d 	bl	80001d0 <memchr>
 80118d6:	b108      	cbz	r0, 80118dc <_printf_i+0x1e4>
 80118d8:	1b80      	subs	r0, r0, r6
 80118da:	6060      	str	r0, [r4, #4]
 80118dc:	6863      	ldr	r3, [r4, #4]
 80118de:	6123      	str	r3, [r4, #16]
 80118e0:	2300      	movs	r3, #0
 80118e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80118e6:	e7aa      	b.n	801183e <_printf_i+0x146>
 80118e8:	6923      	ldr	r3, [r4, #16]
 80118ea:	4632      	mov	r2, r6
 80118ec:	4649      	mov	r1, r9
 80118ee:	4640      	mov	r0, r8
 80118f0:	47d0      	blx	sl
 80118f2:	3001      	adds	r0, #1
 80118f4:	d0ad      	beq.n	8011852 <_printf_i+0x15a>
 80118f6:	6823      	ldr	r3, [r4, #0]
 80118f8:	079b      	lsls	r3, r3, #30
 80118fa:	d413      	bmi.n	8011924 <_printf_i+0x22c>
 80118fc:	68e0      	ldr	r0, [r4, #12]
 80118fe:	9b03      	ldr	r3, [sp, #12]
 8011900:	4298      	cmp	r0, r3
 8011902:	bfb8      	it	lt
 8011904:	4618      	movlt	r0, r3
 8011906:	e7a6      	b.n	8011856 <_printf_i+0x15e>
 8011908:	2301      	movs	r3, #1
 801190a:	4632      	mov	r2, r6
 801190c:	4649      	mov	r1, r9
 801190e:	4640      	mov	r0, r8
 8011910:	47d0      	blx	sl
 8011912:	3001      	adds	r0, #1
 8011914:	d09d      	beq.n	8011852 <_printf_i+0x15a>
 8011916:	3501      	adds	r5, #1
 8011918:	68e3      	ldr	r3, [r4, #12]
 801191a:	9903      	ldr	r1, [sp, #12]
 801191c:	1a5b      	subs	r3, r3, r1
 801191e:	42ab      	cmp	r3, r5
 8011920:	dcf2      	bgt.n	8011908 <_printf_i+0x210>
 8011922:	e7eb      	b.n	80118fc <_printf_i+0x204>
 8011924:	2500      	movs	r5, #0
 8011926:	f104 0619 	add.w	r6, r4, #25
 801192a:	e7f5      	b.n	8011918 <_printf_i+0x220>
 801192c:	08011e80 	.word	0x08011e80
 8011930:	08011e91 	.word	0x08011e91

08011934 <__swbuf_r>:
 8011934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011936:	460e      	mov	r6, r1
 8011938:	4614      	mov	r4, r2
 801193a:	4605      	mov	r5, r0
 801193c:	b118      	cbz	r0, 8011946 <__swbuf_r+0x12>
 801193e:	6a03      	ldr	r3, [r0, #32]
 8011940:	b90b      	cbnz	r3, 8011946 <__swbuf_r+0x12>
 8011942:	f7ff fae9 	bl	8010f18 <__sinit>
 8011946:	69a3      	ldr	r3, [r4, #24]
 8011948:	60a3      	str	r3, [r4, #8]
 801194a:	89a3      	ldrh	r3, [r4, #12]
 801194c:	071a      	lsls	r2, r3, #28
 801194e:	d501      	bpl.n	8011954 <__swbuf_r+0x20>
 8011950:	6923      	ldr	r3, [r4, #16]
 8011952:	b943      	cbnz	r3, 8011966 <__swbuf_r+0x32>
 8011954:	4621      	mov	r1, r4
 8011956:	4628      	mov	r0, r5
 8011958:	f000 f82a 	bl	80119b0 <__swsetup_r>
 801195c:	b118      	cbz	r0, 8011966 <__swbuf_r+0x32>
 801195e:	f04f 37ff 	mov.w	r7, #4294967295
 8011962:	4638      	mov	r0, r7
 8011964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011966:	6823      	ldr	r3, [r4, #0]
 8011968:	6922      	ldr	r2, [r4, #16]
 801196a:	1a98      	subs	r0, r3, r2
 801196c:	6963      	ldr	r3, [r4, #20]
 801196e:	b2f6      	uxtb	r6, r6
 8011970:	4283      	cmp	r3, r0
 8011972:	4637      	mov	r7, r6
 8011974:	dc05      	bgt.n	8011982 <__swbuf_r+0x4e>
 8011976:	4621      	mov	r1, r4
 8011978:	4628      	mov	r0, r5
 801197a:	f7ff fccd 	bl	8011318 <_fflush_r>
 801197e:	2800      	cmp	r0, #0
 8011980:	d1ed      	bne.n	801195e <__swbuf_r+0x2a>
 8011982:	68a3      	ldr	r3, [r4, #8]
 8011984:	3b01      	subs	r3, #1
 8011986:	60a3      	str	r3, [r4, #8]
 8011988:	6823      	ldr	r3, [r4, #0]
 801198a:	1c5a      	adds	r2, r3, #1
 801198c:	6022      	str	r2, [r4, #0]
 801198e:	701e      	strb	r6, [r3, #0]
 8011990:	6962      	ldr	r2, [r4, #20]
 8011992:	1c43      	adds	r3, r0, #1
 8011994:	429a      	cmp	r2, r3
 8011996:	d004      	beq.n	80119a2 <__swbuf_r+0x6e>
 8011998:	89a3      	ldrh	r3, [r4, #12]
 801199a:	07db      	lsls	r3, r3, #31
 801199c:	d5e1      	bpl.n	8011962 <__swbuf_r+0x2e>
 801199e:	2e0a      	cmp	r6, #10
 80119a0:	d1df      	bne.n	8011962 <__swbuf_r+0x2e>
 80119a2:	4621      	mov	r1, r4
 80119a4:	4628      	mov	r0, r5
 80119a6:	f7ff fcb7 	bl	8011318 <_fflush_r>
 80119aa:	2800      	cmp	r0, #0
 80119ac:	d0d9      	beq.n	8011962 <__swbuf_r+0x2e>
 80119ae:	e7d6      	b.n	801195e <__swbuf_r+0x2a>

080119b0 <__swsetup_r>:
 80119b0:	b538      	push	{r3, r4, r5, lr}
 80119b2:	4b29      	ldr	r3, [pc, #164]	@ (8011a58 <__swsetup_r+0xa8>)
 80119b4:	4605      	mov	r5, r0
 80119b6:	6818      	ldr	r0, [r3, #0]
 80119b8:	460c      	mov	r4, r1
 80119ba:	b118      	cbz	r0, 80119c4 <__swsetup_r+0x14>
 80119bc:	6a03      	ldr	r3, [r0, #32]
 80119be:	b90b      	cbnz	r3, 80119c4 <__swsetup_r+0x14>
 80119c0:	f7ff faaa 	bl	8010f18 <__sinit>
 80119c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119c8:	0719      	lsls	r1, r3, #28
 80119ca:	d422      	bmi.n	8011a12 <__swsetup_r+0x62>
 80119cc:	06da      	lsls	r2, r3, #27
 80119ce:	d407      	bmi.n	80119e0 <__swsetup_r+0x30>
 80119d0:	2209      	movs	r2, #9
 80119d2:	602a      	str	r2, [r5, #0]
 80119d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119d8:	81a3      	strh	r3, [r4, #12]
 80119da:	f04f 30ff 	mov.w	r0, #4294967295
 80119de:	e033      	b.n	8011a48 <__swsetup_r+0x98>
 80119e0:	0758      	lsls	r0, r3, #29
 80119e2:	d512      	bpl.n	8011a0a <__swsetup_r+0x5a>
 80119e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80119e6:	b141      	cbz	r1, 80119fa <__swsetup_r+0x4a>
 80119e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80119ec:	4299      	cmp	r1, r3
 80119ee:	d002      	beq.n	80119f6 <__swsetup_r+0x46>
 80119f0:	4628      	mov	r0, r5
 80119f2:	f7ff fbc3 	bl	801117c <_free_r>
 80119f6:	2300      	movs	r3, #0
 80119f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80119fa:	89a3      	ldrh	r3, [r4, #12]
 80119fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011a00:	81a3      	strh	r3, [r4, #12]
 8011a02:	2300      	movs	r3, #0
 8011a04:	6063      	str	r3, [r4, #4]
 8011a06:	6923      	ldr	r3, [r4, #16]
 8011a08:	6023      	str	r3, [r4, #0]
 8011a0a:	89a3      	ldrh	r3, [r4, #12]
 8011a0c:	f043 0308 	orr.w	r3, r3, #8
 8011a10:	81a3      	strh	r3, [r4, #12]
 8011a12:	6923      	ldr	r3, [r4, #16]
 8011a14:	b94b      	cbnz	r3, 8011a2a <__swsetup_r+0x7a>
 8011a16:	89a3      	ldrh	r3, [r4, #12]
 8011a18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a20:	d003      	beq.n	8011a2a <__swsetup_r+0x7a>
 8011a22:	4621      	mov	r1, r4
 8011a24:	4628      	mov	r0, r5
 8011a26:	f000 f883 	bl	8011b30 <__smakebuf_r>
 8011a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a2e:	f013 0201 	ands.w	r2, r3, #1
 8011a32:	d00a      	beq.n	8011a4a <__swsetup_r+0x9a>
 8011a34:	2200      	movs	r2, #0
 8011a36:	60a2      	str	r2, [r4, #8]
 8011a38:	6962      	ldr	r2, [r4, #20]
 8011a3a:	4252      	negs	r2, r2
 8011a3c:	61a2      	str	r2, [r4, #24]
 8011a3e:	6922      	ldr	r2, [r4, #16]
 8011a40:	b942      	cbnz	r2, 8011a54 <__swsetup_r+0xa4>
 8011a42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011a46:	d1c5      	bne.n	80119d4 <__swsetup_r+0x24>
 8011a48:	bd38      	pop	{r3, r4, r5, pc}
 8011a4a:	0799      	lsls	r1, r3, #30
 8011a4c:	bf58      	it	pl
 8011a4e:	6962      	ldrpl	r2, [r4, #20]
 8011a50:	60a2      	str	r2, [r4, #8]
 8011a52:	e7f4      	b.n	8011a3e <__swsetup_r+0x8e>
 8011a54:	2000      	movs	r0, #0
 8011a56:	e7f7      	b.n	8011a48 <__swsetup_r+0x98>
 8011a58:	2000005c 	.word	0x2000005c

08011a5c <_raise_r>:
 8011a5c:	291f      	cmp	r1, #31
 8011a5e:	b538      	push	{r3, r4, r5, lr}
 8011a60:	4605      	mov	r5, r0
 8011a62:	460c      	mov	r4, r1
 8011a64:	d904      	bls.n	8011a70 <_raise_r+0x14>
 8011a66:	2316      	movs	r3, #22
 8011a68:	6003      	str	r3, [r0, #0]
 8011a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a6e:	bd38      	pop	{r3, r4, r5, pc}
 8011a70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011a72:	b112      	cbz	r2, 8011a7a <_raise_r+0x1e>
 8011a74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a78:	b94b      	cbnz	r3, 8011a8e <_raise_r+0x32>
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	f000 f830 	bl	8011ae0 <_getpid_r>
 8011a80:	4622      	mov	r2, r4
 8011a82:	4601      	mov	r1, r0
 8011a84:	4628      	mov	r0, r5
 8011a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a8a:	f000 b817 	b.w	8011abc <_kill_r>
 8011a8e:	2b01      	cmp	r3, #1
 8011a90:	d00a      	beq.n	8011aa8 <_raise_r+0x4c>
 8011a92:	1c59      	adds	r1, r3, #1
 8011a94:	d103      	bne.n	8011a9e <_raise_r+0x42>
 8011a96:	2316      	movs	r3, #22
 8011a98:	6003      	str	r3, [r0, #0]
 8011a9a:	2001      	movs	r0, #1
 8011a9c:	e7e7      	b.n	8011a6e <_raise_r+0x12>
 8011a9e:	2100      	movs	r1, #0
 8011aa0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011aa4:	4620      	mov	r0, r4
 8011aa6:	4798      	blx	r3
 8011aa8:	2000      	movs	r0, #0
 8011aaa:	e7e0      	b.n	8011a6e <_raise_r+0x12>

08011aac <raise>:
 8011aac:	4b02      	ldr	r3, [pc, #8]	@ (8011ab8 <raise+0xc>)
 8011aae:	4601      	mov	r1, r0
 8011ab0:	6818      	ldr	r0, [r3, #0]
 8011ab2:	f7ff bfd3 	b.w	8011a5c <_raise_r>
 8011ab6:	bf00      	nop
 8011ab8:	2000005c 	.word	0x2000005c

08011abc <_kill_r>:
 8011abc:	b538      	push	{r3, r4, r5, lr}
 8011abe:	4d07      	ldr	r5, [pc, #28]	@ (8011adc <_kill_r+0x20>)
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	4608      	mov	r0, r1
 8011ac6:	4611      	mov	r1, r2
 8011ac8:	602b      	str	r3, [r5, #0]
 8011aca:	f7ef ffaf 	bl	8001a2c <_kill>
 8011ace:	1c43      	adds	r3, r0, #1
 8011ad0:	d102      	bne.n	8011ad8 <_kill_r+0x1c>
 8011ad2:	682b      	ldr	r3, [r5, #0]
 8011ad4:	b103      	cbz	r3, 8011ad8 <_kill_r+0x1c>
 8011ad6:	6023      	str	r3, [r4, #0]
 8011ad8:	bd38      	pop	{r3, r4, r5, pc}
 8011ada:	bf00      	nop
 8011adc:	20009504 	.word	0x20009504

08011ae0 <_getpid_r>:
 8011ae0:	f7ef bf9c 	b.w	8001a1c <_getpid>

08011ae4 <__swhatbuf_r>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	460c      	mov	r4, r1
 8011ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aec:	2900      	cmp	r1, #0
 8011aee:	b096      	sub	sp, #88	@ 0x58
 8011af0:	4615      	mov	r5, r2
 8011af2:	461e      	mov	r6, r3
 8011af4:	da0d      	bge.n	8011b12 <__swhatbuf_r+0x2e>
 8011af6:	89a3      	ldrh	r3, [r4, #12]
 8011af8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011afc:	f04f 0100 	mov.w	r1, #0
 8011b00:	bf14      	ite	ne
 8011b02:	2340      	movne	r3, #64	@ 0x40
 8011b04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011b08:	2000      	movs	r0, #0
 8011b0a:	6031      	str	r1, [r6, #0]
 8011b0c:	602b      	str	r3, [r5, #0]
 8011b0e:	b016      	add	sp, #88	@ 0x58
 8011b10:	bd70      	pop	{r4, r5, r6, pc}
 8011b12:	466a      	mov	r2, sp
 8011b14:	f000 f848 	bl	8011ba8 <_fstat_r>
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	dbec      	blt.n	8011af6 <__swhatbuf_r+0x12>
 8011b1c:	9901      	ldr	r1, [sp, #4]
 8011b1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011b22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011b26:	4259      	negs	r1, r3
 8011b28:	4159      	adcs	r1, r3
 8011b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b2e:	e7eb      	b.n	8011b08 <__swhatbuf_r+0x24>

08011b30 <__smakebuf_r>:
 8011b30:	898b      	ldrh	r3, [r1, #12]
 8011b32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b34:	079d      	lsls	r5, r3, #30
 8011b36:	4606      	mov	r6, r0
 8011b38:	460c      	mov	r4, r1
 8011b3a:	d507      	bpl.n	8011b4c <__smakebuf_r+0x1c>
 8011b3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011b40:	6023      	str	r3, [r4, #0]
 8011b42:	6123      	str	r3, [r4, #16]
 8011b44:	2301      	movs	r3, #1
 8011b46:	6163      	str	r3, [r4, #20]
 8011b48:	b003      	add	sp, #12
 8011b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b4c:	ab01      	add	r3, sp, #4
 8011b4e:	466a      	mov	r2, sp
 8011b50:	f7ff ffc8 	bl	8011ae4 <__swhatbuf_r>
 8011b54:	9f00      	ldr	r7, [sp, #0]
 8011b56:	4605      	mov	r5, r0
 8011b58:	4639      	mov	r1, r7
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	f7ff f886 	bl	8010c6c <_malloc_r>
 8011b60:	b948      	cbnz	r0, 8011b76 <__smakebuf_r+0x46>
 8011b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b66:	059a      	lsls	r2, r3, #22
 8011b68:	d4ee      	bmi.n	8011b48 <__smakebuf_r+0x18>
 8011b6a:	f023 0303 	bic.w	r3, r3, #3
 8011b6e:	f043 0302 	orr.w	r3, r3, #2
 8011b72:	81a3      	strh	r3, [r4, #12]
 8011b74:	e7e2      	b.n	8011b3c <__smakebuf_r+0xc>
 8011b76:	89a3      	ldrh	r3, [r4, #12]
 8011b78:	6020      	str	r0, [r4, #0]
 8011b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b7e:	81a3      	strh	r3, [r4, #12]
 8011b80:	9b01      	ldr	r3, [sp, #4]
 8011b82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011b86:	b15b      	cbz	r3, 8011ba0 <__smakebuf_r+0x70>
 8011b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	f000 f81d 	bl	8011bcc <_isatty_r>
 8011b92:	b128      	cbz	r0, 8011ba0 <__smakebuf_r+0x70>
 8011b94:	89a3      	ldrh	r3, [r4, #12]
 8011b96:	f023 0303 	bic.w	r3, r3, #3
 8011b9a:	f043 0301 	orr.w	r3, r3, #1
 8011b9e:	81a3      	strh	r3, [r4, #12]
 8011ba0:	89a3      	ldrh	r3, [r4, #12]
 8011ba2:	431d      	orrs	r5, r3
 8011ba4:	81a5      	strh	r5, [r4, #12]
 8011ba6:	e7cf      	b.n	8011b48 <__smakebuf_r+0x18>

08011ba8 <_fstat_r>:
 8011ba8:	b538      	push	{r3, r4, r5, lr}
 8011baa:	4d07      	ldr	r5, [pc, #28]	@ (8011bc8 <_fstat_r+0x20>)
 8011bac:	2300      	movs	r3, #0
 8011bae:	4604      	mov	r4, r0
 8011bb0:	4608      	mov	r0, r1
 8011bb2:	4611      	mov	r1, r2
 8011bb4:	602b      	str	r3, [r5, #0]
 8011bb6:	f7ef ff99 	bl	8001aec <_fstat>
 8011bba:	1c43      	adds	r3, r0, #1
 8011bbc:	d102      	bne.n	8011bc4 <_fstat_r+0x1c>
 8011bbe:	682b      	ldr	r3, [r5, #0]
 8011bc0:	b103      	cbz	r3, 8011bc4 <_fstat_r+0x1c>
 8011bc2:	6023      	str	r3, [r4, #0]
 8011bc4:	bd38      	pop	{r3, r4, r5, pc}
 8011bc6:	bf00      	nop
 8011bc8:	20009504 	.word	0x20009504

08011bcc <_isatty_r>:
 8011bcc:	b538      	push	{r3, r4, r5, lr}
 8011bce:	4d06      	ldr	r5, [pc, #24]	@ (8011be8 <_isatty_r+0x1c>)
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	4608      	mov	r0, r1
 8011bd6:	602b      	str	r3, [r5, #0]
 8011bd8:	f7ef ff98 	bl	8001b0c <_isatty>
 8011bdc:	1c43      	adds	r3, r0, #1
 8011bde:	d102      	bne.n	8011be6 <_isatty_r+0x1a>
 8011be0:	682b      	ldr	r3, [r5, #0]
 8011be2:	b103      	cbz	r3, 8011be6 <_isatty_r+0x1a>
 8011be4:	6023      	str	r3, [r4, #0]
 8011be6:	bd38      	pop	{r3, r4, r5, pc}
 8011be8:	20009504 	.word	0x20009504

08011bec <_init>:
 8011bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bee:	bf00      	nop
 8011bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bf2:	bc08      	pop	{r3}
 8011bf4:	469e      	mov	lr, r3
 8011bf6:	4770      	bx	lr

08011bf8 <_fini>:
 8011bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bfa:	bf00      	nop
 8011bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bfe:	bc08      	pop	{r3}
 8011c00:	469e      	mov	lr, r3
 8011c02:	4770      	bx	lr
